!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADJUST_FACTOR	layers_scenes_transitions_nodes/CCTransition.cpp	489;"	d	file:
ALLOC	support/zip_support/unzip.cpp	113;"	d	file:
ATTRIBUTE_NAME	support/tinyxml2/tinyxml2.h	/^        ATTRIBUTE_NAME		            = 0,$/;"	e	enum:tinyxml2::StrPair::__anon37
ATTRIBUTE_VALUE	support/tinyxml2/tinyxml2.h	/^        ATTRIBUTE_VALUE		            = NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon37
ATTRIBUTE_VALUE_LEAVE_ENTITIES	support/tinyxml2/tinyxml2.h	/^        ATTRIBUTE_VALUE_LEAVE_ENTITIES  = NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon37
Accept	support/tinyxml2/tinyxml2.cpp	/^bool XMLComment::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLComment	signature:( XMLVisitor* visitor ) const
Accept	support/tinyxml2/tinyxml2.cpp	/^bool XMLDeclaration::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLVisitor* visitor ) const
Accept	support/tinyxml2/tinyxml2.cpp	/^bool XMLDocument::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLVisitor* visitor ) const
Accept	support/tinyxml2/tinyxml2.cpp	/^bool XMLElement::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLElement	signature:( XMLVisitor* visitor ) const
Accept	support/tinyxml2/tinyxml2.cpp	/^bool XMLText::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLText	signature:( XMLVisitor* visitor ) const
Accept	support/tinyxml2/tinyxml2.cpp	/^bool XMLUnknown::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLVisitor* visitor ) const
Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLVisitor* visitor ) const
Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( XMLVisitor* visitor ) const
Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLVisitor* visitor ) const
Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLVisitor* visitor ) const
Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( XMLVisitor* visitor ) const
Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( XMLVisitor* visitor ) const
Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLVisitor* visitor ) const
Alloc	support/tinyxml2/tinyxml2.h	/^    virtual void* Alloc() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
Alloc	support/tinyxml2/tinyxml2.h	/^    virtual void* Alloc() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
AsyncStruct	textures/CCTextureCache.cpp	/^} AsyncStruct;$/;"	t	typeref:struct:_AsyncStruct	file:
Attribute	support/tinyxml2/tinyxml2.cpp	/^const char* XMLElement::Attribute( const char* name, const char* value ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name, const char* value ) const
Attribute	support/tinyxml2/tinyxml2.h	/^    const char* Attribute( const char* name, const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value=0 ) const
BUFFER_INC_FACTOR	support/zip_support/ZipUtils.cpp	40;"	d	file:
BUFREADCOMMENT	support/zip_support/unzip.cpp	406;"	d	file:
BUF_SIZE	support/tinyxml2/tinyxml2.h	/^        BUF_SIZE = 200$/;"	e	enum:tinyxml2::XMLPrinter::__anon42
BUF_SIZE	support/tinyxml2/tinyxml2.h	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLAttribute::__anon40
Block	support/tinyxml2/tinyxml2.h	/^    struct Block {$/;"	s	class:tinyxml2::MemPoolT	access:private
BoolAttribute	support/tinyxml2/tinyxml2.h	/^    bool	 BoolAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
BoolValue	support/tinyxml2/tinyxml2.h	/^    bool	 BoolValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
CARRIAGE_RETURN	support/tinyxml2/tinyxml2.cpp	/^static const char CARRIAGE_RETURN		= (char)0x0d;			\/\/ CR gets filtered out$/;"	v	file:
CASESENSITIVITYDEFAULTVALUE	support/zip_support/unzip.cpp	373;"	d	file:
CASESENSITIVITYDEFAULTVALUE	support/zip_support/unzip.cpp	375;"	d	file:
CASESENSITIVITYDEFAULT_NO	support/zip_support/unzip.cpp	99;"	d	file:
CCARRAYDATA_FOREACH	support/data_support/ccCArray.h	57;"	d
CCARRAY_FOREACH	cocoa/CCArray.h	51;"	d
CCARRAY_FOREACH_REVERSE	cocoa/CCArray.h	57;"	d
CCARRAY_VERIFY_TYPE	cocoa/CCArray.h	64;"	d
CCARRAY_VERIFY_TYPE	cocoa/CCArray.h	72;"	d
CCAccelAmplitude	actions/CCActionGrid.h	/^class CC_DLL CCAccelAmplitude : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCAccelAmplitude::create	actions/CCActionGrid.cpp	/^CCAccelAmplitude* CCAccelAmplitude::create(CCAction *pAction, float duration)$/;"	f	class:CCAccelAmplitude	signature:(CCAction *pAction, float duration)
CCAccelAmplitude::create	actions/CCActionGrid.h	/^    static CCAccelAmplitude* create(CCAction *pAction, float duration);$/;"	p	class:CCAccelAmplitude	access:public	signature:(CCAction *pAction, float duration)
CCAccelAmplitude::getRate	actions/CCActionGrid.h	/^    inline float getRate(void) { return m_fRate; }$/;"	f	class:CCAccelAmplitude	access:public	signature:(void)
CCAccelAmplitude::initWithAction	actions/CCActionGrid.cpp	/^bool CCAccelAmplitude::initWithAction(CCAction *pAction, float duration)$/;"	f	class:CCAccelAmplitude	signature:(CCAction *pAction, float duration)
CCAccelAmplitude::initWithAction	actions/CCActionGrid.h	/^    bool initWithAction(CCAction *pAction, float duration);$/;"	p	class:CCAccelAmplitude	access:public	signature:(CCAction *pAction, float duration)
CCAccelAmplitude::m_fRate	actions/CCActionGrid.h	/^    float m_fRate;$/;"	m	class:CCAccelAmplitude	access:protected
CCAccelAmplitude::m_pOther	actions/CCActionGrid.h	/^    CCActionInterval *m_pOther;$/;"	m	class:CCAccelAmplitude	access:protected
CCAccelAmplitude::reverse	actions/CCActionGrid.cpp	/^CCActionInterval* CCAccelAmplitude::reverse(void)$/;"	f	class:CCAccelAmplitude	signature:(void)
CCAccelAmplitude::reverse	actions/CCActionGrid.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCAccelAmplitude	access:public	signature:(void)
CCAccelAmplitude::setRate	actions/CCActionGrid.h	/^    inline void setRate(float fRate) { m_fRate = fRate; }$/;"	f	class:CCAccelAmplitude	access:public	signature:(float fRate)
CCAccelAmplitude::startWithTarget	actions/CCActionGrid.cpp	/^void CCAccelAmplitude::startWithTarget(CCNode *pTarget)$/;"	f	class:CCAccelAmplitude	signature:(CCNode *pTarget)
CCAccelAmplitude::startWithTarget	actions/CCActionGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCAccelAmplitude	access:public	signature:(CCNode *pTarget)
CCAccelAmplitude::update	actions/CCActionGrid.cpp	/^void CCAccelAmplitude::update(float time)$/;"	f	class:CCAccelAmplitude	signature:(float time)
CCAccelAmplitude::update	actions/CCActionGrid.h	/^    virtual void update(float time);$/;"	p	class:CCAccelAmplitude	access:public	signature:(float time)
CCAccelAmplitude::~CCAccelAmplitude	actions/CCActionGrid.cpp	/^CCAccelAmplitude::~CCAccelAmplitude(void)$/;"	f	class:CCAccelAmplitude	signature:(void)
CCAccelAmplitude::~CCAccelAmplitude	actions/CCActionGrid.h	/^    ~CCAccelAmplitude(void);$/;"	p	class:CCAccelAmplitude	access:public	signature:(void)
CCAccelDeccelAmplitude	actions/CCActionGrid.h	/^class CC_DLL CCAccelDeccelAmplitude : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCAccelDeccelAmplitude::create	actions/CCActionGrid.cpp	/^CCAccelDeccelAmplitude* CCAccelDeccelAmplitude::create(CCAction *pAction, float duration)$/;"	f	class:CCAccelDeccelAmplitude	signature:(CCAction *pAction, float duration)
CCAccelDeccelAmplitude::create	actions/CCActionGrid.h	/^    static CCAccelDeccelAmplitude* create(CCAction *pAction, float duration);$/;"	p	class:CCAccelDeccelAmplitude	access:public	signature:(CCAction *pAction, float duration)
CCAccelDeccelAmplitude::getRate	actions/CCActionGrid.h	/^    inline float getRate(void) { return m_fRate; }$/;"	f	class:CCAccelDeccelAmplitude	access:public	signature:(void)
CCAccelDeccelAmplitude::initWithAction	actions/CCActionGrid.cpp	/^bool CCAccelDeccelAmplitude::initWithAction(CCAction *pAction, float duration)$/;"	f	class:CCAccelDeccelAmplitude	signature:(CCAction *pAction, float duration)
CCAccelDeccelAmplitude::initWithAction	actions/CCActionGrid.h	/^    bool initWithAction(CCAction *pAction, float duration);$/;"	p	class:CCAccelDeccelAmplitude	access:public	signature:(CCAction *pAction, float duration)
CCAccelDeccelAmplitude::m_fRate	actions/CCActionGrid.h	/^    float m_fRate;$/;"	m	class:CCAccelDeccelAmplitude	access:protected
CCAccelDeccelAmplitude::m_pOther	actions/CCActionGrid.h	/^    CCActionInterval *m_pOther;$/;"	m	class:CCAccelDeccelAmplitude	access:protected
CCAccelDeccelAmplitude::reverse	actions/CCActionGrid.cpp	/^CCActionInterval* CCAccelDeccelAmplitude::reverse(void)$/;"	f	class:CCAccelDeccelAmplitude	signature:(void)
CCAccelDeccelAmplitude::reverse	actions/CCActionGrid.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCAccelDeccelAmplitude	access:public	signature:(void)
CCAccelDeccelAmplitude::setRate	actions/CCActionGrid.h	/^    inline void setRate(float fRate) { m_fRate = fRate; }$/;"	f	class:CCAccelDeccelAmplitude	access:public	signature:(float fRate)
CCAccelDeccelAmplitude::startWithTarget	actions/CCActionGrid.cpp	/^void CCAccelDeccelAmplitude::startWithTarget(CCNode *pTarget)$/;"	f	class:CCAccelDeccelAmplitude	signature:(CCNode *pTarget)
CCAccelDeccelAmplitude::startWithTarget	actions/CCActionGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCAccelDeccelAmplitude	access:public	signature:(CCNode *pTarget)
CCAccelDeccelAmplitude::update	actions/CCActionGrid.cpp	/^void CCAccelDeccelAmplitude::update(float time)$/;"	f	class:CCAccelDeccelAmplitude	signature:(float time)
CCAccelDeccelAmplitude::update	actions/CCActionGrid.h	/^    virtual void update(float time);$/;"	p	class:CCAccelDeccelAmplitude	access:public	signature:(float time)
CCAccelDeccelAmplitude::~CCAccelDeccelAmplitude	actions/CCActionGrid.cpp	/^CCAccelDeccelAmplitude::~CCAccelDeccelAmplitude(void)$/;"	f	class:CCAccelDeccelAmplitude	signature:(void)
CCAccelDeccelAmplitude::~CCAccelDeccelAmplitude	actions/CCActionGrid.h	/^    virtual ~CCAccelDeccelAmplitude(void);$/;"	p	class:CCAccelDeccelAmplitude	access:public	signature:(void)
CCAcceleration	platform/CCAccelerometerDelegate.h	/^class CCAcceleration$/;"	c
CCAcceleration::timestamp	platform/CCAccelerometerDelegate.h	/^    double timestamp;$/;"	m	class:CCAcceleration	access:public
CCAcceleration::x	platform/CCAccelerometerDelegate.h	/^    double x;$/;"	m	class:CCAcceleration	access:public
CCAcceleration::y	platform/CCAccelerometerDelegate.h	/^    double y;$/;"	m	class:CCAcceleration	access:public
CCAcceleration::z	platform/CCAccelerometerDelegate.h	/^    double z;$/;"	m	class:CCAcceleration	access:public
CCAccelerometerDelegate	platform/CCAccelerometerDelegate.h	/^class CC_DLL CCAccelerometerDelegate$/;"	c
CCAccelerometerDelegate::didAccelerate	platform/CCAccelerometerDelegate.h	/^    virtual void didAccelerate(CCAcceleration* pAccelerationValue) {CC_UNUSED_PARAM(pAccelerationValue);}$/;"	f	class:CCAccelerometerDelegate	access:public	signature:(CCAcceleration* pAccelerationValue)
CCAction	actions/CCAction.cpp	/^CCAction::CCAction()$/;"	f	class:CCAction	signature:()
CCAction	actions/CCAction.h	/^    CCAction(void);$/;"	p	class:CCAction	access:public	signature:(void)
CCAction	actions/CCAction.h	/^class CC_DLL CCAction : public CCObject $/;"	c	inherits:CCObject
CCAction::CCAction	actions/CCAction.cpp	/^CCAction::CCAction()$/;"	f	class:CCAction	signature:()
CCAction::CCAction	actions/CCAction.h	/^    CCAction(void);$/;"	p	class:CCAction	access:public	signature:(void)
CCAction::copyWithZone	actions/CCAction.cpp	/^CCObject* CCAction::copyWithZone(CCZone *pZone)$/;"	f	class:CCAction	signature:(CCZone *pZone)
CCAction::copyWithZone	actions/CCAction.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCAction	access:public	signature:(CCZone *pZone)
CCAction::create	actions/CCAction.cpp	/^CCAction* CCAction::create()$/;"	f	class:CCAction	signature:()
CCAction::create	actions/CCAction.h	/^    static CCAction* create();$/;"	p	class:CCAction	access:public	signature:()
CCAction::description	actions/CCAction.cpp	/^const char* CCAction::description()$/;"	f	class:CCAction	signature:()
CCAction::description	actions/CCAction.h	/^    const char* description();$/;"	p	class:CCAction	access:public	signature:()
CCAction::getOriginalTarget	actions/CCAction.h	/^    inline CCNode* getOriginalTarget(void) { return m_pOriginalTarget; } $/;"	f	class:CCAction	access:public	signature:(void)
CCAction::getTag	actions/CCAction.h	/^    inline int getTag(void) { return m_nTag; }$/;"	f	class:CCAction	access:public	signature:(void)
CCAction::getTarget	actions/CCAction.h	/^    inline CCNode* getTarget(void) { return m_pTarget; }$/;"	f	class:CCAction	access:public	signature:(void)
CCAction::isDone	actions/CCAction.cpp	/^bool CCAction::isDone()$/;"	f	class:CCAction	signature:()
CCAction::isDone	actions/CCAction.h	/^    virtual bool isDone(void);$/;"	p	class:CCAction	access:public	signature:(void)
CCAction::m_nTag	actions/CCAction.h	/^    int     m_nTag;$/;"	m	class:CCAction	access:protected
CCAction::m_pOriginalTarget	actions/CCAction.h	/^    CCNode    *m_pOriginalTarget;$/;"	m	class:CCAction	access:protected
CCAction::m_pTarget	actions/CCAction.h	/^    CCNode    *m_pTarget;$/;"	m	class:CCAction	access:protected
CCAction::setOriginalTarget	actions/CCAction.h	/^    inline void setOriginalTarget(CCNode *pOriginalTarget) { m_pOriginalTarget = pOriginalTarget; }$/;"	f	class:CCAction	access:public	signature:(CCNode *pOriginalTarget)
CCAction::setTag	actions/CCAction.h	/^    inline void setTag(int nTag) { m_nTag = nTag; }$/;"	f	class:CCAction	access:public	signature:(int nTag)
CCAction::setTarget	actions/CCAction.h	/^    inline void setTarget(CCNode *pTarget) { m_pTarget = pTarget; }$/;"	f	class:CCAction	access:public	signature:(CCNode *pTarget)
CCAction::startWithTarget	actions/CCAction.cpp	/^void CCAction::startWithTarget(CCNode *aTarget)$/;"	f	class:CCAction	signature:(CCNode *aTarget)
CCAction::startWithTarget	actions/CCAction.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCAction	access:public	signature:(CCNode *pTarget)
CCAction::step	actions/CCAction.cpp	/^void CCAction::step(float dt)$/;"	f	class:CCAction	signature:(float dt)
CCAction::step	actions/CCAction.h	/^    virtual void step(float dt);$/;"	p	class:CCAction	access:public	signature:(float dt)
CCAction::stop	actions/CCAction.cpp	/^void CCAction::stop()$/;"	f	class:CCAction	signature:()
CCAction::stop	actions/CCAction.h	/^    virtual void stop(void);$/;"	p	class:CCAction	access:public	signature:(void)
CCAction::update	actions/CCAction.cpp	/^void CCAction::update(float time)$/;"	f	class:CCAction	signature:(float time)
CCAction::update	actions/CCAction.h	/^    virtual void update(float time);$/;"	p	class:CCAction	access:public	signature:(float time)
CCAction::~CCAction	actions/CCAction.cpp	/^CCAction::~CCAction()$/;"	f	class:CCAction	signature:()
CCAction::~CCAction	actions/CCAction.h	/^    virtual ~CCAction(void);$/;"	p	class:CCAction	access:public	signature:(void)
CCActionCamera	actions/CCActionCamera.h	/^    CCActionCamera()$/;"	f	class:CCActionCamera	access:public	signature:()
CCActionCamera	actions/CCActionCamera.h	/^class CC_DLL CCActionCamera : public CCActionInterval \/\/<NSCopying> $/;"	c	inherits:CCActionInterval
CCActionCamera::CCActionCamera	actions/CCActionCamera.h	/^    CCActionCamera()$/;"	f	class:CCActionCamera	access:public	signature:()
CCActionCamera::m_fCenterXOrig	actions/CCActionCamera.h	/^    float m_fCenterXOrig;$/;"	m	class:CCActionCamera	access:protected
CCActionCamera::m_fCenterYOrig	actions/CCActionCamera.h	/^    float m_fCenterYOrig;$/;"	m	class:CCActionCamera	access:protected
CCActionCamera::m_fCenterZOrig	actions/CCActionCamera.h	/^    float m_fCenterZOrig;$/;"	m	class:CCActionCamera	access:protected
CCActionCamera::m_fEyeXOrig	actions/CCActionCamera.h	/^    float m_fEyeXOrig;$/;"	m	class:CCActionCamera	access:protected
CCActionCamera::m_fEyeYOrig	actions/CCActionCamera.h	/^    float m_fEyeYOrig;$/;"	m	class:CCActionCamera	access:protected
CCActionCamera::m_fEyeZOrig	actions/CCActionCamera.h	/^    float m_fEyeZOrig;$/;"	m	class:CCActionCamera	access:protected
CCActionCamera::m_fUpXOrig	actions/CCActionCamera.h	/^    float m_fUpXOrig;$/;"	m	class:CCActionCamera	access:protected
CCActionCamera::m_fUpYOrig	actions/CCActionCamera.h	/^    float m_fUpYOrig;$/;"	m	class:CCActionCamera	access:protected
CCActionCamera::m_fUpZOrig	actions/CCActionCamera.h	/^    float m_fUpZOrig;$/;"	m	class:CCActionCamera	access:protected
CCActionCamera::reverse	actions/CCActionCamera.cpp	/^CCActionInterval * CCActionCamera::reverse()$/;"	f	class:CCActionCamera	signature:()
CCActionCamera::reverse	actions/CCActionCamera.h	/^    virtual CCActionInterval * reverse();$/;"	p	class:CCActionCamera	access:public	signature:()
CCActionCamera::startWithTarget	actions/CCActionCamera.cpp	/^void CCActionCamera::startWithTarget(CCNode *pTarget)$/;"	f	class:CCActionCamera	signature:(CCNode *pTarget)
CCActionCamera::startWithTarget	actions/CCActionCamera.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCActionCamera	access:public	signature:(CCNode *pTarget)
CCActionCamera::~CCActionCamera	actions/CCActionCamera.h	/^    virtual ~CCActionCamera(){}$/;"	f	class:CCActionCamera	access:public	signature:()
CCActionEase	actions/CCActionEase.h	/^class CC_DLL CCActionEase : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCActionEase::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCActionEase::copyWithZone(CCZone *pZone)$/;"	f	class:CCActionEase	signature:(CCZone *pZone)
CCActionEase::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCActionEase	access:public	signature:(CCZone* pZone)
CCActionEase::create	actions/CCActionEase.cpp	/^CCActionEase* CCActionEase::create(CCActionInterval *pAction)$/;"	f	class:CCActionEase	signature:(CCActionInterval *pAction)
CCActionEase::create	actions/CCActionEase.h	/^    static CCActionEase* create(CCActionInterval *pAction);$/;"	p	class:CCActionEase	access:public	signature:(CCActionInterval *pAction)
CCActionEase::getInnerAction	actions/CCActionEase.cpp	/^CCActionInterval* CCActionEase::getInnerAction()$/;"	f	class:CCActionEase	signature:()
CCActionEase::getInnerAction	actions/CCActionEase.h	/^    virtual CCActionInterval* getInnerAction();$/;"	p	class:CCActionEase	access:public	signature:()
CCActionEase::initWithAction	actions/CCActionEase.cpp	/^bool CCActionEase::initWithAction(CCActionInterval *pAction)$/;"	f	class:CCActionEase	signature:(CCActionInterval *pAction)
CCActionEase::initWithAction	actions/CCActionEase.h	/^    bool initWithAction(CCActionInterval *pAction);$/;"	p	class:CCActionEase	access:public	signature:(CCActionInterval *pAction)
CCActionEase::m_pInner	actions/CCActionEase.h	/^    CCActionInterval *m_pInner;$/;"	m	class:CCActionEase	access:protected
CCActionEase::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCActionEase::reverse(void)$/;"	f	class:CCActionEase	signature:(void)
CCActionEase::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCActionEase	access:public	signature:(void)
CCActionEase::startWithTarget	actions/CCActionEase.cpp	/^void CCActionEase::startWithTarget(CCNode *pTarget)$/;"	f	class:CCActionEase	signature:(CCNode *pTarget)
CCActionEase::startWithTarget	actions/CCActionEase.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCActionEase	access:public	signature:(CCNode *pTarget)
CCActionEase::stop	actions/CCActionEase.cpp	/^void CCActionEase::stop(void)$/;"	f	class:CCActionEase	signature:(void)
CCActionEase::stop	actions/CCActionEase.h	/^    virtual void stop(void);$/;"	p	class:CCActionEase	access:public	signature:(void)
CCActionEase::update	actions/CCActionEase.cpp	/^void CCActionEase::update(float time)$/;"	f	class:CCActionEase	signature:(float time)
CCActionEase::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCActionEase	access:public	signature:(float time)
CCActionEase::~CCActionEase	actions/CCActionEase.cpp	/^CCActionEase::~CCActionEase(void)$/;"	f	class:CCActionEase	signature:(void)
CCActionEase::~CCActionEase	actions/CCActionEase.h	/^    virtual ~CCActionEase(void);$/;"	p	class:CCActionEase	access:public	signature:(void)
CCActionInstant	actions/CCActionInstant.cpp	/^CCActionInstant::CCActionInstant() {$/;"	f	class:CCActionInstant	signature:()
CCActionInstant	actions/CCActionInstant.h	/^    CCActionInstant();$/;"	p	class:CCActionInstant	access:public	signature:()
CCActionInstant	actions/CCActionInstant.h	/^class CC_DLL CCActionInstant : public CCFiniteTimeAction \/\/<NSCopying>$/;"	c	inherits:CCFiniteTimeAction
CCActionInstant::CCActionInstant	actions/CCActionInstant.cpp	/^CCActionInstant::CCActionInstant() {$/;"	f	class:CCActionInstant	signature:()
CCActionInstant::CCActionInstant	actions/CCActionInstant.h	/^    CCActionInstant();$/;"	p	class:CCActionInstant	access:public	signature:()
CCActionInstant::copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCActionInstant::copyWithZone(CCZone *pZone) {$/;"	f	class:CCActionInstant	signature:(CCZone *pZone)
CCActionInstant::copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCActionInstant	access:public	signature:(CCZone *pZone)
CCActionInstant::isDone	actions/CCActionInstant.cpp	/^bool CCActionInstant::isDone() {$/;"	f	class:CCActionInstant	signature:()
CCActionInstant::isDone	actions/CCActionInstant.h	/^    virtual bool isDone(void);$/;"	p	class:CCActionInstant	access:public	signature:(void)
CCActionInstant::reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction * CCActionInstant::reverse() {$/;"	f	class:CCActionInstant	signature:()
CCActionInstant::reverse	actions/CCActionInstant.h	/^    virtual CCFiniteTimeAction * reverse(void);$/;"	p	class:CCActionInstant	access:public	signature:(void)
CCActionInstant::step	actions/CCActionInstant.cpp	/^void CCActionInstant::step(float dt) {$/;"	f	class:CCActionInstant	signature:(float dt)
CCActionInstant::step	actions/CCActionInstant.h	/^    virtual void step(float dt);$/;"	p	class:CCActionInstant	access:public	signature:(float dt)
CCActionInstant::update	actions/CCActionInstant.cpp	/^void CCActionInstant::update(float time) {$/;"	f	class:CCActionInstant	signature:(float time)
CCActionInstant::update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCActionInstant	access:public	signature:(float time)
CCActionInstant::~CCActionInstant	actions/CCActionInstant.h	/^    virtual ~CCActionInstant(){}$/;"	f	class:CCActionInstant	access:public	signature:()
CCActionInterval	actions/CCActionInterval.h	/^class CC_DLL CCActionInterval : public CCFiniteTimeAction$/;"	c	inherits:CCFiniteTimeAction
CCActionInterval::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCActionInterval::copyWithZone(CCZone *pZone)$/;"	f	class:CCActionInterval	signature:(CCZone *pZone)
CCActionInterval::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCActionInterval	access:public	signature:(CCZone* pZone)
CCActionInterval::create	actions/CCActionInterval.cpp	/^CCActionInterval* CCActionInterval::create(float d)$/;"	f	class:CCActionInterval	signature:(float d)
CCActionInterval::create	actions/CCActionInterval.h	/^    static CCActionInterval* create(float d);$/;"	p	class:CCActionInterval	access:public	signature:(float d)
CCActionInterval::getAmplitudeRate	actions/CCActionInterval.cpp	/^float CCActionInterval::getAmplitudeRate(void)$/;"	f	class:CCActionInterval	signature:(void)
CCActionInterval::getAmplitudeRate	actions/CCActionInterval.h	/^    float getAmplitudeRate(void);$/;"	p	class:CCActionInterval	access:public	signature:(void)
CCActionInterval::getElapsed	actions/CCActionInterval.h	/^    inline float getElapsed(void) { return m_elapsed; }$/;"	f	class:CCActionInterval	access:public	signature:(void)
CCActionInterval::initWithDuration	actions/CCActionInterval.cpp	/^bool CCActionInterval::initWithDuration(float d)$/;"	f	class:CCActionInterval	signature:(float d)
CCActionInterval::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float d);$/;"	p	class:CCActionInterval	access:public	signature:(float d)
CCActionInterval::isDone	actions/CCActionInterval.cpp	/^bool CCActionInterval::isDone(void)$/;"	f	class:CCActionInterval	signature:(void)
CCActionInterval::isDone	actions/CCActionInterval.h	/^    virtual bool isDone(void);$/;"	p	class:CCActionInterval	access:public	signature:(void)
CCActionInterval::m_bFirstTick	actions/CCActionInterval.h	/^    bool   m_bFirstTick;$/;"	m	class:CCActionInterval	access:protected
CCActionInterval::m_elapsed	actions/CCActionInterval.h	/^    float m_elapsed;$/;"	m	class:CCActionInterval	access:protected
CCActionInterval::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCActionInterval::reverse(void)$/;"	f	class:CCActionInterval	signature:(void)
CCActionInterval::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCActionInterval	access:public	signature:(void)
CCActionInterval::setAmplitudeRate	actions/CCActionInterval.cpp	/^void CCActionInterval::setAmplitudeRate(float amp)$/;"	f	class:CCActionInterval	signature:(float amp)
CCActionInterval::setAmplitudeRate	actions/CCActionInterval.h	/^    void setAmplitudeRate(float amp);$/;"	p	class:CCActionInterval	access:public	signature:(float amp)
CCActionInterval::startWithTarget	actions/CCActionInterval.cpp	/^void CCActionInterval::startWithTarget(CCNode *pTarget)$/;"	f	class:CCActionInterval	signature:(CCNode *pTarget)
CCActionInterval::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCActionInterval	access:public	signature:(CCNode *pTarget)
CCActionInterval::step	actions/CCActionInterval.cpp	/^void CCActionInterval::step(float dt)$/;"	f	class:CCActionInterval	signature:(float dt)
CCActionInterval::step	actions/CCActionInterval.h	/^    virtual void step(float dt);$/;"	p	class:CCActionInterval	access:public	signature:(float dt)
CCActionManager	actions/CCActionManager.cpp	/^CCActionManager::CCActionManager(void)$/;"	f	class:CCActionManager	signature:(void)
CCActionManager	actions/CCActionManager.h	/^    CCActionManager(void);$/;"	p	class:CCActionManager	access:public	signature:(void)
CCActionManager	actions/CCActionManager.h	/^class CC_DLL CCActionManager : public CCObject$/;"	c	inherits:CCObject
CCActionManager::CCActionManager	actions/CCActionManager.cpp	/^CCActionManager::CCActionManager(void)$/;"	f	class:CCActionManager	signature:(void)
CCActionManager::CCActionManager	actions/CCActionManager.h	/^    CCActionManager(void);$/;"	p	class:CCActionManager	access:public	signature:(void)
CCActionManager::actionAllocWithHashElement	actions/CCActionManager.cpp	/^void CCActionManager::actionAllocWithHashElement(tHashElement *pElement)$/;"	f	class:CCActionManager	signature:(tHashElement *pElement)
CCActionManager::actionAllocWithHashElement	actions/CCActionManager.h	/^    void actionAllocWithHashElement(struct _hashElement *pElement);$/;"	p	class:CCActionManager	access:protected	signature:(struct _hashElement *pElement)
CCActionManager::addAction	actions/CCActionManager.cpp	/^void CCActionManager::addAction(CCAction *pAction, CCNode *pTarget, bool paused)$/;"	f	class:CCActionManager	signature:(CCAction *pAction, CCNode *pTarget, bool paused)
CCActionManager::addAction	actions/CCActionManager.h	/^    void addAction(CCAction *pAction, CCNode *pTarget, bool paused);$/;"	p	class:CCActionManager	access:public	signature:(CCAction *pAction, CCNode *pTarget, bool paused)
CCActionManager::deleteHashElement	actions/CCActionManager.cpp	/^void CCActionManager::deleteHashElement(tHashElement *pElement)$/;"	f	class:CCActionManager	signature:(tHashElement *pElement)
CCActionManager::deleteHashElement	actions/CCActionManager.h	/^    void deleteHashElement(struct _hashElement *pElement);$/;"	p	class:CCActionManager	access:protected	signature:(struct _hashElement *pElement)
CCActionManager::getActionByTag	actions/CCActionManager.cpp	/^CCAction* CCActionManager::getActionByTag(unsigned int tag, CCObject *pTarget)$/;"	f	class:CCActionManager	signature:(unsigned int tag, CCObject *pTarget)
CCActionManager::getActionByTag	actions/CCActionManager.h	/^    CCAction* getActionByTag(unsigned int tag, CCObject *pTarget);$/;"	p	class:CCActionManager	access:public	signature:(unsigned int tag, CCObject *pTarget)
CCActionManager::m_bCurrentTargetSalvaged	actions/CCActionManager.h	/^    bool            m_bCurrentTargetSalvaged;$/;"	m	class:CCActionManager	access:protected
CCActionManager::m_pCurrentTarget	actions/CCActionManager.h	/^    struct _hashElement    *m_pCurrentTarget;$/;"	m	class:CCActionManager	typeref:struct:CCActionManager::_hashElement	access:protected
CCActionManager::m_pTargets	actions/CCActionManager.h	/^    struct _hashElement    *m_pTargets;$/;"	m	class:CCActionManager	typeref:struct:CCActionManager::_hashElement	access:protected
CCActionManager::numberOfRunningActionsInTarget	actions/CCActionManager.cpp	/^unsigned int CCActionManager::numberOfRunningActionsInTarget(CCObject *pTarget)$/;"	f	class:CCActionManager	signature:(CCObject *pTarget)
CCActionManager::numberOfRunningActionsInTarget	actions/CCActionManager.h	/^    unsigned int numberOfRunningActionsInTarget(CCObject *pTarget);$/;"	p	class:CCActionManager	access:public	signature:(CCObject *pTarget)
CCActionManager::pauseAllRunningActions	actions/CCActionManager.cpp	/^CCSet* CCActionManager::pauseAllRunningActions()$/;"	f	class:CCActionManager	signature:()
CCActionManager::pauseAllRunningActions	actions/CCActionManager.h	/^    CCSet* pauseAllRunningActions();$/;"	p	class:CCActionManager	access:public	signature:()
CCActionManager::pauseTarget	actions/CCActionManager.cpp	/^void CCActionManager::pauseTarget(CCObject *pTarget)$/;"	f	class:CCActionManager	signature:(CCObject *pTarget)
CCActionManager::pauseTarget	actions/CCActionManager.h	/^    void pauseTarget(CCObject *pTarget);$/;"	p	class:CCActionManager	access:public	signature:(CCObject *pTarget)
CCActionManager::removeAction	actions/CCActionManager.cpp	/^void CCActionManager::removeAction(CCAction *pAction)$/;"	f	class:CCActionManager	signature:(CCAction *pAction)
CCActionManager::removeAction	actions/CCActionManager.h	/^    void removeAction(CCAction *pAction);$/;"	p	class:CCActionManager	access:public	signature:(CCAction *pAction)
CCActionManager::removeActionAtIndex	actions/CCActionManager.cpp	/^void CCActionManager::removeActionAtIndex(unsigned int uIndex, tHashElement *pElement)$/;"	f	class:CCActionManager	signature:(unsigned int uIndex, tHashElement *pElement)
CCActionManager::removeActionAtIndex	actions/CCActionManager.h	/^    void removeActionAtIndex(unsigned int uIndex, struct _hashElement *pElement);$/;"	p	class:CCActionManager	access:protected	signature:(unsigned int uIndex, struct _hashElement *pElement)
CCActionManager::removeActionByTag	actions/CCActionManager.cpp	/^void CCActionManager::removeActionByTag(unsigned int tag, CCObject *pTarget)$/;"	f	class:CCActionManager	signature:(unsigned int tag, CCObject *pTarget)
CCActionManager::removeActionByTag	actions/CCActionManager.h	/^    void removeActionByTag(unsigned int tag, CCObject *pTarget);$/;"	p	class:CCActionManager	access:public	signature:(unsigned int tag, CCObject *pTarget)
CCActionManager::removeAllActions	actions/CCActionManager.cpp	/^void CCActionManager::removeAllActions(void)$/;"	f	class:CCActionManager	signature:(void)
CCActionManager::removeAllActions	actions/CCActionManager.h	/^    void removeAllActions(void);$/;"	p	class:CCActionManager	access:public	signature:(void)
CCActionManager::removeAllActionsFromTarget	actions/CCActionManager.cpp	/^void CCActionManager::removeAllActionsFromTarget(CCObject *pTarget)$/;"	f	class:CCActionManager	signature:(CCObject *pTarget)
CCActionManager::removeAllActionsFromTarget	actions/CCActionManager.h	/^    void removeAllActionsFromTarget(CCObject *pTarget);$/;"	p	class:CCActionManager	access:public	signature:(CCObject *pTarget)
CCActionManager::resumeTarget	actions/CCActionManager.cpp	/^void CCActionManager::resumeTarget(CCObject *pTarget)$/;"	f	class:CCActionManager	signature:(CCObject *pTarget)
CCActionManager::resumeTarget	actions/CCActionManager.h	/^    void resumeTarget(CCObject *pTarget);$/;"	p	class:CCActionManager	access:public	signature:(CCObject *pTarget)
CCActionManager::resumeTargets	actions/CCActionManager.cpp	/^void CCActionManager::resumeTargets(cocos2d::CCSet *targetsToResume)$/;"	f	class:CCActionManager	signature:(cocos2d::CCSet *targetsToResume)
CCActionManager::resumeTargets	actions/CCActionManager.h	/^    void resumeTargets(CCSet *targetsToResume);$/;"	p	class:CCActionManager	access:public	signature:(CCSet *targetsToResume)
CCActionManager::update	actions/CCActionManager.cpp	/^void CCActionManager::update(float dt)$/;"	f	class:CCActionManager	signature:(float dt)
CCActionManager::update	actions/CCActionManager.h	/^    void update(float dt);$/;"	p	class:CCActionManager	access:protected	signature:(float dt)
CCActionManager::~CCActionManager	actions/CCActionManager.cpp	/^CCActionManager::~CCActionManager(void)$/;"	f	class:CCActionManager	signature:(void)
CCActionManager::~CCActionManager	actions/CCActionManager.h	/^    ~CCActionManager(void);$/;"	p	class:CCActionManager	access:public	signature:(void)
CCActionTween	actions/CCActionTween.h	/^class CC_DLL CCActionTween : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCActionTween::create	actions/CCActionTween.cpp	/^CCActionTween* CCActionTween::create(float aDuration, const char* key, float from, float to)$/;"	f	class:CCActionTween	signature:(float aDuration, const char* key, float from, float to)
CCActionTween::create	actions/CCActionTween.h	/^    static CCActionTween* create(float aDuration, const char* key, float from, float to);$/;"	p	class:CCActionTween	access:public	signature:(float aDuration, const char* key, float from, float to)
CCActionTween::initWithDuration	actions/CCActionTween.cpp	/^bool CCActionTween::initWithDuration(float aDuration, const char* key, float from, float to)$/;"	f	class:CCActionTween	signature:(float aDuration, const char* key, float from, float to)
CCActionTween::initWithDuration	actions/CCActionTween.h	/^    bool initWithDuration(float aDuration, const char* key, float from, float to);$/;"	p	class:CCActionTween	access:public	signature:(float aDuration, const char* key, float from, float to)
CCActionTween::m_fDelta	actions/CCActionTween.h	/^    float            m_fDelta;$/;"	m	class:CCActionTween	access:public
CCActionTween::m_fFrom	actions/CCActionTween.h	/^    float            m_fFrom, m_fTo;$/;"	m	class:CCActionTween	access:public
CCActionTween::m_fTo	actions/CCActionTween.h	/^    float            m_fFrom, m_fTo;$/;"	m	class:CCActionTween	access:public
CCActionTween::m_strKey	actions/CCActionTween.h	/^    std::string        m_strKey;$/;"	m	class:CCActionTween	access:public
CCActionTween::reverse	actions/CCActionTween.cpp	/^CCActionInterval* CCActionTween::reverse()$/;"	f	class:CCActionTween	signature:()
CCActionTween::reverse	actions/CCActionTween.h	/^    CCActionInterval* reverse();$/;"	p	class:CCActionTween	access:public	signature:()
CCActionTween::startWithTarget	actions/CCActionTween.cpp	/^void CCActionTween::startWithTarget(CCNode *pTarget)$/;"	f	class:CCActionTween	signature:(CCNode *pTarget)
CCActionTween::startWithTarget	actions/CCActionTween.h	/^    void startWithTarget(CCNode *pTarget);$/;"	p	class:CCActionTween	access:public	signature:(CCNode *pTarget)
CCActionTween::update	actions/CCActionTween.cpp	/^void CCActionTween::update(float dt)$/;"	f	class:CCActionTween	signature:(float dt)
CCActionTween::update	actions/CCActionTween.h	/^    void update(float dt);$/;"	p	class:CCActionTween	access:public	signature:(float dt)
CCActionTweenDelegate	actions/CCActionTween.h	/^class CC_DLL CCActionTweenDelegate$/;"	c
CCActionTweenDelegate::updateTweenAction	actions/CCActionTween.h	/^    virtual void updateTweenAction(float value, const char* key) = 0;$/;"	p	class:CCActionTweenDelegate	access:public	signature:(float value, const char* key)
CCActionTweenDelegate::~CCActionTweenDelegate	actions/CCActionTween.h	/^    virtual ~CCActionTweenDelegate() {}$/;"	f	class:CCActionTweenDelegate	access:public	signature:()
CCAffineTransform	cocoa/CCAffineTransform.h	/^struct CCAffineTransform {$/;"	s
CCAffineTransform::a	cocoa/CCAffineTransform.h	/^  float a, b, c, d;$/;"	m	struct:CCAffineTransform	access:public
CCAffineTransform::b	cocoa/CCAffineTransform.h	/^  float a, b, c, d;$/;"	m	struct:CCAffineTransform	access:public
CCAffineTransform::c	cocoa/CCAffineTransform.h	/^  float a, b, c, d;$/;"	m	struct:CCAffineTransform	access:public
CCAffineTransform::d	cocoa/CCAffineTransform.h	/^  float a, b, c, d;$/;"	m	struct:CCAffineTransform	access:public
CCAffineTransform::tx	cocoa/CCAffineTransform.h	/^  float tx, ty;$/;"	m	struct:CCAffineTransform	access:public
CCAffineTransform::ty	cocoa/CCAffineTransform.h	/^  float tx, ty;$/;"	m	struct:CCAffineTransform	access:public
CCAffineTransformConcat	cocoa/CCAffineTransform.cpp	/^CCAffineTransform CCAffineTransformConcat(const CCAffineTransform& t1, const CCAffineTransform& t2)$/;"	f	signature:(const CCAffineTransform& t1, const CCAffineTransform& t2)
CCAffineTransformConcat	cocoa/CCAffineTransform.h	/^CC_DLL CCAffineTransform CCAffineTransformConcat(const CCAffineTransform& t1, const CCAffineTransform& t2);$/;"	p	signature:(const CCAffineTransform& t1, const CCAffineTransform& t2)
CCAffineTransformEqualToTransform	cocoa/CCAffineTransform.cpp	/^bool CCAffineTransformEqualToTransform(const CCAffineTransform& t1, const CCAffineTransform& t2)$/;"	f	signature:(const CCAffineTransform& t1, const CCAffineTransform& t2)
CCAffineTransformEqualToTransform	cocoa/CCAffineTransform.h	/^CC_DLL bool CCAffineTransformEqualToTransform(const CCAffineTransform& t1, const CCAffineTransform& t2);$/;"	p	signature:(const CCAffineTransform& t1, const CCAffineTransform& t2)
CCAffineTransformIdentity	cocoa/CCAffineTransform.cpp	/^extern const CCAffineTransform CCAffineTransformIdentity = CCAffineTransformMakeIdentity();$/;"	v
CCAffineTransformInvert	cocoa/CCAffineTransform.cpp	/^CCAffineTransform CCAffineTransformInvert(const CCAffineTransform& t)$/;"	f	signature:(const CCAffineTransform& t)
CCAffineTransformInvert	cocoa/CCAffineTransform.h	/^CC_DLL CCAffineTransform CCAffineTransformInvert(const CCAffineTransform& t);$/;"	p	signature:(const CCAffineTransform& t)
CCAffineTransformMake	cocoa/CCAffineTransform.h	39;"	d
CCAffineTransformMakeIdentity	cocoa/CCAffineTransform.cpp	/^CCAffineTransform CCAffineTransformMakeIdentity()$/;"	f	signature:()
CCAffineTransformMakeIdentity	cocoa/CCAffineTransform.h	/^CC_DLL CCAffineTransform CCAffineTransformMakeIdentity();$/;"	p	signature:()
CCAffineTransformRotate	cocoa/CCAffineTransform.cpp	/^CCAffineTransform CCAffineTransformRotate(const CCAffineTransform& t, float anAngle)$/;"	f	signature:(const CCAffineTransform& t, float anAngle)
CCAffineTransformRotate	cocoa/CCAffineTransform.h	/^CC_DLL CCAffineTransform CCAffineTransformRotate(const CCAffineTransform& aTransform, float anAngle);$/;"	p	signature:(const CCAffineTransform& aTransform, float anAngle)
CCAffineTransformScale	cocoa/CCAffineTransform.cpp	/^CCAffineTransform CCAffineTransformScale(const CCAffineTransform& t, float sx, float sy)$/;"	f	signature:(const CCAffineTransform& t, float sx, float sy)
CCAffineTransformScale	cocoa/CCAffineTransform.h	/^CC_DLL CCAffineTransform CCAffineTransformScale(const CCAffineTransform& t, float sx, float sy);$/;"	p	signature:(const CCAffineTransform& t, float sx, float sy)
CCAffineTransformTranslate	cocoa/CCAffineTransform.cpp	/^CCAffineTransform CCAffineTransformTranslate(const CCAffineTransform& t, float tx, float ty)$/;"	f	signature:(const CCAffineTransform& t, float tx, float ty)
CCAffineTransformTranslate	cocoa/CCAffineTransform.h	/^CC_DLL CCAffineTransform CCAffineTransformTranslate(const CCAffineTransform& t, float tx, float ty);$/;"	p	signature:(const CCAffineTransform& t, float tx, float ty)
CCAnimate	actions/CCActionInterval.cpp	/^CCAnimate::CCAnimate()$/;"	f	class:CCAnimate	signature:()
CCAnimate	actions/CCActionInterval.h	/^    CCAnimate();$/;"	p	class:CCAnimate	access:public	signature:()
CCAnimate	actions/CCActionInterval.h	/^class CC_DLL CCAnimate : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCAnimate::CCAnimate	actions/CCActionInterval.cpp	/^CCAnimate::CCAnimate()$/;"	f	class:CCAnimate	signature:()
CCAnimate::CCAnimate	actions/CCActionInterval.h	/^    CCAnimate();$/;"	p	class:CCAnimate	access:public	signature:()
CCAnimate::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCAnimate::copyWithZone(CCZone *pZone)$/;"	f	class:CCAnimate	signature:(CCZone *pZone)
CCAnimate::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCAnimate	access:public	signature:(CCZone* pZone)
CCAnimate::create	actions/CCActionInterval.cpp	/^CCAnimate* CCAnimate::create(CCAnimation *pAnimation)$/;"	f	class:CCAnimate	signature:(CCAnimation *pAnimation)
CCAnimate::create	actions/CCActionInterval.h	/^    static CCAnimate* create(CCAnimation *pAnimation);$/;"	p	class:CCAnimate	access:public	signature:(CCAnimation *pAnimation)
CCAnimate::initWithAnimation	actions/CCActionInterval.cpp	/^bool CCAnimate::initWithAnimation(CCAnimation *pAnimation)$/;"	f	class:CCAnimate	signature:(CCAnimation *pAnimation)
CCAnimate::initWithAnimation	actions/CCActionInterval.h	/^    bool initWithAnimation(CCAnimation *pAnimation);$/;"	p	class:CCAnimate	access:public	signature:(CCAnimation *pAnimation)
CCAnimate::m_nNextFrame	actions/CCActionInterval.h	/^    int                m_nNextFrame;$/;"	m	class:CCAnimate	access:protected
CCAnimate::m_pOrigFrame	actions/CCActionInterval.h	/^    CCSpriteFrame*  m_pOrigFrame;$/;"	m	class:CCAnimate	access:protected
CCAnimate::m_pSplitTimes	actions/CCActionInterval.h	/^    std::vector<float>* m_pSplitTimes;$/;"	m	class:CCAnimate	access:protected
CCAnimate::m_uExecutedLoops	actions/CCActionInterval.h	/^       unsigned int    m_uExecutedLoops;$/;"	m	class:CCAnimate	access:protected
CCAnimate::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCAnimate::reverse(void)$/;"	f	class:CCAnimate	signature:(void)
CCAnimate::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCAnimate	access:public	signature:(void)
CCAnimate::startWithTarget	actions/CCActionInterval.cpp	/^void CCAnimate::startWithTarget(CCNode *pTarget)$/;"	f	class:CCAnimate	signature:(CCNode *pTarget)
CCAnimate::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCAnimate	access:public	signature:(CCNode *pTarget)
CCAnimate::stop	actions/CCActionInterval.cpp	/^void CCAnimate::stop(void)$/;"	f	class:CCAnimate	signature:(void)
CCAnimate::stop	actions/CCActionInterval.h	/^    virtual void stop(void);$/;"	p	class:CCAnimate	access:public	signature:(void)
CCAnimate::update	actions/CCActionInterval.cpp	/^void CCAnimate::update(float t)$/;"	f	class:CCAnimate	signature:(float t)
CCAnimate::update	actions/CCActionInterval.h	/^    virtual void update(float t);$/;"	p	class:CCAnimate	access:public	signature:(float t)
CCAnimate::~CCAnimate	actions/CCActionInterval.cpp	/^CCAnimate::~CCAnimate()$/;"	f	class:CCAnimate	signature:()
CCAnimate::~CCAnimate	actions/CCActionInterval.h	/^    ~CCAnimate();$/;"	p	class:CCAnimate	access:public	signature:()
CCAnimation	sprite_nodes/CCAnimation.cpp	/^CCAnimation::CCAnimation()$/;"	f	class:CCAnimation	signature:()
CCAnimation	sprite_nodes/CCAnimation.h	/^    CCAnimation();$/;"	p	class:CCAnimation	access:public	signature:()
CCAnimation	sprite_nodes/CCAnimation.h	/^class CC_DLL CCAnimation : public CCObject$/;"	c	inherits:CCObject
CCAnimation::CCAnimation	sprite_nodes/CCAnimation.cpp	/^CCAnimation::CCAnimation()$/;"	f	class:CCAnimation	signature:()
CCAnimation::CCAnimation	sprite_nodes/CCAnimation.h	/^    CCAnimation();$/;"	p	class:CCAnimation	access:public	signature:()
CCAnimation::addSpriteFrame	sprite_nodes/CCAnimation.cpp	/^void CCAnimation::addSpriteFrame(CCSpriteFrame *pFrame)$/;"	f	class:CCAnimation	signature:(CCSpriteFrame *pFrame)
CCAnimation::addSpriteFrame	sprite_nodes/CCAnimation.h	/^    void addSpriteFrame(CCSpriteFrame *pFrame);$/;"	p	class:CCAnimation	access:public	signature:(CCSpriteFrame *pFrame)
CCAnimation::addSpriteFrameWithFileName	sprite_nodes/CCAnimation.cpp	/^void CCAnimation::addSpriteFrameWithFileName(const char *pszFileName)$/;"	f	class:CCAnimation	signature:(const char *pszFileName)
CCAnimation::addSpriteFrameWithFileName	sprite_nodes/CCAnimation.h	/^    void addSpriteFrameWithFileName(const char *pszFileName);$/;"	p	class:CCAnimation	access:public	signature:(const char *pszFileName)
CCAnimation::addSpriteFrameWithTexture	sprite_nodes/CCAnimation.cpp	/^void CCAnimation::addSpriteFrameWithTexture(CCTexture2D *pobTexture, const CCRect& rect)$/;"	f	class:CCAnimation	signature:(CCTexture2D *pobTexture, const CCRect& rect)
CCAnimation::addSpriteFrameWithTexture	sprite_nodes/CCAnimation.h	/^    void addSpriteFrameWithTexture(CCTexture2D* pobTexture, const CCRect& rect);$/;"	p	class:CCAnimation	access:public	signature:(CCTexture2D* pobTexture, const CCRect& rect)
CCAnimation::copyWithZone	sprite_nodes/CCAnimation.cpp	/^CCObject* CCAnimation::copyWithZone(CCZone* pZone)$/;"	f	class:CCAnimation	signature:(CCZone* pZone)
CCAnimation::copyWithZone	sprite_nodes/CCAnimation.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCAnimation	access:public	signature:(CCZone* pZone)
CCAnimation::create	sprite_nodes/CCAnimation.cpp	/^CCAnimation* CCAnimation::create(CCArray* arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops)$/;"	f	class:CCAnimation	signature:(CCArray* arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops)
CCAnimation::create	sprite_nodes/CCAnimation.cpp	/^CCAnimation* CCAnimation::create(void)$/;"	f	class:CCAnimation	signature:(void)
CCAnimation::create	sprite_nodes/CCAnimation.h	/^    static CCAnimation* create(CCArray *arrayOfAnimationFrameNames, float delayPerUnit) {$/;"	f	class:CCAnimation	access:public	signature:(CCArray *arrayOfAnimationFrameNames, float delayPerUnit)
CCAnimation::create	sprite_nodes/CCAnimation.h	/^    static CCAnimation* create(CCArray *arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops);$/;"	p	class:CCAnimation	access:public	signature:(CCArray *arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops)
CCAnimation::create	sprite_nodes/CCAnimation.h	/^    static CCAnimation* create(void);$/;"	p	class:CCAnimation	access:public	signature:(void)
CCAnimation::createWithSpriteFrames	sprite_nodes/CCAnimation.cpp	/^CCAnimation* CCAnimation::createWithSpriteFrames(CCArray *frames, float delay\/* = 0.0f*\/)$/;"	f	class:CCAnimation	signature:(CCArray *frames, float delay )
CCAnimation::createWithSpriteFrames	sprite_nodes/CCAnimation.h	/^    static CCAnimation* createWithSpriteFrames(CCArray* arrayOfSpriteFrameNames, float delay = 0.0f);$/;"	p	class:CCAnimation	access:public	signature:(CCArray* arrayOfSpriteFrameNames, float delay = 0.0f)
CCAnimation::getDuration	sprite_nodes/CCAnimation.cpp	/^float CCAnimation::getDuration(void)$/;"	f	class:CCAnimation	signature:(void)
CCAnimation::init	sprite_nodes/CCAnimation.cpp	/^bool CCAnimation::init()$/;"	f	class:CCAnimation	signature:()
CCAnimation::init	sprite_nodes/CCAnimation.h	/^    bool init();$/;"	p	class:CCAnimation	access:public	signature:()
CCAnimation::initWithAnimationFrames	sprite_nodes/CCAnimation.cpp	/^bool CCAnimation::initWithAnimationFrames(CCArray* arrayOfAnimationFrames, float delayPerUnit, unsigned int loops)$/;"	f	class:CCAnimation	signature:(CCArray* arrayOfAnimationFrames, float delayPerUnit, unsigned int loops)
CCAnimation::initWithAnimationFrames	sprite_nodes/CCAnimation.h	/^    bool initWithAnimationFrames(CCArray* arrayOfAnimationFrames, float delayPerUnit, unsigned int loops);$/;"	p	class:CCAnimation	access:public	signature:(CCArray* arrayOfAnimationFrames, float delayPerUnit, unsigned int loops)
CCAnimation::initWithSpriteFrames	sprite_nodes/CCAnimation.cpp	/^bool CCAnimation::initWithSpriteFrames(CCArray *pFrames, float delay\/* = 0.0f*\/)$/;"	f	class:CCAnimation	signature:(CCArray *pFrames, float delay )
CCAnimation::initWithSpriteFrames	sprite_nodes/CCAnimation.h	/^    bool initWithSpriteFrames(CCArray *pFrames, float delay = 0.0f);$/;"	p	class:CCAnimation	access:public	signature:(CCArray *pFrames, float delay = 0.0f)
CCAnimation::~CCAnimation	sprite_nodes/CCAnimation.cpp	/^CCAnimation::~CCAnimation(void)$/;"	f	class:CCAnimation	signature:(void)
CCAnimation::~CCAnimation	sprite_nodes/CCAnimation.h	/^    ~CCAnimation(void);$/;"	p	class:CCAnimation	access:public	signature:(void)
CCAnimationCache	sprite_nodes/CCAnimationCache.cpp	/^CCAnimationCache::CCAnimationCache()$/;"	f	class:CCAnimationCache	signature:()
CCAnimationCache	sprite_nodes/CCAnimationCache.h	/^    CCAnimationCache();$/;"	p	class:CCAnimationCache	access:public	signature:()
CCAnimationCache	sprite_nodes/CCAnimationCache.h	/^class CC_DLL CCAnimationCache : public CCObject$/;"	c	inherits:CCObject
CCAnimationCache::CCAnimationCache	sprite_nodes/CCAnimationCache.cpp	/^CCAnimationCache::CCAnimationCache()$/;"	f	class:CCAnimationCache	signature:()
CCAnimationCache::CCAnimationCache	sprite_nodes/CCAnimationCache.h	/^    CCAnimationCache();$/;"	p	class:CCAnimationCache	access:public	signature:()
CCAnimationCache::addAnimation	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::addAnimation(CCAnimation *animation, const char * name)$/;"	f	class:CCAnimationCache	signature:(CCAnimation *animation, const char * name)
CCAnimationCache::addAnimation	sprite_nodes/CCAnimationCache.h	/^    void addAnimation(CCAnimation *animation, const char * name);$/;"	p	class:CCAnimationCache	access:public	signature:(CCAnimation *animation, const char * name)
CCAnimationCache::addAnimationsWithDictionary	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::addAnimationsWithDictionary(CCDictionary* dictionary)$/;"	f	class:CCAnimationCache	signature:(CCDictionary* dictionary)
CCAnimationCache::addAnimationsWithDictionary	sprite_nodes/CCAnimationCache.h	/^    void addAnimationsWithDictionary(CCDictionary* dictionary);$/;"	p	class:CCAnimationCache	access:public	signature:(CCDictionary* dictionary)
CCAnimationCache::addAnimationsWithFile	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::addAnimationsWithFile(const char* plist)$/;"	f	class:CCAnimationCache	signature:(const char* plist)
CCAnimationCache::addAnimationsWithFile	sprite_nodes/CCAnimationCache.h	/^    void addAnimationsWithFile(const char* plist);$/;"	p	class:CCAnimationCache	access:public	signature:(const char* plist)
CCAnimationCache::animationByName	sprite_nodes/CCAnimationCache.cpp	/^CCAnimation* CCAnimationCache::animationByName(const char* name)$/;"	f	class:CCAnimationCache	signature:(const char* name)
CCAnimationCache::animationByName	sprite_nodes/CCAnimationCache.h	/^    CCAnimation* animationByName(const char* name);$/;"	p	class:CCAnimationCache	access:public	signature:(const char* name)
CCAnimationCache::init	sprite_nodes/CCAnimationCache.cpp	/^bool CCAnimationCache::init()$/;"	f	class:CCAnimationCache	signature:()
CCAnimationCache::init	sprite_nodes/CCAnimationCache.h	/^    bool init(void);$/;"	p	class:CCAnimationCache	access:public	signature:(void)
CCAnimationCache::m_pAnimations	sprite_nodes/CCAnimationCache.h	/^    CCDictionary* m_pAnimations;$/;"	m	class:CCAnimationCache	access:private
CCAnimationCache::parseVersion1	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::parseVersion1(CCDictionary* animations)$/;"	f	class:CCAnimationCache	signature:(CCDictionary* animations)
CCAnimationCache::parseVersion1	sprite_nodes/CCAnimationCache.h	/^    void parseVersion1(CCDictionary* animations);$/;"	p	class:CCAnimationCache	access:private	signature:(CCDictionary* animations)
CCAnimationCache::parseVersion2	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::parseVersion2(CCDictionary* animations)$/;"	f	class:CCAnimationCache	signature:(CCDictionary* animations)
CCAnimationCache::parseVersion2	sprite_nodes/CCAnimationCache.h	/^    void parseVersion2(CCDictionary* animations);$/;"	p	class:CCAnimationCache	access:private	signature:(CCDictionary* animations)
CCAnimationCache::purgeSharedAnimationCache	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::purgeSharedAnimationCache(void)$/;"	f	class:CCAnimationCache	signature:(void)
CCAnimationCache::purgeSharedAnimationCache	sprite_nodes/CCAnimationCache.h	/^    static void purgeSharedAnimationCache(void);$/;"	p	class:CCAnimationCache	access:public	signature:(void)
CCAnimationCache::removeAnimationByName	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::removeAnimationByName(const char* name)$/;"	f	class:CCAnimationCache	signature:(const char* name)
CCAnimationCache::removeAnimationByName	sprite_nodes/CCAnimationCache.h	/^    void removeAnimationByName(const char* name);$/;"	p	class:CCAnimationCache	access:public	signature:(const char* name)
CCAnimationCache::s_pSharedAnimationCache	sprite_nodes/CCAnimationCache.h	/^    static CCAnimationCache* s_pSharedAnimationCache;$/;"	m	class:CCAnimationCache	access:private
CCAnimationCache::sharedAnimationCache	sprite_nodes/CCAnimationCache.cpp	/^CCAnimationCache* CCAnimationCache::sharedAnimationCache(void)$/;"	f	class:CCAnimationCache	signature:(void)
CCAnimationCache::sharedAnimationCache	sprite_nodes/CCAnimationCache.h	/^    static CCAnimationCache* sharedAnimationCache(void);$/;"	p	class:CCAnimationCache	access:public	signature:(void)
CCAnimationCache::~CCAnimationCache	sprite_nodes/CCAnimationCache.cpp	/^CCAnimationCache::~CCAnimationCache()$/;"	f	class:CCAnimationCache	signature:()
CCAnimationCache::~CCAnimationCache	sprite_nodes/CCAnimationCache.h	/^    ~CCAnimationCache();$/;"	p	class:CCAnimationCache	access:public	signature:()
CCAnimationFrame	sprite_nodes/CCAnimation.cpp	/^CCAnimationFrame::CCAnimationFrame()$/;"	f	class:CCAnimationFrame	signature:()
CCAnimationFrame	sprite_nodes/CCAnimation.h	/^    CCAnimationFrame();$/;"	p	class:CCAnimationFrame	access:public	signature:()
CCAnimationFrame	sprite_nodes/CCAnimation.h	/^class CC_DLL CCAnimationFrame : public CCObject$/;"	c	inherits:CCObject
CCAnimationFrame::CCAnimationFrame	sprite_nodes/CCAnimation.cpp	/^CCAnimationFrame::CCAnimationFrame()$/;"	f	class:CCAnimationFrame	signature:()
CCAnimationFrame::CCAnimationFrame	sprite_nodes/CCAnimation.h	/^    CCAnimationFrame();$/;"	p	class:CCAnimationFrame	access:public	signature:()
CCAnimationFrame::copyWithZone	sprite_nodes/CCAnimation.cpp	/^CCObject* CCAnimationFrame::copyWithZone(CCZone* pZone)$/;"	f	class:CCAnimationFrame	signature:(CCZone* pZone)
CCAnimationFrame::copyWithZone	sprite_nodes/CCAnimation.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCAnimationFrame	access:public	signature:(CCZone* pZone)
CCAnimationFrame::initWithSpriteFrame	sprite_nodes/CCAnimation.cpp	/^bool CCAnimationFrame::initWithSpriteFrame(CCSpriteFrame* spriteFrame, float delayUnits, CCDictionary* userInfo)$/;"	f	class:CCAnimationFrame	signature:(CCSpriteFrame* spriteFrame, float delayUnits, CCDictionary* userInfo)
CCAnimationFrame::initWithSpriteFrame	sprite_nodes/CCAnimation.h	/^    bool initWithSpriteFrame(CCSpriteFrame* spriteFrame, float delayUnits, CCDictionary* userInfo);$/;"	p	class:CCAnimationFrame	access:public	signature:(CCSpriteFrame* spriteFrame, float delayUnits, CCDictionary* userInfo)
CCAnimationFrame::~CCAnimationFrame	sprite_nodes/CCAnimation.cpp	/^CCAnimationFrame::~CCAnimationFrame()$/;"	f	class:CCAnimationFrame	signature:()
CCAnimationFrame::~CCAnimationFrame	sprite_nodes/CCAnimation.h	/^    virtual ~CCAnimationFrame();$/;"	p	class:CCAnimationFrame	access:public	signature:()
CCAnimationFrameDisplayedNotification	include/ccMacros.h	255;"	d
CCApplicationProtocol	platform/CCApplicationProtocol.h	/^class CC_DLL CCApplicationProtocol$/;"	c
CCApplicationProtocol::applicationDidEnterBackground	platform/CCApplicationProtocol.h	/^    virtual void applicationDidEnterBackground() = 0;$/;"	p	class:CCApplicationProtocol	access:public	signature:()
CCApplicationProtocol::applicationDidFinishLaunching	platform/CCApplicationProtocol.h	/^    virtual bool applicationDidFinishLaunching() = 0;$/;"	p	class:CCApplicationProtocol	access:public	signature:()
CCApplicationProtocol::applicationWillEnterForeground	platform/CCApplicationProtocol.h	/^    virtual void applicationWillEnterForeground() = 0;$/;"	p	class:CCApplicationProtocol	access:public	signature:()
CCApplicationProtocol::getCurrentLanguage	platform/CCApplicationProtocol.h	/^    virtual ccLanguageType getCurrentLanguage() = 0;$/;"	p	class:CCApplicationProtocol	access:public	signature:()
CCApplicationProtocol::getTargetPlatform	platform/CCApplicationProtocol.h	/^    virtual TargetPlatform getTargetPlatform() = 0;$/;"	p	class:CCApplicationProtocol	access:public	signature:()
CCApplicationProtocol::setAnimationInterval	platform/CCApplicationProtocol.h	/^    virtual void setAnimationInterval(double interval) = 0;$/;"	p	class:CCApplicationProtocol	access:public	signature:(double interval)
CCApplicationProtocol::~CCApplicationProtocol	platform/CCApplicationProtocol.h	/^    virtual ~CCApplicationProtocol() {}$/;"	f	class:CCApplicationProtocol	access:public	signature:()
CCArray	cocoa/CCArray.cpp	/^CCArray::CCArray()$/;"	f	class:CCArray	signature:()
CCArray	cocoa/CCArray.cpp	/^CCArray::CCArray(unsigned int capacity)$/;"	f	class:CCArray	signature:(unsigned int capacity)
CCArray	cocoa/CCArray.h	/^    CCArray();$/;"	p	class:CCArray	access:public	signature:()
CCArray	cocoa/CCArray.h	/^    CCArray(unsigned int capacity);$/;"	p	class:CCArray	access:public	signature:(unsigned int capacity)
CCArray	cocoa/CCArray.h	/^class CC_DLL CCArray : public CCObject$/;"	c	inherits:CCObject
CCArray::CCArray	cocoa/CCArray.cpp	/^CCArray::CCArray()$/;"	f	class:CCArray	signature:()
CCArray::CCArray	cocoa/CCArray.cpp	/^CCArray::CCArray(unsigned int capacity)$/;"	f	class:CCArray	signature:(unsigned int capacity)
CCArray::CCArray	cocoa/CCArray.h	/^    CCArray();$/;"	p	class:CCArray	access:public	signature:()
CCArray::CCArray	cocoa/CCArray.h	/^    CCArray(unsigned int capacity);$/;"	p	class:CCArray	access:public	signature:(unsigned int capacity)
CCArray::addObject	cocoa/CCArray.cpp	/^void CCArray::addObject(CCObject* object)$/;"	f	class:CCArray	signature:(CCObject* object)
CCArray::addObject	cocoa/CCArray.h	/^    void addObject(CCObject* object);$/;"	p	class:CCArray	access:public	signature:(CCObject* object)
CCArray::addObjectsFromArray	cocoa/CCArray.cpp	/^void CCArray::addObjectsFromArray(CCArray* otherArray)$/;"	f	class:CCArray	signature:(CCArray* otherArray)
CCArray::addObjectsFromArray	cocoa/CCArray.h	/^    void addObjectsFromArray(CCArray* otherArray);$/;"	p	class:CCArray	access:public	signature:(CCArray* otherArray)
CCArray::capacity	cocoa/CCArray.cpp	/^unsigned int CCArray::capacity()$/;"	f	class:CCArray	signature:()
CCArray::capacity	cocoa/CCArray.h	/^    unsigned int capacity();$/;"	p	class:CCArray	access:public	signature:()
CCArray::containsObject	cocoa/CCArray.cpp	/^bool CCArray::containsObject(CCObject* object)$/;"	f	class:CCArray	signature:(CCObject* object)
CCArray::containsObject	cocoa/CCArray.h	/^    bool containsObject(CCObject* object);$/;"	p	class:CCArray	access:public	signature:(CCObject* object)
CCArray::copyWithZone	cocoa/CCArray.cpp	/^CCObject* CCArray::copyWithZone(CCZone* pZone)$/;"	f	class:CCArray	signature:(CCZone* pZone)
CCArray::copyWithZone	cocoa/CCArray.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCArray	access:public	signature:(CCZone* pZone)
CCArray::count	cocoa/CCArray.cpp	/^unsigned int CCArray::count()$/;"	f	class:CCArray	signature:()
CCArray::count	cocoa/CCArray.h	/^    unsigned int count();$/;"	p	class:CCArray	access:public	signature:()
CCArray::create	cocoa/CCArray.cpp	/^CCArray* CCArray::create()$/;"	f	class:CCArray	signature:()
CCArray::create	cocoa/CCArray.cpp	/^CCArray* CCArray::create(CCObject* pObject, ...)$/;"	f	class:CCArray	signature:(CCObject* pObject, ...)
CCArray::create	cocoa/CCArray.h	/^    static CCArray* create();$/;"	p	class:CCArray	access:public	signature:()
CCArray::create	cocoa/CCArray.h	/^    static CCArray* create(CCObject* pObject, ...);$/;"	p	class:CCArray	access:public	signature:(CCObject* pObject, ...)
CCArray::createWithArray	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithArray(CCArray* otherArray)$/;"	f	class:CCArray	signature:(CCArray* otherArray)
CCArray::createWithArray	cocoa/CCArray.h	/^    static CCArray* createWithArray(CCArray* otherArray);$/;"	p	class:CCArray	access:public	signature:(CCArray* otherArray)
CCArray::createWithCapacity	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithCapacity(unsigned int capacity)$/;"	f	class:CCArray	signature:(unsigned int capacity)
CCArray::createWithCapacity	cocoa/CCArray.h	/^    static CCArray* createWithCapacity(unsigned int capacity);$/;"	p	class:CCArray	access:public	signature:(unsigned int capacity)
CCArray::createWithContentsOfFile	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithContentsOfFile(const char* pFileName)$/;"	f	class:CCArray	signature:(const char* pFileName)
CCArray::createWithContentsOfFile	cocoa/CCArray.h	/^    static CCArray* createWithContentsOfFile(const char* pFileName);$/;"	p	class:CCArray	access:public	signature:(const char* pFileName)
CCArray::createWithContentsOfFileThreadSafe	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithContentsOfFileThreadSafe(const char* pFileName)$/;"	f	class:CCArray	signature:(const char* pFileName)
CCArray::createWithContentsOfFileThreadSafe	cocoa/CCArray.h	/^    static CCArray* createWithContentsOfFileThreadSafe(const char* pFileName);$/;"	p	class:CCArray	access:public	signature:(const char* pFileName)
CCArray::createWithObject	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithObject(CCObject* pObject)$/;"	f	class:CCArray	signature:(CCObject* pObject)
CCArray::createWithObject	cocoa/CCArray.h	/^    static CCArray* createWithObject(CCObject* pObject);$/;"	p	class:CCArray	access:public	signature:(CCObject* pObject)
CCArray::data	cocoa/CCArray.h	/^    ccArray* data;$/;"	m	class:CCArray	access:public
CCArray::exchangeObject	cocoa/CCArray.cpp	/^void CCArray::exchangeObject(CCObject* object1, CCObject* object2)$/;"	f	class:CCArray	signature:(CCObject* object1, CCObject* object2)
CCArray::exchangeObject	cocoa/CCArray.h	/^    void exchangeObject(CCObject* object1, CCObject* object2);$/;"	p	class:CCArray	access:public	signature:(CCObject* object1, CCObject* object2)
CCArray::exchangeObjectAtIndex	cocoa/CCArray.cpp	/^void CCArray::exchangeObjectAtIndex(unsigned int index1, unsigned int index2)$/;"	f	class:CCArray	signature:(unsigned int index1, unsigned int index2)
CCArray::exchangeObjectAtIndex	cocoa/CCArray.h	/^    void exchangeObjectAtIndex(unsigned int index1, unsigned int index2);$/;"	p	class:CCArray	access:public	signature:(unsigned int index1, unsigned int index2)
CCArray::fastRemoveObject	cocoa/CCArray.cpp	/^void CCArray::fastRemoveObject(CCObject* object)$/;"	f	class:CCArray	signature:(CCObject* object)
CCArray::fastRemoveObject	cocoa/CCArray.h	/^    void fastRemoveObject(CCObject* object);$/;"	p	class:CCArray	access:public	signature:(CCObject* object)
CCArray::fastRemoveObjectAtIndex	cocoa/CCArray.cpp	/^void CCArray::fastRemoveObjectAtIndex(unsigned int index)$/;"	f	class:CCArray	signature:(unsigned int index)
CCArray::fastRemoveObjectAtIndex	cocoa/CCArray.h	/^    void fastRemoveObjectAtIndex(unsigned int index);$/;"	p	class:CCArray	access:public	signature:(unsigned int index)
CCArray::indexOfObject	cocoa/CCArray.cpp	/^unsigned int CCArray::indexOfObject(CCObject* object)$/;"	f	class:CCArray	signature:(CCObject* object)
CCArray::indexOfObject	cocoa/CCArray.h	/^    unsigned int indexOfObject(CCObject* object);$/;"	p	class:CCArray	access:public	signature:(CCObject* object)
CCArray::init	cocoa/CCArray.cpp	/^bool CCArray::init()$/;"	f	class:CCArray	signature:()
CCArray::init	cocoa/CCArray.h	/^    bool init();$/;"	p	class:CCArray	access:public	signature:()
CCArray::initWithArray	cocoa/CCArray.cpp	/^bool CCArray::initWithArray(CCArray* otherArray)$/;"	f	class:CCArray	signature:(CCArray* otherArray)
CCArray::initWithArray	cocoa/CCArray.h	/^    bool initWithArray(CCArray* otherArray);$/;"	p	class:CCArray	access:public	signature:(CCArray* otherArray)
CCArray::initWithCapacity	cocoa/CCArray.cpp	/^bool CCArray::initWithCapacity(unsigned int capacity)$/;"	f	class:CCArray	signature:(unsigned int capacity)
CCArray::initWithCapacity	cocoa/CCArray.h	/^    bool initWithCapacity(unsigned int capacity);$/;"	p	class:CCArray	access:public	signature:(unsigned int capacity)
CCArray::initWithObject	cocoa/CCArray.cpp	/^bool CCArray::initWithObject(CCObject* pObject)$/;"	f	class:CCArray	signature:(CCObject* pObject)
CCArray::initWithObject	cocoa/CCArray.h	/^    bool initWithObject(CCObject* pObject);$/;"	p	class:CCArray	access:public	signature:(CCObject* pObject)
CCArray::initWithObjects	cocoa/CCArray.cpp	/^bool CCArray::initWithObjects(CCObject* pObject, ...)$/;"	f	class:CCArray	signature:(CCObject* pObject, ...)
CCArray::initWithObjects	cocoa/CCArray.h	/^    bool initWithObjects(CCObject* pObject, ...);$/;"	p	class:CCArray	access:public	signature:(CCObject* pObject, ...)
CCArray::insertObject	cocoa/CCArray.cpp	/^void CCArray::insertObject(CCObject* object, unsigned int index)$/;"	f	class:CCArray	signature:(CCObject* object, unsigned int index)
CCArray::insertObject	cocoa/CCArray.h	/^    void insertObject(CCObject* object, unsigned int index);$/;"	p	class:CCArray	access:public	signature:(CCObject* object, unsigned int index)
CCArray::isEqualToArray	cocoa/CCArray.cpp	/^bool CCArray::isEqualToArray(CCArray* otherArray)$/;"	f	class:CCArray	signature:(CCArray* otherArray)
CCArray::isEqualToArray	cocoa/CCArray.h	/^    bool isEqualToArray(CCArray* pOtherArray);$/;"	p	class:CCArray	access:public	signature:(CCArray* pOtherArray)
CCArray::lastObject	cocoa/CCArray.cpp	/^CCObject* CCArray::lastObject()$/;"	f	class:CCArray	signature:()
CCArray::lastObject	cocoa/CCArray.h	/^    CCObject* lastObject();$/;"	p	class:CCArray	access:public	signature:()
CCArray::objectAtIndex	cocoa/CCArray.cpp	/^CCObject* CCArray::objectAtIndex(unsigned int index)$/;"	f	class:CCArray	signature:(unsigned int index)
CCArray::objectAtIndex	cocoa/CCArray.h	/^    CCObject* objectAtIndex(unsigned int index);$/;"	p	class:CCArray	access:public	signature:(unsigned int index)
CCArray::randomObject	cocoa/CCArray.cpp	/^CCObject* CCArray::randomObject()$/;"	f	class:CCArray	signature:()
CCArray::randomObject	cocoa/CCArray.h	/^    CCObject* randomObject();$/;"	p	class:CCArray	access:public	signature:()
CCArray::reduceMemoryFootprint	cocoa/CCArray.cpp	/^void CCArray::reduceMemoryFootprint()$/;"	f	class:CCArray	signature:()
CCArray::reduceMemoryFootprint	cocoa/CCArray.h	/^    void reduceMemoryFootprint();$/;"	p	class:CCArray	access:public	signature:()
CCArray::removeAllObjects	cocoa/CCArray.cpp	/^void CCArray::removeAllObjects()$/;"	f	class:CCArray	signature:()
CCArray::removeAllObjects	cocoa/CCArray.h	/^    void removeAllObjects();$/;"	p	class:CCArray	access:public	signature:()
CCArray::removeLastObject	cocoa/CCArray.cpp	/^void CCArray::removeLastObject(bool bReleaseObj)$/;"	f	class:CCArray	signature:(bool bReleaseObj)
CCArray::removeLastObject	cocoa/CCArray.h	/^    void removeLastObject(bool bReleaseObj = true);$/;"	p	class:CCArray	access:public	signature:(bool bReleaseObj = true)
CCArray::removeObject	cocoa/CCArray.cpp	/^void CCArray::removeObject(CCObject* object, bool bReleaseObj\/* = true*\/)$/;"	f	class:CCArray	signature:(CCObject* object, bool bReleaseObj )
CCArray::removeObject	cocoa/CCArray.h	/^    void removeObject(CCObject* object, bool bReleaseObj = true);$/;"	p	class:CCArray	access:public	signature:(CCObject* object, bool bReleaseObj = true)
CCArray::removeObjectAtIndex	cocoa/CCArray.cpp	/^void CCArray::removeObjectAtIndex(unsigned int index, bool bReleaseObj)$/;"	f	class:CCArray	signature:(unsigned int index, bool bReleaseObj)
CCArray::removeObjectAtIndex	cocoa/CCArray.h	/^    void removeObjectAtIndex(unsigned int index, bool bReleaseObj = true);$/;"	p	class:CCArray	access:public	signature:(unsigned int index, bool bReleaseObj = true)
CCArray::removeObjectsInArray	cocoa/CCArray.cpp	/^void CCArray::removeObjectsInArray(CCArray* otherArray)$/;"	f	class:CCArray	signature:(CCArray* otherArray)
CCArray::removeObjectsInArray	cocoa/CCArray.h	/^    void removeObjectsInArray(CCArray* otherArray);$/;"	p	class:CCArray	access:public	signature:(CCArray* otherArray)
CCArray::replaceObjectAtIndex	cocoa/CCArray.cpp	/^void CCArray::replaceObjectAtIndex(unsigned int index, CCObject* pObject, bool bReleaseObject\/* = true*\/)$/;"	f	class:CCArray	signature:(unsigned int index, CCObject* pObject, bool bReleaseObject )
CCArray::replaceObjectAtIndex	cocoa/CCArray.h	/^    void replaceObjectAtIndex(unsigned int uIndex, CCObject* pObject, bool bReleaseObject = true);$/;"	p	class:CCArray	access:public	signature:(unsigned int uIndex, CCObject* pObject, bool bReleaseObject = true)
CCArray::reverseObjects	cocoa/CCArray.cpp	/^void CCArray::reverseObjects()$/;"	f	class:CCArray	signature:()
CCArray::reverseObjects	cocoa/CCArray.h	/^    void reverseObjects();$/;"	p	class:CCArray	access:public	signature:()
CCArray::~CCArray	cocoa/CCArray.cpp	/^CCArray::~CCArray()$/;"	f	class:CCArray	signature:()
CCArray::~CCArray	cocoa/CCArray.h	/^    ~CCArray();$/;"	p	class:CCArray	access:public	signature:()
CCAssert	include/ccMacros.h	40;"	d
CCAssert	include/ccMacros.h	46;"	d
CCAtlasNode	base_nodes/CCAtlasNode.cpp	/^CCAtlasNode::CCAtlasNode()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode	base_nodes/CCAtlasNode.h	/^    CCAtlasNode();$/;"	p	class:CCAtlasNode	access:public	signature:()
CCAtlasNode	base_nodes/CCAtlasNode.h	/^class CC_DLL CCAtlasNode : public CCNodeRGBA, public CCTextureProtocol$/;"	c	inherits:CCNodeRGBA,CCTextureProtocol
CCAtlasNode::CCAtlasNode	base_nodes/CCAtlasNode.cpp	/^CCAtlasNode::CCAtlasNode()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode::CCAtlasNode	base_nodes/CCAtlasNode.h	/^    CCAtlasNode();$/;"	p	class:CCAtlasNode	access:public	signature:()
CCAtlasNode::CC_PROPERTY	base_nodes/CCAtlasNode.h	/^    CC_PROPERTY(CCTextureAtlas*, m_pTextureAtlas, TextureAtlas);$/;"	p	class:CCAtlasNode	access:protected	signature:(CCTextureAtlas*, m_pTextureAtlas, TextureAtlas)
CCAtlasNode::CC_PROPERTY	base_nodes/CCAtlasNode.h	/^    CC_PROPERTY(ccBlendFunc, m_tBlendFunc, BlendFunc);$/;"	p	class:CCAtlasNode	access:protected	signature:(ccBlendFunc, m_tBlendFunc, BlendFunc)
CCAtlasNode::CC_PROPERTY	base_nodes/CCAtlasNode.h	/^    CC_PROPERTY(unsigned int, m_uQuadsToDraw, QuadsToDraw);$/;"	p	class:CCAtlasNode	access:protected	signature:(unsigned int, m_uQuadsToDraw, QuadsToDraw)
CCAtlasNode::calculateMaxItems	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::calculateMaxItems()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode::calculateMaxItems	base_nodes/CCAtlasNode.h	/^    void calculateMaxItems();$/;"	p	class:CCAtlasNode	access:private	signature:()
CCAtlasNode::create	base_nodes/CCAtlasNode.cpp	/^CCAtlasNode * CCAtlasNode::create(const char *tile, unsigned int tileWidth, unsigned int tileHeight, $/;"	f	class:CCAtlasNode	signature:(const char *tile, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)
CCAtlasNode::create	base_nodes/CCAtlasNode.h	/^	static CCAtlasNode * create(const char* tile,unsigned int tileWidth, unsigned int tileHeight, $/;"	p	class:CCAtlasNode	access:public	signature:(const char* tile,unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)
CCAtlasNode::draw	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::draw(void)$/;"	f	class:CCAtlasNode	signature:(void)
CCAtlasNode::draw	base_nodes/CCAtlasNode.h	/^    virtual void draw(void);$/;"	p	class:CCAtlasNode	access:public	signature:(void)
CCAtlasNode::getBlendFunc	base_nodes/CCAtlasNode.cpp	/^ccBlendFunc CCAtlasNode::getBlendFunc()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode::getColor	base_nodes/CCAtlasNode.cpp	/^const ccColor3B& CCAtlasNode::getColor()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode::getColor	base_nodes/CCAtlasNode.h	/^    virtual const ccColor3B& getColor(void);$/;"	p	class:CCAtlasNode	access:public	signature:(void)
CCAtlasNode::getQuadsToDraw	base_nodes/CCAtlasNode.cpp	/^unsigned int CCAtlasNode::getQuadsToDraw()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode::getTexture	base_nodes/CCAtlasNode.cpp	/^CCTexture2D * CCAtlasNode::getTexture()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode::getTexture	base_nodes/CCAtlasNode.h	/^    virtual CCTexture2D* getTexture(void);$/;"	p	class:CCAtlasNode	access:public	signature:(void)
CCAtlasNode::getTextureAtlas	base_nodes/CCAtlasNode.cpp	/^CCTextureAtlas * CCAtlasNode::getTextureAtlas()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode::initWithTexture	base_nodes/CCAtlasNode.cpp	/^bool CCAtlasNode::initWithTexture(CCTexture2D* texture, unsigned int tileWidth, unsigned int tileHeight, $/;"	f	class:CCAtlasNode	signature:(CCTexture2D* texture, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)
CCAtlasNode::initWithTexture	base_nodes/CCAtlasNode.h	/^    bool initWithTexture(CCTexture2D* texture, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender);$/;"	p	class:CCAtlasNode	access:public	signature:(CCTexture2D* texture, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)
CCAtlasNode::initWithTileFile	base_nodes/CCAtlasNode.cpp	/^bool CCAtlasNode::initWithTileFile(const char *tile, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)$/;"	f	class:CCAtlasNode	signature:(const char *tile, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)
CCAtlasNode::initWithTileFile	base_nodes/CCAtlasNode.h	/^    bool initWithTileFile(const char* tile, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender);$/;"	p	class:CCAtlasNode	access:public	signature:(const char* tile, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)
CCAtlasNode::isOpacityModifyRGB	base_nodes/CCAtlasNode.cpp	/^bool CCAtlasNode::isOpacityModifyRGB()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode::isOpacityModifyRGB	base_nodes/CCAtlasNode.h	/^    virtual bool isOpacityModifyRGB();$/;"	p	class:CCAtlasNode	access:public	signature:()
CCAtlasNode::m_bIsOpacityModifyRGB	base_nodes/CCAtlasNode.h	/^    bool m_bIsOpacityModifyRGB;$/;"	m	class:CCAtlasNode	access:protected
CCAtlasNode::m_nUniformColor	base_nodes/CCAtlasNode.h	/^    GLint    m_nUniformColor;$/;"	m	class:CCAtlasNode	access:protected
CCAtlasNode::m_tColorUnmodified	base_nodes/CCAtlasNode.h	/^    ccColor3B    m_tColorUnmodified;$/;"	m	class:CCAtlasNode	access:protected
CCAtlasNode::m_uItemHeight	base_nodes/CCAtlasNode.h	/^    unsigned int    m_uItemHeight;$/;"	m	class:CCAtlasNode	access:protected
CCAtlasNode::m_uItemWidth	base_nodes/CCAtlasNode.h	/^    unsigned int    m_uItemWidth;$/;"	m	class:CCAtlasNode	access:protected
CCAtlasNode::m_uItemsPerColumn	base_nodes/CCAtlasNode.h	/^    unsigned int m_uItemsPerColumn;$/;"	m	class:CCAtlasNode	access:protected
CCAtlasNode::m_uItemsPerRow	base_nodes/CCAtlasNode.h	/^    unsigned int m_uItemsPerRow;$/;"	m	class:CCAtlasNode	access:protected
CCAtlasNode::setBlendFunc	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCAtlasNode	signature:(ccBlendFunc blendFunc)
CCAtlasNode::setColor	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setColor(const ccColor3B& color3)$/;"	f	class:CCAtlasNode	signature:(const ccColor3B& color3)
CCAtlasNode::setColor	base_nodes/CCAtlasNode.h	/^    virtual void setColor(const ccColor3B& color);$/;"	p	class:CCAtlasNode	access:public	signature:(const ccColor3B& color)
CCAtlasNode::setOpacity	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setOpacity(GLubyte opacity)$/;"	f	class:CCAtlasNode	signature:(GLubyte opacity)
CCAtlasNode::setOpacity	base_nodes/CCAtlasNode.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCAtlasNode	access:public	signature:(GLubyte opacity)
CCAtlasNode::setOpacityModifyRGB	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setOpacityModifyRGB(bool bValue)$/;"	f	class:CCAtlasNode	signature:(bool bValue)
CCAtlasNode::setOpacityModifyRGB	base_nodes/CCAtlasNode.h	/^    virtual void setOpacityModifyRGB(bool isOpacityModifyRGB);$/;"	p	class:CCAtlasNode	access:public	signature:(bool isOpacityModifyRGB)
CCAtlasNode::setQuadsToDraw	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setQuadsToDraw(unsigned int uQuadsToDraw)$/;"	f	class:CCAtlasNode	signature:(unsigned int uQuadsToDraw)
CCAtlasNode::setTexture	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setTexture(CCTexture2D *texture)$/;"	f	class:CCAtlasNode	signature:(CCTexture2D *texture)
CCAtlasNode::setTexture	base_nodes/CCAtlasNode.h	/^    virtual void setTexture(CCTexture2D *texture);$/;"	p	class:CCAtlasNode	access:public	signature:(CCTexture2D *texture)
CCAtlasNode::setTextureAtlas	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setTextureAtlas(CCTextureAtlas* var)$/;"	f	class:CCAtlasNode	signature:(CCTextureAtlas* var)
CCAtlasNode::updateAtlasValues	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::updateAtlasValues()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode::updateAtlasValues	base_nodes/CCAtlasNode.h	/^    virtual void updateAtlasValues();$/;"	p	class:CCAtlasNode	access:public	signature:()
CCAtlasNode::updateBlendFunc	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::updateBlendFunc()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode::updateBlendFunc	base_nodes/CCAtlasNode.h	/^    void updateBlendFunc();$/;"	p	class:CCAtlasNode	access:private	signature:()
CCAtlasNode::updateOpacityModifyRGB	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::updateOpacityModifyRGB()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode::updateOpacityModifyRGB	base_nodes/CCAtlasNode.h	/^    void updateOpacityModifyRGB();$/;"	p	class:CCAtlasNode	access:private	signature:()
CCAtlasNode::~CCAtlasNode	base_nodes/CCAtlasNode.cpp	/^CCAtlasNode::~CCAtlasNode()$/;"	f	class:CCAtlasNode	signature:()
CCAtlasNode::~CCAtlasNode	base_nodes/CCAtlasNode.h	/^    virtual ~CCAtlasNode();$/;"	p	class:CCAtlasNode	access:public	signature:()
CCAutoreleasePool	cocoa/CCAutoreleasePool.cpp	/^CCAutoreleasePool::CCAutoreleasePool(void)$/;"	f	class:CCAutoreleasePool	signature:(void)
CCAutoreleasePool	cocoa/CCAutoreleasePool.h	/^    CCAutoreleasePool(void);$/;"	p	class:CCAutoreleasePool	access:public	signature:(void)
CCAutoreleasePool	cocoa/CCAutoreleasePool.h	/^class CC_DLL CCAutoreleasePool : public CCObject$/;"	c	inherits:CCObject
CCAutoreleasePool::CCAutoreleasePool	cocoa/CCAutoreleasePool.cpp	/^CCAutoreleasePool::CCAutoreleasePool(void)$/;"	f	class:CCAutoreleasePool	signature:(void)
CCAutoreleasePool::CCAutoreleasePool	cocoa/CCAutoreleasePool.h	/^    CCAutoreleasePool(void);$/;"	p	class:CCAutoreleasePool	access:public	signature:(void)
CCAutoreleasePool::addObject	cocoa/CCAutoreleasePool.cpp	/^void CCAutoreleasePool::addObject(CCObject* pObject)$/;"	f	class:CCAutoreleasePool	signature:(CCObject* pObject)
CCAutoreleasePool::addObject	cocoa/CCAutoreleasePool.h	/^    void addObject(CCObject *pObject);$/;"	p	class:CCAutoreleasePool	access:public	signature:(CCObject *pObject)
CCAutoreleasePool::clear	cocoa/CCAutoreleasePool.cpp	/^void CCAutoreleasePool::clear()$/;"	f	class:CCAutoreleasePool	signature:()
CCAutoreleasePool::clear	cocoa/CCAutoreleasePool.h	/^    void clear();$/;"	p	class:CCAutoreleasePool	access:public	signature:()
CCAutoreleasePool::m_pManagedObjectArray	cocoa/CCAutoreleasePool.h	/^    CCArray*    m_pManagedObjectArray;    $/;"	m	class:CCAutoreleasePool	access:private
CCAutoreleasePool::removeObject	cocoa/CCAutoreleasePool.cpp	/^void CCAutoreleasePool::removeObject(CCObject* pObject)$/;"	f	class:CCAutoreleasePool	signature:(CCObject* pObject)
CCAutoreleasePool::removeObject	cocoa/CCAutoreleasePool.h	/^    void removeObject(CCObject *pObject);$/;"	p	class:CCAutoreleasePool	access:public	signature:(CCObject *pObject)
CCAutoreleasePool::~CCAutoreleasePool	cocoa/CCAutoreleasePool.cpp	/^CCAutoreleasePool::~CCAutoreleasePool(void)$/;"	f	class:CCAutoreleasePool	signature:(void)
CCAutoreleasePool::~CCAutoreleasePool	cocoa/CCAutoreleasePool.h	/^    ~CCAutoreleasePool(void);$/;"	p	class:CCAutoreleasePool	access:public	signature:(void)
CCBMFontConfiguration	label_nodes/CCLabelBMFont.cpp	/^CCBMFontConfiguration::CCBMFontConfiguration()$/;"	f	class:CCBMFontConfiguration	signature:()
CCBMFontConfiguration	label_nodes/CCLabelBMFont.h	/^    CCBMFontConfiguration();$/;"	p	class:CCBMFontConfiguration	access:public	signature:()
CCBMFontConfiguration	label_nodes/CCLabelBMFont.h	/^class CC_DLL CCBMFontConfiguration : public CCObject$/;"	c	inherits:CCObject
CCBMFontConfiguration::CCBMFontConfiguration	label_nodes/CCLabelBMFont.cpp	/^CCBMFontConfiguration::CCBMFontConfiguration()$/;"	f	class:CCBMFontConfiguration	signature:()
CCBMFontConfiguration::CCBMFontConfiguration	label_nodes/CCLabelBMFont.h	/^    CCBMFontConfiguration();$/;"	p	class:CCBMFontConfiguration	access:public	signature:()
CCBMFontConfiguration::create	label_nodes/CCLabelBMFont.cpp	/^CCBMFontConfiguration * CCBMFontConfiguration::create(const char *FNTfile)$/;"	f	class:CCBMFontConfiguration	signature:(const char *FNTfile)
CCBMFontConfiguration::create	label_nodes/CCLabelBMFont.h	/^    static CCBMFontConfiguration * create(const char *FNTfile);$/;"	p	class:CCBMFontConfiguration	access:public	signature:(const char *FNTfile)
CCBMFontConfiguration::description	label_nodes/CCLabelBMFont.cpp	/^const char* CCBMFontConfiguration::description(void)$/;"	f	class:CCBMFontConfiguration	signature:(void)
CCBMFontConfiguration::description	label_nodes/CCLabelBMFont.h	/^    const char * description();$/;"	p	class:CCBMFontConfiguration	access:public	signature:()
CCBMFontConfiguration::getAtlasName	label_nodes/CCLabelBMFont.h	/^    inline const char* getAtlasName(){ return m_sAtlasName.c_str(); }$/;"	f	class:CCBMFontConfiguration	access:public	signature:()
CCBMFontConfiguration::getCharacterSet	label_nodes/CCLabelBMFont.cpp	/^std::set<unsigned int>* CCBMFontConfiguration::getCharacterSet() const$/;"	f	class:CCBMFontConfiguration	signature:() const
CCBMFontConfiguration::getCharacterSet	label_nodes/CCLabelBMFont.h	/^    std::set<unsigned int>* getCharacterSet() const;$/;"	p	class:CCBMFontConfiguration	access:public	signature:() const
CCBMFontConfiguration::initWithFNTfile	label_nodes/CCLabelBMFont.cpp	/^bool CCBMFontConfiguration::initWithFNTfile(const char *FNTfile)$/;"	f	class:CCBMFontConfiguration	signature:(const char *FNTfile)
CCBMFontConfiguration::initWithFNTfile	label_nodes/CCLabelBMFont.h	/^    bool initWithFNTfile(const char *FNTfile);$/;"	p	class:CCBMFontConfiguration	access:public	signature:(const char *FNTfile)
CCBMFontConfiguration::m_nCommonHeight	label_nodes/CCLabelBMFont.h	/^    int m_nCommonHeight;$/;"	m	class:CCBMFontConfiguration	access:public
CCBMFontConfiguration::m_pCharacterSet	label_nodes/CCLabelBMFont.h	/^    std::set<unsigned int> *m_pCharacterSet;$/;"	m	class:CCBMFontConfiguration	access:public
CCBMFontConfiguration::m_pFontDefDictionary	label_nodes/CCLabelBMFont.h	/^    tCCFontDefHashElement *m_pFontDefDictionary;$/;"	m	class:CCBMFontConfiguration	access:public
CCBMFontConfiguration::m_pKerningDictionary	label_nodes/CCLabelBMFont.h	/^    tCCKerningHashElement *m_pKerningDictionary;$/;"	m	class:CCBMFontConfiguration	access:public
CCBMFontConfiguration::m_sAtlasName	label_nodes/CCLabelBMFont.h	/^    std::string m_sAtlasName;$/;"	m	class:CCBMFontConfiguration	access:public
CCBMFontConfiguration::m_tPadding	label_nodes/CCLabelBMFont.h	/^    ccBMFontPadding    m_tPadding;$/;"	m	class:CCBMFontConfiguration	access:public
CCBMFontConfiguration::parseCharacterDefinition	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseCharacterDefinition(std::string line, ccBMFontDef *characterDefinition)$/;"	f	class:CCBMFontConfiguration	signature:(std::string line, ccBMFontDef *characterDefinition)
CCBMFontConfiguration::parseCharacterDefinition	label_nodes/CCLabelBMFont.h	/^    void parseCharacterDefinition(std::string line, ccBMFontDef *characterDefinition);$/;"	p	class:CCBMFontConfiguration	access:private	signature:(std::string line, ccBMFontDef *characterDefinition)
CCBMFontConfiguration::parseCommonArguments	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseCommonArguments(std::string line)$/;"	f	class:CCBMFontConfiguration	signature:(std::string line)
CCBMFontConfiguration::parseCommonArguments	label_nodes/CCLabelBMFont.h	/^    void parseCommonArguments(std::string line);$/;"	p	class:CCBMFontConfiguration	access:private	signature:(std::string line)
CCBMFontConfiguration::parseConfigFile	label_nodes/CCLabelBMFont.cpp	/^std::set<unsigned int>* CCBMFontConfiguration::parseConfigFile(const char *controlFile)$/;"	f	class:CCBMFontConfiguration	signature:(const char *controlFile)
CCBMFontConfiguration::parseConfigFile	label_nodes/CCLabelBMFont.h	/^    std::set<unsigned int>* parseConfigFile(const char *controlFile);$/;"	p	class:CCBMFontConfiguration	access:private	signature:(const char *controlFile)
CCBMFontConfiguration::parseImageFileName	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseImageFileName(std::string line, const char *fntFile)$/;"	f	class:CCBMFontConfiguration	signature:(std::string line, const char *fntFile)
CCBMFontConfiguration::parseImageFileName	label_nodes/CCLabelBMFont.h	/^    void parseImageFileName(std::string line, const char *fntFile);$/;"	p	class:CCBMFontConfiguration	access:private	signature:(std::string line, const char *fntFile)
CCBMFontConfiguration::parseInfoArguments	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseInfoArguments(std::string line)$/;"	f	class:CCBMFontConfiguration	signature:(std::string line)
CCBMFontConfiguration::parseInfoArguments	label_nodes/CCLabelBMFont.h	/^    void parseInfoArguments(std::string line);$/;"	p	class:CCBMFontConfiguration	access:private	signature:(std::string line)
CCBMFontConfiguration::parseKerningEntry	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseKerningEntry(std::string line)$/;"	f	class:CCBMFontConfiguration	signature:(std::string line)
CCBMFontConfiguration::parseKerningEntry	label_nodes/CCLabelBMFont.h	/^    void parseKerningEntry(std::string line);$/;"	p	class:CCBMFontConfiguration	access:private	signature:(std::string line)
CCBMFontConfiguration::purgeFontDefDictionary	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::purgeFontDefDictionary()$/;"	f	class:CCBMFontConfiguration	signature:()
CCBMFontConfiguration::purgeFontDefDictionary	label_nodes/CCLabelBMFont.h	/^    void purgeFontDefDictionary();$/;"	p	class:CCBMFontConfiguration	access:private	signature:()
CCBMFontConfiguration::purgeKerningDictionary	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::purgeKerningDictionary()$/;"	f	class:CCBMFontConfiguration	signature:()
CCBMFontConfiguration::purgeKerningDictionary	label_nodes/CCLabelBMFont.h	/^    void purgeKerningDictionary();$/;"	p	class:CCBMFontConfiguration	access:private	signature:()
CCBMFontConfiguration::setAtlasName	label_nodes/CCLabelBMFont.h	/^    inline void setAtlasName(const char* atlasName) { m_sAtlasName = atlasName; }$/;"	f	class:CCBMFontConfiguration	access:public	signature:(const char* atlasName)
CCBMFontConfiguration::~CCBMFontConfiguration	label_nodes/CCLabelBMFont.cpp	/^CCBMFontConfiguration::~CCBMFontConfiguration()$/;"	f	class:CCBMFontConfiguration	signature:()
CCBMFontConfiguration::~CCBMFontConfiguration	label_nodes/CCLabelBMFont.h	/^    virtual ~CCBMFontConfiguration();$/;"	p	class:CCBMFontConfiguration	access:public	signature:()
CCBezierBy	actions/CCActionInterval.h	/^class CC_DLL CCBezierBy : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCBezierBy::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCBezierBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCBezierBy	signature:(CCZone *pZone)
CCBezierBy::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCBezierBy	access:public	signature:(CCZone* pZone)
CCBezierBy::create	actions/CCActionInterval.cpp	/^CCBezierBy* CCBezierBy::create(float t, const ccBezierConfig& c)$/;"	f	class:CCBezierBy	signature:(float t, const ccBezierConfig& c)
CCBezierBy::create	actions/CCActionInterval.h	/^    static CCBezierBy* create(float t, const ccBezierConfig& c);$/;"	p	class:CCBezierBy	access:public	signature:(float t, const ccBezierConfig& c)
CCBezierBy::initWithDuration	actions/CCActionInterval.cpp	/^bool CCBezierBy::initWithDuration(float t, const ccBezierConfig& c)$/;"	f	class:CCBezierBy	signature:(float t, const ccBezierConfig& c)
CCBezierBy::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float t, const ccBezierConfig& c);$/;"	p	class:CCBezierBy	access:public	signature:(float t, const ccBezierConfig& c)
CCBezierBy::m_previousPosition	actions/CCActionInterval.h	/^    CCPoint m_previousPosition;$/;"	m	class:CCBezierBy	access:protected
CCBezierBy::m_sConfig	actions/CCActionInterval.h	/^    ccBezierConfig m_sConfig;$/;"	m	class:CCBezierBy	access:protected
CCBezierBy::m_startPosition	actions/CCActionInterval.h	/^    CCPoint m_startPosition;$/;"	m	class:CCBezierBy	access:protected
CCBezierBy::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCBezierBy::reverse(void)$/;"	f	class:CCBezierBy	signature:(void)
CCBezierBy::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCBezierBy	access:public	signature:(void)
CCBezierBy::startWithTarget	actions/CCActionInterval.cpp	/^void CCBezierBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCBezierBy	signature:(CCNode *pTarget)
CCBezierBy::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCBezierBy	access:public	signature:(CCNode *pTarget)
CCBezierBy::update	actions/CCActionInterval.cpp	/^void CCBezierBy::update(float time)$/;"	f	class:CCBezierBy	signature:(float time)
CCBezierBy::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCBezierBy	access:public	signature:(float time)
CCBezierTo	actions/CCActionInterval.h	/^class CC_DLL CCBezierTo : public CCBezierBy$/;"	c	inherits:CCBezierBy
CCBezierTo::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCBezierTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCBezierTo	signature:(CCZone *pZone)
CCBezierTo::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCBezierTo	access:public	signature:(CCZone* pZone)
CCBezierTo::create	actions/CCActionInterval.cpp	/^CCBezierTo* CCBezierTo::create(float t, const ccBezierConfig& c)$/;"	f	class:CCBezierTo	signature:(float t, const ccBezierConfig& c)
CCBezierTo::create	actions/CCActionInterval.h	/^    static CCBezierTo* create(float t, const ccBezierConfig& c);$/;"	p	class:CCBezierTo	access:public	signature:(float t, const ccBezierConfig& c)
CCBezierTo::initWithDuration	actions/CCActionInterval.cpp	/^bool CCBezierTo::initWithDuration(float t, const ccBezierConfig &c)$/;"	f	class:CCBezierTo	signature:(float t, const ccBezierConfig &c)
CCBezierTo::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float t, const ccBezierConfig &c);$/;"	p	class:CCBezierTo	access:public	signature:(float t, const ccBezierConfig &c)
CCBezierTo::m_sToConfig	actions/CCActionInterval.h	/^    ccBezierConfig m_sToConfig;$/;"	m	class:CCBezierTo	access:protected
CCBezierTo::startWithTarget	actions/CCActionInterval.cpp	/^void CCBezierTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCBezierTo	signature:(CCNode *pTarget)
CCBezierTo::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCBezierTo	access:public	signature:(CCNode *pTarget)
CCBlendProtocol	include/CCProtocols.h	/^class CC_DLL CCBlendProtocol$/;"	c
CCBlendProtocol::getBlendFunc	include/CCProtocols.h	/^    virtual ccBlendFunc getBlendFunc(void) = 0;$/;"	p	class:CCBlendProtocol	access:public	signature:(void)
CCBlendProtocol::setBlendFunc	include/CCProtocols.h	/^    virtual void setBlendFunc(ccBlendFunc blendFunc) = 0;$/;"	p	class:CCBlendProtocol	access:public	signature:(ccBlendFunc blendFunc)
CCBlink	actions/CCActionInterval.h	/^class CC_DLL CCBlink : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCBlink::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCBlink::copyWithZone(CCZone *pZone)$/;"	f	class:CCBlink	signature:(CCZone *pZone)
CCBlink::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCBlink	access:public	signature:(CCZone* pZone)
CCBlink::create	actions/CCActionInterval.cpp	/^CCBlink* CCBlink::create(float duration, unsigned int uBlinks)$/;"	f	class:CCBlink	signature:(float duration, unsigned int uBlinks)
CCBlink::create	actions/CCActionInterval.h	/^    static CCBlink* create(float duration, unsigned int uBlinks);$/;"	p	class:CCBlink	access:public	signature:(float duration, unsigned int uBlinks)
CCBlink::initWithDuration	actions/CCActionInterval.cpp	/^bool CCBlink::initWithDuration(float duration, unsigned int uBlinks)$/;"	f	class:CCBlink	signature:(float duration, unsigned int uBlinks)
CCBlink::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, unsigned int uBlinks);$/;"	p	class:CCBlink	access:public	signature:(float duration, unsigned int uBlinks)
CCBlink::m_bOriginalState	actions/CCActionInterval.h	/^    bool m_bOriginalState;$/;"	m	class:CCBlink	access:protected
CCBlink::m_nTimes	actions/CCActionInterval.h	/^    unsigned int m_nTimes;$/;"	m	class:CCBlink	access:protected
CCBlink::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCBlink::reverse(void)$/;"	f	class:CCBlink	signature:(void)
CCBlink::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCBlink	access:public	signature:(void)
CCBlink::startWithTarget	actions/CCActionInterval.cpp	/^void CCBlink::startWithTarget(CCNode *pTarget)$/;"	f	class:CCBlink	signature:(CCNode *pTarget)
CCBlink::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCBlink	access:public	signature:(CCNode *pTarget)
CCBlink::stop	actions/CCActionInterval.cpp	/^void CCBlink::stop()$/;"	f	class:CCBlink	signature:()
CCBlink::stop	actions/CCActionInterval.h	/^    virtual void stop();$/;"	p	class:CCBlink	access:public	signature:()
CCBlink::update	actions/CCActionInterval.cpp	/^void CCBlink::update(float time)$/;"	f	class:CCBlink	signature:(float time)
CCBlink::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCBlink	access:public	signature:(float time)
CCBool	cocoa/CCBool.h	/^    CCBool(bool v)$/;"	f	class:CCBool	access:public	signature:(bool v)
CCBool	cocoa/CCBool.h	/^class CC_DLL CCBool : public CCObject$/;"	c	inherits:CCObject
CCBool::CCBool	cocoa/CCBool.h	/^    CCBool(bool v)$/;"	f	class:CCBool	access:public	signature:(bool v)
CCBool::create	cocoa/CCBool.h	/^    static CCBool* create(bool v)$/;"	f	class:CCBool	access:public	signature:(bool v)
CCBool::getValue	cocoa/CCBool.h	/^    bool getValue() const {return m_bValue;}$/;"	f	class:CCBool	access:public	signature:() const
CCBool::m_bValue	cocoa/CCBool.h	/^    bool m_bValue;$/;"	m	class:CCBool	access:private
CCCallFunc	actions/CCActionInstant.h	/^    CCCallFunc()$/;"	f	class:CCCallFunc	access:public	signature:()
CCCallFunc	actions/CCActionInstant.h	/^class CC_DLL CCCallFunc : public CCActionInstant \/\/<NSCopying>$/;"	c	inherits:CCActionInstant
CCCallFunc::CCCallFunc	actions/CCActionInstant.h	/^    CCCallFunc()$/;"	f	class:CCCallFunc	access:public	signature:()
CCCallFunc::__anon2::m_pCallFunc	actions/CCActionInstant.h	/^        SEL_CallFunc    m_pCallFunc;$/;"	m	union:CCCallFunc::__anon2	access:public
CCCallFunc::__anon2::m_pCallFuncN	actions/CCActionInstant.h	/^        SEL_CallFuncN    m_pCallFuncN;$/;"	m	union:CCCallFunc::__anon2	access:public
CCCallFunc::__anon2::m_pCallFuncND	actions/CCActionInstant.h	/^        SEL_CallFuncND    m_pCallFuncND;$/;"	m	union:CCCallFunc::__anon2	access:public
CCCallFunc::__anon2::m_pCallFuncO	actions/CCActionInstant.h	/^        SEL_CallFuncO   m_pCallFuncO;$/;"	m	union:CCCallFunc::__anon2	access:public
CCCallFunc::copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCCallFunc::copyWithZone(CCZone *pZone) {$/;"	f	class:CCCallFunc	signature:(CCZone *pZone)
CCCallFunc::copyWithZone	actions/CCActionInstant.h	/^    CCObject * copyWithZone(CCZone *pZone);$/;"	p	class:CCCallFunc	access:public	signature:(CCZone *pZone)
CCCallFunc::create	actions/CCActionInstant.cpp	/^CCCallFunc * CCCallFunc::create(CCObject* pSelectorTarget, SEL_CallFunc selector) $/;"	f	class:CCCallFunc	signature:(CCObject* pSelectorTarget, SEL_CallFunc selector)
CCCallFunc::create	actions/CCActionInstant.cpp	/^CCCallFunc * CCCallFunc::create(int nHandler)$/;"	f	class:CCCallFunc	signature:(int nHandler)
CCCallFunc::create	actions/CCActionInstant.h	/^	static CCCallFunc * create(int nHandler);$/;"	p	class:CCCallFunc	access:public	signature:(int nHandler)
CCCallFunc::create	actions/CCActionInstant.h	/^    static CCCallFunc * create(CCObject* pSelectorTarget, SEL_CallFunc selector);$/;"	p	class:CCCallFunc	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFunc selector)
CCCallFunc::execute	actions/CCActionInstant.cpp	/^void CCCallFunc::execute() {$/;"	f	class:CCCallFunc	signature:()
CCCallFunc::execute	actions/CCActionInstant.h	/^    virtual void execute();$/;"	p	class:CCCallFunc	access:public	signature:()
CCCallFunc::getScriptHandler	actions/CCActionInstant.h	/^    inline int getScriptHandler() { return m_nScriptHandler; };$/;"	f	class:CCCallFunc	access:public	signature:()
CCCallFunc::getTargetCallback	actions/CCActionInstant.h	/^    inline CCObject* getTargetCallback()$/;"	f	class:CCCallFunc	access:public	signature:()
CCCallFunc::initWithTarget	actions/CCActionInstant.cpp	/^bool CCCallFunc::initWithTarget(CCObject* pSelectorTarget) {$/;"	f	class:CCCallFunc	signature:(CCObject* pSelectorTarget)
CCCallFunc::initWithTarget	actions/CCActionInstant.h	/^    virtual bool initWithTarget(CCObject* pSelectorTarget);$/;"	p	class:CCCallFunc	access:public	signature:(CCObject* pSelectorTarget)
CCCallFunc::m_nScriptHandler	actions/CCActionInstant.h	/^	int m_nScriptHandler;$/;"	m	class:CCCallFunc	access:protected
CCCallFunc::m_pSelectorTarget	actions/CCActionInstant.h	/^    CCObject*   m_pSelectorTarget;$/;"	m	class:CCCallFunc	access:protected
CCCallFunc::setTargetCallback	actions/CCActionInstant.h	/^    inline void setTargetCallback(CCObject* pSel)$/;"	f	class:CCCallFunc	access:public	signature:(CCObject* pSel)
CCCallFunc::update	actions/CCActionInstant.cpp	/^void CCCallFunc::update(float time) {$/;"	f	class:CCCallFunc	signature:(float time)
CCCallFunc::update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCCallFunc	access:public	signature:(float time)
CCCallFunc::~CCCallFunc	actions/CCActionInstant.cpp	/^CCCallFunc::~CCCallFunc(void)$/;"	f	class:CCCallFunc	signature:(void)
CCCallFunc::~CCCallFunc	actions/CCActionInstant.h	/^    virtual ~CCCallFunc();$/;"	p	class:CCCallFunc	access:public	signature:()
CCCallFuncN	actions/CCActionInstant.h	/^    CCCallFuncN(){}$/;"	f	class:CCCallFuncN	access:public	signature:()
CCCallFuncN	actions/CCActionInstant.h	/^class CC_DLL CCCallFuncN : public CCCallFunc, public TypeInfo$/;"	c	inherits:CCCallFunc,TypeInfo
CCCallFuncN::CCCallFuncN	actions/CCActionInstant.h	/^    CCCallFuncN(){}$/;"	f	class:CCCallFuncN	access:public	signature:()
CCCallFuncN::copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCCallFuncN::copyWithZone(CCZone* zone) {$/;"	f	class:CCCallFuncN	signature:(CCZone* zone)
CCCallFuncN::copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCCallFuncN	access:public	signature:(CCZone *pZone)
CCCallFuncN::create	actions/CCActionInstant.cpp	/^CCCallFuncN * CCCallFuncN::create(CCObject* pSelectorTarget, SEL_CallFuncN selector)$/;"	f	class:CCCallFuncN	signature:(CCObject* pSelectorTarget, SEL_CallFuncN selector)
CCCallFuncN::create	actions/CCActionInstant.cpp	/^CCCallFuncN * CCCallFuncN::create(int nHandler)$/;"	f	class:CCCallFuncN	signature:(int nHandler)
CCCallFuncN::create	actions/CCActionInstant.h	/^	static CCCallFuncN * create(int nHandler);$/;"	p	class:CCCallFuncN	access:public	signature:(int nHandler)
CCCallFuncN::create	actions/CCActionInstant.h	/^    static CCCallFuncN * create(CCObject* pSelectorTarget, SEL_CallFuncN selector);$/;"	p	class:CCCallFuncN	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFuncN selector)
CCCallFuncN::execute	actions/CCActionInstant.cpp	/^void CCCallFuncN::execute() {$/;"	f	class:CCCallFuncN	signature:()
CCCallFuncN::execute	actions/CCActionInstant.h	/^    virtual void execute();$/;"	p	class:CCCallFuncN	access:public	signature:()
CCCallFuncN::getClassTypeInfo	actions/CCActionInstant.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCCallFuncN	access:public	signature:()
CCCallFuncN::initWithTarget	actions/CCActionInstant.cpp	/^bool CCCallFuncN::initWithTarget(CCObject* pSelectorTarget,$/;"	f	class:CCCallFuncN	signature:(CCObject* pSelectorTarget, SEL_CallFuncN selector)
CCCallFuncN::initWithTarget	actions/CCActionInstant.h	/^    virtual bool initWithTarget(CCObject* pSelectorTarget, SEL_CallFuncN selector);$/;"	p	class:CCCallFuncN	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFuncN selector)
CCCallFuncN::~CCCallFuncN	actions/CCActionInstant.h	/^    virtual ~CCCallFuncN(){}$/;"	f	class:CCCallFuncN	access:public	signature:()
CCCallFuncND	actions/CCActionInstant.h	/^class CC_DLL CCCallFuncND : public CCCallFuncN$/;"	c	inherits:CCCallFuncN
CCCallFuncND::copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCCallFuncND::copyWithZone(CCZone* zone) {$/;"	f	class:CCCallFuncND	signature:(CCZone* zone)
CCCallFuncND::copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCCallFuncND	access:public	signature:(CCZone *pZone)
CCCallFuncND::create	actions/CCActionInstant.cpp	/^CCCallFuncND * CCCallFuncND::create(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d)$/;"	f	class:CCCallFuncND	signature:(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d)
CCCallFuncND::create	actions/CCActionInstant.h	/^    static CCCallFuncND * create(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d);$/;"	p	class:CCCallFuncND	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d)
CCCallFuncND::execute	actions/CCActionInstant.cpp	/^void CCCallFuncND::execute() {$/;"	f	class:CCCallFuncND	signature:()
CCCallFuncND::execute	actions/CCActionInstant.h	/^    virtual void execute();$/;"	p	class:CCCallFuncND	access:public	signature:()
CCCallFuncND::getClassTypeInfo	actions/CCActionInstant.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCCallFuncND	access:public	signature:()
CCCallFuncND::initWithTarget	actions/CCActionInstant.cpp	/^bool CCCallFuncND::initWithTarget(CCObject* pSelectorTarget,$/;"	f	class:CCCallFuncND	signature:(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d)
CCCallFuncND::initWithTarget	actions/CCActionInstant.h	/^    virtual bool initWithTarget(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d);$/;"	p	class:CCCallFuncND	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d)
CCCallFuncND::m_pData	actions/CCActionInstant.h	/^    void            *m_pData;$/;"	m	class:CCCallFuncND	access:protected
CCCallFuncO	actions/CCActionInstant.cpp	/^CCCallFuncO::CCCallFuncO() :$/;"	f	class:CCCallFuncO	signature:()
CCCallFuncO	actions/CCActionInstant.h	/^    CCCallFuncO();$/;"	p	class:CCCallFuncO	access:public	signature:()
CCCallFuncO	actions/CCActionInstant.h	/^class CC_DLL CCCallFuncO : public CCCallFunc, public TypeInfo$/;"	c	inherits:CCCallFunc,TypeInfo
CCCallFuncO::CCCallFuncO	actions/CCActionInstant.cpp	/^CCCallFuncO::CCCallFuncO() :$/;"	f	class:CCCallFuncO	signature:()
CCCallFuncO::CCCallFuncO	actions/CCActionInstant.h	/^    CCCallFuncO();$/;"	p	class:CCCallFuncO	access:public	signature:()
CCCallFuncO::copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCCallFuncO::copyWithZone(CCZone* zone) {$/;"	f	class:CCCallFuncO	signature:(CCZone* zone)
CCCallFuncO::copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCCallFuncO	access:public	signature:(CCZone *pZone)
CCCallFuncO::create	actions/CCActionInstant.cpp	/^CCCallFuncO * CCCallFuncO::create(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject)$/;"	f	class:CCCallFuncO	signature:(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject)
CCCallFuncO::create	actions/CCActionInstant.h	/^    static CCCallFuncO * create(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject);$/;"	p	class:CCCallFuncO	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject)
CCCallFuncO::execute	actions/CCActionInstant.cpp	/^void CCCallFuncO::execute() {$/;"	f	class:CCCallFuncO	signature:()
CCCallFuncO::execute	actions/CCActionInstant.h	/^    virtual void execute();$/;"	p	class:CCCallFuncO	access:public	signature:()
CCCallFuncO::getClassTypeInfo	actions/CCActionInstant.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCCallFuncO	access:public	signature:()
CCCallFuncO::getObject	actions/CCActionInstant.h	/^    inline CCObject* getObject()$/;"	f	class:CCCallFuncO	access:public	signature:()
CCCallFuncO::initWithTarget	actions/CCActionInstant.cpp	/^bool CCCallFuncO::initWithTarget(CCObject* pSelectorTarget,$/;"	f	class:CCCallFuncO	signature:(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject)
CCCallFuncO::initWithTarget	actions/CCActionInstant.h	/^    virtual bool initWithTarget(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject);$/;"	p	class:CCCallFuncO	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject)
CCCallFuncO::m_pObject	actions/CCActionInstant.h	/^    CCObject* m_pObject;$/;"	m	class:CCCallFuncO	access:protected
CCCallFuncO::setObject	actions/CCActionInstant.h	/^    inline void setObject(CCObject* pObj)$/;"	f	class:CCCallFuncO	access:public	signature:(CCObject* pObj)
CCCallFuncO::~CCCallFuncO	actions/CCActionInstant.cpp	/^CCCallFuncO::~CCCallFuncO() {$/;"	f	class:CCCallFuncO	signature:()
CCCallFuncO::~CCCallFuncO	actions/CCActionInstant.h	/^    virtual ~CCCallFuncO();$/;"	p	class:CCCallFuncO	access:public	signature:()
CCCamera	CCCamera.cpp	/^CCCamera::CCCamera(void)$/;"	f	class:CCCamera	signature:(void)
CCCamera	CCCamera.h	/^    CCCamera(void);$/;"	p	class:CCCamera	access:public	signature:(void)
CCCamera	CCCamera.h	/^class CC_DLL CCCamera : public CCObject$/;"	c	inherits:CCObject
CCCamera::CCCamera	CCCamera.cpp	/^CCCamera::CCCamera(void)$/;"	f	class:CCCamera	signature:(void)
CCCamera::CCCamera	CCCamera.h	/^    CCCamera(void);$/;"	p	class:CCCamera	access:public	signature:(void)
CCCamera::DISALLOW_COPY_AND_ASSIGN	CCCamera.h	/^    DISALLOW_COPY_AND_ASSIGN(CCCamera);$/;"	p	class:CCCamera	access:private	signature:(CCCamera)
CCCamera::description	CCCamera.cpp	/^const char* CCCamera::description(void)$/;"	f	class:CCCamera	signature:(void)
CCCamera::description	CCCamera.h	/^    const char* description(void);$/;"	p	class:CCCamera	access:public	signature:(void)
CCCamera::getCenterXYZ	CCCamera.cpp	/^void CCCamera::getCenterXYZ(float *pCenterX, float *pCenterY, float *pCenterZ)$/;"	f	class:CCCamera	signature:(float *pCenterX, float *pCenterY, float *pCenterZ)
CCCamera::getCenterXYZ	CCCamera.h	/^    void getCenterXYZ(float *pCenterX, float *pCenterY, float *pCenterZ);$/;"	p	class:CCCamera	access:public	signature:(float *pCenterX, float *pCenterY, float *pCenterZ)
CCCamera::getEyeXYZ	CCCamera.cpp	/^void CCCamera::getEyeXYZ(float *pEyeX, float *pEyeY, float *pEyeZ)$/;"	f	class:CCCamera	signature:(float *pEyeX, float *pEyeY, float *pEyeZ)
CCCamera::getEyeXYZ	CCCamera.h	/^    void getEyeXYZ(float *pEyeX, float *pEyeY, float *pEyeZ);$/;"	p	class:CCCamera	access:public	signature:(float *pEyeX, float *pEyeY, float *pEyeZ)
CCCamera::getUpXYZ	CCCamera.cpp	/^void CCCamera::getUpXYZ(float *pUpX, float *pUpY, float *pUpZ)$/;"	f	class:CCCamera	signature:(float *pUpX, float *pUpY, float *pUpZ)
CCCamera::getUpXYZ	CCCamera.h	/^    void getUpXYZ(float *pUpX, float *pUpY, float *pUpZ);$/;"	p	class:CCCamera	access:public	signature:(float *pUpX, float *pUpY, float *pUpZ)
CCCamera::getZEye	CCCamera.cpp	/^float CCCamera::getZEye(void)$/;"	f	class:CCCamera	signature:(void)
CCCamera::getZEye	CCCamera.h	/^    static float getZEye();$/;"	p	class:CCCamera	access:public	signature:()
CCCamera::init	CCCamera.cpp	/^void CCCamera::init(void)$/;"	f	class:CCCamera	signature:(void)
CCCamera::init	CCCamera.h	/^    void init(void);$/;"	p	class:CCCamera	access:public	signature:(void)
CCCamera::isDirty	CCCamera.h	/^    inline bool isDirty(void) { return m_bDirty; }$/;"	f	class:CCCamera	access:public	signature:(void)
CCCamera::locate	CCCamera.cpp	/^void CCCamera::locate(void)$/;"	f	class:CCCamera	signature:(void)
CCCamera::locate	CCCamera.h	/^    void locate(void);$/;"	p	class:CCCamera	access:public	signature:(void)
CCCamera::m_bDirty	CCCamera.h	/^    bool m_bDirty;$/;"	m	class:CCCamera	access:protected
CCCamera::m_fCenterX	CCCamera.h	/^    float m_fCenterX;$/;"	m	class:CCCamera	access:protected
CCCamera::m_fCenterY	CCCamera.h	/^    float m_fCenterY;$/;"	m	class:CCCamera	access:protected
CCCamera::m_fCenterZ	CCCamera.h	/^    float m_fCenterZ;$/;"	m	class:CCCamera	access:protected
CCCamera::m_fEyeX	CCCamera.h	/^    float m_fEyeX;$/;"	m	class:CCCamera	access:protected
CCCamera::m_fEyeY	CCCamera.h	/^    float m_fEyeY;$/;"	m	class:CCCamera	access:protected
CCCamera::m_fEyeZ	CCCamera.h	/^    float m_fEyeZ;$/;"	m	class:CCCamera	access:protected
CCCamera::m_fUpX	CCCamera.h	/^    float m_fUpX;$/;"	m	class:CCCamera	access:protected
CCCamera::m_fUpY	CCCamera.h	/^    float m_fUpY;$/;"	m	class:CCCamera	access:protected
CCCamera::m_fUpZ	CCCamera.h	/^    float m_fUpZ;$/;"	m	class:CCCamera	access:protected
CCCamera::m_lookupMatrix	CCCamera.h	/^    kmMat4    m_lookupMatrix;$/;"	m	class:CCCamera	access:protected
CCCamera::restore	CCCamera.cpp	/^void CCCamera::restore(void)$/;"	f	class:CCCamera	signature:(void)
CCCamera::restore	CCCamera.h	/^    void restore(void);$/;"	p	class:CCCamera	access:public	signature:(void)
CCCamera::setCenterXYZ	CCCamera.cpp	/^void CCCamera::setCenterXYZ(float fCenterX, float fCenterY, float fCenterZ)$/;"	f	class:CCCamera	signature:(float fCenterX, float fCenterY, float fCenterZ)
CCCamera::setCenterXYZ	CCCamera.h	/^    void setCenterXYZ(float fCenterX, float fCenterY, float fCenterZ);$/;"	p	class:CCCamera	access:public	signature:(float fCenterX, float fCenterY, float fCenterZ)
CCCamera::setDirty	CCCamera.h	/^    inline void setDirty(bool bValue) { m_bDirty = bValue; }$/;"	f	class:CCCamera	access:public	signature:(bool bValue)
CCCamera::setEyeXYZ	CCCamera.cpp	/^void CCCamera::setEyeXYZ(float fEyeX, float fEyeY, float fEyeZ)$/;"	f	class:CCCamera	signature:(float fEyeX, float fEyeY, float fEyeZ)
CCCamera::setEyeXYZ	CCCamera.h	/^    void setEyeXYZ(float fEyeX, float fEyeY, float fEyeZ);$/;"	p	class:CCCamera	access:public	signature:(float fEyeX, float fEyeY, float fEyeZ)
CCCamera::setUpXYZ	CCCamera.cpp	/^void CCCamera::setUpXYZ(float fUpX, float fUpY, float fUpZ)$/;"	f	class:CCCamera	signature:(float fUpX, float fUpY, float fUpZ)
CCCamera::setUpXYZ	CCCamera.h	/^    void setUpXYZ(float fUpX, float fUpY, float fUpZ);$/;"	p	class:CCCamera	access:public	signature:(float fUpX, float fUpY, float fUpZ)
CCCamera::~CCCamera	CCCamera.cpp	/^CCCamera::~CCCamera(void)$/;"	f	class:CCCamera	signature:(void)
CCCamera::~CCCamera	CCCamera.h	/^    ~CCCamera(void);$/;"	p	class:CCCamera	access:public	signature:(void)
CCCardinalSplineBy	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineBy::CCCardinalSplineBy() : m_startPosition(0,0)$/;"	f	class:CCCardinalSplineBy	signature:()
CCCardinalSplineBy	actions/CCActionCatmullRom.h	/^    CCCardinalSplineBy();$/;"	p	class:CCCardinalSplineBy	access:public	signature:()
CCCardinalSplineBy	actions/CCActionCatmullRom.h	/^class CC_DLL CCCardinalSplineBy : public CCCardinalSplineTo $/;"	c	inherits:CCCardinalSplineTo
CCCardinalSplineBy::CCCardinalSplineBy	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineBy::CCCardinalSplineBy() : m_startPosition(0,0)$/;"	f	class:CCCardinalSplineBy	signature:()
CCCardinalSplineBy::CCCardinalSplineBy	actions/CCActionCatmullRom.h	/^    CCCardinalSplineBy();$/;"	p	class:CCCardinalSplineBy	access:public	signature:()
CCCardinalSplineBy::create	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineBy* CCCardinalSplineBy::create(float duration, cocos2d::CCPointArray *points, float tension)$/;"	f	class:CCCardinalSplineBy	signature:(float duration, cocos2d::CCPointArray *points, float tension)
CCCardinalSplineBy::create	actions/CCActionCatmullRom.h	/^    static CCCardinalSplineBy* create(float duration, CCPointArray* points, float tension);$/;"	p	class:CCCardinalSplineBy	access:public	signature:(float duration, CCPointArray* points, float tension)
CCCardinalSplineBy::m_startPosition	actions/CCActionCatmullRom.h	/^    CCPoint m_startPosition;$/;"	m	class:CCCardinalSplineBy	access:protected
CCCardinalSplineBy::reverse	actions/CCActionCatmullRom.cpp	/^CCActionInterval* CCCardinalSplineBy::reverse()$/;"	f	class:CCCardinalSplineBy	signature:()
CCCardinalSplineBy::reverse	actions/CCActionCatmullRom.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCCardinalSplineBy	access:public	signature:()
CCCardinalSplineBy::startWithTarget	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineBy::startWithTarget(cocos2d::CCNode *pTarget)$/;"	f	class:CCCardinalSplineBy	signature:(cocos2d::CCNode *pTarget)
CCCardinalSplineBy::startWithTarget	actions/CCActionCatmullRom.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCCardinalSplineBy	access:public	signature:(CCNode *pTarget)
CCCardinalSplineBy::updatePosition	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineBy::updatePosition(cocos2d::CCPoint &newPos)$/;"	f	class:CCCardinalSplineBy	signature:(cocos2d::CCPoint &newPos)
CCCardinalSplineBy::updatePosition	actions/CCActionCatmullRom.h	/^    virtual void updatePosition(CCPoint &newPos);$/;"	p	class:CCCardinalSplineBy	access:public	signature:(CCPoint &newPos)
CCCardinalSplineTo	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo::CCCardinalSplineTo()$/;"	f	class:CCCardinalSplineTo	signature:()
CCCardinalSplineTo	actions/CCActionCatmullRom.h	/^    CCCardinalSplineTo();$/;"	p	class:CCCardinalSplineTo	access:public	signature:()
CCCardinalSplineTo	actions/CCActionCatmullRom.h	/^class CC_DLL CCCardinalSplineTo : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCCardinalSplineTo::CCCardinalSplineTo	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo::CCCardinalSplineTo()$/;"	f	class:CCCardinalSplineTo	signature:()
CCCardinalSplineTo::CCCardinalSplineTo	actions/CCActionCatmullRom.h	/^    CCCardinalSplineTo();$/;"	p	class:CCCardinalSplineTo	access:public	signature:()
CCCardinalSplineTo::copyWithZone	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo* CCCardinalSplineTo::copyWithZone(cocos2d::CCZone *pZone)$/;"	f	class:CCCardinalSplineTo	signature:(cocos2d::CCZone *pZone)
CCCardinalSplineTo::copyWithZone	actions/CCActionCatmullRom.h	/^    virtual CCCardinalSplineTo* copyWithZone(CCZone* pZone);$/;"	p	class:CCCardinalSplineTo	access:public	signature:(CCZone* pZone)
CCCardinalSplineTo::create	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo* CCCardinalSplineTo::create(float duration, cocos2d::CCPointArray *points, float tension)$/;"	f	class:CCCardinalSplineTo	signature:(float duration, cocos2d::CCPointArray *points, float tension)
CCCardinalSplineTo::create	actions/CCActionCatmullRom.h	/^    static CCCardinalSplineTo* create(float duration, CCPointArray* points, float tension);$/;"	p	class:CCCardinalSplineTo	access:public	signature:(float duration, CCPointArray* points, float tension)
CCCardinalSplineTo::getPoints	actions/CCActionCatmullRom.h	/^    inline CCPointArray* getPoints() { return m_pPoints; }$/;"	f	class:CCCardinalSplineTo	access:public	signature:()
CCCardinalSplineTo::initWithDuration	actions/CCActionCatmullRom.cpp	/^bool CCCardinalSplineTo::initWithDuration(float duration, cocos2d::CCPointArray *points, float tension)$/;"	f	class:CCCardinalSplineTo	signature:(float duration, cocos2d::CCPointArray *points, float tension)
CCCardinalSplineTo::initWithDuration	actions/CCActionCatmullRom.h	/^    bool initWithDuration(float duration, CCPointArray* points, float tension);$/;"	p	class:CCCardinalSplineTo	access:public	signature:(float duration, CCPointArray* points, float tension)
CCCardinalSplineTo::m_accumulatedDiff	actions/CCActionCatmullRom.h	/^    CCPoint	m_accumulatedDiff;$/;"	m	class:CCCardinalSplineTo	access:protected
CCCardinalSplineTo::m_fDeltaT	actions/CCActionCatmullRom.h	/^    float m_fDeltaT;$/;"	m	class:CCCardinalSplineTo	access:protected
CCCardinalSplineTo::m_fTension	actions/CCActionCatmullRom.h	/^    float m_fTension;$/;"	m	class:CCCardinalSplineTo	access:protected
CCCardinalSplineTo::m_pPoints	actions/CCActionCatmullRom.h	/^    CCPointArray *m_pPoints;$/;"	m	class:CCCardinalSplineTo	access:protected
CCCardinalSplineTo::m_previousPosition	actions/CCActionCatmullRom.h	/^    CCPoint	m_previousPosition;$/;"	m	class:CCCardinalSplineTo	access:protected
CCCardinalSplineTo::reverse	actions/CCActionCatmullRom.cpp	/^CCActionInterval* CCCardinalSplineTo::reverse()$/;"	f	class:CCCardinalSplineTo	signature:()
CCCardinalSplineTo::reverse	actions/CCActionCatmullRom.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCCardinalSplineTo	access:public	signature:()
CCCardinalSplineTo::setPoints	actions/CCActionCatmullRom.h	/^    inline void  setPoints(CCPointArray* points) $/;"	f	class:CCCardinalSplineTo	access:public	signature:(CCPointArray* points)
CCCardinalSplineTo::startWithTarget	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineTo::startWithTarget(cocos2d::CCNode *pTarget)$/;"	f	class:CCCardinalSplineTo	signature:(cocos2d::CCNode *pTarget)
CCCardinalSplineTo::startWithTarget	actions/CCActionCatmullRom.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCCardinalSplineTo	access:public	signature:(CCNode *pTarget)
CCCardinalSplineTo::update	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineTo::update(float time)$/;"	f	class:CCCardinalSplineTo	signature:(float time)
CCCardinalSplineTo::update	actions/CCActionCatmullRom.h	/^    virtual void update(float time);$/;"	p	class:CCCardinalSplineTo	access:public	signature:(float time)
CCCardinalSplineTo::updatePosition	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineTo::updatePosition(cocos2d::CCPoint &newPos)$/;"	f	class:CCCardinalSplineTo	signature:(cocos2d::CCPoint &newPos)
CCCardinalSplineTo::updatePosition	actions/CCActionCatmullRom.h	/^    virtual void updatePosition(CCPoint &newPos);$/;"	p	class:CCCardinalSplineTo	access:public	signature:(CCPoint &newPos)
CCCardinalSplineTo::~CCCardinalSplineTo	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo::~CCCardinalSplineTo()$/;"	f	class:CCCardinalSplineTo	signature:()
CCCardinalSplineTo::~CCCardinalSplineTo	actions/CCActionCatmullRom.h	/^    virtual ~CCCardinalSplineTo();$/;"	p	class:CCCardinalSplineTo	access:public	signature:()
CCCatmullRomBy	actions/CCActionCatmullRom.h	/^class CC_DLL CCCatmullRomBy : public CCCardinalSplineBy$/;"	c	inherits:CCCardinalSplineBy
CCCatmullRomBy::create	actions/CCActionCatmullRom.cpp	/^CCCatmullRomBy* CCCatmullRomBy::create(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomBy	signature:(float dt, cocos2d::CCPointArray *points)
CCCatmullRomBy::create	actions/CCActionCatmullRom.h	/^    static CCCatmullRomBy* create(float dt, CCPointArray* points);$/;"	p	class:CCCatmullRomBy	access:public	signature:(float dt, CCPointArray* points)
CCCatmullRomBy::initWithDuration	actions/CCActionCatmullRom.cpp	/^bool CCCatmullRomBy::initWithDuration(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomBy	signature:(float dt, cocos2d::CCPointArray *points)
CCCatmullRomBy::initWithDuration	actions/CCActionCatmullRom.h	/^    bool initWithDuration(float dt, CCPointArray* points);$/;"	p	class:CCCatmullRomBy	access:public	signature:(float dt, CCPointArray* points)
CCCatmullRomTo	actions/CCActionCatmullRom.h	/^class CC_DLL CCCatmullRomTo : public CCCardinalSplineTo$/;"	c	inherits:CCCardinalSplineTo
CCCatmullRomTo::create	actions/CCActionCatmullRom.cpp	/^CCCatmullRomTo* CCCatmullRomTo::create(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomTo	signature:(float dt, cocos2d::CCPointArray *points)
CCCatmullRomTo::create	actions/CCActionCatmullRom.h	/^    static CCCatmullRomTo* create(float dt, CCPointArray* points);$/;"	p	class:CCCatmullRomTo	access:public	signature:(float dt, CCPointArray* points)
CCCatmullRomTo::initWithDuration	actions/CCActionCatmullRom.cpp	/^bool CCCatmullRomTo::initWithDuration(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomTo	signature:(float dt, cocos2d::CCPointArray *points)
CCCatmullRomTo::initWithDuration	actions/CCActionCatmullRom.h	/^    bool initWithDuration(float dt, CCPointArray* points);$/;"	p	class:CCCatmullRomTo	access:public	signature:(float dt, CCPointArray* points)
CCClippingNode	misc_nodes/CCClippingNode.cpp	/^CCClippingNode::CCClippingNode()$/;"	f	class:CCClippingNode	signature:()
CCClippingNode	misc_nodes/CCClippingNode.h	/^    CCClippingNode();$/;"	p	class:CCClippingNode	access:private	signature:()
CCClippingNode	misc_nodes/CCClippingNode.h	/^class CC_DLL CCClippingNode : public CCNode$/;"	c	inherits:CCNode
CCClippingNode::CCClippingNode	misc_nodes/CCClippingNode.cpp	/^CCClippingNode::CCClippingNode()$/;"	f	class:CCClippingNode	signature:()
CCClippingNode::CCClippingNode	misc_nodes/CCClippingNode.h	/^    CCClippingNode();$/;"	p	class:CCClippingNode	access:private	signature:()
CCClippingNode::create	misc_nodes/CCClippingNode.cpp	/^CCClippingNode* CCClippingNode::create()$/;"	f	class:CCClippingNode	signature:()
CCClippingNode::create	misc_nodes/CCClippingNode.cpp	/^CCClippingNode* CCClippingNode::create(CCNode *pStencil)$/;"	f	class:CCClippingNode	signature:(CCNode *pStencil)
CCClippingNode::create	misc_nodes/CCClippingNode.h	/^    static CCClippingNode* create();$/;"	p	class:CCClippingNode	access:public	signature:()
CCClippingNode::create	misc_nodes/CCClippingNode.h	/^    static CCClippingNode* create(CCNode *pStencil);$/;"	p	class:CCClippingNode	access:public	signature:(CCNode *pStencil)
CCClippingNode::getAlphaThreshold	misc_nodes/CCClippingNode.cpp	/^GLfloat CCClippingNode::getAlphaThreshold() const$/;"	f	class:CCClippingNode	signature:() const
CCClippingNode::getAlphaThreshold	misc_nodes/CCClippingNode.h	/^    GLfloat getAlphaThreshold() const;$/;"	p	class:CCClippingNode	access:public	signature:() const
CCClippingNode::getStencil	misc_nodes/CCClippingNode.cpp	/^CCNode* CCClippingNode::getStencil() const$/;"	f	class:CCClippingNode	signature:() const
CCClippingNode::getStencil	misc_nodes/CCClippingNode.h	/^    CCNode* getStencil() const;$/;"	p	class:CCClippingNode	access:public	signature:() const
CCClippingNode::init	misc_nodes/CCClippingNode.cpp	/^bool CCClippingNode::init()$/;"	f	class:CCClippingNode	signature:()
CCClippingNode::init	misc_nodes/CCClippingNode.cpp	/^bool CCClippingNode::init(CCNode *pStencil)$/;"	f	class:CCClippingNode	signature:(CCNode *pStencil)
CCClippingNode::init	misc_nodes/CCClippingNode.h	/^    virtual bool init();$/;"	p	class:CCClippingNode	access:public	signature:()
CCClippingNode::init	misc_nodes/CCClippingNode.h	/^    virtual bool init(CCNode *pStencil);$/;"	p	class:CCClippingNode	access:public	signature:(CCNode *pStencil)
CCClippingNode::isInverted	misc_nodes/CCClippingNode.cpp	/^bool CCClippingNode::isInverted() const$/;"	f	class:CCClippingNode	signature:() const
CCClippingNode::isInverted	misc_nodes/CCClippingNode.h	/^    bool isInverted() const;$/;"	p	class:CCClippingNode	access:public	signature:() const
CCClippingNode::m_bInverted	misc_nodes/CCClippingNode.h	/^    bool    m_bInverted;$/;"	m	class:CCClippingNode	access:protected
CCClippingNode::m_fAlphaThreshold	misc_nodes/CCClippingNode.h	/^    GLfloat m_fAlphaThreshold;$/;"	m	class:CCClippingNode	access:protected
CCClippingNode::m_pStencil	misc_nodes/CCClippingNode.h	/^    CCNode* m_pStencil;$/;"	m	class:CCClippingNode	access:protected
CCClippingNode::onEnter	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::onEnter()$/;"	f	class:CCClippingNode	signature:()
CCClippingNode::onEnter	misc_nodes/CCClippingNode.h	/^    virtual void onEnter();$/;"	p	class:CCClippingNode	access:public	signature:()
CCClippingNode::onEnterTransitionDidFinish	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::onEnterTransitionDidFinish()$/;"	f	class:CCClippingNode	signature:()
CCClippingNode::onEnterTransitionDidFinish	misc_nodes/CCClippingNode.h	/^    virtual void onEnterTransitionDidFinish();$/;"	p	class:CCClippingNode	access:public	signature:()
CCClippingNode::onExit	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::onExit()$/;"	f	class:CCClippingNode	signature:()
CCClippingNode::onExit	misc_nodes/CCClippingNode.h	/^    virtual void onExit();$/;"	p	class:CCClippingNode	access:public	signature:()
CCClippingNode::onExitTransitionDidStart	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::onExitTransitionDidStart()$/;"	f	class:CCClippingNode	signature:()
CCClippingNode::onExitTransitionDidStart	misc_nodes/CCClippingNode.h	/^    virtual void onExitTransitionDidStart();$/;"	p	class:CCClippingNode	access:public	signature:()
CCClippingNode::setAlphaThreshold	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::setAlphaThreshold(GLfloat fAlphaThreshold)$/;"	f	class:CCClippingNode	signature:(GLfloat fAlphaThreshold)
CCClippingNode::setAlphaThreshold	misc_nodes/CCClippingNode.h	/^    void setAlphaThreshold(GLfloat fAlphaThreshold);$/;"	p	class:CCClippingNode	access:public	signature:(GLfloat fAlphaThreshold)
CCClippingNode::setInverted	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::setInverted(bool bInverted)$/;"	f	class:CCClippingNode	signature:(bool bInverted)
CCClippingNode::setInverted	misc_nodes/CCClippingNode.h	/^    void setInverted(bool bInverted);$/;"	p	class:CCClippingNode	access:public	signature:(bool bInverted)
CCClippingNode::setStencil	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::setStencil(CCNode *pStencil)$/;"	f	class:CCClippingNode	signature:(CCNode *pStencil)
CCClippingNode::setStencil	misc_nodes/CCClippingNode.h	/^    void setStencil(CCNode *pStencil);$/;"	p	class:CCClippingNode	access:public	signature:(CCNode *pStencil)
CCClippingNode::visit	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::visit()$/;"	f	class:CCClippingNode	signature:()
CCClippingNode::visit	misc_nodes/CCClippingNode.h	/^    virtual void visit();$/;"	p	class:CCClippingNode	access:public	signature:()
CCClippingNode::~CCClippingNode	misc_nodes/CCClippingNode.cpp	/^CCClippingNode::~CCClippingNode()$/;"	f	class:CCClippingNode	signature:()
CCClippingNode::~CCClippingNode	misc_nodes/CCClippingNode.h	/^    virtual ~CCClippingNode();$/;"	p	class:CCClippingNode	access:public	signature:()
CCConfiguration	CCConfiguration.cpp	/^CCConfiguration::CCConfiguration(void)$/;"	f	class:CCConfiguration	signature:(void)
CCConfiguration	CCConfiguration.h	/^    CCConfiguration(void);$/;"	p	class:CCConfiguration	access:private	signature:(void)
CCConfiguration	CCConfiguration.h	/^class CC_DLL CCConfiguration : public CCObject$/;"	c	inherits:CCObject
CCConfiguration::CCConfiguration	CCConfiguration.cpp	/^CCConfiguration::CCConfiguration(void)$/;"	f	class:CCConfiguration	signature:(void)
CCConfiguration::CCConfiguration	CCConfiguration.h	/^    CCConfiguration(void);$/;"	p	class:CCConfiguration	access:private	signature:(void)
CCConfiguration::checkForGLExtension	CCConfiguration.cpp	/^bool CCConfiguration::checkForGLExtension(const string &searchName)$/;"	f	class:CCConfiguration	signature:(const string &searchName)
CCConfiguration::checkForGLExtension	CCConfiguration.h	/^    bool checkForGLExtension(const std::string &searchName);$/;"	p	class:CCConfiguration	access:public	signature:(const std::string &searchName)
CCConfiguration::getMaxModelviewStackDepth	CCConfiguration.h	/^    inline int getMaxModelviewStackDepth(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
CCConfiguration::getMaxTextureSize	CCConfiguration.h	/^    inline int getMaxTextureSize(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
CCConfiguration::getMaxTextureUnits	CCConfiguration.h	/^    inline int getMaxTextureUnits(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
CCConfiguration::init	CCConfiguration.cpp	/^bool CCConfiguration::init(void)$/;"	f	class:CCConfiguration	signature:(void)
CCConfiguration::init	CCConfiguration.h	/^    bool init(void);$/;"	p	class:CCConfiguration	access:public	signature:(void)
CCConfiguration::m_bSupportsBGRA8888	CCConfiguration.h	/^    bool            m_bSupportsBGRA8888;$/;"	m	class:CCConfiguration	access:protected
CCConfiguration::m_bSupportsDiscardFramebuffer	CCConfiguration.h	/^    bool            m_bSupportsDiscardFramebuffer;$/;"	m	class:CCConfiguration	access:protected
CCConfiguration::m_bSupportsNPOT	CCConfiguration.h	/^    bool            m_bSupportsNPOT;$/;"	m	class:CCConfiguration	access:protected
CCConfiguration::m_bSupportsPVRTC	CCConfiguration.h	/^    bool            m_bSupportsPVRTC;$/;"	m	class:CCConfiguration	access:protected
CCConfiguration::m_bSupportsShareableVAO	CCConfiguration.h	/^    bool            m_bSupportsShareableVAO;$/;"	m	class:CCConfiguration	access:protected
CCConfiguration::m_nMaxModelviewStackDepth	CCConfiguration.h	/^    GLint           m_nMaxModelviewStackDepth;$/;"	m	class:CCConfiguration	access:protected
CCConfiguration::m_nMaxSamplesAllowed	CCConfiguration.h	/^    GLint           m_nMaxSamplesAllowed;$/;"	m	class:CCConfiguration	access:protected
CCConfiguration::m_nMaxTextureSize	CCConfiguration.h	/^    GLint           m_nMaxTextureSize;$/;"	m	class:CCConfiguration	access:protected
CCConfiguration::m_nMaxTextureUnits	CCConfiguration.h	/^    GLint           m_nMaxTextureUnits;$/;"	m	class:CCConfiguration	access:protected
CCConfiguration::m_pGlExtensions	CCConfiguration.h	/^    char *          m_pGlExtensions;$/;"	m	class:CCConfiguration	access:protected
CCConfiguration::purgeConfiguration	CCConfiguration.cpp	/^void CCConfiguration::purgeConfiguration(void)$/;"	f	class:CCConfiguration	signature:(void)
CCConfiguration::purgeConfiguration	CCConfiguration.h	/^    static void purgeConfiguration(void);$/;"	p	class:CCConfiguration	access:public	signature:(void)
CCConfiguration::s_gSharedConfiguration	CCConfiguration.h	/^    static CCConfiguration *s_gSharedConfiguration;$/;"	m	class:CCConfiguration	access:private
CCConfiguration::sharedConfiguration	CCConfiguration.cpp	/^CCConfiguration* CCConfiguration::sharedConfiguration(void)$/;"	f	class:CCConfiguration	signature:(void)
CCConfiguration::sharedConfiguration	CCConfiguration.h	/^    static CCConfiguration *sharedConfiguration(void);$/;"	p	class:CCConfiguration	access:public	signature:(void)
CCConfiguration::supportsBGRA8888	CCConfiguration.h	/^    inline bool supportsBGRA8888(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
CCConfiguration::supportsDiscardFramebuffer	CCConfiguration.h	/^    inline bool supportsDiscardFramebuffer(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
CCConfiguration::supportsNPOT	CCConfiguration.h	/^    inline bool supportsNPOT(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
CCConfiguration::supportsPVRTC	CCConfiguration.h	/^    inline bool supportsPVRTC(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
CCConfiguration::supportsShareableVAO	CCConfiguration.h	/^    inline bool supportsShareableVAO(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
CCCopying	cocoa/CCObject.h	/^class CC_DLL CCCopying$/;"	c
CCCopying::copyWithZone	cocoa/CCObject.cpp	/^CCObject* CCCopying::copyWithZone(CCZone *pZone)$/;"	f	class:CCCopying	signature:(CCZone *pZone)
CCCopying::copyWithZone	cocoa/CCObject.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCCopying	access:public	signature:(CCZone* pZone)
CCDICT_FOREACH	cocoa/CCDictionary.h	140;"	d
CCDeccelAmplitude	actions/CCActionGrid.h	/^class CC_DLL CCDeccelAmplitude : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCDeccelAmplitude::create	actions/CCActionGrid.cpp	/^CCDeccelAmplitude* CCDeccelAmplitude::create(CCAction *pAction, float duration)$/;"	f	class:CCDeccelAmplitude	signature:(CCAction *pAction, float duration)
CCDeccelAmplitude::create	actions/CCActionGrid.h	/^    static CCDeccelAmplitude* create(CCAction *pAction, float duration);$/;"	p	class:CCDeccelAmplitude	access:public	signature:(CCAction *pAction, float duration)
CCDeccelAmplitude::getRate	actions/CCActionGrid.h	/^    inline float getRate(void) { return m_fRate; }$/;"	f	class:CCDeccelAmplitude	access:public	signature:(void)
CCDeccelAmplitude::initWithAction	actions/CCActionGrid.cpp	/^bool CCDeccelAmplitude::initWithAction(CCAction *pAction, float duration)$/;"	f	class:CCDeccelAmplitude	signature:(CCAction *pAction, float duration)
CCDeccelAmplitude::initWithAction	actions/CCActionGrid.h	/^    bool initWithAction(CCAction *pAction, float duration);$/;"	p	class:CCDeccelAmplitude	access:public	signature:(CCAction *pAction, float duration)
CCDeccelAmplitude::m_fRate	actions/CCActionGrid.h	/^    float m_fRate;$/;"	m	class:CCDeccelAmplitude	access:protected
CCDeccelAmplitude::m_pOther	actions/CCActionGrid.h	/^    CCActionInterval *m_pOther;$/;"	m	class:CCDeccelAmplitude	access:protected
CCDeccelAmplitude::reverse	actions/CCActionGrid.cpp	/^CCActionInterval* CCDeccelAmplitude::reverse(void)$/;"	f	class:CCDeccelAmplitude	signature:(void)
CCDeccelAmplitude::reverse	actions/CCActionGrid.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCDeccelAmplitude	access:public	signature:(void)
CCDeccelAmplitude::setRate	actions/CCActionGrid.h	/^    inline void setRate(float fRate) { m_fRate = fRate; }$/;"	f	class:CCDeccelAmplitude	access:public	signature:(float fRate)
CCDeccelAmplitude::startWithTarget	actions/CCActionGrid.cpp	/^void CCDeccelAmplitude::startWithTarget(CCNode *pTarget)$/;"	f	class:CCDeccelAmplitude	signature:(CCNode *pTarget)
CCDeccelAmplitude::startWithTarget	actions/CCActionGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCDeccelAmplitude	access:public	signature:(CCNode *pTarget)
CCDeccelAmplitude::update	actions/CCActionGrid.cpp	/^void CCDeccelAmplitude::update(float time)$/;"	f	class:CCDeccelAmplitude	signature:(float time)
CCDeccelAmplitude::update	actions/CCActionGrid.h	/^    virtual void update(float time);$/;"	p	class:CCDeccelAmplitude	access:public	signature:(float time)
CCDeccelAmplitude::~CCDeccelAmplitude	actions/CCActionGrid.cpp	/^CCDeccelAmplitude::~CCDeccelAmplitude(void)$/;"	f	class:CCDeccelAmplitude	signature:(void)
CCDeccelAmplitude::~CCDeccelAmplitude	actions/CCActionGrid.h	/^    ~CCDeccelAmplitude(void);$/;"	p	class:CCDeccelAmplitude	access:public	signature:(void)
CCDelayTime	actions/CCActionInterval.h	/^class CC_DLL CCDelayTime : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCDelayTime::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCDelayTime::copyWithZone(CCZone *pZone)$/;"	f	class:CCDelayTime	signature:(CCZone *pZone)
CCDelayTime::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCDelayTime	access:public	signature:(CCZone* pZone)
CCDelayTime::create	actions/CCActionInterval.cpp	/^CCDelayTime* CCDelayTime::create(float d)$/;"	f	class:CCDelayTime	signature:(float d)
CCDelayTime::create	actions/CCActionInterval.h	/^    static CCDelayTime* create(float d);$/;"	p	class:CCDelayTime	access:public	signature:(float d)
CCDelayTime::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCDelayTime::reverse(void)$/;"	f	class:CCDelayTime	signature:(void)
CCDelayTime::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCDelayTime	access:public	signature:(void)
CCDelayTime::update	actions/CCActionInterval.cpp	/^void CCDelayTime::update(float time)$/;"	f	class:CCDelayTime	signature:(float time)
CCDelayTime::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCDelayTime	access:public	signature:(float time)
CCDevice	platform/CCDevice.h	/^    CCDevice();$/;"	p	class:CCDevice	access:private	signature:()
CCDevice	platform/CCDevice.h	/^class CC_DLL CCDevice$/;"	c
CCDevice::CCDevice	platform/CCDevice.h	/^    CCDevice();$/;"	p	class:CCDevice	access:private	signature:()
CCDevice::getDPI	platform/CCDevice.h	/^    static int getDPI();$/;"	p	class:CCDevice	access:public	signature:()
CCDictElement	cocoa/CCDictionary.cpp	/^CCDictElement::CCDictElement(const char* pszKey, CCObject* pObject)$/;"	f	class:CCDictElement	signature:(const char* pszKey, CCObject* pObject)
CCDictElement	cocoa/CCDictionary.cpp	/^CCDictElement::CCDictElement(intptr_t iKey, CCObject* pObject)$/;"	f	class:CCDictElement	signature:(intptr_t iKey, CCObject* pObject)
CCDictElement	cocoa/CCDictionary.h	/^    CCDictElement(const char* pszKey, CCObject* pObject);$/;"	p	class:CCDictElement	access:private	signature:(const char* pszKey, CCObject* pObject)
CCDictElement	cocoa/CCDictionary.h	/^    CCDictElement(intptr_t iKey, CCObject* pObject);$/;"	p	class:CCDictElement	access:private	signature:(intptr_t iKey, CCObject* pObject)
CCDictElement	cocoa/CCDictionary.h	/^class CC_DLL CCDictElement$/;"	c
CCDictElement::CCDictElement	cocoa/CCDictionary.cpp	/^CCDictElement::CCDictElement(const char* pszKey, CCObject* pObject)$/;"	f	class:CCDictElement	signature:(const char* pszKey, CCObject* pObject)
CCDictElement::CCDictElement	cocoa/CCDictionary.cpp	/^CCDictElement::CCDictElement(intptr_t iKey, CCObject* pObject)$/;"	f	class:CCDictElement	signature:(intptr_t iKey, CCObject* pObject)
CCDictElement::CCDictElement	cocoa/CCDictionary.h	/^    CCDictElement(const char* pszKey, CCObject* pObject);$/;"	p	class:CCDictElement	access:private	signature:(const char* pszKey, CCObject* pObject)
CCDictElement::CCDictElement	cocoa/CCDictionary.h	/^    CCDictElement(intptr_t iKey, CCObject* pObject);$/;"	p	class:CCDictElement	access:private	signature:(intptr_t iKey, CCObject* pObject)
CCDictElement::getIntKey	cocoa/CCDictionary.h	/^    inline intptr_t getIntKey() const$/;"	f	class:CCDictElement	access:public	signature:() const
CCDictElement::getObject	cocoa/CCDictionary.h	/^    inline CCObject* getObject() const { return m_pObject; }$/;"	f	class:CCDictElement	access:public	signature:() const
CCDictElement::getStrKey	cocoa/CCDictionary.h	/^    inline const char* getStrKey() const$/;"	f	class:CCDictElement	access:public	signature:() const
CCDictElement::hh	cocoa/CCDictionary.h	/^    UT_hash_handle hh;      \/\/ makes this class hashable$/;"	m	class:CCDictElement	access:public
CCDictElement::m_iKey	cocoa/CCDictionary.h	/^    intptr_t  m_iKey;       \/\/ hash key of integer type$/;"	m	class:CCDictElement	access:private
CCDictElement::m_pObject	cocoa/CCDictionary.h	/^    CCObject* m_pObject;    \/\/ hash value$/;"	m	class:CCDictElement	access:private
CCDictElement::m_szKey	cocoa/CCDictionary.h	/^    char      m_szKey[MAX_KEY_LEN];     \/\/ hash key of string type$/;"	m	class:CCDictElement	access:private
CCDictElement::~CCDictElement	cocoa/CCDictionary.cpp	/^CCDictElement::~CCDictElement()$/;"	f	class:CCDictElement	signature:()
CCDictElement::~CCDictElement	cocoa/CCDictionary.h	/^    ~CCDictElement();$/;"	p	class:CCDictElement	access:public	signature:()
CCDictMaker	platform/CCFileUtils.cpp	/^    CCDictMaker()        $/;"	f	class:CCDictMaker	access:public	signature:()
CCDictMaker	platform/CCFileUtils.cpp	/^class CCDictMaker : public CCSAXDelegator$/;"	c	file:	inherits:CCSAXDelegator
CCDictMaker::CCDictMaker	platform/CCFileUtils.cpp	/^    CCDictMaker()        $/;"	f	class:CCDictMaker	access:public	signature:()
CCDictMaker::arrayWithContentsOfFile	platform/CCFileUtils.cpp	/^    CCArray* arrayWithContentsOfFile(const char* pFileName)$/;"	f	class:CCDictMaker	access:public	signature:(const char* pFileName)
CCDictMaker::dictionaryWithContentsOfFile	platform/CCFileUtils.cpp	/^    CCDictionary* dictionaryWithContentsOfFile(const char *pFileName)$/;"	f	class:CCDictMaker	access:public	signature:(const char *pFileName)
CCDictMaker::endElement	platform/CCFileUtils.cpp	/^    void endElement(void *ctx, const char *name)$/;"	f	class:CCDictMaker	access:public	signature:(void *ctx, const char *name)
CCDictMaker::m_eResultType	platform/CCFileUtils.cpp	/^    CCSAXResult m_eResultType;$/;"	m	class:CCDictMaker	file:	access:public
CCDictMaker::m_pArray	platform/CCFileUtils.cpp	/^    CCArray* m_pArray;$/;"	m	class:CCDictMaker	file:	access:public
CCDictMaker::m_pCurDict	platform/CCFileUtils.cpp	/^    CCDictionary *m_pCurDict;$/;"	m	class:CCDictMaker	file:	access:public
CCDictMaker::m_pRootArray	platform/CCFileUtils.cpp	/^    CCArray* m_pRootArray;$/;"	m	class:CCDictMaker	file:	access:public
CCDictMaker::m_pRootDict	platform/CCFileUtils.cpp	/^    CCDictionary *m_pRootDict;$/;"	m	class:CCDictMaker	file:	access:public
CCDictMaker::m_sCurKey	platform/CCFileUtils.cpp	/^    std::string m_sCurKey;   \/\/\/< parsed key$/;"	m	class:CCDictMaker	file:	access:public
CCDictMaker::m_sCurValue	platform/CCFileUtils.cpp	/^    std::string m_sCurValue; \/\/ parsed value$/;"	m	class:CCDictMaker	file:	access:public
CCDictMaker::m_tArrayStack	platform/CCFileUtils.cpp	/^    std::stack<CCArray*> m_tArrayStack;$/;"	m	class:CCDictMaker	file:	access:public
CCDictMaker::m_tDictStack	platform/CCFileUtils.cpp	/^    std::stack<CCDictionary*> m_tDictStack;$/;"	m	class:CCDictMaker	file:	access:public
CCDictMaker::m_tState	platform/CCFileUtils.cpp	/^    CCSAXState m_tState;$/;"	m	class:CCDictMaker	file:	access:public
CCDictMaker::m_tStateStack	platform/CCFileUtils.cpp	/^    std::stack<CCSAXState>  m_tStateStack;$/;"	m	class:CCDictMaker	file:	access:public
CCDictMaker::startElement	platform/CCFileUtils.cpp	/^    void startElement(void *ctx, const char *name, const char **atts)$/;"	f	class:CCDictMaker	access:public	signature:(void *ctx, const char *name, const char **atts)
CCDictMaker::textHandler	platform/CCFileUtils.cpp	/^    void textHandler(void *ctx, const char *ch, int len)$/;"	f	class:CCDictMaker	access:public	signature:(void *ctx, const char *ch, int len)
CCDictMaker::~CCDictMaker	platform/CCFileUtils.cpp	/^    ~CCDictMaker()$/;"	f	class:CCDictMaker	access:public	signature:()
CCDictType	cocoa/CCDictionary.h	/^    enum CCDictType$/;"	g	class:CCDictionary	access:private
CCDictionary	cocoa/CCDictionary.cpp	/^CCDictionary::CCDictionary()$/;"	f	class:CCDictionary	signature:()
CCDictionary	cocoa/CCDictionary.h	/^    CCDictionary();$/;"	p	class:CCDictionary	access:public	signature:()
CCDictionary	cocoa/CCDictionary.h	/^class CC_DLL CCDictionary : public CCObject$/;"	c	inherits:CCObject
CCDictionary::CCDictType	cocoa/CCDictionary.h	/^    enum CCDictType$/;"	g	class:CCDictionary	access:private
CCDictionary::CCDictionary	cocoa/CCDictionary.cpp	/^CCDictionary::CCDictionary()$/;"	f	class:CCDictionary	signature:()
CCDictionary::CCDictionary	cocoa/CCDictionary.h	/^    CCDictionary();$/;"	p	class:CCDictionary	access:public	signature:()
CCDictionary::allKeys	cocoa/CCDictionary.cpp	/^CCArray* CCDictionary::allKeys()$/;"	f	class:CCDictionary	signature:()
CCDictionary::allKeys	cocoa/CCDictionary.h	/^    CCArray* allKeys();$/;"	p	class:CCDictionary	access:public	signature:()
CCDictionary::allKeysForObject	cocoa/CCDictionary.cpp	/^CCArray* CCDictionary::allKeysForObject(CCObject* object)$/;"	f	class:CCDictionary	signature:(CCObject* object)
CCDictionary::allKeysForObject	cocoa/CCDictionary.h	/^    CCArray* allKeysForObject(CCObject* object);$/;"	p	class:CCDictionary	access:public	signature:(CCObject* object)
CCDictionary::copyWithZone	cocoa/CCDictionary.cpp	/^CCObject* CCDictionary::copyWithZone(CCZone* pZone)$/;"	f	class:CCDictionary	signature:(CCZone* pZone)
CCDictionary::copyWithZone	cocoa/CCDictionary.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCDictionary	access:public	signature:(CCZone* pZone)
CCDictionary::count	cocoa/CCDictionary.cpp	/^unsigned int CCDictionary::count()$/;"	f	class:CCDictionary	signature:()
CCDictionary::count	cocoa/CCDictionary.h	/^    unsigned int count();$/;"	p	class:CCDictionary	access:public	signature:()
CCDictionary::create	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::create()$/;"	f	class:CCDictionary	signature:()
CCDictionary::create	cocoa/CCDictionary.h	/^    static CCDictionary* create();$/;"	p	class:CCDictionary	access:public	signature:()
CCDictionary::createWithContentsOfFile	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::createWithContentsOfFile(const char *pFileName)$/;"	f	class:CCDictionary	signature:(const char *pFileName)
CCDictionary::createWithContentsOfFile	cocoa/CCDictionary.h	/^    static CCDictionary* createWithContentsOfFile(const char *pFileName);$/;"	p	class:CCDictionary	access:public	signature:(const char *pFileName)
CCDictionary::createWithContentsOfFileThreadSafe	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::createWithContentsOfFileThreadSafe(const char *pFileName)$/;"	f	class:CCDictionary	signature:(const char *pFileName)
CCDictionary::createWithContentsOfFileThreadSafe	cocoa/CCDictionary.h	/^    static CCDictionary* createWithContentsOfFileThreadSafe(const char *pFileName);$/;"	p	class:CCDictionary	access:public	signature:(const char *pFileName)
CCDictionary::createWithDictionary	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::createWithDictionary(CCDictionary* srcDict)$/;"	f	class:CCDictionary	signature:(CCDictionary* srcDict)
CCDictionary::createWithDictionary	cocoa/CCDictionary.h	/^    static CCDictionary* createWithDictionary(CCDictionary* srcDict);$/;"	p	class:CCDictionary	access:public	signature:(CCDictionary* srcDict)
CCDictionary::kCCDictInt	cocoa/CCDictionary.h	/^        kCCDictInt$/;"	e	enum:CCDictionary::CCDictType
CCDictionary::kCCDictStr	cocoa/CCDictionary.h	/^        kCCDictStr,$/;"	e	enum:CCDictionary::CCDictType
CCDictionary::kCCDictUnknown	cocoa/CCDictionary.h	/^        kCCDictUnknown = 0,$/;"	e	enum:CCDictionary::CCDictType
CCDictionary::m_eDictType	cocoa/CCDictionary.h	/^    CCDictType m_eDictType;$/;"	m	class:CCDictionary	access:private
CCDictionary::m_pElements	cocoa/CCDictionary.h	/^    CCDictElement* m_pElements;$/;"	m	class:CCDictionary	access:public
CCDictionary::objectForKey	cocoa/CCDictionary.cpp	/^CCObject* CCDictionary::objectForKey(const std::string& key)$/;"	f	class:CCDictionary	signature:(const std::string& key)
CCDictionary::objectForKey	cocoa/CCDictionary.cpp	/^CCObject* CCDictionary::objectForKey(int key)$/;"	f	class:CCDictionary	signature:(int key)
CCDictionary::objectForKey	cocoa/CCDictionary.h	/^    CCObject* objectForKey(const std::string& key);$/;"	p	class:CCDictionary	access:public	signature:(const std::string& key)
CCDictionary::objectForKey	cocoa/CCDictionary.h	/^    CCObject* objectForKey(int key);$/;"	p	class:CCDictionary	access:public	signature:(int key)
CCDictionary::randomObject	cocoa/CCDictionary.cpp	/^CCObject* CCDictionary::randomObject()$/;"	f	class:CCDictionary	signature:()
CCDictionary::randomObject	cocoa/CCDictionary.h	/^    CCObject* randomObject();$/;"	p	class:CCDictionary	access:public	signature:()
CCDictionary::removeAllObjects	cocoa/CCDictionary.cpp	/^void CCDictionary::removeAllObjects()$/;"	f	class:CCDictionary	signature:()
CCDictionary::removeAllObjects	cocoa/CCDictionary.h	/^    void removeAllObjects();$/;"	p	class:CCDictionary	access:public	signature:()
CCDictionary::removeObjectForElememt	cocoa/CCDictionary.cpp	/^void CCDictionary::removeObjectForElememt(CCDictElement* pElement)$/;"	f	class:CCDictionary	signature:(CCDictElement* pElement)
CCDictionary::removeObjectForElememt	cocoa/CCDictionary.h	/^    void removeObjectForElememt(CCDictElement* pElement);$/;"	p	class:CCDictionary	access:public	signature:(CCDictElement* pElement)
CCDictionary::removeObjectForKey	cocoa/CCDictionary.cpp	/^void CCDictionary::removeObjectForKey(const std::string& key)$/;"	f	class:CCDictionary	signature:(const std::string& key)
CCDictionary::removeObjectForKey	cocoa/CCDictionary.cpp	/^void CCDictionary::removeObjectForKey(int key)$/;"	f	class:CCDictionary	signature:(int key)
CCDictionary::removeObjectForKey	cocoa/CCDictionary.h	/^    void removeObjectForKey(const std::string& key);$/;"	p	class:CCDictionary	access:public	signature:(const std::string& key)
CCDictionary::removeObjectForKey	cocoa/CCDictionary.h	/^    void removeObjectForKey(int key);$/;"	p	class:CCDictionary	access:public	signature:(int key)
CCDictionary::removeObjectsForKeys	cocoa/CCDictionary.cpp	/^void CCDictionary::removeObjectsForKeys(CCArray* pKeyArray)$/;"	f	class:CCDictionary	signature:(CCArray* pKeyArray)
CCDictionary::removeObjectsForKeys	cocoa/CCDictionary.h	/^    void removeObjectsForKeys(CCArray* pKeyArray);$/;"	p	class:CCDictionary	access:public	signature:(CCArray* pKeyArray)
CCDictionary::setObject	cocoa/CCDictionary.cpp	/^void CCDictionary::setObject(CCObject* pObject, const std::string& key)$/;"	f	class:CCDictionary	signature:(CCObject* pObject, const std::string& key)
CCDictionary::setObject	cocoa/CCDictionary.cpp	/^void CCDictionary::setObject(CCObject* pObject, int key)$/;"	f	class:CCDictionary	signature:(CCObject* pObject, int key)
CCDictionary::setObject	cocoa/CCDictionary.h	/^    void setObject(CCObject* pObject, const std::string& key);$/;"	p	class:CCDictionary	access:public	signature:(CCObject* pObject, const std::string& key)
CCDictionary::setObject	cocoa/CCDictionary.h	/^    void setObject(CCObject* pObject, int key);$/;"	p	class:CCDictionary	access:public	signature:(CCObject* pObject, int key)
CCDictionary::setObjectUnSafe	cocoa/CCDictionary.cpp	/^void CCDictionary::setObjectUnSafe(CCObject* pObject, const int key)$/;"	f	class:CCDictionary	signature:(CCObject* pObject, const int key)
CCDictionary::setObjectUnSafe	cocoa/CCDictionary.cpp	/^void CCDictionary::setObjectUnSafe(CCObject* pObject, const std::string& key)$/;"	f	class:CCDictionary	signature:(CCObject* pObject, const std::string& key)
CCDictionary::setObjectUnSafe	cocoa/CCDictionary.h	/^    void setObjectUnSafe(CCObject* pObject, const int key);$/;"	p	class:CCDictionary	access:private	signature:(CCObject* pObject, const int key)
CCDictionary::setObjectUnSafe	cocoa/CCDictionary.h	/^    void setObjectUnSafe(CCObject* pObject, const std::string& key);$/;"	p	class:CCDictionary	access:private	signature:(CCObject* pObject, const std::string& key)
CCDictionary::valueForKey	cocoa/CCDictionary.cpp	/^const CCString* CCDictionary::valueForKey(const std::string& key)$/;"	f	class:CCDictionary	signature:(const std::string& key)
CCDictionary::valueForKey	cocoa/CCDictionary.cpp	/^const CCString* CCDictionary::valueForKey(int key)$/;"	f	class:CCDictionary	signature:(int key)
CCDictionary::valueForKey	cocoa/CCDictionary.h	/^    const CCString* valueForKey(const std::string& key);$/;"	p	class:CCDictionary	access:public	signature:(const std::string& key)
CCDictionary::valueForKey	cocoa/CCDictionary.h	/^    const CCString* valueForKey(int key);$/;"	p	class:CCDictionary	access:public	signature:(int key)
CCDictionary::~CCDictionary	cocoa/CCDictionary.cpp	/^CCDictionary::~CCDictionary()$/;"	f	class:CCDictionary	signature:()
CCDictionary::~CCDictionary	cocoa/CCDictionary.h	/^    ~CCDictionary();$/;"	p	class:CCDictionary	access:public	signature:()
CCDirector	CCDirector.cpp	/^CCDirector::CCDirector(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector	CCDirector.h	/^    CCDirector(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector	CCDirector.h	/^class CC_DLL CCDirector : public CCObject, public TypeInfo$/;"	c	inherits:CCObject,TypeInfo
CCDirector::CCDirector	CCDirector.cpp	/^CCDirector::CCDirector(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::CCDirector	CCDirector.h	/^    CCDirector(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::CC_PROPERTY	CCDirector.h	/^    CC_PROPERTY(CCAccelerometer*, m_pAccelerometer, Accelerometer);$/;"	p	class:CCDirector	access:public	signature:(CCAccelerometer*, m_pAccelerometer, Accelerometer)
CCDirector::CC_PROPERTY	CCDirector.h	/^    CC_PROPERTY(CCActionManager*, m_pActionManager, ActionManager);$/;"	p	class:CCDirector	access:public	signature:(CCActionManager*, m_pActionManager, ActionManager)
CCDirector::CC_PROPERTY	CCDirector.h	/^    CC_PROPERTY(CCKeypadDispatcher*, m_pKeypadDispatcher, KeypadDispatcher);$/;"	p	class:CCDirector	access:public	signature:(CCKeypadDispatcher*, m_pKeypadDispatcher, KeypadDispatcher)
CCDirector::CC_PROPERTY	CCDirector.h	/^    CC_PROPERTY(CCScheduler*, m_pScheduler, Scheduler);$/;"	p	class:CCDirector	access:public	signature:(CCScheduler*, m_pScheduler, Scheduler)
CCDirector::CC_PROPERTY	CCDirector.h	/^    CC_PROPERTY(CCTouchDispatcher*, m_pTouchDispatcher, TouchDispatcher);$/;"	p	class:CCDirector	access:public	signature:(CCTouchDispatcher*, m_pTouchDispatcher, TouchDispatcher)
CCDirector::CC_PROPERTY_READONLY	CCDirector.h	/^	CC_PROPERTY_READONLY(float, m_fDeltaTime, DeltaTime);$/;"	p	class:CCDirector	access:public	signature:(float, m_fDeltaTime, DeltaTime)
CCDirector::calculateDeltaTime	CCDirector.cpp	/^void CCDirector::calculateDeltaTime(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::calculateDeltaTime	CCDirector.h	/^    void calculateDeltaTime();$/;"	p	class:CCDirector	access:protected	signature:()
CCDirector::calculateMPF	CCDirector.cpp	/^void CCDirector::calculateMPF()$/;"	f	class:CCDirector	signature:()
CCDirector::calculateMPF	CCDirector.h	/^    void calculateMPF();$/;"	p	class:CCDirector	access:protected	signature:()
CCDirector::convertToGL	CCDirector.cpp	/^CCPoint CCDirector::convertToGL(const CCPoint& uiPoint)$/;"	f	class:CCDirector	signature:(const CCPoint& uiPoint)
CCDirector::convertToGL	CCDirector.h	/^    CCPoint convertToGL(const CCPoint& obPoint);$/;"	p	class:CCDirector	access:public	signature:(const CCPoint& obPoint)
CCDirector::convertToUI	CCDirector.cpp	/^CCPoint CCDirector::convertToUI(const CCPoint& glPoint)$/;"	f	class:CCDirector	signature:(const CCPoint& glPoint)
CCDirector::convertToUI	CCDirector.h	/^    CCPoint convertToUI(const CCPoint& obPoint);$/;"	p	class:CCDirector	access:public	signature:(const CCPoint& obPoint)
CCDirector::createStatsLabel	CCDirector.cpp	/^void CCDirector::createStatsLabel()$/;"	f	class:CCDirector	signature:()
CCDirector::createStatsLabel	CCDirector.h	/^    void createStatsLabel();$/;"	p	class:CCDirector	access:protected	signature:()
CCDirector::drawScene	CCDirector.cpp	/^void CCDirector::drawScene(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::drawScene	CCDirector.h	/^    void drawScene(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::end	CCDirector.cpp	/^void CCDirector::end()$/;"	f	class:CCDirector	signature:()
CCDirector::end	CCDirector.h	/^    void end(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::getAccelerometer	CCDirector.cpp	/^CCAccelerometer* CCDirector::getAccelerometer()$/;"	f	class:CCDirector	signature:()
CCDirector::getActionManager	CCDirector.cpp	/^CCActionManager* CCDirector::getActionManager()$/;"	f	class:CCDirector	signature:()
CCDirector::getAnimationInterval	CCDirector.h	/^    inline double getAnimationInterval(void) { return m_dAnimationInterval; }$/;"	f	class:CCDirector	access:public	signature:(void)
CCDirector::getClassTypeInfo	CCDirector.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCDirector	access:public	signature:()
CCDirector::getContentScaleFactor	CCDirector.cpp	/^float CCDirector::getContentScaleFactor(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::getContentScaleFactor	CCDirector.h	/^    float getContentScaleFactor(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::getDelegate	CCDirector.cpp	/^CCDirectorDelegate* CCDirector::getDelegate() const$/;"	f	class:CCDirector	signature:() const
CCDirector::getDelegate	CCDirector.h	/^    CCDirectorDelegate* getDelegate() const;$/;"	p	class:CCDirector	access:public	signature:() const
CCDirector::getDeltaTime	CCDirector.cpp	/^float CCDirector::getDeltaTime()$/;"	f	class:CCDirector	signature:()
CCDirector::getFPSImageData	CCDirector.cpp	/^void CCDirector::getFPSImageData(unsigned char** datapointer, unsigned int* length)$/;"	f	class:CCDirector	signature:(unsigned char** datapointer, unsigned int* length)
CCDirector::getFPSImageData	CCDirector.h	/^    void getFPSImageData(unsigned char** datapointer, unsigned int* length);$/;"	p	class:CCDirector	access:protected	signature:(unsigned char** datapointer, unsigned int* length)
CCDirector::getKeypadDispatcher	CCDirector.cpp	/^CCKeypadDispatcher* CCDirector::getKeypadDispatcher()$/;"	f	class:CCDirector	signature:()
CCDirector::getNotificationNode	CCDirector.cpp	/^CCNode* CCDirector::getNotificationNode() $/;"	f	class:CCDirector	signature:()
CCDirector::getNotificationNode	CCDirector.h	/^    CCNode* getNotificationNode();$/;"	p	class:CCDirector	access:public	signature:()
CCDirector::getOpenGLView	CCDirector.h	/^    inline CCEGLView* getOpenGLView(void) { return m_pobOpenGLView; }$/;"	f	class:CCDirector	access:public	signature:(void)
CCDirector::getProjection	CCDirector.h	/^    inline ccDirectorProjection getProjection(void) { return m_eProjection; }$/;"	f	class:CCDirector	access:public	signature:(void)
CCDirector::getRunningScene	CCDirector.h	/^    inline CCScene* getRunningScene(void) { return m_pRunningScene; }$/;"	f	class:CCDirector	access:public	signature:(void)
CCDirector::getScheduler	CCDirector.cpp	/^CCScheduler* CCDirector::getScheduler()$/;"	f	class:CCDirector	signature:()
CCDirector::getSecondsPerFrame	CCDirector.h	/^    inline float getSecondsPerFrame() { return m_fSecondsPerFrame; }$/;"	f	class:CCDirector	access:public	signature:()
CCDirector::getTotalFrames	CCDirector.h	/^    inline unsigned int getTotalFrames(void) { return m_uTotalFrames; }$/;"	f	class:CCDirector	access:public	signature:(void)
CCDirector::getTouchDispatcher	CCDirector.cpp	/^CCTouchDispatcher* CCDirector::getTouchDispatcher()$/;"	f	class:CCDirector	signature:()
CCDirector::getVisibleOrigin	CCDirector.cpp	/^CCPoint CCDirector::getVisibleOrigin()$/;"	f	class:CCDirector	signature:()
CCDirector::getVisibleOrigin	CCDirector.h	/^    CCPoint getVisibleOrigin();$/;"	p	class:CCDirector	access:public	signature:()
CCDirector::getVisibleSize	CCDirector.cpp	/^CCSize CCDirector::getVisibleSize()$/;"	f	class:CCDirector	signature:()
CCDirector::getVisibleSize	CCDirector.h	/^    CCSize getVisibleSize();$/;"	p	class:CCDirector	access:public	signature:()
CCDirector::getWinSize	CCDirector.cpp	/^CCSize CCDirector::getWinSize(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::getWinSize	CCDirector.h	/^    CCSize getWinSize(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::getWinSizeInPixels	CCDirector.cpp	/^CCSize CCDirector::getWinSizeInPixels()$/;"	f	class:CCDirector	signature:()
CCDirector::getWinSizeInPixels	CCDirector.h	/^    CCSize getWinSizeInPixels(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::getZEye	CCDirector.cpp	/^float CCDirector::getZEye(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::getZEye	CCDirector.h	/^    float getZEye(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::init	CCDirector.cpp	/^bool CCDirector::init(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::init	CCDirector.h	/^    virtual bool init(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::isDisplayStats	CCDirector.h	/^    inline bool isDisplayStats(void) { return m_bDisplayStats; }$/;"	f	class:CCDirector	access:public	signature:(void)
CCDirector::isNextDeltaTimeZero	CCDirector.h	/^    inline bool isNextDeltaTimeZero(void) { return m_bNextDeltaTimeZero; }$/;"	f	class:CCDirector	access:public	signature:(void)
CCDirector::isPaused	CCDirector.h	/^    inline bool isPaused(void) { return m_bPaused; }$/;"	f	class:CCDirector	access:public	signature:(void)
CCDirector::isSendCleanupToScene	CCDirector.h	/^    inline bool isSendCleanupToScene(void) { return m_bSendCleanupToScene; }$/;"	f	class:CCDirector	access:public	signature:(void)
CCDirector::m_bDisplayStats	CCDirector.h	/^    bool m_bDisplayStats;$/;"	m	class:CCDirector	access:protected
CCDirector::m_bLandscape	CCDirector.h	/^    bool m_bLandscape;$/;"	m	class:CCDirector	access:protected
CCDirector::m_bNextDeltaTimeZero	CCDirector.h	/^    bool m_bNextDeltaTimeZero;$/;"	m	class:CCDirector	access:protected
CCDirector::m_bPaused	CCDirector.h	/^    bool m_bPaused;$/;"	m	class:CCDirector	access:protected
CCDirector::m_bPurgeDirecotorInNextLoop	CCDirector.h	/^    bool m_bPurgeDirecotorInNextLoop; \/\/ this flag will be set to true in end()$/;"	m	class:CCDirector	access:protected
CCDirector::m_bSendCleanupToScene	CCDirector.h	/^    bool    m_bSendCleanupToScene;$/;"	m	class:CCDirector	access:protected
CCDirector::m_dAnimationInterval	CCDirector.h	/^    double m_dAnimationInterval;$/;"	m	class:CCDirector	access:protected
CCDirector::m_dOldAnimationInterval	CCDirector.h	/^    double m_dOldAnimationInterval;$/;"	m	class:CCDirector	access:protected
CCDirector::m_eProjection	CCDirector.h	/^    ccDirectorProjection m_eProjection;$/;"	m	class:CCDirector	access:protected
CCDirector::m_fAccumDt	CCDirector.h	/^    float m_fAccumDt;$/;"	m	class:CCDirector	access:protected
CCDirector::m_fContentScaleFactor	CCDirector.h	/^    float    m_fContentScaleFactor;$/;"	m	class:CCDirector	access:protected
CCDirector::m_fFrameRate	CCDirector.h	/^    float m_fFrameRate;$/;"	m	class:CCDirector	access:protected
CCDirector::m_fSecondsPerFrame	CCDirector.h	/^    float m_fSecondsPerFrame;$/;"	m	class:CCDirector	access:protected
CCDirector::m_obWinSizeInPoints	CCDirector.h	/^    CCSize    m_obWinSizeInPoints;$/;"	m	class:CCDirector	access:protected
CCDirector::m_pDrawsLabel	CCDirector.h	/^    CCLabelTTF *m_pDrawsLabel;$/;"	m	class:CCDirector	access:protected
CCDirector::m_pFPSLabel	CCDirector.h	/^    CCLabelTTF *m_pFPSLabel;$/;"	m	class:CCDirector	access:protected
CCDirector::m_pLastUpdate	CCDirector.h	/^    struct cc_timeval *m_pLastUpdate;$/;"	m	class:CCDirector	typeref:struct:CCDirector::cc_timeval	access:protected
CCDirector::m_pNextScene	CCDirector.h	/^    CCScene *m_pNextScene;$/;"	m	class:CCDirector	access:protected
CCDirector::m_pNotificationNode	CCDirector.h	/^    CCNode *m_pNotificationNode;$/;"	m	class:CCDirector	access:protected
CCDirector::m_pProjectionDelegate	CCDirector.h	/^    CCDirectorDelegate *m_pProjectionDelegate;$/;"	m	class:CCDirector	access:protected
CCDirector::m_pRunningScene	CCDirector.h	/^    CCScene *m_pRunningScene;$/;"	m	class:CCDirector	access:protected
CCDirector::m_pSPFLabel	CCDirector.h	/^    CCLabelTTF *m_pSPFLabel;$/;"	m	class:CCDirector	access:protected
CCDirector::m_pobOpenGLView	CCDirector.h	/^    CCEGLView    *m_pobOpenGLView;$/;"	m	class:CCDirector	access:protected
CCDirector::m_pobScenesStack	CCDirector.h	/^    CCArray* m_pobScenesStack;$/;"	m	class:CCDirector	access:protected
CCDirector::m_pszFPS	CCDirector.h	/^    char *m_pszFPS;$/;"	m	class:CCDirector	access:protected
CCDirector::m_uFrames	CCDirector.h	/^    unsigned int m_uFrames;$/;"	m	class:CCDirector	access:protected
CCDirector::m_uTotalFrames	CCDirector.h	/^    unsigned int m_uTotalFrames;$/;"	m	class:CCDirector	access:protected
CCDirector::mainLoop	CCDirector.h	/^    virtual void mainLoop(void) = 0;$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::pause	CCDirector.cpp	/^void CCDirector::pause(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::pause	CCDirector.h	/^    void pause(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::popScene	CCDirector.cpp	/^void CCDirector::popScene(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::popScene	CCDirector.h	/^    void popScene(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::popToRootScene	CCDirector.cpp	/^void CCDirector::popToRootScene(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::popToRootScene	CCDirector.h	/^    void popToRootScene(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::purgeCachedData	CCDirector.cpp	/^void CCDirector::purgeCachedData(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::purgeCachedData	CCDirector.h	/^    void purgeCachedData(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::purgeDirector	CCDirector.cpp	/^void CCDirector::purgeDirector()$/;"	f	class:CCDirector	signature:()
CCDirector::purgeDirector	CCDirector.h	/^    void purgeDirector();$/;"	p	class:CCDirector	access:protected	signature:()
CCDirector::pushScene	CCDirector.cpp	/^void CCDirector::pushScene(CCScene *pScene)$/;"	f	class:CCDirector	signature:(CCScene *pScene)
CCDirector::pushScene	CCDirector.h	/^    void pushScene(CCScene *pScene);$/;"	p	class:CCDirector	access:public	signature:(CCScene *pScene)
CCDirector::replaceScene	CCDirector.cpp	/^void CCDirector::replaceScene(CCScene *pScene)$/;"	f	class:CCDirector	signature:(CCScene *pScene)
CCDirector::replaceScene	CCDirector.h	/^    void replaceScene(CCScene *pScene);$/;"	p	class:CCDirector	access:public	signature:(CCScene *pScene)
CCDirector::resume	CCDirector.cpp	/^void CCDirector::resume(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::resume	CCDirector.h	/^    void resume(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::runWithScene	CCDirector.cpp	/^void CCDirector::runWithScene(CCScene *pScene)$/;"	f	class:CCDirector	signature:(CCScene *pScene)
CCDirector::runWithScene	CCDirector.h	/^    void runWithScene(CCScene *pScene);$/;"	p	class:CCDirector	access:public	signature:(CCScene *pScene)
CCDirector::setAccelerometer	CCDirector.cpp	/^void CCDirector::setAccelerometer(CCAccelerometer* pAccelerometer)$/;"	f	class:CCDirector	signature:(CCAccelerometer* pAccelerometer)
CCDirector::setActionManager	CCDirector.cpp	/^void CCDirector::setActionManager(CCActionManager* pActionManager)$/;"	f	class:CCDirector	signature:(CCActionManager* pActionManager)
CCDirector::setAlphaBlending	CCDirector.cpp	/^void CCDirector::setAlphaBlending(bool bOn)$/;"	f	class:CCDirector	signature:(bool bOn)
CCDirector::setAlphaBlending	CCDirector.h	/^    void setAlphaBlending(bool bOn);$/;"	p	class:CCDirector	access:public	signature:(bool bOn)
CCDirector::setAnimationInterval	CCDirector.h	/^    virtual void setAnimationInterval(double dValue) = 0;$/;"	p	class:CCDirector	access:public	signature:(double dValue)
CCDirector::setContentScaleFactor	CCDirector.cpp	/^void CCDirector::setContentScaleFactor(float scaleFactor)$/;"	f	class:CCDirector	signature:(float scaleFactor)
CCDirector::setContentScaleFactor	CCDirector.h	/^    void setContentScaleFactor(float scaleFactor);$/;"	p	class:CCDirector	access:public	signature:(float scaleFactor)
CCDirector::setDelegate	CCDirector.cpp	/^void CCDirector::setDelegate(CCDirectorDelegate* pDelegate)$/;"	f	class:CCDirector	signature:(CCDirectorDelegate* pDelegate)
CCDirector::setDelegate	CCDirector.h	/^    void setDelegate(CCDirectorDelegate* pDelegate);$/;"	p	class:CCDirector	access:public	signature:(CCDirectorDelegate* pDelegate)
CCDirector::setDepthTest	CCDirector.cpp	/^void CCDirector::setDepthTest(bool bOn)$/;"	f	class:CCDirector	signature:(bool bOn)
CCDirector::setDepthTest	CCDirector.h	/^    void setDepthTest(bool bOn);$/;"	p	class:CCDirector	access:public	signature:(bool bOn)
CCDirector::setDisplayStats	CCDirector.h	/^    inline void setDisplayStats(bool bDisplayStats) { m_bDisplayStats = bDisplayStats; }$/;"	f	class:CCDirector	access:public	signature:(bool bDisplayStats)
CCDirector::setGLDefaultValues	CCDirector.cpp	/^void CCDirector::setGLDefaultValues(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::setGLDefaultValues	CCDirector.h	/^    void setGLDefaultValues(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::setKeypadDispatcher	CCDirector.cpp	/^void CCDirector::setKeypadDispatcher(CCKeypadDispatcher* pKeypadDispatcher)$/;"	f	class:CCDirector	signature:(CCKeypadDispatcher* pKeypadDispatcher)
CCDirector::setNextDeltaTimeZero	CCDirector.cpp	/^void CCDirector::setNextDeltaTimeZero(bool bNextDeltaTimeZero)$/;"	f	class:CCDirector	signature:(bool bNextDeltaTimeZero)
CCDirector::setNextDeltaTimeZero	CCDirector.h	/^    void setNextDeltaTimeZero(bool bNextDeltaTimeZero);$/;"	p	class:CCDirector	access:public	signature:(bool bNextDeltaTimeZero)
CCDirector::setNextScene	CCDirector.cpp	/^void CCDirector::setNextScene(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::setNextScene	CCDirector.h	/^    void setNextScene(void);$/;"	p	class:CCDirector	access:protected	signature:(void)
CCDirector::setNotificationNode	CCDirector.cpp	/^void CCDirector::setNotificationNode(CCNode *node)$/;"	f	class:CCDirector	signature:(CCNode *node)
CCDirector::setNotificationNode	CCDirector.h	/^    void setNotificationNode(CCNode *node);$/;"	p	class:CCDirector	access:public	signature:(CCNode *node)
CCDirector::setOpenGLView	CCDirector.cpp	/^void CCDirector::setOpenGLView(CCEGLView *pobOpenGLView)$/;"	f	class:CCDirector	signature:(CCEGLView *pobOpenGLView)
CCDirector::setOpenGLView	CCDirector.h	/^    void setOpenGLView(CCEGLView *pobOpenGLView);$/;"	p	class:CCDirector	access:public	signature:(CCEGLView *pobOpenGLView)
CCDirector::setProjection	CCDirector.cpp	/^void CCDirector::setProjection(ccDirectorProjection kProjection)$/;"	f	class:CCDirector	signature:(ccDirectorProjection kProjection)
CCDirector::setProjection	CCDirector.h	/^    void setProjection(ccDirectorProjection kProjection);$/;"	p	class:CCDirector	access:public	signature:(ccDirectorProjection kProjection)
CCDirector::setScheduler	CCDirector.cpp	/^void CCDirector::setScheduler(CCScheduler* pScheduler)$/;"	f	class:CCDirector	signature:(CCScheduler* pScheduler)
CCDirector::setTouchDispatcher	CCDirector.cpp	/^void CCDirector::setTouchDispatcher(CCTouchDispatcher* pTouchDispatcher)$/;"	f	class:CCDirector	signature:(CCTouchDispatcher* pTouchDispatcher)
CCDirector::setViewport	CCDirector.cpp	/^void CCDirector::setViewport()$/;"	f	class:CCDirector	signature:()
CCDirector::setViewport	CCDirector.h	/^    void setViewport();$/;"	p	class:CCDirector	access:public	signature:()
CCDirector::sharedDirector	CCDirector.cpp	/^CCDirector* CCDirector::sharedDirector(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::sharedDirector	CCDirector.h	/^    static CCDirector* sharedDirector(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::showStats	CCDirector.cpp	/^void CCDirector::showStats(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::showStats	CCDirector.h	/^    void showStats();$/;"	p	class:CCDirector	access:protected	signature:()
CCDirector::startAnimation	CCDirector.h	/^    virtual void startAnimation(void) = 0;$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::stopAnimation	CCDirector.h	/^    virtual void stopAnimation(void) = 0;$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirector::~CCDirector	CCDirector.cpp	/^CCDirector::~CCDirector(void)$/;"	f	class:CCDirector	signature:(void)
CCDirector::~CCDirector	CCDirector.h	/^    virtual ~CCDirector(void);$/;"	p	class:CCDirector	access:public	signature:(void)
CCDirectorDelegate	include/CCProtocols.h	/^class CC_DLL CCDirectorDelegate$/;"	c
CCDirectorDelegate::updateProjection	include/CCProtocols.h	/^    virtual void updateProjection(void) = 0;$/;"	p	class:CCDirectorDelegate	access:public	signature:(void)
CCDisplayLinkDirector	CCDirector.h	/^    CCDisplayLinkDirector(void) $/;"	f	class:CCDisplayLinkDirector	access:public	signature:(void)
CCDisplayLinkDirector	CCDirector.h	/^class CCDisplayLinkDirector : public CCDirector$/;"	c	inherits:CCDirector
CCDisplayLinkDirector::CCDisplayLinkDirector	CCDirector.h	/^    CCDisplayLinkDirector(void) $/;"	f	class:CCDisplayLinkDirector	access:public	signature:(void)
CCDisplayLinkDirector::m_bInvalid	CCDirector.h	/^    bool m_bInvalid;$/;"	m	class:CCDisplayLinkDirector	access:protected
CCDisplayLinkDirector::mainLoop	CCDirector.cpp	/^void CCDisplayLinkDirector::mainLoop(void)$/;"	f	class:CCDisplayLinkDirector	signature:(void)
CCDisplayLinkDirector::mainLoop	CCDirector.h	/^    virtual void mainLoop(void);$/;"	p	class:CCDisplayLinkDirector	access:public	signature:(void)
CCDisplayLinkDirector::setAnimationInterval	CCDirector.cpp	/^void CCDisplayLinkDirector::setAnimationInterval(double dValue)$/;"	f	class:CCDisplayLinkDirector	signature:(double dValue)
CCDisplayLinkDirector::setAnimationInterval	CCDirector.h	/^    virtual void setAnimationInterval(double dValue);$/;"	p	class:CCDisplayLinkDirector	access:public	signature:(double dValue)
CCDisplayLinkDirector::startAnimation	CCDirector.cpp	/^void CCDisplayLinkDirector::startAnimation(void)$/;"	f	class:CCDisplayLinkDirector	signature:(void)
CCDisplayLinkDirector::startAnimation	CCDirector.h	/^    virtual void startAnimation(void);$/;"	p	class:CCDisplayLinkDirector	access:public	signature:(void)
CCDisplayLinkDirector::stopAnimation	CCDirector.cpp	/^void CCDisplayLinkDirector::stopAnimation(void)$/;"	f	class:CCDisplayLinkDirector	signature:(void)
CCDisplayLinkDirector::stopAnimation	CCDirector.h	/^    virtual void stopAnimation();$/;"	p	class:CCDisplayLinkDirector	access:public	signature:()
CCDouble	cocoa/CCDouble.h	/^    CCDouble(double v)$/;"	f	class:CCDouble	access:public	signature:(double v)
CCDouble	cocoa/CCDouble.h	/^class CC_DLL CCDouble : public CCObject$/;"	c	inherits:CCObject
CCDouble::CCDouble	cocoa/CCDouble.h	/^    CCDouble(double v)$/;"	f	class:CCDouble	access:public	signature:(double v)
CCDouble::create	cocoa/CCDouble.h	/^    static CCDouble* create(double v)$/;"	f	class:CCDouble	access:public	signature:(double v)
CCDouble::getValue	cocoa/CCDouble.h	/^    double getValue() const {return m_dValue;}$/;"	f	class:CCDouble	access:public	signature:() const
CCDouble::m_dValue	cocoa/CCDouble.h	/^    double m_dValue;$/;"	m	class:CCDouble	access:private
CCDrawNode	draw_nodes/CCDrawNode.cpp	/^CCDrawNode::CCDrawNode()$/;"	f	class:CCDrawNode	signature:()
CCDrawNode	draw_nodes/CCDrawNode.h	/^    CCDrawNode();$/;"	p	class:CCDrawNode	access:public	signature:()
CCDrawNode	draw_nodes/CCDrawNode.h	/^class CC_DLL CCDrawNode : public CCNode$/;"	c	inherits:CCNode
CCDrawNode::CCDrawNode	draw_nodes/CCDrawNode.cpp	/^CCDrawNode::CCDrawNode()$/;"	f	class:CCDrawNode	signature:()
CCDrawNode::CCDrawNode	draw_nodes/CCDrawNode.h	/^    CCDrawNode();$/;"	p	class:CCDrawNode	access:public	signature:()
CCDrawNode::clear	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::clear()$/;"	f	class:CCDrawNode	signature:()
CCDrawNode::clear	draw_nodes/CCDrawNode.h	/^    void clear();$/;"	p	class:CCDrawNode	access:public	signature:()
CCDrawNode::create	draw_nodes/CCDrawNode.cpp	/^CCDrawNode* CCDrawNode::create()$/;"	f	class:CCDrawNode	signature:()
CCDrawNode::create	draw_nodes/CCDrawNode.h	/^    static CCDrawNode* create();$/;"	p	class:CCDrawNode	access:public	signature:()
CCDrawNode::draw	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::draw()$/;"	f	class:CCDrawNode	signature:()
CCDrawNode::draw	draw_nodes/CCDrawNode.h	/^    virtual void draw();$/;"	p	class:CCDrawNode	access:public	signature:()
CCDrawNode::drawDot	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::drawDot(const CCPoint &pos, float radius, const ccColor4F &color)$/;"	f	class:CCDrawNode	signature:(const CCPoint &pos, float radius, const ccColor4F &color)
CCDrawNode::drawDot	draw_nodes/CCDrawNode.h	/^    void drawDot(const CCPoint &pos, float radius, const ccColor4F &color);$/;"	p	class:CCDrawNode	access:public	signature:(const CCPoint &pos, float radius, const ccColor4F &color)
CCDrawNode::drawPolygon	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::drawPolygon(CCPoint *verts, unsigned int count, const ccColor4F &fillColor, float borderWidth, const ccColor4F &borderColor)$/;"	f	class:CCDrawNode	signature:(CCPoint *verts, unsigned int count, const ccColor4F &fillColor, float borderWidth, const ccColor4F &borderColor)
CCDrawNode::drawPolygon	draw_nodes/CCDrawNode.h	/^    void drawPolygon(CCPoint *verts, unsigned int count, const ccColor4F &fillColor, float borderWidth, const ccColor4F &borderColor);$/;"	p	class:CCDrawNode	access:public	signature:(CCPoint *verts, unsigned int count, const ccColor4F &fillColor, float borderWidth, const ccColor4F &borderColor)
CCDrawNode::drawSegment	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::drawSegment(const CCPoint &from, const CCPoint &to, float radius, const ccColor4F &color)$/;"	f	class:CCDrawNode	signature:(const CCPoint &from, const CCPoint &to, float radius, const ccColor4F &color)
CCDrawNode::drawSegment	draw_nodes/CCDrawNode.h	/^    void drawSegment(const CCPoint &from, const CCPoint &to, float radius, const ccColor4F &color);$/;"	p	class:CCDrawNode	access:public	signature:(const CCPoint &from, const CCPoint &to, float radius, const ccColor4F &color)
CCDrawNode::ensureCapacity	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::ensureCapacity(unsigned int count)$/;"	f	class:CCDrawNode	signature:(unsigned int count)
CCDrawNode::ensureCapacity	draw_nodes/CCDrawNode.h	/^    void ensureCapacity(unsigned int count);$/;"	p	class:CCDrawNode	access:private	signature:(unsigned int count)
CCDrawNode::getBlendFunc	draw_nodes/CCDrawNode.cpp	/^ccBlendFunc CCDrawNode::getBlendFunc() const$/;"	f	class:CCDrawNode	signature:() const
CCDrawNode::getBlendFunc	draw_nodes/CCDrawNode.h	/^    ccBlendFunc getBlendFunc() const;$/;"	p	class:CCDrawNode	access:public	signature:() const
CCDrawNode::init	draw_nodes/CCDrawNode.cpp	/^bool CCDrawNode::init()$/;"	f	class:CCDrawNode	signature:()
CCDrawNode::init	draw_nodes/CCDrawNode.h	/^    virtual bool init();$/;"	p	class:CCDrawNode	access:public	signature:()
CCDrawNode::m_bDirty	draw_nodes/CCDrawNode.h	/^    bool            m_bDirty;$/;"	m	class:CCDrawNode	access:protected
CCDrawNode::m_nBufferCount	draw_nodes/CCDrawNode.h	/^    GLsizei         m_nBufferCount;$/;"	m	class:CCDrawNode	access:protected
CCDrawNode::m_pBuffer	draw_nodes/CCDrawNode.h	/^    ccV2F_C4B_T2F   *m_pBuffer;$/;"	m	class:CCDrawNode	access:protected
CCDrawNode::m_sBlendFunc	draw_nodes/CCDrawNode.h	/^    ccBlendFunc     m_sBlendFunc;$/;"	m	class:CCDrawNode	access:protected
CCDrawNode::m_uBufferCapacity	draw_nodes/CCDrawNode.h	/^    unsigned int    m_uBufferCapacity;$/;"	m	class:CCDrawNode	access:protected
CCDrawNode::m_uVao	draw_nodes/CCDrawNode.h	/^    GLuint      m_uVao;$/;"	m	class:CCDrawNode	access:protected
CCDrawNode::m_uVbo	draw_nodes/CCDrawNode.h	/^    GLuint      m_uVbo;$/;"	m	class:CCDrawNode	access:protected
CCDrawNode::render	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::render()$/;"	f	class:CCDrawNode	signature:()
CCDrawNode::render	draw_nodes/CCDrawNode.h	/^    void render();$/;"	p	class:CCDrawNode	access:private	signature:()
CCDrawNode::setBlendFunc	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::setBlendFunc(const ccBlendFunc &blendFunc)$/;"	f	class:CCDrawNode	signature:(const ccBlendFunc &blendFunc)
CCDrawNode::setBlendFunc	draw_nodes/CCDrawNode.h	/^    void setBlendFunc(const ccBlendFunc &blendFunc);$/;"	p	class:CCDrawNode	access:public	signature:(const ccBlendFunc &blendFunc)
CCDrawNode::~CCDrawNode	draw_nodes/CCDrawNode.cpp	/^CCDrawNode::~CCDrawNode()$/;"	f	class:CCDrawNode	signature:()
CCDrawNode::~CCDrawNode	draw_nodes/CCDrawNode.h	/^    virtual ~CCDrawNode();$/;"	p	class:CCDrawNode	access:public	signature:()
CCEGLViewProtocol	platform/CCEGLViewProtocol.cpp	/^CCEGLViewProtocol::CCEGLViewProtocol()$/;"	f	class:CCEGLViewProtocol	signature:()
CCEGLViewProtocol	platform/CCEGLViewProtocol.h	/^    CCEGLViewProtocol();$/;"	p	class:CCEGLViewProtocol	access:public	signature:()
CCEGLViewProtocol	platform/CCEGLViewProtocol.h	/^class CC_DLL CCEGLViewProtocol$/;"	c
CCEGLViewProtocol::CCEGLViewProtocol	platform/CCEGLViewProtocol.cpp	/^CCEGLViewProtocol::CCEGLViewProtocol()$/;"	f	class:CCEGLViewProtocol	signature:()
CCEGLViewProtocol::CCEGLViewProtocol	platform/CCEGLViewProtocol.h	/^    CCEGLViewProtocol();$/;"	p	class:CCEGLViewProtocol	access:public	signature:()
CCEGLViewProtocol::end	platform/CCEGLViewProtocol.h	/^    virtual void    end() = 0;$/;"	p	class:CCEGLViewProtocol	access:public	signature:()
CCEGLViewProtocol::getDesignResolutionSize	platform/CCEGLViewProtocol.cpp	/^const CCSize& CCEGLViewProtocol::getDesignResolutionSize() const $/;"	f	class:CCEGLViewProtocol	signature:() const
CCEGLViewProtocol::getDesignResolutionSize	platform/CCEGLViewProtocol.h	/^    virtual const CCSize&  getDesignResolutionSize() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
CCEGLViewProtocol::getFrameSize	platform/CCEGLViewProtocol.cpp	/^const CCSize& CCEGLViewProtocol::getFrameSize() const$/;"	f	class:CCEGLViewProtocol	signature:() const
CCEGLViewProtocol::getFrameSize	platform/CCEGLViewProtocol.h	/^    virtual const CCSize& getFrameSize() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
CCEGLViewProtocol::getScaleX	platform/CCEGLViewProtocol.cpp	/^float CCEGLViewProtocol::getScaleX() const$/;"	f	class:CCEGLViewProtocol	signature:() const
CCEGLViewProtocol::getScaleX	platform/CCEGLViewProtocol.h	/^    float getScaleX() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
CCEGLViewProtocol::getScaleY	platform/CCEGLViewProtocol.cpp	/^float CCEGLViewProtocol::getScaleY() const$/;"	f	class:CCEGLViewProtocol	signature:() const
CCEGLViewProtocol::getScaleY	platform/CCEGLViewProtocol.h	/^    float getScaleY() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
CCEGLViewProtocol::getSetOfTouchesEndOrCancel	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::getSetOfTouchesEndOrCancel(CCSet& set, int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol	signature:(CCSet& set, int num, int ids[], float xs[], float ys[])
CCEGLViewProtocol::getSetOfTouchesEndOrCancel	platform/CCEGLViewProtocol.h	/^    void getSetOfTouchesEndOrCancel(CCSet& set, int num, int ids[], float xs[], float ys[]);$/;"	p	class:CCEGLViewProtocol	access:private	signature:(CCSet& set, int num, int ids[], float xs[], float ys[])
CCEGLViewProtocol::getViewName	platform/CCEGLViewProtocol.cpp	/^const char* CCEGLViewProtocol::getViewName()$/;"	f	class:CCEGLViewProtocol	signature:()
CCEGLViewProtocol::getViewName	platform/CCEGLViewProtocol.h	/^    const char* getViewName();$/;"	p	class:CCEGLViewProtocol	access:public	signature:()
CCEGLViewProtocol::getViewPortRect	platform/CCEGLViewProtocol.cpp	/^const CCRect& CCEGLViewProtocol::getViewPortRect() const$/;"	f	class:CCEGLViewProtocol	signature:() const
CCEGLViewProtocol::getViewPortRect	platform/CCEGLViewProtocol.h	/^    const CCRect& getViewPortRect() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
CCEGLViewProtocol::getVisibleOrigin	platform/CCEGLViewProtocol.cpp	/^CCPoint CCEGLViewProtocol::getVisibleOrigin() const$/;"	f	class:CCEGLViewProtocol	signature:() const
CCEGLViewProtocol::getVisibleOrigin	platform/CCEGLViewProtocol.h	/^    virtual CCPoint getVisibleOrigin() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
CCEGLViewProtocol::getVisibleSize	platform/CCEGLViewProtocol.cpp	/^CCSize  CCEGLViewProtocol::getVisibleSize() const$/;"	f	class:CCEGLViewProtocol	signature:() const
CCEGLViewProtocol::getVisibleSize	platform/CCEGLViewProtocol.h	/^    virtual CCSize getVisibleSize() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
CCEGLViewProtocol::handleTouchesBegin	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::handleTouchesBegin(int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol	signature:(int num, int ids[], float xs[], float ys[])
CCEGLViewProtocol::handleTouchesBegin	platform/CCEGLViewProtocol.h	/^    virtual void handleTouchesBegin(int num, int ids[], float xs[], float ys[]);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(int num, int ids[], float xs[], float ys[])
CCEGLViewProtocol::handleTouchesCancel	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::handleTouchesCancel(int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol	signature:(int num, int ids[], float xs[], float ys[])
CCEGLViewProtocol::handleTouchesCancel	platform/CCEGLViewProtocol.h	/^    virtual void handleTouchesCancel(int num, int ids[], float xs[], float ys[]);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(int num, int ids[], float xs[], float ys[])
CCEGLViewProtocol::handleTouchesEnd	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::handleTouchesEnd(int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol	signature:(int num, int ids[], float xs[], float ys[])
CCEGLViewProtocol::handleTouchesEnd	platform/CCEGLViewProtocol.h	/^    virtual void handleTouchesEnd(int num, int ids[], float xs[], float ys[]);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(int num, int ids[], float xs[], float ys[])
CCEGLViewProtocol::handleTouchesMove	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::handleTouchesMove(int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol	signature:(int num, int ids[], float xs[], float ys[])
CCEGLViewProtocol::handleTouchesMove	platform/CCEGLViewProtocol.h	/^    virtual void handleTouchesMove(int num, int ids[], float xs[], float ys[]);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(int num, int ids[], float xs[], float ys[])
CCEGLViewProtocol::isOpenGLReady	platform/CCEGLViewProtocol.h	/^    virtual bool    isOpenGLReady() = 0;$/;"	p	class:CCEGLViewProtocol	access:public	signature:()
CCEGLViewProtocol::m_eResolutionPolicy	platform/CCEGLViewProtocol.h	/^    ResolutionPolicy m_eResolutionPolicy;$/;"	m	class:CCEGLViewProtocol	access:protected
CCEGLViewProtocol::m_fScaleX	platform/CCEGLViewProtocol.h	/^    float  m_fScaleX;$/;"	m	class:CCEGLViewProtocol	access:protected
CCEGLViewProtocol::m_fScaleY	platform/CCEGLViewProtocol.h	/^    float  m_fScaleY;$/;"	m	class:CCEGLViewProtocol	access:protected
CCEGLViewProtocol::m_obDesignResolutionSize	platform/CCEGLViewProtocol.h	/^    CCSize m_obDesignResolutionSize;$/;"	m	class:CCEGLViewProtocol	access:protected
CCEGLViewProtocol::m_obScreenSize	platform/CCEGLViewProtocol.h	/^    CCSize m_obScreenSize;$/;"	m	class:CCEGLViewProtocol	access:protected
CCEGLViewProtocol::m_obViewPortRect	platform/CCEGLViewProtocol.h	/^    CCRect m_obViewPortRect;$/;"	m	class:CCEGLViewProtocol	access:protected
CCEGLViewProtocol::m_pDelegate	platform/CCEGLViewProtocol.h	/^    EGLTouchDelegate* m_pDelegate;$/;"	m	class:CCEGLViewProtocol	access:protected
CCEGLViewProtocol::m_szViewName	platform/CCEGLViewProtocol.h	/^    char   m_szViewName[50];$/;"	m	class:CCEGLViewProtocol	access:protected
CCEGLViewProtocol::setDesignResolutionSize	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy)$/;"	f	class:CCEGLViewProtocol	signature:(float width, float height, ResolutionPolicy resolutionPolicy)
CCEGLViewProtocol::setDesignResolutionSize	platform/CCEGLViewProtocol.h	/^    virtual void setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(float width, float height, ResolutionPolicy resolutionPolicy)
CCEGLViewProtocol::setFrameSize	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setFrameSize(float width, float height)$/;"	f	class:CCEGLViewProtocol	signature:(float width, float height)
CCEGLViewProtocol::setFrameSize	platform/CCEGLViewProtocol.h	/^    virtual void setFrameSize(float width, float height);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(float width, float height)
CCEGLViewProtocol::setIMEKeyboardState	platform/CCEGLViewProtocol.h	/^    virtual void    setIMEKeyboardState(bool bOpen) = 0;$/;"	p	class:CCEGLViewProtocol	access:public	signature:(bool bOpen)
CCEGLViewProtocol::setScissorInPoints	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setScissorInPoints(float x , float y , float w , float h)$/;"	f	class:CCEGLViewProtocol	signature:(float x , float y , float w , float h)
CCEGLViewProtocol::setScissorInPoints	platform/CCEGLViewProtocol.h	/^    virtual void setScissorInPoints(float x , float y , float w , float h);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(float x , float y , float w , float h)
CCEGLViewProtocol::setTouchDelegate	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setTouchDelegate(EGLTouchDelegate * pDelegate)$/;"	f	class:CCEGLViewProtocol	signature:(EGLTouchDelegate * pDelegate)
CCEGLViewProtocol::setTouchDelegate	platform/CCEGLViewProtocol.h	/^    virtual void setTouchDelegate(EGLTouchDelegate * pDelegate);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(EGLTouchDelegate * pDelegate)
CCEGLViewProtocol::setViewName	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setViewName(const char* pszViewName)$/;"	f	class:CCEGLViewProtocol	signature:(const char* pszViewName)
CCEGLViewProtocol::setViewName	platform/CCEGLViewProtocol.h	/^    virtual void setViewName(const char* pszViewName);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(const char* pszViewName)
CCEGLViewProtocol::setViewPortInPoints	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setViewPortInPoints(float x , float y , float w , float h)$/;"	f	class:CCEGLViewProtocol	signature:(float x , float y , float w , float h)
CCEGLViewProtocol::setViewPortInPoints	platform/CCEGLViewProtocol.h	/^    virtual void setViewPortInPoints(float x , float y , float w , float h);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(float x , float y , float w , float h)
CCEGLViewProtocol::swapBuffers	platform/CCEGLViewProtocol.h	/^    virtual void    swapBuffers() = 0;$/;"	p	class:CCEGLViewProtocol	access:public	signature:()
CCEGLViewProtocol::~CCEGLViewProtocol	platform/CCEGLViewProtocol.cpp	/^CCEGLViewProtocol::~CCEGLViewProtocol()$/;"	f	class:CCEGLViewProtocol	signature:()
CCEGLViewProtocol::~CCEGLViewProtocol	platform/CCEGLViewProtocol.h	/^    virtual ~CCEGLViewProtocol();$/;"	p	class:CCEGLViewProtocol	access:public	signature:()
CCEaseBackIn	actions/CCActionEase.h	/^class CC_DLL CCEaseBackIn : public CCActionEase$/;"	c	inherits:CCActionEase
CCEaseBackIn::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBackIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBackIn	signature:(CCZone *pZone)
CCEaseBackIn::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBackIn	access:public	signature:(CCZone* pZone)
CCEaseBackIn::create	actions/CCActionEase.cpp	/^CCEaseBackIn* CCEaseBackIn::create(CCActionInterval *pAction)$/;"	f	class:CCEaseBackIn	signature:(CCActionInterval *pAction)
CCEaseBackIn::create	actions/CCActionEase.h	/^    static CCEaseBackIn* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBackIn	access:public	signature:(CCActionInterval* pAction)
CCEaseBackIn::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBackIn::reverse(void)$/;"	f	class:CCEaseBackIn	signature:(void)
CCEaseBackIn::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseBackIn	access:public	signature:(void)
CCEaseBackIn::update	actions/CCActionEase.cpp	/^void CCEaseBackIn::update(float time)$/;"	f	class:CCEaseBackIn	signature:(float time)
CCEaseBackIn::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseBackIn	access:public	signature:(float time)
CCEaseBackInOut	actions/CCActionEase.h	/^class CC_DLL CCEaseBackInOut : public CCActionEase$/;"	c	inherits:CCActionEase
CCEaseBackInOut::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBackInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBackInOut	signature:(CCZone *pZone)
CCEaseBackInOut::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBackInOut	access:public	signature:(CCZone* pZone)
CCEaseBackInOut::create	actions/CCActionEase.cpp	/^CCEaseBackInOut* CCEaseBackInOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBackInOut	signature:(CCActionInterval* pAction)
CCEaseBackInOut::create	actions/CCActionEase.h	/^    static CCEaseBackInOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBackInOut	access:public	signature:(CCActionInterval* pAction)
CCEaseBackInOut::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBackInOut::reverse()$/;"	f	class:CCEaseBackInOut	signature:()
CCEaseBackInOut::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCEaseBackInOut	access:public	signature:()
CCEaseBackInOut::update	actions/CCActionEase.cpp	/^void CCEaseBackInOut::update(float time)$/;"	f	class:CCEaseBackInOut	signature:(float time)
CCEaseBackInOut::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseBackInOut	access:public	signature:(float time)
CCEaseBackOut	actions/CCActionEase.h	/^class CC_DLL CCEaseBackOut : public CCActionEase$/;"	c	inherits:CCActionEase
CCEaseBackOut::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBackOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBackOut	signature:(CCZone *pZone)
CCEaseBackOut::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBackOut	access:public	signature:(CCZone* pZone)
CCEaseBackOut::create	actions/CCActionEase.cpp	/^CCEaseBackOut* CCEaseBackOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBackOut	signature:(CCActionInterval* pAction)
CCEaseBackOut::create	actions/CCActionEase.h	/^    static CCEaseBackOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBackOut	access:public	signature:(CCActionInterval* pAction)
CCEaseBackOut::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBackOut::reverse(void)$/;"	f	class:CCEaseBackOut	signature:(void)
CCEaseBackOut::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseBackOut	access:public	signature:(void)
CCEaseBackOut::update	actions/CCActionEase.cpp	/^void CCEaseBackOut::update(float time)$/;"	f	class:CCEaseBackOut	signature:(float time)
CCEaseBackOut::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseBackOut	access:public	signature:(float time)
CCEaseBounce	actions/CCActionEase.h	/^class CC_DLL CCEaseBounce : public CCActionEase$/;"	c	inherits:CCActionEase
CCEaseBounce::bounceTime	actions/CCActionEase.cpp	/^float CCEaseBounce::bounceTime(float time)$/;"	f	class:CCEaseBounce	signature:(float time)
CCEaseBounce::bounceTime	actions/CCActionEase.h	/^    float bounceTime(float time);$/;"	p	class:CCEaseBounce	access:public	signature:(float time)
CCEaseBounce::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBounce::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBounce	signature:(CCZone *pZone)
CCEaseBounce::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBounce	access:public	signature:(CCZone* pZone)
CCEaseBounce::create	actions/CCActionEase.cpp	/^CCEaseBounce* CCEaseBounce::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBounce	signature:(CCActionInterval* pAction)
CCEaseBounce::create	actions/CCActionEase.h	/^    static CCEaseBounce* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBounce	access:public	signature:(CCActionInterval* pAction)
CCEaseBounce::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBounce::reverse()$/;"	f	class:CCEaseBounce	signature:()
CCEaseBounce::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCEaseBounce	access:public	signature:()
CCEaseBounceIn	actions/CCActionEase.h	/^class CC_DLL CCEaseBounceIn : public CCEaseBounce$/;"	c	inherits:CCEaseBounce
CCEaseBounceIn::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBounceIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBounceIn	signature:(CCZone *pZone)
CCEaseBounceIn::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBounceIn	access:public	signature:(CCZone* pZone)
CCEaseBounceIn::create	actions/CCActionEase.cpp	/^CCEaseBounceIn* CCEaseBounceIn::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBounceIn	signature:(CCActionInterval* pAction)
CCEaseBounceIn::create	actions/CCActionEase.h	/^    static CCEaseBounceIn* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBounceIn	access:public	signature:(CCActionInterval* pAction)
CCEaseBounceIn::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBounceIn::reverse(void)$/;"	f	class:CCEaseBounceIn	signature:(void)
CCEaseBounceIn::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseBounceIn	access:public	signature:(void)
CCEaseBounceIn::update	actions/CCActionEase.cpp	/^void CCEaseBounceIn::update(float time)$/;"	f	class:CCEaseBounceIn	signature:(float time)
CCEaseBounceIn::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseBounceIn	access:public	signature:(float time)
CCEaseBounceInOut	actions/CCActionEase.h	/^class CC_DLL CCEaseBounceInOut : public CCEaseBounce$/;"	c	inherits:CCEaseBounce
CCEaseBounceInOut::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBounceInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBounceInOut	signature:(CCZone *pZone)
CCEaseBounceInOut::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBounceInOut	access:public	signature:(CCZone* pZone)
CCEaseBounceInOut::create	actions/CCActionEase.cpp	/^CCEaseBounceInOut* CCEaseBounceInOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBounceInOut	signature:(CCActionInterval* pAction)
CCEaseBounceInOut::create	actions/CCActionEase.h	/^    static CCEaseBounceInOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBounceInOut	access:public	signature:(CCActionInterval* pAction)
CCEaseBounceInOut::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBounceInOut::reverse()$/;"	f	class:CCEaseBounceInOut	signature:()
CCEaseBounceInOut::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCEaseBounceInOut	access:public	signature:()
CCEaseBounceInOut::update	actions/CCActionEase.cpp	/^void CCEaseBounceInOut::update(float time)$/;"	f	class:CCEaseBounceInOut	signature:(float time)
CCEaseBounceInOut::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseBounceInOut	access:public	signature:(float time)
CCEaseBounceOut	actions/CCActionEase.h	/^class CC_DLL CCEaseBounceOut : public CCEaseBounce$/;"	c	inherits:CCEaseBounce
CCEaseBounceOut::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBounceOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBounceOut	signature:(CCZone *pZone)
CCEaseBounceOut::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBounceOut	access:public	signature:(CCZone* pZone)
CCEaseBounceOut::create	actions/CCActionEase.cpp	/^CCEaseBounceOut* CCEaseBounceOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBounceOut	signature:(CCActionInterval* pAction)
CCEaseBounceOut::create	actions/CCActionEase.h	/^    static CCEaseBounceOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBounceOut	access:public	signature:(CCActionInterval* pAction)
CCEaseBounceOut::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBounceOut::reverse(void)$/;"	f	class:CCEaseBounceOut	signature:(void)
CCEaseBounceOut::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseBounceOut	access:public	signature:(void)
CCEaseBounceOut::update	actions/CCActionEase.cpp	/^void CCEaseBounceOut::update(float time)$/;"	f	class:CCEaseBounceOut	signature:(float time)
CCEaseBounceOut::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseBounceOut	access:public	signature:(float time)
CCEaseElastic	actions/CCActionEase.h	/^class CC_DLL CCEaseElastic : public CCActionEase$/;"	c	inherits:CCActionEase
CCEaseElastic::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseElastic::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseElastic	signature:(CCZone *pZone)
CCEaseElastic::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseElastic	access:public	signature:(CCZone* pZone)
CCEaseElastic::create	actions/CCActionEase.cpp	/^CCEaseElastic* CCEaseElastic::create(CCActionInterval *pAction)$/;"	f	class:CCEaseElastic	signature:(CCActionInterval *pAction)
CCEaseElastic::create	actions/CCActionEase.cpp	/^CCEaseElastic* CCEaseElastic::create(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElastic	signature:(CCActionInterval *pAction, float fPeriod )
CCEaseElastic::create	actions/CCActionEase.h	/^    static CCEaseElastic* create(CCActionInterval *pAction);$/;"	p	class:CCEaseElastic	access:public	signature:(CCActionInterval *pAction)
CCEaseElastic::create	actions/CCActionEase.h	/^    static CCEaseElastic* create(CCActionInterval *pAction, float fPeriod);$/;"	p	class:CCEaseElastic	access:public	signature:(CCActionInterval *pAction, float fPeriod)
CCEaseElastic::getPeriod	actions/CCActionEase.h	/^    inline float getPeriod(void) { return m_fPeriod; }$/;"	f	class:CCEaseElastic	access:public	signature:(void)
CCEaseElastic::initWithAction	actions/CCActionEase.cpp	/^bool CCEaseElastic::initWithAction(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElastic	signature:(CCActionInterval *pAction, float fPeriod )
CCEaseElastic::initWithAction	actions/CCActionEase.h	/^    bool initWithAction(CCActionInterval *pAction, float fPeriod = 0.3f);$/;"	p	class:CCEaseElastic	access:public	signature:(CCActionInterval *pAction, float fPeriod = 0.3f)
CCEaseElastic::m_fPeriod	actions/CCActionEase.h	/^    float m_fPeriod;$/;"	m	class:CCEaseElastic	access:protected
CCEaseElastic::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseElastic::reverse(void)$/;"	f	class:CCEaseElastic	signature:(void)
CCEaseElastic::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseElastic	access:public	signature:(void)
CCEaseElastic::setPeriod	actions/CCActionEase.h	/^    inline void setPeriod(float fPeriod) { m_fPeriod = fPeriod; }$/;"	f	class:CCEaseElastic	access:public	signature:(float fPeriod)
CCEaseElasticIn	actions/CCActionEase.h	/^class CC_DLL CCEaseElasticIn : public CCEaseElastic$/;"	c	inherits:CCEaseElastic
CCEaseElasticIn::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseElasticIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseElasticIn	signature:(CCZone *pZone)
CCEaseElasticIn::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseElasticIn	access:public	signature:(CCZone* pZone)
CCEaseElasticIn::create	actions/CCActionEase.cpp	/^CCEaseElasticIn* CCEaseElasticIn::create(CCActionInterval *pAction)$/;"	f	class:CCEaseElasticIn	signature:(CCActionInterval *pAction)
CCEaseElasticIn::create	actions/CCActionEase.cpp	/^CCEaseElasticIn* CCEaseElasticIn::create(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElasticIn	signature:(CCActionInterval *pAction, float fPeriod )
CCEaseElasticIn::create	actions/CCActionEase.h	/^    static CCEaseElasticIn* create(CCActionInterval *pAction);$/;"	p	class:CCEaseElasticIn	access:public	signature:(CCActionInterval *pAction)
CCEaseElasticIn::create	actions/CCActionEase.h	/^    static CCEaseElasticIn* create(CCActionInterval *pAction, float fPeriod);$/;"	p	class:CCEaseElasticIn	access:public	signature:(CCActionInterval *pAction, float fPeriod)
CCEaseElasticIn::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseElasticIn::reverse(void)$/;"	f	class:CCEaseElasticIn	signature:(void)
CCEaseElasticIn::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseElasticIn	access:public	signature:(void)
CCEaseElasticIn::update	actions/CCActionEase.cpp	/^void CCEaseElasticIn::update(float time)$/;"	f	class:CCEaseElasticIn	signature:(float time)
CCEaseElasticIn::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseElasticIn	access:public	signature:(float time)
CCEaseElasticInOut	actions/CCActionEase.h	/^class CC_DLL CCEaseElasticInOut : public CCEaseElastic$/;"	c	inherits:CCEaseElastic
CCEaseElasticInOut::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseElasticInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseElasticInOut	signature:(CCZone *pZone)
CCEaseElasticInOut::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseElasticInOut	access:public	signature:(CCZone* pZone)
CCEaseElasticInOut::create	actions/CCActionEase.cpp	/^CCEaseElasticInOut* CCEaseElasticInOut::create(CCActionInterval *pAction)$/;"	f	class:CCEaseElasticInOut	signature:(CCActionInterval *pAction)
CCEaseElasticInOut::create	actions/CCActionEase.cpp	/^CCEaseElasticInOut* CCEaseElasticInOut::create(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElasticInOut	signature:(CCActionInterval *pAction, float fPeriod )
CCEaseElasticInOut::create	actions/CCActionEase.h	/^    static CCEaseElasticInOut* create(CCActionInterval *pAction);$/;"	p	class:CCEaseElasticInOut	access:public	signature:(CCActionInterval *pAction)
CCEaseElasticInOut::create	actions/CCActionEase.h	/^    static CCEaseElasticInOut* create(CCActionInterval *pAction, float fPeriod);$/;"	p	class:CCEaseElasticInOut	access:public	signature:(CCActionInterval *pAction, float fPeriod)
CCEaseElasticInOut::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseElasticInOut::reverse(void)$/;"	f	class:CCEaseElasticInOut	signature:(void)
CCEaseElasticInOut::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseElasticInOut	access:public	signature:(void)
CCEaseElasticInOut::update	actions/CCActionEase.cpp	/^void CCEaseElasticInOut::update(float time)$/;"	f	class:CCEaseElasticInOut	signature:(float time)
CCEaseElasticInOut::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseElasticInOut	access:public	signature:(float time)
CCEaseElasticOut	actions/CCActionEase.h	/^class CC_DLL CCEaseElasticOut : public CCEaseElastic$/;"	c	inherits:CCEaseElastic
CCEaseElasticOut::copyWithZone	actions/CCActionEase.cpp	/^CCObject *CCEaseElasticOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseElasticOut	signature:(CCZone *pZone)
CCEaseElasticOut::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseElasticOut	access:public	signature:(CCZone* pZone)
CCEaseElasticOut::create	actions/CCActionEase.cpp	/^CCEaseElasticOut* CCEaseElasticOut::create(CCActionInterval *pAction)$/;"	f	class:CCEaseElasticOut	signature:(CCActionInterval *pAction)
CCEaseElasticOut::create	actions/CCActionEase.cpp	/^CCEaseElasticOut* CCEaseElasticOut::create(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElasticOut	signature:(CCActionInterval *pAction, float fPeriod )
CCEaseElasticOut::create	actions/CCActionEase.h	/^    static CCEaseElasticOut* create(CCActionInterval *pAction);$/;"	p	class:CCEaseElasticOut	access:public	signature:(CCActionInterval *pAction)
CCEaseElasticOut::create	actions/CCActionEase.h	/^    static CCEaseElasticOut* create(CCActionInterval *pAction, float fPeriod);$/;"	p	class:CCEaseElasticOut	access:public	signature:(CCActionInterval *pAction, float fPeriod)
CCEaseElasticOut::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseElasticOut::reverse(void)$/;"	f	class:CCEaseElasticOut	signature:(void)
CCEaseElasticOut::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseElasticOut	access:public	signature:(void)
CCEaseElasticOut::update	actions/CCActionEase.cpp	/^void CCEaseElasticOut::update(float time)$/;"	f	class:CCEaseElasticOut	signature:(float time)
CCEaseElasticOut::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseElasticOut	access:public	signature:(float time)
CCEaseExponentialIn	actions/CCActionEase.h	/^class CC_DLL CCEaseExponentialIn : public CCActionEase$/;"	c	inherits:CCActionEase
CCEaseExponentialIn::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseExponentialIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseExponentialIn	signature:(CCZone *pZone)
CCEaseExponentialIn::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseExponentialIn	access:public	signature:(CCZone* pZone)
CCEaseExponentialIn::create	actions/CCActionEase.cpp	/^CCEaseExponentialIn* CCEaseExponentialIn::create(CCActionInterval* pAction)$/;"	f	class:CCEaseExponentialIn	signature:(CCActionInterval* pAction)
CCEaseExponentialIn::create	actions/CCActionEase.h	/^    static CCEaseExponentialIn* create(CCActionInterval* pAction);$/;"	p	class:CCEaseExponentialIn	access:public	signature:(CCActionInterval* pAction)
CCEaseExponentialIn::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseExponentialIn::reverse(void)$/;"	f	class:CCEaseExponentialIn	signature:(void)
CCEaseExponentialIn::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseExponentialIn	access:public	signature:(void)
CCEaseExponentialIn::update	actions/CCActionEase.cpp	/^void CCEaseExponentialIn::update(float time)$/;"	f	class:CCEaseExponentialIn	signature:(float time)
CCEaseExponentialIn::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseExponentialIn	access:public	signature:(float time)
CCEaseExponentialInOut	actions/CCActionEase.h	/^class CC_DLL CCEaseExponentialInOut : public CCActionEase$/;"	c	inherits:CCActionEase
CCEaseExponentialInOut::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseExponentialInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseExponentialInOut	signature:(CCZone *pZone)
CCEaseExponentialInOut::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseExponentialInOut	access:public	signature:(CCZone* pZone)
CCEaseExponentialInOut::create	actions/CCActionEase.cpp	/^CCEaseExponentialInOut* CCEaseExponentialInOut::create(CCActionInterval *pAction)$/;"	f	class:CCEaseExponentialInOut	signature:(CCActionInterval *pAction)
CCEaseExponentialInOut::create	actions/CCActionEase.h	/^    static CCEaseExponentialInOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseExponentialInOut	access:public	signature:(CCActionInterval* pAction)
CCEaseExponentialInOut::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseExponentialInOut::reverse()$/;"	f	class:CCEaseExponentialInOut	signature:()
CCEaseExponentialInOut::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCEaseExponentialInOut	access:public	signature:()
CCEaseExponentialInOut::update	actions/CCActionEase.cpp	/^void CCEaseExponentialInOut::update(float time)$/;"	f	class:CCEaseExponentialInOut	signature:(float time)
CCEaseExponentialInOut::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseExponentialInOut	access:public	signature:(float time)
CCEaseExponentialOut	actions/CCActionEase.h	/^class CC_DLL CCEaseExponentialOut : public CCActionEase$/;"	c	inherits:CCActionEase
CCEaseExponentialOut::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseExponentialOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseExponentialOut	signature:(CCZone *pZone)
CCEaseExponentialOut::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseExponentialOut	access:public	signature:(CCZone* pZone)
CCEaseExponentialOut::create	actions/CCActionEase.cpp	/^CCEaseExponentialOut* CCEaseExponentialOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseExponentialOut	signature:(CCActionInterval* pAction)
CCEaseExponentialOut::create	actions/CCActionEase.h	/^    static CCEaseExponentialOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseExponentialOut	access:public	signature:(CCActionInterval* pAction)
CCEaseExponentialOut::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseExponentialOut::reverse(void)$/;"	f	class:CCEaseExponentialOut	signature:(void)
CCEaseExponentialOut::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseExponentialOut	access:public	signature:(void)
CCEaseExponentialOut::update	actions/CCActionEase.cpp	/^void CCEaseExponentialOut::update(float time)$/;"	f	class:CCEaseExponentialOut	signature:(float time)
CCEaseExponentialOut::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseExponentialOut	access:public	signature:(float time)
CCEaseIn	actions/CCActionEase.h	/^class CC_DLL CCEaseIn : public CCEaseRateAction$/;"	c	inherits:CCEaseRateAction
CCEaseIn::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseIn	signature:(CCZone *pZone)
CCEaseIn::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseIn	access:public	signature:(CCZone* pZone)
CCEaseIn::create	actions/CCActionEase.cpp	/^CCEaseIn* CCEaseIn::create(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseIn	signature:(CCActionInterval *pAction, float fRate)
CCEaseIn::create	actions/CCActionEase.h	/^    static CCEaseIn* create(CCActionInterval* pAction, float fRate);$/;"	p	class:CCEaseIn	access:public	signature:(CCActionInterval* pAction, float fRate)
CCEaseIn::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseIn::reverse(void)$/;"	f	class:CCEaseIn	signature:(void)
CCEaseIn::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseIn	access:public	signature:(void)
CCEaseIn::update	actions/CCActionEase.cpp	/^void CCEaseIn::update(float time)$/;"	f	class:CCEaseIn	signature:(float time)
CCEaseIn::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseIn	access:public	signature:(float time)
CCEaseInOut	actions/CCActionEase.h	/^class CC_DLL CCEaseInOut : public CCEaseRateAction$/;"	c	inherits:CCEaseRateAction
CCEaseInOut::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseInOut	signature:(CCZone *pZone)
CCEaseInOut::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseInOut	access:public	signature:(CCZone* pZone)
CCEaseInOut::create	actions/CCActionEase.cpp	/^CCEaseInOut* CCEaseInOut::create(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseInOut	signature:(CCActionInterval *pAction, float fRate)
CCEaseInOut::create	actions/CCActionEase.h	/^    static CCEaseInOut* create(CCActionInterval* pAction, float fRate);$/;"	p	class:CCEaseInOut	access:public	signature:(CCActionInterval* pAction, float fRate)
CCEaseInOut::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseInOut::reverse(void)$/;"	f	class:CCEaseInOut	signature:(void)
CCEaseInOut::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseInOut	access:public	signature:(void)
CCEaseInOut::update	actions/CCActionEase.cpp	/^void CCEaseInOut::update(float time)$/;"	f	class:CCEaseInOut	signature:(float time)
CCEaseInOut::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseInOut	access:public	signature:(float time)
CCEaseOut	actions/CCActionEase.h	/^class CC_DLL CCEaseOut : public CCEaseRateAction$/;"	c	inherits:CCEaseRateAction
CCEaseOut::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseOut	signature:(CCZone *pZone)
CCEaseOut::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseOut	access:public	signature:(CCZone* pZone)
CCEaseOut::create	actions/CCActionEase.cpp	/^CCEaseOut* CCEaseOut::create(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseOut	signature:(CCActionInterval *pAction, float fRate)
CCEaseOut::create	actions/CCActionEase.h	/^    static CCEaseOut* create(CCActionInterval* pAction, float fRate);$/;"	p	class:CCEaseOut	access:public	signature:(CCActionInterval* pAction, float fRate)
CCEaseOut::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseOut::reverse()$/;"	f	class:CCEaseOut	signature:()
CCEaseOut::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCEaseOut	access:public	signature:()
CCEaseOut::update	actions/CCActionEase.cpp	/^void CCEaseOut::update(float time)$/;"	f	class:CCEaseOut	signature:(float time)
CCEaseOut::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseOut	access:public	signature:(float time)
CCEaseRateAction	actions/CCActionEase.h	/^class CC_DLL CCEaseRateAction : public CCActionEase$/;"	c	inherits:CCActionEase
CCEaseRateAction::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseRateAction::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseRateAction	signature:(CCZone *pZone)
CCEaseRateAction::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseRateAction	access:public	signature:(CCZone* pZone)
CCEaseRateAction::create	actions/CCActionEase.cpp	/^CCEaseRateAction* CCEaseRateAction::create(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseRateAction	signature:(CCActionInterval *pAction, float fRate)
CCEaseRateAction::create	actions/CCActionEase.h	/^    static CCEaseRateAction* create(CCActionInterval* pAction, float fRate);$/;"	p	class:CCEaseRateAction	access:public	signature:(CCActionInterval* pAction, float fRate)
CCEaseRateAction::getRate	actions/CCActionEase.h	/^    inline float getRate(void) { return m_fRate; }$/;"	f	class:CCEaseRateAction	access:public	signature:(void)
CCEaseRateAction::initWithAction	actions/CCActionEase.cpp	/^bool CCEaseRateAction::initWithAction(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseRateAction	signature:(CCActionInterval *pAction, float fRate)
CCEaseRateAction::initWithAction	actions/CCActionEase.h	/^    bool initWithAction(CCActionInterval *pAction, float fRate);$/;"	p	class:CCEaseRateAction	access:public	signature:(CCActionInterval *pAction, float fRate)
CCEaseRateAction::m_fRate	actions/CCActionEase.h	/^    float m_fRate;$/;"	m	class:CCEaseRateAction	access:protected
CCEaseRateAction::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseRateAction::reverse(void)$/;"	f	class:CCEaseRateAction	signature:(void)
CCEaseRateAction::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseRateAction	access:public	signature:(void)
CCEaseRateAction::setRate	actions/CCActionEase.h	/^    inline void setRate(float rate) { m_fRate = rate; }$/;"	f	class:CCEaseRateAction	access:public	signature:(float rate)
CCEaseRateAction::~CCEaseRateAction	actions/CCActionEase.cpp	/^CCEaseRateAction::~CCEaseRateAction(void)$/;"	f	class:CCEaseRateAction	signature:(void)
CCEaseRateAction::~CCEaseRateAction	actions/CCActionEase.h	/^    virtual ~CCEaseRateAction(void);$/;"	p	class:CCEaseRateAction	access:public	signature:(void)
CCEaseSineIn	actions/CCActionEase.h	/^class CC_DLL CCEaseSineIn : public CCActionEase$/;"	c	inherits:CCActionEase
CCEaseSineIn::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseSineIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseSineIn	signature:(CCZone *pZone)
CCEaseSineIn::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseSineIn	access:public	signature:(CCZone* pZone)
CCEaseSineIn::create	actions/CCActionEase.cpp	/^CCEaseSineIn* CCEaseSineIn::create(CCActionInterval* pAction)$/;"	f	class:CCEaseSineIn	signature:(CCActionInterval* pAction)
CCEaseSineIn::create	actions/CCActionEase.h	/^    static CCEaseSineIn* create(CCActionInterval* pAction);$/;"	p	class:CCEaseSineIn	access:public	signature:(CCActionInterval* pAction)
CCEaseSineIn::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseSineIn::reverse(void)$/;"	f	class:CCEaseSineIn	signature:(void)
CCEaseSineIn::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseSineIn	access:public	signature:(void)
CCEaseSineIn::update	actions/CCActionEase.cpp	/^void CCEaseSineIn::update(float time)$/;"	f	class:CCEaseSineIn	signature:(float time)
CCEaseSineIn::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseSineIn	access:public	signature:(float time)
CCEaseSineInOut	actions/CCActionEase.h	/^class CC_DLL CCEaseSineInOut : public CCActionEase$/;"	c	inherits:CCActionEase
CCEaseSineInOut::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseSineInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseSineInOut	signature:(CCZone *pZone)
CCEaseSineInOut::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseSineInOut	access:public	signature:(CCZone* pZone)
CCEaseSineInOut::create	actions/CCActionEase.cpp	/^CCEaseSineInOut* CCEaseSineInOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseSineInOut	signature:(CCActionInterval* pAction)
CCEaseSineInOut::create	actions/CCActionEase.h	/^    static CCEaseSineInOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseSineInOut	access:public	signature:(CCActionInterval* pAction)
CCEaseSineInOut::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseSineInOut::reverse()$/;"	f	class:CCEaseSineInOut	signature:()
CCEaseSineInOut::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCEaseSineInOut	access:public	signature:()
CCEaseSineInOut::update	actions/CCActionEase.cpp	/^void CCEaseSineInOut::update(float time)$/;"	f	class:CCEaseSineInOut	signature:(float time)
CCEaseSineInOut::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseSineInOut	access:public	signature:(float time)
CCEaseSineOut	actions/CCActionEase.h	/^class CC_DLL CCEaseSineOut : public CCActionEase$/;"	c	inherits:CCActionEase
CCEaseSineOut::copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseSineOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseSineOut	signature:(CCZone *pZone)
CCEaseSineOut::copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseSineOut	access:public	signature:(CCZone* pZone)
CCEaseSineOut::create	actions/CCActionEase.cpp	/^CCEaseSineOut* CCEaseSineOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseSineOut	signature:(CCActionInterval* pAction)
CCEaseSineOut::create	actions/CCActionEase.h	/^    static CCEaseSineOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseSineOut	access:public	signature:(CCActionInterval* pAction)
CCEaseSineOut::reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseSineOut::reverse(void)$/;"	f	class:CCEaseSineOut	signature:(void)
CCEaseSineOut::reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseSineOut	access:public	signature:(void)
CCEaseSineOut::update	actions/CCActionEase.cpp	/^void CCEaseSineOut::update(float time)$/;"	f	class:CCEaseSineOut	signature:(float time)
CCEaseSineOut::update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseSineOut	access:public	signature:(float time)
CCEvent	touch_dispatcher/CCTouch.h	/^class CC_DLL CCEvent : public CCObject$/;"	c	inherits:CCObject
CCFadeIn	actions/CCActionInterval.h	/^class CC_DLL CCFadeIn : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCFadeIn::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCFadeIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCFadeIn	signature:(CCZone *pZone)
CCFadeIn::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCFadeIn	access:public	signature:(CCZone* pZone)
CCFadeIn::create	actions/CCActionInterval.cpp	/^CCFadeIn* CCFadeIn::create(float d)$/;"	f	class:CCFadeIn	signature:(float d)
CCFadeIn::create	actions/CCActionInterval.h	/^    static CCFadeIn* create(float d);$/;"	p	class:CCFadeIn	access:public	signature:(float d)
CCFadeIn::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCFadeIn::reverse(void)$/;"	f	class:CCFadeIn	signature:(void)
CCFadeIn::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCFadeIn	access:public	signature:(void)
CCFadeIn::update	actions/CCActionInterval.cpp	/^void CCFadeIn::update(float time)$/;"	f	class:CCFadeIn	signature:(float time)
CCFadeIn::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCFadeIn	access:public	signature:(float time)
CCFadeOut	actions/CCActionInterval.h	/^class CC_DLL CCFadeOut : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCFadeOut::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCFadeOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCFadeOut	signature:(CCZone *pZone)
CCFadeOut::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCFadeOut	access:public	signature:(CCZone* pZone)
CCFadeOut::create	actions/CCActionInterval.cpp	/^CCFadeOut* CCFadeOut::create(float d)$/;"	f	class:CCFadeOut	signature:(float d)
CCFadeOut::create	actions/CCActionInterval.h	/^    static CCFadeOut* create(float d);$/;"	p	class:CCFadeOut	access:public	signature:(float d)
CCFadeOut::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCFadeOut::reverse(void)$/;"	f	class:CCFadeOut	signature:(void)
CCFadeOut::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCFadeOut	access:public	signature:(void)
CCFadeOut::update	actions/CCActionInterval.cpp	/^void CCFadeOut::update(float time)$/;"	f	class:CCFadeOut	signature:(float time)
CCFadeOut::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCFadeOut	access:public	signature:(float time)
CCFadeOutBLTiles	actions/CCActionTiledGrid.h	/^class CC_DLL CCFadeOutBLTiles : public CCFadeOutTRTiles$/;"	c	inherits:CCFadeOutTRTiles
CCFadeOutBLTiles::create	actions/CCActionTiledGrid.cpp	/^CCFadeOutBLTiles* CCFadeOutBLTiles::create(float duration, const CCSize& gridSize)$/;"	f	class:CCFadeOutBLTiles	signature:(float duration, const CCSize& gridSize)
CCFadeOutBLTiles::create	actions/CCActionTiledGrid.h	/^    static CCFadeOutBLTiles* create(float duration, const CCSize& gridSize);$/;"	p	class:CCFadeOutBLTiles	access:public	signature:(float duration, const CCSize& gridSize)
CCFadeOutBLTiles::testFunc	actions/CCActionTiledGrid.cpp	/^float CCFadeOutBLTiles::testFunc(const CCSize& pos, float time)$/;"	f	class:CCFadeOutBLTiles	signature:(const CCSize& pos, float time)
CCFadeOutBLTiles::testFunc	actions/CCActionTiledGrid.h	/^    virtual float testFunc(const CCSize& pos, float time);$/;"	p	class:CCFadeOutBLTiles	access:public	signature:(const CCSize& pos, float time)
CCFadeOutDownTiles	actions/CCActionTiledGrid.h	/^class CC_DLL CCFadeOutDownTiles : public CCFadeOutUpTiles$/;"	c	inherits:CCFadeOutUpTiles
CCFadeOutDownTiles::create	actions/CCActionTiledGrid.cpp	/^CCFadeOutDownTiles* CCFadeOutDownTiles::create(float duration, const CCSize& gridSize)$/;"	f	class:CCFadeOutDownTiles	signature:(float duration, const CCSize& gridSize)
CCFadeOutDownTiles::create	actions/CCActionTiledGrid.h	/^    static CCFadeOutDownTiles* create(float duration, const CCSize& gridSize);$/;"	p	class:CCFadeOutDownTiles	access:public	signature:(float duration, const CCSize& gridSize)
CCFadeOutDownTiles::testFunc	actions/CCActionTiledGrid.cpp	/^float CCFadeOutDownTiles::testFunc(const CCSize& pos, float time)$/;"	f	class:CCFadeOutDownTiles	signature:(const CCSize& pos, float time)
CCFadeOutDownTiles::testFunc	actions/CCActionTiledGrid.h	/^    virtual float testFunc(const CCSize& pos, float time);$/;"	p	class:CCFadeOutDownTiles	access:public	signature:(const CCSize& pos, float time)
CCFadeOutTRTiles	actions/CCActionTiledGrid.h	/^class CC_DLL CCFadeOutTRTiles : public CCTiledGrid3DAction$/;"	c	inherits:CCTiledGrid3DAction
CCFadeOutTRTiles::create	actions/CCActionTiledGrid.cpp	/^CCFadeOutTRTiles* CCFadeOutTRTiles::create(float duration, const CCSize& gridSize)$/;"	f	class:CCFadeOutTRTiles	signature:(float duration, const CCSize& gridSize)
CCFadeOutTRTiles::create	actions/CCActionTiledGrid.h	/^    static CCFadeOutTRTiles* create(float duration, const CCSize& gridSize);$/;"	p	class:CCFadeOutTRTiles	access:public	signature:(float duration, const CCSize& gridSize)
CCFadeOutTRTiles::testFunc	actions/CCActionTiledGrid.cpp	/^float CCFadeOutTRTiles::testFunc(const CCSize& pos, float time)$/;"	f	class:CCFadeOutTRTiles	signature:(const CCSize& pos, float time)
CCFadeOutTRTiles::testFunc	actions/CCActionTiledGrid.h	/^    virtual float testFunc(const CCSize& pos, float time);$/;"	p	class:CCFadeOutTRTiles	access:public	signature:(const CCSize& pos, float time)
CCFadeOutTRTiles::transformTile	actions/CCActionTiledGrid.cpp	/^void CCFadeOutTRTiles::transformTile(const CCPoint& pos, float distance)$/;"	f	class:CCFadeOutTRTiles	signature:(const CCPoint& pos, float distance)
CCFadeOutTRTiles::transformTile	actions/CCActionTiledGrid.h	/^    virtual void transformTile(const CCPoint& pos, float distance);$/;"	p	class:CCFadeOutTRTiles	access:public	signature:(const CCPoint& pos, float distance)
CCFadeOutTRTiles::turnOffTile	actions/CCActionTiledGrid.cpp	/^void CCFadeOutTRTiles::turnOffTile(const CCPoint& pos)$/;"	f	class:CCFadeOutTRTiles	signature:(const CCPoint& pos)
CCFadeOutTRTiles::turnOffTile	actions/CCActionTiledGrid.h	/^    void turnOffTile(const CCPoint& pos);$/;"	p	class:CCFadeOutTRTiles	access:public	signature:(const CCPoint& pos)
CCFadeOutTRTiles::turnOnTile	actions/CCActionTiledGrid.cpp	/^void CCFadeOutTRTiles::turnOnTile(const CCPoint& pos)$/;"	f	class:CCFadeOutTRTiles	signature:(const CCPoint& pos)
CCFadeOutTRTiles::turnOnTile	actions/CCActionTiledGrid.h	/^    void turnOnTile(const CCPoint& pos);$/;"	p	class:CCFadeOutTRTiles	access:public	signature:(const CCPoint& pos)
CCFadeOutTRTiles::update	actions/CCActionTiledGrid.cpp	/^void CCFadeOutTRTiles::update(float time)$/;"	f	class:CCFadeOutTRTiles	signature:(float time)
CCFadeOutTRTiles::update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCFadeOutTRTiles	access:public	signature:(float time)
CCFadeOutUpTiles	actions/CCActionTiledGrid.h	/^class CC_DLL CCFadeOutUpTiles : public CCFadeOutTRTiles$/;"	c	inherits:CCFadeOutTRTiles
CCFadeOutUpTiles::create	actions/CCActionTiledGrid.cpp	/^CCFadeOutUpTiles* CCFadeOutUpTiles::create(float duration, const CCSize& gridSize)$/;"	f	class:CCFadeOutUpTiles	signature:(float duration, const CCSize& gridSize)
CCFadeOutUpTiles::create	actions/CCActionTiledGrid.h	/^    static CCFadeOutUpTiles* create(float duration, const CCSize& gridSize);$/;"	p	class:CCFadeOutUpTiles	access:public	signature:(float duration, const CCSize& gridSize)
CCFadeOutUpTiles::testFunc	actions/CCActionTiledGrid.cpp	/^float CCFadeOutUpTiles::testFunc(const CCSize& pos, float time)$/;"	f	class:CCFadeOutUpTiles	signature:(const CCSize& pos, float time)
CCFadeOutUpTiles::testFunc	actions/CCActionTiledGrid.h	/^    virtual float testFunc(const CCSize& pos, float time);$/;"	p	class:CCFadeOutUpTiles	access:public	signature:(const CCSize& pos, float time)
CCFadeOutUpTiles::transformTile	actions/CCActionTiledGrid.cpp	/^void CCFadeOutUpTiles::transformTile(const CCPoint& pos, float distance)$/;"	f	class:CCFadeOutUpTiles	signature:(const CCPoint& pos, float distance)
CCFadeOutUpTiles::transformTile	actions/CCActionTiledGrid.h	/^    virtual void transformTile(const CCPoint& pos, float distance);$/;"	p	class:CCFadeOutUpTiles	access:public	signature:(const CCPoint& pos, float distance)
CCFadeTo	actions/CCActionInterval.h	/^class CC_DLL CCFadeTo : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCFadeTo::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCFadeTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCFadeTo	signature:(CCZone *pZone)
CCFadeTo::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCFadeTo	access:public	signature:(CCZone* pZone)
CCFadeTo::create	actions/CCActionInterval.cpp	/^CCFadeTo* CCFadeTo::create(float duration, GLubyte opacity)$/;"	f	class:CCFadeTo	signature:(float duration, GLubyte opacity)
CCFadeTo::create	actions/CCActionInterval.h	/^    static CCFadeTo* create(float duration, GLubyte opacity);$/;"	p	class:CCFadeTo	access:public	signature:(float duration, GLubyte opacity)
CCFadeTo::initWithDuration	actions/CCActionInterval.cpp	/^bool CCFadeTo::initWithDuration(float duration, GLubyte opacity)$/;"	f	class:CCFadeTo	signature:(float duration, GLubyte opacity)
CCFadeTo::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, GLubyte opacity);$/;"	p	class:CCFadeTo	access:public	signature:(float duration, GLubyte opacity)
CCFadeTo::m_fromOpacity	actions/CCActionInterval.h	/^    GLubyte m_fromOpacity;$/;"	m	class:CCFadeTo	access:protected
CCFadeTo::m_toOpacity	actions/CCActionInterval.h	/^    GLubyte m_toOpacity;$/;"	m	class:CCFadeTo	access:protected
CCFadeTo::startWithTarget	actions/CCActionInterval.cpp	/^void CCFadeTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCFadeTo	signature:(CCNode *pTarget)
CCFadeTo::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCFadeTo	access:public	signature:(CCNode *pTarget)
CCFadeTo::update	actions/CCActionInterval.cpp	/^void CCFadeTo::update(float time)$/;"	f	class:CCFadeTo	signature:(float time)
CCFadeTo::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCFadeTo	access:public	signature:(float time)
CCFileUtils	platform/CCFileUtils.cpp	/^CCFileUtils::CCFileUtils()$/;"	f	class:CCFileUtils	signature:()
CCFileUtils	platform/CCFileUtils.h	/^    CCFileUtils();$/;"	p	class:CCFileUtils	access:protected	signature:()
CCFileUtils	platform/CCFileUtils.h	/^class CC_DLL CCFileUtils : public TypeInfo$/;"	c	inherits:TypeInfo
CCFileUtils::CCFileUtils	platform/CCFileUtils.cpp	/^CCFileUtils::CCFileUtils()$/;"	f	class:CCFileUtils	signature:()
CCFileUtils::CCFileUtils	platform/CCFileUtils.h	/^    CCFileUtils();$/;"	p	class:CCFileUtils	access:protected	signature:()
CCFileUtils::addSearchPath	platform/CCFileUtils.cpp	/^void CCFileUtils::addSearchPath(const char* path_)$/;"	f	class:CCFileUtils	signature:(const char* path_)
CCFileUtils::addSearchPath	platform/CCFileUtils.h	/^     void addSearchPath(const char* path);$/;"	p	class:CCFileUtils	access:public	signature:(const char* path)
CCFileUtils::addSearchResolutionsOrder	platform/CCFileUtils.cpp	/^void CCFileUtils::addSearchResolutionsOrder(const char* order)$/;"	f	class:CCFileUtils	signature:(const char* order)
CCFileUtils::addSearchResolutionsOrder	platform/CCFileUtils.h	/^    virtual void addSearchResolutionsOrder(const char* order);$/;"	p	class:CCFileUtils	access:public	signature:(const char* order)
CCFileUtils::createCCArrayWithContentsOfFile	platform/CCFileUtils.cpp	/^CCArray* CCFileUtils::createCCArrayWithContentsOfFile(const std::string& filename)$/;"	f	class:CCFileUtils	signature:(const std::string& filename)
CCFileUtils::createCCArrayWithContentsOfFile	platform/CCFileUtils.h	/^    virtual CCArray* createCCArrayWithContentsOfFile(const std::string& filename);$/;"	p	class:CCFileUtils	access:protected	signature:(const std::string& filename)
CCFileUtils::createCCDictionaryWithContentsOfFile	platform/CCFileUtils.cpp	/^CCDictionary* CCFileUtils::createCCDictionaryWithContentsOfFile(const std::string& filename)$/;"	f	class:CCFileUtils	signature:(const std::string& filename)
CCFileUtils::createCCDictionaryWithContentsOfFile	platform/CCFileUtils.h	/^    virtual CCDictionary* createCCDictionaryWithContentsOfFile(const std::string& filename);$/;"	p	class:CCFileUtils	access:protected	signature:(const std::string& filename)
CCFileUtils::fullPathForFilename	platform/CCFileUtils.cpp	/^std::string CCFileUtils::fullPathForFilename(const char* pszFileName)$/;"	f	class:CCFileUtils	signature:(const char* pszFileName)
CCFileUtils::fullPathForFilename	platform/CCFileUtils.h	/^    virtual std::string fullPathForFilename(const char* pszFileName);$/;"	p	class:CCFileUtils	access:public	signature:(const char* pszFileName)
CCFileUtils::fullPathFromRelativeFile	platform/CCFileUtils.cpp	/^const char* CCFileUtils::fullPathFromRelativeFile(const char *pszFilename, const char *pszRelativeFile)$/;"	f	class:CCFileUtils	signature:(const char *pszFilename, const char *pszRelativeFile)
CCFileUtils::fullPathFromRelativeFile	platform/CCFileUtils.h	/^    virtual const char* fullPathFromRelativeFile(const char *pszFilename, const char *pszRelativeFile);$/;"	p	class:CCFileUtils	access:public	signature:(const char *pszFilename, const char *pszRelativeFile)
CCFileUtils::getClassTypeInfo	platform/CCFileUtils.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCFileUtils	access:public	signature:()
CCFileUtils::getFileData	platform/CCFileUtils.cpp	/^unsigned char* CCFileUtils::getFileData(const char* pszFileName, const char* pszMode, unsigned long * pSize)$/;"	f	class:CCFileUtils	signature:(const char* pszFileName, const char* pszMode, unsigned long * pSize)
CCFileUtils::getFileData	platform/CCFileUtils.h	/^    virtual unsigned char* getFileData(const char* pszFileName, const char* pszMode, unsigned long * pSize);$/;"	p	class:CCFileUtils	access:public	signature:(const char* pszFileName, const char* pszMode, unsigned long * pSize)
CCFileUtils::getFileDataFromZip	platform/CCFileUtils.cpp	/^unsigned char* CCFileUtils::getFileDataFromZip(const char* pszZipFilePath, const char* pszFileName, unsigned long * pSize)$/;"	f	class:CCFileUtils	signature:(const char* pszZipFilePath, const char* pszFileName, unsigned long * pSize)
CCFileUtils::getFileDataFromZip	platform/CCFileUtils.h	/^    virtual unsigned char* getFileDataFromZip(const char* pszZipFilePath, const char* pszFileName, unsigned long * pSize);$/;"	p	class:CCFileUtils	access:public	signature:(const char* pszZipFilePath, const char* pszFileName, unsigned long * pSize)
CCFileUtils::getFullPathForDirectoryAndFilename	platform/CCFileUtils.cpp	/^std::string CCFileUtils::getFullPathForDirectoryAndFilename(const std::string& strDirectory, const std::string& strFilename)$/;"	f	class:CCFileUtils	signature:(const std::string& strDirectory, const std::string& strFilename)
CCFileUtils::getFullPathForDirectoryAndFilename	platform/CCFileUtils.h	/^    virtual std::string getFullPathForDirectoryAndFilename(const std::string& strDirectory, const std::string& strFilename);$/;"	p	class:CCFileUtils	access:protected	signature:(const std::string& strDirectory, const std::string& strFilename)
CCFileUtils::getNewFilename	platform/CCFileUtils.cpp	/^std::string CCFileUtils::getNewFilename(const char* pszFileName)$/;"	f	class:CCFileUtils	signature:(const char* pszFileName)
CCFileUtils::getNewFilename	platform/CCFileUtils.h	/^    virtual std::string getNewFilename(const char* pszFileName);$/;"	p	class:CCFileUtils	access:protected	signature:(const char* pszFileName)
CCFileUtils::getPathForFilename	platform/CCFileUtils.cpp	/^std::string CCFileUtils::getPathForFilename(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath)$/;"	f	class:CCFileUtils	signature:(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath)
CCFileUtils::getPathForFilename	platform/CCFileUtils.h	/^    virtual std::string getPathForFilename(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath);$/;"	p	class:CCFileUtils	access:protected	signature:(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath)
CCFileUtils::getSearchPaths	platform/CCFileUtils.cpp	/^const std::vector<std::string>& CCFileUtils::getSearchPaths()$/;"	f	class:CCFileUtils	signature:()
CCFileUtils::getSearchPaths	platform/CCFileUtils.h	/^    virtual const std::vector<std::string>& getSearchPaths();$/;"	p	class:CCFileUtils	access:public	signature:()
CCFileUtils::getSearchResolutionsOrder	platform/CCFileUtils.cpp	/^const std::vector<std::string>& CCFileUtils::getSearchResolutionsOrder()$/;"	f	class:CCFileUtils	signature:()
CCFileUtils::getSearchResolutionsOrder	platform/CCFileUtils.h	/^    virtual const std::vector<std::string>& getSearchResolutionsOrder();$/;"	p	class:CCFileUtils	access:public	signature:()
CCFileUtils::getWritablePath	platform/CCFileUtils.h	/^    virtual std::string getWritablePath() = 0;$/;"	p	class:CCFileUtils	access:public	signature:()
CCFileUtils::init	platform/CCFileUtils.cpp	/^bool CCFileUtils::init()$/;"	f	class:CCFileUtils	signature:()
CCFileUtils::init	platform/CCFileUtils.h	/^    virtual bool init();$/;"	p	class:CCFileUtils	access:protected	signature:()
CCFileUtils::isAbsolutePath	platform/CCFileUtils.cpp	/^bool CCFileUtils::isAbsolutePath(const std::string& strPath)$/;"	f	class:CCFileUtils	signature:(const std::string& strPath)
CCFileUtils::isAbsolutePath	platform/CCFileUtils.h	/^    virtual bool isAbsolutePath(const std::string& strPath);$/;"	p	class:CCFileUtils	access:public	signature:(const std::string& strPath)
CCFileUtils::isFileExist	platform/CCFileUtils.h	/^    virtual bool isFileExist(const std::string& strFilePath) = 0;$/;"	p	class:CCFileUtils	access:public	signature:(const std::string& strFilePath)
CCFileUtils::isPopupNotify	platform/CCFileUtils.cpp	/^bool CCFileUtils::isPopupNotify()$/;"	f	class:CCFileUtils	signature:()
CCFileUtils::isPopupNotify	platform/CCFileUtils.h	/^    virtual bool isPopupNotify();$/;"	p	class:CCFileUtils	access:public	signature:()
CCFileUtils::loadFilenameLookupDictionaryFromFile	platform/CCFileUtils.cpp	/^void CCFileUtils::loadFilenameLookupDictionaryFromFile(const char* filename)$/;"	f	class:CCFileUtils	signature:(const char* filename)
CCFileUtils::loadFilenameLookupDictionaryFromFile	platform/CCFileUtils.h	/^    virtual void loadFilenameLookupDictionaryFromFile(const char* filename);$/;"	p	class:CCFileUtils	access:public	signature:(const char* filename)
CCFileUtils::m_fullPathCache	platform/CCFileUtils.h	/^    std::map<std::string, std::string> m_fullPathCache;$/;"	m	class:CCFileUtils	access:protected
CCFileUtils::m_pFilenameLookupDict	platform/CCFileUtils.h	/^    CCDictionary* m_pFilenameLookupDict;$/;"	m	class:CCFileUtils	access:protected
CCFileUtils::m_searchPathArray	platform/CCFileUtils.h	/^    std::vector<std::string> m_searchPathArray;$/;"	m	class:CCFileUtils	access:protected
CCFileUtils::m_searchResolutionsOrderArray	platform/CCFileUtils.h	/^    std::vector<std::string> m_searchResolutionsOrderArray;$/;"	m	class:CCFileUtils	access:protected
CCFileUtils::m_strDefaultResRootPath	platform/CCFileUtils.h	/^    std::string m_strDefaultResRootPath;$/;"	m	class:CCFileUtils	access:protected
CCFileUtils::purgeCachedEntries	platform/CCFileUtils.cpp	/^void CCFileUtils::purgeCachedEntries()$/;"	f	class:CCFileUtils	signature:()
CCFileUtils::purgeCachedEntries	platform/CCFileUtils.h	/^    virtual void purgeCachedEntries();$/;"	p	class:CCFileUtils	access:public	signature:()
CCFileUtils::purgeFileUtils	platform/CCFileUtils.cpp	/^void CCFileUtils::purgeFileUtils()$/;"	f	class:CCFileUtils	signature:()
CCFileUtils::purgeFileUtils	platform/CCFileUtils.h	/^    static void purgeFileUtils();$/;"	p	class:CCFileUtils	access:public	signature:()
CCFileUtils::s_sharedFileUtils	platform/CCFileUtils.cpp	/^CCFileUtils* CCFileUtils::s_sharedFileUtils = NULL;$/;"	m	class:CCFileUtils	file:
CCFileUtils::s_sharedFileUtils	platform/CCFileUtils.h	/^    static CCFileUtils* s_sharedFileUtils;$/;"	m	class:CCFileUtils	access:protected
CCFileUtils::setFilenameLookupDictionary	platform/CCFileUtils.cpp	/^void CCFileUtils::setFilenameLookupDictionary(CCDictionary* pFilenameLookupDict)$/;"	f	class:CCFileUtils	signature:(CCDictionary* pFilenameLookupDict)
CCFileUtils::setFilenameLookupDictionary	platform/CCFileUtils.h	/^    virtual void setFilenameLookupDictionary(CCDictionary* pFilenameLookupDict);$/;"	p	class:CCFileUtils	access:public	signature:(CCDictionary* pFilenameLookupDict)
CCFileUtils::setPopupNotify	platform/CCFileUtils.cpp	/^void CCFileUtils::setPopupNotify(bool bNotify)$/;"	f	class:CCFileUtils	signature:(bool bNotify)
CCFileUtils::setPopupNotify	platform/CCFileUtils.h	/^    virtual void setPopupNotify(bool bNotify);$/;"	p	class:CCFileUtils	access:public	signature:(bool bNotify)
CCFileUtils::setSearchPaths	platform/CCFileUtils.cpp	/^void CCFileUtils::setSearchPaths(const std::vector<std::string>& searchPaths)$/;"	f	class:CCFileUtils	signature:(const std::vector<std::string>& searchPaths)
CCFileUtils::setSearchPaths	platform/CCFileUtils.h	/^    virtual void setSearchPaths(const std::vector<std::string>& searchPaths);$/;"	p	class:CCFileUtils	access:public	signature:(const std::vector<std::string>& searchPaths)
CCFileUtils::setSearchResolutionsOrder	platform/CCFileUtils.cpp	/^void CCFileUtils::setSearchResolutionsOrder(const std::vector<std::string>& searchResolutionsOrder)$/;"	f	class:CCFileUtils	signature:(const std::vector<std::string>& searchResolutionsOrder)
CCFileUtils::setSearchResolutionsOrder	platform/CCFileUtils.h	/^    virtual void setSearchResolutionsOrder(const std::vector<std::string>& searchResolutionsOrder);$/;"	p	class:CCFileUtils	access:public	signature:(const std::vector<std::string>& searchResolutionsOrder)
CCFileUtils::sharedFileUtils	platform/CCFileUtils.h	/^    static CCFileUtils* sharedFileUtils();$/;"	p	class:CCFileUtils	access:public	signature:()
CCFileUtils::~CCFileUtils	platform/CCFileUtils.cpp	/^CCFileUtils::~CCFileUtils()$/;"	f	class:CCFileUtils	signature:()
CCFileUtils::~CCFileUtils	platform/CCFileUtils.h	/^    virtual ~CCFileUtils();$/;"	p	class:CCFileUtils	access:public	signature:()
CCFiniteTimeAction	actions/CCAction.h	/^    CCFiniteTimeAction()$/;"	f	class:CCFiniteTimeAction	access:public	signature:()
CCFiniteTimeAction	actions/CCAction.h	/^class CC_DLL CCFiniteTimeAction : public CCAction$/;"	c	inherits:CCAction
CCFiniteTimeAction::CCFiniteTimeAction	actions/CCAction.h	/^    CCFiniteTimeAction()$/;"	f	class:CCFiniteTimeAction	access:public	signature:()
CCFiniteTimeAction::getDuration	actions/CCAction.h	/^    inline float getDuration(void) { return m_fDuration; }$/;"	f	class:CCFiniteTimeAction	access:public	signature:(void)
CCFiniteTimeAction::m_fDuration	actions/CCAction.h	/^    float m_fDuration;$/;"	m	class:CCFiniteTimeAction	access:protected
CCFiniteTimeAction::reverse	actions/CCAction.cpp	/^CCFiniteTimeAction *CCFiniteTimeAction::reverse()$/;"	f	class:CCFiniteTimeAction	signature:()
CCFiniteTimeAction::reverse	actions/CCAction.h	/^    virtual CCFiniteTimeAction* reverse(void);$/;"	p	class:CCFiniteTimeAction	access:public	signature:(void)
CCFiniteTimeAction::setDuration	actions/CCAction.h	/^    inline void setDuration(float duration) { m_fDuration = duration; }$/;"	f	class:CCFiniteTimeAction	access:public	signature:(float duration)
CCFiniteTimeAction::~CCFiniteTimeAction	actions/CCAction.h	/^    virtual ~CCFiniteTimeAction(){}$/;"	f	class:CCFiniteTimeAction	access:public	signature:()
CCFlipX	actions/CCActionInstant.h	/^    CCFlipX()$/;"	f	class:CCFlipX	access:public	signature:()
CCFlipX	actions/CCActionInstant.h	/^class CC_DLL CCFlipX : public CCActionInstant$/;"	c	inherits:CCActionInstant
CCFlipX3D	actions/CCActionGrid3D.h	/^class CC_DLL CCFlipX3D : public CCGrid3DAction$/;"	c	inherits:CCGrid3DAction
CCFlipX3D::copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCFlipX3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCFlipX3D	signature:(CCZone *pZone)
CCFlipX3D::copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCFlipX3D	access:public	signature:(CCZone* pZone)
CCFlipX3D::create	actions/CCActionGrid3D.cpp	/^CCFlipX3D* CCFlipX3D::create(float duration)$/;"	f	class:CCFlipX3D	signature:(float duration)
CCFlipX3D::create	actions/CCActionGrid3D.h	/^    static CCFlipX3D* create(float duration);$/;"	p	class:CCFlipX3D	access:public	signature:(float duration)
CCFlipX3D::initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCFlipX3D::initWithDuration(float duration)$/;"	f	class:CCFlipX3D	signature:(float duration)
CCFlipX3D::initWithDuration	actions/CCActionGrid3D.h	/^    virtual bool initWithDuration(float duration);$/;"	p	class:CCFlipX3D	access:public	signature:(float duration)
CCFlipX3D::initWithSize	actions/CCActionGrid3D.cpp	/^bool CCFlipX3D::initWithSize(const CCSize& gridSize, float duration)$/;"	f	class:CCFlipX3D	signature:(const CCSize& gridSize, float duration)
CCFlipX3D::initWithSize	actions/CCActionGrid3D.h	/^    virtual bool initWithSize(const CCSize& gridSize, float duration);$/;"	p	class:CCFlipX3D	access:public	signature:(const CCSize& gridSize, float duration)
CCFlipX3D::update	actions/CCActionGrid3D.cpp	/^void CCFlipX3D::update(float time)$/;"	f	class:CCFlipX3D	signature:(float time)
CCFlipX3D::update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCFlipX3D	access:public	signature:(float time)
CCFlipX::CCFlipX	actions/CCActionInstant.h	/^    CCFlipX()$/;"	f	class:CCFlipX	access:public	signature:()
CCFlipX::copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCFlipX::copyWithZone(CCZone *pZone) {$/;"	f	class:CCFlipX	signature:(CCZone *pZone)
CCFlipX::copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCFlipX	access:public	signature:(CCZone *pZone)
CCFlipX::create	actions/CCActionInstant.cpp	/^CCFlipX *CCFlipX::create(bool x)$/;"	f	class:CCFlipX	signature:(bool x)
CCFlipX::create	actions/CCActionInstant.h	/^    static CCFlipX * create(bool x);$/;"	p	class:CCFlipX	access:public	signature:(bool x)
CCFlipX::initWithFlipX	actions/CCActionInstant.cpp	/^bool CCFlipX::initWithFlipX(bool x) {$/;"	f	class:CCFlipX	signature:(bool x)
CCFlipX::initWithFlipX	actions/CCActionInstant.h	/^    bool initWithFlipX(bool x);$/;"	p	class:CCFlipX	access:public	signature:(bool x)
CCFlipX::m_bFlipX	actions/CCActionInstant.h	/^    bool    m_bFlipX;$/;"	m	class:CCFlipX	access:protected
CCFlipX::reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction* CCFlipX::reverse() {$/;"	f	class:CCFlipX	signature:()
CCFlipX::reverse	actions/CCActionInstant.h	/^    virtual CCFiniteTimeAction * reverse(void);$/;"	p	class:CCFlipX	access:public	signature:(void)
CCFlipX::update	actions/CCActionInstant.cpp	/^void CCFlipX::update(float time) {$/;"	f	class:CCFlipX	signature:(float time)
CCFlipX::update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCFlipX	access:public	signature:(float time)
CCFlipX::~CCFlipX	actions/CCActionInstant.h	/^    virtual ~CCFlipX(){}$/;"	f	class:CCFlipX	access:public	signature:()
CCFlipY	actions/CCActionInstant.h	/^    CCFlipY()$/;"	f	class:CCFlipY	access:public	signature:()
CCFlipY	actions/CCActionInstant.h	/^class CC_DLL CCFlipY : public CCActionInstant$/;"	c	inherits:CCActionInstant
CCFlipY3D	actions/CCActionGrid3D.h	/^class CC_DLL CCFlipY3D : public CCFlipX3D$/;"	c	inherits:CCFlipX3D
CCFlipY3D::copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCFlipY3D::copyWithZone(CCZone* pZone)$/;"	f	class:CCFlipY3D	signature:(CCZone* pZone)
CCFlipY3D::copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCFlipY3D	access:public	signature:(CCZone* pZone)
CCFlipY3D::create	actions/CCActionGrid3D.cpp	/^CCFlipY3D* CCFlipY3D::create(float duration)$/;"	f	class:CCFlipY3D	signature:(float duration)
CCFlipY3D::create	actions/CCActionGrid3D.h	/^    static CCFlipY3D* create(float duration);$/;"	p	class:CCFlipY3D	access:public	signature:(float duration)
CCFlipY3D::update	actions/CCActionGrid3D.cpp	/^void CCFlipY3D::update(float time)$/;"	f	class:CCFlipY3D	signature:(float time)
CCFlipY3D::update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCFlipY3D	access:public	signature:(float time)
CCFlipY::CCFlipY	actions/CCActionInstant.h	/^    CCFlipY()$/;"	f	class:CCFlipY	access:public	signature:()
CCFlipY::copyWithZone	actions/CCActionInstant.cpp	/^CCObject* CCFlipY::copyWithZone(CCZone *pZone) {$/;"	f	class:CCFlipY	signature:(CCZone *pZone)
CCFlipY::copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCFlipY	access:public	signature:(CCZone *pZone)
CCFlipY::create	actions/CCActionInstant.cpp	/^CCFlipY * CCFlipY::create(bool y)$/;"	f	class:CCFlipY	signature:(bool y)
CCFlipY::create	actions/CCActionInstant.h	/^    static CCFlipY * create(bool y);$/;"	p	class:CCFlipY	access:public	signature:(bool y)
CCFlipY::initWithFlipY	actions/CCActionInstant.cpp	/^bool CCFlipY::initWithFlipY(bool y) {$/;"	f	class:CCFlipY	signature:(bool y)
CCFlipY::initWithFlipY	actions/CCActionInstant.h	/^    bool initWithFlipY(bool y);$/;"	p	class:CCFlipY	access:public	signature:(bool y)
CCFlipY::m_bFlipY	actions/CCActionInstant.h	/^    bool    m_bFlipY;$/;"	m	class:CCFlipY	access:protected
CCFlipY::reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction* CCFlipY::reverse() {$/;"	f	class:CCFlipY	signature:()
CCFlipY::reverse	actions/CCActionInstant.h	/^    virtual CCFiniteTimeAction * reverse(void);$/;"	p	class:CCFlipY	access:public	signature:(void)
CCFlipY::update	actions/CCActionInstant.cpp	/^void CCFlipY::update(float time) {$/;"	f	class:CCFlipY	signature:(float time)
CCFlipY::update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCFlipY	access:public	signature:(float time)
CCFlipY::~CCFlipY	actions/CCActionInstant.h	/^    virtual ~CCFlipY(){}$/;"	f	class:CCFlipY	access:public	signature:()
CCFloat	cocoa/CCFloat.h	/^    CCFloat(float v)$/;"	f	class:CCFloat	access:public	signature:(float v)
CCFloat	cocoa/CCFloat.h	/^class CC_DLL CCFloat : public CCObject$/;"	c	inherits:CCObject
CCFloat::CCFloat	cocoa/CCFloat.h	/^    CCFloat(float v)$/;"	f	class:CCFloat	access:public	signature:(float v)
CCFloat::create	cocoa/CCFloat.h	/^    static CCFloat* create(float v)$/;"	f	class:CCFloat	access:public	signature:(float v)
CCFloat::getValue	cocoa/CCFloat.h	/^    float getValue() const {return m_fValue;}$/;"	f	class:CCFloat	access:public	signature:() const
CCFloat::m_fValue	cocoa/CCFloat.h	/^    float m_fValue;$/;"	m	class:CCFloat	access:private
CCFollow	actions/CCAction.h	/^    CCFollow()$/;"	f	class:CCFollow	access:public	signature:()
CCFollow	actions/CCAction.h	/^class CC_DLL CCFollow : public CCAction$/;"	c	inherits:CCAction
CCFollow::CCFollow	actions/CCAction.h	/^    CCFollow()$/;"	f	class:CCFollow	access:public	signature:()
CCFollow::copyWithZone	actions/CCAction.cpp	/^CCObject *CCFollow::copyWithZone(CCZone *pZone)$/;"	f	class:CCFollow	signature:(CCZone *pZone)
CCFollow::copyWithZone	actions/CCAction.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCFollow	access:public	signature:(CCZone *pZone)
CCFollow::create	actions/CCAction.cpp	/^CCFollow* CCFollow::create(CCNode *pFollowedNode, const CCRect& rect\/* = CCRectZero*\/)$/;"	f	class:CCFollow	signature:(CCNode *pFollowedNode, const CCRect& rect )
CCFollow::create	actions/CCAction.h	/^    static CCFollow* create(CCNode *pFollowedNode, const CCRect& rect = CCRectZero);$/;"	p	class:CCFollow	access:public	signature:(CCNode *pFollowedNode, const CCRect& rect = CCRectZero)
CCFollow::initWithTarget	actions/CCAction.cpp	/^bool CCFollow::initWithTarget(CCNode *pFollowedNode, const CCRect& rect\/* = CCRectZero*\/)$/;"	f	class:CCFollow	signature:(CCNode *pFollowedNode, const CCRect& rect )
CCFollow::initWithTarget	actions/CCAction.h	/^    bool initWithTarget(CCNode *pFollowedNode, const CCRect& rect = CCRectZero);$/;"	p	class:CCFollow	access:public	signature:(CCNode *pFollowedNode, const CCRect& rect = CCRectZero)
CCFollow::isBoundarySet	actions/CCAction.h	/^    inline bool isBoundarySet(void) { return m_bBoundarySet; }$/;"	f	class:CCFollow	access:public	signature:(void)
CCFollow::isDone	actions/CCAction.cpp	/^bool CCFollow::isDone()$/;"	f	class:CCFollow	signature:()
CCFollow::isDone	actions/CCAction.h	/^    virtual bool isDone(void);$/;"	p	class:CCFollow	access:public	signature:(void)
CCFollow::m_bBoundaryFullyCovered	actions/CCAction.h	/^    bool m_bBoundaryFullyCovered;$/;"	m	class:CCFollow	access:protected
CCFollow::m_bBoundarySet	actions/CCAction.h	/^    bool m_bBoundarySet;$/;"	m	class:CCFollow	access:protected
CCFollow::m_fBottomBoundary	actions/CCAction.h	/^    float m_fBottomBoundary;$/;"	m	class:CCFollow	access:protected
CCFollow::m_fLeftBoundary	actions/CCAction.h	/^    float m_fLeftBoundary;$/;"	m	class:CCFollow	access:protected
CCFollow::m_fRightBoundary	actions/CCAction.h	/^    float m_fRightBoundary;$/;"	m	class:CCFollow	access:protected
CCFollow::m_fTopBoundary	actions/CCAction.h	/^    float m_fTopBoundary;$/;"	m	class:CCFollow	access:protected
CCFollow::m_obFullScreenSize	actions/CCAction.h	/^    CCPoint m_obFullScreenSize;$/;"	m	class:CCFollow	access:protected
CCFollow::m_obHalfScreenSize	actions/CCAction.h	/^    CCPoint m_obHalfScreenSize;$/;"	m	class:CCFollow	access:protected
CCFollow::m_pobFollowedNode	actions/CCAction.h	/^    CCNode *m_pobFollowedNode;$/;"	m	class:CCFollow	access:protected
CCFollow::setBoudarySet	actions/CCAction.h	/^    inline void setBoudarySet(bool bValue) { m_bBoundarySet = bValue; }$/;"	f	class:CCFollow	access:public	signature:(bool bValue)
CCFollow::step	actions/CCAction.cpp	/^void CCFollow::step(float dt)$/;"	f	class:CCFollow	signature:(float dt)
CCFollow::step	actions/CCAction.h	/^    virtual void step(float dt);$/;"	p	class:CCFollow	access:public	signature:(float dt)
CCFollow::stop	actions/CCAction.cpp	/^void CCFollow::stop()$/;"	f	class:CCFollow	signature:()
CCFollow::stop	actions/CCAction.h	/^    virtual void stop(void);$/;"	p	class:CCFollow	access:public	signature:(void)
CCFollow::~CCFollow	actions/CCAction.cpp	/^CCFollow::~CCFollow()$/;"	f	class:CCFollow	signature:()
CCFollow::~CCFollow	actions/CCAction.h	/^    virtual ~CCFollow(void);$/;"	p	class:CCFollow	access:public	signature:(void)
CCGLProgram	shaders/CCGLProgram.cpp	/^CCGLProgram::CCGLProgram()$/;"	f	class:CCGLProgram	signature:()
CCGLProgram	shaders/CCGLProgram.h	/^    CCGLProgram();$/;"	p	class:CCGLProgram	access:public	signature:()
CCGLProgram	shaders/CCGLProgram.h	/^class CC_DLL CCGLProgram : public CCObject$/;"	c	inherits:CCObject
CCGLProgram::CCGLProgram	shaders/CCGLProgram.cpp	/^CCGLProgram::CCGLProgram()$/;"	f	class:CCGLProgram	signature:()
CCGLProgram::CCGLProgram	shaders/CCGLProgram.h	/^    CCGLProgram();$/;"	p	class:CCGLProgram	access:public	signature:()
CCGLProgram::addAttribute	shaders/CCGLProgram.cpp	/^void CCGLProgram::addAttribute(const char* attributeName, GLuint index)$/;"	f	class:CCGLProgram	signature:(const char* attributeName, GLuint index)
CCGLProgram::addAttribute	shaders/CCGLProgram.h	/^    void addAttribute(const char* attributeName, GLuint index);$/;"	p	class:CCGLProgram	access:public	signature:(const char* attributeName, GLuint index)
CCGLProgram::compileShader	shaders/CCGLProgram.cpp	/^bool CCGLProgram::compileShader(GLuint * shader, GLenum type, const GLchar* source)$/;"	f	class:CCGLProgram	signature:(GLuint * shader, GLenum type, const GLchar* source)
CCGLProgram::compileShader	shaders/CCGLProgram.h	/^    bool compileShader(GLuint * shader, GLenum type, const GLchar* source);$/;"	p	class:CCGLProgram	access:private	signature:(GLuint * shader, GLenum type, const GLchar* source)
CCGLProgram::description	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::description()$/;"	f	class:CCGLProgram	signature:()
CCGLProgram::description	shaders/CCGLProgram.h	/^    const char* description();$/;"	p	class:CCGLProgram	access:private	signature:()
CCGLProgram::fragmentShaderLog	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::fragmentShaderLog()$/;"	f	class:CCGLProgram	signature:()
CCGLProgram::fragmentShaderLog	shaders/CCGLProgram.h	/^    const char* fragmentShaderLog();$/;"	p	class:CCGLProgram	access:public	signature:()
CCGLProgram::getProgram	shaders/CCGLProgram.h	/^    inline const GLuint getProgram() { return m_uProgram; }$/;"	f	class:CCGLProgram	access:public	signature:()
CCGLProgram::getUniformLocationForName	shaders/CCGLProgram.cpp	/^GLint CCGLProgram::getUniformLocationForName(const char* name)$/;"	f	class:CCGLProgram	signature:(const char* name)
CCGLProgram::getUniformLocationForName	shaders/CCGLProgram.h	/^    GLint getUniformLocationForName(const char* name);$/;"	p	class:CCGLProgram	access:public	signature:(const char* name)
CCGLProgram::initWithVertexShaderByteArray	shaders/CCGLProgram.cpp	/^bool CCGLProgram::initWithVertexShaderByteArray(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)$/;"	f	class:CCGLProgram	signature:(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)
CCGLProgram::initWithVertexShaderByteArray	shaders/CCGLProgram.h	/^    bool initWithVertexShaderByteArray(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray);$/;"	p	class:CCGLProgram	access:public	signature:(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)
CCGLProgram::initWithVertexShaderFilename	shaders/CCGLProgram.cpp	/^bool CCGLProgram::initWithVertexShaderFilename(const char* vShaderFilename, const char* fShaderFilename)$/;"	f	class:CCGLProgram	signature:(const char* vShaderFilename, const char* fShaderFilename)
CCGLProgram::initWithVertexShaderFilename	shaders/CCGLProgram.h	/^    bool initWithVertexShaderFilename(const char* vShaderFilename, const char* fShaderFilename);$/;"	p	class:CCGLProgram	access:public	signature:(const char* vShaderFilename, const char* fShaderFilename)
CCGLProgram::link	shaders/CCGLProgram.cpp	/^bool CCGLProgram::link()$/;"	f	class:CCGLProgram	signature:()
CCGLProgram::link	shaders/CCGLProgram.h	/^    bool link();$/;"	p	class:CCGLProgram	access:public	signature:()
CCGLProgram::logForOpenGLObject	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::logForOpenGLObject(GLuint object, GLInfoFunction infoFunc, GLLogFunction logFunc)$/;"	f	class:CCGLProgram	signature:(GLuint object, GLInfoFunction infoFunc, GLLogFunction logFunc)
CCGLProgram::logForOpenGLObject	shaders/CCGLProgram.h	/^    const char* logForOpenGLObject(GLuint object, GLInfoFunction infoFunc, GLLogFunction logFunc);$/;"	p	class:CCGLProgram	access:private	signature:(GLuint object, GLInfoFunction infoFunc, GLLogFunction logFunc)
CCGLProgram::m_bUsesTime	shaders/CCGLProgram.h	/^    bool              m_bUsesTime;$/;"	m	class:CCGLProgram	access:private
CCGLProgram::m_pHashForUniforms	shaders/CCGLProgram.h	/^    struct _hashUniformEntry* m_pHashForUniforms;$/;"	m	class:CCGLProgram	typeref:struct:CCGLProgram::_hashUniformEntry	access:private
CCGLProgram::m_uFragShader	shaders/CCGLProgram.h	/^    GLuint            m_uFragShader;$/;"	m	class:CCGLProgram	access:private
CCGLProgram::m_uProgram	shaders/CCGLProgram.h	/^    GLuint            m_uProgram;$/;"	m	class:CCGLProgram	access:private
CCGLProgram::m_uUniforms	shaders/CCGLProgram.h	/^    GLint             m_uUniforms[kCCUniform_MAX];$/;"	m	class:CCGLProgram	access:private
CCGLProgram::m_uVertShader	shaders/CCGLProgram.h	/^    GLuint            m_uVertShader;$/;"	m	class:CCGLProgram	access:private
CCGLProgram::programLog	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::programLog()$/;"	f	class:CCGLProgram	signature:()
CCGLProgram::programLog	shaders/CCGLProgram.h	/^    const char* programLog();$/;"	p	class:CCGLProgram	access:public	signature:()
CCGLProgram::reset	shaders/CCGLProgram.cpp	/^void CCGLProgram::reset()$/;"	f	class:CCGLProgram	signature:()
CCGLProgram::reset	shaders/CCGLProgram.h	/^    void reset();$/;"	p	class:CCGLProgram	access:public	signature:()
CCGLProgram::setUniformLocationWith1f	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith1f(GLint location, GLfloat f1)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat f1)
CCGLProgram::setUniformLocationWith1f	shaders/CCGLProgram.h	/^    void setUniformLocationWith1f(GLint location, GLfloat f1);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat f1)
CCGLProgram::setUniformLocationWith1i	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith1i(GLint location, GLint i1)$/;"	f	class:CCGLProgram	signature:(GLint location, GLint i1)
CCGLProgram::setUniformLocationWith1i	shaders/CCGLProgram.h	/^    void setUniformLocationWith1i(GLint location, GLint i1);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLint i1)
CCGLProgram::setUniformLocationWith2f	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith2f(GLint location, GLfloat f1, GLfloat f2)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat f1, GLfloat f2)
CCGLProgram::setUniformLocationWith2f	shaders/CCGLProgram.h	/^    void setUniformLocationWith2f(GLint location, GLfloat f1, GLfloat f2);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat f1, GLfloat f2)
CCGLProgram::setUniformLocationWith2fv	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith2fv(GLint location, GLfloat* floats, unsigned int numberOfArrays)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat* floats, unsigned int numberOfArrays)
CCGLProgram::setUniformLocationWith2fv	shaders/CCGLProgram.h	/^    void setUniformLocationWith2fv(GLint location, GLfloat* floats, unsigned int numberOfArrays);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat* floats, unsigned int numberOfArrays)
CCGLProgram::setUniformLocationWith3f	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith3f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)
CCGLProgram::setUniformLocationWith3f	shaders/CCGLProgram.h	/^    void setUniformLocationWith3f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)
CCGLProgram::setUniformLocationWith3fv	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith3fv(GLint location, GLfloat* floats, unsigned int numberOfArrays)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat* floats, unsigned int numberOfArrays)
CCGLProgram::setUniformLocationWith3fv	shaders/CCGLProgram.h	/^    void setUniformLocationWith3fv(GLint location, GLfloat* floats, unsigned int numberOfArrays);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat* floats, unsigned int numberOfArrays)
CCGLProgram::setUniformLocationWith4f	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith4f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)
CCGLProgram::setUniformLocationWith4f	shaders/CCGLProgram.h	/^    void setUniformLocationWith4f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)
CCGLProgram::setUniformLocationWith4fv	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith4fv(GLint location, GLfloat* floats, unsigned int numberOfArrays)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat* floats, unsigned int numberOfArrays)
CCGLProgram::setUniformLocationWith4fv	shaders/CCGLProgram.h	/^    void setUniformLocationWith4fv(GLint location, GLfloat* floats, unsigned int numberOfArrays);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat* floats, unsigned int numberOfArrays)
CCGLProgram::setUniformLocationWithMatrix4fv	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWithMatrix4fv(GLint location, GLfloat* matrixArray, unsigned int numberOfMatrices)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat* matrixArray, unsigned int numberOfMatrices)
CCGLProgram::setUniformLocationWithMatrix4fv	shaders/CCGLProgram.h	/^    void setUniformLocationWithMatrix4fv(GLint location, GLfloat* matrixArray, unsigned int numberOfMatrices);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat* matrixArray, unsigned int numberOfMatrices)
CCGLProgram::setUniformsForBuiltins	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformsForBuiltins()$/;"	f	class:CCGLProgram	signature:()
CCGLProgram::setUniformsForBuiltins	shaders/CCGLProgram.h	/^    void setUniformsForBuiltins();$/;"	p	class:CCGLProgram	access:public	signature:()
CCGLProgram::updateUniformLocation	shaders/CCGLProgram.cpp	/^bool CCGLProgram::updateUniformLocation(GLint location, GLvoid* data, unsigned int bytes)$/;"	f	class:CCGLProgram	signature:(GLint location, GLvoid* data, unsigned int bytes)
CCGLProgram::updateUniformLocation	shaders/CCGLProgram.h	/^    bool updateUniformLocation(GLint location, GLvoid* data, unsigned int bytes);$/;"	p	class:CCGLProgram	access:private	signature:(GLint location, GLvoid* data, unsigned int bytes)
CCGLProgram::updateUniforms	shaders/CCGLProgram.cpp	/^void CCGLProgram::updateUniforms()$/;"	f	class:CCGLProgram	signature:()
CCGLProgram::updateUniforms	shaders/CCGLProgram.h	/^    void updateUniforms();$/;"	p	class:CCGLProgram	access:public	signature:()
CCGLProgram::use	shaders/CCGLProgram.cpp	/^void CCGLProgram::use()$/;"	f	class:CCGLProgram	signature:()
CCGLProgram::use	shaders/CCGLProgram.h	/^    void use();$/;"	p	class:CCGLProgram	access:public	signature:()
CCGLProgram::vertexShaderLog	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::vertexShaderLog()$/;"	f	class:CCGLProgram	signature:()
CCGLProgram::vertexShaderLog	shaders/CCGLProgram.h	/^    const char* vertexShaderLog();$/;"	p	class:CCGLProgram	access:public	signature:()
CCGLProgram::~CCGLProgram	shaders/CCGLProgram.cpp	/^CCGLProgram::~CCGLProgram()$/;"	f	class:CCGLProgram	signature:()
CCGLProgram::~CCGLProgram	shaders/CCGLProgram.h	/^    virtual ~CCGLProgram();$/;"	p	class:CCGLProgram	access:public	signature:()
CCGrabber	effects/CCGrabber.cpp	/^CCGrabber::CCGrabber(void)$/;"	f	class:CCGrabber	signature:(void)
CCGrabber	effects/CCGrabber.h	/^    CCGrabber(void);$/;"	p	class:CCGrabber	access:public	signature:(void)
CCGrabber	effects/CCGrabber.h	/^class CCGrabber : public CCObject$/;"	c	inherits:CCObject
CCGrabber::CCGrabber	effects/CCGrabber.cpp	/^CCGrabber::CCGrabber(void)$/;"	f	class:CCGrabber	signature:(void)
CCGrabber::CCGrabber	effects/CCGrabber.h	/^    CCGrabber(void);$/;"	p	class:CCGrabber	access:public	signature:(void)
CCGrabber::afterRender	effects/CCGrabber.cpp	/^void CCGrabber::afterRender(cocos2d::CCTexture2D *pTexture)$/;"	f	class:CCGrabber	signature:(cocos2d::CCTexture2D *pTexture)
CCGrabber::afterRender	effects/CCGrabber.h	/^    void afterRender(CCTexture2D *pTexture);$/;"	p	class:CCGrabber	access:public	signature:(CCTexture2D *pTexture)
CCGrabber::beforeRender	effects/CCGrabber.cpp	/^void CCGrabber::beforeRender(CCTexture2D *pTexture)$/;"	f	class:CCGrabber	signature:(CCTexture2D *pTexture)
CCGrabber::beforeRender	effects/CCGrabber.h	/^    void beforeRender(CCTexture2D *pTexture);$/;"	p	class:CCGrabber	access:public	signature:(CCTexture2D *pTexture)
CCGrabber::grab	effects/CCGrabber.cpp	/^void CCGrabber::grab(CCTexture2D *pTexture)$/;"	f	class:CCGrabber	signature:(CCTexture2D *pTexture)
CCGrabber::grab	effects/CCGrabber.h	/^    void grab(CCTexture2D *pTexture);$/;"	p	class:CCGrabber	access:public	signature:(CCTexture2D *pTexture)
CCGrabber::m_FBO	effects/CCGrabber.h	/^    GLuint m_FBO;$/;"	m	class:CCGrabber	access:protected
CCGrabber::m_oldClearColor	effects/CCGrabber.h	/^    GLfloat    m_oldClearColor[4];$/;"	m	class:CCGrabber	access:protected
CCGrabber::m_oldFBO	effects/CCGrabber.h	/^    GLint m_oldFBO;$/;"	m	class:CCGrabber	access:protected
CCGrabber::~CCGrabber	effects/CCGrabber.cpp	/^CCGrabber::~CCGrabber()$/;"	f	class:CCGrabber	signature:()
CCGrabber::~CCGrabber	effects/CCGrabber.h	/^    ~CCGrabber(void);$/;"	p	class:CCGrabber	access:public	signature:(void)
CCGrid3D	effects/CCGrid.cpp	/^CCGrid3D::CCGrid3D()$/;"	f	class:CCGrid3D	signature:()
CCGrid3D	effects/CCGrid.h	/^    CCGrid3D();$/;"	p	class:CCGrid3D	access:public	signature:()
CCGrid3D	effects/CCGrid.h	/^class CC_DLL CCGrid3D : public CCGridBase$/;"	c	inherits:CCGridBase
CCGrid3D::CCGrid3D	effects/CCGrid.cpp	/^CCGrid3D::CCGrid3D()$/;"	f	class:CCGrid3D	signature:()
CCGrid3D::CCGrid3D	effects/CCGrid.h	/^    CCGrid3D();$/;"	p	class:CCGrid3D	access:public	signature:()
CCGrid3D::blit	effects/CCGrid.cpp	/^void CCGrid3D::blit(void)$/;"	f	class:CCGrid3D	signature:(void)
CCGrid3D::blit	effects/CCGrid.h	/^    virtual void blit(void);$/;"	p	class:CCGrid3D	access:public	signature:(void)
CCGrid3D::calculateVertexPoints	effects/CCGrid.cpp	/^void CCGrid3D::calculateVertexPoints(void)$/;"	f	class:CCGrid3D	signature:(void)
CCGrid3D::calculateVertexPoints	effects/CCGrid.h	/^    virtual void calculateVertexPoints(void);$/;"	p	class:CCGrid3D	access:public	signature:(void)
CCGrid3D::create	effects/CCGrid.cpp	/^CCGrid3D* CCGrid3D::create(const CCSize& gridSize)$/;"	f	class:CCGrid3D	signature:(const CCSize& gridSize)
CCGrid3D::create	effects/CCGrid.cpp	/^CCGrid3D* CCGrid3D::create(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)$/;"	f	class:CCGrid3D	signature:(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)
CCGrid3D::create	effects/CCGrid.h	/^    static CCGrid3D* create(const CCSize& gridSize);$/;"	p	class:CCGrid3D	access:public	signature:(const CCSize& gridSize)
CCGrid3D::create	effects/CCGrid.h	/^    static CCGrid3D* create(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped);$/;"	p	class:CCGrid3D	access:public	signature:(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)
CCGrid3D::m_pIndices	effects/CCGrid.h	/^    GLushort *m_pIndices;$/;"	m	class:CCGrid3D	access:protected
CCGrid3D::m_pOriginalVertices	effects/CCGrid.h	/^    GLvoid *m_pOriginalVertices;$/;"	m	class:CCGrid3D	access:protected
CCGrid3D::m_pTexCoordinates	effects/CCGrid.h	/^    GLvoid *m_pTexCoordinates;$/;"	m	class:CCGrid3D	access:protected
CCGrid3D::m_pVertices	effects/CCGrid.h	/^    GLvoid *m_pVertices;$/;"	m	class:CCGrid3D	access:protected
CCGrid3D::originalVertex	effects/CCGrid.cpp	/^ccVertex3F CCGrid3D::originalVertex(const CCPoint& pos)$/;"	f	class:CCGrid3D	signature:(const CCPoint& pos)
CCGrid3D::originalVertex	effects/CCGrid.h	/^    ccVertex3F originalVertex(const CCPoint& pos);$/;"	p	class:CCGrid3D	access:public	signature:(const CCPoint& pos)
CCGrid3D::reuse	effects/CCGrid.cpp	/^void CCGrid3D::reuse(void)$/;"	f	class:CCGrid3D	signature:(void)
CCGrid3D::reuse	effects/CCGrid.h	/^    virtual void reuse(void);$/;"	p	class:CCGrid3D	access:public	signature:(void)
CCGrid3D::setVertex	effects/CCGrid.cpp	/^void CCGrid3D::setVertex(const CCPoint& pos, const ccVertex3F& vertex)$/;"	f	class:CCGrid3D	signature:(const CCPoint& pos, const ccVertex3F& vertex)
CCGrid3D::setVertex	effects/CCGrid.h	/^    void setVertex(const CCPoint& pos, const ccVertex3F& vertex);$/;"	p	class:CCGrid3D	access:public	signature:(const CCPoint& pos, const ccVertex3F& vertex)
CCGrid3D::vertex	effects/CCGrid.cpp	/^ccVertex3F CCGrid3D::vertex(const CCPoint& pos)$/;"	f	class:CCGrid3D	signature:(const CCPoint& pos)
CCGrid3D::vertex	effects/CCGrid.h	/^    ccVertex3F vertex(const CCPoint& pos);$/;"	p	class:CCGrid3D	access:public	signature:(const CCPoint& pos)
CCGrid3D::~CCGrid3D	effects/CCGrid.cpp	/^CCGrid3D::~CCGrid3D(void)$/;"	f	class:CCGrid3D	signature:(void)
CCGrid3D::~CCGrid3D	effects/CCGrid.h	/^    ~CCGrid3D(void);$/;"	p	class:CCGrid3D	access:public	signature:(void)
CCGrid3DAction	actions/CCActionGrid.h	/^class CC_DLL CCGrid3DAction : public CCGridAction$/;"	c	inherits:CCGridAction
CCGrid3DAction::create	actions/CCActionGrid.h	/^    static CCGrid3DAction* create(float duration, const CCSize& gridSize);$/;"	p	class:CCGrid3DAction	access:public	signature:(float duration, const CCSize& gridSize)
CCGrid3DAction::getGrid	actions/CCActionGrid.cpp	/^CCGridBase* CCGrid3DAction::getGrid(void)$/;"	f	class:CCGrid3DAction	signature:(void)
CCGrid3DAction::getGrid	actions/CCActionGrid.h	/^    virtual CCGridBase* getGrid(void);$/;"	p	class:CCGrid3DAction	access:public	signature:(void)
CCGrid3DAction::originalVertex	actions/CCActionGrid.cpp	/^ccVertex3F CCGrid3DAction::originalVertex(const CCPoint& position)$/;"	f	class:CCGrid3DAction	signature:(const CCPoint& position)
CCGrid3DAction::originalVertex	actions/CCActionGrid.h	/^    ccVertex3F originalVertex(const CCPoint& position);$/;"	p	class:CCGrid3DAction	access:public	signature:(const CCPoint& position)
CCGrid3DAction::setVertex	actions/CCActionGrid.cpp	/^void CCGrid3DAction::setVertex(const CCPoint& position, const ccVertex3F& vertex)$/;"	f	class:CCGrid3DAction	signature:(const CCPoint& position, const ccVertex3F& vertex)
CCGrid3DAction::setVertex	actions/CCActionGrid.h	/^    void setVertex(const CCPoint& position, const ccVertex3F& vertex);$/;"	p	class:CCGrid3DAction	access:public	signature:(const CCPoint& position, const ccVertex3F& vertex)
CCGrid3DAction::vertex	actions/CCActionGrid.cpp	/^ccVertex3F CCGrid3DAction::vertex(const CCPoint& position)$/;"	f	class:CCGrid3DAction	signature:(const CCPoint& position)
CCGrid3DAction::vertex	actions/CCActionGrid.h	/^    ccVertex3F vertex(const CCPoint& position);$/;"	p	class:CCGrid3DAction	access:public	signature:(const CCPoint& position)
CCGridAction	actions/CCActionGrid.h	/^class CC_DLL CCGridAction : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCGridAction::copyWithZone	actions/CCActionGrid.cpp	/^CCObject* CCGridAction::copyWithZone(CCZone *pZone)$/;"	f	class:CCGridAction	signature:(CCZone *pZone)
CCGridAction::copyWithZone	actions/CCActionGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCGridAction	access:public	signature:(CCZone* pZone)
CCGridAction::create	actions/CCActionGrid.cpp	/^CCGridAction* CCGridAction::create(float duration, const CCSize& gridSize)$/;"	f	class:CCGridAction	signature:(float duration, const CCSize& gridSize)
CCGridAction::create	actions/CCActionGrid.h	/^    static CCGridAction* create(float duration, const CCSize& gridSize);$/;"	p	class:CCGridAction	access:public	signature:(float duration, const CCSize& gridSize)
CCGridAction::getGrid	actions/CCActionGrid.cpp	/^CCGridBase* CCGridAction::getGrid(void)$/;"	f	class:CCGridAction	signature:(void)
CCGridAction::getGrid	actions/CCActionGrid.h	/^    virtual CCGridBase* getGrid(void);$/;"	p	class:CCGridAction	access:public	signature:(void)
CCGridAction::initWithDuration	actions/CCActionGrid.cpp	/^bool CCGridAction::initWithDuration(float duration, const CCSize& gridSize)$/;"	f	class:CCGridAction	signature:(float duration, const CCSize& gridSize)
CCGridAction::initWithDuration	actions/CCActionGrid.h	/^    virtual bool initWithDuration(float duration, const CCSize& gridSize);$/;"	p	class:CCGridAction	access:public	signature:(float duration, const CCSize& gridSize)
CCGridAction::m_sGridSize	actions/CCActionGrid.h	/^    CCSize m_sGridSize;$/;"	m	class:CCGridAction	access:protected
CCGridAction::reverse	actions/CCActionGrid.cpp	/^CCActionInterval* CCGridAction::reverse(void)$/;"	f	class:CCGridAction	signature:(void)
CCGridAction::reverse	actions/CCActionGrid.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCGridAction	access:public	signature:(void)
CCGridAction::startWithTarget	actions/CCActionGrid.cpp	/^void CCGridAction::startWithTarget(CCNode *pTarget)$/;"	f	class:CCGridAction	signature:(CCNode *pTarget)
CCGridAction::startWithTarget	actions/CCActionGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCGridAction	access:public	signature:(CCNode *pTarget)
CCGridBase	effects/CCGrid.h	/^class CC_DLL CCGridBase : public CCObject$/;"	c	inherits:CCObject
CCGridBase::afterDraw	effects/CCGrid.cpp	/^void CCGridBase::afterDraw(cocos2d::CCNode *pTarget)$/;"	f	class:CCGridBase	signature:(cocos2d::CCNode *pTarget)
CCGridBase::afterDraw	effects/CCGrid.h	/^    void afterDraw(CCNode *pTarget);$/;"	p	class:CCGridBase	access:public	signature:(CCNode *pTarget)
CCGridBase::beforeDraw	effects/CCGrid.cpp	/^void CCGridBase::beforeDraw(void)$/;"	f	class:CCGridBase	signature:(void)
CCGridBase::beforeDraw	effects/CCGrid.h	/^    void beforeDraw(void);$/;"	p	class:CCGridBase	access:public	signature:(void)
CCGridBase::blit	effects/CCGrid.cpp	/^void CCGridBase::blit(void)$/;"	f	class:CCGridBase	signature:(void)
CCGridBase::blit	effects/CCGrid.h	/^    virtual void blit(void);$/;"	p	class:CCGridBase	access:public	signature:(void)
CCGridBase::calculateVertexPoints	effects/CCGrid.cpp	/^void CCGridBase::calculateVertexPoints(void)$/;"	f	class:CCGridBase	signature:(void)
CCGridBase::calculateVertexPoints	effects/CCGrid.h	/^    virtual void calculateVertexPoints(void);$/;"	p	class:CCGridBase	access:public	signature:(void)
CCGridBase::create	effects/CCGrid.cpp	/^CCGridBase* CCGridBase::create(const CCSize& gridSize)$/;"	f	class:CCGridBase	signature:(const CCSize& gridSize)
CCGridBase::create	effects/CCGrid.cpp	/^CCGridBase* CCGridBase::create(const CCSize& gridSize, CCTexture2D *texture, bool flipped)$/;"	f	class:CCGridBase	signature:(const CCSize& gridSize, CCTexture2D *texture, bool flipped)
CCGridBase::create	effects/CCGrid.h	/^    static CCGridBase* create(const CCSize& gridSize);$/;"	p	class:CCGridBase	access:public	signature:(const CCSize& gridSize)
CCGridBase::create	effects/CCGrid.h	/^    static CCGridBase* create(const CCSize& gridSize, CCTexture2D *texture, bool flipped);$/;"	p	class:CCGridBase	access:public	signature:(const CCSize& gridSize, CCTexture2D *texture, bool flipped)
CCGridBase::getGridSize	effects/CCGrid.h	/^    inline const CCSize& getGridSize(void) { return m_sGridSize; }$/;"	f	class:CCGridBase	access:public	signature:(void)
CCGridBase::getReuseGrid	effects/CCGrid.h	/^    inline int getReuseGrid(void) { return m_nReuseGrid; }$/;"	f	class:CCGridBase	access:public	signature:(void)
CCGridBase::getStep	effects/CCGrid.h	/^    inline const CCPoint& getStep(void) { return m_obStep; }$/;"	f	class:CCGridBase	access:public	signature:(void)
CCGridBase::initWithSize	effects/CCGrid.cpp	/^bool CCGridBase::initWithSize(const CCSize& gridSize)$/;"	f	class:CCGridBase	signature:(const CCSize& gridSize)
CCGridBase::initWithSize	effects/CCGrid.cpp	/^bool CCGridBase::initWithSize(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)$/;"	f	class:CCGridBase	signature:(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)
CCGridBase::initWithSize	effects/CCGrid.h	/^    bool initWithSize(const CCSize& gridSize);$/;"	p	class:CCGridBase	access:public	signature:(const CCSize& gridSize)
CCGridBase::initWithSize	effects/CCGrid.h	/^    bool initWithSize(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped);$/;"	p	class:CCGridBase	access:public	signature:(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)
CCGridBase::isActive	effects/CCGrid.h	/^    inline bool isActive(void) { return m_bActive; }$/;"	f	class:CCGridBase	access:public	signature:(void)
CCGridBase::isTextureFlipped	effects/CCGrid.h	/^    inline bool isTextureFlipped(void) { return m_bIsTextureFlipped; }$/;"	f	class:CCGridBase	access:public	signature:(void)
CCGridBase::m_bActive	effects/CCGrid.h	/^    bool m_bActive;$/;"	m	class:CCGridBase	access:protected
CCGridBase::m_bIsTextureFlipped	effects/CCGrid.h	/^    bool m_bIsTextureFlipped;$/;"	m	class:CCGridBase	access:protected
CCGridBase::m_directorProjection	effects/CCGrid.h	/^    ccDirectorProjection m_directorProjection;$/;"	m	class:CCGridBase	access:protected
CCGridBase::m_nReuseGrid	effects/CCGrid.h	/^    int  m_nReuseGrid;$/;"	m	class:CCGridBase	access:protected
CCGridBase::m_obStep	effects/CCGrid.h	/^    CCPoint m_obStep;$/;"	m	class:CCGridBase	access:protected
CCGridBase::m_pGrabber	effects/CCGrid.h	/^    CCGrabber *m_pGrabber;$/;"	m	class:CCGridBase	access:protected
CCGridBase::m_pShaderProgram	effects/CCGrid.h	/^    CCGLProgram* m_pShaderProgram;$/;"	m	class:CCGridBase	access:protected
CCGridBase::m_pTexture	effects/CCGrid.h	/^    CCTexture2D *m_pTexture;$/;"	m	class:CCGridBase	access:protected
CCGridBase::m_sGridSize	effects/CCGrid.h	/^    CCSize m_sGridSize;$/;"	m	class:CCGridBase	access:protected
CCGridBase::reuse	effects/CCGrid.cpp	/^void CCGridBase::reuse(void)$/;"	f	class:CCGridBase	signature:(void)
CCGridBase::reuse	effects/CCGrid.h	/^    virtual void reuse(void);$/;"	p	class:CCGridBase	access:public	signature:(void)
CCGridBase::set2DProjection	effects/CCGrid.cpp	/^void CCGridBase::set2DProjection()$/;"	f	class:CCGridBase	signature:()
CCGridBase::set2DProjection	effects/CCGrid.h	/^    void set2DProjection(void);$/;"	p	class:CCGridBase	access:public	signature:(void)
CCGridBase::setActive	effects/CCGrid.cpp	/^void CCGridBase::setActive(bool bActive)$/;"	f	class:CCGridBase	signature:(bool bActive)
CCGridBase::setActive	effects/CCGrid.h	/^    void setActive(bool bActive);$/;"	p	class:CCGridBase	access:public	signature:(bool bActive)
CCGridBase::setGridSize	effects/CCGrid.h	/^    inline void setGridSize(const CCSize& gridSize) { m_sGridSize = gridSize; }$/;"	f	class:CCGridBase	access:public	signature:(const CCSize& gridSize)
CCGridBase::setReuseGrid	effects/CCGrid.h	/^    inline void setReuseGrid(int nReuseGrid) { m_nReuseGrid = nReuseGrid; }$/;"	f	class:CCGridBase	access:public	signature:(int nReuseGrid)
CCGridBase::setStep	effects/CCGrid.h	/^    inline void setStep(const CCPoint& step) { m_obStep = step; }$/;"	f	class:CCGridBase	access:public	signature:(const CCPoint& step)
CCGridBase::setTextureFlipped	effects/CCGrid.cpp	/^void CCGridBase::setTextureFlipped(bool bFlipped)$/;"	f	class:CCGridBase	signature:(bool bFlipped)
CCGridBase::setTextureFlipped	effects/CCGrid.h	/^    void setTextureFlipped(bool bFlipped);$/;"	p	class:CCGridBase	access:public	signature:(bool bFlipped)
CCGridBase::~CCGridBase	effects/CCGrid.cpp	/^CCGridBase::~CCGridBase(void)$/;"	f	class:CCGridBase	signature:(void)
CCGridBase::~CCGridBase	effects/CCGrid.h	/^    virtual ~CCGridBase(void);$/;"	p	class:CCGridBase	access:public	signature:(void)
CCHide	actions/CCActionInstant.h	/^    CCHide(){}$/;"	f	class:CCHide	access:public	signature:()
CCHide	actions/CCActionInstant.h	/^class CC_DLL CCHide : public CCActionInstant$/;"	c	inherits:CCActionInstant
CCHide::CCHide	actions/CCActionInstant.h	/^    CCHide(){}$/;"	f	class:CCHide	access:public	signature:()
CCHide::copyWithZone	actions/CCActionInstant.cpp	/^CCObject* CCHide::copyWithZone(CCZone *pZone) {$/;"	f	class:CCHide	signature:(CCZone *pZone)
CCHide::copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCHide	access:public	signature:(CCZone *pZone)
CCHide::create	actions/CCActionInstant.cpp	/^CCHide * CCHide::create() $/;"	f	class:CCHide	signature:()
CCHide::create	actions/CCActionInstant.h	/^    static CCHide * create();$/;"	p	class:CCHide	access:public	signature:()
CCHide::reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction *CCHide::reverse() {$/;"	f	class:CCHide	signature:()
CCHide::reverse	actions/CCActionInstant.h	/^    virtual CCFiniteTimeAction * reverse(void);$/;"	p	class:CCHide	access:public	signature:(void)
CCHide::update	actions/CCActionInstant.cpp	/^void CCHide::update(float time) {$/;"	f	class:CCHide	signature:(float time)
CCHide::update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCHide	access:public	signature:(float time)
CCHide::~CCHide	actions/CCActionInstant.h	/^    virtual ~CCHide(){}$/;"	f	class:CCHide	access:public	signature:()
CCIMEDelegate	text_input_node/CCIMEDelegate.h	/^    CCIMEDelegate();$/;"	p	class:CCIMEDelegate	access:protected	signature:()
CCIMEDelegate	text_input_node/CCIMEDelegate.h	/^class CC_DLL CCIMEDelegate$/;"	c
CCIMEDelegate	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDelegate::CCIMEDelegate()$/;"	f	class:CCIMEDelegate	signature:()
CCIMEDelegate::CCIMEDelegate	text_input_node/CCIMEDelegate.h	/^    CCIMEDelegate();$/;"	p	class:CCIMEDelegate	access:protected	signature:()
CCIMEDelegate::CCIMEDelegate	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDelegate::CCIMEDelegate()$/;"	f	class:CCIMEDelegate	signature:()
CCIMEDelegate::attachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual bool attachWithIME();$/;"	p	class:CCIMEDelegate	access:public	signature:()
CCIMEDelegate::attachWithIME	text_input_node/CCIMEDispatcher.cpp	/^bool CCIMEDelegate::attachWithIME()$/;"	f	class:CCIMEDelegate	signature:()
CCIMEDelegate::canAttachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual bool canAttachWithIME() { return false; }$/;"	f	class:CCIMEDelegate	access:protected	signature:()
CCIMEDelegate::canDetachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual bool canDetachWithIME() { return false; }$/;"	f	class:CCIMEDelegate	access:protected	signature:()
CCIMEDelegate::deleteBackward	text_input_node/CCIMEDelegate.h	/^    virtual void deleteBackward() {}$/;"	f	class:CCIMEDelegate	access:protected	signature:()
CCIMEDelegate::detachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual bool detachWithIME();$/;"	p	class:CCIMEDelegate	access:public	signature:()
CCIMEDelegate::detachWithIME	text_input_node/CCIMEDispatcher.cpp	/^bool CCIMEDelegate::detachWithIME()$/;"	f	class:CCIMEDelegate	signature:()
CCIMEDelegate::didAttachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual void didAttachWithIME() {}$/;"	f	class:CCIMEDelegate	access:protected	signature:()
CCIMEDelegate::didDetachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual void didDetachWithIME() {}$/;"	f	class:CCIMEDelegate	access:protected	signature:()
CCIMEDelegate::getContentText	text_input_node/CCIMEDelegate.h	/^    virtual const char * getContentText() { return 0; }$/;"	f	class:CCIMEDelegate	access:protected	signature:()
CCIMEDelegate::insertText	text_input_node/CCIMEDelegate.h	/^    virtual void insertText(const char * text, int len) {CC_UNUSED_PARAM(text);CC_UNUSED_PARAM(len);}$/;"	f	class:CCIMEDelegate	access:protected	signature:(const char * text, int len)
CCIMEDelegate::keyboardDidHide	text_input_node/CCIMEDelegate.h	/^    virtual void keyboardDidHide(CCIMEKeyboardNotificationInfo& info)    {CC_UNUSED_PARAM(info);}$/;"	f	class:CCIMEDelegate	access:protected	signature:(CCIMEKeyboardNotificationInfo& info)
CCIMEDelegate::keyboardDidShow	text_input_node/CCIMEDelegate.h	/^    virtual void keyboardDidShow(CCIMEKeyboardNotificationInfo& info)    {CC_UNUSED_PARAM(info);}$/;"	f	class:CCIMEDelegate	access:protected	signature:(CCIMEKeyboardNotificationInfo& info)
CCIMEDelegate::keyboardWillHide	text_input_node/CCIMEDelegate.h	/^    virtual void keyboardWillHide(CCIMEKeyboardNotificationInfo& info)   {CC_UNUSED_PARAM(info);}$/;"	f	class:CCIMEDelegate	access:protected	signature:(CCIMEKeyboardNotificationInfo& info)
CCIMEDelegate::keyboardWillShow	text_input_node/CCIMEDelegate.h	/^    virtual void keyboardWillShow(CCIMEKeyboardNotificationInfo& info)   {CC_UNUSED_PARAM(info);}$/;"	f	class:CCIMEDelegate	access:protected	signature:(CCIMEKeyboardNotificationInfo& info)
CCIMEDelegate::~CCIMEDelegate	text_input_node/CCIMEDelegate.h	/^    virtual ~CCIMEDelegate();$/;"	p	class:CCIMEDelegate	access:public	signature:()
CCIMEDelegate::~CCIMEDelegate	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDelegate::~CCIMEDelegate()$/;"	f	class:CCIMEDelegate	signature:()
CCIMEDispatcher	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDispatcher::CCIMEDispatcher()$/;"	f	class:CCIMEDispatcher	signature:()
CCIMEDispatcher	text_input_node/CCIMEDispatcher.h	/^    CCIMEDispatcher();$/;"	p	class:CCIMEDispatcher	access:private	signature:()
CCIMEDispatcher	text_input_node/CCIMEDispatcher.h	/^class CC_DLL CCIMEDispatcher$/;"	c
CCIMEDispatcher::CCIMEDispatcher	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDispatcher::CCIMEDispatcher()$/;"	f	class:CCIMEDispatcher	signature:()
CCIMEDispatcher::CCIMEDispatcher	text_input_node/CCIMEDispatcher.h	/^    CCIMEDispatcher();$/;"	p	class:CCIMEDispatcher	access:private	signature:()
CCIMEDispatcher::Impl	text_input_node/CCIMEDispatcher.cpp	/^class CCIMEDispatcher::Impl$/;"	c	class:CCIMEDispatcher	file:
CCIMEDispatcher::Impl::Impl	text_input_node/CCIMEDispatcher.cpp	/^    Impl()$/;"	f	class:CCIMEDispatcher::Impl	access:public	signature:()
CCIMEDispatcher::Impl::findDelegate	text_input_node/CCIMEDispatcher.cpp	/^    DelegateIter findDelegate(CCIMEDelegate* pDelegate)$/;"	f	class:CCIMEDispatcher::Impl	access:public	signature:(CCIMEDelegate* pDelegate)
CCIMEDispatcher::Impl::init	text_input_node/CCIMEDispatcher.cpp	/^    void init()$/;"	f	class:CCIMEDispatcher::Impl	access:public	signature:()
CCIMEDispatcher::Impl::m_DelegateList	text_input_node/CCIMEDispatcher.cpp	/^    DelegateList    m_DelegateList;$/;"	m	class:CCIMEDispatcher::Impl	file:	access:public
CCIMEDispatcher::Impl::m_DelegateWithIme	text_input_node/CCIMEDispatcher.cpp	/^    CCIMEDelegate*  m_DelegateWithIme;$/;"	m	class:CCIMEDispatcher::Impl	file:	access:public
CCIMEDispatcher::Impl::~Impl	text_input_node/CCIMEDispatcher.cpp	/^    ~Impl()$/;"	f	class:CCIMEDispatcher::Impl	access:public	signature:()
CCIMEDispatcher::addDelegate	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::addDelegate(CCIMEDelegate* pDelegate)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEDelegate* pDelegate)
CCIMEDispatcher::addDelegate	text_input_node/CCIMEDispatcher.h	/^    void addDelegate(CCIMEDelegate * pDelegate);$/;"	p	class:CCIMEDispatcher	access:protected	signature:(CCIMEDelegate * pDelegate)
CCIMEDispatcher::attachDelegateWithIME	text_input_node/CCIMEDispatcher.cpp	/^bool CCIMEDispatcher::attachDelegateWithIME(CCIMEDelegate * pDelegate)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEDelegate * pDelegate)
CCIMEDispatcher::attachDelegateWithIME	text_input_node/CCIMEDispatcher.h	/^    bool attachDelegateWithIME(CCIMEDelegate * pDelegate);$/;"	p	class:CCIMEDispatcher	access:protected	signature:(CCIMEDelegate * pDelegate)
CCIMEDispatcher::detachDelegateWithIME	text_input_node/CCIMEDispatcher.cpp	/^bool CCIMEDispatcher::detachDelegateWithIME(CCIMEDelegate * pDelegate)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEDelegate * pDelegate)
CCIMEDispatcher::detachDelegateWithIME	text_input_node/CCIMEDispatcher.h	/^    bool detachDelegateWithIME(CCIMEDelegate * pDelegate);$/;"	p	class:CCIMEDispatcher	access:protected	signature:(CCIMEDelegate * pDelegate)
CCIMEDispatcher::dispatchDeleteBackward	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchDeleteBackward()$/;"	f	class:CCIMEDispatcher	signature:()
CCIMEDispatcher::dispatchDeleteBackward	text_input_node/CCIMEDispatcher.h	/^    void dispatchDeleteBackward();$/;"	p	class:CCIMEDispatcher	access:public	signature:()
CCIMEDispatcher::dispatchInsertText	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchInsertText(const char * pText, int nLen)$/;"	f	class:CCIMEDispatcher	signature:(const char * pText, int nLen)
CCIMEDispatcher::dispatchInsertText	text_input_node/CCIMEDispatcher.h	/^    void dispatchInsertText(const char * pText, int nLen);$/;"	p	class:CCIMEDispatcher	access:public	signature:(const char * pText, int nLen)
CCIMEDispatcher::dispatchKeyboardDidHide	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchKeyboardDidHide(CCIMEKeyboardNotificationInfo& info)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEKeyboardNotificationInfo& info)
CCIMEDispatcher::dispatchKeyboardDidHide	text_input_node/CCIMEDispatcher.h	/^    void dispatchKeyboardDidHide(CCIMEKeyboardNotificationInfo& info);$/;"	p	class:CCIMEDispatcher	access:public	signature:(CCIMEKeyboardNotificationInfo& info)
CCIMEDispatcher::dispatchKeyboardDidShow	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchKeyboardDidShow(CCIMEKeyboardNotificationInfo& info)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEKeyboardNotificationInfo& info)
CCIMEDispatcher::dispatchKeyboardDidShow	text_input_node/CCIMEDispatcher.h	/^    void dispatchKeyboardDidShow(CCIMEKeyboardNotificationInfo& info);$/;"	p	class:CCIMEDispatcher	access:public	signature:(CCIMEKeyboardNotificationInfo& info)
CCIMEDispatcher::dispatchKeyboardWillHide	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchKeyboardWillHide(CCIMEKeyboardNotificationInfo& info)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEKeyboardNotificationInfo& info)
CCIMEDispatcher::dispatchKeyboardWillHide	text_input_node/CCIMEDispatcher.h	/^    void dispatchKeyboardWillHide(CCIMEKeyboardNotificationInfo& info);$/;"	p	class:CCIMEDispatcher	access:public	signature:(CCIMEKeyboardNotificationInfo& info)
CCIMEDispatcher::dispatchKeyboardWillShow	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchKeyboardWillShow(CCIMEKeyboardNotificationInfo& info)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEKeyboardNotificationInfo& info)
CCIMEDispatcher::dispatchKeyboardWillShow	text_input_node/CCIMEDispatcher.h	/^    void dispatchKeyboardWillShow(CCIMEKeyboardNotificationInfo& info);$/;"	p	class:CCIMEDispatcher	access:public	signature:(CCIMEKeyboardNotificationInfo& info)
CCIMEDispatcher::getContentText	text_input_node/CCIMEDispatcher.cpp	/^const char * CCIMEDispatcher::getContentText()$/;"	f	class:CCIMEDispatcher	signature:()
CCIMEDispatcher::getContentText	text_input_node/CCIMEDispatcher.h	/^    const char * getContentText();$/;"	p	class:CCIMEDispatcher	access:public	signature:()
CCIMEDispatcher::m_pImpl	text_input_node/CCIMEDispatcher.h	/^    Impl * m_pImpl;$/;"	m	class:CCIMEDispatcher	access:private
CCIMEDispatcher::removeDelegate	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::removeDelegate(CCIMEDelegate* pDelegate)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEDelegate* pDelegate)
CCIMEDispatcher::removeDelegate	text_input_node/CCIMEDispatcher.h	/^    void removeDelegate(CCIMEDelegate * pDelegate);$/;"	p	class:CCIMEDispatcher	access:protected	signature:(CCIMEDelegate * pDelegate)
CCIMEDispatcher::sharedDispatcher	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDispatcher* CCIMEDispatcher::sharedDispatcher()$/;"	f	class:CCIMEDispatcher	signature:()
CCIMEDispatcher::sharedDispatcher	text_input_node/CCIMEDispatcher.h	/^    static CCIMEDispatcher* sharedDispatcher();$/;"	p	class:CCIMEDispatcher	access:public	signature:()
CCIMEDispatcher::~CCIMEDispatcher	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDispatcher::~CCIMEDispatcher()$/;"	f	class:CCIMEDispatcher	signature:()
CCIMEDispatcher::~CCIMEDispatcher	text_input_node/CCIMEDispatcher.h	/^    ~CCIMEDispatcher();$/;"	p	class:CCIMEDispatcher	access:public	signature:()
CCIMEKeyboardNotificationInfo	text_input_node/CCIMEDelegate.h	/^} CCIMEKeyboardNotificationInfo;$/;"	t	typeref:struct:__anon46
CCImage	platform/CCImage.h	/^    CCImage();$/;"	p	class:CCImage	access:public	signature:()
CCImage	platform/CCImage.h	/^    CCImage(const CCImage&    rImg);$/;"	p	class:CCImage	access:private	signature:(const CCImage& rImg)
CCImage	platform/CCImage.h	/^class CC_DLL CCImage : public CCObject$/;"	c	inherits:CCObject
CCImage	platform/CCImageCommon_cpp.h	/^CCImage::CCImage()$/;"	f	class:CCImage	signature:()
CCImage::CCImage	platform/CCImage.h	/^    CCImage();$/;"	p	class:CCImage	access:public	signature:()
CCImage::CCImage	platform/CCImage.h	/^    CCImage(const CCImage&    rImg);$/;"	p	class:CCImage	access:private	signature:(const CCImage& rImg)
CCImage::CCImage	platform/CCImageCommon_cpp.h	/^CCImage::CCImage()$/;"	f	class:CCImage	signature:()
CCImage::CC_SYNTHESIZE_READONLY	platform/CCImage.h	/^    CC_SYNTHESIZE_READONLY(int,     m_nBitsPerComponent,   BitsPerComponent);$/;"	p	class:CCImage	access:public	signature:(int, m_nBitsPerComponent, BitsPerComponent)
CCImage::CC_SYNTHESIZE_READONLY	platform/CCImage.h	/^    CC_SYNTHESIZE_READONLY(unsigned short,   m_nHeight,      Height);$/;"	p	class:CCImage	access:public	signature:(unsigned short, m_nHeight, Height)
CCImage::CC_SYNTHESIZE_READONLY	platform/CCImage.h	/^    CC_SYNTHESIZE_READONLY(unsigned short,   m_nWidth,       Width);$/;"	p	class:CCImage	access:public	signature:(unsigned short, m_nWidth, Width)
CCImage::EImageFormat	platform/CCImage.h	/^    }EImageFormat;$/;"	t	class:CCImage	typeref:enum:CCImage::__anon28	access:public
CCImage::ETextAlign	platform/CCImage.h	/^    }ETextAlign;$/;"	t	class:CCImage	typeref:enum:CCImage::__anon29	access:public
CCImage::_initWithJpgData	platform/CCImage.h	/^    bool _initWithJpgData(void *pData, int nDatalen);$/;"	p	class:CCImage	access:protected	signature:(void *pData, int nDatalen)
CCImage::_initWithJpgData	platform/CCImageCommon_cpp.h	/^bool CCImage::_initWithJpgData(void * data, int nSize)$/;"	f	class:CCImage	signature:(void * data, int nSize)
CCImage::_initWithPngData	platform/CCImage.h	/^    bool _initWithPngData(void *pData, int nDatalen);$/;"	p	class:CCImage	access:protected	signature:(void *pData, int nDatalen)
CCImage::_initWithPngData	platform/CCImageCommon_cpp.h	/^bool CCImage::_initWithPngData(void * pData, int nDatalen)$/;"	f	class:CCImage	signature:(void * pData, int nDatalen)
CCImage::_initWithRawData	platform/CCImage.h	/^    bool _initWithRawData(void *pData, int nDatalen, int nWidth, int nHeight, int nBitsPerComponent);$/;"	p	class:CCImage	access:protected	signature:(void *pData, int nDatalen, int nWidth, int nHeight, int nBitsPerComponent)
CCImage::_initWithRawData	platform/CCImageCommon_cpp.h	/^bool CCImage::_initWithRawData(void * pData, int nDatalen, int nWidth, int nHeight, int nBitsPerComponent)$/;"	f	class:CCImage	signature:(void * pData, int nDatalen, int nWidth, int nHeight, int nBitsPerComponent)
CCImage::_initWithTiffData	platform/CCImage.h	/^    bool _initWithTiffData(void *pData, int nDataLen);$/;"	p	class:CCImage	access:protected	signature:(void *pData, int nDataLen)
CCImage::_initWithTiffData	platform/CCImageCommon_cpp.h	/^bool CCImage::_initWithTiffData(void* pData, int nDataLen)$/;"	f	class:CCImage	signature:(void* pData, int nDataLen)
CCImage::_initWithWebpData	platform/CCImage.h	/^    bool _initWithWebpData(void *pData, int nDataLen);$/;"	p	class:CCImage	access:protected	signature:(void *pData, int nDataLen)
CCImage::_initWithWebpData	platform/CCImageCommonWebp.cpp	/^bool CCImage::_initWithWebpData(void *pData, int nDataLen)$/;"	f	class:CCImage	signature:(void *pData, int nDataLen)
CCImage::_saveImageToJPG	platform/CCImage.h	/^    bool _saveImageToJPG(const char *pszFilePath);$/;"	p	class:CCImage	access:protected	signature:(const char *pszFilePath)
CCImage::_saveImageToJPG	platform/CCImageCommon_cpp.h	/^bool CCImage::_saveImageToJPG(const char * pszFilePath)$/;"	f	class:CCImage	signature:(const char * pszFilePath)
CCImage::_saveImageToPNG	platform/CCImage.h	/^    bool _saveImageToPNG(const char *pszFilePath, bool bIsToRGB = true);$/;"	p	class:CCImage	access:protected	signature:(const char *pszFilePath, bool bIsToRGB = true)
CCImage::_saveImageToPNG	platform/CCImageCommon_cpp.h	/^bool CCImage::_saveImageToPNG(const char * pszFilePath, bool bIsToRGB)$/;"	f	class:CCImage	signature:(const char * pszFilePath, bool bIsToRGB)
CCImage::getData	platform/CCImage.h	/^    unsigned char *   getData()               { return m_pData; }$/;"	f	class:CCImage	access:public	signature:()
CCImage::getDataLen	platform/CCImage.h	/^    int         getDataLen()            { return m_nWidth * m_nHeight; }$/;"	f	class:CCImage	access:public	signature:()
CCImage::hasAlpha	platform/CCImage.h	/^    bool hasAlpha()                     { return m_bHasAlpha; }$/;"	f	class:CCImage	access:public	signature:()
CCImage::initWithImageData	platform/CCImage.h	/^    bool initWithImageData(void * pData, $/;"	p	class:CCImage	access:public	signature:(void * pData, int nDataLen, EImageFormat eFmt = kFmtUnKnown, int nWidth = 0, int nHeight = 0, int nBitsPerComponent = 8)
CCImage::initWithImageData	platform/CCImageCommon_cpp.h	/^bool CCImage::initWithImageData(void * pData, $/;"	f	class:CCImage	signature:(void * pData, int nDataLen, EImageFormat eFmt , int nWidth , int nHeight , int nBitsPerComponent )
CCImage::initWithImageFile	platform/CCImage.h	/^    bool initWithImageFile(const char * strPath, EImageFormat imageType = kFmtPng);$/;"	p	class:CCImage	access:public	signature:(const char * strPath, EImageFormat imageType = kFmtPng)
CCImage::initWithImageFile	platform/CCImageCommon_cpp.h	/^bool CCImage::initWithImageFile(const char * strPath, EImageFormat eImgFmt\/* = eFmtPng*\/)$/;"	f	class:CCImage	signature:(const char * strPath, EImageFormat eImgFmt )
CCImage::initWithImageFileThreadSafe	platform/CCImage.h	/^    bool initWithImageFileThreadSafe(const char *fullpath, EImageFormat imageType = kFmtPng);$/;"	p	class:CCImage	access:public	signature:(const char *fullpath, EImageFormat imageType = kFmtPng)
CCImage::initWithImageFileThreadSafe	platform/CCImageCommon_cpp.h	/^bool CCImage::initWithImageFileThreadSafe(const char *fullpath, EImageFormat imageType)$/;"	f	class:CCImage	signature:(const char *fullpath, EImageFormat imageType)
CCImage::initWithString	platform/CCImage.h	/^    bool initWithString($/;"	p	class:CCImage	access:public	signature:( const char * pText, int nWidth = 0, int nHeight = 0, ETextAlign eAlignMask = kAlignCenter, const char * pFontName = 0, int nSize = 0)
CCImage::isPremultipliedAlpha	platform/CCImage.h	/^    bool isPremultipliedAlpha()         { return m_bPreMulti; }$/;"	f	class:CCImage	access:public	signature:()
CCImage::kAlignBottom	platform/CCImage.h	/^        kAlignBottom        = 0x23, \/\/\/< Horizontal center and vertical bottom.$/;"	e	enum:CCImage::__anon29
CCImage::kAlignBottomLeft	platform/CCImage.h	/^        kAlignBottomLeft    = 0x21, \/\/\/< Horizontal left and vertical bottom.$/;"	e	enum:CCImage::__anon29
CCImage::kAlignBottomRight	platform/CCImage.h	/^        kAlignBottomRight   = 0x22, \/\/\/< Horizontal right and vertical bottom.$/;"	e	enum:CCImage::__anon29
CCImage::kAlignCenter	platform/CCImage.h	/^        kAlignCenter        = 0x33, \/\/\/< Horizontal center and vertical center.$/;"	e	enum:CCImage::__anon29
CCImage::kAlignLeft	platform/CCImage.h	/^        kAlignLeft          = 0x31, \/\/\/< Horizontal left and vertical center.$/;"	e	enum:CCImage::__anon29
CCImage::kAlignRight	platform/CCImage.h	/^        kAlignRight         = 0x32, \/\/\/< Horizontal right and vertical center.$/;"	e	enum:CCImage::__anon29
CCImage::kAlignTop	platform/CCImage.h	/^        kAlignTop           = 0x13, \/\/\/< Horizontal center and vertical top.$/;"	e	enum:CCImage::__anon29
CCImage::kAlignTopLeft	platform/CCImage.h	/^        kAlignTopLeft       = 0x11, \/\/\/< Horizontal left and vertical top.$/;"	e	enum:CCImage::__anon29
CCImage::kAlignTopRight	platform/CCImage.h	/^        kAlignTopRight      = 0x12, \/\/\/< Horizontal right and vertical top.$/;"	e	enum:CCImage::__anon29
CCImage::kFmtJpg	platform/CCImage.h	/^        kFmtJpg = 0,$/;"	e	enum:CCImage::__anon28
CCImage::kFmtPng	platform/CCImage.h	/^        kFmtPng,$/;"	e	enum:CCImage::__anon28
CCImage::kFmtRawData	platform/CCImage.h	/^        kFmtRawData,$/;"	e	enum:CCImage::__anon28
CCImage::kFmtTiff	platform/CCImage.h	/^        kFmtTiff,$/;"	e	enum:CCImage::__anon28
CCImage::kFmtUnKnown	platform/CCImage.h	/^        kFmtUnKnown$/;"	e	enum:CCImage::__anon28
CCImage::kFmtWebp	platform/CCImage.h	/^        kFmtWebp,$/;"	e	enum:CCImage::__anon28
CCImage::m_bHasAlpha	platform/CCImage.h	/^    bool m_bHasAlpha;$/;"	m	class:CCImage	access:protected
CCImage::m_bPreMulti	platform/CCImage.h	/^    bool m_bPreMulti;$/;"	m	class:CCImage	access:protected
CCImage::m_pData	platform/CCImage.h	/^    unsigned char *m_pData;$/;"	m	class:CCImage	access:protected
CCImage::operator =	platform/CCImage.h	/^    CCImage & operator=(const CCImage&);$/;"	p	class:CCImage	access:private	signature:(const CCImage&)
CCImage::saveToFile	platform/CCImage.h	/^    bool saveToFile(const char *pszFilePath, bool bIsToRGB = true);$/;"	p	class:CCImage	access:public	signature:(const char *pszFilePath, bool bIsToRGB = true)
CCImage::saveToFile	platform/CCImageCommon_cpp.h	/^bool CCImage::saveToFile(const char *pszFilePath, bool bIsToRGB)$/;"	f	class:CCImage	signature:(const char *pszFilePath, bool bIsToRGB)
CCImage::~CCImage	platform/CCImage.h	/^    ~CCImage();$/;"	p	class:CCImage	access:public	signature:()
CCImage::~CCImage	platform/CCImageCommon_cpp.h	/^CCImage::~CCImage()$/;"	f	class:CCImage	signature:()
CCInteger	cocoa/CCInteger.h	/^    CCInteger(int v)$/;"	f	class:CCInteger	access:public	signature:(int v)
CCInteger	cocoa/CCInteger.h	/^class CC_DLL CCInteger : public CCObject$/;"	c	inherits:CCObject
CCInteger::CCInteger	cocoa/CCInteger.h	/^    CCInteger(int v)$/;"	f	class:CCInteger	access:public	signature:(int v)
CCInteger::create	cocoa/CCInteger.h	/^    static CCInteger* create(int v)$/;"	f	class:CCInteger	access:public	signature:(int v)
CCInteger::getValue	cocoa/CCInteger.h	/^    int getValue() const {return m_nValue;}$/;"	f	class:CCInteger	access:public	signature:() const
CCInteger::m_nValue	cocoa/CCInteger.h	/^    int m_nValue;$/;"	m	class:CCInteger	access:private
CCJumpBy	actions/CCActionInterval.h	/^class CC_DLL CCJumpBy : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCJumpBy::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCJumpBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCJumpBy	signature:(CCZone *pZone)
CCJumpBy::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCJumpBy	access:public	signature:(CCZone* pZone)
CCJumpBy::create	actions/CCActionInterval.cpp	/^CCJumpBy* CCJumpBy::create(float duration, const CCPoint& position, float height, unsigned int jumps)$/;"	f	class:CCJumpBy	signature:(float duration, const CCPoint& position, float height, unsigned int jumps)
CCJumpBy::create	actions/CCActionInterval.h	/^    static CCJumpBy* create(float duration, const CCPoint& position, float height, unsigned int jumps);$/;"	p	class:CCJumpBy	access:public	signature:(float duration, const CCPoint& position, float height, unsigned int jumps)
CCJumpBy::initWithDuration	actions/CCActionInterval.cpp	/^bool CCJumpBy::initWithDuration(float duration, const CCPoint& position, float height, unsigned int jumps)$/;"	f	class:CCJumpBy	signature:(float duration, const CCPoint& position, float height, unsigned int jumps)
CCJumpBy::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, const CCPoint& position, float height, unsigned int jumps);$/;"	p	class:CCJumpBy	access:public	signature:(float duration, const CCPoint& position, float height, unsigned int jumps)
CCJumpBy::m_delta	actions/CCActionInterval.h	/^    CCPoint         m_delta;$/;"	m	class:CCJumpBy	access:protected
CCJumpBy::m_height	actions/CCActionInterval.h	/^    float           m_height;$/;"	m	class:CCJumpBy	access:protected
CCJumpBy::m_nJumps	actions/CCActionInterval.h	/^    unsigned int    m_nJumps;$/;"	m	class:CCJumpBy	access:protected
CCJumpBy::m_previousPos	actions/CCActionInterval.h	/^    CCPoint         m_previousPos;$/;"	m	class:CCJumpBy	access:protected
CCJumpBy::m_startPosition	actions/CCActionInterval.h	/^    CCPoint         m_startPosition;$/;"	m	class:CCJumpBy	access:protected
CCJumpBy::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCJumpBy::reverse(void)$/;"	f	class:CCJumpBy	signature:(void)
CCJumpBy::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCJumpBy	access:public	signature:(void)
CCJumpBy::startWithTarget	actions/CCActionInterval.cpp	/^void CCJumpBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCJumpBy	signature:(CCNode *pTarget)
CCJumpBy::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCJumpBy	access:public	signature:(CCNode *pTarget)
CCJumpBy::update	actions/CCActionInterval.cpp	/^void CCJumpBy::update(float t)$/;"	f	class:CCJumpBy	signature:(float t)
CCJumpBy::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCJumpBy	access:public	signature:(float time)
CCJumpTiles3D	actions/CCActionTiledGrid.h	/^class CC_DLL CCJumpTiles3D : public CCTiledGrid3DAction$/;"	c	inherits:CCTiledGrid3DAction
CCJumpTiles3D::copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCJumpTiles3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCJumpTiles3D	signature:(CCZone *pZone)
CCJumpTiles3D::copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCJumpTiles3D	access:public	signature:(CCZone* pZone)
CCJumpTiles3D::create	actions/CCActionTiledGrid.cpp	/^CCJumpTiles3D* CCJumpTiles3D::create(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude)$/;"	f	class:CCJumpTiles3D	signature:(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude)
CCJumpTiles3D::create	actions/CCActionTiledGrid.h	/^    static CCJumpTiles3D* create(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude);$/;"	p	class:CCJumpTiles3D	access:public	signature:(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude)
CCJumpTiles3D::getAmplitude	actions/CCActionTiledGrid.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCJumpTiles3D	access:public	signature:(void)
CCJumpTiles3D::getAmplitudeRate	actions/CCActionTiledGrid.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCJumpTiles3D	access:public	signature:(void)
CCJumpTiles3D::initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCJumpTiles3D::initWithDuration(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude)$/;"	f	class:CCJumpTiles3D	signature:(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude)
CCJumpTiles3D::initWithDuration	actions/CCActionTiledGrid.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude);$/;"	p	class:CCJumpTiles3D	access:public	signature:(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude)
CCJumpTiles3D::m_fAmplitude	actions/CCActionTiledGrid.h	/^    float m_fAmplitude;$/;"	m	class:CCJumpTiles3D	access:protected
CCJumpTiles3D::m_fAmplitudeRate	actions/CCActionTiledGrid.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCJumpTiles3D	access:protected
CCJumpTiles3D::m_nJumps	actions/CCActionTiledGrid.h	/^    unsigned int m_nJumps;$/;"	m	class:CCJumpTiles3D	access:protected
CCJumpTiles3D::setAmplitude	actions/CCActionTiledGrid.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCJumpTiles3D	access:public	signature:(float fAmplitude)
CCJumpTiles3D::setAmplitudeRate	actions/CCActionTiledGrid.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCJumpTiles3D	access:public	signature:(float fAmplitudeRate)
CCJumpTiles3D::update	actions/CCActionTiledGrid.cpp	/^void CCJumpTiles3D::update(float time)$/;"	f	class:CCJumpTiles3D	signature:(float time)
CCJumpTiles3D::update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCJumpTiles3D	access:public	signature:(float time)
CCJumpTo	actions/CCActionInterval.h	/^class CC_DLL CCJumpTo : public CCJumpBy$/;"	c	inherits:CCJumpBy
CCJumpTo::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCJumpTo::copyWithZone(CCZone* pZone)$/;"	f	class:CCJumpTo	signature:(CCZone* pZone)
CCJumpTo::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCJumpTo	access:public	signature:(CCZone* pZone)
CCJumpTo::create	actions/CCActionInterval.cpp	/^CCJumpTo* CCJumpTo::create(float duration, const CCPoint& position, float height, int jumps)$/;"	f	class:CCJumpTo	signature:(float duration, const CCPoint& position, float height, int jumps)
CCJumpTo::create	actions/CCActionInterval.h	/^    static CCJumpTo* create(float duration, const CCPoint& position, float height, int jumps);$/;"	p	class:CCJumpTo	access:public	signature:(float duration, const CCPoint& position, float height, int jumps)
CCJumpTo::startWithTarget	actions/CCActionInterval.cpp	/^void CCJumpTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCJumpTo	signature:(CCNode *pTarget)
CCJumpTo::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCJumpTo	access:public	signature:(CCNode *pTarget)
CCKeypadDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^class CC_DLL CCKeypadDelegate$/;"	c
CCKeypadDelegate::keyBackClicked	keypad_dispatcher/CCKeypadDelegate.h	/^    virtual void keyBackClicked() {}$/;"	f	class:CCKeypadDelegate	access:public	signature:()
CCKeypadDelegate::keyMenuClicked	keypad_dispatcher/CCKeypadDelegate.h	/^    virtual void keyMenuClicked() {};$/;"	f	class:CCKeypadDelegate	access:public	signature:()
CCKeypadDispatcher	keypad_dispatcher/CCKeypadDispatcher.cpp	/^CCKeypadDispatcher::CCKeypadDispatcher()$/;"	f	class:CCKeypadDispatcher	signature:()
CCKeypadDispatcher	keypad_dispatcher/CCKeypadDispatcher.h	/^    CCKeypadDispatcher();$/;"	p	class:CCKeypadDispatcher	access:public	signature:()
CCKeypadDispatcher	keypad_dispatcher/CCKeypadDispatcher.h	/^class CC_DLL CCKeypadDispatcher : public CCObject$/;"	c	inherits:CCObject
CCKeypadDispatcher::CCKeypadDispatcher	keypad_dispatcher/CCKeypadDispatcher.cpp	/^CCKeypadDispatcher::CCKeypadDispatcher()$/;"	f	class:CCKeypadDispatcher	signature:()
CCKeypadDispatcher::CCKeypadDispatcher	keypad_dispatcher/CCKeypadDispatcher.h	/^    CCKeypadDispatcher();$/;"	p	class:CCKeypadDispatcher	access:public	signature:()
CCKeypadDispatcher::addDelegate	keypad_dispatcher/CCKeypadDispatcher.cpp	/^void CCKeypadDispatcher::addDelegate(CCKeypadDelegate* pDelegate)$/;"	f	class:CCKeypadDispatcher	signature:(CCKeypadDelegate* pDelegate)
CCKeypadDispatcher::addDelegate	keypad_dispatcher/CCKeypadDispatcher.h	/^    void addDelegate(CCKeypadDelegate* pDelegate);$/;"	p	class:CCKeypadDispatcher	access:public	signature:(CCKeypadDelegate* pDelegate)
CCKeypadDispatcher::dispatchKeypadMSG	keypad_dispatcher/CCKeypadDispatcher.cpp	/^bool CCKeypadDispatcher::dispatchKeypadMSG(ccKeypadMSGType nMsgType)$/;"	f	class:CCKeypadDispatcher	signature:(ccKeypadMSGType nMsgType)
CCKeypadDispatcher::dispatchKeypadMSG	keypad_dispatcher/CCKeypadDispatcher.h	/^    bool dispatchKeypadMSG(ccKeypadMSGType nMsgType);$/;"	p	class:CCKeypadDispatcher	access:public	signature:(ccKeypadMSGType nMsgType)
CCKeypadDispatcher::forceAddDelegate	keypad_dispatcher/CCKeypadDispatcher.cpp	/^void CCKeypadDispatcher::forceAddDelegate(CCKeypadDelegate* pDelegate)$/;"	f	class:CCKeypadDispatcher	signature:(CCKeypadDelegate* pDelegate)
CCKeypadDispatcher::forceAddDelegate	keypad_dispatcher/CCKeypadDispatcher.h	/^    void forceAddDelegate(CCKeypadDelegate* pDelegate);$/;"	p	class:CCKeypadDispatcher	access:public	signature:(CCKeypadDelegate* pDelegate)
CCKeypadDispatcher::forceRemoveDelegate	keypad_dispatcher/CCKeypadDispatcher.cpp	/^void CCKeypadDispatcher::forceRemoveDelegate(CCKeypadDelegate* pDelegate)$/;"	f	class:CCKeypadDispatcher	signature:(CCKeypadDelegate* pDelegate)
CCKeypadDispatcher::forceRemoveDelegate	keypad_dispatcher/CCKeypadDispatcher.h	/^    void forceRemoveDelegate(CCKeypadDelegate* pDelegate);$/;"	p	class:CCKeypadDispatcher	access:public	signature:(CCKeypadDelegate* pDelegate)
CCKeypadDispatcher::m_bLocked	keypad_dispatcher/CCKeypadDispatcher.h	/^    bool m_bLocked;$/;"	m	class:CCKeypadDispatcher	access:protected
CCKeypadDispatcher::m_bToAdd	keypad_dispatcher/CCKeypadDispatcher.h	/^    bool m_bToAdd;$/;"	m	class:CCKeypadDispatcher	access:protected
CCKeypadDispatcher::m_bToRemove	keypad_dispatcher/CCKeypadDispatcher.h	/^    bool m_bToRemove;$/;"	m	class:CCKeypadDispatcher	access:protected
CCKeypadDispatcher::m_pDelegates	keypad_dispatcher/CCKeypadDispatcher.h	/^    CCArray* m_pDelegates;$/;"	m	class:CCKeypadDispatcher	access:protected
CCKeypadDispatcher::m_pHandlersToAdd	keypad_dispatcher/CCKeypadDispatcher.h	/^    struct _ccCArray *m_pHandlersToAdd;$/;"	m	class:CCKeypadDispatcher	typeref:struct:CCKeypadDispatcher::_ccCArray	access:protected
CCKeypadDispatcher::m_pHandlersToRemove	keypad_dispatcher/CCKeypadDispatcher.h	/^    struct _ccCArray *m_pHandlersToRemove;$/;"	m	class:CCKeypadDispatcher	typeref:struct:CCKeypadDispatcher::_ccCArray	access:protected
CCKeypadDispatcher::removeDelegate	keypad_dispatcher/CCKeypadDispatcher.cpp	/^void CCKeypadDispatcher::removeDelegate(CCKeypadDelegate* pDelegate)$/;"	f	class:CCKeypadDispatcher	signature:(CCKeypadDelegate* pDelegate)
CCKeypadDispatcher::removeDelegate	keypad_dispatcher/CCKeypadDispatcher.h	/^    void removeDelegate(CCKeypadDelegate* pDelegate);$/;"	p	class:CCKeypadDispatcher	access:public	signature:(CCKeypadDelegate* pDelegate)
CCKeypadDispatcher::~CCKeypadDispatcher	keypad_dispatcher/CCKeypadDispatcher.cpp	/^CCKeypadDispatcher::~CCKeypadDispatcher()$/;"	f	class:CCKeypadDispatcher	signature:()
CCKeypadDispatcher::~CCKeypadDispatcher	keypad_dispatcher/CCKeypadDispatcher.h	/^    ~CCKeypadDispatcher();$/;"	p	class:CCKeypadDispatcher	access:public	signature:()
CCKeypadHandler	keypad_dispatcher/CCKeypadDelegate.h	/^class CC_DLL CCKeypadHandler : public CCObject$/;"	c	inherits:CCObject
CCKeypadHandler::getDelegate	keypad_dispatcher/CCKeypadDelegate.cpp	/^CCKeypadDelegate* CCKeypadHandler::getDelegate()$/;"	f	class:CCKeypadHandler	signature:()
CCKeypadHandler::getDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^    CCKeypadDelegate* getDelegate();$/;"	p	class:CCKeypadHandler	access:public	signature:()
CCKeypadHandler::handlerWithDelegate	keypad_dispatcher/CCKeypadDelegate.cpp	/^CCKeypadHandler* CCKeypadHandler::handlerWithDelegate(CCKeypadDelegate *pDelegate)$/;"	f	class:CCKeypadHandler	signature:(CCKeypadDelegate *pDelegate)
CCKeypadHandler::handlerWithDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^    static CCKeypadHandler* handlerWithDelegate(CCKeypadDelegate *pDelegate);$/;"	p	class:CCKeypadHandler	access:public	signature:(CCKeypadDelegate *pDelegate)
CCKeypadHandler::initWithDelegate	keypad_dispatcher/CCKeypadDelegate.cpp	/^bool CCKeypadHandler::initWithDelegate(CCKeypadDelegate *pDelegate)$/;"	f	class:CCKeypadHandler	signature:(CCKeypadDelegate *pDelegate)
CCKeypadHandler::initWithDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^    virtual bool initWithDelegate(CCKeypadDelegate *pDelegate);$/;"	p	class:CCKeypadHandler	access:public	signature:(CCKeypadDelegate *pDelegate)
CCKeypadHandler::m_pDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^    CCKeypadDelegate* m_pDelegate;$/;"	m	class:CCKeypadHandler	access:protected
CCKeypadHandler::setDelegate	keypad_dispatcher/CCKeypadDelegate.cpp	/^void CCKeypadHandler::setDelegate(CCKeypadDelegate *pDelegate)$/;"	f	class:CCKeypadHandler	signature:(CCKeypadDelegate *pDelegate)
CCKeypadHandler::setDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^    void setDelegate(CCKeypadDelegate *pDelegate);$/;"	p	class:CCKeypadHandler	access:public	signature:(CCKeypadDelegate *pDelegate)
CCKeypadHandler::~CCKeypadHandler	keypad_dispatcher/CCKeypadDelegate.cpp	/^CCKeypadHandler::~CCKeypadHandler()$/;"	f	class:CCKeypadHandler	signature:()
CCKeypadHandler::~CCKeypadHandler	keypad_dispatcher/CCKeypadDelegate.h	/^    virtual ~CCKeypadHandler(void);$/;"	p	class:CCKeypadHandler	access:public	signature:(void)
CCLOG	platform/CCPlatformMacros.h	211;"	d
CCLOG	platform/CCPlatformMacros.h	217;"	d
CCLOG	platform/CCPlatformMacros.h	223;"	d
CCLOGERROR	platform/CCPlatformMacros.h	213;"	d
CCLOGERROR	platform/CCPlatformMacros.h	218;"	d
CCLOGERROR	platform/CCPlatformMacros.h	224;"	d
CCLOGINFO	platform/CCPlatformMacros.h	212;"	d
CCLOGINFO	platform/CCPlatformMacros.h	219;"	d
CCLOGINFO	platform/CCPlatformMacros.h	225;"	d
CCLOGWARN	platform/CCPlatformMacros.h	214;"	d
CCLOGWARN	platform/CCPlatformMacros.h	220;"	d
CCLOGWARN	platform/CCPlatformMacros.h	226;"	d
CCLabelAtlas	label_nodes/CCLabelAtlas.h	/^    CCLabelAtlas()$/;"	f	class:CCLabelAtlas	access:public	signature:()
CCLabelAtlas	label_nodes/CCLabelAtlas.h	/^class CC_DLL CCLabelAtlas : public CCAtlasNode, public CCLabelProtocol$/;"	c	inherits:CCAtlasNode,CCLabelProtocol
CCLabelAtlas::CCLabelAtlas	label_nodes/CCLabelAtlas.h	/^    CCLabelAtlas()$/;"	f	class:CCLabelAtlas	access:public	signature:()
CCLabelAtlas::create	label_nodes/CCLabelAtlas.cpp	/^CCLabelAtlas* CCLabelAtlas::create(const char *string, const char *charMapFile, unsigned int itemWidth, int unsigned itemHeight, unsigned int startCharMap)$/;"	f	class:CCLabelAtlas	signature:(const char *string, const char *charMapFile, unsigned int itemWidth, int unsigned itemHeight, unsigned int startCharMap)
CCLabelAtlas::create	label_nodes/CCLabelAtlas.cpp	/^CCLabelAtlas* CCLabelAtlas::create(const char *string, const char *fntFile)$/;"	f	class:CCLabelAtlas	signature:(const char *string, const char *fntFile)
CCLabelAtlas::create	label_nodes/CCLabelAtlas.h	/^    static CCLabelAtlas * create(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap);$/;"	p	class:CCLabelAtlas	access:public	signature:(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)
CCLabelAtlas::create	label_nodes/CCLabelAtlas.h	/^    static CCLabelAtlas* create(const char *string, const char *fntFile);$/;"	p	class:CCLabelAtlas	access:public	signature:(const char *string, const char *fntFile)
CCLabelAtlas::draw	label_nodes/CCLabelAtlas.cpp	/^void CCLabelAtlas::draw()$/;"	f	class:CCLabelAtlas	signature:()
CCLabelAtlas::draw	label_nodes/CCLabelAtlas.h	/^    virtual void draw();$/;"	p	class:CCLabelAtlas	access:public	signature:()
CCLabelAtlas::getString	label_nodes/CCLabelAtlas.cpp	/^const char* CCLabelAtlas::getString(void)$/;"	f	class:CCLabelAtlas	signature:(void)
CCLabelAtlas::getString	label_nodes/CCLabelAtlas.h	/^    virtual const char* getString(void);$/;"	p	class:CCLabelAtlas	access:public	signature:(void)
CCLabelAtlas::initWithString	label_nodes/CCLabelAtlas.cpp	/^bool CCLabelAtlas::initWithString(const char *string, CCTexture2D* texture, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)$/;"	f	class:CCLabelAtlas	signature:(const char *string, CCTexture2D* texture, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)
CCLabelAtlas::initWithString	label_nodes/CCLabelAtlas.cpp	/^bool CCLabelAtlas::initWithString(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)$/;"	f	class:CCLabelAtlas	signature:(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)
CCLabelAtlas::initWithString	label_nodes/CCLabelAtlas.cpp	/^bool CCLabelAtlas::initWithString(const char *theString, const char *fntFile)$/;"	f	class:CCLabelAtlas	signature:(const char *theString, const char *fntFile)
CCLabelAtlas::initWithString	label_nodes/CCLabelAtlas.h	/^    bool initWithString(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap);$/;"	p	class:CCLabelAtlas	access:public	signature:(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)
CCLabelAtlas::initWithString	label_nodes/CCLabelAtlas.h	/^    bool initWithString(const char *string, const char *fntFile);$/;"	p	class:CCLabelAtlas	access:public	signature:(const char *string, const char *fntFile)
CCLabelAtlas::initWithString	label_nodes/CCLabelAtlas.h	/^    bool initWithString(const char* string, CCTexture2D* texture, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap);$/;"	p	class:CCLabelAtlas	access:public	signature:(const char* string, CCTexture2D* texture, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)
CCLabelAtlas::m_sString	label_nodes/CCLabelAtlas.h	/^    std::string m_sString;$/;"	m	class:CCLabelAtlas	access:protected
CCLabelAtlas::m_uMapStartChar	label_nodes/CCLabelAtlas.h	/^    unsigned int m_uMapStartChar;$/;"	m	class:CCLabelAtlas	access:protected
CCLabelAtlas::setString	label_nodes/CCLabelAtlas.cpp	/^void CCLabelAtlas::setString(const char *label)$/;"	f	class:CCLabelAtlas	signature:(const char *label)
CCLabelAtlas::setString	label_nodes/CCLabelAtlas.h	/^    virtual void setString(const char *label);$/;"	p	class:CCLabelAtlas	access:public	signature:(const char *label)
CCLabelAtlas::updateAtlasValues	label_nodes/CCLabelAtlas.cpp	/^void CCLabelAtlas::updateAtlasValues()$/;"	f	class:CCLabelAtlas	signature:()
CCLabelAtlas::updateAtlasValues	label_nodes/CCLabelAtlas.h	/^    virtual void updateAtlasValues();$/;"	p	class:CCLabelAtlas	access:public	signature:()
CCLabelAtlas::~CCLabelAtlas	label_nodes/CCLabelAtlas.h	/^    virtual ~CCLabelAtlas()$/;"	f	class:CCLabelAtlas	access:public	signature:()
CCLabelBMFont	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont::CCLabelBMFont()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont	label_nodes/CCLabelBMFont.h	/^    CCLabelBMFont();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont	label_nodes/CCLabelBMFont.h	/^class CC_DLL CCLabelBMFont : public CCSpriteBatchNode, public CCLabelProtocol, public CCRGBAProtocol$/;"	c	inherits:CCSpriteBatchNode,CCLabelProtocol,CCRGBAProtocol
CCLabelBMFont::CCLabelBMFont	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont::CCLabelBMFont()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::CCLabelBMFont	label_nodes/CCLabelBMFont.h	/^    CCLabelBMFont();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::atlasNameFromFntFile	label_nodes/CCLabelBMFont.h	/^    char * atlasNameFromFntFile(const char *fntFile);$/;"	p	class:CCLabelBMFont	access:private	signature:(const char *fntFile)
CCLabelBMFont::create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::create()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::create(const char *str, const char *fntFile)$/;"	f	class:CCLabelBMFont	signature:(const char *str, const char *fntFile)
CCLabelBMFont::create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::create(const char *str, const char *fntFile, float width)$/;"	f	class:CCLabelBMFont	signature:(const char *str, const char *fntFile, float width)
CCLabelBMFont::create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::create(const char *str, const char *fntFile, float width, CCTextAlignment alignment)$/;"	f	class:CCLabelBMFont	signature:(const char *str, const char *fntFile, float width, CCTextAlignment alignment)
CCLabelBMFont::create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont *CCLabelBMFont::create(const char *str, const char *fntFile, float width\/* = kCCLabelAutomaticWidth*\/, CCTextAlignment alignment\/* = kCCTextAlignmentLeft*\/, CCPoint imageOffset\/* = CCPointZero*\/)$/;"	f	class:CCLabelBMFont	signature:(const char *str, const char *fntFile, float width , CCTextAlignment alignment , CCPoint imageOffset )
CCLabelBMFont::create	label_nodes/CCLabelBMFont.h	/^	static CCLabelBMFont * create(const char *str, const char *fntFile);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *str, const char *fntFile)
CCLabelBMFont::create	label_nodes/CCLabelBMFont.h	/^	static CCLabelBMFont * create(const char *str, const char *fntFile, float width);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *str, const char *fntFile, float width)
CCLabelBMFont::create	label_nodes/CCLabelBMFont.h	/^	static CCLabelBMFont * create(const char *str, const char *fntFile, float width, CCTextAlignment alignment);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *str, const char *fntFile, float width, CCTextAlignment alignment)
CCLabelBMFont::create	label_nodes/CCLabelBMFont.h	/^    static CCLabelBMFont * create();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::create	label_nodes/CCLabelBMFont.h	/^    static CCLabelBMFont * create(const char *str, const char *fntFile, float width, CCTextAlignment alignment, CCPoint imageOffset);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *str, const char *fntFile, float width, CCTextAlignment alignment, CCPoint imageOffset)
CCLabelBMFont::createFontChars	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::createFontChars()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::createFontChars	label_nodes/CCLabelBMFont.h	/^    void createFontChars();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::draw	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::draw()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::draw	label_nodes/CCLabelBMFont.h	/^    virtual void draw();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::getColor	label_nodes/CCLabelBMFont.cpp	/^const ccColor3B& CCLabelBMFont::getColor()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::getColor	label_nodes/CCLabelBMFont.h	/^    virtual const ccColor3B& getColor(void);$/;"	p	class:CCLabelBMFont	access:public	signature:(void)
CCLabelBMFont::getDisplayedColor	label_nodes/CCLabelBMFont.cpp	/^const ccColor3B& CCLabelBMFont::getDisplayedColor()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::getDisplayedColor	label_nodes/CCLabelBMFont.h	/^    virtual const ccColor3B& getDisplayedColor();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::getDisplayedOpacity	label_nodes/CCLabelBMFont.cpp	/^GLubyte CCLabelBMFont::getDisplayedOpacity(void)$/;"	f	class:CCLabelBMFont	signature:(void)
CCLabelBMFont::getDisplayedOpacity	label_nodes/CCLabelBMFont.h	/^    virtual GLubyte getDisplayedOpacity();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::getFntFile	label_nodes/CCLabelBMFont.cpp	/^const char* CCLabelBMFont::getFntFile()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::getFntFile	label_nodes/CCLabelBMFont.h	/^    const char* getFntFile();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::getLetterPosXLeft	label_nodes/CCLabelBMFont.cpp	/^float CCLabelBMFont::getLetterPosXLeft( CCSprite* sp )$/;"	f	class:CCLabelBMFont	signature:( CCSprite* sp )
CCLabelBMFont::getLetterPosXLeft	label_nodes/CCLabelBMFont.h	/^    float getLetterPosXLeft( CCSprite* characterSprite );$/;"	p	class:CCLabelBMFont	access:private	signature:( CCSprite* characterSprite )
CCLabelBMFont::getLetterPosXRight	label_nodes/CCLabelBMFont.cpp	/^float CCLabelBMFont::getLetterPosXRight( CCSprite* sp )$/;"	f	class:CCLabelBMFont	signature:( CCSprite* sp )
CCLabelBMFont::getLetterPosXRight	label_nodes/CCLabelBMFont.h	/^    float getLetterPosXRight( CCSprite* characterSprite );$/;"	p	class:CCLabelBMFont	access:private	signature:( CCSprite* characterSprite )
CCLabelBMFont::getOpacity	label_nodes/CCLabelBMFont.cpp	/^GLubyte CCLabelBMFont::getOpacity(void)$/;"	f	class:CCLabelBMFont	signature:(void)
CCLabelBMFont::getOpacity	label_nodes/CCLabelBMFont.h	/^    virtual void setOpacityModifyRGB(bool isOpacityModifyRGB); virtual GLubyte getOpacity();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::getString	label_nodes/CCLabelBMFont.cpp	/^const char* CCLabelBMFont::getString(void)$/;"	f	class:CCLabelBMFont	signature:(void)
CCLabelBMFont::getString	label_nodes/CCLabelBMFont.h	/^    virtual const char* getString(void);$/;"	p	class:CCLabelBMFont	access:public	signature:(void)
CCLabelBMFont::init	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::init()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::init	label_nodes/CCLabelBMFont.h	/^    bool init();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::initWithString	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::initWithString(const char *theString, const char *fntFile, float width\/* = kCCLabelAutomaticWidth*\/, CCTextAlignment alignment\/* = kCCTextAlignmentLeft*\/, CCPoint imageOffset\/* = CCPointZero*\/)$/;"	f	class:CCLabelBMFont	signature:(const char *theString, const char *fntFile, float width , CCTextAlignment alignment , CCPoint imageOffset )
CCLabelBMFont::initWithString	label_nodes/CCLabelBMFont.h	/^    bool initWithString(const char *str, const char *fntFile, float width = kCCLabelAutomaticWidth, CCTextAlignment alignment = kCCTextAlignmentLeft, CCPoint imageOffset = CCPointZero);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *str, const char *fntFile, float width = kCCLabelAutomaticWidth, CCTextAlignment alignment = kCCTextAlignmentLeft, CCPoint imageOffset = CCPointZero)
CCLabelBMFont::isCascadeColorEnabled	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::isCascadeColorEnabled()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::isCascadeColorEnabled	label_nodes/CCLabelBMFont.h	/^    virtual bool isCascadeColorEnabled();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::isCascadeOpacityEnabled	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::isCascadeOpacityEnabled()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::isCascadeOpacityEnabled	label_nodes/CCLabelBMFont.h	/^    virtual bool isCascadeOpacityEnabled();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::isOpacityModifyRGB	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::isOpacityModifyRGB()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::isOpacityModifyRGB	label_nodes/CCLabelBMFont.h	/^    virtual bool isOpacityModifyRGB();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::kerningAmountForFirst	label_nodes/CCLabelBMFont.cpp	/^int CCLabelBMFont::kerningAmountForFirst(unsigned short first, unsigned short second)$/;"	f	class:CCLabelBMFont	signature:(unsigned short first, unsigned short second)
CCLabelBMFont::kerningAmountForFirst	label_nodes/CCLabelBMFont.h	/^    int kerningAmountForFirst(unsigned short first, unsigned short second);$/;"	p	class:CCLabelBMFont	access:private	signature:(unsigned short first, unsigned short second)
CCLabelBMFont::m_bCascadeColorEnabled	label_nodes/CCLabelBMFont.h	/^    bool m_bCascadeColorEnabled;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_bCascadeOpacityEnabled	label_nodes/CCLabelBMFont.h	/^    bool m_bCascadeOpacityEnabled;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_bIsOpacityModifyRGB	label_nodes/CCLabelBMFont.h	/^    bool        m_bIsOpacityModifyRGB;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_bLineBreakWithoutSpaces	label_nodes/CCLabelBMFont.h	/^    bool m_bLineBreakWithoutSpaces;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_cDisplayedOpacity	label_nodes/CCLabelBMFont.h	/^    GLubyte m_cDisplayedOpacity;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_cRealOpacity	label_nodes/CCLabelBMFont.h	/^    GLubyte m_cRealOpacity;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_fWidth	label_nodes/CCLabelBMFont.h	/^    float m_fWidth;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_pAlignment	label_nodes/CCLabelBMFont.h	/^    CCTextAlignment m_pAlignment;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_pConfiguration	label_nodes/CCLabelBMFont.h	/^    CCBMFontConfiguration *m_pConfiguration;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_pReusedChar	label_nodes/CCLabelBMFont.h	/^    CCSprite *m_pReusedChar;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_sFntFile	label_nodes/CCLabelBMFont.h	/^    std::string m_sFntFile;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_sInitialString	label_nodes/CCLabelBMFont.h	/^    unsigned short* m_sInitialString;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_sInitialStringUTF8	label_nodes/CCLabelBMFont.h	/^    std::string m_sInitialStringUTF8;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_sString	label_nodes/CCLabelBMFont.h	/^    unsigned short* m_sString;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_tDisplayedColor	label_nodes/CCLabelBMFont.h	/^    ccColor3B m_tDisplayedColor;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_tImageOffset	label_nodes/CCLabelBMFont.h	/^    CCPoint    m_tImageOffset;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::m_tRealColor	label_nodes/CCLabelBMFont.h	/^    ccColor3B m_tRealColor;$/;"	m	class:CCLabelBMFont	access:protected
CCLabelBMFont::purgeCachedData	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::purgeCachedData()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::purgeCachedData	label_nodes/CCLabelBMFont.h	/^    static void purgeCachedData();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::setAlignment	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setAlignment(CCTextAlignment alignment)$/;"	f	class:CCLabelBMFont	signature:(CCTextAlignment alignment)
CCLabelBMFont::setAlignment	label_nodes/CCLabelBMFont.h	/^    virtual void setAlignment(CCTextAlignment alignment);$/;"	p	class:CCLabelBMFont	access:public	signature:(CCTextAlignment alignment)
CCLabelBMFont::setAnchorPoint	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setAnchorPoint(const CCPoint& point)$/;"	f	class:CCLabelBMFont	signature:(const CCPoint& point)
CCLabelBMFont::setAnchorPoint	label_nodes/CCLabelBMFont.h	/^    virtual void setAnchorPoint(const CCPoint& var);$/;"	p	class:CCLabelBMFont	access:public	signature:(const CCPoint& var)
CCLabelBMFont::setCString	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setCString(const char *label)$/;"	f	class:CCLabelBMFont	signature:(const char *label)
CCLabelBMFont::setCString	label_nodes/CCLabelBMFont.h	/^    virtual void setCString(const char *label);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *label)
CCLabelBMFont::setCascadeColorEnabled	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setCascadeColorEnabled(bool cascadeColorEnabled)$/;"	f	class:CCLabelBMFont	signature:(bool cascadeColorEnabled)
CCLabelBMFont::setCascadeColorEnabled	label_nodes/CCLabelBMFont.h	/^    virtual void setCascadeColorEnabled(bool cascadeColorEnabled);$/;"	p	class:CCLabelBMFont	access:public	signature:(bool cascadeColorEnabled)
CCLabelBMFont::setCascadeOpacityEnabled	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setCascadeOpacityEnabled(bool cascadeOpacityEnabled)$/;"	f	class:CCLabelBMFont	signature:(bool cascadeOpacityEnabled)
CCLabelBMFont::setCascadeOpacityEnabled	label_nodes/CCLabelBMFont.h	/^    virtual void setCascadeOpacityEnabled(bool cascadeOpacityEnabled);$/;"	p	class:CCLabelBMFont	access:public	signature:(bool cascadeOpacityEnabled)
CCLabelBMFont::setColor	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setColor(const ccColor3B& color)$/;"	f	class:CCLabelBMFont	signature:(const ccColor3B& color)
CCLabelBMFont::setColor	label_nodes/CCLabelBMFont.h	/^    virtual void setColor(const ccColor3B& color);$/;"	p	class:CCLabelBMFont	access:public	signature:(const ccColor3B& color)
CCLabelBMFont::setFntFile	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setFntFile(const char* fntFile)$/;"	f	class:CCLabelBMFont	signature:(const char* fntFile)
CCLabelBMFont::setFntFile	label_nodes/CCLabelBMFont.h	/^    void setFntFile(const char* fntFile);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char* fntFile)
CCLabelBMFont::setLineBreakWithoutSpace	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setLineBreakWithoutSpace( bool breakWithoutSpace )$/;"	f	class:CCLabelBMFont	signature:( bool breakWithoutSpace )
CCLabelBMFont::setLineBreakWithoutSpace	label_nodes/CCLabelBMFont.h	/^    virtual void setLineBreakWithoutSpace(bool breakWithoutSpace);$/;"	p	class:CCLabelBMFont	access:public	signature:(bool breakWithoutSpace)
CCLabelBMFont::setOpacity	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setOpacity(GLubyte opacity)$/;"	f	class:CCLabelBMFont	signature:(GLubyte opacity)
CCLabelBMFont::setOpacity	label_nodes/CCLabelBMFont.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCLabelBMFont	access:public	signature:(GLubyte opacity)
CCLabelBMFont::setOpacityModifyRGB	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setOpacityModifyRGB(bool var)$/;"	f	class:CCLabelBMFont	signature:(bool var)
CCLabelBMFont::setOpacityModifyRGB	label_nodes/CCLabelBMFont.h	/^    virtual void setOpacityModifyRGB(bool isOpacityModifyRGB); virtual GLubyte getOpacity();$/;"	p	class:CCLabelBMFont	access:public	signature:(bool isOpacityModifyRGB)
CCLabelBMFont::setScale	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setScale(float scale)$/;"	f	class:CCLabelBMFont	signature:(float scale)
CCLabelBMFont::setScale	label_nodes/CCLabelBMFont.h	/^    virtual void setScale(float scale);$/;"	p	class:CCLabelBMFont	access:public	signature:(float scale)
CCLabelBMFont::setScaleX	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setScaleX(float scaleX)$/;"	f	class:CCLabelBMFont	signature:(float scaleX)
CCLabelBMFont::setScaleX	label_nodes/CCLabelBMFont.h	/^    virtual void setScaleX(float scaleX);$/;"	p	class:CCLabelBMFont	access:public	signature:(float scaleX)
CCLabelBMFont::setScaleY	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setScaleY(float scaleY)$/;"	f	class:CCLabelBMFont	signature:(float scaleY)
CCLabelBMFont::setScaleY	label_nodes/CCLabelBMFont.h	/^    virtual void setScaleY(float scaleY);$/;"	p	class:CCLabelBMFont	access:public	signature:(float scaleY)
CCLabelBMFont::setString	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setString(const char *newString)$/;"	f	class:CCLabelBMFont	signature:(const char *newString)
CCLabelBMFont::setString	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setString(const char *newString, bool needUpdateLabel)$/;"	f	class:CCLabelBMFont	signature:(const char *newString, bool needUpdateLabel)
CCLabelBMFont::setString	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setString(unsigned short *newString, bool needUpdateLabel)$/;"	f	class:CCLabelBMFont	signature:(unsigned short *newString, bool needUpdateLabel)
CCLabelBMFont::setString	label_nodes/CCLabelBMFont.h	/^    virtual void setString(const char *newString);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *newString)
CCLabelBMFont::setString	label_nodes/CCLabelBMFont.h	/^    virtual void setString(const char *newString, bool needUpdateLabel);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *newString, bool needUpdateLabel)
CCLabelBMFont::setString	label_nodes/CCLabelBMFont.h	/^    virtual void setString(unsigned short *newString, bool needUpdateLabel);$/;"	p	class:CCLabelBMFont	access:protected	signature:(unsigned short *newString, bool needUpdateLabel)
CCLabelBMFont::setWidth	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setWidth(float width)$/;"	f	class:CCLabelBMFont	signature:(float width)
CCLabelBMFont::setWidth	label_nodes/CCLabelBMFont.h	/^    virtual void setWidth(float width);$/;"	p	class:CCLabelBMFont	access:public	signature:(float width)
CCLabelBMFont::updateDisplayedColor	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::updateDisplayedColor(const ccColor3B& parentColor)$/;"	f	class:CCLabelBMFont	signature:(const ccColor3B& parentColor)
CCLabelBMFont::updateDisplayedColor	label_nodes/CCLabelBMFont.h	/^    virtual void updateDisplayedColor(const ccColor3B& parentColor);$/;"	p	class:CCLabelBMFont	access:public	signature:(const ccColor3B& parentColor)
CCLabelBMFont::updateDisplayedOpacity	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::updateDisplayedOpacity(GLubyte parentOpacity)$/;"	f	class:CCLabelBMFont	signature:(GLubyte parentOpacity)
CCLabelBMFont::updateDisplayedOpacity	label_nodes/CCLabelBMFont.h	/^    virtual void updateDisplayedOpacity(GLubyte parentOpacity);$/;"	p	class:CCLabelBMFont	access:public	signature:(GLubyte parentOpacity)
CCLabelBMFont::updateLabel	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::updateLabel()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::updateLabel	label_nodes/CCLabelBMFont.h	/^    virtual void updateLabel();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelBMFont::~CCLabelBMFont	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont::~CCLabelBMFont()$/;"	f	class:CCLabelBMFont	signature:()
CCLabelBMFont::~CCLabelBMFont	label_nodes/CCLabelBMFont.h	/^    virtual ~CCLabelBMFont();$/;"	p	class:CCLabelBMFont	access:public	signature:()
CCLabelProtocol	include/CCProtocols.h	/^class CC_DLL CCLabelProtocol$/;"	c
CCLabelProtocol::getString	include/CCProtocols.h	/^    virtual const char* getString(void) = 0;$/;"	p	class:CCLabelProtocol	access:public	signature:(void)
CCLabelProtocol::setString	include/CCProtocols.h	/^    virtual void setString(const char *label) = 0;$/;"	p	class:CCLabelProtocol	access:public	signature:(const char *label)
CCLabelTTF	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF::CCLabelTTF()$/;"	f	class:CCLabelTTF	signature:()
CCLabelTTF	label_nodes/CCLabelTTF.h	/^    CCLabelTTF();$/;"	p	class:CCLabelTTF	access:public	signature:()
CCLabelTTF	label_nodes/CCLabelTTF.h	/^class CC_DLL CCLabelTTF : public CCSprite, public CCLabelProtocol$/;"	c	inherits:CCSprite,CCLabelProtocol
CCLabelTTF::CCLabelTTF	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF::CCLabelTTF()$/;"	f	class:CCLabelTTF	signature:()
CCLabelTTF::CCLabelTTF	label_nodes/CCLabelTTF.h	/^    CCLabelTTF();$/;"	p	class:CCLabelTTF	access:public	signature:()
CCLabelTTF::create	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF * CCLabelTTF::create()$/;"	f	class:CCLabelTTF	signature:()
CCLabelTTF::create	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF * CCLabelTTF::create(const char *string, const char *fontName, float fontSize)$/;"	f	class:CCLabelTTF	signature:(const char *string, const char *fontName, float fontSize)
CCLabelTTF::create	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF * CCLabelTTF::create(const char *string, const char *fontName, float fontSize,$/;"	f	class:CCLabelTTF	signature:(const char *string, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment)
CCLabelTTF::create	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF* CCLabelTTF::create(const char *string, const char *fontName, float fontSize,$/;"	f	class:CCLabelTTF	signature:(const char *string, const char *fontName, float fontSize, const CCSize &dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)
CCLabelTTF::create	label_nodes/CCLabelTTF.h	/^    static CCLabelTTF * create();$/;"	p	class:CCLabelTTF	access:public	signature:()
CCLabelTTF::create	label_nodes/CCLabelTTF.h	/^    static CCLabelTTF * create(const char *string, const char *fontName, float fontSize);$/;"	p	class:CCLabelTTF	access:public	signature:(const char *string, const char *fontName, float fontSize)
CCLabelTTF::create	label_nodes/CCLabelTTF.h	/^    static CCLabelTTF * create(const char *string, const char *fontName, float fontSize,$/;"	p	class:CCLabelTTF	access:public	signature:(const char *string, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment)
CCLabelTTF::create	label_nodes/CCLabelTTF.h	/^    static CCLabelTTF * create(const char *string, const char *fontName, float fontSize,$/;"	p	class:CCLabelTTF	access:public	signature:(const char *string, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)
CCLabelTTF::description	label_nodes/CCLabelTTF.cpp	/^const char* CCLabelTTF::description()$/;"	f	class:CCLabelTTF	signature:()
CCLabelTTF::description	label_nodes/CCLabelTTF.h	/^    const char* description();    $/;"	p	class:CCLabelTTF	access:public	signature:()
CCLabelTTF::getDimensions	label_nodes/CCLabelTTF.cpp	/^CCSize CCLabelTTF::getDimensions()$/;"	f	class:CCLabelTTF	signature:()
CCLabelTTF::getDimensions	label_nodes/CCLabelTTF.h	/^    CCSize getDimensions();$/;"	p	class:CCLabelTTF	access:public	signature:()
CCLabelTTF::getFontName	label_nodes/CCLabelTTF.cpp	/^const char* CCLabelTTF::getFontName()$/;"	f	class:CCLabelTTF	signature:()
CCLabelTTF::getFontName	label_nodes/CCLabelTTF.h	/^    const char* getFontName();$/;"	p	class:CCLabelTTF	access:public	signature:()
CCLabelTTF::getFontSize	label_nodes/CCLabelTTF.cpp	/^float CCLabelTTF::getFontSize()$/;"	f	class:CCLabelTTF	signature:()
CCLabelTTF::getFontSize	label_nodes/CCLabelTTF.h	/^    float getFontSize();$/;"	p	class:CCLabelTTF	access:public	signature:()
CCLabelTTF::getHorizontalAlignment	label_nodes/CCLabelTTF.cpp	/^CCTextAlignment CCLabelTTF::getHorizontalAlignment()$/;"	f	class:CCLabelTTF	signature:()
CCLabelTTF::getHorizontalAlignment	label_nodes/CCLabelTTF.h	/^    CCTextAlignment getHorizontalAlignment();$/;"	p	class:CCLabelTTF	access:public	signature:()
CCLabelTTF::getString	label_nodes/CCLabelTTF.cpp	/^const char* CCLabelTTF::getString(void)$/;"	f	class:CCLabelTTF	signature:(void)
CCLabelTTF::getString	label_nodes/CCLabelTTF.h	/^    virtual const char* getString(void);$/;"	p	class:CCLabelTTF	access:public	signature:(void)
CCLabelTTF::getVerticalAlignment	label_nodes/CCLabelTTF.cpp	/^CCVerticalTextAlignment CCLabelTTF::getVerticalAlignment()$/;"	f	class:CCLabelTTF	signature:()
CCLabelTTF::getVerticalAlignment	label_nodes/CCLabelTTF.h	/^    CCVerticalTextAlignment getVerticalAlignment();$/;"	p	class:CCLabelTTF	access:public	signature:()
CCLabelTTF::init	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::init()$/;"	f	class:CCLabelTTF	signature:()
CCLabelTTF::init	label_nodes/CCLabelTTF.h	/^    bool init();$/;"	p	class:CCLabelTTF	access:public	signature:()
CCLabelTTF::initWithString	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::initWithString(const char *label, const char *fontName, float fontSize)$/;"	f	class:CCLabelTTF	signature:(const char *label, const char *fontName, float fontSize)
CCLabelTTF::initWithString	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::initWithString(const char *label, const char *fontName, float fontSize, $/;"	f	class:CCLabelTTF	signature:(const char *label, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment alignment)
CCLabelTTF::initWithString	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::initWithString(const char *string, const char *fontName, float fontSize,$/;"	f	class:CCLabelTTF	signature:(const char *string, const char *fontName, float fontSize, const cocos2d::CCSize &dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)
CCLabelTTF::initWithString	label_nodes/CCLabelTTF.h	/^    bool initWithString(const char *string, const char *fontName, float fontSize);$/;"	p	class:CCLabelTTF	access:public	signature:(const char *string, const char *fontName, float fontSize)
CCLabelTTF::initWithString	label_nodes/CCLabelTTF.h	/^    bool initWithString(const char *string, const char *fontName, float fontSize,$/;"	p	class:CCLabelTTF	access:public	signature:(const char *string, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment)
CCLabelTTF::initWithString	label_nodes/CCLabelTTF.h	/^    bool initWithString(const char *string, const char *fontName, float fontSize,$/;"	p	class:CCLabelTTF	access:public	signature:(const char *string, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)
CCLabelTTF::m_fFontSize	label_nodes/CCLabelTTF.h	/^    float m_fFontSize;$/;"	m	class:CCLabelTTF	access:protected
CCLabelTTF::m_hAlignment	label_nodes/CCLabelTTF.h	/^    CCTextAlignment         m_hAlignment;$/;"	m	class:CCLabelTTF	access:protected
CCLabelTTF::m_pFontName	label_nodes/CCLabelTTF.h	/^    std::string * m_pFontName;$/;"	m	class:CCLabelTTF	access:protected
CCLabelTTF::m_string	label_nodes/CCLabelTTF.h	/^    std::string m_string;$/;"	m	class:CCLabelTTF	access:protected
CCLabelTTF::m_tDimensions	label_nodes/CCLabelTTF.h	/^    CCSize m_tDimensions;$/;"	m	class:CCLabelTTF	access:protected
CCLabelTTF::m_vAlignment	label_nodes/CCLabelTTF.h	/^    CCVerticalTextAlignment m_vAlignment;$/;"	m	class:CCLabelTTF	access:protected
CCLabelTTF::setDimensions	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setDimensions(const CCSize &dim)$/;"	f	class:CCLabelTTF	signature:(const CCSize &dim)
CCLabelTTF::setDimensions	label_nodes/CCLabelTTF.h	/^    void setDimensions(const CCSize &dim);$/;"	p	class:CCLabelTTF	access:public	signature:(const CCSize &dim)
CCLabelTTF::setFontName	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setFontName(const char *fontName)$/;"	f	class:CCLabelTTF	signature:(const char *fontName)
CCLabelTTF::setFontName	label_nodes/CCLabelTTF.h	/^    void setFontName(const char *fontName);$/;"	p	class:CCLabelTTF	access:public	signature:(const char *fontName)
CCLabelTTF::setFontSize	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setFontSize(float fontSize)$/;"	f	class:CCLabelTTF	signature:(float fontSize)
CCLabelTTF::setFontSize	label_nodes/CCLabelTTF.h	/^    void setFontSize(float fontSize);$/;"	p	class:CCLabelTTF	access:public	signature:(float fontSize)
CCLabelTTF::setHorizontalAlignment	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setHorizontalAlignment(CCTextAlignment alignment)$/;"	f	class:CCLabelTTF	signature:(CCTextAlignment alignment)
CCLabelTTF::setHorizontalAlignment	label_nodes/CCLabelTTF.h	/^    void setHorizontalAlignment(CCTextAlignment alignment);$/;"	p	class:CCLabelTTF	access:public	signature:(CCTextAlignment alignment)
CCLabelTTF::setString	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setString(const char *string)$/;"	f	class:CCLabelTTF	signature:(const char *string)
CCLabelTTF::setString	label_nodes/CCLabelTTF.h	/^    virtual void setString(const char *label);$/;"	p	class:CCLabelTTF	access:public	signature:(const char *label)
CCLabelTTF::setVerticalAlignment	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setVerticalAlignment(CCVerticalTextAlignment verticalAlignment)$/;"	f	class:CCLabelTTF	signature:(CCVerticalTextAlignment verticalAlignment)
CCLabelTTF::setVerticalAlignment	label_nodes/CCLabelTTF.h	/^    void setVerticalAlignment(CCVerticalTextAlignment verticalAlignment);$/;"	p	class:CCLabelTTF	access:public	signature:(CCVerticalTextAlignment verticalAlignment)
CCLabelTTF::updateTexture	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::updateTexture()$/;"	f	class:CCLabelTTF	signature:()
CCLabelTTF::updateTexture	label_nodes/CCLabelTTF.h	/^    bool updateTexture();$/;"	p	class:CCLabelTTF	access:private	signature:()
CCLabelTTF::~CCLabelTTF	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF::~CCLabelTTF()$/;"	f	class:CCLabelTTF	signature:()
CCLabelTTF::~CCLabelTTF	label_nodes/CCLabelTTF.h	/^    virtual ~CCLabelTTF();$/;"	p	class:CCLabelTTF	access:public	signature:()
CCLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayer::CCLayer()$/;"	f	class:CCLayer	signature:()
CCLayer	layers_scenes_transitions_nodes/CCLayer.h	/^    CCLayer();$/;"	p	class:CCLayer	access:public	signature:()
CCLayer	layers_scenes_transitions_nodes/CCLayer.h	/^class CC_DLL CCLayer : public CCNode, public CCTouchDelegate, public CCAccelerometerDelegate, public CCKeypadDelegate$/;"	c	inherits:CCNode,CCTouchDelegate,CCAccelerometerDelegate,CCKeypadDelegate
CCLayer::CCLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayer::CCLayer()$/;"	f	class:CCLayer	signature:()
CCLayer::CCLayer	layers_scenes_transitions_nodes/CCLayer.h	/^    CCLayer();$/;"	p	class:CCLayer	access:public	signature:()
CCLayer::ccTouchBegan	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCLayer::ccTouchBegan	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCLayer::ccTouchCancelled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCLayer::ccTouchCancelled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCLayer::ccTouchEnded	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCLayer::ccTouchEnded	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCLayer::ccTouchMoved	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCLayer::ccTouchMoved	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCLayer::ccTouchesBegan	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCSet *pTouches, CCEvent *pEvent)
CCLayer::ccTouchesBegan	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
CCLayer::ccTouchesCancelled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCSet *pTouches, CCEvent *pEvent)
CCLayer::ccTouchesCancelled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
CCLayer::ccTouchesEnded	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCSet *pTouches, CCEvent *pEvent)
CCLayer::ccTouchesEnded	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
CCLayer::ccTouchesMoved	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCSet *pTouches, CCEvent *pEvent)
CCLayer::ccTouchesMoved	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
CCLayer::create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayer *CCLayer::create()$/;"	f	class:CCLayer	signature:()
CCLayer::create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayer *create(void);$/;"	p	class:CCLayer	access:public	signature:(void)
CCLayer::didAccelerate	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::didAccelerate(CCAcceleration* pAccelerationValue)$/;"	f	class:CCLayer	signature:(CCAcceleration* pAccelerationValue)
CCLayer::didAccelerate	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void didAccelerate(CCAcceleration* pAccelerationValue);$/;"	p	class:CCLayer	access:public	signature:(CCAcceleration* pAccelerationValue)
CCLayer::excuteScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^int CCLayer::excuteScriptTouchHandler(int nEventType, CCSet *pTouches)$/;"	f	class:CCLayer	signature:(int nEventType, CCSet *pTouches)
CCLayer::excuteScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^int CCLayer::excuteScriptTouchHandler(int nEventType, CCTouch *pTouch)$/;"	f	class:CCLayer	signature:(int nEventType, CCTouch *pTouch)
CCLayer::excuteScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    int  excuteScriptTouchHandler(int nEventType, CCSet *pTouches);$/;"	p	class:CCLayer	access:private	signature:(int nEventType, CCSet *pTouches)
CCLayer::excuteScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    int  excuteScriptTouchHandler(int nEventType, CCTouch *pTouch);$/;"	p	class:CCLayer	access:private	signature:(int nEventType, CCTouch *pTouch)
CCLayer::getScriptAccelerateHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    inline CCScriptHandlerEntry* getScriptAccelerateHandlerEntry() { return m_pScriptAccelerateHandlerEntry; };$/;"	f	class:CCLayer	access:public	signature:()
CCLayer::getScriptKeypadHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    inline CCScriptHandlerEntry* getScriptKeypadHandlerEntry() { return m_pScriptKeypadHandlerEntry; };$/;"	f	class:CCLayer	access:public	signature:()
CCLayer::getScriptTouchHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    inline CCTouchScriptHandlerEntry* getScriptTouchHandlerEntry() { return m_pScriptTouchHandlerEntry; };$/;"	f	class:CCLayer	access:public	signature:()
CCLayer::getTouchMode	layers_scenes_transitions_nodes/CCLayer.cpp	/^int CCLayer::getTouchMode()$/;"	f	class:CCLayer	signature:()
CCLayer::getTouchMode	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual int getTouchMode();$/;"	p	class:CCLayer	access:public	signature:()
CCLayer::getTouchPriority	layers_scenes_transitions_nodes/CCLayer.cpp	/^int CCLayer::getTouchPriority()$/;"	f	class:CCLayer	signature:()
CCLayer::getTouchPriority	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual int getTouchPriority();$/;"	p	class:CCLayer	access:public	signature:()
CCLayer::init	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::init()$/;"	f	class:CCLayer	signature:()
CCLayer::init	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool init();$/;"	p	class:CCLayer	access:public	signature:()
CCLayer::isAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::isAccelerometerEnabled()$/;"	f	class:CCLayer	signature:()
CCLayer::isAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isAccelerometerEnabled();$/;"	p	class:CCLayer	access:public	signature:()
CCLayer::isKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::isKeypadEnabled()$/;"	f	class:CCLayer	signature:()
CCLayer::isKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isKeypadEnabled();$/;"	p	class:CCLayer	access:public	signature:()
CCLayer::isTouchEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::isTouchEnabled()$/;"	f	class:CCLayer	signature:()
CCLayer::isTouchEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isTouchEnabled();$/;"	p	class:CCLayer	access:public	signature:()
CCLayer::keyBackClicked	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::keyBackClicked(void)$/;"	f	class:CCLayer	signature:(void)
CCLayer::keyBackClicked	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void keyBackClicked(void);$/;"	p	class:CCLayer	access:public	signature:(void)
CCLayer::keyMenuClicked	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::keyMenuClicked(void)$/;"	f	class:CCLayer	signature:(void)
CCLayer::keyMenuClicked	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void keyMenuClicked(void);$/;"	p	class:CCLayer	access:public	signature:(void)
CCLayer::m_bAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    bool m_bAccelerometerEnabled;$/;"	m	class:CCLayer	access:protected
CCLayer::m_bKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    bool m_bKeypadEnabled;$/;"	m	class:CCLayer	access:protected
CCLayer::m_bTouchEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    bool m_bTouchEnabled;$/;"	m	class:CCLayer	access:protected
CCLayer::m_eTouchMode	layers_scenes_transitions_nodes/CCLayer.h	/^    ccTouchesMode m_eTouchMode;$/;"	m	class:CCLayer	access:private
CCLayer::m_nTouchPriority	layers_scenes_transitions_nodes/CCLayer.h	/^    int m_nTouchPriority;$/;"	m	class:CCLayer	access:private
CCLayer::m_pScriptAccelerateHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    CCScriptHandlerEntry* m_pScriptAccelerateHandlerEntry;$/;"	m	class:CCLayer	access:private
CCLayer::m_pScriptKeypadHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    CCScriptHandlerEntry* m_pScriptKeypadHandlerEntry;$/;"	m	class:CCLayer	access:private
CCLayer::m_pScriptTouchHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    CCTouchScriptHandlerEntry* m_pScriptTouchHandlerEntry;$/;"	m	class:CCLayer	access:private
CCLayer::onEnter	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::onEnter()$/;"	f	class:CCLayer	signature:()
CCLayer::onEnter	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void onEnter();$/;"	p	class:CCLayer	access:public	signature:()
CCLayer::onEnterTransitionDidFinish	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::onEnterTransitionDidFinish()$/;"	f	class:CCLayer	signature:()
CCLayer::onEnterTransitionDidFinish	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void onEnterTransitionDidFinish();$/;"	p	class:CCLayer	access:public	signature:()
CCLayer::onExit	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::onExit()$/;"	f	class:CCLayer	signature:()
CCLayer::onExit	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void onExit();$/;"	p	class:CCLayer	access:public	signature:()
CCLayer::registerScriptAccelerateHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::registerScriptAccelerateHandler(int nHandler)$/;"	f	class:CCLayer	signature:(int nHandler)
CCLayer::registerScriptAccelerateHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    void registerScriptAccelerateHandler(int nHandler);$/;"	p	class:CCLayer	access:public	signature:(int nHandler)
CCLayer::registerScriptKeypadHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::registerScriptKeypadHandler(int nHandler)$/;"	f	class:CCLayer	signature:(int nHandler)
CCLayer::registerScriptKeypadHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    void registerScriptKeypadHandler(int nHandler);$/;"	p	class:CCLayer	access:public	signature:(int nHandler)
CCLayer::registerScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::registerScriptTouchHandler(int nHandler, bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)$/;"	f	class:CCLayer	signature:(int nHandler, bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)
CCLayer::registerScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void registerScriptTouchHandler(int nHandler, bool bIsMultiTouches = false, int nPriority = INT_MIN, bool bSwallowsTouches = false);$/;"	p	class:CCLayer	access:public	signature:(int nHandler, bool bIsMultiTouches = false, int nPriority = INT_MIN, bool bSwallowsTouches = false)
CCLayer::registerWithTouchDispatcher	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::registerWithTouchDispatcher()$/;"	f	class:CCLayer	signature:()
CCLayer::registerWithTouchDispatcher	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void registerWithTouchDispatcher(void);$/;"	p	class:CCLayer	access:public	signature:(void)
CCLayer::setAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setAccelerometerEnabled(bool enabled)$/;"	f	class:CCLayer	signature:(bool enabled)
CCLayer::setAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setAccelerometerEnabled(bool value);$/;"	p	class:CCLayer	access:public	signature:(bool value)
CCLayer::setAccelerometerInterval	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setAccelerometerInterval(double interval) {$/;"	f	class:CCLayer	signature:(double interval)
CCLayer::setAccelerometerInterval	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setAccelerometerInterval(double interval);$/;"	p	class:CCLayer	access:public	signature:(double interval)
CCLayer::setKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setKeypadEnabled(bool enabled)$/;"	f	class:CCLayer	signature:(bool enabled)
CCLayer::setKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setKeypadEnabled(bool value);$/;"	p	class:CCLayer	access:public	signature:(bool value)
CCLayer::setTouchEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setTouchEnabled(bool enabled)$/;"	f	class:CCLayer	signature:(bool enabled)
CCLayer::setTouchEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setTouchEnabled(bool value);$/;"	p	class:CCLayer	access:public	signature:(bool value)
CCLayer::setTouchMode	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setTouchMode(ccTouchesMode mode)$/;"	f	class:CCLayer	signature:(ccTouchesMode mode)
CCLayer::setTouchMode	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setTouchMode(ccTouchesMode mode);$/;"	p	class:CCLayer	access:public	signature:(ccTouchesMode mode)
CCLayer::setTouchPriority	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setTouchPriority(int priority)$/;"	f	class:CCLayer	signature:(int priority)
CCLayer::setTouchPriority	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setTouchPriority(int priority);$/;"	p	class:CCLayer	access:public	signature:(int priority)
CCLayer::unregisterScriptAccelerateHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::unregisterScriptAccelerateHandler(void)$/;"	f	class:CCLayer	signature:(void)
CCLayer::unregisterScriptAccelerateHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    void unregisterScriptAccelerateHandler(void);$/;"	p	class:CCLayer	access:public	signature:(void)
CCLayer::unregisterScriptKeypadHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::unregisterScriptKeypadHandler(void)$/;"	f	class:CCLayer	signature:(void)
CCLayer::unregisterScriptKeypadHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    void unregisterScriptKeypadHandler(void);$/;"	p	class:CCLayer	access:public	signature:(void)
CCLayer::unregisterScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::unregisterScriptTouchHandler(void)$/;"	f	class:CCLayer	signature:(void)
CCLayer::unregisterScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void unregisterScriptTouchHandler(void);$/;"	p	class:CCLayer	access:public	signature:(void)
CCLayer::~CCLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayer::~CCLayer()$/;"	f	class:CCLayer	signature:()
CCLayer::~CCLayer	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual ~CCLayer();$/;"	p	class:CCLayer	access:public	signature:()
CCLayerColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor::CCLayerColor()$/;"	f	class:CCLayerColor	signature:()
CCLayerColor	layers_scenes_transitions_nodes/CCLayer.h	/^    CCLayerColor();$/;"	p	class:CCLayerColor	access:public	signature:()
CCLayerColor	layers_scenes_transitions_nodes/CCLayer.h	/^class CC_DLL CCLayerColor : public CCLayerRGBA, public CCBlendProtocol$/;"	c	inherits:CCLayerRGBA,CCBlendProtocol
CCLayerColor::CCLayerColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor::CCLayerColor()$/;"	f	class:CCLayerColor	signature:()
CCLayerColor::CCLayerColor	layers_scenes_transitions_nodes/CCLayer.h	/^    CCLayerColor();$/;"	p	class:CCLayerColor	access:public	signature:()
CCLayerColor::changeHeight	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::changeHeight(GLfloat h)$/;"	f	class:CCLayerColor	signature:(GLfloat h)
CCLayerColor::changeHeight	layers_scenes_transitions_nodes/CCLayer.h	/^    void changeHeight(GLfloat h);$/;"	p	class:CCLayerColor	access:public	signature:(GLfloat h)
CCLayerColor::changeWidth	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::changeWidth(GLfloat w)$/;"	f	class:CCLayerColor	signature:(GLfloat w)
CCLayerColor::changeWidth	layers_scenes_transitions_nodes/CCLayer.h	/^    void changeWidth(GLfloat w);$/;"	p	class:CCLayerColor	access:public	signature:(GLfloat w)
CCLayerColor::changeWidthAndHeight	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::changeWidthAndHeight(GLfloat w ,GLfloat h)$/;"	f	class:CCLayerColor	signature:(GLfloat w ,GLfloat h)
CCLayerColor::changeWidthAndHeight	layers_scenes_transitions_nodes/CCLayer.h	/^    void changeWidthAndHeight(GLfloat w ,GLfloat h);$/;"	p	class:CCLayerColor	access:public	signature:(GLfloat w ,GLfloat h)
CCLayerColor::create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor * CCLayerColor::create(const ccColor4B& color)$/;"	f	class:CCLayerColor	signature:(const ccColor4B& color)
CCLayerColor::create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor * CCLayerColor::create(const ccColor4B& color, GLfloat width, GLfloat height)$/;"	f	class:CCLayerColor	signature:(const ccColor4B& color, GLfloat width, GLfloat height)
CCLayerColor::create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor* CCLayerColor::create()$/;"	f	class:CCLayerColor	signature:()
CCLayerColor::create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerColor * create(const ccColor4B& color);$/;"	p	class:CCLayerColor	access:public	signature:(const ccColor4B& color)
CCLayerColor::create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerColor * create(const ccColor4B& color, GLfloat width, GLfloat height);$/;"	p	class:CCLayerColor	access:public	signature:(const ccColor4B& color, GLfloat width, GLfloat height)
CCLayerColor::create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerColor* create();$/;"	p	class:CCLayerColor	access:public	signature:()
CCLayerColor::draw	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::draw()$/;"	f	class:CCLayerColor	signature:()
CCLayerColor::draw	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void draw();$/;"	p	class:CCLayerColor	access:public	signature:()
CCLayerColor::getBlendFunc	layers_scenes_transitions_nodes/CCLayer.cpp	/^ccBlendFunc CCLayerColor::getBlendFunc()$/;"	f	class:CCLayerColor	signature:()
CCLayerColor::init	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerColor::init()$/;"	f	class:CCLayerColor	signature:()
CCLayerColor::init	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool init();$/;"	p	class:CCLayerColor	access:public	signature:()
CCLayerColor::initWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerColor::initWithColor(const ccColor4B& color)$/;"	f	class:CCLayerColor	signature:(const ccColor4B& color)
CCLayerColor::initWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerColor::initWithColor(const ccColor4B& color, GLfloat w, GLfloat h)$/;"	f	class:CCLayerColor	signature:(const ccColor4B& color, GLfloat w, GLfloat h)
CCLayerColor::initWithColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool initWithColor(const ccColor4B& color);$/;"	p	class:CCLayerColor	access:public	signature:(const ccColor4B& color)
CCLayerColor::initWithColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool initWithColor(const ccColor4B& color, GLfloat width, GLfloat height);$/;"	p	class:CCLayerColor	access:public	signature:(const ccColor4B& color, GLfloat width, GLfloat height)
CCLayerColor::isOpacityModifyRGB	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCLayerColor	access:public	signature:(void)
CCLayerColor::m_pSquareColors	layers_scenes_transitions_nodes/CCLayer.h	/^    ccColor4F  m_pSquareColors[4];$/;"	m	class:CCLayerColor	access:protected
CCLayerColor::m_pSquareVertices	layers_scenes_transitions_nodes/CCLayer.h	/^    ccVertex2F m_pSquareVertices[4];$/;"	m	class:CCLayerColor	access:protected
CCLayerColor::setBlendFunc	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::setBlendFunc(ccBlendFunc var)$/;"	f	class:CCLayerColor	signature:(ccBlendFunc var)
CCLayerColor::setColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::setColor(const ccColor3B &color)$/;"	f	class:CCLayerColor	signature:(const ccColor3B &color)
CCLayerColor::setColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setColor(const ccColor3B &color);$/;"	p	class:CCLayerColor	access:public	signature:(const ccColor3B &color)
CCLayerColor::setContentSize	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::setContentSize(const CCSize & size)$/;"	f	class:CCLayerColor	signature:(const CCSize & size)
CCLayerColor::setContentSize	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setContentSize(const CCSize & var);$/;"	p	class:CCLayerColor	access:public	signature:(const CCSize & var)
CCLayerColor::setOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::setOpacity(GLubyte opacity)$/;"	f	class:CCLayerColor	signature:(GLubyte opacity)
CCLayerColor::setOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCLayerColor	access:public	signature:(GLubyte opacity)
CCLayerColor::setOpacityModifyRGB	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCLayerColor	access:public	signature:(bool bValue)
CCLayerColor::updateColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::updateColor()$/;"	f	class:CCLayerColor	signature:()
CCLayerColor::updateColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void updateColor();$/;"	p	class:CCLayerColor	access:protected	signature:()
CCLayerColor::~CCLayerColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor::~CCLayerColor()$/;"	f	class:CCLayerColor	signature:()
CCLayerColor::~CCLayerColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual ~CCLayerColor();$/;"	p	class:CCLayerColor	access:public	signature:()
CCLayerGradient	layers_scenes_transitions_nodes/CCLayer.h	/^class CC_DLL CCLayerGradient : public CCLayerColor$/;"	c	inherits:CCLayerColor
CCLayerGradient::create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerGradient* CCLayerGradient::create()$/;"	f	class:CCLayerGradient	signature:()
CCLayerGradient::create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerGradient* CCLayerGradient::create(const ccColor4B& start, const ccColor4B& end)$/;"	f	class:CCLayerGradient	signature:(const ccColor4B& start, const ccColor4B& end)
CCLayerGradient::create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerGradient* CCLayerGradient::create(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)$/;"	f	class:CCLayerGradient	signature:(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)
CCLayerGradient::create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerGradient* create();$/;"	p	class:CCLayerGradient	access:public	signature:()
CCLayerGradient::create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerGradient* create(const ccColor4B& start, const ccColor4B& end);$/;"	p	class:CCLayerGradient	access:public	signature:(const ccColor4B& start, const ccColor4B& end)
CCLayerGradient::create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerGradient* create(const ccColor4B& start, const ccColor4B& end, const CCPoint& v);$/;"	p	class:CCLayerGradient	access:public	signature:(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)
CCLayerGradient::getEndColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^const ccColor3B& CCLayerGradient::getEndColor()$/;"	f	class:CCLayerGradient	signature:()
CCLayerGradient::getEndOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^GLubyte CCLayerGradient::getEndOpacity()$/;"	f	class:CCLayerGradient	signature:()
CCLayerGradient::getStartColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^const ccColor3B& CCLayerGradient::getStartColor()$/;"	f	class:CCLayerGradient	signature:()
CCLayerGradient::getStartOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^GLubyte CCLayerGradient::getStartOpacity()$/;"	f	class:CCLayerGradient	signature:()
CCLayerGradient::getVector	layers_scenes_transitions_nodes/CCLayer.cpp	/^const CCPoint& CCLayerGradient::getVector()$/;"	f	class:CCLayerGradient	signature:()
CCLayerGradient::init	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerGradient::init()$/;"	f	class:CCLayerGradient	signature:()
CCLayerGradient::init	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool init();$/;"	p	class:CCLayerGradient	access:public	signature:()
CCLayerGradient::initWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerGradient::initWithColor(const ccColor4B& start, const ccColor4B& end)$/;"	f	class:CCLayerGradient	signature:(const ccColor4B& start, const ccColor4B& end)
CCLayerGradient::initWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerGradient::initWithColor(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)$/;"	f	class:CCLayerGradient	signature:(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)
CCLayerGradient::initWithColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool initWithColor(const ccColor4B& start, const ccColor4B& end);$/;"	p	class:CCLayerGradient	access:public	signature:(const ccColor4B& start, const ccColor4B& end)
CCLayerGradient::initWithColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool initWithColor(const ccColor4B& start, const ccColor4B& end, const CCPoint& v);$/;"	p	class:CCLayerGradient	access:public	signature:(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)
CCLayerGradient::isCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerGradient::isCompressedInterpolation()$/;"	f	class:CCLayerGradient	signature:()
CCLayerGradient::isCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isCompressedInterpolation();$/;"	p	class:CCLayerGradient	access:public	signature:()
CCLayerGradient::m_bCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.h	/^    bool m_bCompressedInterpolation;$/;"	m	class:CCLayerGradient	access:protected
CCLayerGradient::setCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setCompressedInterpolation(bool compress)$/;"	f	class:CCLayerGradient	signature:(bool compress)
CCLayerGradient::setCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setCompressedInterpolation(bool bCompressedInterpolation);$/;"	p	class:CCLayerGradient	access:public	signature:(bool bCompressedInterpolation)
CCLayerGradient::setEndColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setEndColor(const ccColor3B& color)$/;"	f	class:CCLayerGradient	signature:(const ccColor3B& color)
CCLayerGradient::setEndOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setEndOpacity(GLubyte o)$/;"	f	class:CCLayerGradient	signature:(GLubyte o)
CCLayerGradient::setStartColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setStartColor(const ccColor3B& color)$/;"	f	class:CCLayerGradient	signature:(const ccColor3B& color)
CCLayerGradient::setStartOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setStartOpacity(GLubyte o)$/;"	f	class:CCLayerGradient	signature:(GLubyte o)
CCLayerGradient::setVector	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setVector(const CCPoint& var)$/;"	f	class:CCLayerGradient	signature:(const CCPoint& var)
CCLayerGradient::updateColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::updateColor()$/;"	f	class:CCLayerGradient	signature:()
CCLayerGradient::updateColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void updateColor();$/;"	p	class:CCLayerGradient	access:protected	signature:()
CCLayerMultiplex	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex::CCLayerMultiplex()$/;"	f	class:CCLayerMultiplex	signature:()
CCLayerMultiplex	layers_scenes_transitions_nodes/CCLayer.h	/^    CCLayerMultiplex();$/;"	p	class:CCLayerMultiplex	access:public	signature:()
CCLayerMultiplex	layers_scenes_transitions_nodes/CCLayer.h	/^class CC_DLL CCLayerMultiplex : public CCLayer$/;"	c	inherits:CCLayer
CCLayerMultiplex::CCLayerMultiplex	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex::CCLayerMultiplex()$/;"	f	class:CCLayerMultiplex	signature:()
CCLayerMultiplex::CCLayerMultiplex	layers_scenes_transitions_nodes/CCLayer.h	/^    CCLayerMultiplex();$/;"	p	class:CCLayerMultiplex	access:public	signature:()
CCLayerMultiplex::addLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerMultiplex::addLayer(CCLayer* layer)$/;"	f	class:CCLayerMultiplex	signature:(CCLayer* layer)
CCLayerMultiplex::addLayer	layers_scenes_transitions_nodes/CCLayer.h	/^    void addLayer(CCLayer* layer);$/;"	p	class:CCLayerMultiplex	access:public	signature:(CCLayer* layer)
CCLayerMultiplex::create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex * CCLayerMultiplex::create(CCLayer * layer, ...)$/;"	f	class:CCLayerMultiplex	signature:(CCLayer * layer, ...)
CCLayerMultiplex::create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex* CCLayerMultiplex::create()$/;"	f	class:CCLayerMultiplex	signature:()
CCLayerMultiplex::create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerMultiplex * create(CCLayer* layer, ... );$/;"	p	class:CCLayerMultiplex	access:public	signature:(CCLayer* layer, ... )
CCLayerMultiplex::create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerMultiplex* create();$/;"	p	class:CCLayerMultiplex	access:public	signature:()
CCLayerMultiplex::createWithArray	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex* CCLayerMultiplex::createWithArray(CCArray* arrayOfLayers)$/;"	f	class:CCLayerMultiplex	signature:(CCArray* arrayOfLayers)
CCLayerMultiplex::createWithArray	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerMultiplex* createWithArray(CCArray* arrayOfLayers);$/;"	p	class:CCLayerMultiplex	access:public	signature:(CCArray* arrayOfLayers)
CCLayerMultiplex::createWithLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex * CCLayerMultiplex::createWithLayer(CCLayer* layer)$/;"	f	class:CCLayerMultiplex	signature:(CCLayer* layer)
CCLayerMultiplex::createWithLayer	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerMultiplex * createWithLayer(CCLayer* layer);$/;"	p	class:CCLayerMultiplex	access:public	signature:(CCLayer* layer)
CCLayerMultiplex::initWithArray	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerMultiplex::initWithArray(CCArray* arrayOfLayers)$/;"	f	class:CCLayerMultiplex	signature:(CCArray* arrayOfLayers)
CCLayerMultiplex::initWithArray	layers_scenes_transitions_nodes/CCLayer.h	/^    bool initWithArray(CCArray* arrayOfLayers);$/;"	p	class:CCLayerMultiplex	access:public	signature:(CCArray* arrayOfLayers)
CCLayerMultiplex::initWithLayers	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerMultiplex::initWithLayers(CCLayer *layer, va_list params)$/;"	f	class:CCLayerMultiplex	signature:(CCLayer *layer, va_list params)
CCLayerMultiplex::initWithLayers	layers_scenes_transitions_nodes/CCLayer.h	/^    bool initWithLayers(CCLayer* layer, va_list params);$/;"	p	class:CCLayerMultiplex	access:public	signature:(CCLayer* layer, va_list params)
CCLayerMultiplex::m_nEnabledLayer	layers_scenes_transitions_nodes/CCLayer.h	/^    unsigned int m_nEnabledLayer;$/;"	m	class:CCLayerMultiplex	access:protected
CCLayerMultiplex::m_pLayers	layers_scenes_transitions_nodes/CCLayer.h	/^    CCArray*     m_pLayers;$/;"	m	class:CCLayerMultiplex	access:protected
CCLayerMultiplex::switchTo	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerMultiplex::switchTo(unsigned int n)$/;"	f	class:CCLayerMultiplex	signature:(unsigned int n)
CCLayerMultiplex::switchTo	layers_scenes_transitions_nodes/CCLayer.h	/^    void switchTo(unsigned int n);$/;"	p	class:CCLayerMultiplex	access:public	signature:(unsigned int n)
CCLayerMultiplex::switchToAndReleaseMe	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerMultiplex::switchToAndReleaseMe(unsigned int n)$/;"	f	class:CCLayerMultiplex	signature:(unsigned int n)
CCLayerMultiplex::switchToAndReleaseMe	layers_scenes_transitions_nodes/CCLayer.h	/^    void switchToAndReleaseMe(unsigned int n);$/;"	p	class:CCLayerMultiplex	access:public	signature:(unsigned int n)
CCLayerMultiplex::~CCLayerMultiplex	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex::~CCLayerMultiplex()$/;"	f	class:CCLayerMultiplex	signature:()
CCLayerMultiplex::~CCLayerMultiplex	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual ~CCLayerMultiplex();$/;"	p	class:CCLayerMultiplex	access:public	signature:()
CCLayerRGBA	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerRGBA::CCLayerRGBA()$/;"	f	class:CCLayerRGBA	signature:()
CCLayerRGBA	layers_scenes_transitions_nodes/CCLayer.h	/^    CCLayerRGBA();$/;"	p	class:CCLayerRGBA	access:public	signature:()
CCLayerRGBA	layers_scenes_transitions_nodes/CCLayer.h	/^class CC_DLL CCLayerRGBA : public CCLayer, public CCRGBAProtocol$/;"	c	inherits:CCLayer,CCRGBAProtocol
CCLayerRGBA::CCLayerRGBA	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerRGBA::CCLayerRGBA()$/;"	f	class:CCLayerRGBA	signature:()
CCLayerRGBA::CCLayerRGBA	layers_scenes_transitions_nodes/CCLayer.h	/^    CCLayerRGBA();$/;"	p	class:CCLayerRGBA	access:public	signature:()
CCLayerRGBA::CREATE_FUNC	layers_scenes_transitions_nodes/CCLayer.h	/^    CREATE_FUNC(CCLayerRGBA);$/;"	p	class:CCLayerRGBA	access:public	signature:(CCLayerRGBA)
CCLayerRGBA::_cascadeColorEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^	bool		_cascadeOpacityEnabled, _cascadeColorEnabled;$/;"	m	class:CCLayerRGBA	access:protected
CCLayerRGBA::_cascadeOpacityEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^	bool		_cascadeOpacityEnabled, _cascadeColorEnabled;$/;"	m	class:CCLayerRGBA	access:protected
CCLayerRGBA::_displayedColor	layers_scenes_transitions_nodes/CCLayer.h	/^	ccColor3B	_displayedColor, _realColor;$/;"	m	class:CCLayerRGBA	access:protected
CCLayerRGBA::_displayedOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^	GLubyte		_displayedOpacity, _realOpacity;$/;"	m	class:CCLayerRGBA	access:protected
CCLayerRGBA::_realColor	layers_scenes_transitions_nodes/CCLayer.h	/^	ccColor3B	_displayedColor, _realColor;$/;"	m	class:CCLayerRGBA	access:protected
CCLayerRGBA::_realOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^	GLubyte		_displayedOpacity, _realOpacity;$/;"	m	class:CCLayerRGBA	access:protected
CCLayerRGBA::getColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^const ccColor3B& CCLayerRGBA::getColor()$/;"	f	class:CCLayerRGBA	signature:()
CCLayerRGBA::getColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual const ccColor3B& getColor();$/;"	p	class:CCLayerRGBA	access:public	signature:()
CCLayerRGBA::getDisplayedColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^const ccColor3B& CCLayerRGBA::getDisplayedColor()$/;"	f	class:CCLayerRGBA	signature:()
CCLayerRGBA::getDisplayedColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual const ccColor3B& getDisplayedColor();$/;"	p	class:CCLayerRGBA	access:public	signature:()
CCLayerRGBA::getDisplayedOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^GLubyte CCLayerRGBA::getDisplayedOpacity()$/;"	f	class:CCLayerRGBA	signature:()
CCLayerRGBA::getDisplayedOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual GLubyte getDisplayedOpacity();$/;"	p	class:CCLayerRGBA	access:public	signature:()
CCLayerRGBA::getOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^GLubyte CCLayerRGBA::getOpacity()$/;"	f	class:CCLayerRGBA	signature:()
CCLayerRGBA::getOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual GLubyte getOpacity();$/;"	p	class:CCLayerRGBA	access:public	signature:()
CCLayerRGBA::init	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerRGBA::init()$/;"	f	class:CCLayerRGBA	signature:()
CCLayerRGBA::init	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool init();$/;"	p	class:CCLayerRGBA	access:public	signature:()
CCLayerRGBA::isCascadeColorEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerRGBA::isCascadeColorEnabled()$/;"	f	class:CCLayerRGBA	signature:()
CCLayerRGBA::isCascadeColorEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isCascadeColorEnabled();$/;"	p	class:CCLayerRGBA	access:public	signature:()
CCLayerRGBA::isCascadeOpacityEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerRGBA::isCascadeOpacityEnabled()$/;"	f	class:CCLayerRGBA	signature:()
CCLayerRGBA::isCascadeOpacityEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isCascadeOpacityEnabled();$/;"	p	class:CCLayerRGBA	access:public	signature:()
CCLayerRGBA::isOpacityModifyRGB	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isOpacityModifyRGB() { return false; }$/;"	f	class:CCLayerRGBA	access:public	signature:()
CCLayerRGBA::setCascadeColorEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerRGBA::setCascadeColorEnabled(bool cascadeColorEnabled)$/;"	f	class:CCLayerRGBA	signature:(bool cascadeColorEnabled)
CCLayerRGBA::setCascadeColorEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setCascadeColorEnabled(bool cascadeColorEnabled);$/;"	p	class:CCLayerRGBA	access:public	signature:(bool cascadeColorEnabled)
CCLayerRGBA::setCascadeOpacityEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerRGBA::setCascadeOpacityEnabled(bool cascadeOpacityEnabled)$/;"	f	class:CCLayerRGBA	signature:(bool cascadeOpacityEnabled)
CCLayerRGBA::setCascadeOpacityEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setCascadeOpacityEnabled(bool cascadeOpacityEnabled);$/;"	p	class:CCLayerRGBA	access:public	signature:(bool cascadeOpacityEnabled)
CCLayerRGBA::setColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerRGBA::setColor(const ccColor3B& color)$/;"	f	class:CCLayerRGBA	signature:(const ccColor3B& color)
CCLayerRGBA::setColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setColor(const ccColor3B& color);$/;"	p	class:CCLayerRGBA	access:public	signature:(const ccColor3B& color)
CCLayerRGBA::setOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerRGBA::setOpacity(GLubyte opacity)$/;"	f	class:CCLayerRGBA	signature:(GLubyte opacity)
CCLayerRGBA::setOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCLayerRGBA	access:public	signature:(GLubyte opacity)
CCLayerRGBA::setOpacityModifyRGB	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setOpacityModifyRGB(bool bValue) {}$/;"	f	class:CCLayerRGBA	access:public	signature:(bool bValue)
CCLayerRGBA::updateDisplayedColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerRGBA::updateDisplayedColor(const ccColor3B& parentColor)$/;"	f	class:CCLayerRGBA	signature:(const ccColor3B& parentColor)
CCLayerRGBA::updateDisplayedColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void updateDisplayedColor(const ccColor3B& parentColor);$/;"	p	class:CCLayerRGBA	access:public	signature:(const ccColor3B& parentColor)
CCLayerRGBA::updateDisplayedOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerRGBA::updateDisplayedOpacity(GLubyte parentOpacity)$/;"	f	class:CCLayerRGBA	signature:(GLubyte parentOpacity)
CCLayerRGBA::updateDisplayedOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void updateDisplayedOpacity(GLubyte parentOpacity);$/;"	p	class:CCLayerRGBA	access:public	signature:(GLubyte parentOpacity)
CCLayerRGBA::~CCLayerRGBA	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerRGBA::~CCLayerRGBA() {}$/;"	f	class:CCLayerRGBA	signature:()
CCLayerRGBA::~CCLayerRGBA	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual ~CCLayerRGBA();$/;"	p	class:CCLayerRGBA	access:public	signature:()
CCLens3D	actions/CCActionGrid3D.h	/^class CC_DLL CCLens3D : public CCGrid3DAction$/;"	c	inherits:CCGrid3DAction
CCLens3D::copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCLens3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCLens3D	signature:(CCZone *pZone)
CCLens3D::copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCLens3D	access:public	signature:(CCZone* pZone)
CCLens3D::create	actions/CCActionGrid3D.cpp	/^CCLens3D* CCLens3D::create(float duration, const CCSize& gridSize, const CCPoint& position, float radius)$/;"	f	class:CCLens3D	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius)
CCLens3D::create	actions/CCActionGrid3D.h	/^    static CCLens3D* create(float duration, const CCSize& gridSize, const CCPoint& position, float radius);$/;"	p	class:CCLens3D	access:public	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius)
CCLens3D::getLensEffect	actions/CCActionGrid3D.h	/^    inline float getLensEffect(void) { return m_fLensEffect; }$/;"	f	class:CCLens3D	access:public	signature:(void)
CCLens3D::getPosition	actions/CCActionGrid3D.h	/^    inline const CCPoint& getPosition(void) { return m_position; }$/;"	f	class:CCLens3D	access:public	signature:(void)
CCLens3D::initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCLens3D::initWithDuration(float duration, const CCSize& gridSize, const CCPoint& position, float radius)$/;"	f	class:CCLens3D	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius)
CCLens3D::initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, const CCPoint& position, float radius);$/;"	p	class:CCLens3D	access:public	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius)
CCLens3D::m_bConcave	actions/CCActionGrid3D.h	/^    bool m_bConcave;$/;"	m	class:CCLens3D	access:protected
CCLens3D::m_bDirty	actions/CCActionGrid3D.h	/^    bool    m_bDirty;$/;"	m	class:CCLens3D	access:protected
CCLens3D::m_fLensEffect	actions/CCActionGrid3D.h	/^    float m_fLensEffect;$/;"	m	class:CCLens3D	access:protected
CCLens3D::m_fRadius	actions/CCActionGrid3D.h	/^    float m_fRadius;$/;"	m	class:CCLens3D	access:protected
CCLens3D::m_position	actions/CCActionGrid3D.h	/^    CCPoint m_position;$/;"	m	class:CCLens3D	access:protected
CCLens3D::setConcave	actions/CCActionGrid3D.h	/^    inline void setConcave(bool bConcave) { m_bConcave = bConcave; }$/;"	f	class:CCLens3D	access:public	signature:(bool bConcave)
CCLens3D::setLensEffect	actions/CCActionGrid3D.h	/^    inline void setLensEffect(float fLensEffect) { m_fLensEffect = fLensEffect; }$/;"	f	class:CCLens3D	access:public	signature:(float fLensEffect)
CCLens3D::setPosition	actions/CCActionGrid3D.cpp	/^void CCLens3D::setPosition(const CCPoint& pos)$/;"	f	class:CCLens3D	signature:(const CCPoint& pos)
CCLens3D::setPosition	actions/CCActionGrid3D.h	/^    void setPosition(const CCPoint& position);$/;"	p	class:CCLens3D	access:public	signature:(const CCPoint& position)
CCLens3D::update	actions/CCActionGrid3D.cpp	/^void CCLens3D::update(float time)$/;"	f	class:CCLens3D	signature:(float time)
CCLens3D::update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCLens3D	access:public	signature:(float time)
CCLiquid	actions/CCActionGrid3D.h	/^class CC_DLL CCLiquid : public CCGrid3DAction$/;"	c	inherits:CCGrid3DAction
CCLiquid::copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCLiquid::copyWithZone(CCZone *pZone)$/;"	f	class:CCLiquid	signature:(CCZone *pZone)
CCLiquid::copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCLiquid	access:public	signature:(CCZone* pZone)
CCLiquid::create	actions/CCActionGrid3D.cpp	/^CCLiquid* CCLiquid::create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)$/;"	f	class:CCLiquid	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
CCLiquid::create	actions/CCActionGrid3D.h	/^    static CCLiquid* create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude);$/;"	p	class:CCLiquid	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
CCLiquid::getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCLiquid	access:public	signature:(void)
CCLiquid::getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCLiquid	access:public	signature:(void)
CCLiquid::initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCLiquid::initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)$/;"	f	class:CCLiquid	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
CCLiquid::initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude);$/;"	p	class:CCLiquid	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
CCLiquid::m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCLiquid	access:protected
CCLiquid::m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCLiquid	access:protected
CCLiquid::m_nWaves	actions/CCActionGrid3D.h	/^    unsigned int m_nWaves;$/;"	m	class:CCLiquid	access:protected
CCLiquid::setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCLiquid	access:public	signature:(float fAmplitude)
CCLiquid::setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCLiquid	access:public	signature:(float fAmplitudeRate)
CCLiquid::update	actions/CCActionGrid3D.cpp	/^void CCLiquid::update(float time)$/;"	f	class:CCLiquid	signature:(float time)
CCLiquid::update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCLiquid	access:public	signature:(float time)
CCLog	platform/CCCommon.h	/^void CC_DLL CCLog(const char * pszFormat, ...);$/;"	p	signature:(const char * pszFormat, ...)
CCLuaLog	platform/CCCommon.h	/^void CC_DLL CCLuaLog(const char * pszFormat);$/;"	p	signature:(const char * pszFormat)
CCMenu	menu_nodes/CCMenu.h	/^    CCMenu() : m_pSelectedItem(NULL) {}$/;"	f	class:CCMenu	access:public	signature:()
CCMenu	menu_nodes/CCMenu.h	/^class CC_DLL CCMenu : public CCLayerRGBA$/;"	c	inherits:CCLayerRGBA
CCMenu::CCMenu	menu_nodes/CCMenu.h	/^    CCMenu() : m_pSelectedItem(NULL) {}$/;"	f	class:CCMenu	access:public	signature:()
CCMenu::addChild	menu_nodes/CCMenu.cpp	/^void CCMenu::addChild(CCNode * child)$/;"	f	class:CCMenu	signature:(CCNode * child)
CCMenu::addChild	menu_nodes/CCMenu.cpp	/^void CCMenu::addChild(CCNode * child, int zOrder)$/;"	f	class:CCMenu	signature:(CCNode * child, int zOrder)
CCMenu::addChild	menu_nodes/CCMenu.cpp	/^void CCMenu::addChild(CCNode * child, int zOrder, int tag)$/;"	f	class:CCMenu	signature:(CCNode * child, int zOrder, int tag)
CCMenu::addChild	menu_nodes/CCMenu.h	/^    virtual void addChild(CCNode * child);$/;"	p	class:CCMenu	access:public	signature:(CCNode * child)
CCMenu::addChild	menu_nodes/CCMenu.h	/^    virtual void addChild(CCNode * child, int zOrder);$/;"	p	class:CCMenu	access:public	signature:(CCNode * child, int zOrder)
CCMenu::addChild	menu_nodes/CCMenu.h	/^    virtual void addChild(CCNode * child, int zOrder, int tag);$/;"	p	class:CCMenu	access:public	signature:(CCNode * child, int zOrder, int tag)
CCMenu::alignItemsHorizontally	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsHorizontally(void)$/;"	f	class:CCMenu	signature:(void)
CCMenu::alignItemsHorizontally	menu_nodes/CCMenu.h	/^    void alignItemsHorizontally();$/;"	p	class:CCMenu	access:public	signature:()
CCMenu::alignItemsHorizontallyWithPadding	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsHorizontallyWithPadding(float padding)$/;"	f	class:CCMenu	signature:(float padding)
CCMenu::alignItemsHorizontallyWithPadding	menu_nodes/CCMenu.h	/^    void alignItemsHorizontallyWithPadding(float padding);$/;"	p	class:CCMenu	access:public	signature:(float padding)
CCMenu::alignItemsInColumns	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInColumns(unsigned int columns, ...)$/;"	f	class:CCMenu	signature:(unsigned int columns, ...)
CCMenu::alignItemsInColumns	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInColumns(unsigned int columns, va_list args)$/;"	f	class:CCMenu	signature:(unsigned int columns, va_list args)
CCMenu::alignItemsInColumns	menu_nodes/CCMenu.h	/^    void alignItemsInColumns(unsigned int columns, ...);$/;"	p	class:CCMenu	access:public	signature:(unsigned int columns, ...)
CCMenu::alignItemsInColumns	menu_nodes/CCMenu.h	/^    void alignItemsInColumns(unsigned int columns, va_list args);$/;"	p	class:CCMenu	access:public	signature:(unsigned int columns, va_list args)
CCMenu::alignItemsInColumnsWithArray	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInColumnsWithArray(CCArray* rowsArray)$/;"	f	class:CCMenu	signature:(CCArray* rowsArray)
CCMenu::alignItemsInColumnsWithArray	menu_nodes/CCMenu.h	/^    void alignItemsInColumnsWithArray(CCArray* rows);$/;"	p	class:CCMenu	access:public	signature:(CCArray* rows)
CCMenu::alignItemsInRows	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInRows(unsigned int rows, ...)$/;"	f	class:CCMenu	signature:(unsigned int rows, ...)
CCMenu::alignItemsInRows	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInRows(unsigned int rows, va_list args)$/;"	f	class:CCMenu	signature:(unsigned int rows, va_list args)
CCMenu::alignItemsInRows	menu_nodes/CCMenu.h	/^    void alignItemsInRows(unsigned int rows, ...);$/;"	p	class:CCMenu	access:public	signature:(unsigned int rows, ...)
CCMenu::alignItemsInRows	menu_nodes/CCMenu.h	/^    void alignItemsInRows(unsigned int rows, va_list args);$/;"	p	class:CCMenu	access:public	signature:(unsigned int rows, va_list args)
CCMenu::alignItemsInRowsWithArray	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInRowsWithArray(CCArray* columnArray)$/;"	f	class:CCMenu	signature:(CCArray* columnArray)
CCMenu::alignItemsInRowsWithArray	menu_nodes/CCMenu.h	/^    void alignItemsInRowsWithArray(CCArray* columns);$/;"	p	class:CCMenu	access:public	signature:(CCArray* columns)
CCMenu::alignItemsVertically	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsVertically()$/;"	f	class:CCMenu	signature:()
CCMenu::alignItemsVertically	menu_nodes/CCMenu.h	/^    void alignItemsVertically();$/;"	p	class:CCMenu	access:public	signature:()
CCMenu::alignItemsVerticallyWithPadding	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsVerticallyWithPadding(float padding)$/;"	f	class:CCMenu	signature:(float padding)
CCMenu::alignItemsVerticallyWithPadding	menu_nodes/CCMenu.h	/^    void alignItemsVerticallyWithPadding(float padding);$/;"	p	class:CCMenu	access:public	signature:(float padding)
CCMenu::ccTouchBegan	menu_nodes/CCMenu.cpp	/^bool CCMenu::ccTouchBegan(CCTouch* touch, CCEvent* event)$/;"	f	class:CCMenu	signature:(CCTouch* touch, CCEvent* event)
CCMenu::ccTouchBegan	menu_nodes/CCMenu.h	/^    virtual bool ccTouchBegan(CCTouch* touch, CCEvent* event);$/;"	p	class:CCMenu	access:public	signature:(CCTouch* touch, CCEvent* event)
CCMenu::ccTouchCancelled	menu_nodes/CCMenu.cpp	/^void CCMenu::ccTouchCancelled(CCTouch *touch, CCEvent* event)$/;"	f	class:CCMenu	signature:(CCTouch *touch, CCEvent* event)
CCMenu::ccTouchCancelled	menu_nodes/CCMenu.h	/^    virtual void ccTouchCancelled(CCTouch *touch, CCEvent* event);$/;"	p	class:CCMenu	access:public	signature:(CCTouch *touch, CCEvent* event)
CCMenu::ccTouchEnded	menu_nodes/CCMenu.cpp	/^void CCMenu::ccTouchEnded(CCTouch *touch, CCEvent* event)$/;"	f	class:CCMenu	signature:(CCTouch *touch, CCEvent* event)
CCMenu::ccTouchEnded	menu_nodes/CCMenu.h	/^    virtual void ccTouchEnded(CCTouch* touch, CCEvent* event);$/;"	p	class:CCMenu	access:public	signature:(CCTouch* touch, CCEvent* event)
CCMenu::ccTouchMoved	menu_nodes/CCMenu.cpp	/^void CCMenu::ccTouchMoved(CCTouch* touch, CCEvent* event)$/;"	f	class:CCMenu	signature:(CCTouch* touch, CCEvent* event)
CCMenu::ccTouchMoved	menu_nodes/CCMenu.h	/^    virtual void ccTouchMoved(CCTouch* touch, CCEvent* event);$/;"	p	class:CCMenu	access:public	signature:(CCTouch* touch, CCEvent* event)
CCMenu::create	menu_nodes/CCMenu.cpp	/^CCMenu * CCMenu::create(CCMenuItem* item, ...)$/;"	f	class:CCMenu	signature:(CCMenuItem* item, ...)
CCMenu::create	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::create()$/;"	f	class:CCMenu	signature:()
CCMenu::create	menu_nodes/CCMenu.h	/^    static CCMenu* create();$/;"	p	class:CCMenu	access:public	signature:()
CCMenu::create	menu_nodes/CCMenu.h	/^    static CCMenu* create(CCMenuItem* item, ...);$/;"	p	class:CCMenu	access:public	signature:(CCMenuItem* item, ...)
CCMenu::createWithArray	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::createWithArray(CCArray* pArrayOfItems)$/;"	f	class:CCMenu	signature:(CCArray* pArrayOfItems)
CCMenu::createWithArray	menu_nodes/CCMenu.h	/^    static CCMenu* createWithArray(CCArray* pArrayOfItems);$/;"	p	class:CCMenu	access:public	signature:(CCArray* pArrayOfItems)
CCMenu::createWithItem	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::createWithItem(CCMenuItem* item)$/;"	f	class:CCMenu	signature:(CCMenuItem* item)
CCMenu::createWithItem	menu_nodes/CCMenu.h	/^    static CCMenu* createWithItem(CCMenuItem* item);$/;"	p	class:CCMenu	access:public	signature:(CCMenuItem* item)
CCMenu::createWithItems	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::createWithItems(CCMenuItem* item, va_list args)$/;"	f	class:CCMenu	signature:(CCMenuItem* item, va_list args)
CCMenu::createWithItems	menu_nodes/CCMenu.h	/^    static CCMenu* createWithItems(CCMenuItem *firstItem, va_list args);$/;"	p	class:CCMenu	access:public	signature:(CCMenuItem *firstItem, va_list args)
CCMenu::init	menu_nodes/CCMenu.cpp	/^bool CCMenu::init()$/;"	f	class:CCMenu	signature:()
CCMenu::init	menu_nodes/CCMenu.h	/^    bool init();$/;"	p	class:CCMenu	access:public	signature:()
CCMenu::initWithArray	menu_nodes/CCMenu.cpp	/^bool CCMenu::initWithArray(CCArray* pArrayOfItems)$/;"	f	class:CCMenu	signature:(CCArray* pArrayOfItems)
CCMenu::initWithArray	menu_nodes/CCMenu.h	/^    bool initWithArray(CCArray* pArrayOfItems);$/;"	p	class:CCMenu	access:public	signature:(CCArray* pArrayOfItems)
CCMenu::isEnabled	menu_nodes/CCMenu.h	/^    virtual bool isEnabled() { return m_bEnabled; }$/;"	f	class:CCMenu	access:public	signature:()
CCMenu::isOpacityModifyRGB	menu_nodes/CCMenu.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCMenu	access:public	signature:(void)
CCMenu::itemForTouch	menu_nodes/CCMenu.cpp	/^CCMenuItem* CCMenu::itemForTouch(CCTouch *touch)$/;"	f	class:CCMenu	signature:(CCTouch *touch)
CCMenu::itemForTouch	menu_nodes/CCMenu.h	/^    CCMenuItem* itemForTouch(CCTouch * touch);$/;"	p	class:CCMenu	access:protected	signature:(CCTouch * touch)
CCMenu::m_bEnabled	menu_nodes/CCMenu.h	/^    bool m_bEnabled;$/;"	m	class:CCMenu	access:private
CCMenu::m_eState	menu_nodes/CCMenu.h	/^    tCCMenuState m_eState;$/;"	m	class:CCMenu	access:protected
CCMenu::m_pSelectedItem	menu_nodes/CCMenu.h	/^    CCMenuItem *m_pSelectedItem;$/;"	m	class:CCMenu	access:protected
CCMenu::onExit	menu_nodes/CCMenu.cpp	/^void CCMenu::onExit()$/;"	f	class:CCMenu	signature:()
CCMenu::onExit	menu_nodes/CCMenu.h	/^    virtual void onExit();$/;"	p	class:CCMenu	access:public	signature:()
CCMenu::registerWithTouchDispatcher	menu_nodes/CCMenu.cpp	/^void CCMenu::registerWithTouchDispatcher()$/;"	f	class:CCMenu	signature:()
CCMenu::registerWithTouchDispatcher	menu_nodes/CCMenu.h	/^    virtual void registerWithTouchDispatcher();$/;"	p	class:CCMenu	access:public	signature:()
CCMenu::removeChild	menu_nodes/CCMenu.cpp	/^void CCMenu::removeChild(CCNode* child, bool cleanup)$/;"	f	class:CCMenu	signature:(CCNode* child, bool cleanup)
CCMenu::removeChild	menu_nodes/CCMenu.h	/^    virtual void removeChild(CCNode* child, bool cleanup);$/;"	p	class:CCMenu	access:public	signature:(CCNode* child, bool cleanup)
CCMenu::setEnabled	menu_nodes/CCMenu.h	/^    virtual void setEnabled(bool value) { m_bEnabled = value; };$/;"	f	class:CCMenu	access:public	signature:(bool value)
CCMenu::setHandlerPriority	menu_nodes/CCMenu.cpp	/^void CCMenu::setHandlerPriority(int newPriority)$/;"	f	class:CCMenu	signature:(int newPriority)
CCMenu::setHandlerPriority	menu_nodes/CCMenu.h	/^    void setHandlerPriority(int newPriority);$/;"	p	class:CCMenu	access:public	signature:(int newPriority)
CCMenu::setOpacityModifyRGB	menu_nodes/CCMenu.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCMenu	access:public	signature:(bool bValue)
CCMenu::~CCMenu	menu_nodes/CCMenu.h	/^    virtual ~CCMenu(){}$/;"	f	class:CCMenu	access:public	signature:()
CCMenuItem	menu_nodes/CCMenuItem.h	/^    CCMenuItem()$/;"	f	class:CCMenuItem	access:public	signature:()
CCMenuItem	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItem : public CCNodeRGBA$/;"	c	inherits:CCNodeRGBA
CCMenuItem::CCMenuItem	menu_nodes/CCMenuItem.h	/^    CCMenuItem()$/;"	f	class:CCMenuItem	access:public	signature:()
CCMenuItem::activate	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::activate()$/;"	f	class:CCMenuItem	signature:()
CCMenuItem::activate	menu_nodes/CCMenuItem.h	/^    virtual void activate();$/;"	p	class:CCMenuItem	access:public	signature:()
CCMenuItem::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItem* CCMenuItem::create()$/;"	f	class:CCMenuItem	signature:()
CCMenuItem::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItem* CCMenuItem::create(CCObject *rec, SEL_MenuHandler selector)$/;"	f	class:CCMenuItem	signature:(CCObject *rec, SEL_MenuHandler selector)
CCMenuItem::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItem* create();$/;"	p	class:CCMenuItem	access:public	signature:()
CCMenuItem::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItem* create(CCObject *rec, SEL_MenuHandler selector);$/;"	p	class:CCMenuItem	access:public	signature:(CCObject *rec, SEL_MenuHandler selector)
CCMenuItem::getScriptTapHandler	menu_nodes/CCMenuItem.h	/^    int getScriptTapHandler() { return m_nScriptTapHandler; };$/;"	f	class:CCMenuItem	access:public	signature:()
CCMenuItem::initWithTarget	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItem::initWithTarget(CCObject *rec, SEL_MenuHandler selector)$/;"	f	class:CCMenuItem	signature:(CCObject *rec, SEL_MenuHandler selector)
CCMenuItem::initWithTarget	menu_nodes/CCMenuItem.h	/^    bool initWithTarget(CCObject *rec, SEL_MenuHandler selector);$/;"	p	class:CCMenuItem	access:public	signature:(CCObject *rec, SEL_MenuHandler selector)
CCMenuItem::isEnabled	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItem::isEnabled()$/;"	f	class:CCMenuItem	signature:()
CCMenuItem::isEnabled	menu_nodes/CCMenuItem.h	/^    virtual bool isEnabled();$/;"	p	class:CCMenuItem	access:public	signature:()
CCMenuItem::isOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCMenuItem	access:public	signature:(void)
CCMenuItem::isSelected	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItem::isSelected()$/;"	f	class:CCMenuItem	signature:()
CCMenuItem::isSelected	menu_nodes/CCMenuItem.h	/^    virtual bool isSelected();$/;"	p	class:CCMenuItem	access:public	signature:()
CCMenuItem::m_bEnabled	menu_nodes/CCMenuItem.h	/^    bool m_bEnabled;$/;"	m	class:CCMenuItem	access:protected
CCMenuItem::m_bSelected	menu_nodes/CCMenuItem.h	/^    bool m_bSelected;$/;"	m	class:CCMenuItem	access:protected
CCMenuItem::m_nScriptTapHandler	menu_nodes/CCMenuItem.h	/^    int             m_nScriptTapHandler;$/;"	m	class:CCMenuItem	access:protected
CCMenuItem::m_pListener	menu_nodes/CCMenuItem.h	/^    CCObject*       m_pListener;$/;"	m	class:CCMenuItem	access:protected
CCMenuItem::m_pfnSelector	menu_nodes/CCMenuItem.h	/^    SEL_MenuHandler    m_pfnSelector;$/;"	m	class:CCMenuItem	access:protected
CCMenuItem::rect	menu_nodes/CCMenuItem.cpp	/^CCRect CCMenuItem::rect()$/;"	f	class:CCMenuItem	signature:()
CCMenuItem::rect	menu_nodes/CCMenuItem.h	/^    CCRect rect();$/;"	p	class:CCMenuItem	access:public	signature:()
CCMenuItem::registerScriptTapHandler	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::registerScriptTapHandler(int nHandler)$/;"	f	class:CCMenuItem	signature:(int nHandler)
CCMenuItem::registerScriptTapHandler	menu_nodes/CCMenuItem.h	/^    virtual void registerScriptTapHandler(int nHandler);$/;"	p	class:CCMenuItem	access:public	signature:(int nHandler)
CCMenuItem::selected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::selected()$/;"	f	class:CCMenuItem	signature:()
CCMenuItem::selected	menu_nodes/CCMenuItem.h	/^    virtual void selected();$/;"	p	class:CCMenuItem	access:public	signature:()
CCMenuItem::setEnabled	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::setEnabled(bool enabled)$/;"	f	class:CCMenuItem	signature:(bool enabled)
CCMenuItem::setEnabled	menu_nodes/CCMenuItem.h	/^    virtual void setEnabled(bool value);$/;"	p	class:CCMenuItem	access:public	signature:(bool value)
CCMenuItem::setOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCMenuItem	access:public	signature:(bool bValue)
CCMenuItem::setTarget	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::setTarget(CCObject *rec, SEL_MenuHandler selector)$/;"	f	class:CCMenuItem	signature:(CCObject *rec, SEL_MenuHandler selector)
CCMenuItem::setTarget	menu_nodes/CCMenuItem.h	/^    void setTarget(CCObject *rec, SEL_MenuHandler selector);$/;"	p	class:CCMenuItem	access:public	signature:(CCObject *rec, SEL_MenuHandler selector)
CCMenuItem::unregisterScriptTapHandler	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::unregisterScriptTapHandler(void)$/;"	f	class:CCMenuItem	signature:(void)
CCMenuItem::unregisterScriptTapHandler	menu_nodes/CCMenuItem.h	/^    virtual void unregisterScriptTapHandler(void);$/;"	p	class:CCMenuItem	access:public	signature:(void)
CCMenuItem::unselected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::unselected()$/;"	f	class:CCMenuItem	signature:()
CCMenuItem::unselected	menu_nodes/CCMenuItem.h	/^    virtual void unselected();$/;"	p	class:CCMenuItem	access:public	signature:()
CCMenuItem::~CCMenuItem	menu_nodes/CCMenuItem.cpp	/^CCMenuItem::~CCMenuItem()$/;"	f	class:CCMenuItem	signature:()
CCMenuItem::~CCMenuItem	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItem();$/;"	p	class:CCMenuItem	access:public	signature:()
CCMenuItemAtlasFont	menu_nodes/CCMenuItem.h	/^    CCMenuItemAtlasFont(){}$/;"	f	class:CCMenuItemAtlasFont	access:public	signature:()
CCMenuItemAtlasFont	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItemAtlasFont : public CCMenuItemLabel$/;"	c	inherits:CCMenuItemLabel
CCMenuItemAtlasFont::CCMenuItemAtlasFont	menu_nodes/CCMenuItem.h	/^    CCMenuItemAtlasFont(){}$/;"	f	class:CCMenuItemAtlasFont	access:public	signature:()
CCMenuItemAtlasFont::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemAtlasFont * CCMenuItemAtlasFont::create(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap)$/;"	f	class:CCMenuItemAtlasFont	signature:(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap)
CCMenuItemAtlasFont::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemAtlasFont * CCMenuItemAtlasFont::create(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemAtlasFont	signature:(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)
CCMenuItemAtlasFont::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemAtlasFont* create(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap);$/;"	p	class:CCMenuItemAtlasFont	access:public	signature:(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap)
CCMenuItemAtlasFont::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemAtlasFont* create(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemAtlasFont	access:public	signature:(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)
CCMenuItemAtlasFont::initWithString	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemAtlasFont::initWithString(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemAtlasFont	signature:(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)
CCMenuItemAtlasFont::initWithString	menu_nodes/CCMenuItem.h	/^    bool initWithString(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemAtlasFont	access:public	signature:(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)
CCMenuItemAtlasFont::~CCMenuItemAtlasFont	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemAtlasFont(){}$/;"	f	class:CCMenuItemAtlasFont	access:public	signature:()
CCMenuItemFont	menu_nodes/CCMenuItem.h	/^    CCMenuItemFont() : m_uFontSize(0), m_strFontName(""){}$/;"	f	class:CCMenuItemFont	access:public	signature:()
CCMenuItemFont	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItemFont : public CCMenuItemLabel$/;"	c	inherits:CCMenuItemLabel
CCMenuItemFont::CCMenuItemFont	menu_nodes/CCMenuItem.h	/^    CCMenuItemFont() : m_uFontSize(0), m_strFontName(""){}$/;"	f	class:CCMenuItemFont	access:public	signature:()
CCMenuItemFont::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemFont * CCMenuItemFont::create(const char *value)$/;"	f	class:CCMenuItemFont	signature:(const char *value)
CCMenuItemFont::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemFont * CCMenuItemFont::create(const char *value, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemFont	signature:(const char *value, CCObject* target, SEL_MenuHandler selector)
CCMenuItemFont::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemFont * create(const char *value);$/;"	p	class:CCMenuItemFont	access:public	signature:(const char *value)
CCMenuItemFont::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemFont * create(const char *value, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemFont	access:public	signature:(const char *value, CCObject* target, SEL_MenuHandler selector)
CCMenuItemFont::fontName	menu_nodes/CCMenuItem.cpp	/^const char * CCMenuItemFont::fontName()$/;"	f	class:CCMenuItemFont	signature:()
CCMenuItemFont::fontName	menu_nodes/CCMenuItem.h	/^    static const char *fontName();$/;"	p	class:CCMenuItemFont	access:public	signature:()
CCMenuItemFont::fontNameObj	menu_nodes/CCMenuItem.cpp	/^const char* CCMenuItemFont::fontNameObj()$/;"	f	class:CCMenuItemFont	signature:()
CCMenuItemFont::fontNameObj	menu_nodes/CCMenuItem.h	/^    const char* fontNameObj();$/;"	p	class:CCMenuItemFont	access:public	signature:()
CCMenuItemFont::fontSize	menu_nodes/CCMenuItem.cpp	/^unsigned int CCMenuItemFont::fontSize()$/;"	f	class:CCMenuItemFont	signature:()
CCMenuItemFont::fontSize	menu_nodes/CCMenuItem.h	/^    static unsigned int fontSize();$/;"	p	class:CCMenuItemFont	access:public	signature:()
CCMenuItemFont::fontSizeObj	menu_nodes/CCMenuItem.cpp	/^unsigned int CCMenuItemFont::fontSizeObj()$/;"	f	class:CCMenuItemFont	signature:()
CCMenuItemFont::fontSizeObj	menu_nodes/CCMenuItem.h	/^    unsigned int fontSizeObj();$/;"	p	class:CCMenuItemFont	access:public	signature:()
CCMenuItemFont::initWithString	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemFont::initWithString(const char *value, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemFont	signature:(const char *value, CCObject* target, SEL_MenuHandler selector)
CCMenuItemFont::initWithString	menu_nodes/CCMenuItem.h	/^    bool initWithString(const char *value, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemFont	access:public	signature:(const char *value, CCObject* target, SEL_MenuHandler selector)
CCMenuItemFont::m_strFontName	menu_nodes/CCMenuItem.h	/^    std::string m_strFontName;$/;"	m	class:CCMenuItemFont	access:protected
CCMenuItemFont::m_uFontSize	menu_nodes/CCMenuItem.h	/^    unsigned int m_uFontSize;$/;"	m	class:CCMenuItemFont	access:protected
CCMenuItemFont::recreateLabel	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::recreateLabel()$/;"	f	class:CCMenuItemFont	signature:()
CCMenuItemFont::recreateLabel	menu_nodes/CCMenuItem.h	/^    void recreateLabel();$/;"	p	class:CCMenuItemFont	access:protected	signature:()
CCMenuItemFont::setFontName	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::setFontName(const char *name)$/;"	f	class:CCMenuItemFont	signature:(const char *name)
CCMenuItemFont::setFontName	menu_nodes/CCMenuItem.h	/^    static void setFontName(const char *name);$/;"	p	class:CCMenuItemFont	access:public	signature:(const char *name)
CCMenuItemFont::setFontNameObj	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::setFontNameObj(const char* name)$/;"	f	class:CCMenuItemFont	signature:(const char* name)
CCMenuItemFont::setFontNameObj	menu_nodes/CCMenuItem.h	/^    void setFontNameObj(const char* name);$/;"	p	class:CCMenuItemFont	access:public	signature:(const char* name)
CCMenuItemFont::setFontSize	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::setFontSize(unsigned int s)$/;"	f	class:CCMenuItemFont	signature:(unsigned int s)
CCMenuItemFont::setFontSize	menu_nodes/CCMenuItem.h	/^    static void setFontSize(unsigned int s);$/;"	p	class:CCMenuItemFont	access:public	signature:(unsigned int s)
CCMenuItemFont::setFontSizeObj	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::setFontSizeObj(unsigned int s)$/;"	f	class:CCMenuItemFont	signature:(unsigned int s)
CCMenuItemFont::setFontSizeObj	menu_nodes/CCMenuItem.h	/^    void setFontSizeObj(unsigned int s);$/;"	p	class:CCMenuItemFont	access:public	signature:(unsigned int s)
CCMenuItemFont::~CCMenuItemFont	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemFont(){}$/;"	f	class:CCMenuItemFont	access:public	signature:()
CCMenuItemImage	menu_nodes/CCMenuItem.h	/^    CCMenuItemImage(){}$/;"	f	class:CCMenuItemImage	access:public	signature:()
CCMenuItemImage	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItemImage : public CCMenuItemSprite$/;"	c	inherits:CCMenuItemSprite
CCMenuItemImage::CCMenuItemImage	menu_nodes/CCMenuItem.h	/^    CCMenuItemImage(){}$/;"	f	class:CCMenuItemImage	access:public	signature:()
CCMenuItemImage::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::create(const char *normalImage, const char *selectedImage)$/;"	f	class:CCMenuItemImage	signature:(const char *normalImage, const char *selectedImage)
CCMenuItemImage::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::create(const char *normalImage, const char *selectedImage, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemImage	signature:(const char *normalImage, const char *selectedImage, CCObject* target, SEL_MenuHandler selector)
CCMenuItemImage::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::create(const char *normalImage, const char *selectedImage, const char *disabledImage)$/;"	f	class:CCMenuItemImage	signature:(const char *normalImage, const char *selectedImage, const char *disabledImage)
CCMenuItemImage::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::create(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemImage	signature:(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)
CCMenuItemImage::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage* CCMenuItemImage::create()$/;"	f	class:CCMenuItemImage	signature:()
CCMenuItemImage::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemImage* create();$/;"	p	class:CCMenuItemImage	access:public	signature:()
CCMenuItemImage::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemImage* create(const char *normalImage, const char *selectedImage);$/;"	p	class:CCMenuItemImage	access:public	signature:(const char *normalImage, const char *selectedImage)
CCMenuItemImage::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemImage* create(const char *normalImage, const char *selectedImage, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemImage	access:public	signature:(const char *normalImage, const char *selectedImage, CCObject* target, SEL_MenuHandler selector)
CCMenuItemImage::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemImage* create(const char *normalImage, const char *selectedImage, const char *disabledImage);$/;"	p	class:CCMenuItemImage	access:public	signature:(const char *normalImage, const char *selectedImage, const char *disabledImage)
CCMenuItemImage::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemImage* create(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemImage	access:public	signature:(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)
CCMenuItemImage::init	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemImage::init(void)$/;"	f	class:CCMenuItemImage	signature:(void)
CCMenuItemImage::init	menu_nodes/CCMenuItem.h	/^    bool init();$/;"	p	class:CCMenuItemImage	access:public	signature:()
CCMenuItemImage::initWithNormalImage	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemImage::initWithNormalImage(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemImage	signature:(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)
CCMenuItemImage::initWithNormalImage	menu_nodes/CCMenuItem.h	/^    bool initWithNormalImage(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemImage	access:public	signature:(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)
CCMenuItemImage::setDisabledSpriteFrame	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemImage::setDisabledSpriteFrame(CCSpriteFrame * frame)$/;"	f	class:CCMenuItemImage	signature:(CCSpriteFrame * frame)
CCMenuItemImage::setDisabledSpriteFrame	menu_nodes/CCMenuItem.h	/^    void setDisabledSpriteFrame(CCSpriteFrame* frame);$/;"	p	class:CCMenuItemImage	access:public	signature:(CCSpriteFrame* frame)
CCMenuItemImage::setNormalSpriteFrame	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemImage::setNormalSpriteFrame(CCSpriteFrame * frame)$/;"	f	class:CCMenuItemImage	signature:(CCSpriteFrame * frame)
CCMenuItemImage::setNormalSpriteFrame	menu_nodes/CCMenuItem.h	/^    void setNormalSpriteFrame(CCSpriteFrame* frame);$/;"	p	class:CCMenuItemImage	access:public	signature:(CCSpriteFrame* frame)
CCMenuItemImage::setSelectedSpriteFrame	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemImage::setSelectedSpriteFrame(CCSpriteFrame * frame)$/;"	f	class:CCMenuItemImage	signature:(CCSpriteFrame * frame)
CCMenuItemImage::setSelectedSpriteFrame	menu_nodes/CCMenuItem.h	/^    void setSelectedSpriteFrame(CCSpriteFrame* frame);$/;"	p	class:CCMenuItemImage	access:public	signature:(CCSpriteFrame* frame)
CCMenuItemImage::~CCMenuItemImage	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemImage(){}$/;"	f	class:CCMenuItemImage	access:public	signature:()
CCMenuItemLabel	menu_nodes/CCMenuItem.h	/^    CCMenuItemLabel()$/;"	f	class:CCMenuItemLabel	access:public	signature:()
CCMenuItemLabel	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItemLabel : public CCMenuItem$/;"	c	inherits:CCMenuItem
CCMenuItemLabel::CCMenuItemLabel	menu_nodes/CCMenuItem.h	/^    CCMenuItemLabel()$/;"	f	class:CCMenuItemLabel	access:public	signature:()
CCMenuItemLabel::CC_PROPERTY	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY(CCNode*, m_pLabel, Label);$/;"	p	class:CCMenuItemLabel	access:private	signature:(CCNode*, m_pLabel, Label)
CCMenuItemLabel::CC_PROPERTY_PASS_BY_REF	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY_PASS_BY_REF(ccColor3B, m_tDisabledColor, DisabledColor);$/;"	p	class:CCMenuItemLabel	access:private	signature:(ccColor3B, m_tDisabledColor, DisabledColor)
CCMenuItemLabel::activate	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::activate()$/;"	f	class:CCMenuItemLabel	signature:()
CCMenuItemLabel::activate	menu_nodes/CCMenuItem.h	/^    virtual void activate();$/;"	p	class:CCMenuItemLabel	access:public	signature:()
CCMenuItemLabel::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemLabel * CCMenuItemLabel::create(CCNode*label, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemLabel	signature:(CCNode*label, CCObject* target, SEL_MenuHandler selector)
CCMenuItemLabel::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemLabel* CCMenuItemLabel::create(CCNode *label)$/;"	f	class:CCMenuItemLabel	signature:(CCNode *label)
CCMenuItemLabel::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemLabel * create(CCNode*label, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemLabel	access:public	signature:(CCNode*label, CCObject* target, SEL_MenuHandler selector)
CCMenuItemLabel::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemLabel* create(CCNode *label);$/;"	p	class:CCMenuItemLabel	access:public	signature:(CCNode *label)
CCMenuItemLabel::getDisabledColor	menu_nodes/CCMenuItem.cpp	/^const ccColor3B& CCMenuItemLabel::getDisabledColor()$/;"	f	class:CCMenuItemLabel	signature:()
CCMenuItemLabel::getLabel	menu_nodes/CCMenuItem.cpp	/^CCNode *CCMenuItemLabel::getLabel()$/;"	f	class:CCMenuItemLabel	signature:()
CCMenuItemLabel::initWithLabel	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemLabel::initWithLabel(CCNode* label, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemLabel	signature:(CCNode* label, CCObject* target, SEL_MenuHandler selector)
CCMenuItemLabel::initWithLabel	menu_nodes/CCMenuItem.h	/^    bool initWithLabel(CCNode* label, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemLabel	access:public	signature:(CCNode* label, CCObject* target, SEL_MenuHandler selector)
CCMenuItemLabel::m_fOriginalScale	menu_nodes/CCMenuItem.h	/^    float        m_fOriginalScale;$/;"	m	class:CCMenuItemLabel	access:protected
CCMenuItemLabel::m_tColorBackup	menu_nodes/CCMenuItem.h	/^    ccColor3B    m_tColorBackup;$/;"	m	class:CCMenuItemLabel	access:protected
CCMenuItemLabel::selected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::selected()$/;"	f	class:CCMenuItemLabel	signature:()
CCMenuItemLabel::selected	menu_nodes/CCMenuItem.h	/^    virtual void selected();$/;"	p	class:CCMenuItemLabel	access:public	signature:()
CCMenuItemLabel::setDisabledColor	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setDisabledColor(const ccColor3B& var)$/;"	f	class:CCMenuItemLabel	signature:(const ccColor3B& var)
CCMenuItemLabel::setEnabled	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setEnabled(bool enabled)$/;"	f	class:CCMenuItemLabel	signature:(bool enabled)
CCMenuItemLabel::setEnabled	menu_nodes/CCMenuItem.h	/^    virtual void setEnabled(bool enabled);$/;"	p	class:CCMenuItemLabel	access:public	signature:(bool enabled)
CCMenuItemLabel::setLabel	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setLabel(CCNode* var)$/;"	f	class:CCMenuItemLabel	signature:(CCNode* var)
CCMenuItemLabel::setString	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setString(const char * label)$/;"	f	class:CCMenuItemLabel	signature:(const char * label)
CCMenuItemLabel::setString	menu_nodes/CCMenuItem.h	/^    void setString(const char * label);$/;"	p	class:CCMenuItemLabel	access:public	signature:(const char * label)
CCMenuItemLabel::unselected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::unselected()$/;"	f	class:CCMenuItemLabel	signature:()
CCMenuItemLabel::unselected	menu_nodes/CCMenuItem.h	/^    virtual void unselected();$/;"	p	class:CCMenuItemLabel	access:public	signature:()
CCMenuItemLabel::~CCMenuItemLabel	menu_nodes/CCMenuItem.cpp	/^CCMenuItemLabel::~CCMenuItemLabel()$/;"	f	class:CCMenuItemLabel	signature:()
CCMenuItemLabel::~CCMenuItemLabel	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemLabel();$/;"	p	class:CCMenuItemLabel	access:public	signature:()
CCMenuItemSprite	menu_nodes/CCMenuItem.h	/^    CCMenuItemSprite()$/;"	f	class:CCMenuItemSprite	access:public	signature:()
CCMenuItemSprite	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItemSprite : public CCMenuItem$/;"	c	inherits:CCMenuItem
CCMenuItemSprite::CCMenuItemSprite	menu_nodes/CCMenuItem.h	/^    CCMenuItemSprite()$/;"	f	class:CCMenuItemSprite	access:public	signature:()
CCMenuItemSprite::CC_PROPERTY	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY(CCNode*, m_pDisabledImage, DisabledImage);$/;"	p	class:CCMenuItemSprite	access:private	signature:(CCNode*, m_pDisabledImage, DisabledImage)
CCMenuItemSprite::CC_PROPERTY	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY(CCNode*, m_pNormalImage, NormalImage);$/;"	p	class:CCMenuItemSprite	access:private	signature:(CCNode*, m_pNormalImage, NormalImage)
CCMenuItemSprite::CC_PROPERTY	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY(CCNode*, m_pSelectedImage, SelectedImage);$/;"	p	class:CCMenuItemSprite	access:private	signature:(CCNode*, m_pSelectedImage, SelectedImage)
CCMenuItemSprite::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemSprite * CCMenuItemSprite::create(CCNode *normalSprite, CCNode *selectedSprite, CCNode *disabledSprite, CCObject *target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemSprite	signature:(CCNode *normalSprite, CCNode *selectedSprite, CCNode *disabledSprite, CCObject *target, SEL_MenuHandler selector)
CCMenuItemSprite::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemSprite * CCMenuItemSprite::create(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite)$/;"	f	class:CCMenuItemSprite	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite)
CCMenuItemSprite::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemSprite * CCMenuItemSprite::create(CCNode* normalSprite, CCNode* selectedSprite, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemSprite	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCObject* target, SEL_MenuHandler selector)
CCMenuItemSprite::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemSprite * create(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite = NULL);$/;"	p	class:CCMenuItemSprite	access:public	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite = NULL)
CCMenuItemSprite::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemSprite * create(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemSprite	access:public	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector)
CCMenuItemSprite::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemSprite * create(CCNode* normalSprite, CCNode* selectedSprite, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemSprite	access:public	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCObject* target, SEL_MenuHandler selector)
CCMenuItemSprite::getDisabledImage	menu_nodes/CCMenuItem.cpp	/^CCNode * CCMenuItemSprite::getDisabledImage()$/;"	f	class:CCMenuItemSprite	signature:()
CCMenuItemSprite::getNormalImage	menu_nodes/CCMenuItem.cpp	/^CCNode * CCMenuItemSprite::getNormalImage()$/;"	f	class:CCMenuItemSprite	signature:()
CCMenuItemSprite::getSelectedImage	menu_nodes/CCMenuItem.cpp	/^CCNode * CCMenuItemSprite::getSelectedImage()$/;"	f	class:CCMenuItemSprite	signature:()
CCMenuItemSprite::initWithNormalSprite	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemSprite::initWithNormalSprite(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemSprite	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector)
CCMenuItemSprite::initWithNormalSprite	menu_nodes/CCMenuItem.h	/^    bool initWithNormalSprite(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemSprite	access:public	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector)
CCMenuItemSprite::isOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCMenuItemSprite	access:public	signature:(void)
CCMenuItemSprite::selected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::selected()$/;"	f	class:CCMenuItemSprite	signature:()
CCMenuItemSprite::selected	menu_nodes/CCMenuItem.h	/^    virtual void selected();$/;"	p	class:CCMenuItemSprite	access:public	signature:()
CCMenuItemSprite::setDisabledImage	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setDisabledImage(CCNode* pImage)$/;"	f	class:CCMenuItemSprite	signature:(CCNode* pImage)
CCMenuItemSprite::setEnabled	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setEnabled(bool bEnabled)$/;"	f	class:CCMenuItemSprite	signature:(bool bEnabled)
CCMenuItemSprite::setEnabled	menu_nodes/CCMenuItem.h	/^    virtual void setEnabled(bool bEnabled);$/;"	p	class:CCMenuItemSprite	access:public	signature:(bool bEnabled)
CCMenuItemSprite::setNormalImage	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setNormalImage(CCNode* pImage)$/;"	f	class:CCMenuItemSprite	signature:(CCNode* pImage)
CCMenuItemSprite::setOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCMenuItemSprite	access:public	signature:(bool bValue)
CCMenuItemSprite::setSelectedImage	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setSelectedImage(CCNode* pImage)$/;"	f	class:CCMenuItemSprite	signature:(CCNode* pImage)
CCMenuItemSprite::unselected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::unselected()$/;"	f	class:CCMenuItemSprite	signature:()
CCMenuItemSprite::unselected	menu_nodes/CCMenuItem.h	/^    virtual void unselected();$/;"	p	class:CCMenuItemSprite	access:public	signature:()
CCMenuItemSprite::updateImagesVisibility	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::updateImagesVisibility()$/;"	f	class:CCMenuItemSprite	signature:()
CCMenuItemSprite::updateImagesVisibility	menu_nodes/CCMenuItem.h	/^    virtual void updateImagesVisibility();$/;"	p	class:CCMenuItemSprite	access:protected	signature:()
CCMenuItemToggle	menu_nodes/CCMenuItem.h	/^    CCMenuItemToggle()$/;"	f	class:CCMenuItemToggle	access:public	signature:()
CCMenuItemToggle	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItemToggle : public CCMenuItem$/;"	c	inherits:CCMenuItem
CCMenuItemToggle::CCMenuItemToggle	menu_nodes/CCMenuItem.h	/^    CCMenuItemToggle()$/;"	f	class:CCMenuItemToggle	access:public	signature:()
CCMenuItemToggle::CC_PROPERTY	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY(CCArray*, m_pSubItems, SubItems);$/;"	p	class:CCMenuItemToggle	access:private	signature:(CCArray*, m_pSubItems, SubItems)
CCMenuItemToggle::CC_PROPERTY	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY(unsigned int, m_uSelectedIndex, SelectedIndex);$/;"	p	class:CCMenuItemToggle	access:private	signature:(unsigned int, m_uSelectedIndex, SelectedIndex)
CCMenuItemToggle::activate	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::activate()$/;"	f	class:CCMenuItemToggle	signature:()
CCMenuItemToggle::activate	menu_nodes/CCMenuItem.h	/^    virtual void activate();$/;"	p	class:CCMenuItemToggle	access:public	signature:()
CCMenuItemToggle::addSubItem	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::addSubItem(CCMenuItem *item)$/;"	f	class:CCMenuItemToggle	signature:(CCMenuItem *item)
CCMenuItemToggle::addSubItem	menu_nodes/CCMenuItem.h	/^    void addSubItem(CCMenuItem *item);$/;"	p	class:CCMenuItemToggle	access:public	signature:(CCMenuItem *item)
CCMenuItemToggle::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle * CCMenuItemToggle::create()$/;"	f	class:CCMenuItemToggle	signature:()
CCMenuItemToggle::create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle* CCMenuItemToggle::create(CCMenuItem *item)$/;"	f	class:CCMenuItemToggle	signature:(CCMenuItem *item)
CCMenuItemToggle::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemToggle* create();$/;"	p	class:CCMenuItemToggle	access:public	signature:()
CCMenuItemToggle::create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemToggle* create(CCMenuItem *item);$/;"	p	class:CCMenuItemToggle	access:public	signature:(CCMenuItem *item)
CCMenuItemToggle::createWithTarget	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle * CCMenuItemToggle::createWithTarget(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, ...)$/;"	f	class:CCMenuItemToggle	signature:(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, ...)
CCMenuItemToggle::createWithTarget	menu_nodes/CCMenuItem.h	/^    static CCMenuItemToggle* createWithTarget(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, ...);  $/;"	p	class:CCMenuItemToggle	access:public	signature:(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, ...)
CCMenuItemToggle::getSelectedIndex	menu_nodes/CCMenuItem.cpp	/^unsigned int CCMenuItemToggle::getSelectedIndex()$/;"	f	class:CCMenuItemToggle	signature:()
CCMenuItemToggle::getSubItems	menu_nodes/CCMenuItem.cpp	/^CCArray* CCMenuItemToggle::getSubItems()$/;"	f	class:CCMenuItemToggle	signature:()
CCMenuItemToggle::initWithItem	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemToggle::initWithItem(CCMenuItem *item)$/;"	f	class:CCMenuItemToggle	signature:(CCMenuItem *item)
CCMenuItemToggle::initWithItem	menu_nodes/CCMenuItem.h	/^    bool initWithItem(CCMenuItem *item);$/;"	p	class:CCMenuItemToggle	access:public	signature:(CCMenuItem *item)
CCMenuItemToggle::initWithTarget	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemToggle::initWithTarget(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, va_list args)$/;"	f	class:CCMenuItemToggle	signature:(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, va_list args)
CCMenuItemToggle::initWithTarget	menu_nodes/CCMenuItem.h	/^    bool initWithTarget(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, va_list args);$/;"	p	class:CCMenuItemToggle	access:public	signature:(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, va_list args)
CCMenuItemToggle::isOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCMenuItemToggle	access:public	signature:(void)
CCMenuItemToggle::selected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::selected()$/;"	f	class:CCMenuItemToggle	signature:()
CCMenuItemToggle::selected	menu_nodes/CCMenuItem.h	/^    virtual void selected();$/;"	p	class:CCMenuItemToggle	access:public	signature:()
CCMenuItemToggle::selectedItem	menu_nodes/CCMenuItem.cpp	/^CCMenuItem* CCMenuItemToggle::selectedItem()$/;"	f	class:CCMenuItemToggle	signature:()
CCMenuItemToggle::selectedItem	menu_nodes/CCMenuItem.h	/^    CCMenuItem* selectedItem();$/;"	p	class:CCMenuItemToggle	access:public	signature:()
CCMenuItemToggle::setEnabled	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::setEnabled(bool enabled)$/;"	f	class:CCMenuItemToggle	signature:(bool enabled)
CCMenuItemToggle::setEnabled	menu_nodes/CCMenuItem.h	/^    virtual void setEnabled(bool var);$/;"	p	class:CCMenuItemToggle	access:public	signature:(bool var)
CCMenuItemToggle::setOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCMenuItemToggle	access:public	signature:(bool bValue)
CCMenuItemToggle::setSelectedIndex	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::setSelectedIndex(unsigned int index)$/;"	f	class:CCMenuItemToggle	signature:(unsigned int index)
CCMenuItemToggle::setSubItems	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::setSubItems(CCArray* var)$/;"	f	class:CCMenuItemToggle	signature:(CCArray* var)
CCMenuItemToggle::unselected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::unselected()$/;"	f	class:CCMenuItemToggle	signature:()
CCMenuItemToggle::unselected	menu_nodes/CCMenuItem.h	/^    virtual void unselected();$/;"	p	class:CCMenuItemToggle	access:public	signature:()
CCMenuItemToggle::~CCMenuItemToggle	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle::~CCMenuItemToggle()$/;"	f	class:CCMenuItemToggle	signature:()
CCMenuItemToggle::~CCMenuItemToggle	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemToggle();$/;"	p	class:CCMenuItemToggle	access:public	signature:()
CCMessageBox	platform/CCCommon.h	/^void CC_DLL CCMessageBox(const char * pszMsg, const char * pszTitle);$/;"	p	signature:(const char * pszMsg, const char * pszTitle)
CCMotionStreak	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak::CCMotionStreak()$/;"	f	class:CCMotionStreak	signature:()
CCMotionStreak	misc_nodes/CCMotionStreak.h	/^    CCMotionStreak();$/;"	p	class:CCMotionStreak	access:public	signature:()
CCMotionStreak	misc_nodes/CCMotionStreak.h	/^class CC_DLL CCMotionStreak : public CCNodeRGBA, public CCTextureProtocol$/;"	c	inherits:CCNodeRGBA,CCTextureProtocol
CCMotionStreak::CCMotionStreak	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak::CCMotionStreak()$/;"	f	class:CCMotionStreak	signature:()
CCMotionStreak::CCMotionStreak	misc_nodes/CCMotionStreak.h	/^    CCMotionStreak();$/;"	p	class:CCMotionStreak	access:public	signature:()
CCMotionStreak::create	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak* CCMotionStreak::create(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)$/;"	f	class:CCMotionStreak	signature:(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)
CCMotionStreak::create	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak* CCMotionStreak::create(float fade, float minSeg, float stroke, ccColor3B color, const char* path)$/;"	f	class:CCMotionStreak	signature:(float fade, float minSeg, float stroke, ccColor3B color, const char* path)
CCMotionStreak::create	misc_nodes/CCMotionStreak.h	/^    static CCMotionStreak* create(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture);$/;"	p	class:CCMotionStreak	access:public	signature:(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)
CCMotionStreak::create	misc_nodes/CCMotionStreak.h	/^    static CCMotionStreak* create(float fade, float minSeg, float stroke, ccColor3B color, const char* path);$/;"	p	class:CCMotionStreak	access:public	signature:(float fade, float minSeg, float stroke, ccColor3B color, const char* path)
CCMotionStreak::draw	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::draw()$/;"	f	class:CCMotionStreak	signature:()
CCMotionStreak::draw	misc_nodes/CCMotionStreak.h	/^    virtual void draw();$/;"	p	class:CCMotionStreak	access:public	signature:()
CCMotionStreak::getBlendFunc	misc_nodes/CCMotionStreak.cpp	/^ccBlendFunc CCMotionStreak::getBlendFunc(void)$/;"	f	class:CCMotionStreak	signature:(void)
CCMotionStreak::getBlendFunc	misc_nodes/CCMotionStreak.h	/^    virtual ccBlendFunc getBlendFunc(void);$/;"	p	class:CCMotionStreak	access:public	signature:(void)
CCMotionStreak::getOpacity	misc_nodes/CCMotionStreak.cpp	/^GLubyte CCMotionStreak::getOpacity(void)$/;"	f	class:CCMotionStreak	signature:(void)
CCMotionStreak::getOpacity	misc_nodes/CCMotionStreak.h	/^    virtual GLubyte getOpacity(void);$/;"	p	class:CCMotionStreak	access:public	signature:(void)
CCMotionStreak::getTexture	misc_nodes/CCMotionStreak.cpp	/^CCTexture2D* CCMotionStreak::getTexture(void)$/;"	f	class:CCMotionStreak	signature:(void)
CCMotionStreak::getTexture	misc_nodes/CCMotionStreak.h	/^    virtual CCTexture2D* getTexture(void);$/;"	p	class:CCMotionStreak	access:public	signature:(void)
CCMotionStreak::initWithFade	misc_nodes/CCMotionStreak.cpp	/^bool CCMotionStreak::initWithFade(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)$/;"	f	class:CCMotionStreak	signature:(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)
CCMotionStreak::initWithFade	misc_nodes/CCMotionStreak.cpp	/^bool CCMotionStreak::initWithFade(float fade, float minSeg, float stroke, ccColor3B color, const char* path)$/;"	f	class:CCMotionStreak	signature:(float fade, float minSeg, float stroke, ccColor3B color, const char* path)
CCMotionStreak::initWithFade	misc_nodes/CCMotionStreak.h	/^    bool initWithFade(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture);$/;"	p	class:CCMotionStreak	access:public	signature:(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)
CCMotionStreak::initWithFade	misc_nodes/CCMotionStreak.h	/^    bool initWithFade(float fade, float minSeg, float stroke, ccColor3B color, const char* path);$/;"	p	class:CCMotionStreak	access:public	signature:(float fade, float minSeg, float stroke, ccColor3B color, const char* path)
CCMotionStreak::isFastMode	misc_nodes/CCMotionStreak.h	/^    inline bool isFastMode() { return m_bFastMode; }$/;"	f	class:CCMotionStreak	access:public	signature:()
CCMotionStreak::isOpacityModifyRGB	misc_nodes/CCMotionStreak.cpp	/^bool CCMotionStreak::isOpacityModifyRGB(void)$/;"	f	class:CCMotionStreak	signature:(void)
CCMotionStreak::isOpacityModifyRGB	misc_nodes/CCMotionStreak.h	/^    virtual bool isOpacityModifyRGB(void);$/;"	p	class:CCMotionStreak	access:public	signature:(void)
CCMotionStreak::isStartingPositionInitialized	misc_nodes/CCMotionStreak.h	/^    inline bool isStartingPositionInitialized() { return m_bStartingPositionInitialized; }$/;"	f	class:CCMotionStreak	access:public	signature:()
CCMotionStreak::m_bFastMode	misc_nodes/CCMotionStreak.h	/^    bool m_bFastMode;$/;"	m	class:CCMotionStreak	access:protected
CCMotionStreak::m_bStartingPositionInitialized	misc_nodes/CCMotionStreak.h	/^    bool m_bStartingPositionInitialized;$/;"	m	class:CCMotionStreak	access:protected
CCMotionStreak::m_fFadeDelta	misc_nodes/CCMotionStreak.h	/^    float m_fFadeDelta;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_fMinSeg	misc_nodes/CCMotionStreak.h	/^    float m_fMinSeg;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_fStroke	misc_nodes/CCMotionStreak.h	/^    float m_fStroke;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_pColorPointer	misc_nodes/CCMotionStreak.h	/^    GLubyte* m_pColorPointer;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_pPointState	misc_nodes/CCMotionStreak.h	/^    float* m_pPointState;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_pPointVertexes	misc_nodes/CCMotionStreak.h	/^    CCPoint* m_pPointVertexes;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_pTexCoords	misc_nodes/CCMotionStreak.h	/^    ccTex2F* m_pTexCoords;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_pTexture	misc_nodes/CCMotionStreak.h	/^    CCTexture2D* m_pTexture;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_pVertices	misc_nodes/CCMotionStreak.h	/^    ccVertex2F* m_pVertices;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_tBlendFunc	misc_nodes/CCMotionStreak.h	/^    ccBlendFunc m_tBlendFunc;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_tPositionR	misc_nodes/CCMotionStreak.h	/^    CCPoint m_tPositionR;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_uMaxPoints	misc_nodes/CCMotionStreak.h	/^    unsigned int m_uMaxPoints;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_uNuPoints	misc_nodes/CCMotionStreak.h	/^    unsigned int m_uNuPoints;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::m_uPreviousNuPoints	misc_nodes/CCMotionStreak.h	/^    unsigned int m_uPreviousNuPoints;$/;"	m	class:CCMotionStreak	access:private
CCMotionStreak::reset	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::reset()$/;"	f	class:CCMotionStreak	signature:()
CCMotionStreak::reset	misc_nodes/CCMotionStreak.h	/^    void reset();$/;"	p	class:CCMotionStreak	access:public	signature:()
CCMotionStreak::setBlendFunc	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCMotionStreak	signature:(ccBlendFunc blendFunc)
CCMotionStreak::setBlendFunc	misc_nodes/CCMotionStreak.h	/^    virtual void setBlendFunc(ccBlendFunc blendFunc);$/;"	p	class:CCMotionStreak	access:public	signature:(ccBlendFunc blendFunc)
CCMotionStreak::setFastMode	misc_nodes/CCMotionStreak.h	/^    inline void setFastMode(bool bFastMode) { m_bFastMode = bFastMode; }$/;"	f	class:CCMotionStreak	access:public	signature:(bool bFastMode)
CCMotionStreak::setOpacity	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setOpacity(GLubyte opacity)$/;"	f	class:CCMotionStreak	signature:(GLubyte opacity)
CCMotionStreak::setOpacity	misc_nodes/CCMotionStreak.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCMotionStreak	access:public	signature:(GLubyte opacity)
CCMotionStreak::setOpacityModifyRGB	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setOpacityModifyRGB(bool bValue)$/;"	f	class:CCMotionStreak	signature:(bool bValue)
CCMotionStreak::setOpacityModifyRGB	misc_nodes/CCMotionStreak.h	/^    virtual void setOpacityModifyRGB(bool bValue);$/;"	p	class:CCMotionStreak	access:public	signature:(bool bValue)
CCMotionStreak::setPosition	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setPosition(const CCPoint& position)$/;"	f	class:CCMotionStreak	signature:(const CCPoint& position)
CCMotionStreak::setPosition	misc_nodes/CCMotionStreak.h	/^    virtual void setPosition(const CCPoint& position);$/;"	p	class:CCMotionStreak	access:public	signature:(const CCPoint& position)
CCMotionStreak::setStartingPositionInitialized	misc_nodes/CCMotionStreak.h	/^    inline void setStartingPositionInitialized(bool bStartingPositionInitialized) $/;"	f	class:CCMotionStreak	access:public	signature:(bool bStartingPositionInitialized)
CCMotionStreak::setTexture	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setTexture(CCTexture2D *texture)$/;"	f	class:CCMotionStreak	signature:(CCTexture2D *texture)
CCMotionStreak::setTexture	misc_nodes/CCMotionStreak.h	/^    virtual void setTexture(CCTexture2D *texture);$/;"	p	class:CCMotionStreak	access:public	signature:(CCTexture2D *texture)
CCMotionStreak::tintWithColor	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::tintWithColor(ccColor3B colors)$/;"	f	class:CCMotionStreak	signature:(ccColor3B colors)
CCMotionStreak::tintWithColor	misc_nodes/CCMotionStreak.h	/^    void tintWithColor(ccColor3B colors);$/;"	p	class:CCMotionStreak	access:public	signature:(ccColor3B colors)
CCMotionStreak::update	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::update(float delta)$/;"	f	class:CCMotionStreak	signature:(float delta)
CCMotionStreak::update	misc_nodes/CCMotionStreak.h	/^    virtual void update(float delta);$/;"	p	class:CCMotionStreak	access:public	signature:(float delta)
CCMotionStreak::~CCMotionStreak	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak::~CCMotionStreak()$/;"	f	class:CCMotionStreak	signature:()
CCMotionStreak::~CCMotionStreak	misc_nodes/CCMotionStreak.h	/^    virtual ~CCMotionStreak();$/;"	p	class:CCMotionStreak	access:public	signature:()
CCMoveBy	actions/CCActionInterval.h	/^class CC_DLL CCMoveBy : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCMoveBy::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCMoveBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCMoveBy	signature:(CCZone *pZone)
CCMoveBy::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCMoveBy	access:public	signature:(CCZone* pZone)
CCMoveBy::create	actions/CCActionInterval.cpp	/^CCMoveBy* CCMoveBy::create(float duration, const CCPoint& deltaPosition)$/;"	f	class:CCMoveBy	signature:(float duration, const CCPoint& deltaPosition)
CCMoveBy::create	actions/CCActionInterval.h	/^    static CCMoveBy* create(float duration, const CCPoint& deltaPosition);$/;"	p	class:CCMoveBy	access:public	signature:(float duration, const CCPoint& deltaPosition)
CCMoveBy::initWithDuration	actions/CCActionInterval.cpp	/^bool CCMoveBy::initWithDuration(float duration, const CCPoint& deltaPosition)$/;"	f	class:CCMoveBy	signature:(float duration, const CCPoint& deltaPosition)
CCMoveBy::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, const CCPoint& deltaPosition);$/;"	p	class:CCMoveBy	access:public	signature:(float duration, const CCPoint& deltaPosition)
CCMoveBy::m_positionDelta	actions/CCActionInterval.h	/^    CCPoint m_positionDelta;$/;"	m	class:CCMoveBy	access:protected
CCMoveBy::m_previousPosition	actions/CCActionInterval.h	/^    CCPoint m_previousPosition;$/;"	m	class:CCMoveBy	access:protected
CCMoveBy::m_startPosition	actions/CCActionInterval.h	/^    CCPoint m_startPosition;$/;"	m	class:CCMoveBy	access:protected
CCMoveBy::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCMoveBy::reverse(void)$/;"	f	class:CCMoveBy	signature:(void)
CCMoveBy::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCMoveBy	access:public	signature:(void)
CCMoveBy::startWithTarget	actions/CCActionInterval.cpp	/^void CCMoveBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCMoveBy	signature:(CCNode *pTarget)
CCMoveBy::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCMoveBy	access:public	signature:(CCNode *pTarget)
CCMoveBy::update	actions/CCActionInterval.cpp	/^void CCMoveBy::update(float t)$/;"	f	class:CCMoveBy	signature:(float t)
CCMoveBy::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCMoveBy	access:public	signature:(float time)
CCMoveTo	actions/CCActionInterval.h	/^class CC_DLL CCMoveTo : public CCMoveBy$/;"	c	inherits:CCMoveBy
CCMoveTo::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCMoveTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCMoveTo	signature:(CCZone *pZone)
CCMoveTo::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCMoveTo	access:public	signature:(CCZone* pZone)
CCMoveTo::create	actions/CCActionInterval.cpp	/^CCMoveTo* CCMoveTo::create(float duration, const CCPoint& position)$/;"	f	class:CCMoveTo	signature:(float duration, const CCPoint& position)
CCMoveTo::create	actions/CCActionInterval.h	/^    static CCMoveTo* create(float duration, const CCPoint& position);$/;"	p	class:CCMoveTo	access:public	signature:(float duration, const CCPoint& position)
CCMoveTo::initWithDuration	actions/CCActionInterval.cpp	/^bool CCMoveTo::initWithDuration(float duration, const CCPoint& position)$/;"	f	class:CCMoveTo	signature:(float duration, const CCPoint& position)
CCMoveTo::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, const CCPoint& position);$/;"	p	class:CCMoveTo	access:public	signature:(float duration, const CCPoint& position)
CCMoveTo::m_endPosition	actions/CCActionInterval.h	/^    CCPoint m_endPosition;$/;"	m	class:CCMoveTo	access:protected
CCMoveTo::startWithTarget	actions/CCActionInterval.cpp	/^void CCMoveTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCMoveTo	signature:(CCNode *pTarget)
CCMoveTo::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCMoveTo	access:public	signature:(CCNode *pTarget)
CCNode	base_nodes/CCNode.cpp	/^CCNode::CCNode(void)$/;"	f	class:CCNode	signature:(void)
CCNode	base_nodes/CCNode.h	/^    CCNode(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode	base_nodes/CCNode.h	/^class CC_DLL CCNode : public CCObject$/;"	c	inherits:CCObject
CCNode::CCNode	base_nodes/CCNode.cpp	/^CCNode::CCNode(void)$/;"	f	class:CCNode	signature:(void)
CCNode::CCNode	base_nodes/CCNode.h	/^    CCNode(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::_setZOrder	base_nodes/CCNode.cpp	/^void CCNode::_setZOrder(int z)$/;"	f	class:CCNode	signature:(int z)
CCNode::_setZOrder	base_nodes/CCNode.h	/^    virtual void _setZOrder(int z);$/;"	p	class:CCNode	access:public	signature:(int z)
CCNode::addChild	base_nodes/CCNode.cpp	/^void CCNode::addChild(CCNode *child)$/;"	f	class:CCNode	signature:(CCNode *child)
CCNode::addChild	base_nodes/CCNode.cpp	/^void CCNode::addChild(CCNode *child, int zOrder)$/;"	f	class:CCNode	signature:(CCNode *child, int zOrder)
CCNode::addChild	base_nodes/CCNode.cpp	/^void CCNode::addChild(CCNode *child, int zOrder, int tag)$/;"	f	class:CCNode	signature:(CCNode *child, int zOrder, int tag)
CCNode::addChild	base_nodes/CCNode.h	/^    virtual void addChild(CCNode * child);$/;"	p	class:CCNode	access:public	signature:(CCNode * child)
CCNode::addChild	base_nodes/CCNode.h	/^    virtual void addChild(CCNode * child, int zOrder);$/;"	p	class:CCNode	access:public	signature:(CCNode * child, int zOrder)
CCNode::addChild	base_nodes/CCNode.h	/^    virtual void addChild(CCNode* child, int zOrder, int tag);$/;"	p	class:CCNode	access:public	signature:(CCNode* child, int zOrder, int tag)
CCNode::boundingBox	base_nodes/CCNode.cpp	/^CCRect CCNode::boundingBox()$/;"	f	class:CCNode	signature:()
CCNode::boundingBox	base_nodes/CCNode.h	/^    CCRect boundingBox(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::childrenAlloc	base_nodes/CCNode.cpp	/^void CCNode::childrenAlloc(void)$/;"	f	class:CCNode	signature:(void)
CCNode::childrenAlloc	base_nodes/CCNode.h	/^    void childrenAlloc(void);$/;"	p	class:CCNode	access:private	signature:(void)
CCNode::cleanup	base_nodes/CCNode.cpp	/^void CCNode::cleanup()$/;"	f	class:CCNode	signature:()
CCNode::cleanup	base_nodes/CCNode.h	/^    virtual void cleanup(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::convertToNodeSpace	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToNodeSpace(const CCPoint& worldPoint)$/;"	f	class:CCNode	signature:(const CCPoint& worldPoint)
CCNode::convertToNodeSpace	base_nodes/CCNode.h	/^    CCPoint convertToNodeSpace(const CCPoint& worldPoint);$/;"	p	class:CCNode	access:public	signature:(const CCPoint& worldPoint)
CCNode::convertToNodeSpaceAR	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToNodeSpaceAR(const CCPoint& worldPoint)$/;"	f	class:CCNode	signature:(const CCPoint& worldPoint)
CCNode::convertToNodeSpaceAR	base_nodes/CCNode.h	/^    CCPoint convertToNodeSpaceAR(const CCPoint& worldPoint);$/;"	p	class:CCNode	access:public	signature:(const CCPoint& worldPoint)
CCNode::convertToWindowSpace	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToWindowSpace(const CCPoint& nodePoint)$/;"	f	class:CCNode	signature:(const CCPoint& nodePoint)
CCNode::convertToWindowSpace	base_nodes/CCNode.h	/^    CCPoint convertToWindowSpace(const CCPoint& nodePoint);$/;"	p	class:CCNode	access:private	signature:(const CCPoint& nodePoint)
CCNode::convertToWorldSpace	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToWorldSpace(const CCPoint& nodePoint)$/;"	f	class:CCNode	signature:(const CCPoint& nodePoint)
CCNode::convertToWorldSpace	base_nodes/CCNode.h	/^    CCPoint convertToWorldSpace(const CCPoint& nodePoint);$/;"	p	class:CCNode	access:public	signature:(const CCPoint& nodePoint)
CCNode::convertToWorldSpaceAR	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToWorldSpaceAR(const CCPoint& nodePoint)$/;"	f	class:CCNode	signature:(const CCPoint& nodePoint)
CCNode::convertToWorldSpaceAR	base_nodes/CCNode.h	/^    CCPoint convertToWorldSpaceAR(const CCPoint& nodePoint);$/;"	p	class:CCNode	access:public	signature:(const CCPoint& nodePoint)
CCNode::convertTouchToNodeSpace	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertTouchToNodeSpace(CCTouch *touch)$/;"	f	class:CCNode	signature:(CCTouch *touch)
CCNode::convertTouchToNodeSpace	base_nodes/CCNode.h	/^    CCPoint convertTouchToNodeSpace(CCTouch * touch);$/;"	p	class:CCNode	access:public	signature:(CCTouch * touch)
CCNode::convertTouchToNodeSpaceAR	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertTouchToNodeSpaceAR(CCTouch *touch)$/;"	f	class:CCNode	signature:(CCTouch *touch)
CCNode::convertTouchToNodeSpaceAR	base_nodes/CCNode.h	/^    CCPoint convertTouchToNodeSpaceAR(CCTouch * touch);$/;"	p	class:CCNode	access:public	signature:(CCTouch * touch)
CCNode::create	base_nodes/CCNode.cpp	/^CCNode * CCNode::create(void)$/;"	f	class:CCNode	signature:(void)
CCNode::create	base_nodes/CCNode.h	/^    static CCNode * create(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::description	base_nodes/CCNode.cpp	/^const char* CCNode::description()$/;"	f	class:CCNode	signature:()
CCNode::description	base_nodes/CCNode.h	/^    const char* description(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::detachChild	base_nodes/CCNode.cpp	/^void CCNode::detachChild(CCNode *child, bool doCleanup)$/;"	f	class:CCNode	signature:(CCNode *child, bool doCleanup)
CCNode::detachChild	base_nodes/CCNode.h	/^    void detachChild(CCNode *child, bool doCleanup);$/;"	p	class:CCNode	access:private	signature:(CCNode *child, bool doCleanup)
CCNode::draw	base_nodes/CCNode.cpp	/^ void CCNode::draw()$/;"	f	class:CCNode	signature:()
CCNode::draw	base_nodes/CCNode.h	/^    virtual void draw(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::getActionByTag	base_nodes/CCNode.cpp	/^CCAction * CCNode::getActionByTag(int tag)$/;"	f	class:CCNode	signature:(int tag)
CCNode::getActionByTag	base_nodes/CCNode.h	/^    CCAction* getActionByTag(int tag);$/;"	p	class:CCNode	access:public	signature:(int tag)
CCNode::getActionManager	base_nodes/CCNode.cpp	/^CCActionManager* CCNode::getActionManager()$/;"	f	class:CCNode	signature:()
CCNode::getActionManager	base_nodes/CCNode.h	/^    virtual CCActionManager* getActionManager();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getAnchorPoint	base_nodes/CCNode.cpp	/^const CCPoint& CCNode::getAnchorPoint()$/;"	f	class:CCNode	signature:()
CCNode::getAnchorPoint	base_nodes/CCNode.h	/^    virtual const CCPoint& getAnchorPoint();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getAnchorPointInPoints	base_nodes/CCNode.cpp	/^const CCPoint& CCNode::getAnchorPointInPoints()$/;"	f	class:CCNode	signature:()
CCNode::getAnchorPointInPoints	base_nodes/CCNode.h	/^    virtual const CCPoint& getAnchorPointInPoints();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getCamera	base_nodes/CCNode.cpp	/^CCCamera* CCNode::getCamera()$/;"	f	class:CCNode	signature:()
CCNode::getCamera	base_nodes/CCNode.h	/^    virtual CCCamera* getCamera();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getChildByTag	base_nodes/CCNode.cpp	/^CCNode* CCNode::getChildByTag(int aTag)$/;"	f	class:CCNode	signature:(int aTag)
CCNode::getChildByTag	base_nodes/CCNode.h	/^    CCNode * getChildByTag(int tag);$/;"	p	class:CCNode	access:public	signature:(int tag)
CCNode::getChildren	base_nodes/CCNode.cpp	/^CCArray* CCNode::getChildren()$/;"	f	class:CCNode	signature:()
CCNode::getChildren	base_nodes/CCNode.h	/^    virtual CCArray* getChildren();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getChildrenCount	base_nodes/CCNode.cpp	/^unsigned int CCNode::getChildrenCount(void)$/;"	f	class:CCNode	signature:(void)
CCNode::getChildrenCount	base_nodes/CCNode.h	/^    unsigned int getChildrenCount(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::getContentSize	base_nodes/CCNode.cpp	/^const CCSize& CCNode::getContentSize()$/;"	f	class:CCNode	signature:()
CCNode::getContentSize	base_nodes/CCNode.h	/^    virtual const CCSize& getContentSize();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getGLServerState	base_nodes/CCNode.cpp	/^ccGLServerState CCNode::getGLServerState()$/;"	f	class:CCNode	signature:()
CCNode::getGLServerState	base_nodes/CCNode.h	/^    virtual ccGLServerState getGLServerState();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getGrid	base_nodes/CCNode.cpp	/^CCGridBase* CCNode::getGrid()$/;"	f	class:CCNode	signature:()
CCNode::getGrid	base_nodes/CCNode.h	/^    virtual CCGridBase* getGrid();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getOrderOfArrival	base_nodes/CCNode.cpp	/^unsigned int CCNode::getOrderOfArrival()$/;"	f	class:CCNode	signature:()
CCNode::getOrderOfArrival	base_nodes/CCNode.h	/^    virtual unsigned int getOrderOfArrival();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getParent	base_nodes/CCNode.cpp	/^CCNode * CCNode::getParent()$/;"	f	class:CCNode	signature:()
CCNode::getParent	base_nodes/CCNode.h	/^    virtual CCNode* getParent();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getPosition	base_nodes/CCNode.cpp	/^const CCPoint& CCNode::getPosition()$/;"	f	class:CCNode	signature:()
CCNode::getPosition	base_nodes/CCNode.cpp	/^void CCNode::getPosition(float* x, float* y)$/;"	f	class:CCNode	signature:(float* x, float* y)
CCNode::getPosition	base_nodes/CCNode.h	/^    virtual const CCPoint& getPosition();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getPosition	base_nodes/CCNode.h	/^    void getPosition(float* x, float* y);$/;"	p	class:CCNode	access:public	signature:(float* x, float* y)
CCNode::getPositionX	base_nodes/CCNode.cpp	/^float CCNode::getPositionX(void)$/;"	f	class:CCNode	signature:(void)
CCNode::getPositionX	base_nodes/CCNode.h	/^    float getPositionX(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::getPositionY	base_nodes/CCNode.cpp	/^float CCNode::getPositionY(void)$/;"	f	class:CCNode	signature:(void)
CCNode::getPositionY	base_nodes/CCNode.h	/^    float getPositionY(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::getRotation	base_nodes/CCNode.cpp	/^float CCNode::getRotation()$/;"	f	class:CCNode	signature:()
CCNode::getRotation	base_nodes/CCNode.h	/^    virtual float getRotation();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getRotationX	base_nodes/CCNode.cpp	/^float CCNode::getRotationX()$/;"	f	class:CCNode	signature:()
CCNode::getRotationX	base_nodes/CCNode.h	/^    virtual float getRotationX();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getRotationY	base_nodes/CCNode.cpp	/^float CCNode::getRotationY()$/;"	f	class:CCNode	signature:()
CCNode::getRotationY	base_nodes/CCNode.h	/^    virtual float getRotationY();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getScale	base_nodes/CCNode.cpp	/^float CCNode::getScale(void)$/;"	f	class:CCNode	signature:(void)
CCNode::getScale	base_nodes/CCNode.h	/^    virtual float getScale();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getScaleX	base_nodes/CCNode.cpp	/^float CCNode::getScaleX()$/;"	f	class:CCNode	signature:()
CCNode::getScaleX	base_nodes/CCNode.h	/^    virtual float getScaleX();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getScaleY	base_nodes/CCNode.cpp	/^float CCNode::getScaleY()$/;"	f	class:CCNode	signature:()
CCNode::getScaleY	base_nodes/CCNode.h	/^    virtual float getScaleY();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getScheduler	base_nodes/CCNode.cpp	/^CCScheduler* CCNode::getScheduler()$/;"	f	class:CCNode	signature:()
CCNode::getScheduler	base_nodes/CCNode.h	/^    virtual CCScheduler* getScheduler();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getScriptHandler	base_nodes/CCNode.h	/^    inline int getScriptHandler() { return m_nScriptHandler; };$/;"	f	class:CCNode	access:public	signature:()
CCNode::getShaderProgram	base_nodes/CCNode.cpp	/^CCGLProgram* CCNode::getShaderProgram()$/;"	f	class:CCNode	signature:()
CCNode::getShaderProgram	base_nodes/CCNode.h	/^    virtual CCGLProgram* getShaderProgram();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getSkewX	base_nodes/CCNode.cpp	/^float CCNode::getSkewX()$/;"	f	class:CCNode	signature:()
CCNode::getSkewX	base_nodes/CCNode.h	/^    virtual float getSkewX();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getSkewY	base_nodes/CCNode.cpp	/^float CCNode::getSkewY()$/;"	f	class:CCNode	signature:()
CCNode::getSkewY	base_nodes/CCNode.h	/^    virtual float getSkewY();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getTag	base_nodes/CCNode.cpp	/^int CCNode::getTag()$/;"	f	class:CCNode	signature:()
CCNode::getTag	base_nodes/CCNode.h	/^    virtual int getTag();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getUserData	base_nodes/CCNode.cpp	/^void * CCNode::getUserData()$/;"	f	class:CCNode	signature:()
CCNode::getUserData	base_nodes/CCNode.h	/^    virtual void* getUserData();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getUserObject	base_nodes/CCNode.cpp	/^CCObject* CCNode::getUserObject()$/;"	f	class:CCNode	signature:()
CCNode::getUserObject	base_nodes/CCNode.h	/^    virtual CCObject* getUserObject();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getVertexZ	base_nodes/CCNode.cpp	/^float CCNode::getVertexZ()$/;"	f	class:CCNode	signature:()
CCNode::getVertexZ	base_nodes/CCNode.h	/^    virtual float getVertexZ();$/;"	p	class:CCNode	access:public	signature:()
CCNode::getZOrder	base_nodes/CCNode.cpp	/^int CCNode::getZOrder()$/;"	f	class:CCNode	signature:()
CCNode::getZOrder	base_nodes/CCNode.h	/^    virtual int getZOrder();$/;"	p	class:CCNode	access:public	signature:()
CCNode::ignoreAnchorPointForPosition	base_nodes/CCNode.cpp	/^void CCNode::ignoreAnchorPointForPosition(bool newValue)$/;"	f	class:CCNode	signature:(bool newValue)
CCNode::ignoreAnchorPointForPosition	base_nodes/CCNode.h	/^    virtual void ignoreAnchorPointForPosition(bool ignore);$/;"	p	class:CCNode	access:public	signature:(bool ignore)
CCNode::init	base_nodes/CCNode.cpp	/^bool CCNode::init()$/;"	f	class:CCNode	signature:()
CCNode::init	base_nodes/CCNode.h	/^    virtual bool init();$/;"	p	class:CCNode	access:public	signature:()
CCNode::insertChild	base_nodes/CCNode.cpp	/^void CCNode::insertChild(CCNode* child, int z)$/;"	f	class:CCNode	signature:(CCNode* child, int z)
CCNode::insertChild	base_nodes/CCNode.h	/^    void insertChild(CCNode* child, int z);$/;"	p	class:CCNode	access:private	signature:(CCNode* child, int z)
CCNode::isIgnoreAnchorPointForPosition	base_nodes/CCNode.cpp	/^bool CCNode::isIgnoreAnchorPointForPosition()$/;"	f	class:CCNode	signature:()
CCNode::isIgnoreAnchorPointForPosition	base_nodes/CCNode.h	/^    virtual bool isIgnoreAnchorPointForPosition();$/;"	p	class:CCNode	access:public	signature:()
CCNode::isRunning	base_nodes/CCNode.cpp	/^bool CCNode::isRunning()$/;"	f	class:CCNode	signature:()
CCNode::isRunning	base_nodes/CCNode.h	/^    virtual bool isRunning();$/;"	p	class:CCNode	access:public	signature:()
CCNode::isScheduled	base_nodes/CCNode.h	/^    bool isScheduled(SEL_SCHEDULE selector);$/;"	p	class:CCNode	access:public	signature:(SEL_SCHEDULE selector)
CCNode::isVisible	base_nodes/CCNode.cpp	/^bool CCNode::isVisible()$/;"	f	class:CCNode	signature:()
CCNode::isVisible	base_nodes/CCNode.h	/^    virtual bool isVisible();$/;"	p	class:CCNode	access:public	signature:()
CCNode::m_bAdditionalTransformDirty	base_nodes/CCNode.h	/^    bool m_bAdditionalTransformDirty;   \/\/\/< The flag to check whether the additional transform is dirty$/;"	m	class:CCNode	access:protected
CCNode::m_bIgnoreAnchorPointForPosition	base_nodes/CCNode.h	/^    bool m_bIgnoreAnchorPointForPosition; \/\/\/< true if the Anchor Point will be (0,0) when you position the CCNode, false otherwise.$/;"	m	class:CCNode	access:protected
CCNode::m_bInverseDirty	base_nodes/CCNode.h	/^    bool m_bInverseDirty;               \/\/\/< transform dirty flag$/;"	m	class:CCNode	access:protected
CCNode::m_bReorderChildDirty	base_nodes/CCNode.h	/^    bool m_bReorderChildDirty;          \/\/\/< children order dirty flag$/;"	m	class:CCNode	access:protected
CCNode::m_bRunning	base_nodes/CCNode.h	/^    bool m_bRunning;                    \/\/\/< is running$/;"	m	class:CCNode	access:protected
CCNode::m_bTransformDirty	base_nodes/CCNode.h	/^    bool m_bTransformDirty;             \/\/\/< transform dirty flag$/;"	m	class:CCNode	access:protected
CCNode::m_bVisible	base_nodes/CCNode.h	/^    bool m_bVisible;                    \/\/\/< is this node visible$/;"	m	class:CCNode	access:protected
CCNode::m_eGLServerState	base_nodes/CCNode.h	/^    ccGLServerState m_eGLServerState;   \/\/\/< OpenGL servier side state$/;"	m	class:CCNode	access:protected
CCNode::m_eScriptType	base_nodes/CCNode.h	/^    ccScriptType m_eScriptType;         \/\/\/< type of script binding, lua or javascript$/;"	m	class:CCNode	access:protected
CCNode::m_fRotationX	base_nodes/CCNode.h	/^    float m_fRotationX;                 \/\/\/< rotation angle on x-axis$/;"	m	class:CCNode	access:protected
CCNode::m_fRotationY	base_nodes/CCNode.h	/^    float m_fRotationY;                 \/\/\/< rotation angle on y-axis$/;"	m	class:CCNode	access:protected
CCNode::m_fScaleX	base_nodes/CCNode.h	/^    float m_fScaleX;                    \/\/\/< scaling factor on x-axis$/;"	m	class:CCNode	access:protected
CCNode::m_fScaleY	base_nodes/CCNode.h	/^    float m_fScaleY;                    \/\/\/< scaling factor on y-axis$/;"	m	class:CCNode	access:protected
CCNode::m_fSkewX	base_nodes/CCNode.h	/^    float m_fSkewX;                     \/\/\/< skew angle on x-axis$/;"	m	class:CCNode	access:protected
CCNode::m_fSkewY	base_nodes/CCNode.h	/^    float m_fSkewY;                     \/\/\/< skew angle on y-axis$/;"	m	class:CCNode	access:protected
CCNode::m_fVertexZ	base_nodes/CCNode.h	/^    float m_fVertexZ;                   \/\/\/< OpenGL real Z vertex$/;"	m	class:CCNode	access:protected
CCNode::m_nScriptHandler	base_nodes/CCNode.h	/^    int m_nScriptHandler;               \/\/\/< script handler for onEnter() & onExit(), used in Javascript binding and Lua binding.$/;"	m	class:CCNode	access:protected
CCNode::m_nTag	base_nodes/CCNode.h	/^    int m_nTag;                         \/\/\/< a tag. Can be any number you assigned just to identify this node$/;"	m	class:CCNode	access:protected
CCNode::m_nUpdateScriptHandler	base_nodes/CCNode.h	/^    int m_nUpdateScriptHandler;         \/\/\/< script handler for update() callback per frame, which is invoked from lua & javascript.$/;"	m	class:CCNode	access:protected
CCNode::m_nZOrder	base_nodes/CCNode.h	/^    int m_nZOrder;                      \/\/\/< z-order value that affects the draw order$/;"	m	class:CCNode	access:protected
CCNode::m_obAnchorPoint	base_nodes/CCNode.h	/^    CCPoint m_obAnchorPoint;            \/\/\/< anchor point normalized (NOT in points)$/;"	m	class:CCNode	access:protected
CCNode::m_obAnchorPointInPoints	base_nodes/CCNode.h	/^    CCPoint m_obAnchorPointInPoints;    \/\/\/< anchor point in points$/;"	m	class:CCNode	access:protected
CCNode::m_obContentSize	base_nodes/CCNode.h	/^    CCSize m_obContentSize;             \/\/\/< untransformed size of the node$/;"	m	class:CCNode	access:protected
CCNode::m_obPosition	base_nodes/CCNode.h	/^    CCPoint m_obPosition;               \/\/\/< position of the node$/;"	m	class:CCNode	access:protected
CCNode::m_pActionManager	base_nodes/CCNode.h	/^    CCActionManager *m_pActionManager;  \/\/\/< a pointer to ActionManager singleton, which is used to handle all the actions$/;"	m	class:CCNode	access:protected
CCNode::m_pCamera	base_nodes/CCNode.h	/^    CCCamera *m_pCamera;                \/\/\/< a camera$/;"	m	class:CCNode	access:protected
CCNode::m_pChildren	base_nodes/CCNode.h	/^    CCArray *m_pChildren;               \/\/\/< array of children nodes$/;"	m	class:CCNode	access:protected
CCNode::m_pGrid	base_nodes/CCNode.h	/^    CCGridBase *m_pGrid;                \/\/\/< a grid$/;"	m	class:CCNode	access:protected
CCNode::m_pParent	base_nodes/CCNode.h	/^    CCNode *m_pParent;                  \/\/\/< weak reference to parent node$/;"	m	class:CCNode	access:protected
CCNode::m_pScheduler	base_nodes/CCNode.h	/^    CCScheduler *m_pScheduler;          \/\/\/< scheduler used to schedule timers and updates$/;"	m	class:CCNode	access:protected
CCNode::m_pShaderProgram	base_nodes/CCNode.h	/^    CCGLProgram *m_pShaderProgram;      \/\/\/< OpenGL shader$/;"	m	class:CCNode	access:protected
CCNode::m_pUserData	base_nodes/CCNode.h	/^    void *m_pUserData;                  \/\/\/< A user assingned void pointer, Can be point to any cpp object$/;"	m	class:CCNode	access:protected
CCNode::m_pUserObject	base_nodes/CCNode.h	/^    CCObject *m_pUserObject;            \/\/\/< A user assigned CCObject$/;"	m	class:CCNode	access:protected
CCNode::m_sAdditionalTransform	base_nodes/CCNode.h	/^    CCAffineTransform m_sAdditionalTransform; \/\/\/< transform$/;"	m	class:CCNode	access:protected
CCNode::m_sInverse	base_nodes/CCNode.h	/^    CCAffineTransform m_sInverse;       \/\/\/< transform$/;"	m	class:CCNode	access:protected
CCNode::m_sTransform	base_nodes/CCNode.h	/^    CCAffineTransform m_sTransform;     \/\/\/< transform$/;"	m	class:CCNode	access:protected
CCNode::m_uOrderOfArrival	base_nodes/CCNode.h	/^    unsigned int m_uOrderOfArrival;     \/\/\/< used to preserve sequence while sorting children with the same zOrder$/;"	m	class:CCNode	access:protected
CCNode::nodeToParentTransform	base_nodes/CCNode.cpp	/^CCAffineTransform CCNode::nodeToParentTransform(void)$/;"	f	class:CCNode	signature:(void)
CCNode::nodeToParentTransform	base_nodes/CCNode.h	/^    virtual CCAffineTransform nodeToParentTransform(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::nodeToWorldTransform	base_nodes/CCNode.cpp	/^CCAffineTransform CCNode::nodeToWorldTransform()$/;"	f	class:CCNode	signature:()
CCNode::nodeToWorldTransform	base_nodes/CCNode.h	/^    virtual CCAffineTransform nodeToWorldTransform(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::numberOfRunningActions	base_nodes/CCNode.cpp	/^unsigned int CCNode::numberOfRunningActions()$/;"	f	class:CCNode	signature:()
CCNode::numberOfRunningActions	base_nodes/CCNode.h	/^    unsigned int numberOfRunningActions(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::onEnter	base_nodes/CCNode.cpp	/^void CCNode::onEnter()$/;"	f	class:CCNode	signature:()
CCNode::onEnter	base_nodes/CCNode.h	/^    virtual void onEnter();$/;"	p	class:CCNode	access:public	signature:()
CCNode::onEnterTransitionDidFinish	base_nodes/CCNode.cpp	/^void CCNode::onEnterTransitionDidFinish()$/;"	f	class:CCNode	signature:()
CCNode::onEnterTransitionDidFinish	base_nodes/CCNode.h	/^    virtual void onEnterTransitionDidFinish();$/;"	p	class:CCNode	access:public	signature:()
CCNode::onExit	base_nodes/CCNode.cpp	/^void CCNode::onExit()$/;"	f	class:CCNode	signature:()
CCNode::onExit	base_nodes/CCNode.h	/^    virtual void onExit();$/;"	p	class:CCNode	access:public	signature:()
CCNode::onExitTransitionDidStart	base_nodes/CCNode.cpp	/^void CCNode::onExitTransitionDidStart()$/;"	f	class:CCNode	signature:()
CCNode::onExitTransitionDidStart	base_nodes/CCNode.h	/^    virtual void onExitTransitionDidStart();$/;"	p	class:CCNode	access:public	signature:()
CCNode::parentToNodeTransform	base_nodes/CCNode.cpp	/^CCAffineTransform CCNode::parentToNodeTransform(void)$/;"	f	class:CCNode	signature:(void)
CCNode::parentToNodeTransform	base_nodes/CCNode.h	/^    virtual CCAffineTransform parentToNodeTransform(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::pauseSchedulerAndActions	base_nodes/CCNode.cpp	/^void CCNode::pauseSchedulerAndActions()$/;"	f	class:CCNode	signature:()
CCNode::pauseSchedulerAndActions	base_nodes/CCNode.h	/^    void pauseSchedulerAndActions(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::registerScriptHandler	base_nodes/CCNode.cpp	/^void CCNode::registerScriptHandler(int nHandler)$/;"	f	class:CCNode	signature:(int nHandler)
CCNode::registerScriptHandler	base_nodes/CCNode.h	/^    virtual void registerScriptHandler(int handler);$/;"	p	class:CCNode	access:public	signature:(int handler)
CCNode::removeAllChildren	base_nodes/CCNode.cpp	/^void CCNode::removeAllChildren()$/;"	f	class:CCNode	signature:()
CCNode::removeAllChildren	base_nodes/CCNode.h	/^    virtual void removeAllChildren();$/;"	p	class:CCNode	access:public	signature:()
CCNode::removeAllChildrenWithCleanup	base_nodes/CCNode.cpp	/^void CCNode::removeAllChildrenWithCleanup(bool cleanup)$/;"	f	class:CCNode	signature:(bool cleanup)
CCNode::removeAllChildrenWithCleanup	base_nodes/CCNode.h	/^    virtual void removeAllChildrenWithCleanup(bool cleanup);$/;"	p	class:CCNode	access:public	signature:(bool cleanup)
CCNode::removeChild	base_nodes/CCNode.cpp	/^void CCNode::removeChild(CCNode* child)$/;"	f	class:CCNode	signature:(CCNode* child)
CCNode::removeChild	base_nodes/CCNode.cpp	/^void CCNode::removeChild(CCNode* child, bool cleanup)$/;"	f	class:CCNode	signature:(CCNode* child, bool cleanup)
CCNode::removeChild	base_nodes/CCNode.h	/^    virtual void removeChild(CCNode* child);$/;"	p	class:CCNode	access:public	signature:(CCNode* child)
CCNode::removeChild	base_nodes/CCNode.h	/^    virtual void removeChild(CCNode* child, bool cleanup);$/;"	p	class:CCNode	access:public	signature:(CCNode* child, bool cleanup)
CCNode::removeChildByTag	base_nodes/CCNode.cpp	/^void CCNode::removeChildByTag(int tag)$/;"	f	class:CCNode	signature:(int tag)
CCNode::removeChildByTag	base_nodes/CCNode.cpp	/^void CCNode::removeChildByTag(int tag, bool cleanup)$/;"	f	class:CCNode	signature:(int tag, bool cleanup)
CCNode::removeChildByTag	base_nodes/CCNode.h	/^    virtual void removeChildByTag(int tag);$/;"	p	class:CCNode	access:public	signature:(int tag)
CCNode::removeChildByTag	base_nodes/CCNode.h	/^    virtual void removeChildByTag(int tag, bool cleanup);$/;"	p	class:CCNode	access:public	signature:(int tag, bool cleanup)
CCNode::removeFromParent	base_nodes/CCNode.cpp	/^void CCNode::removeFromParent()$/;"	f	class:CCNode	signature:()
CCNode::removeFromParent	base_nodes/CCNode.h	/^    virtual void removeFromParent();$/;"	p	class:CCNode	access:public	signature:()
CCNode::removeFromParentAndCleanup	base_nodes/CCNode.cpp	/^void CCNode::removeFromParentAndCleanup(bool cleanup)$/;"	f	class:CCNode	signature:(bool cleanup)
CCNode::removeFromParentAndCleanup	base_nodes/CCNode.h	/^    virtual void removeFromParentAndCleanup(bool cleanup);$/;"	p	class:CCNode	access:public	signature:(bool cleanup)
CCNode::reorderChild	base_nodes/CCNode.cpp	/^void CCNode::reorderChild(CCNode *child, int zOrder)$/;"	f	class:CCNode	signature:(CCNode *child, int zOrder)
CCNode::reorderChild	base_nodes/CCNode.h	/^    virtual void reorderChild(CCNode * child, int zOrder);$/;"	p	class:CCNode	access:public	signature:(CCNode * child, int zOrder)
CCNode::resumeSchedulerAndActions	base_nodes/CCNode.cpp	/^void CCNode::resumeSchedulerAndActions()$/;"	f	class:CCNode	signature:()
CCNode::resumeSchedulerAndActions	base_nodes/CCNode.h	/^    void resumeSchedulerAndActions(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::runAction	base_nodes/CCNode.cpp	/^CCAction * CCNode::runAction(CCAction* action)$/;"	f	class:CCNode	signature:(CCAction* action)
CCNode::runAction	base_nodes/CCNode.h	/^    CCAction* runAction(CCAction* action);$/;"	p	class:CCNode	access:public	signature:(CCAction* action)
CCNode::schedule	base_nodes/CCNode.cpp	/^void CCNode::schedule(SEL_SCHEDULE selector)$/;"	f	class:CCNode	signature:(SEL_SCHEDULE selector)
CCNode::schedule	base_nodes/CCNode.cpp	/^void CCNode::schedule(SEL_SCHEDULE selector, float interval)$/;"	f	class:CCNode	signature:(SEL_SCHEDULE selector, float interval)
CCNode::schedule	base_nodes/CCNode.cpp	/^void CCNode::schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)$/;"	f	class:CCNode	signature:(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)
CCNode::schedule	base_nodes/CCNode.h	/^    void schedule(SEL_SCHEDULE selector);$/;"	p	class:CCNode	access:public	signature:(SEL_SCHEDULE selector)
CCNode::schedule	base_nodes/CCNode.h	/^    void schedule(SEL_SCHEDULE selector, float interval);$/;"	p	class:CCNode	access:public	signature:(SEL_SCHEDULE selector, float interval)
CCNode::schedule	base_nodes/CCNode.h	/^    void schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay);$/;"	p	class:CCNode	access:public	signature:(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)
CCNode::scheduleOnce	base_nodes/CCNode.cpp	/^void CCNode::scheduleOnce(SEL_SCHEDULE selector, float delay)$/;"	f	class:CCNode	signature:(SEL_SCHEDULE selector, float delay)
CCNode::scheduleOnce	base_nodes/CCNode.h	/^    void scheduleOnce(SEL_SCHEDULE selector, float delay);$/;"	p	class:CCNode	access:public	signature:(SEL_SCHEDULE selector, float delay)
CCNode::scheduleUpdate	base_nodes/CCNode.cpp	/^void CCNode::scheduleUpdate()$/;"	f	class:CCNode	signature:()
CCNode::scheduleUpdate	base_nodes/CCNode.h	/^    void scheduleUpdate(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::scheduleUpdateWithPriority	base_nodes/CCNode.cpp	/^void CCNode::scheduleUpdateWithPriority(int priority)$/;"	f	class:CCNode	signature:(int priority)
CCNode::scheduleUpdateWithPriority	base_nodes/CCNode.h	/^    void scheduleUpdateWithPriority(int priority);$/;"	p	class:CCNode	access:public	signature:(int priority)
CCNode::scheduleUpdateWithPriorityLua	base_nodes/CCNode.cpp	/^void CCNode::scheduleUpdateWithPriorityLua(int nHandler, int priority)$/;"	f	class:CCNode	signature:(int nHandler, int priority)
CCNode::scheduleUpdateWithPriorityLua	base_nodes/CCNode.h	/^    void scheduleUpdateWithPriorityLua(int nHandler, int priority);$/;"	p	class:CCNode	access:public	signature:(int nHandler, int priority)
CCNode::setActionManager	base_nodes/CCNode.cpp	/^void CCNode::setActionManager(CCActionManager* actionManager)$/;"	f	class:CCNode	signature:(CCActionManager* actionManager)
CCNode::setActionManager	base_nodes/CCNode.h	/^    virtual void setActionManager(CCActionManager* actionManager);$/;"	p	class:CCNode	access:public	signature:(CCActionManager* actionManager)
CCNode::setAdditionalTransform	base_nodes/CCNode.cpp	/^void CCNode::setAdditionalTransform(const CCAffineTransform& additionalTransform)$/;"	f	class:CCNode	signature:(const CCAffineTransform& additionalTransform)
CCNode::setAdditionalTransform	base_nodes/CCNode.h	/^    void setAdditionalTransform(const CCAffineTransform& additionalTransform);$/;"	p	class:CCNode	access:public	signature:(const CCAffineTransform& additionalTransform)
CCNode::setAnchorPoint	base_nodes/CCNode.cpp	/^void CCNode::setAnchorPoint(const CCPoint& point)$/;"	f	class:CCNode	signature:(const CCPoint& point)
CCNode::setAnchorPoint	base_nodes/CCNode.h	/^    virtual void setAnchorPoint(const CCPoint& anchorPoint);$/;"	p	class:CCNode	access:public	signature:(const CCPoint& anchorPoint)
CCNode::setContentSize	base_nodes/CCNode.cpp	/^void CCNode::setContentSize(const CCSize & size)$/;"	f	class:CCNode	signature:(const CCSize & size)
CCNode::setContentSize	base_nodes/CCNode.h	/^    virtual void setContentSize(const CCSize& contentSize);$/;"	p	class:CCNode	access:public	signature:(const CCSize& contentSize)
CCNode::setGLServerState	base_nodes/CCNode.cpp	/^void CCNode::setGLServerState(ccGLServerState glServerState)$/;"	f	class:CCNode	signature:(ccGLServerState glServerState)
CCNode::setGLServerState	base_nodes/CCNode.h	/^    virtual void setGLServerState(ccGLServerState glServerState);$/;"	p	class:CCNode	access:public	signature:(ccGLServerState glServerState)
CCNode::setGrid	base_nodes/CCNode.cpp	/^void CCNode::setGrid(CCGridBase* pGrid)$/;"	f	class:CCNode	signature:(CCGridBase* pGrid)
CCNode::setGrid	base_nodes/CCNode.h	/^    virtual void setGrid(CCGridBase *pGrid);$/;"	p	class:CCNode	access:public	signature:(CCGridBase *pGrid)
CCNode::setOrderOfArrival	base_nodes/CCNode.cpp	/^void CCNode::setOrderOfArrival(unsigned int uOrderOfArrival)$/;"	f	class:CCNode	signature:(unsigned int uOrderOfArrival)
CCNode::setOrderOfArrival	base_nodes/CCNode.h	/^    virtual void setOrderOfArrival(unsigned int uOrderOfArrival);$/;"	p	class:CCNode	access:public	signature:(unsigned int uOrderOfArrival)
CCNode::setParent	base_nodes/CCNode.cpp	/^void CCNode::setParent(CCNode * var)$/;"	f	class:CCNode	signature:(CCNode * var)
CCNode::setParent	base_nodes/CCNode.h	/^    virtual void setParent(CCNode* parent);$/;"	p	class:CCNode	access:public	signature:(CCNode* parent)
CCNode::setPosition	base_nodes/CCNode.cpp	/^void CCNode::setPosition(const CCPoint& newPosition)$/;"	f	class:CCNode	signature:(const CCPoint& newPosition)
CCNode::setPosition	base_nodes/CCNode.cpp	/^void CCNode::setPosition(float x, float y)$/;"	f	class:CCNode	signature:(float x, float y)
CCNode::setPosition	base_nodes/CCNode.h	/^    virtual void setPosition(const CCPoint &position);$/;"	p	class:CCNode	access:public	signature:(const CCPoint &position)
CCNode::setPosition	base_nodes/CCNode.h	/^    void setPosition(float x, float y);$/;"	p	class:CCNode	access:public	signature:(float x, float y)
CCNode::setPositionX	base_nodes/CCNode.cpp	/^void CCNode::setPositionX(float x)$/;"	f	class:CCNode	signature:(float x)
CCNode::setPositionX	base_nodes/CCNode.h	/^    void  setPositionX(float x);$/;"	p	class:CCNode	access:public	signature:(float x)
CCNode::setPositionY	base_nodes/CCNode.cpp	/^void CCNode::setPositionY(float y)$/;"	f	class:CCNode	signature:(float y)
CCNode::setPositionY	base_nodes/CCNode.h	/^    void  setPositionY(float y);$/;"	p	class:CCNode	access:public	signature:(float y)
CCNode::setRotation	base_nodes/CCNode.cpp	/^void CCNode::setRotation(float newRotation)$/;"	f	class:CCNode	signature:(float newRotation)
CCNode::setRotation	base_nodes/CCNode.h	/^    virtual void setRotation(float fRotation);$/;"	p	class:CCNode	access:public	signature:(float fRotation)
CCNode::setRotationX	base_nodes/CCNode.cpp	/^void CCNode::setRotationX(float fRotationX)$/;"	f	class:CCNode	signature:(float fRotationX)
CCNode::setRotationX	base_nodes/CCNode.h	/^    virtual void setRotationX(float fRotaionX);$/;"	p	class:CCNode	access:public	signature:(float fRotaionX)
CCNode::setRotationY	base_nodes/CCNode.cpp	/^void CCNode::setRotationY(float fRotationY)$/;"	f	class:CCNode	signature:(float fRotationY)
CCNode::setRotationY	base_nodes/CCNode.h	/^    virtual void setRotationY(float fRotationY);$/;"	p	class:CCNode	access:public	signature:(float fRotationY)
CCNode::setScale	base_nodes/CCNode.cpp	/^void CCNode::setScale(float scale)$/;"	f	class:CCNode	signature:(float scale)
CCNode::setScale	base_nodes/CCNode.h	/^    virtual void setScale(float scale);$/;"	p	class:CCNode	access:public	signature:(float scale)
CCNode::setScaleX	base_nodes/CCNode.cpp	/^void CCNode::setScaleX(float newScaleX)$/;"	f	class:CCNode	signature:(float newScaleX)
CCNode::setScaleX	base_nodes/CCNode.h	/^    virtual void setScaleX(float fScaleX);$/;"	p	class:CCNode	access:public	signature:(float fScaleX)
CCNode::setScaleY	base_nodes/CCNode.cpp	/^void CCNode::setScaleY(float newScaleY)$/;"	f	class:CCNode	signature:(float newScaleY)
CCNode::setScaleY	base_nodes/CCNode.h	/^    virtual void setScaleY(float fScaleY);$/;"	p	class:CCNode	access:public	signature:(float fScaleY)
CCNode::setScheduler	base_nodes/CCNode.cpp	/^void CCNode::setScheduler(CCScheduler* scheduler)$/;"	f	class:CCNode	signature:(CCScheduler* scheduler)
CCNode::setScheduler	base_nodes/CCNode.h	/^    virtual void setScheduler(CCScheduler* scheduler);$/;"	p	class:CCNode	access:public	signature:(CCScheduler* scheduler)
CCNode::setShaderProgram	base_nodes/CCNode.cpp	/^void CCNode::setShaderProgram(CCGLProgram *pShaderProgram)$/;"	f	class:CCNode	signature:(CCGLProgram *pShaderProgram)
CCNode::setShaderProgram	base_nodes/CCNode.h	/^    virtual void setShaderProgram(CCGLProgram *pShaderProgram);$/;"	p	class:CCNode	access:public	signature:(CCGLProgram *pShaderProgram)
CCNode::setSkewX	base_nodes/CCNode.cpp	/^void CCNode::setSkewX(float newSkewX)$/;"	f	class:CCNode	signature:(float newSkewX)
CCNode::setSkewX	base_nodes/CCNode.h	/^    virtual void setSkewX(float fSkewX);$/;"	p	class:CCNode	access:public	signature:(float fSkewX)
CCNode::setSkewY	base_nodes/CCNode.cpp	/^void CCNode::setSkewY(float newSkewY)$/;"	f	class:CCNode	signature:(float newSkewY)
CCNode::setSkewY	base_nodes/CCNode.h	/^    virtual void setSkewY(float fSkewY);$/;"	p	class:CCNode	access:public	signature:(float fSkewY)
CCNode::setTag	base_nodes/CCNode.cpp	/^void CCNode::setTag(int var)$/;"	f	class:CCNode	signature:(int var)
CCNode::setTag	base_nodes/CCNode.h	/^    virtual void setTag(int nTag);$/;"	p	class:CCNode	access:public	signature:(int nTag)
CCNode::setUserData	base_nodes/CCNode.cpp	/^void CCNode::setUserData(void *var)$/;"	f	class:CCNode	signature:(void *var)
CCNode::setUserData	base_nodes/CCNode.h	/^    virtual void setUserData(void *pUserData);$/;"	p	class:CCNode	access:public	signature:(void *pUserData)
CCNode::setUserObject	base_nodes/CCNode.cpp	/^void CCNode::setUserObject(CCObject *pUserObject)$/;"	f	class:CCNode	signature:(CCObject *pUserObject)
CCNode::setUserObject	base_nodes/CCNode.h	/^    virtual void setUserObject(CCObject *pUserObject);$/;"	p	class:CCNode	access:public	signature:(CCObject *pUserObject)
CCNode::setVertexZ	base_nodes/CCNode.cpp	/^void CCNode::setVertexZ(float var)$/;"	f	class:CCNode	signature:(float var)
CCNode::setVertexZ	base_nodes/CCNode.h	/^    virtual void setVertexZ(float vertexZ);$/;"	p	class:CCNode	access:public	signature:(float vertexZ)
CCNode::setVisible	base_nodes/CCNode.cpp	/^void CCNode::setVisible(bool var)$/;"	f	class:CCNode	signature:(bool var)
CCNode::setVisible	base_nodes/CCNode.h	/^    virtual void setVisible(bool visible);$/;"	p	class:CCNode	access:public	signature:(bool visible)
CCNode::setZOrder	base_nodes/CCNode.cpp	/^void CCNode::setZOrder(int z)$/;"	f	class:CCNode	signature:(int z)
CCNode::setZOrder	base_nodes/CCNode.h	/^    virtual void setZOrder(int zOrder);$/;"	p	class:CCNode	access:public	signature:(int zOrder)
CCNode::sortAllChildren	base_nodes/CCNode.cpp	/^void CCNode::sortAllChildren()$/;"	f	class:CCNode	signature:()
CCNode::sortAllChildren	base_nodes/CCNode.h	/^    virtual void sortAllChildren();$/;"	p	class:CCNode	access:public	signature:()
CCNode::stopAction	base_nodes/CCNode.cpp	/^void CCNode::stopAction(CCAction* action)$/;"	f	class:CCNode	signature:(CCAction* action)
CCNode::stopAction	base_nodes/CCNode.h	/^    void stopAction(CCAction* action);$/;"	p	class:CCNode	access:public	signature:(CCAction* action)
CCNode::stopActionByTag	base_nodes/CCNode.cpp	/^void CCNode::stopActionByTag(int tag)$/;"	f	class:CCNode	signature:(int tag)
CCNode::stopActionByTag	base_nodes/CCNode.h	/^    void stopActionByTag(int tag);$/;"	p	class:CCNode	access:public	signature:(int tag)
CCNode::stopAllActions	base_nodes/CCNode.cpp	/^void CCNode::stopAllActions()$/;"	f	class:CCNode	signature:()
CCNode::stopAllActions	base_nodes/CCNode.h	/^    void stopAllActions(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::transform	base_nodes/CCNode.cpp	/^void CCNode::transform()$/;"	f	class:CCNode	signature:()
CCNode::transform	base_nodes/CCNode.h	/^    void transform(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::transformAncestors	base_nodes/CCNode.cpp	/^void CCNode::transformAncestors()$/;"	f	class:CCNode	signature:()
CCNode::transformAncestors	base_nodes/CCNode.h	/^    void transformAncestors(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::unregisterScriptHandler	base_nodes/CCNode.cpp	/^void CCNode::unregisterScriptHandler(void)$/;"	f	class:CCNode	signature:(void)
CCNode::unregisterScriptHandler	base_nodes/CCNode.h	/^    virtual void unregisterScriptHandler(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::unschedule	base_nodes/CCNode.cpp	/^void CCNode::unschedule(SEL_SCHEDULE selector)$/;"	f	class:CCNode	signature:(SEL_SCHEDULE selector)
CCNode::unschedule	base_nodes/CCNode.h	/^    void unschedule(SEL_SCHEDULE selector);$/;"	p	class:CCNode	access:public	signature:(SEL_SCHEDULE selector)
CCNode::unscheduleAllSelectors	base_nodes/CCNode.cpp	/^void CCNode::unscheduleAllSelectors()$/;"	f	class:CCNode	signature:()
CCNode::unscheduleAllSelectors	base_nodes/CCNode.h	/^    void unscheduleAllSelectors(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::unscheduleUpdate	base_nodes/CCNode.cpp	/^void CCNode::unscheduleUpdate()$/;"	f	class:CCNode	signature:()
CCNode::unscheduleUpdate	base_nodes/CCNode.h	/^    void unscheduleUpdate(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::update	base_nodes/CCNode.cpp	/^void CCNode::update(float fDelta)$/;"	f	class:CCNode	signature:(float fDelta)
CCNode::update	base_nodes/CCNode.h	/^    virtual void update(float delta);$/;"	p	class:CCNode	access:public	signature:(float delta)
CCNode::updateTransform	base_nodes/CCNode.cpp	/^void CCNode::updateTransform()$/;"	f	class:CCNode	signature:()
CCNode::updateTransform	base_nodes/CCNode.h	/^    virtual void updateTransform(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::visit	base_nodes/CCNode.cpp	/^void CCNode::visit()$/;"	f	class:CCNode	signature:()
CCNode::visit	base_nodes/CCNode.h	/^    virtual void visit(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::worldToNodeTransform	base_nodes/CCNode.cpp	/^CCAffineTransform CCNode::worldToNodeTransform(void)$/;"	f	class:CCNode	signature:(void)
CCNode::worldToNodeTransform	base_nodes/CCNode.h	/^    virtual CCAffineTransform worldToNodeTransform(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNode::~CCNode	base_nodes/CCNode.cpp	/^CCNode::~CCNode(void)$/;"	f	class:CCNode	signature:(void)
CCNode::~CCNode	base_nodes/CCNode.h	/^    virtual ~CCNode(void);$/;"	p	class:CCNode	access:public	signature:(void)
CCNodeRGBA	base_nodes/CCNode.cpp	/^CCNodeRGBA::CCNodeRGBA()$/;"	f	class:CCNodeRGBA	signature:()
CCNodeRGBA	base_nodes/CCNode.h	/^    CCNodeRGBA();$/;"	p	class:CCNodeRGBA	access:public	signature:()
CCNodeRGBA	base_nodes/CCNode.h	/^class CC_DLL CCNodeRGBA : public CCNode, public CCRGBAProtocol$/;"	c	inherits:CCNode,CCRGBAProtocol
CCNodeRGBA::CCNodeRGBA	base_nodes/CCNode.cpp	/^CCNodeRGBA::CCNodeRGBA()$/;"	f	class:CCNodeRGBA	signature:()
CCNodeRGBA::CCNodeRGBA	base_nodes/CCNode.h	/^    CCNodeRGBA();$/;"	p	class:CCNodeRGBA	access:public	signature:()
CCNodeRGBA::_cascadeColorEnabled	base_nodes/CCNode.h	/^	bool		_cascadeColorEnabled;$/;"	m	class:CCNodeRGBA	access:protected
CCNodeRGBA::_cascadeOpacityEnabled	base_nodes/CCNode.h	/^    bool        _cascadeOpacityEnabled;$/;"	m	class:CCNodeRGBA	access:protected
CCNodeRGBA::_displayedColor	base_nodes/CCNode.h	/^	ccColor3B	_displayedColor;$/;"	m	class:CCNodeRGBA	access:protected
CCNodeRGBA::_displayedOpacity	base_nodes/CCNode.h	/^	GLubyte		_displayedOpacity;$/;"	m	class:CCNodeRGBA	access:protected
CCNodeRGBA::_realColor	base_nodes/CCNode.h	/^    ccColor3B   _realColor;$/;"	m	class:CCNodeRGBA	access:protected
CCNodeRGBA::_realOpacity	base_nodes/CCNode.h	/^    GLubyte     _realOpacity;$/;"	m	class:CCNodeRGBA	access:protected
CCNodeRGBA::getColor	base_nodes/CCNode.cpp	/^const ccColor3B& CCNodeRGBA::getColor(void)$/;"	f	class:CCNodeRGBA	signature:(void)
CCNodeRGBA::getColor	base_nodes/CCNode.h	/^    virtual const ccColor3B& getColor(void);$/;"	p	class:CCNodeRGBA	access:public	signature:(void)
CCNodeRGBA::getDisplayedColor	base_nodes/CCNode.cpp	/^const ccColor3B& CCNodeRGBA::getDisplayedColor()$/;"	f	class:CCNodeRGBA	signature:()
CCNodeRGBA::getDisplayedColor	base_nodes/CCNode.h	/^    virtual const ccColor3B& getDisplayedColor();$/;"	p	class:CCNodeRGBA	access:public	signature:()
CCNodeRGBA::getDisplayedOpacity	base_nodes/CCNode.cpp	/^GLubyte CCNodeRGBA::getDisplayedOpacity(void)$/;"	f	class:CCNodeRGBA	signature:(void)
CCNodeRGBA::getDisplayedOpacity	base_nodes/CCNode.h	/^    virtual GLubyte getDisplayedOpacity();$/;"	p	class:CCNodeRGBA	access:public	signature:()
CCNodeRGBA::getOpacity	base_nodes/CCNode.cpp	/^GLubyte CCNodeRGBA::getOpacity(void)$/;"	f	class:CCNodeRGBA	signature:(void)
CCNodeRGBA::getOpacity	base_nodes/CCNode.h	/^    virtual GLubyte getOpacity();$/;"	p	class:CCNodeRGBA	access:public	signature:()
CCNodeRGBA::init	base_nodes/CCNode.cpp	/^bool CCNodeRGBA::init()$/;"	f	class:CCNodeRGBA	signature:()
CCNodeRGBA::init	base_nodes/CCNode.h	/^    virtual bool init();$/;"	p	class:CCNodeRGBA	access:public	signature:()
CCNodeRGBA::isCascadeColorEnabled	base_nodes/CCNode.cpp	/^bool CCNodeRGBA::isCascadeColorEnabled(void)$/;"	f	class:CCNodeRGBA	signature:(void)
CCNodeRGBA::isCascadeColorEnabled	base_nodes/CCNode.h	/^    virtual bool isCascadeColorEnabled();$/;"	p	class:CCNodeRGBA	access:public	signature:()
CCNodeRGBA::isCascadeOpacityEnabled	base_nodes/CCNode.cpp	/^bool CCNodeRGBA::isCascadeOpacityEnabled(void)$/;"	f	class:CCNodeRGBA	signature:(void)
CCNodeRGBA::isCascadeOpacityEnabled	base_nodes/CCNode.h	/^    virtual bool isCascadeOpacityEnabled();$/;"	p	class:CCNodeRGBA	access:public	signature:()
CCNodeRGBA::isOpacityModifyRGB	base_nodes/CCNode.h	/^    virtual bool isOpacityModifyRGB() { return false; };$/;"	f	class:CCNodeRGBA	access:public	signature:()
CCNodeRGBA::setCascadeColorEnabled	base_nodes/CCNode.cpp	/^void CCNodeRGBA::setCascadeColorEnabled(bool cascadeColorEnabled)$/;"	f	class:CCNodeRGBA	signature:(bool cascadeColorEnabled)
CCNodeRGBA::setCascadeColorEnabled	base_nodes/CCNode.h	/^    virtual void setCascadeColorEnabled(bool cascadeColorEnabled);$/;"	p	class:CCNodeRGBA	access:public	signature:(bool cascadeColorEnabled)
CCNodeRGBA::setCascadeOpacityEnabled	base_nodes/CCNode.cpp	/^void CCNodeRGBA::setCascadeOpacityEnabled(bool cascadeOpacityEnabled)$/;"	f	class:CCNodeRGBA	signature:(bool cascadeOpacityEnabled)
CCNodeRGBA::setCascadeOpacityEnabled	base_nodes/CCNode.h	/^    virtual void setCascadeOpacityEnabled(bool cascadeOpacityEnabled);$/;"	p	class:CCNodeRGBA	access:public	signature:(bool cascadeOpacityEnabled)
CCNodeRGBA::setColor	base_nodes/CCNode.cpp	/^void CCNodeRGBA::setColor(const ccColor3B& color)$/;"	f	class:CCNodeRGBA	signature:(const ccColor3B& color)
CCNodeRGBA::setColor	base_nodes/CCNode.h	/^    virtual void setColor(const ccColor3B& color);$/;"	p	class:CCNodeRGBA	access:public	signature:(const ccColor3B& color)
CCNodeRGBA::setOpacity	base_nodes/CCNode.cpp	/^void CCNodeRGBA::setOpacity(GLubyte opacity)$/;"	f	class:CCNodeRGBA	signature:(GLubyte opacity)
CCNodeRGBA::setOpacity	base_nodes/CCNode.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCNodeRGBA	access:public	signature:(GLubyte opacity)
CCNodeRGBA::setOpacityModifyRGB	base_nodes/CCNode.h	/^    virtual void setOpacityModifyRGB(bool bValue) {};$/;"	f	class:CCNodeRGBA	access:public	signature:(bool bValue)
CCNodeRGBA::updateDisplayedColor	base_nodes/CCNode.cpp	/^void CCNodeRGBA::updateDisplayedColor(const ccColor3B& parentColor)$/;"	f	class:CCNodeRGBA	signature:(const ccColor3B& parentColor)
CCNodeRGBA::updateDisplayedColor	base_nodes/CCNode.h	/^    virtual void updateDisplayedColor(const ccColor3B& parentColor);$/;"	p	class:CCNodeRGBA	access:public	signature:(const ccColor3B& parentColor)
CCNodeRGBA::updateDisplayedOpacity	base_nodes/CCNode.cpp	/^void CCNodeRGBA::updateDisplayedOpacity(GLubyte parentOpacity)$/;"	f	class:CCNodeRGBA	signature:(GLubyte parentOpacity)
CCNodeRGBA::updateDisplayedOpacity	base_nodes/CCNode.h	/^    virtual void updateDisplayedOpacity(GLubyte parentOpacity);$/;"	p	class:CCNodeRGBA	access:public	signature:(GLubyte parentOpacity)
CCNodeRGBA::~CCNodeRGBA	base_nodes/CCNode.cpp	/^CCNodeRGBA::~CCNodeRGBA() {}$/;"	f	class:CCNodeRGBA	signature:()
CCNodeRGBA::~CCNodeRGBA	base_nodes/CCNode.h	/^    virtual ~CCNodeRGBA();$/;"	p	class:CCNodeRGBA	access:public	signature:()
CCNotificationCenter	support/CCNotificationCenter.cpp	/^CCNotificationCenter::CCNotificationCenter()$/;"	f	class:CCNotificationCenter	signature:()
CCNotificationCenter	support/CCNotificationCenter.h	/^    CCNotificationCenter();$/;"	p	class:CCNotificationCenter	access:public	signature:()
CCNotificationCenter	support/CCNotificationCenter.h	/^class CC_DLL CCNotificationCenter : public CCObject$/;"	c	inherits:CCObject
CCNotificationCenter::CCNotificationCenter	support/CCNotificationCenter.cpp	/^CCNotificationCenter::CCNotificationCenter()$/;"	f	class:CCNotificationCenter	signature:()
CCNotificationCenter::CCNotificationCenter	support/CCNotificationCenter.h	/^    CCNotificationCenter();$/;"	p	class:CCNotificationCenter	access:public	signature:()
CCNotificationCenter::addObserver	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::addObserver(CCObject *target, $/;"	f	class:CCNotificationCenter	signature:(CCObject *target, SEL_CallFuncO selector, const char *name, CCObject *obj)
CCNotificationCenter::addObserver	support/CCNotificationCenter.h	/^    void addObserver(CCObject *target, $/;"	p	class:CCNotificationCenter	access:public	signature:(CCObject *target, SEL_CallFuncO selector, const char *name, CCObject *obj)
CCNotificationCenter::getScriptHandler	support/CCNotificationCenter.h	/^    inline int getScriptHandler() { return m_scriptHandler; };$/;"	f	class:CCNotificationCenter	access:public	signature:()
CCNotificationCenter::m_observers	support/CCNotificationCenter.h	/^    CCArray *m_observers;$/;"	m	class:CCNotificationCenter	access:private
CCNotificationCenter::m_scriptHandler	support/CCNotificationCenter.h	/^    int     m_scriptHandler;$/;"	m	class:CCNotificationCenter	access:private
CCNotificationCenter::observerExisted	support/CCNotificationCenter.cpp	/^bool CCNotificationCenter::observerExisted(CCObject *target,const char *name)$/;"	f	class:CCNotificationCenter	signature:(CCObject *target,const char *name)
CCNotificationCenter::observerExisted	support/CCNotificationCenter.h	/^    bool observerExisted(CCObject *target,const char *name);$/;"	p	class:CCNotificationCenter	access:private	signature:(CCObject *target,const char *name)
CCNotificationCenter::postNotification	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::postNotification(const char *name)$/;"	f	class:CCNotificationCenter	signature:(const char *name)
CCNotificationCenter::postNotification	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::postNotification(const char *name, CCObject *object)$/;"	f	class:CCNotificationCenter	signature:(const char *name, CCObject *object)
CCNotificationCenter::postNotification	support/CCNotificationCenter.h	/^    void postNotification(const char *name);$/;"	p	class:CCNotificationCenter	access:public	signature:(const char *name)
CCNotificationCenter::postNotification	support/CCNotificationCenter.h	/^    void postNotification(const char *name, CCObject *object);$/;"	p	class:CCNotificationCenter	access:public	signature:(const char *name, CCObject *object)
CCNotificationCenter::purgeNotificationCenter	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::purgeNotificationCenter(void)$/;"	f	class:CCNotificationCenter	signature:(void)
CCNotificationCenter::purgeNotificationCenter	support/CCNotificationCenter.h	/^    static void purgeNotificationCenter(void);$/;"	p	class:CCNotificationCenter	access:public	signature:(void)
CCNotificationCenter::registerScriptObserver	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::registerScriptObserver(int handler)$/;"	f	class:CCNotificationCenter	signature:(int handler)
CCNotificationCenter::registerScriptObserver	support/CCNotificationCenter.h	/^    void registerScriptObserver(int handler);$/;"	p	class:CCNotificationCenter	access:public	signature:(int handler)
CCNotificationCenter::removeAllObservers	support/CCNotificationCenter.cpp	/^int CCNotificationCenter::removeAllObservers(CCObject *target)$/;"	f	class:CCNotificationCenter	signature:(CCObject *target)
CCNotificationCenter::removeAllObservers	support/CCNotificationCenter.h	/^    int removeAllObservers(CCObject *target);$/;"	p	class:CCNotificationCenter	access:public	signature:(CCObject *target)
CCNotificationCenter::removeObserver	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::removeObserver(CCObject *target,const char *name)$/;"	f	class:CCNotificationCenter	signature:(CCObject *target,const char *name)
CCNotificationCenter::removeObserver	support/CCNotificationCenter.h	/^    void removeObserver(CCObject *target,const char *name);$/;"	p	class:CCNotificationCenter	access:public	signature:(CCObject *target,const char *name)
CCNotificationCenter::sharedNotificationCenter	support/CCNotificationCenter.cpp	/^CCNotificationCenter *CCNotificationCenter::sharedNotificationCenter(void)$/;"	f	class:CCNotificationCenter	signature:(void)
CCNotificationCenter::sharedNotificationCenter	support/CCNotificationCenter.h	/^    static CCNotificationCenter *sharedNotificationCenter(void);$/;"	p	class:CCNotificationCenter	access:public	signature:(void)
CCNotificationCenter::unregisterScriptObserver	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::unregisterScriptObserver(void)$/;"	f	class:CCNotificationCenter	signature:(void)
CCNotificationCenter::unregisterScriptObserver	support/CCNotificationCenter.h	/^    void unregisterScriptObserver(void);$/;"	p	class:CCNotificationCenter	access:public	signature:(void)
CCNotificationCenter::~CCNotificationCenter	support/CCNotificationCenter.cpp	/^CCNotificationCenter::~CCNotificationCenter()$/;"	f	class:CCNotificationCenter	signature:()
CCNotificationCenter::~CCNotificationCenter	support/CCNotificationCenter.h	/^    ~CCNotificationCenter();$/;"	p	class:CCNotificationCenter	access:public	signature:()
CCNotificationObserver	support/CCNotificationCenter.cpp	/^CCNotificationObserver::CCNotificationObserver(CCObject *target, $/;"	f	class:CCNotificationObserver	signature:(CCObject *target, SEL_CallFuncO selector, const char *name, CCObject *obj)
CCNotificationObserver	support/CCNotificationCenter.h	/^    CCNotificationObserver(CCObject *target, $/;"	p	class:CCNotificationObserver	access:public	signature:(CCObject *target, SEL_CallFuncO selector, const char *name, CCObject *obj)
CCNotificationObserver	support/CCNotificationCenter.h	/^class CC_DLL CCNotificationObserver : public CCObject$/;"	c	inherits:CCObject
CCNotificationObserver::CCNotificationObserver	support/CCNotificationCenter.cpp	/^CCNotificationObserver::CCNotificationObserver(CCObject *target, $/;"	f	class:CCNotificationObserver	signature:(CCObject *target, SEL_CallFuncO selector, const char *name, CCObject *obj)
CCNotificationObserver::CCNotificationObserver	support/CCNotificationCenter.h	/^    CCNotificationObserver(CCObject *target, $/;"	p	class:CCNotificationObserver	access:public	signature:(CCObject *target, SEL_CallFuncO selector, const char *name, CCObject *obj)
CCNotificationObserver::CC_PROPERTY_READONLY	support/CCNotificationCenter.h	/^    CC_PROPERTY_READONLY(CCObject *, m_object, Object);$/;"	p	class:CCNotificationObserver	access:private	signature:(CCObject *, m_object, Object)
CCNotificationObserver::CC_PROPERTY_READONLY	support/CCNotificationCenter.h	/^    CC_PROPERTY_READONLY(CCObject *, m_target, Target);$/;"	p	class:CCNotificationObserver	access:private	signature:(CCObject *, m_target, Target)
CCNotificationObserver::CC_PROPERTY_READONLY	support/CCNotificationCenter.h	/^    CC_PROPERTY_READONLY(SEL_CallFuncO, m_selector, Selector);$/;"	p	class:CCNotificationObserver	access:private	signature:(SEL_CallFuncO, m_selector, Selector)
CCNotificationObserver::CC_PROPERTY_READONLY	support/CCNotificationCenter.h	/^    CC_PROPERTY_READONLY(char *, m_name, Name);$/;"	p	class:CCNotificationObserver	access:private	signature:(char *, m_name, Name)
CCNotificationObserver::getName	support/CCNotificationCenter.cpp	/^char *CCNotificationObserver::getName()$/;"	f	class:CCNotificationObserver	signature:()
CCNotificationObserver::getObject	support/CCNotificationCenter.cpp	/^CCObject *CCNotificationObserver::getObject()$/;"	f	class:CCNotificationObserver	signature:()
CCNotificationObserver::getSelector	support/CCNotificationCenter.cpp	/^SEL_CallFuncO CCNotificationObserver::getSelector()$/;"	f	class:CCNotificationObserver	signature:()
CCNotificationObserver::getTarget	support/CCNotificationCenter.cpp	/^CCObject *CCNotificationObserver::getTarget()$/;"	f	class:CCNotificationObserver	signature:()
CCNotificationObserver::performSelector	support/CCNotificationCenter.cpp	/^void CCNotificationObserver::performSelector(CCObject *obj)$/;"	f	class:CCNotificationObserver	signature:(CCObject *obj)
CCNotificationObserver::performSelector	support/CCNotificationCenter.h	/^    void performSelector(CCObject *obj);$/;"	p	class:CCNotificationObserver	access:public	signature:(CCObject *obj)
CCNotificationObserver::~CCNotificationObserver	support/CCNotificationCenter.cpp	/^CCNotificationObserver::~CCNotificationObserver()$/;"	f	class:CCNotificationObserver	signature:()
CCNotificationObserver::~CCNotificationObserver	support/CCNotificationCenter.h	/^    ~CCNotificationObserver();      $/;"	p	class:CCNotificationObserver	access:public	signature:()
CCObject	cocoa/CCObject.cpp	/^CCObject::CCObject(void)$/;"	f	class:CCObject	signature:(void)
CCObject	cocoa/CCObject.h	/^    CCObject(void);$/;"	p	class:CCObject	access:public	signature:(void)
CCObject	cocoa/CCObject.h	/^class CC_DLL CCObject : public CCCopying$/;"	c	inherits:CCCopying
CCObject::CCObject	cocoa/CCObject.cpp	/^CCObject::CCObject(void)$/;"	f	class:CCObject	signature:(void)
CCObject::CCObject	cocoa/CCObject.h	/^    CCObject(void);$/;"	p	class:CCObject	access:public	signature:(void)
CCObject::autorelease	cocoa/CCObject.cpp	/^CCObject* CCObject::autorelease(void)$/;"	f	class:CCObject	signature:(void)
CCObject::autorelease	cocoa/CCObject.h	/^    CCObject* autorelease(void);$/;"	p	class:CCObject	access:public	signature:(void)
CCObject::copy	cocoa/CCObject.cpp	/^CCObject* CCObject::copy()$/;"	f	class:CCObject	signature:()
CCObject::copy	cocoa/CCObject.h	/^    CCObject* copy(void);$/;"	p	class:CCObject	access:public	signature:(void)
CCObject::isEqual	cocoa/CCObject.cpp	/^bool CCObject::isEqual(const CCObject *pObject)$/;"	f	class:CCObject	signature:(const CCObject *pObject)
CCObject::isEqual	cocoa/CCObject.h	/^    virtual bool isEqual(const CCObject* pObject);$/;"	p	class:CCObject	access:public	signature:(const CCObject* pObject)
CCObject::isSingleReference	cocoa/CCObject.cpp	/^bool CCObject::isSingleReference(void)$/;"	f	class:CCObject	signature:(void)
CCObject::isSingleReference	cocoa/CCObject.h	/^    bool isSingleReference(void);$/;"	p	class:CCObject	access:public	signature:(void)
CCObject::m_nLuaID	cocoa/CCObject.h	/^    int                 m_nLuaID;$/;"	m	class:CCObject	access:public
CCObject::m_uAutoReleaseCount	cocoa/CCObject.h	/^    unsigned int        m_uAutoReleaseCount;$/;"	m	class:CCObject	access:protected
CCObject::m_uID	cocoa/CCObject.h	/^    unsigned int        m_uID;$/;"	m	class:CCObject	access:public
CCObject::m_uReference	cocoa/CCObject.h	/^    unsigned int        m_uReference;$/;"	m	class:CCObject	access:protected
CCObject::release	cocoa/CCObject.cpp	/^void CCObject::release(void)$/;"	f	class:CCObject	signature:(void)
CCObject::release	cocoa/CCObject.h	/^    void release(void);$/;"	p	class:CCObject	access:public	signature:(void)
CCObject::retain	cocoa/CCObject.cpp	/^void CCObject::retain(void)$/;"	f	class:CCObject	signature:(void)
CCObject::retain	cocoa/CCObject.h	/^    void retain(void);$/;"	p	class:CCObject	access:public	signature:(void)
CCObject::retainCount	cocoa/CCObject.cpp	/^unsigned int CCObject::retainCount(void)$/;"	f	class:CCObject	signature:(void)
CCObject::retainCount	cocoa/CCObject.h	/^    unsigned int retainCount(void);$/;"	p	class:CCObject	access:public	signature:(void)
CCObject::update	cocoa/CCObject.h	/^    virtual void update(float dt) {CC_UNUSED_PARAM(dt);};$/;"	f	class:CCObject	access:public	signature:(float dt)
CCObject::~CCObject	cocoa/CCObject.cpp	/^CCObject::~CCObject(void)$/;"	f	class:CCObject	signature:(void)
CCObject::~CCObject	cocoa/CCObject.h	/^    virtual ~CCObject(void);$/;"	p	class:CCObject	access:public	signature:(void)
CCOrbitCamera	actions/CCActionCamera.h	/^    CCOrbitCamera()$/;"	f	class:CCOrbitCamera	access:public	signature:()
CCOrbitCamera	actions/CCActionCamera.h	/^class CC_DLL CCOrbitCamera : public CCActionCamera \/\/<NSCopying> $/;"	c	inherits:CCActionCamera
CCOrbitCamera::CCOrbitCamera	actions/CCActionCamera.h	/^    CCOrbitCamera()$/;"	f	class:CCOrbitCamera	access:public	signature:()
CCOrbitCamera::copyWithZone	actions/CCActionCamera.cpp	/^CCObject * CCOrbitCamera::copyWithZone(CCZone *pZone)$/;"	f	class:CCOrbitCamera	signature:(CCZone *pZone)
CCOrbitCamera::copyWithZone	actions/CCActionCamera.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCOrbitCamera	access:public	signature:(CCZone* pZone)
CCOrbitCamera::create	actions/CCActionCamera.cpp	/^CCOrbitCamera * CCOrbitCamera::create(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)$/;"	f	class:CCOrbitCamera	signature:(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)
CCOrbitCamera::create	actions/CCActionCamera.h	/^    static CCOrbitCamera* create(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX);$/;"	p	class:CCOrbitCamera	access:public	signature:(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)
CCOrbitCamera::initWithDuration	actions/CCActionCamera.cpp	/^bool CCOrbitCamera::initWithDuration(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)$/;"	f	class:CCOrbitCamera	signature:(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)
CCOrbitCamera::initWithDuration	actions/CCActionCamera.h	/^    bool initWithDuration(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX);$/;"	p	class:CCOrbitCamera	access:public	signature:(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)
CCOrbitCamera::m_fAngleX	actions/CCActionCamera.h	/^    float m_fAngleX;$/;"	m	class:CCOrbitCamera	access:protected
CCOrbitCamera::m_fAngleZ	actions/CCActionCamera.h	/^    float m_fAngleZ;$/;"	m	class:CCOrbitCamera	access:protected
CCOrbitCamera::m_fDeltaAngleX	actions/CCActionCamera.h	/^    float m_fDeltaAngleX;$/;"	m	class:CCOrbitCamera	access:protected
CCOrbitCamera::m_fDeltaAngleZ	actions/CCActionCamera.h	/^    float m_fDeltaAngleZ;$/;"	m	class:CCOrbitCamera	access:protected
CCOrbitCamera::m_fDeltaRadius	actions/CCActionCamera.h	/^    float m_fDeltaRadius;$/;"	m	class:CCOrbitCamera	access:protected
CCOrbitCamera::m_fRadDeltaX	actions/CCActionCamera.h	/^    float m_fRadDeltaX;$/;"	m	class:CCOrbitCamera	access:protected
CCOrbitCamera::m_fRadDeltaZ	actions/CCActionCamera.h	/^    float m_fRadDeltaZ;$/;"	m	class:CCOrbitCamera	access:protected
CCOrbitCamera::m_fRadX	actions/CCActionCamera.h	/^    float m_fRadX;$/;"	m	class:CCOrbitCamera	access:protected
CCOrbitCamera::m_fRadZ	actions/CCActionCamera.h	/^    float m_fRadZ;$/;"	m	class:CCOrbitCamera	access:protected
CCOrbitCamera::m_fRadius	actions/CCActionCamera.h	/^    float m_fRadius;$/;"	m	class:CCOrbitCamera	access:protected
CCOrbitCamera::sphericalRadius	actions/CCActionCamera.cpp	/^void CCOrbitCamera::sphericalRadius(float *newRadius, float *zenith, float *azimuth)$/;"	f	class:CCOrbitCamera	signature:(float *newRadius, float *zenith, float *azimuth)
CCOrbitCamera::sphericalRadius	actions/CCActionCamera.h	/^    void sphericalRadius(float *r, float *zenith, float *azimuth);$/;"	p	class:CCOrbitCamera	access:public	signature:(float *r, float *zenith, float *azimuth)
CCOrbitCamera::startWithTarget	actions/CCActionCamera.cpp	/^void CCOrbitCamera::startWithTarget(CCNode *pTarget)$/;"	f	class:CCOrbitCamera	signature:(CCNode *pTarget)
CCOrbitCamera::startWithTarget	actions/CCActionCamera.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCOrbitCamera	access:public	signature:(CCNode *pTarget)
CCOrbitCamera::update	actions/CCActionCamera.cpp	/^void CCOrbitCamera::update(float dt)$/;"	f	class:CCOrbitCamera	signature:(float dt)
CCOrbitCamera::update	actions/CCActionCamera.h	/^    virtual void update(float time);$/;"	p	class:CCOrbitCamera	access:public	signature:(float time)
CCOrbitCamera::~CCOrbitCamera	actions/CCActionCamera.h	/^    ~CCOrbitCamera(){}$/;"	f	class:CCOrbitCamera	access:public	signature:()
CCPVRMipmap	textures/CCTexturePVR.h	/^struct CCPVRMipmap {$/;"	s
CCPVRMipmap::address	textures/CCTexturePVR.h	/^    unsigned char *address;$/;"	m	struct:CCPVRMipmap	access:public
CCPVRMipmap::len	textures/CCTexturePVR.h	/^    unsigned int len;$/;"	m	struct:CCPVRMipmap	access:public
CCPageTurn3D	actions/CCActionPageTurn3D.h	/^class CC_DLL CCPageTurn3D : public CCGrid3DAction$/;"	c	inherits:CCGrid3DAction
CCPageTurn3D::create	actions/CCActionPageTurn3D.cpp	/^CCPageTurn3D* CCPageTurn3D::create(float duration, const CCSize& gridSize)$/;"	f	class:CCPageTurn3D	signature:(float duration, const CCSize& gridSize)
CCPageTurn3D::create	actions/CCActionPageTurn3D.h	/^    static CCPageTurn3D* create(float duration, const CCSize& gridSize);$/;"	p	class:CCPageTurn3D	access:public	signature:(float duration, const CCSize& gridSize)
CCPageTurn3D::update	actions/CCActionPageTurn3D.cpp	/^void CCPageTurn3D::update(float time)$/;"	f	class:CCPageTurn3D	signature:(float time)
CCPageTurn3D::update	actions/CCActionPageTurn3D.h	/^    virtual void update(float time);$/;"	p	class:CCPageTurn3D	access:public	signature:(float time)
CCParallaxNode	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCParallaxNode::CCParallaxNode()$/;"	f	class:CCParallaxNode	signature:()
CCParallaxNode	tilemap_parallax_nodes/CCParallaxNode.h	/^    CCParallaxNode();$/;"	p	class:CCParallaxNode	access:public	signature:()
CCParallaxNode	tilemap_parallax_nodes/CCParallaxNode.h	/^class CC_DLL CCParallaxNode : public CCNode $/;"	c	inherits:CCNode
CCParallaxNode::CCParallaxNode	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCParallaxNode::CCParallaxNode()$/;"	f	class:CCParallaxNode	signature:()
CCParallaxNode::CCParallaxNode	tilemap_parallax_nodes/CCParallaxNode.h	/^    CCParallaxNode();$/;"	p	class:CCParallaxNode	access:public	signature:()
CCParallaxNode::absolutePosition	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCPoint CCParallaxNode::absolutePosition()$/;"	f	class:CCParallaxNode	signature:()
CCParallaxNode::absolutePosition	tilemap_parallax_nodes/CCParallaxNode.h	/^    CCPoint absolutePosition();$/;"	p	class:CCParallaxNode	access:private	signature:()
CCParallaxNode::addChild	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::addChild(CCNode * child, unsigned int zOrder, int tag)$/;"	f	class:CCParallaxNode	signature:(CCNode * child, unsigned int zOrder, int tag)
CCParallaxNode::addChild	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::addChild(CCNode *child, unsigned int z, const CCPoint& ratio, const CCPoint& offset)$/;"	f	class:CCParallaxNode	signature:(CCNode *child, unsigned int z, const CCPoint& ratio, const CCPoint& offset)
CCParallaxNode::addChild	tilemap_parallax_nodes/CCParallaxNode.h	/^    virtual void addChild(CCNode * child, unsigned int z, const CCPoint& parallaxRatio, const CCPoint& positionOffset);$/;"	p	class:CCParallaxNode	access:public	signature:(CCNode * child, unsigned int z, const CCPoint& parallaxRatio, const CCPoint& positionOffset)
CCParallaxNode::addChild	tilemap_parallax_nodes/CCParallaxNode.h	/^    virtual void addChild(CCNode * child, unsigned int zOrder, int tag);$/;"	p	class:CCParallaxNode	access:public	signature:(CCNode * child, unsigned int zOrder, int tag)
CCParallaxNode::create	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCParallaxNode * CCParallaxNode::create()$/;"	f	class:CCParallaxNode	signature:()
CCParallaxNode::create	tilemap_parallax_nodes/CCParallaxNode.h	/^    static CCParallaxNode * create();$/;"	p	class:CCParallaxNode	access:public	signature:()
CCParallaxNode::m_tLastPosition	tilemap_parallax_nodes/CCParallaxNode.h	/^    CCPoint    m_tLastPosition;$/;"	m	class:CCParallaxNode	access:protected
CCParallaxNode::removeAllChildrenWithCleanup	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::removeAllChildrenWithCleanup(bool cleanup)$/;"	f	class:CCParallaxNode	signature:(bool cleanup)
CCParallaxNode::removeAllChildrenWithCleanup	tilemap_parallax_nodes/CCParallaxNode.h	/^    virtual void removeAllChildrenWithCleanup(bool cleanup);$/;"	p	class:CCParallaxNode	access:public	signature:(bool cleanup)
CCParallaxNode::removeChild	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::removeChild(CCNode* child, bool cleanup)$/;"	f	class:CCParallaxNode	signature:(CCNode* child, bool cleanup)
CCParallaxNode::removeChild	tilemap_parallax_nodes/CCParallaxNode.h	/^    virtual void removeChild(CCNode* child, bool cleanup);$/;"	p	class:CCParallaxNode	access:public	signature:(CCNode* child, bool cleanup)
CCParallaxNode::visit	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::visit()$/;"	f	class:CCParallaxNode	signature:()
CCParallaxNode::visit	tilemap_parallax_nodes/CCParallaxNode.h	/^    virtual void visit(void);$/;"	p	class:CCParallaxNode	access:public	signature:(void)
CCParallaxNode::~CCParallaxNode	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCParallaxNode::~CCParallaxNode()$/;"	f	class:CCParallaxNode	signature:()
CCParallaxNode::~CCParallaxNode	tilemap_parallax_nodes/CCParallaxNode.h	/^    virtual ~CCParallaxNode();$/;"	p	class:CCParallaxNode	access:public	signature:()
CCParticleBatchNode	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode::CCParticleBatchNode()$/;"	f	class:CCParticleBatchNode	signature:()
CCParticleBatchNode	particle_nodes/CCParticleBatchNode.h	/^    CCParticleBatchNode();$/;"	p	class:CCParticleBatchNode	access:public	signature:()
CCParticleBatchNode	particle_nodes/CCParticleBatchNode.h	/^class CC_DLL CCParticleBatchNode : public CCNode, public CCTextureProtocol$/;"	c	inherits:CCNode,CCTextureProtocol
CCParticleBatchNode::CCParticleBatchNode	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode::CCParticleBatchNode()$/;"	f	class:CCParticleBatchNode	signature:()
CCParticleBatchNode::CCParticleBatchNode	particle_nodes/CCParticleBatchNode.h	/^    CCParticleBatchNode();$/;"	p	class:CCParticleBatchNode	access:public	signature:()
CCParticleBatchNode::CC_SYNTHESIZE	particle_nodes/CCParticleBatchNode.h	/^    CC_SYNTHESIZE(CCTextureAtlas*, m_pTextureAtlas, TextureAtlas);$/;"	p	class:CCParticleBatchNode	access:private	signature:(CCTextureAtlas*, m_pTextureAtlas, TextureAtlas)
CCParticleBatchNode::addChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::addChild(CCNode * child)$/;"	f	class:CCParticleBatchNode	signature:(CCNode * child)
CCParticleBatchNode::addChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::addChild(CCNode * child, int zOrder)$/;"	f	class:CCParticleBatchNode	signature:(CCNode * child, int zOrder)
CCParticleBatchNode::addChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::addChild(CCNode * child, int zOrder, int tag)$/;"	f	class:CCParticleBatchNode	signature:(CCNode * child, int zOrder, int tag)
CCParticleBatchNode::addChild	particle_nodes/CCParticleBatchNode.h	/^    virtual void addChild(CCNode * child);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCNode * child)
CCParticleBatchNode::addChild	particle_nodes/CCParticleBatchNode.h	/^    virtual void addChild(CCNode * child, int zOrder);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCNode * child, int zOrder)
CCParticleBatchNode::addChild	particle_nodes/CCParticleBatchNode.h	/^    virtual void addChild(CCNode * child, int zOrder, int tag);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCNode * child, int zOrder, int tag)
CCParticleBatchNode::addChildHelper	particle_nodes/CCParticleBatchNode.cpp	/^unsigned int CCParticleBatchNode::addChildHelper(CCParticleSystem* child, int z, int aTag)$/;"	f	class:CCParticleBatchNode	signature:(CCParticleSystem* child, int z, int aTag)
CCParticleBatchNode::addChildHelper	particle_nodes/CCParticleBatchNode.h	/^    unsigned int addChildHelper(CCParticleSystem* child, int z, int aTag);$/;"	p	class:CCParticleBatchNode	access:private	signature:(CCParticleSystem* child, int z, int aTag)
CCParticleBatchNode::create	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode* CCParticleBatchNode::create(const char* imageFile, unsigned int capacity\/* = kCCParticleDefaultCapacity*\/)$/;"	f	class:CCParticleBatchNode	signature:(const char* imageFile, unsigned int capacity )
CCParticleBatchNode::create	particle_nodes/CCParticleBatchNode.h	/^    static CCParticleBatchNode* create(const char* fileImage, unsigned int capacity = kCCParticleDefaultCapacity);$/;"	p	class:CCParticleBatchNode	access:public	signature:(const char* fileImage, unsigned int capacity = kCCParticleDefaultCapacity)
CCParticleBatchNode::createWithTexture	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode* CCParticleBatchNode::createWithTexture(CCTexture2D *tex, unsigned int capacity\/* = kCCParticleDefaultCapacity*\/)$/;"	f	class:CCParticleBatchNode	signature:(CCTexture2D *tex, unsigned int capacity )
CCParticleBatchNode::createWithTexture	particle_nodes/CCParticleBatchNode.h	/^    static CCParticleBatchNode* createWithTexture(CCTexture2D *tex, unsigned int capacity = kCCParticleDefaultCapacity);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCTexture2D *tex, unsigned int capacity = kCCParticleDefaultCapacity)
CCParticleBatchNode::disableParticle	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::disableParticle(unsigned int particleIndex)$/;"	f	class:CCParticleBatchNode	signature:(unsigned int particleIndex)
CCParticleBatchNode::disableParticle	particle_nodes/CCParticleBatchNode.h	/^    void disableParticle(unsigned int particleIndex);$/;"	p	class:CCParticleBatchNode	access:public	signature:(unsigned int particleIndex)
CCParticleBatchNode::draw	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::draw(void)$/;"	f	class:CCParticleBatchNode	signature:(void)
CCParticleBatchNode::draw	particle_nodes/CCParticleBatchNode.h	/^    virtual void draw(void);$/;"	p	class:CCParticleBatchNode	access:public	signature:(void)
CCParticleBatchNode::getBlendFunc	particle_nodes/CCParticleBatchNode.cpp	/^ccBlendFunc CCParticleBatchNode::getBlendFunc(void)$/;"	f	class:CCParticleBatchNode	signature:(void)
CCParticleBatchNode::getBlendFunc	particle_nodes/CCParticleBatchNode.h	/^    virtual ccBlendFunc getBlendFunc(void);$/;"	p	class:CCParticleBatchNode	access:public	signature:(void)
CCParticleBatchNode::getCurrentIndex	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::getCurrentIndex(unsigned int* oldIndex, unsigned int* newIndex, CCNode* child, int z)$/;"	f	class:CCParticleBatchNode	signature:(unsigned int* oldIndex, unsigned int* newIndex, CCNode* child, int z)
CCParticleBatchNode::getCurrentIndex	particle_nodes/CCParticleBatchNode.h	/^    void getCurrentIndex(unsigned int* oldIndex, unsigned int* newIndex, CCNode* child, int z);$/;"	p	class:CCParticleBatchNode	access:private	signature:(unsigned int* oldIndex, unsigned int* newIndex, CCNode* child, int z)
CCParticleBatchNode::getTexture	particle_nodes/CCParticleBatchNode.cpp	/^CCTexture2D* CCParticleBatchNode::getTexture(void)$/;"	f	class:CCParticleBatchNode	signature:(void)
CCParticleBatchNode::getTexture	particle_nodes/CCParticleBatchNode.h	/^    virtual CCTexture2D* getTexture(void);$/;"	p	class:CCParticleBatchNode	access:public	signature:(void)
CCParticleBatchNode::increaseAtlasCapacityTo	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::increaseAtlasCapacityTo(unsigned int quantity)$/;"	f	class:CCParticleBatchNode	signature:(unsigned int quantity)
CCParticleBatchNode::increaseAtlasCapacityTo	particle_nodes/CCParticleBatchNode.h	/^    void increaseAtlasCapacityTo(unsigned int quantity);$/;"	p	class:CCParticleBatchNode	access:private	signature:(unsigned int quantity)
CCParticleBatchNode::initWithFile	particle_nodes/CCParticleBatchNode.cpp	/^bool CCParticleBatchNode::initWithFile(const char* fileImage, unsigned int capacity)$/;"	f	class:CCParticleBatchNode	signature:(const char* fileImage, unsigned int capacity)
CCParticleBatchNode::initWithFile	particle_nodes/CCParticleBatchNode.h	/^    bool initWithFile(const char* fileImage, unsigned int capacity);$/;"	p	class:CCParticleBatchNode	access:public	signature:(const char* fileImage, unsigned int capacity)
CCParticleBatchNode::initWithTexture	particle_nodes/CCParticleBatchNode.cpp	/^bool CCParticleBatchNode::initWithTexture(CCTexture2D *tex, unsigned int capacity)$/;"	f	class:CCParticleBatchNode	signature:(CCTexture2D *tex, unsigned int capacity)
CCParticleBatchNode::initWithTexture	particle_nodes/CCParticleBatchNode.h	/^    bool initWithTexture(CCTexture2D *tex, unsigned int capacity);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCTexture2D *tex, unsigned int capacity)
CCParticleBatchNode::insertChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::insertChild(CCParticleSystem* pSystem, unsigned int index)$/;"	f	class:CCParticleBatchNode	signature:(CCParticleSystem* pSystem, unsigned int index)
CCParticleBatchNode::insertChild	particle_nodes/CCParticleBatchNode.h	/^    void insertChild(CCParticleSystem* pSystem, unsigned int index);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCParticleSystem* pSystem, unsigned int index)
CCParticleBatchNode::m_tBlendFunc	particle_nodes/CCParticleBatchNode.h	/^    ccBlendFunc m_tBlendFunc;$/;"	m	class:CCParticleBatchNode	access:private
CCParticleBatchNode::removeAllChildrenWithCleanup	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::removeAllChildrenWithCleanup(bool doCleanup)$/;"	f	class:CCParticleBatchNode	signature:(bool doCleanup)
CCParticleBatchNode::removeAllChildrenWithCleanup	particle_nodes/CCParticleBatchNode.h	/^    void removeAllChildrenWithCleanup(bool doCleanup);$/;"	p	class:CCParticleBatchNode	access:public	signature:(bool doCleanup)
CCParticleBatchNode::removeChild	particle_nodes/CCParticleBatchNode.cpp	/^void  CCParticleBatchNode::removeChild(CCNode* child, bool cleanup)$/;"	f	class:CCParticleBatchNode	signature:(CCNode* child, bool cleanup)
CCParticleBatchNode::removeChild	particle_nodes/CCParticleBatchNode.h	/^    virtual void removeChild(CCNode* child, bool cleanup);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCNode* child, bool cleanup)
CCParticleBatchNode::removeChildAtIndex	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::removeChildAtIndex(unsigned int index, bool doCleanup)$/;"	f	class:CCParticleBatchNode	signature:(unsigned int index, bool doCleanup)
CCParticleBatchNode::removeChildAtIndex	particle_nodes/CCParticleBatchNode.h	/^    void removeChildAtIndex(unsigned int index, bool doCleanup);$/;"	p	class:CCParticleBatchNode	access:public	signature:(unsigned int index, bool doCleanup)
CCParticleBatchNode::reorderChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::reorderChild(CCNode * child, int zOrder)$/;"	f	class:CCParticleBatchNode	signature:(CCNode * child, int zOrder)
CCParticleBatchNode::reorderChild	particle_nodes/CCParticleBatchNode.h	/^    virtual void reorderChild(CCNode * child, int zOrder);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCNode * child, int zOrder)
CCParticleBatchNode::searchNewPositionInChildrenForZ	particle_nodes/CCParticleBatchNode.cpp	/^unsigned int CCParticleBatchNode::searchNewPositionInChildrenForZ(int z)$/;"	f	class:CCParticleBatchNode	signature:(int z)
CCParticleBatchNode::searchNewPositionInChildrenForZ	particle_nodes/CCParticleBatchNode.h	/^    unsigned int searchNewPositionInChildrenForZ(int z);$/;"	p	class:CCParticleBatchNode	access:private	signature:(int z)
CCParticleBatchNode::setBlendFunc	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCParticleBatchNode	signature:(ccBlendFunc blendFunc)
CCParticleBatchNode::setBlendFunc	particle_nodes/CCParticleBatchNode.h	/^    virtual void setBlendFunc(ccBlendFunc blendFunc);$/;"	p	class:CCParticleBatchNode	access:public	signature:(ccBlendFunc blendFunc)
CCParticleBatchNode::setTexture	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::setTexture(CCTexture2D* texture)$/;"	f	class:CCParticleBatchNode	signature:(CCTexture2D* texture)
CCParticleBatchNode::setTexture	particle_nodes/CCParticleBatchNode.h	/^    virtual void setTexture(CCTexture2D *texture);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCTexture2D *texture)
CCParticleBatchNode::updateAllAtlasIndexes	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::updateAllAtlasIndexes()$/;"	f	class:CCParticleBatchNode	signature:()
CCParticleBatchNode::updateAllAtlasIndexes	particle_nodes/CCParticleBatchNode.h	/^    void updateAllAtlasIndexes();$/;"	p	class:CCParticleBatchNode	access:private	signature:()
CCParticleBatchNode::updateBlendFunc	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::updateBlendFunc(void)$/;"	f	class:CCParticleBatchNode	signature:(void)
CCParticleBatchNode::updateBlendFunc	particle_nodes/CCParticleBatchNode.h	/^    void updateBlendFunc(void);$/;"	p	class:CCParticleBatchNode	access:private	signature:(void)
CCParticleBatchNode::visit	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::visit()$/;"	f	class:CCParticleBatchNode	signature:()
CCParticleBatchNode::visit	particle_nodes/CCParticleBatchNode.h	/^    void visit();$/;"	p	class:CCParticleBatchNode	access:public	signature:()
CCParticleBatchNode::~CCParticleBatchNode	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode::~CCParticleBatchNode()$/;"	f	class:CCParticleBatchNode	signature:()
CCParticleBatchNode::~CCParticleBatchNode	particle_nodes/CCParticleBatchNode.h	/^    virtual ~CCParticleBatchNode();$/;"	p	class:CCParticleBatchNode	access:public	signature:()
CCParticleExplosion	particle_nodes/CCParticleExamples.h	/^    CCParticleExplosion(){}$/;"	f	class:CCParticleExplosion	access:public	signature:()
CCParticleExplosion	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleExplosion : public CCParticleSystemQuad$/;"	c	inherits:CCParticleSystemQuad
CCParticleExplosion::CCParticleExplosion	particle_nodes/CCParticleExamples.h	/^    CCParticleExplosion(){}$/;"	f	class:CCParticleExplosion	access:public	signature:()
CCParticleExplosion::create	particle_nodes/CCParticleExamples.cpp	/^CCParticleExplosion* CCParticleExplosion::create()$/;"	f	class:CCParticleExplosion	signature:()
CCParticleExplosion::create	particle_nodes/CCParticleExamples.h	/^    static CCParticleExplosion* create();$/;"	p	class:CCParticleExplosion	access:public	signature:()
CCParticleExplosion::createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleExplosion* CCParticleExplosion::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleExplosion	signature:(unsigned int numberOfParticles)
CCParticleExplosion::createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleExplosion* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleExplosion	access:public	signature:(unsigned int numberOfParticles)
CCParticleExplosion::init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(700); }$/;"	f	class:CCParticleExplosion	access:public	signature:()
CCParticleExplosion::initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleExplosion::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleExplosion	signature:(unsigned int numberOfParticles)
CCParticleExplosion::initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleExplosion	access:public	signature:(unsigned int numberOfParticles)
CCParticleExplosion::~CCParticleExplosion	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleExplosion(){}$/;"	f	class:CCParticleExplosion	access:public	signature:()
CCParticleFire	particle_nodes/CCParticleExamples.h	/^    CCParticleFire(){}$/;"	f	class:CCParticleFire	access:public	signature:()
CCParticleFire	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleFire : public CCParticleSystemQuad$/;"	c	inherits:CCParticleSystemQuad
CCParticleFire::CCParticleFire	particle_nodes/CCParticleExamples.h	/^    CCParticleFire(){}$/;"	f	class:CCParticleFire	access:public	signature:()
CCParticleFire::create	particle_nodes/CCParticleExamples.cpp	/^CCParticleFire* CCParticleFire::create()$/;"	f	class:CCParticleFire	signature:()
CCParticleFire::create	particle_nodes/CCParticleExamples.h	/^    static CCParticleFire* create();$/;"	p	class:CCParticleFire	access:public	signature:()
CCParticleFire::createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleFire* CCParticleFire::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFire	signature:(unsigned int numberOfParticles)
CCParticleFire::createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleFire* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleFire	access:public	signature:(unsigned int numberOfParticles)
CCParticleFire::init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(250); }$/;"	f	class:CCParticleFire	access:public	signature:()
CCParticleFire::initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleFire::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFire	signature:(unsigned int numberOfParticles)
CCParticleFire::initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleFire	access:public	signature:(unsigned int numberOfParticles)
CCParticleFire::~CCParticleFire	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleFire(){}$/;"	f	class:CCParticleFire	access:public	signature:()
CCParticleFireworks	particle_nodes/CCParticleExamples.h	/^    CCParticleFireworks(){}$/;"	f	class:CCParticleFireworks	access:public	signature:()
CCParticleFireworks	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleFireworks : public CCParticleSystemQuad$/;"	c	inherits:CCParticleSystemQuad
CCParticleFireworks::CCParticleFireworks	particle_nodes/CCParticleExamples.h	/^    CCParticleFireworks(){}$/;"	f	class:CCParticleFireworks	access:public	signature:()
CCParticleFireworks::create	particle_nodes/CCParticleExamples.cpp	/^CCParticleFireworks* CCParticleFireworks::create()$/;"	f	class:CCParticleFireworks	signature:()
CCParticleFireworks::create	particle_nodes/CCParticleExamples.h	/^    static CCParticleFireworks* create();$/;"	p	class:CCParticleFireworks	access:public	signature:()
CCParticleFireworks::createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleFireworks* CCParticleFireworks::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFireworks	signature:(unsigned int numberOfParticles)
CCParticleFireworks::createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleFireworks* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleFireworks	access:public	signature:(unsigned int numberOfParticles)
CCParticleFireworks::init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(1500); }$/;"	f	class:CCParticleFireworks	access:public	signature:()
CCParticleFireworks::initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleFireworks::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFireworks	signature:(unsigned int numberOfParticles)
CCParticleFireworks::initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleFireworks	access:public	signature:(unsigned int numberOfParticles)
CCParticleFireworks::~CCParticleFireworks	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleFireworks(){}$/;"	f	class:CCParticleFireworks	access:public	signature:()
CCParticleFlower	particle_nodes/CCParticleExamples.h	/^    CCParticleFlower(){}$/;"	f	class:CCParticleFlower	access:public	signature:()
CCParticleFlower	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleFlower : public CCParticleSystemQuad$/;"	c	inherits:CCParticleSystemQuad
CCParticleFlower::CCParticleFlower	particle_nodes/CCParticleExamples.h	/^    CCParticleFlower(){}$/;"	f	class:CCParticleFlower	access:public	signature:()
CCParticleFlower::create	particle_nodes/CCParticleExamples.cpp	/^CCParticleFlower* CCParticleFlower::create()$/;"	f	class:CCParticleFlower	signature:()
CCParticleFlower::create	particle_nodes/CCParticleExamples.h	/^    static CCParticleFlower* create();$/;"	p	class:CCParticleFlower	access:public	signature:()
CCParticleFlower::createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleFlower* CCParticleFlower::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFlower	signature:(unsigned int numberOfParticles)
CCParticleFlower::createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleFlower* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleFlower	access:public	signature:(unsigned int numberOfParticles)
CCParticleFlower::init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(250); }$/;"	f	class:CCParticleFlower	access:public	signature:()
CCParticleFlower::initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleFlower::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFlower	signature:(unsigned int numberOfParticles)
CCParticleFlower::initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleFlower	access:public	signature:(unsigned int numberOfParticles)
CCParticleFlower::~CCParticleFlower	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleFlower(){}$/;"	f	class:CCParticleFlower	access:public	signature:()
CCParticleGalaxy	particle_nodes/CCParticleExamples.h	/^    CCParticleGalaxy(){}$/;"	f	class:CCParticleGalaxy	access:public	signature:()
CCParticleGalaxy	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleGalaxy : public CCParticleSystemQuad$/;"	c	inherits:CCParticleSystemQuad
CCParticleGalaxy::CCParticleGalaxy	particle_nodes/CCParticleExamples.h	/^    CCParticleGalaxy(){}$/;"	f	class:CCParticleGalaxy	access:public	signature:()
CCParticleGalaxy::create	particle_nodes/CCParticleExamples.cpp	/^CCParticleGalaxy* CCParticleGalaxy::create()$/;"	f	class:CCParticleGalaxy	signature:()
CCParticleGalaxy::create	particle_nodes/CCParticleExamples.h	/^    static CCParticleGalaxy* create();$/;"	p	class:CCParticleGalaxy	access:public	signature:()
CCParticleGalaxy::createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleGalaxy* CCParticleGalaxy::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleGalaxy	signature:(unsigned int numberOfParticles)
CCParticleGalaxy::createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleGalaxy* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleGalaxy	access:public	signature:(unsigned int numberOfParticles)
CCParticleGalaxy::init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(200); }$/;"	f	class:CCParticleGalaxy	access:public	signature:()
CCParticleGalaxy::initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleGalaxy::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleGalaxy	signature:(unsigned int numberOfParticles)
CCParticleGalaxy::initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleGalaxy	access:public	signature:(unsigned int numberOfParticles)
CCParticleGalaxy::~CCParticleGalaxy	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleGalaxy(){}$/;"	f	class:CCParticleGalaxy	access:public	signature:()
CCParticleMeteor	particle_nodes/CCParticleExamples.h	/^    CCParticleMeteor(){}$/;"	f	class:CCParticleMeteor	access:public	signature:()
CCParticleMeteor	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleMeteor : public CCParticleSystemQuad$/;"	c	inherits:CCParticleSystemQuad
CCParticleMeteor::CCParticleMeteor	particle_nodes/CCParticleExamples.h	/^    CCParticleMeteor(){}$/;"	f	class:CCParticleMeteor	access:public	signature:()
CCParticleMeteor::create	particle_nodes/CCParticleExamples.cpp	/^CCParticleMeteor * CCParticleMeteor::create()$/;"	f	class:CCParticleMeteor	signature:()
CCParticleMeteor::create	particle_nodes/CCParticleExamples.h	/^    static CCParticleMeteor * create();$/;"	p	class:CCParticleMeteor	access:public	signature:()
CCParticleMeteor::createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleMeteor* CCParticleMeteor::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleMeteor	signature:(unsigned int numberOfParticles)
CCParticleMeteor::createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleMeteor* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleMeteor	access:public	signature:(unsigned int numberOfParticles)
CCParticleMeteor::init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(150); }$/;"	f	class:CCParticleMeteor	access:public	signature:()
CCParticleMeteor::initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleMeteor::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleMeteor	signature:(unsigned int numberOfParticles)
CCParticleMeteor::initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleMeteor	access:public	signature:(unsigned int numberOfParticles)
CCParticleMeteor::~CCParticleMeteor	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleMeteor(){}$/;"	f	class:CCParticleMeteor	access:public	signature:()
CCParticleRain	particle_nodes/CCParticleExamples.h	/^    CCParticleRain(){}$/;"	f	class:CCParticleRain	access:public	signature:()
CCParticleRain	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleRain : public CCParticleSystemQuad$/;"	c	inherits:CCParticleSystemQuad
CCParticleRain::CCParticleRain	particle_nodes/CCParticleExamples.h	/^    CCParticleRain(){}$/;"	f	class:CCParticleRain	access:public	signature:()
CCParticleRain::create	particle_nodes/CCParticleExamples.cpp	/^CCParticleRain* CCParticleRain::create()$/;"	f	class:CCParticleRain	signature:()
CCParticleRain::create	particle_nodes/CCParticleExamples.h	/^    static CCParticleRain* create();$/;"	p	class:CCParticleRain	access:public	signature:()
CCParticleRain::createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleRain* CCParticleRain::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleRain	signature:(unsigned int numberOfParticles)
CCParticleRain::createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleRain* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleRain	access:public	signature:(unsigned int numberOfParticles)
CCParticleRain::init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(1000); }$/;"	f	class:CCParticleRain	access:public	signature:()
CCParticleRain::initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleRain::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleRain	signature:(unsigned int numberOfParticles)
CCParticleRain::initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleRain	access:public	signature:(unsigned int numberOfParticles)
CCParticleRain::~CCParticleRain	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleRain(){}$/;"	f	class:CCParticleRain	access:public	signature:()
CCParticleSmoke	particle_nodes/CCParticleExamples.h	/^    CCParticleSmoke(){}$/;"	f	class:CCParticleSmoke	access:public	signature:()
CCParticleSmoke	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleSmoke : public CCParticleSystemQuad$/;"	c	inherits:CCParticleSystemQuad
CCParticleSmoke::CCParticleSmoke	particle_nodes/CCParticleExamples.h	/^    CCParticleSmoke(){}$/;"	f	class:CCParticleSmoke	access:public	signature:()
CCParticleSmoke::create	particle_nodes/CCParticleExamples.cpp	/^CCParticleSmoke* CCParticleSmoke::create()$/;"	f	class:CCParticleSmoke	signature:()
CCParticleSmoke::create	particle_nodes/CCParticleExamples.h	/^    static CCParticleSmoke* create();$/;"	p	class:CCParticleSmoke	access:public	signature:()
CCParticleSmoke::createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleSmoke* CCParticleSmoke::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSmoke	signature:(unsigned int numberOfParticles)
CCParticleSmoke::createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleSmoke* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSmoke	access:public	signature:(unsigned int numberOfParticles)
CCParticleSmoke::init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(200); }$/;"	f	class:CCParticleSmoke	access:public	signature:()
CCParticleSmoke::initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleSmoke::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSmoke	signature:(unsigned int numberOfParticles)
CCParticleSmoke::initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSmoke	access:public	signature:(unsigned int numberOfParticles)
CCParticleSmoke::~CCParticleSmoke	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleSmoke(){}$/;"	f	class:CCParticleSmoke	access:public	signature:()
CCParticleSnow	particle_nodes/CCParticleExamples.h	/^    CCParticleSnow(){}$/;"	f	class:CCParticleSnow	access:public	signature:()
CCParticleSnow	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleSnow : public CCParticleSystemQuad$/;"	c	inherits:CCParticleSystemQuad
CCParticleSnow::CCParticleSnow	particle_nodes/CCParticleExamples.h	/^    CCParticleSnow(){}$/;"	f	class:CCParticleSnow	access:public	signature:()
CCParticleSnow::create	particle_nodes/CCParticleExamples.cpp	/^CCParticleSnow* CCParticleSnow::create()$/;"	f	class:CCParticleSnow	signature:()
CCParticleSnow::create	particle_nodes/CCParticleExamples.h	/^    static CCParticleSnow* create();$/;"	p	class:CCParticleSnow	access:public	signature:()
CCParticleSnow::createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleSnow* CCParticleSnow::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSnow	signature:(unsigned int numberOfParticles)
CCParticleSnow::createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleSnow* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSnow	access:public	signature:(unsigned int numberOfParticles)
CCParticleSnow::init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(700); }$/;"	f	class:CCParticleSnow	access:public	signature:()
CCParticleSnow::initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleSnow::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSnow	signature:(unsigned int numberOfParticles)
CCParticleSnow::initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSnow	access:public	signature:(unsigned int numberOfParticles)
CCParticleSnow::~CCParticleSnow	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleSnow(){}$/;"	f	class:CCParticleSnow	access:public	signature:()
CCParticleSpiral	particle_nodes/CCParticleExamples.h	/^    CCParticleSpiral(){}$/;"	f	class:CCParticleSpiral	access:public	signature:()
CCParticleSpiral	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleSpiral : public CCParticleSystemQuad$/;"	c	inherits:CCParticleSystemQuad
CCParticleSpiral::CCParticleSpiral	particle_nodes/CCParticleExamples.h	/^    CCParticleSpiral(){}$/;"	f	class:CCParticleSpiral	access:public	signature:()
CCParticleSpiral::create	particle_nodes/CCParticleExamples.cpp	/^CCParticleSpiral* CCParticleSpiral::create()$/;"	f	class:CCParticleSpiral	signature:()
CCParticleSpiral::create	particle_nodes/CCParticleExamples.h	/^    static CCParticleSpiral* create();$/;"	p	class:CCParticleSpiral	access:public	signature:()
CCParticleSpiral::createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleSpiral* CCParticleSpiral::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSpiral	signature:(unsigned int numberOfParticles)
CCParticleSpiral::createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleSpiral* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSpiral	access:public	signature:(unsigned int numberOfParticles)
CCParticleSpiral::init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(500); }$/;"	f	class:CCParticleSpiral	access:public	signature:()
CCParticleSpiral::initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleSpiral::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSpiral	signature:(unsigned int numberOfParticles)
CCParticleSpiral::initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSpiral	access:public	signature:(unsigned int numberOfParticles)
CCParticleSpiral::~CCParticleSpiral	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleSpiral(){}$/;"	f	class:CCParticleSpiral	access:public	signature:()
CCParticleSun	particle_nodes/CCParticleExamples.h	/^    CCParticleSun(){}$/;"	f	class:CCParticleSun	access:public	signature:()
CCParticleSun	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleSun : public CCParticleSystemQuad$/;"	c	inherits:CCParticleSystemQuad
CCParticleSun::CCParticleSun	particle_nodes/CCParticleExamples.h	/^    CCParticleSun(){}$/;"	f	class:CCParticleSun	access:public	signature:()
CCParticleSun::create	particle_nodes/CCParticleExamples.cpp	/^CCParticleSun* CCParticleSun::create()$/;"	f	class:CCParticleSun	signature:()
CCParticleSun::create	particle_nodes/CCParticleExamples.h	/^    static CCParticleSun* create();$/;"	p	class:CCParticleSun	access:public	signature:()
CCParticleSun::createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleSun* CCParticleSun::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSun	signature:(unsigned int numberOfParticles)
CCParticleSun::createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleSun* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSun	access:public	signature:(unsigned int numberOfParticles)
CCParticleSun::init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(350); }$/;"	f	class:CCParticleSun	access:public	signature:()
CCParticleSun::initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleSun::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSun	signature:(unsigned int numberOfParticles)
CCParticleSun::initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSun	access:public	signature:(unsigned int numberOfParticles)
CCParticleSun::~CCParticleSun	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleSun(){}$/;"	f	class:CCParticleSun	access:public	signature:()
CCParticleSystem	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem::CCParticleSystem()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem	particle_nodes/CCParticleSystem.h	/^    CCParticleSystem();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem	particle_nodes/CCParticleSystem.h	/^class CC_DLL CCParticleSystem : public CCNode, public CCTextureProtocol$/;"	c	inherits:CCNode,CCTextureProtocol
CCParticleSystem::CCParticleSystem	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem::CCParticleSystem()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::CCParticleSystem	particle_nodes/CCParticleSystem.h	/^    CCParticleSystem();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::CC_PROPERTY	particle_nodes/CCParticleSystem.h	/^    CC_PROPERTY(CCParticleBatchNode*, m_pBatchNode, BatchNode);$/;"	p	class:CCParticleSystem	access:protected	signature:(CCParticleBatchNode*, m_pBatchNode, BatchNode)
CCParticleSystem::CC_SYNTHESIZE	particle_nodes/CCParticleSystem.h	/^    CC_SYNTHESIZE(unsigned int, m_uAtlasIndex, AtlasIndex);$/;"	p	class:CCParticleSystem	access:protected	signature:(unsigned int, m_uAtlasIndex, AtlasIndex)
CCParticleSystem::__anon24::gravity	particle_nodes/CCParticleSystem.h	/^        CCPoint gravity;$/;"	m	struct:CCParticleSystem::__anon24	access:public
CCParticleSystem::__anon24::radialAccel	particle_nodes/CCParticleSystem.h	/^        float radialAccel;$/;"	m	struct:CCParticleSystem::__anon24	access:public
CCParticleSystem::__anon24::radialAccelVar	particle_nodes/CCParticleSystem.h	/^        float radialAccelVar;$/;"	m	struct:CCParticleSystem::__anon24	access:public
CCParticleSystem::__anon24::rotationIsDir	particle_nodes/CCParticleSystem.h	/^        bool rotationIsDir;$/;"	m	struct:CCParticleSystem::__anon24	access:public
CCParticleSystem::__anon24::speed	particle_nodes/CCParticleSystem.h	/^        float speed;$/;"	m	struct:CCParticleSystem::__anon24	access:public
CCParticleSystem::__anon24::speedVar	particle_nodes/CCParticleSystem.h	/^        float speedVar;$/;"	m	struct:CCParticleSystem::__anon24	access:public
CCParticleSystem::__anon24::tangentialAccel	particle_nodes/CCParticleSystem.h	/^        float tangentialAccel;$/;"	m	struct:CCParticleSystem::__anon24	access:public
CCParticleSystem::__anon24::tangentialAccelVar	particle_nodes/CCParticleSystem.h	/^        float tangentialAccelVar;$/;"	m	struct:CCParticleSystem::__anon24	access:public
CCParticleSystem::__anon25::endRadius	particle_nodes/CCParticleSystem.h	/^        float endRadius;$/;"	m	struct:CCParticleSystem::__anon25	access:public
CCParticleSystem::__anon25::endRadiusVar	particle_nodes/CCParticleSystem.h	/^        float endRadiusVar;            $/;"	m	struct:CCParticleSystem::__anon25	access:public
CCParticleSystem::__anon25::rotatePerSecond	particle_nodes/CCParticleSystem.h	/^        float rotatePerSecond;$/;"	m	struct:CCParticleSystem::__anon25	access:public
CCParticleSystem::__anon25::rotatePerSecondVar	particle_nodes/CCParticleSystem.h	/^        float rotatePerSecondVar;$/;"	m	struct:CCParticleSystem::__anon25	access:public
CCParticleSystem::__anon25::startRadius	particle_nodes/CCParticleSystem.h	/^        float startRadius;$/;"	m	struct:CCParticleSystem::__anon25	access:public
CCParticleSystem::__anon25::startRadiusVar	particle_nodes/CCParticleSystem.h	/^        float startRadiusVar;$/;"	m	struct:CCParticleSystem::__anon25	access:public
CCParticleSystem::addParticle	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::addParticle()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::addParticle	particle_nodes/CCParticleSystem.h	/^    bool addParticle();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::create	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem * CCParticleSystem::create(const char *plistFile)$/;"	f	class:CCParticleSystem	signature:(const char *plistFile)
CCParticleSystem::create	particle_nodes/CCParticleSystem.h	/^    static CCParticleSystem * create(const char *plistFile);$/;"	p	class:CCParticleSystem	access:public	signature:(const char *plistFile)
CCParticleSystem::createWithTotalParticles	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem* CCParticleSystem::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSystem	signature:(unsigned int numberOfParticles)
CCParticleSystem::createWithTotalParticles	particle_nodes/CCParticleSystem.h	/^    static CCParticleSystem* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSystem	access:public	signature:(unsigned int numberOfParticles)
CCParticleSystem::getAngle	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getAngle()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getAngleVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getAngleVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getBatchNode	particle_nodes/CCParticleSystem.cpp	/^CCParticleBatchNode* CCParticleSystem::getBatchNode(void)$/;"	f	class:CCParticleSystem	signature:(void)
CCParticleSystem::getBlendFunc	particle_nodes/CCParticleSystem.cpp	/^ccBlendFunc CCParticleSystem::getBlendFunc()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getDuration	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getDuration()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getEmissionRate	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEmissionRate()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getEmitterMode	particle_nodes/CCParticleSystem.cpp	/^int CCParticleSystem::getEmitterMode()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getEndColor	particle_nodes/CCParticleSystem.cpp	/^const ccColor4F& CCParticleSystem::getEndColor()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getEndColorVar	particle_nodes/CCParticleSystem.cpp	/^const ccColor4F& CCParticleSystem::getEndColorVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getEndRadius	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndRadius()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getEndRadius	particle_nodes/CCParticleSystem.h	/^    virtual float getEndRadius();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getEndRadiusVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndRadiusVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getEndRadiusVar	particle_nodes/CCParticleSystem.h	/^    virtual float getEndRadiusVar();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getEndSize	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndSize()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getEndSizeVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndSizeVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getEndSpin	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndSpin()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getEndSpinVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndSpinVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getGravity	particle_nodes/CCParticleSystem.cpp	/^const CCPoint& CCParticleSystem::getGravity()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getGravity	particle_nodes/CCParticleSystem.h	/^    virtual const CCPoint& getGravity();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getLife	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getLife()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getLifeVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getLifeVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getOpacityModifyRGB	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::getOpacityModifyRGB()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getParticleCount	particle_nodes/CCParticleSystem.cpp	/^unsigned int CCParticleSystem::getParticleCount()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getPosVar	particle_nodes/CCParticleSystem.cpp	/^const CCPoint& CCParticleSystem::getPosVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getPositionType	particle_nodes/CCParticleSystem.cpp	/^tCCPositionType CCParticleSystem::getPositionType()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getRadialAccel	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getRadialAccel()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getRadialAccel	particle_nodes/CCParticleSystem.h	/^    virtual float getRadialAccel();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getRadialAccelVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getRadialAccelVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getRadialAccelVar	particle_nodes/CCParticleSystem.h	/^    virtual float getRadialAccelVar();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getRotatePerSecond	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getRotatePerSecond()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getRotatePerSecond	particle_nodes/CCParticleSystem.h	/^    virtual float getRotatePerSecond();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getRotatePerSecondVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getRotatePerSecondVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getRotatePerSecondVar	particle_nodes/CCParticleSystem.h	/^    virtual float getRotatePerSecondVar();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getRotationIsDir	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::getRotationIsDir()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getRotationIsDir	particle_nodes/CCParticleSystem.h	/^    virtual bool getRotationIsDir();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getSourcePosition	particle_nodes/CCParticleSystem.cpp	/^const CCPoint& CCParticleSystem::getSourcePosition()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getSpeed	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getSpeed()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getSpeed	particle_nodes/CCParticleSystem.h	/^    virtual float getSpeed();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getSpeedVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getSpeedVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getSpeedVar	particle_nodes/CCParticleSystem.h	/^    virtual float getSpeedVar();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getStartColor	particle_nodes/CCParticleSystem.cpp	/^const ccColor4F& CCParticleSystem::getStartColor()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getStartColorVar	particle_nodes/CCParticleSystem.cpp	/^const ccColor4F& CCParticleSystem::getStartColorVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getStartRadius	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartRadius()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getStartRadius	particle_nodes/CCParticleSystem.h	/^    virtual float getStartRadius();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getStartRadiusVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartRadiusVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getStartRadiusVar	particle_nodes/CCParticleSystem.h	/^    virtual float getStartRadiusVar();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getStartSize	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartSize()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getStartSizeVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartSizeVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getStartSpin	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartSpin()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getStartSpinVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartSpinVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getTangentialAccel	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getTangentialAccel()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getTangentialAccel	particle_nodes/CCParticleSystem.h	/^    virtual float getTangentialAccel();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getTangentialAccelVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getTangentialAccelVar()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getTangentialAccelVar	particle_nodes/CCParticleSystem.h	/^    virtual float getTangentialAccelVar();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::getTexture	particle_nodes/CCParticleSystem.cpp	/^CCTexture2D * CCParticleSystem::getTexture()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::getTotalParticles	particle_nodes/CCParticleSystem.cpp	/^unsigned int CCParticleSystem::getTotalParticles()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::init	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::init()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::init	particle_nodes/CCParticleSystem.h	/^    bool init();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::initParticle	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::initParticle(tCCParticle* particle)$/;"	f	class:CCParticleSystem	signature:(tCCParticle* particle)
CCParticleSystem::initParticle	particle_nodes/CCParticleSystem.h	/^    void initParticle(tCCParticle* particle);$/;"	p	class:CCParticleSystem	access:public	signature:(tCCParticle* particle)
CCParticleSystem::initWithDictionary	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::initWithDictionary(CCDictionary *dictionary)$/;"	f	class:CCParticleSystem	signature:(CCDictionary *dictionary)
CCParticleSystem::initWithDictionary	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::initWithDictionary(CCDictionary *dictionary, const char *dirname)$/;"	f	class:CCParticleSystem	signature:(CCDictionary *dictionary, const char *dirname)
CCParticleSystem::initWithDictionary	particle_nodes/CCParticleSystem.h	/^    bool initWithDictionary(CCDictionary *dictionary);$/;"	p	class:CCParticleSystem	access:public	signature:(CCDictionary *dictionary)
CCParticleSystem::initWithDictionary	particle_nodes/CCParticleSystem.h	/^    bool initWithDictionary(CCDictionary *dictionary, const char *dirname);$/;"	p	class:CCParticleSystem	access:public	signature:(CCDictionary *dictionary, const char *dirname)
CCParticleSystem::initWithFile	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::initWithFile(const char *plistFile)$/;"	f	class:CCParticleSystem	signature:(const char *plistFile)
CCParticleSystem::initWithFile	particle_nodes/CCParticleSystem.h	/^    bool initWithFile(const char *plistFile);$/;"	p	class:CCParticleSystem	access:public	signature:(const char *plistFile)
CCParticleSystem::initWithTotalParticles	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSystem	signature:(unsigned int numberOfParticles)
CCParticleSystem::initWithTotalParticles	particle_nodes/CCParticleSystem.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSystem	access:public	signature:(unsigned int numberOfParticles)
CCParticleSystem::isActive	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::isActive()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::isActive	particle_nodes/CCParticleSystem.h	/^    virtual bool isActive();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::isAutoRemoveOnFinish	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::isAutoRemoveOnFinish()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::isAutoRemoveOnFinish	particle_nodes/CCParticleSystem.h	/^    virtual bool isAutoRemoveOnFinish();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::isBlendAdditive	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::isBlendAdditive()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::isBlendAdditive	particle_nodes/CCParticleSystem.h	/^    virtual bool isBlendAdditive();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::isFull	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::isFull()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::isFull	particle_nodes/CCParticleSystem.h	/^    bool isFull();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::m_bIsActive	particle_nodes/CCParticleSystem.h	/^    bool m_bIsActive;$/;"	m	class:CCParticleSystem	access:protected
CCParticleSystem::m_bIsAutoRemoveOnFinish	particle_nodes/CCParticleSystem.h	/^    bool m_bIsAutoRemoveOnFinish;$/;"	m	class:CCParticleSystem	access:protected
CCParticleSystem::m_bIsBlendAdditive	particle_nodes/CCParticleSystem.h	/^    bool m_bIsBlendAdditive;$/;"	m	class:CCParticleSystem	access:public
CCParticleSystem::m_bTransformSystemDirty	particle_nodes/CCParticleSystem.h	/^    bool m_bTransformSystemDirty;$/;"	m	class:CCParticleSystem	access:protected
CCParticleSystem::m_fElapsed	particle_nodes/CCParticleSystem.h	/^    float m_fElapsed;$/;"	m	class:CCParticleSystem	access:protected
CCParticleSystem::m_fEmitCounter	particle_nodes/CCParticleSystem.h	/^    float m_fEmitCounter;$/;"	m	class:CCParticleSystem	access:protected
CCParticleSystem::m_pParticles	particle_nodes/CCParticleSystem.h	/^    tCCParticle *m_pParticles;$/;"	m	class:CCParticleSystem	access:protected
CCParticleSystem::m_sPlistFile	particle_nodes/CCParticleSystem.h	/^    std::string m_sPlistFile;$/;"	m	class:CCParticleSystem	access:protected
CCParticleSystem::m_uAllocatedParticles	particle_nodes/CCParticleSystem.h	/^    unsigned int m_uAllocatedParticles;$/;"	m	class:CCParticleSystem	access:protected
CCParticleSystem::m_uParticleIdx	particle_nodes/CCParticleSystem.h	/^    unsigned int m_uParticleIdx;$/;"	m	class:CCParticleSystem	access:protected
CCParticleSystem::modeA	particle_nodes/CCParticleSystem.h	/^    } modeA;$/;"	m	class:CCParticleSystem	typeref:struct:CCParticleSystem::__anon24	access:protected
CCParticleSystem::modeB	particle_nodes/CCParticleSystem.h	/^    } modeB;$/;"	m	class:CCParticleSystem	typeref:struct:CCParticleSystem::__anon25	access:protected
CCParticleSystem::postStep	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::postStep()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::postStep	particle_nodes/CCParticleSystem.h	/^    virtual void postStep();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::resetSystem	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::resetSystem()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::resetSystem	particle_nodes/CCParticleSystem.h	/^    void resetSystem();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::setAngle	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setAngle(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setAngleVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setAngleVar(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setAutoRemoveOnFinish	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setAutoRemoveOnFinish(bool var)$/;"	f	class:CCParticleSystem	signature:(bool var)
CCParticleSystem::setAutoRemoveOnFinish	particle_nodes/CCParticleSystem.h	/^    virtual void setAutoRemoveOnFinish(bool var);$/;"	p	class:CCParticleSystem	access:public	signature:(bool var)
CCParticleSystem::setBatchNode	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setBatchNode(CCParticleBatchNode* batchNode)$/;"	f	class:CCParticleSystem	signature:(CCParticleBatchNode* batchNode)
CCParticleSystem::setBlendAdditive	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setBlendAdditive(bool additive)$/;"	f	class:CCParticleSystem	signature:(bool additive)
CCParticleSystem::setBlendAdditive	particle_nodes/CCParticleSystem.h	/^    virtual void setBlendAdditive(bool value);$/;"	p	class:CCParticleSystem	access:public	signature:(bool value)
CCParticleSystem::setBlendFunc	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCParticleSystem	signature:(ccBlendFunc blendFunc)
CCParticleSystem::setDuration	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setDuration(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setEmissionRate	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEmissionRate(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setEmitterMode	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEmitterMode(int var)$/;"	f	class:CCParticleSystem	signature:(int var)
CCParticleSystem::setEndColor	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndColor(const ccColor4F& var)$/;"	f	class:CCParticleSystem	signature:(const ccColor4F& var)
CCParticleSystem::setEndColorVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndColorVar(const ccColor4F& var)$/;"	f	class:CCParticleSystem	signature:(const ccColor4F& var)
CCParticleSystem::setEndRadius	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndRadius(float endRadius)$/;"	f	class:CCParticleSystem	signature:(float endRadius)
CCParticleSystem::setEndRadius	particle_nodes/CCParticleSystem.h	/^    virtual void setEndRadius(float endRadius);$/;"	p	class:CCParticleSystem	access:public	signature:(float endRadius)
CCParticleSystem::setEndRadiusVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndRadiusVar(float endRadiusVar)$/;"	f	class:CCParticleSystem	signature:(float endRadiusVar)
CCParticleSystem::setEndRadiusVar	particle_nodes/CCParticleSystem.h	/^    virtual void setEndRadiusVar(float endRadiusVar);$/;"	p	class:CCParticleSystem	access:public	signature:(float endRadiusVar)
CCParticleSystem::setEndSize	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndSize(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setEndSizeVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndSizeVar(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setEndSpin	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndSpin(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setEndSpinVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndSpinVar(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setGravity	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setGravity(const CCPoint& g)$/;"	f	class:CCParticleSystem	signature:(const CCPoint& g)
CCParticleSystem::setGravity	particle_nodes/CCParticleSystem.h	/^    virtual void setGravity(const CCPoint& g);$/;"	p	class:CCParticleSystem	access:public	signature:(const CCPoint& g)
CCParticleSystem::setLife	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setLife(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setLifeVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setLifeVar(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setOpacityModifyRGB	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setOpacityModifyRGB(bool bOpacityModifyRGB)$/;"	f	class:CCParticleSystem	signature:(bool bOpacityModifyRGB)
CCParticleSystem::setPosVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setPosVar(const CCPoint& var)$/;"	f	class:CCParticleSystem	signature:(const CCPoint& var)
CCParticleSystem::setPositionType	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setPositionType(tCCPositionType var)$/;"	f	class:CCParticleSystem	signature:(tCCPositionType var)
CCParticleSystem::setRadialAccel	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRadialAccel(float t)$/;"	f	class:CCParticleSystem	signature:(float t)
CCParticleSystem::setRadialAccel	particle_nodes/CCParticleSystem.h	/^    virtual void setRadialAccel(float t);$/;"	p	class:CCParticleSystem	access:public	signature:(float t)
CCParticleSystem::setRadialAccelVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRadialAccelVar(float t)$/;"	f	class:CCParticleSystem	signature:(float t)
CCParticleSystem::setRadialAccelVar	particle_nodes/CCParticleSystem.h	/^    virtual void setRadialAccelVar(float t);$/;"	p	class:CCParticleSystem	access:public	signature:(float t)
CCParticleSystem::setRotatePerSecond	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRotatePerSecond(float degrees)$/;"	f	class:CCParticleSystem	signature:(float degrees)
CCParticleSystem::setRotatePerSecond	particle_nodes/CCParticleSystem.h	/^    virtual void setRotatePerSecond(float degrees);$/;"	p	class:CCParticleSystem	access:public	signature:(float degrees)
CCParticleSystem::setRotatePerSecondVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRotatePerSecondVar(float degrees)$/;"	f	class:CCParticleSystem	signature:(float degrees)
CCParticleSystem::setRotatePerSecondVar	particle_nodes/CCParticleSystem.h	/^    virtual void setRotatePerSecondVar(float degrees);$/;"	p	class:CCParticleSystem	access:public	signature:(float degrees)
CCParticleSystem::setRotation	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRotation(float newRotation)$/;"	f	class:CCParticleSystem	signature:(float newRotation)
CCParticleSystem::setRotation	particle_nodes/CCParticleSystem.h	/^    virtual void setRotation(float newRotation);$/;"	p	class:CCParticleSystem	access:public	signature:(float newRotation)
CCParticleSystem::setRotationIsDir	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRotationIsDir(bool t)$/;"	f	class:CCParticleSystem	signature:(bool t)
CCParticleSystem::setRotationIsDir	particle_nodes/CCParticleSystem.h	/^    virtual void setRotationIsDir(bool t);$/;"	p	class:CCParticleSystem	access:public	signature:(bool t)
CCParticleSystem::setScale	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setScale(float s)$/;"	f	class:CCParticleSystem	signature:(float s)
CCParticleSystem::setScale	particle_nodes/CCParticleSystem.h	/^    virtual void setScale(float s);$/;"	p	class:CCParticleSystem	access:public	signature:(float s)
CCParticleSystem::setScaleX	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setScaleX(float newScaleX)$/;"	f	class:CCParticleSystem	signature:(float newScaleX)
CCParticleSystem::setScaleX	particle_nodes/CCParticleSystem.h	/^    virtual void setScaleX(float newScaleX);$/;"	p	class:CCParticleSystem	access:public	signature:(float newScaleX)
CCParticleSystem::setScaleY	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setScaleY(float newScaleY)$/;"	f	class:CCParticleSystem	signature:(float newScaleY)
CCParticleSystem::setScaleY	particle_nodes/CCParticleSystem.h	/^    virtual void setScaleY(float newScaleY);$/;"	p	class:CCParticleSystem	access:public	signature:(float newScaleY)
CCParticleSystem::setSourcePosition	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setSourcePosition(const CCPoint& var)$/;"	f	class:CCParticleSystem	signature:(const CCPoint& var)
CCParticleSystem::setSpeed	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setSpeed(float speed)$/;"	f	class:CCParticleSystem	signature:(float speed)
CCParticleSystem::setSpeed	particle_nodes/CCParticleSystem.h	/^    virtual void setSpeed(float speed);$/;"	p	class:CCParticleSystem	access:public	signature:(float speed)
CCParticleSystem::setSpeedVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setSpeedVar(float speedVar)$/;"	f	class:CCParticleSystem	signature:(float speedVar)
CCParticleSystem::setSpeedVar	particle_nodes/CCParticleSystem.h	/^    virtual void setSpeedVar(float speed);$/;"	p	class:CCParticleSystem	access:public	signature:(float speed)
CCParticleSystem::setStartColor	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartColor(const ccColor4F& var)$/;"	f	class:CCParticleSystem	signature:(const ccColor4F& var)
CCParticleSystem::setStartColorVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartColorVar(const ccColor4F& var)$/;"	f	class:CCParticleSystem	signature:(const ccColor4F& var)
CCParticleSystem::setStartRadius	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartRadius(float startRadius)$/;"	f	class:CCParticleSystem	signature:(float startRadius)
CCParticleSystem::setStartRadius	particle_nodes/CCParticleSystem.h	/^    virtual void setStartRadius(float startRadius);$/;"	p	class:CCParticleSystem	access:public	signature:(float startRadius)
CCParticleSystem::setStartRadiusVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartRadiusVar(float startRadiusVar)$/;"	f	class:CCParticleSystem	signature:(float startRadiusVar)
CCParticleSystem::setStartRadiusVar	particle_nodes/CCParticleSystem.h	/^    virtual void setStartRadiusVar(float startRadiusVar);$/;"	p	class:CCParticleSystem	access:public	signature:(float startRadiusVar)
CCParticleSystem::setStartSize	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartSize(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setStartSizeVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartSizeVar(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setStartSpin	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartSpin(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setStartSpinVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartSpinVar(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
CCParticleSystem::setTangentialAccel	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setTangentialAccel(float t)$/;"	f	class:CCParticleSystem	signature:(float t)
CCParticleSystem::setTangentialAccel	particle_nodes/CCParticleSystem.h	/^    virtual void setTangentialAccel(float t);$/;"	p	class:CCParticleSystem	access:public	signature:(float t)
CCParticleSystem::setTangentialAccelVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setTangentialAccelVar(float t)$/;"	f	class:CCParticleSystem	signature:(float t)
CCParticleSystem::setTangentialAccelVar	particle_nodes/CCParticleSystem.h	/^    virtual void setTangentialAccelVar(float t);$/;"	p	class:CCParticleSystem	access:public	signature:(float t)
CCParticleSystem::setTexture	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setTexture(CCTexture2D* var)$/;"	f	class:CCParticleSystem	signature:(CCTexture2D* var)
CCParticleSystem::setTotalParticles	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setTotalParticles(unsigned int var)$/;"	f	class:CCParticleSystem	signature:(unsigned int var)
CCParticleSystem::stopSystem	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::stopSystem()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::stopSystem	particle_nodes/CCParticleSystem.h	/^    void stopSystem();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystem::update	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::update(float dt)$/;"	f	class:CCParticleSystem	signature:(float dt)
CCParticleSystem::update	particle_nodes/CCParticleSystem.h	/^    virtual void update(float dt);$/;"	p	class:CCParticleSystem	access:public	signature:(float dt)
CCParticleSystem::updateBlendFunc	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::updateBlendFunc()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::updateBlendFunc	particle_nodes/CCParticleSystem.h	/^    virtual void updateBlendFunc();$/;"	p	class:CCParticleSystem	access:protected	signature:()
CCParticleSystem::updateQuadWithParticle	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::updateQuadWithParticle(tCCParticle* particle, const CCPoint& newPosition)$/;"	f	class:CCParticleSystem	signature:(tCCParticle* particle, const CCPoint& newPosition)
CCParticleSystem::updateQuadWithParticle	particle_nodes/CCParticleSystem.h	/^    virtual void updateQuadWithParticle(tCCParticle* particle, const CCPoint& newPosition);$/;"	p	class:CCParticleSystem	access:public	signature:(tCCParticle* particle, const CCPoint& newPosition)
CCParticleSystem::updateWithNoTime	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::updateWithNoTime(void)$/;"	f	class:CCParticleSystem	signature:(void)
CCParticleSystem::updateWithNoTime	particle_nodes/CCParticleSystem.h	/^    virtual void updateWithNoTime(void);$/;"	p	class:CCParticleSystem	access:public	signature:(void)
CCParticleSystem::~CCParticleSystem	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem::~CCParticleSystem()$/;"	f	class:CCParticleSystem	signature:()
CCParticleSystem::~CCParticleSystem	particle_nodes/CCParticleSystem.h	/^    virtual ~CCParticleSystem();$/;"	p	class:CCParticleSystem	access:public	signature:()
CCParticleSystemQuad	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad::CCParticleSystemQuad()$/;"	f	class:CCParticleSystemQuad	signature:()
CCParticleSystemQuad	particle_nodes/CCParticleSystemQuad.h	/^    CCParticleSystemQuad();$/;"	p	class:CCParticleSystemQuad	access:public	signature:()
CCParticleSystemQuad	particle_nodes/CCParticleSystemQuad.h	/^class CC_DLL CCParticleSystemQuad : public CCParticleSystem$/;"	c	inherits:CCParticleSystem
CCParticleSystemQuad::CCParticleSystemQuad	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad::CCParticleSystemQuad()$/;"	f	class:CCParticleSystemQuad	signature:()
CCParticleSystemQuad::CCParticleSystemQuad	particle_nodes/CCParticleSystemQuad.h	/^    CCParticleSystemQuad();$/;"	p	class:CCParticleSystemQuad	access:public	signature:()
CCParticleSystemQuad::allocMemory	particle_nodes/CCParticleSystemQuad.cpp	/^bool CCParticleSystemQuad::allocMemory()$/;"	f	class:CCParticleSystemQuad	signature:()
CCParticleSystemQuad::allocMemory	particle_nodes/CCParticleSystemQuad.h	/^    bool allocMemory();$/;"	p	class:CCParticleSystemQuad	access:private	signature:()
CCParticleSystemQuad::create	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad * CCParticleSystemQuad::create() {$/;"	f	class:CCParticleSystemQuad	signature:()
CCParticleSystemQuad::create	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad * CCParticleSystemQuad::create(const char *plistFile)$/;"	f	class:CCParticleSystemQuad	signature:(const char *plistFile)
CCParticleSystemQuad::create	particle_nodes/CCParticleSystemQuad.h	/^    static CCParticleSystemQuad * create();$/;"	p	class:CCParticleSystemQuad	access:public	signature:()
CCParticleSystemQuad::create	particle_nodes/CCParticleSystemQuad.h	/^    static CCParticleSystemQuad * create(const char *plistFile);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(const char *plistFile)
CCParticleSystemQuad::createWithTotalParticles	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad * CCParticleSystemQuad::createWithTotalParticles(unsigned int numberOfParticles) {$/;"	f	class:CCParticleSystemQuad	signature:(unsigned int numberOfParticles)
CCParticleSystemQuad::createWithTotalParticles	particle_nodes/CCParticleSystemQuad.h	/^    static CCParticleSystemQuad * createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(unsigned int numberOfParticles)
CCParticleSystemQuad::draw	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::draw()$/;"	f	class:CCParticleSystemQuad	signature:()
CCParticleSystemQuad::draw	particle_nodes/CCParticleSystemQuad.h	/^    virtual void draw();$/;"	p	class:CCParticleSystemQuad	access:public	signature:()
CCParticleSystemQuad::initIndices	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::initIndices()$/;"	f	class:CCParticleSystemQuad	signature:()
CCParticleSystemQuad::initIndices	particle_nodes/CCParticleSystemQuad.h	/^    void initIndices();$/;"	p	class:CCParticleSystemQuad	access:public	signature:()
CCParticleSystemQuad::initTexCoordsWithRect	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::initTexCoordsWithRect(const CCRect& pointRect)$/;"	f	class:CCParticleSystemQuad	signature:(const CCRect& pointRect)
CCParticleSystemQuad::initTexCoordsWithRect	particle_nodes/CCParticleSystemQuad.h	/^    void initTexCoordsWithRect(const CCRect& rect);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(const CCRect& rect)
CCParticleSystemQuad::initWithTotalParticles	particle_nodes/CCParticleSystemQuad.cpp	/^bool CCParticleSystemQuad::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSystemQuad	signature:(unsigned int numberOfParticles)
CCParticleSystemQuad::initWithTotalParticles	particle_nodes/CCParticleSystemQuad.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(unsigned int numberOfParticles)
CCParticleSystemQuad::listenBackToForeground	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::listenBackToForeground(CCObject *obj)$/;"	f	class:CCParticleSystemQuad	signature:(CCObject *obj)
CCParticleSystemQuad::listenBackToForeground	particle_nodes/CCParticleSystemQuad.h	/^    void listenBackToForeground(CCObject *obj);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(CCObject *obj)
CCParticleSystemQuad::m_pBuffersVBO	particle_nodes/CCParticleSystemQuad.h	/^    GLuint                m_pBuffersVBO[2]; \/\/0: vertex  1: indices$/;"	m	class:CCParticleSystemQuad	access:protected
CCParticleSystemQuad::m_pIndices	particle_nodes/CCParticleSystemQuad.h	/^    GLushort            *m_pIndices;    \/\/ indices$/;"	m	class:CCParticleSystemQuad	access:protected
CCParticleSystemQuad::m_pQuads	particle_nodes/CCParticleSystemQuad.h	/^    ccV3F_C4B_T2F_Quad    *m_pQuads;        \/\/ quads to be rendered$/;"	m	class:CCParticleSystemQuad	access:protected
CCParticleSystemQuad::m_uVAOname	particle_nodes/CCParticleSystemQuad.h	/^    GLuint                m_uVAOname;$/;"	m	class:CCParticleSystemQuad	access:protected
CCParticleSystemQuad::postStep	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::postStep()$/;"	f	class:CCParticleSystemQuad	signature:()
CCParticleSystemQuad::postStep	particle_nodes/CCParticleSystemQuad.h	/^    virtual void postStep();$/;"	p	class:CCParticleSystemQuad	access:public	signature:()
CCParticleSystemQuad::setBatchNode	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setBatchNode(CCParticleBatchNode * batchNode)$/;"	f	class:CCParticleSystemQuad	signature:(CCParticleBatchNode * batchNode)
CCParticleSystemQuad::setBatchNode	particle_nodes/CCParticleSystemQuad.h	/^    virtual void setBatchNode(CCParticleBatchNode* batchNode);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(CCParticleBatchNode* batchNode)
CCParticleSystemQuad::setDisplayFrame	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setDisplayFrame(CCSpriteFrame *spriteFrame)$/;"	f	class:CCParticleSystemQuad	signature:(CCSpriteFrame *spriteFrame)
CCParticleSystemQuad::setDisplayFrame	particle_nodes/CCParticleSystemQuad.h	/^    void setDisplayFrame(CCSpriteFrame *spriteFrame);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(CCSpriteFrame *spriteFrame)
CCParticleSystemQuad::setTexture	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setTexture(CCTexture2D* texture)$/;"	f	class:CCParticleSystemQuad	signature:(CCTexture2D* texture)
CCParticleSystemQuad::setTexture	particle_nodes/CCParticleSystemQuad.h	/^    virtual void setTexture(CCTexture2D* texture);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(CCTexture2D* texture)
CCParticleSystemQuad::setTextureWithRect	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setTextureWithRect(CCTexture2D *texture, const CCRect& rect)$/;"	f	class:CCParticleSystemQuad	signature:(CCTexture2D *texture, const CCRect& rect)
CCParticleSystemQuad::setTextureWithRect	particle_nodes/CCParticleSystemQuad.h	/^    void setTextureWithRect(CCTexture2D *texture, const CCRect& rect);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(CCTexture2D *texture, const CCRect& rect)
CCParticleSystemQuad::setTotalParticles	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setTotalParticles(unsigned int tp)$/;"	f	class:CCParticleSystemQuad	signature:(unsigned int tp)
CCParticleSystemQuad::setTotalParticles	particle_nodes/CCParticleSystemQuad.h	/^    virtual void setTotalParticles(unsigned int tp);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(unsigned int tp)
CCParticleSystemQuad::setupVBO	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setupVBO()$/;"	f	class:CCParticleSystemQuad	signature:()
CCParticleSystemQuad::setupVBO	particle_nodes/CCParticleSystemQuad.h	/^    void setupVBO();$/;"	p	class:CCParticleSystemQuad	access:private	signature:()
CCParticleSystemQuad::setupVBOandVAO	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setupVBOandVAO()$/;"	f	class:CCParticleSystemQuad	signature:()
CCParticleSystemQuad::setupVBOandVAO	particle_nodes/CCParticleSystemQuad.h	/^    void setupVBOandVAO();$/;"	p	class:CCParticleSystemQuad	access:private	signature:()
CCParticleSystemQuad::updateQuadWithParticle	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::updateQuadWithParticle(tCCParticle* particle, const CCPoint& newPosition)$/;"	f	class:CCParticleSystemQuad	signature:(tCCParticle* particle, const CCPoint& newPosition)
CCParticleSystemQuad::updateQuadWithParticle	particle_nodes/CCParticleSystemQuad.h	/^    virtual void updateQuadWithParticle(tCCParticle* particle, const CCPoint& newPosition);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(tCCParticle* particle, const CCPoint& newPosition)
CCParticleSystemQuad::~CCParticleSystemQuad	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad::~CCParticleSystemQuad()$/;"	f	class:CCParticleSystemQuad	signature:()
CCParticleSystemQuad::~CCParticleSystemQuad	particle_nodes/CCParticleSystemQuad.h	/^    virtual ~CCParticleSystemQuad();$/;"	p	class:CCParticleSystemQuad	access:public	signature:()
CCPlace	actions/CCActionInstant.h	/^    CCPlace(){}$/;"	f	class:CCPlace	access:public	signature:()
CCPlace	actions/CCActionInstant.h	/^class CC_DLL CCPlace : public CCActionInstant \/\/<NSCopying>$/;"	c	inherits:CCActionInstant
CCPlace::CCPlace	actions/CCActionInstant.h	/^    CCPlace(){}$/;"	f	class:CCPlace	access:public	signature:()
CCPlace::copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCPlace::copyWithZone(CCZone *pZone) {$/;"	f	class:CCPlace	signature:(CCZone *pZone)
CCPlace::copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCPlace	access:public	signature:(CCZone *pZone)
CCPlace::create	actions/CCActionInstant.cpp	/^CCPlace* CCPlace::create(const CCPoint& pos)$/;"	f	class:CCPlace	signature:(const CCPoint& pos)
CCPlace::create	actions/CCActionInstant.h	/^    static CCPlace * create(const CCPoint& pos);$/;"	p	class:CCPlace	access:public	signature:(const CCPoint& pos)
CCPlace::initWithPosition	actions/CCActionInstant.cpp	/^bool CCPlace::initWithPosition(const CCPoint& pos) {$/;"	f	class:CCPlace	signature:(const CCPoint& pos)
CCPlace::initWithPosition	actions/CCActionInstant.h	/^    bool initWithPosition(const CCPoint& pos);$/;"	p	class:CCPlace	access:public	signature:(const CCPoint& pos)
CCPlace::m_tPosition	actions/CCActionInstant.h	/^    CCPoint m_tPosition;$/;"	m	class:CCPlace	access:protected
CCPlace::update	actions/CCActionInstant.cpp	/^void CCPlace::update(float time) {$/;"	f	class:CCPlace	signature:(float time)
CCPlace::update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCPlace	access:public	signature:(float time)
CCPlace::~CCPlace	actions/CCActionInstant.h	/^    virtual ~CCPlace(){}$/;"	f	class:CCPlace	access:public	signature:()
CCPoint	cocoa/CCGeometry.cpp	/^CCPoint::CCPoint(const CCPoint& other)$/;"	f	class:CCPoint	signature:(const CCPoint& other)
CCPoint	cocoa/CCGeometry.cpp	/^CCPoint::CCPoint(float x, float y)$/;"	f	class:CCPoint	signature:(float x, float y)
CCPoint	cocoa/CCGeometry.cpp	/^CCPoint::CCPoint(void)$/;"	f	class:CCPoint	signature:(void)
CCPoint	cocoa/CCGeometry.h	/^    CCPoint();$/;"	p	class:CCPoint	access:public	signature:()
CCPoint	cocoa/CCGeometry.h	/^    CCPoint(const CCPoint& other);$/;"	p	class:CCPoint	access:public	signature:(const CCPoint& other)
CCPoint	cocoa/CCGeometry.h	/^    CCPoint(float x, float y);$/;"	p	class:CCPoint	access:public	signature:(float x, float y)
CCPoint	cocoa/CCGeometry.h	/^class CC_DLL CCPoint$/;"	c
CCPoint::CCPoint	cocoa/CCGeometry.cpp	/^CCPoint::CCPoint(const CCPoint& other)$/;"	f	class:CCPoint	signature:(const CCPoint& other)
CCPoint::CCPoint	cocoa/CCGeometry.cpp	/^CCPoint::CCPoint(float x, float y)$/;"	f	class:CCPoint	signature:(float x, float y)
CCPoint::CCPoint	cocoa/CCGeometry.cpp	/^CCPoint::CCPoint(void)$/;"	f	class:CCPoint	signature:(void)
CCPoint::CCPoint	cocoa/CCGeometry.h	/^    CCPoint();$/;"	p	class:CCPoint	access:public	signature:()
CCPoint::CCPoint	cocoa/CCGeometry.h	/^    CCPoint(const CCPoint& other);$/;"	p	class:CCPoint	access:public	signature:(const CCPoint& other)
CCPoint::CCPoint	cocoa/CCGeometry.h	/^    CCPoint(float x, float y);$/;"	p	class:CCPoint	access:public	signature:(float x, float y)
CCPoint::equals	cocoa/CCGeometry.cpp	/^bool CCPoint::equals(const CCPoint& target) const$/;"	f	class:CCPoint	signature:(const CCPoint& target) const
CCPoint::equals	cocoa/CCGeometry.h	/^    bool equals(const CCPoint& target) const;$/;"	p	class:CCPoint	access:public	signature:(const CCPoint& target) const
CCPoint::operator =	cocoa/CCGeometry.cpp	/^CCPoint& CCPoint::operator= (const CCPoint& other)$/;"	f	class:CCPoint	signature:(const CCPoint& other)
CCPoint::operator =	cocoa/CCGeometry.h	/^    CCPoint& operator= (const CCPoint& other);$/;"	p	class:CCPoint	access:public	signature:(const CCPoint& other)
CCPoint::setPoint	cocoa/CCGeometry.cpp	/^void CCPoint::setPoint(float x, float y)$/;"	f	class:CCPoint	signature:(float x, float y)
CCPoint::setPoint	cocoa/CCGeometry.h	/^    void setPoint(float x, float y);$/;"	p	class:CCPoint	access:public	signature:(float x, float y)
CCPoint::x	cocoa/CCGeometry.h	/^    float x;$/;"	m	class:CCPoint	access:public
CCPoint::y	cocoa/CCGeometry.h	/^    float y;$/;"	m	class:CCPoint	access:public
CCPointApplyAffineTransform	cocoa/CCAffineTransform.h	42;"	d
CCPointArray	actions/CCActionCatmullRom.cpp	/^CCPointArray::CCPointArray() :m_pControlPoints(NULL){}$/;"	f	class:CCPointArray	signature:()
CCPointArray	actions/CCActionCatmullRom.h	/^    CCPointArray();$/;"	p	class:CCPointArray	access:public	signature:()
CCPointArray	actions/CCActionCatmullRom.h	/^class CC_DLL CCPointArray : public CCObject$/;"	c	inherits:CCObject
CCPointArray::CCPointArray	actions/CCActionCatmullRom.cpp	/^CCPointArray::CCPointArray() :m_pControlPoints(NULL){}$/;"	f	class:CCPointArray	signature:()
CCPointArray::CCPointArray	actions/CCActionCatmullRom.h	/^    CCPointArray();$/;"	p	class:CCPointArray	access:public	signature:()
CCPointArray::addControlPoint	actions/CCActionCatmullRom.cpp	/^void CCPointArray::addControlPoint(CCPoint controlPoint)$/;"	f	class:CCPointArray	signature:(CCPoint controlPoint)
CCPointArray::addControlPoint	actions/CCActionCatmullRom.h	/^    void addControlPoint(CCPoint controlPoint);$/;"	p	class:CCPointArray	access:public	signature:(CCPoint controlPoint)
CCPointArray::copyWithZone	actions/CCActionCatmullRom.cpp	/^CCObject* CCPointArray::copyWithZone(cocos2d::CCZone *zone)$/;"	f	class:CCPointArray	signature:(cocos2d::CCZone *zone)
CCPointArray::copyWithZone	actions/CCActionCatmullRom.h	/^    virtual CCObject* copyWithZone(CCZone *zone);$/;"	p	class:CCPointArray	access:public	signature:(CCZone *zone)
CCPointArray::count	actions/CCActionCatmullRom.cpp	/^unsigned int CCPointArray::count()$/;"	f	class:CCPointArray	signature:()
CCPointArray::count	actions/CCActionCatmullRom.h	/^    unsigned int count();$/;"	p	class:CCPointArray	access:public	signature:()
CCPointArray::create	actions/CCActionCatmullRom.cpp	/^CCPointArray* CCPointArray::create(unsigned int capacity)$/;"	f	class:CCPointArray	signature:(unsigned int capacity)
CCPointArray::create	actions/CCActionCatmullRom.h	/^    static CCPointArray* create(unsigned int capacity);$/;"	p	class:CCPointArray	access:public	signature:(unsigned int capacity)
CCPointArray::getControlPointAtIndex	actions/CCActionCatmullRom.cpp	/^CCPoint CCPointArray::getControlPointAtIndex(unsigned int index)$/;"	f	class:CCPointArray	signature:(unsigned int index)
CCPointArray::getControlPointAtIndex	actions/CCActionCatmullRom.h	/^    CCPoint getControlPointAtIndex(unsigned int index);$/;"	p	class:CCPointArray	access:public	signature:(unsigned int index)
CCPointArray::getControlPoints	actions/CCActionCatmullRom.cpp	/^const std::vector<CCPoint*>* CCPointArray::getControlPoints()$/;"	f	class:CCPointArray	signature:()
CCPointArray::getControlPoints	actions/CCActionCatmullRom.h	/^    const std::vector<CCPoint*>* getControlPoints();$/;"	p	class:CCPointArray	access:public	signature:()
CCPointArray::initWithCapacity	actions/CCActionCatmullRom.cpp	/^bool CCPointArray::initWithCapacity(unsigned int capacity)$/;"	f	class:CCPointArray	signature:(unsigned int capacity)
CCPointArray::initWithCapacity	actions/CCActionCatmullRom.h	/^    bool initWithCapacity(unsigned int capacity);$/;"	p	class:CCPointArray	access:public	signature:(unsigned int capacity)
CCPointArray::insertControlPoint	actions/CCActionCatmullRom.cpp	/^void CCPointArray::insertControlPoint(CCPoint &controlPoint, unsigned int index)$/;"	f	class:CCPointArray	signature:(CCPoint &controlPoint, unsigned int index)
CCPointArray::insertControlPoint	actions/CCActionCatmullRom.h	/^    void insertControlPoint(CCPoint &controlPoint, unsigned int index);$/;"	p	class:CCPointArray	access:public	signature:(CCPoint &controlPoint, unsigned int index)
CCPointArray::m_pControlPoints	actions/CCActionCatmullRom.h	/^    std::vector<CCPoint*> *m_pControlPoints;$/;"	m	class:CCPointArray	access:private
CCPointArray::removeControlPointAtIndex	actions/CCActionCatmullRom.cpp	/^void CCPointArray::removeControlPointAtIndex(unsigned int index)$/;"	f	class:CCPointArray	signature:(unsigned int index)
CCPointArray::removeControlPointAtIndex	actions/CCActionCatmullRom.h	/^    void removeControlPointAtIndex(unsigned int index);$/;"	p	class:CCPointArray	access:public	signature:(unsigned int index)
CCPointArray::replaceControlPoint	actions/CCActionCatmullRom.cpp	/^void CCPointArray::replaceControlPoint(cocos2d::CCPoint &controlPoint, unsigned int index)$/;"	f	class:CCPointArray	signature:(cocos2d::CCPoint &controlPoint, unsigned int index)
CCPointArray::replaceControlPoint	actions/CCActionCatmullRom.h	/^    void replaceControlPoint(CCPoint &controlPoint, unsigned int index);$/;"	p	class:CCPointArray	access:public	signature:(CCPoint &controlPoint, unsigned int index)
CCPointArray::reverse	actions/CCActionCatmullRom.cpp	/^CCPointArray* CCPointArray::reverse()$/;"	f	class:CCPointArray	signature:()
CCPointArray::reverse	actions/CCActionCatmullRom.h	/^    CCPointArray* reverse();$/;"	p	class:CCPointArray	access:public	signature:()
CCPointArray::reverseInline	actions/CCActionCatmullRom.cpp	/^void CCPointArray::reverseInline()$/;"	f	class:CCPointArray	signature:()
CCPointArray::reverseInline	actions/CCActionCatmullRom.h	/^    void reverseInline();$/;"	p	class:CCPointArray	access:public	signature:()
CCPointArray::setControlPoints	actions/CCActionCatmullRom.cpp	/^void CCPointArray::setControlPoints(vector<CCPoint*> *controlPoints)$/;"	f	class:CCPointArray	signature:(vector<CCPoint*> *controlPoints)
CCPointArray::setControlPoints	actions/CCActionCatmullRom.h	/^    void setControlPoints(std::vector<CCPoint*> *controlPoints);$/;"	p	class:CCPointArray	access:public	signature:(std::vector<CCPoint*> *controlPoints)
CCPointArray::~CCPointArray	actions/CCActionCatmullRom.cpp	/^CCPointArray::~CCPointArray()$/;"	f	class:CCPointArray	signature:()
CCPointArray::~CCPointArray	actions/CCActionCatmullRom.h	/^    virtual ~CCPointArray();$/;"	p	class:CCPointArray	access:public	signature:()
CCPointFromString	cocoa/CCNS.cpp	/^CCPoint CCPointFromString(const char* pszContent)$/;"	f	signature:(const char* pszContent)
CCPointFromString	cocoa/CCNS.h	/^CCPoint CC_DLL CCPointFromString(const char* pszContent);$/;"	p	signature:(const char* pszContent)
CCPointMake	cocoa/CCGeometry.h	92;"	d
CCPointObject	tilemap_parallax_nodes/CCParallaxNode.cpp	/^class CCPointObject : CCObject$/;"	c	file:	inherits:CCObject
CCPointObject::initWithCCPoint	tilemap_parallax_nodes/CCParallaxNode.cpp	/^    bool initWithCCPoint(CCPoint ratio, CCPoint offset)$/;"	f	class:CCPointObject	file:	access:private	signature:(CCPoint ratio, CCPoint offset)
CCPointObject::pointWithCCPoint	tilemap_parallax_nodes/CCParallaxNode.cpp	/^    static CCPointObject * pointWithCCPoint(CCPoint ratio, CCPoint offset)$/;"	f	class:CCPointObject	file:	access:private	signature:(CCPoint ratio, CCPoint offset)
CCPointZero	cocoa/CCGeometry.h	/^const CCPoint CCPointZero = CCPointMake(0,0);$/;"	v
CCPoolManager	cocoa/CCAutoreleasePool.cpp	/^CCPoolManager::CCPoolManager()$/;"	f	class:CCPoolManager	signature:()
CCPoolManager	cocoa/CCAutoreleasePool.h	/^    CCPoolManager();$/;"	p	class:CCPoolManager	access:public	signature:()
CCPoolManager	cocoa/CCAutoreleasePool.h	/^class CC_DLL CCPoolManager$/;"	c
CCPoolManager::CCPoolManager	cocoa/CCAutoreleasePool.cpp	/^CCPoolManager::CCPoolManager()$/;"	f	class:CCPoolManager	signature:()
CCPoolManager::CCPoolManager	cocoa/CCAutoreleasePool.h	/^    CCPoolManager();$/;"	p	class:CCPoolManager	access:public	signature:()
CCPoolManager::addObject	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::addObject(CCObject* pObject)$/;"	f	class:CCPoolManager	signature:(CCObject* pObject)
CCPoolManager::addObject	cocoa/CCAutoreleasePool.h	/^    void addObject(CCObject* pObject);$/;"	p	class:CCPoolManager	access:public	signature:(CCObject* pObject)
CCPoolManager::finalize	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::finalize()$/;"	f	class:CCPoolManager	signature:()
CCPoolManager::finalize	cocoa/CCAutoreleasePool.h	/^    void finalize();$/;"	p	class:CCPoolManager	access:public	signature:()
CCPoolManager::getCurReleasePool	cocoa/CCAutoreleasePool.cpp	/^CCAutoreleasePool* CCPoolManager::getCurReleasePool()$/;"	f	class:CCPoolManager	signature:()
CCPoolManager::getCurReleasePool	cocoa/CCAutoreleasePool.h	/^    CCAutoreleasePool* getCurReleasePool();$/;"	p	class:CCPoolManager	access:private	signature:()
CCPoolManager::m_pCurReleasePool	cocoa/CCAutoreleasePool.h	/^    CCAutoreleasePool*                    m_pCurReleasePool;$/;"	m	class:CCPoolManager	access:private
CCPoolManager::m_pReleasePoolStack	cocoa/CCAutoreleasePool.h	/^    CCArray*    m_pReleasePoolStack;    $/;"	m	class:CCPoolManager	access:private
CCPoolManager::pop	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::pop()$/;"	f	class:CCPoolManager	signature:()
CCPoolManager::pop	cocoa/CCAutoreleasePool.h	/^    void pop();$/;"	p	class:CCPoolManager	access:public	signature:()
CCPoolManager::purgePoolManager	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::purgePoolManager()$/;"	f	class:CCPoolManager	signature:()
CCPoolManager::purgePoolManager	cocoa/CCAutoreleasePool.h	/^    static void purgePoolManager();$/;"	p	class:CCPoolManager	access:public	signature:()
CCPoolManager::push	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::push()$/;"	f	class:CCPoolManager	signature:()
CCPoolManager::push	cocoa/CCAutoreleasePool.h	/^    void push();$/;"	p	class:CCPoolManager	access:public	signature:()
CCPoolManager::removeObject	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::removeObject(CCObject* pObject)$/;"	f	class:CCPoolManager	signature:(CCObject* pObject)
CCPoolManager::removeObject	cocoa/CCAutoreleasePool.h	/^    void removeObject(CCObject* pObject);$/;"	p	class:CCPoolManager	access:public	signature:(CCObject* pObject)
CCPoolManager::sharedPoolManager	cocoa/CCAutoreleasePool.cpp	/^CCPoolManager* CCPoolManager::sharedPoolManager()$/;"	f	class:CCPoolManager	signature:()
CCPoolManager::sharedPoolManager	cocoa/CCAutoreleasePool.h	/^    static CCPoolManager* sharedPoolManager();$/;"	p	class:CCPoolManager	access:public	signature:()
CCPoolManager::~CCPoolManager	cocoa/CCAutoreleasePool.cpp	/^CCPoolManager::~CCPoolManager()$/;"	f	class:CCPoolManager	signature:()
CCPoolManager::~CCPoolManager	cocoa/CCAutoreleasePool.h	/^    ~CCPoolManager();$/;"	p	class:CCPoolManager	access:public	signature:()
CCProfiler	support/CCProfiling.h	/^class CC_DLL CCProfiler : public CCObject$/;"	c	inherits:CCObject
CCProfiler::createAndAddTimerWithName	support/CCProfiling.cpp	/^CCProfilingTimer* CCProfiler::createAndAddTimerWithName(const char* timerName)$/;"	f	class:CCProfiler	signature:(const char* timerName)
CCProfiler::createAndAddTimerWithName	support/CCProfiling.h	/^    CCProfilingTimer* createAndAddTimerWithName(const char* timerName);$/;"	p	class:CCProfiler	access:public	signature:(const char* timerName)
CCProfiler::displayTimers	support/CCProfiling.cpp	/^void CCProfiler::displayTimers()$/;"	f	class:CCProfiler	signature:()
CCProfiler::displayTimers	support/CCProfiling.h	/^    void displayTimers(void);$/;"	p	class:CCProfiler	access:public	signature:(void)
CCProfiler::init	support/CCProfiling.cpp	/^bool CCProfiler::init()$/;"	f	class:CCProfiler	signature:()
CCProfiler::init	support/CCProfiling.h	/^    bool init(void);$/;"	p	class:CCProfiler	access:public	signature:(void)
CCProfiler::m_pActiveTimers	support/CCProfiling.h	/^    CCDictionary* m_pActiveTimers;$/;"	m	class:CCProfiler	access:public
CCProfiler::releaseAllTimers	support/CCProfiling.cpp	/^void CCProfiler::releaseAllTimers()$/;"	f	class:CCProfiler	signature:()
CCProfiler::releaseAllTimers	support/CCProfiling.h	/^    void releaseAllTimers();$/;"	p	class:CCProfiler	access:public	signature:()
CCProfiler::releaseTimer	support/CCProfiling.cpp	/^void CCProfiler::releaseTimer(const char* timerName)$/;"	f	class:CCProfiler	signature:(const char* timerName)
CCProfiler::releaseTimer	support/CCProfiling.h	/^    void releaseTimer(const char* timerName);$/;"	p	class:CCProfiler	access:public	signature:(const char* timerName)
CCProfiler::sharedProfiler	support/CCProfiling.cpp	/^CCProfiler* CCProfiler::sharedProfiler(void)$/;"	f	class:CCProfiler	signature:(void)
CCProfiler::sharedProfiler	support/CCProfiling.h	/^    static CCProfiler* sharedProfiler(void);$/;"	p	class:CCProfiler	access:public	signature:(void)
CCProfiler::~CCProfiler	support/CCProfiling.cpp	/^CCProfiler::~CCProfiler(void)$/;"	f	class:CCProfiler	signature:(void)
CCProfiler::~CCProfiler	support/CCProfiling.h	/^    ~CCProfiler(void);$/;"	p	class:CCProfiler	access:public	signature:(void)
CCProfilingBeginTimingBlock	support/CCProfiling.cpp	/^void CCProfilingBeginTimingBlock(const char *timerName)$/;"	f	signature:(const char *timerName)
CCProfilingBeginTimingBlock	support/CCProfiling.h	/^extern void CCProfilingBeginTimingBlock(const char *timerName);$/;"	p	signature:(const char *timerName)
CCProfilingEndTimingBlock	support/CCProfiling.cpp	/^void CCProfilingEndTimingBlock(const char *timerName)$/;"	f	signature:(const char *timerName)
CCProfilingEndTimingBlock	support/CCProfiling.h	/^extern void CCProfilingEndTimingBlock(const char *timerName);$/;"	p	signature:(const char *timerName)
CCProfilingResetTimingBlock	support/CCProfiling.cpp	/^void CCProfilingResetTimingBlock(const char *timerName)$/;"	f	signature:(const char *timerName)
CCProfilingResetTimingBlock	support/CCProfiling.h	/^extern void CCProfilingResetTimingBlock(const char *timerName);$/;"	p	signature:(const char *timerName)
CCProfilingTimer	support/CCProfiling.h	/^class CCProfilingTimer : public CCObject$/;"	c	inherits:CCObject
CCProfilingTimer::description	support/CCProfiling.cpp	/^const char* CCProfilingTimer::description()$/;"	f	class:CCProfilingTimer	signature:()
CCProfilingTimer::description	support/CCProfiling.h	/^    const char* description(void);$/;"	p	class:CCProfilingTimer	access:public	signature:(void)
CCProfilingTimer::getAverageTime	support/CCProfiling.h	/^    inline double getAverageTime(void) { return m_dAverageTime; }$/;"	f	class:CCProfilingTimer	access:public	signature:(void)
CCProfilingTimer::getStartTime	support/CCProfiling.h	/^    inline struct cc_timeval * getStartTime(void) { return &m_sStartTime; };$/;"	f	class:CCProfilingTimer	access:public	signature:(void)
CCProfilingTimer::initWithName	support/CCProfiling.cpp	/^bool CCProfilingTimer::initWithName(const char* timerName)$/;"	f	class:CCProfilingTimer	signature:(const char* timerName)
CCProfilingTimer::initWithName	support/CCProfiling.h	/^    bool initWithName(const char* timerName);$/;"	p	class:CCProfilingTimer	access:public	signature:(const char* timerName)
CCProfilingTimer::m_NameStr	support/CCProfiling.h	/^    std::string m_NameStr;$/;"	m	class:CCProfilingTimer	access:public
CCProfilingTimer::m_dAverageTime	support/CCProfiling.h	/^    double m_dAverageTime;$/;"	m	class:CCProfilingTimer	access:public
CCProfilingTimer::m_sStartTime	support/CCProfiling.h	/^    struct cc_timeval m_sStartTime;$/;"	m	class:CCProfilingTimer	typeref:struct:CCProfilingTimer::cc_timeval	access:public
CCProfilingTimer::maxTime	support/CCProfiling.h	/^    double            maxTime;$/;"	m	class:CCProfilingTimer	access:public
CCProfilingTimer::minTime	support/CCProfiling.h	/^    double            minTime;$/;"	m	class:CCProfilingTimer	access:public
CCProfilingTimer::numberOfCalls	support/CCProfiling.h	/^    unsigned int    numberOfCalls;$/;"	m	class:CCProfilingTimer	access:public
CCProfilingTimer::reset	support/CCProfiling.cpp	/^void CCProfilingTimer::reset()$/;"	f	class:CCProfilingTimer	signature:()
CCProfilingTimer::reset	support/CCProfiling.h	/^    void reset();$/;"	p	class:CCProfilingTimer	access:public	signature:()
CCProfilingTimer::setAverageTime	support/CCProfiling.h	/^    inline void setAverageTime(double value) { m_dAverageTime = value; }$/;"	f	class:CCProfilingTimer	access:public	signature:(double value)
CCProfilingTimer::totalTime	support/CCProfiling.h	/^    double            totalTime;$/;"	m	class:CCProfilingTimer	access:public
CCProfilingTimer::~CCProfilingTimer	support/CCProfiling.cpp	/^CCProfilingTimer::~CCProfilingTimer(void)$/;"	f	class:CCProfilingTimer	signature:(void)
CCProfilingTimer::~CCProfilingTimer	support/CCProfiling.h	/^    ~CCProfilingTimer(void);$/;"	p	class:CCProfilingTimer	access:public	signature:(void)
CCProgressFromTo	actions/CCActionProgressTimer.h	/^class CC_DLL CCProgressFromTo : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCProgressFromTo::copyWithZone	actions/CCActionProgressTimer.cpp	/^CCObject* CCProgressFromTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCProgressFromTo	signature:(CCZone *pZone)
CCProgressFromTo::copyWithZone	actions/CCActionProgressTimer.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCProgressFromTo	access:public	signature:(CCZone *pZone)
CCProgressFromTo::create	actions/CCActionProgressTimer.cpp	/^CCProgressFromTo* CCProgressFromTo::create(float duration, float fFromPercentage, float fToPercentage)$/;"	f	class:CCProgressFromTo	signature:(float duration, float fFromPercentage, float fToPercentage)
CCProgressFromTo::create	actions/CCActionProgressTimer.h	/^    static CCProgressFromTo* create(float duration, float fFromPercentage, float fToPercentage);$/;"	p	class:CCProgressFromTo	access:public	signature:(float duration, float fFromPercentage, float fToPercentage)
CCProgressFromTo::initWithDuration	actions/CCActionProgressTimer.cpp	/^bool CCProgressFromTo::initWithDuration(float duration, float fFromPercentage, float fToPercentage)$/;"	f	class:CCProgressFromTo	signature:(float duration, float fFromPercentage, float fToPercentage)
CCProgressFromTo::initWithDuration	actions/CCActionProgressTimer.h	/^    bool initWithDuration(float duration, float fFromPercentage, float fToPercentage);$/;"	p	class:CCProgressFromTo	access:public	signature:(float duration, float fFromPercentage, float fToPercentage)
CCProgressFromTo::m_fFrom	actions/CCActionProgressTimer.h	/^    float m_fFrom;$/;"	m	class:CCProgressFromTo	access:protected
CCProgressFromTo::m_fTo	actions/CCActionProgressTimer.h	/^    float m_fTo;$/;"	m	class:CCProgressFromTo	access:protected
CCProgressFromTo::reverse	actions/CCActionProgressTimer.cpp	/^CCActionInterval* CCProgressFromTo::reverse(void)$/;"	f	class:CCProgressFromTo	signature:(void)
CCProgressFromTo::reverse	actions/CCActionProgressTimer.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCProgressFromTo	access:public	signature:(void)
CCProgressFromTo::startWithTarget	actions/CCActionProgressTimer.cpp	/^void CCProgressFromTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCProgressFromTo	signature:(CCNode *pTarget)
CCProgressFromTo::startWithTarget	actions/CCActionProgressTimer.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCProgressFromTo	access:public	signature:(CCNode *pTarget)
CCProgressFromTo::update	actions/CCActionProgressTimer.cpp	/^void CCProgressFromTo::update(float time)$/;"	f	class:CCProgressFromTo	signature:(float time)
CCProgressFromTo::update	actions/CCActionProgressTimer.h	/^    virtual void update(float time);$/;"	p	class:CCProgressFromTo	access:public	signature:(float time)
CCProgressTimer	misc_nodes/CCProgressTimer.cpp	/^CCProgressTimer::CCProgressTimer()$/;"	f	class:CCProgressTimer	signature:()
CCProgressTimer	misc_nodes/CCProgressTimer.h	/^    CCProgressTimer();$/;"	p	class:CCProgressTimer	access:public	signature:()
CCProgressTimer	misc_nodes/CCProgressTimer.h	/^class CC_DLL CCProgressTimer : public CCNodeRGBA$/;"	c	inherits:CCNodeRGBA
CCProgressTimer::CCProgressTimer	misc_nodes/CCProgressTimer.cpp	/^CCProgressTimer::CCProgressTimer()$/;"	f	class:CCProgressTimer	signature:()
CCProgressTimer::CCProgressTimer	misc_nodes/CCProgressTimer.h	/^    CCProgressTimer();$/;"	p	class:CCProgressTimer	access:public	signature:()
CCProgressTimer::CC_PROPERTY	misc_nodes/CCProgressTimer.h	/^    CC_PROPERTY(CCPoint, m_tMidpoint, Midpoint);$/;"	p	class:CCProgressTimer	access:protected	signature:(CCPoint, m_tMidpoint, Midpoint)
CCProgressTimer::CC_SYNTHESIZE	misc_nodes/CCProgressTimer.h	/^    CC_SYNTHESIZE(CCPoint, m_tBarChangeRate, BarChangeRate);$/;"	p	class:CCProgressTimer	access:protected	signature:(CCPoint, m_tBarChangeRate, BarChangeRate)
CCProgressTimer::boundaryTexCoord	misc_nodes/CCProgressTimer.cpp	/^CCPoint CCProgressTimer::boundaryTexCoord(char index)$/;"	f	class:CCProgressTimer	signature:(char index)
CCProgressTimer::boundaryTexCoord	misc_nodes/CCProgressTimer.h	/^    CCPoint boundaryTexCoord(char index);$/;"	p	class:CCProgressTimer	access:protected	signature:(char index)
CCProgressTimer::create	misc_nodes/CCProgressTimer.cpp	/^CCProgressTimer* CCProgressTimer::create(CCSprite* sp)$/;"	f	class:CCProgressTimer	signature:(CCSprite* sp)
CCProgressTimer::create	misc_nodes/CCProgressTimer.h	/^    static CCProgressTimer* create(CCSprite* sp);$/;"	p	class:CCProgressTimer	access:public	signature:(CCSprite* sp)
CCProgressTimer::draw	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::draw(void)$/;"	f	class:CCProgressTimer	signature:(void)
CCProgressTimer::draw	misc_nodes/CCProgressTimer.h	/^    virtual void draw(void);$/;"	p	class:CCProgressTimer	access:public	signature:(void)
CCProgressTimer::getMidpoint	misc_nodes/CCProgressTimer.cpp	/^CCPoint CCProgressTimer::getMidpoint(void)$/;"	f	class:CCProgressTimer	signature:(void)
CCProgressTimer::getPercentage	misc_nodes/CCProgressTimer.h	/^    inline float getPercentage(void) {return m_fPercentage; }$/;"	f	class:CCProgressTimer	access:public	signature:(void)
CCProgressTimer::getSprite	misc_nodes/CCProgressTimer.h	/^    inline CCSprite* getSprite(void) { return m_pSprite; }$/;"	f	class:CCProgressTimer	access:public	signature:(void)
CCProgressTimer::getType	misc_nodes/CCProgressTimer.h	/^    inline CCProgressTimerType getType(void) { return m_eType; }$/;"	f	class:CCProgressTimer	access:public	signature:(void)
CCProgressTimer::initWithSprite	misc_nodes/CCProgressTimer.cpp	/^bool CCProgressTimer::initWithSprite(CCSprite* sp)$/;"	f	class:CCProgressTimer	signature:(CCSprite* sp)
CCProgressTimer::initWithSprite	misc_nodes/CCProgressTimer.h	/^    bool initWithSprite(CCSprite* sp);$/;"	p	class:CCProgressTimer	access:public	signature:(CCSprite* sp)
CCProgressTimer::isOpacityModifyRGB	misc_nodes/CCProgressTimer.cpp	/^bool CCProgressTimer::isOpacityModifyRGB(void)$/;"	f	class:CCProgressTimer	signature:(void)
CCProgressTimer::isOpacityModifyRGB	misc_nodes/CCProgressTimer.h	/^    virtual bool isOpacityModifyRGB(void);$/;"	p	class:CCProgressTimer	access:public	signature:(void)
CCProgressTimer::isReverseDirection	misc_nodes/CCProgressTimer.h	/^    inline bool isReverseDirection() { return m_bReverseDirection; };$/;"	f	class:CCProgressTimer	access:public	signature:()
CCProgressTimer::m_bReverseDirection	misc_nodes/CCProgressTimer.h	/^    bool m_bReverseDirection;$/;"	m	class:CCProgressTimer	access:protected
CCProgressTimer::m_eType	misc_nodes/CCProgressTimer.h	/^    CCProgressTimerType m_eType;$/;"	m	class:CCProgressTimer	access:protected
CCProgressTimer::m_fPercentage	misc_nodes/CCProgressTimer.h	/^    float m_fPercentage;$/;"	m	class:CCProgressTimer	access:protected
CCProgressTimer::m_nVertexDataCount	misc_nodes/CCProgressTimer.h	/^    int m_nVertexDataCount;$/;"	m	class:CCProgressTimer	access:protected
CCProgressTimer::m_pSprite	misc_nodes/CCProgressTimer.h	/^    CCSprite *m_pSprite;$/;"	m	class:CCProgressTimer	access:protected
CCProgressTimer::m_pVertexData	misc_nodes/CCProgressTimer.h	/^    ccV2F_C4B_T2F *m_pVertexData;$/;"	m	class:CCProgressTimer	access:protected
CCProgressTimer::setAnchorPoint	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setAnchorPoint(CCPoint anchorPoint)$/;"	f	class:CCProgressTimer	signature:(CCPoint anchorPoint)
CCProgressTimer::setAnchorPoint	misc_nodes/CCProgressTimer.h	/^    void setAnchorPoint(CCPoint anchorPoint);$/;"	p	class:CCProgressTimer	access:public	signature:(CCPoint anchorPoint)
CCProgressTimer::setMidpoint	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setMidpoint(CCPoint midPoint)$/;"	f	class:CCProgressTimer	signature:(CCPoint midPoint)
CCProgressTimer::setOpacityModifyRGB	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setOpacityModifyRGB(bool bValue)$/;"	f	class:CCProgressTimer	signature:(bool bValue)
CCProgressTimer::setOpacityModifyRGB	misc_nodes/CCProgressTimer.h	/^    virtual void setOpacityModifyRGB(bool bValue);$/;"	p	class:CCProgressTimer	access:public	signature:(bool bValue)
CCProgressTimer::setPercentage	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setPercentage(float fPercentage)$/;"	f	class:CCProgressTimer	signature:(float fPercentage)
CCProgressTimer::setPercentage	misc_nodes/CCProgressTimer.h	/^    void setPercentage(float fPercentage);$/;"	p	class:CCProgressTimer	access:public	signature:(float fPercentage)
CCProgressTimer::setReverseDirection	misc_nodes/CCProgressTimer.h	/^    inline void setReverseDirection(bool value) { m_bReverseDirection = value; };$/;"	f	class:CCProgressTimer	access:public	signature:(bool value)
CCProgressTimer::setReverseProgress	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setReverseProgress(bool reverse)$/;"	f	class:CCProgressTimer	signature:(bool reverse)
CCProgressTimer::setReverseProgress	misc_nodes/CCProgressTimer.h	/^    void setReverseProgress(bool reverse);$/;"	p	class:CCProgressTimer	access:public	signature:(bool reverse)
CCProgressTimer::setSprite	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setSprite(CCSprite *pSprite)$/;"	f	class:CCProgressTimer	signature:(CCSprite *pSprite)
CCProgressTimer::setSprite	misc_nodes/CCProgressTimer.h	/^    void setSprite(CCSprite *pSprite);$/;"	p	class:CCProgressTimer	access:public	signature:(CCSprite *pSprite)
CCProgressTimer::setType	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setType(CCProgressTimerType type)$/;"	f	class:CCProgressTimer	signature:(CCProgressTimerType type)
CCProgressTimer::setType	misc_nodes/CCProgressTimer.h	/^    void setType(CCProgressTimerType type);$/;"	p	class:CCProgressTimer	access:public	signature:(CCProgressTimerType type)
CCProgressTimer::textureCoordFromAlphaPoint	misc_nodes/CCProgressTimer.cpp	/^ccTex2F CCProgressTimer::textureCoordFromAlphaPoint(CCPoint alpha)$/;"	f	class:CCProgressTimer	signature:(CCPoint alpha)
CCProgressTimer::textureCoordFromAlphaPoint	misc_nodes/CCProgressTimer.h	/^    ccTex2F textureCoordFromAlphaPoint(CCPoint alpha);$/;"	p	class:CCProgressTimer	access:protected	signature:(CCPoint alpha)
CCProgressTimer::updateBar	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::updateBar(void)$/;"	f	class:CCProgressTimer	signature:(void)
CCProgressTimer::updateBar	misc_nodes/CCProgressTimer.h	/^    void updateBar(void);$/;"	p	class:CCProgressTimer	access:protected	signature:(void)
CCProgressTimer::updateColor	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::updateColor(void)$/;"	f	class:CCProgressTimer	signature:(void)
CCProgressTimer::updateColor	misc_nodes/CCProgressTimer.h	/^    void updateColor(void);$/;"	p	class:CCProgressTimer	access:protected	signature:(void)
CCProgressTimer::updateProgress	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::updateProgress(void)$/;"	f	class:CCProgressTimer	signature:(void)
CCProgressTimer::updateProgress	misc_nodes/CCProgressTimer.h	/^    void updateProgress(void);$/;"	p	class:CCProgressTimer	access:protected	signature:(void)
CCProgressTimer::updateRadial	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::updateRadial(void)$/;"	f	class:CCProgressTimer	signature:(void)
CCProgressTimer::updateRadial	misc_nodes/CCProgressTimer.h	/^    void updateRadial(void);$/;"	p	class:CCProgressTimer	access:protected	signature:(void)
CCProgressTimer::vertexFromAlphaPoint	misc_nodes/CCProgressTimer.cpp	/^ccVertex2F CCProgressTimer::vertexFromAlphaPoint(CCPoint alpha)$/;"	f	class:CCProgressTimer	signature:(CCPoint alpha)
CCProgressTimer::vertexFromAlphaPoint	misc_nodes/CCProgressTimer.h	/^    ccVertex2F vertexFromAlphaPoint(CCPoint alpha);$/;"	p	class:CCProgressTimer	access:protected	signature:(CCPoint alpha)
CCProgressTimer::~CCProgressTimer	misc_nodes/CCProgressTimer.cpp	/^CCProgressTimer::~CCProgressTimer(void)$/;"	f	class:CCProgressTimer	signature:(void)
CCProgressTimer::~CCProgressTimer	misc_nodes/CCProgressTimer.h	/^    ~CCProgressTimer(void);$/;"	p	class:CCProgressTimer	access:public	signature:(void)
CCProgressTimerType	misc_nodes/CCProgressTimer.h	/^} CCProgressTimerType;$/;"	t	typeref:enum:__anon17
CCProgressTo	actions/CCActionProgressTimer.h	/^class CC_DLL CCProgressTo : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCProgressTo::copyWithZone	actions/CCActionProgressTimer.cpp	/^CCObject* CCProgressTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCProgressTo	signature:(CCZone *pZone)
CCProgressTo::copyWithZone	actions/CCActionProgressTimer.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCProgressTo	access:public	signature:(CCZone *pZone)
CCProgressTo::create	actions/CCActionProgressTimer.cpp	/^CCProgressTo* CCProgressTo::create(float duration, float fPercent)$/;"	f	class:CCProgressTo	signature:(float duration, float fPercent)
CCProgressTo::create	actions/CCActionProgressTimer.h	/^    static CCProgressTo* create(float duration, float fPercent);$/;"	p	class:CCProgressTo	access:public	signature:(float duration, float fPercent)
CCProgressTo::initWithDuration	actions/CCActionProgressTimer.cpp	/^bool CCProgressTo::initWithDuration(float duration, float fPercent)$/;"	f	class:CCProgressTo	signature:(float duration, float fPercent)
CCProgressTo::initWithDuration	actions/CCActionProgressTimer.h	/^    bool initWithDuration(float duration, float fPercent);$/;"	p	class:CCProgressTo	access:public	signature:(float duration, float fPercent)
CCProgressTo::m_fFrom	actions/CCActionProgressTimer.h	/^    float m_fFrom;$/;"	m	class:CCProgressTo	access:protected
CCProgressTo::m_fTo	actions/CCActionProgressTimer.h	/^    float m_fTo;$/;"	m	class:CCProgressTo	access:protected
CCProgressTo::startWithTarget	actions/CCActionProgressTimer.cpp	/^void CCProgressTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCProgressTo	signature:(CCNode *pTarget)
CCProgressTo::startWithTarget	actions/CCActionProgressTimer.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCProgressTo	access:public	signature:(CCNode *pTarget)
CCProgressTo::update	actions/CCActionProgressTimer.cpp	/^void CCProgressTo::update(float time)$/;"	f	class:CCProgressTo	signature:(float time)
CCProgressTo::update	actions/CCActionProgressTimer.h	/^    virtual void update(float time);$/;"	p	class:CCProgressTo	access:public	signature:(float time)
CCRANDOM_0_1	include/ccMacros.h	69;"	d
CCRANDOM_MINUS1_1	include/ccMacros.h	64;"	d
CCRGBAProtocol	include/CCProtocols.h	/^class CC_DLL CCRGBAProtocol$/;"	c
CCRGBAProtocol::getColor	include/CCProtocols.h	/^    virtual const ccColor3B& getColor(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
CCRGBAProtocol::getDisplayedColor	include/CCProtocols.h	/^    virtual const ccColor3B& getDisplayedColor(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
CCRGBAProtocol::getDisplayedOpacity	include/CCProtocols.h	/^    virtual GLubyte getDisplayedOpacity(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
CCRGBAProtocol::getOpacity	include/CCProtocols.h	/^    virtual GLubyte getOpacity(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
CCRGBAProtocol::isCascadeColorEnabled	include/CCProtocols.h	/^    virtual bool isCascadeColorEnabled(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
CCRGBAProtocol::isCascadeOpacityEnabled	include/CCProtocols.h	/^    virtual bool isCascadeOpacityEnabled(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
CCRGBAProtocol::isOpacityModifyRGB	include/CCProtocols.h	/^    virtual bool isOpacityModifyRGB(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
CCRGBAProtocol::setCascadeColorEnabled	include/CCProtocols.h	/^    virtual void setCascadeColorEnabled(bool cascadeColorEnabled) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(bool cascadeColorEnabled)
CCRGBAProtocol::setCascadeOpacityEnabled	include/CCProtocols.h	/^    virtual void setCascadeOpacityEnabled(bool cascadeOpacityEnabled) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(bool cascadeOpacityEnabled)
CCRGBAProtocol::setColor	include/CCProtocols.h	/^    virtual void setColor(const ccColor3B& color) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(const ccColor3B& color)
CCRGBAProtocol::setOpacity	include/CCProtocols.h	/^    virtual void setOpacity(GLubyte opacity) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(GLubyte opacity)
CCRGBAProtocol::setOpacityModifyRGB	include/CCProtocols.h	/^    virtual void setOpacityModifyRGB(bool bValue) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(bool bValue)
CCRGBAProtocol::updateDisplayedColor	include/CCProtocols.h	/^    virtual void updateDisplayedColor(const ccColor3B& color) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(const ccColor3B& color)
CCRGBAProtocol::updateDisplayedOpacity	include/CCProtocols.h	/^    virtual void updateDisplayedOpacity(GLubyte opacity) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(GLubyte opacity)
CCRect	cocoa/CCGeometry.cpp	/^CCRect::CCRect(const CCRect& other)$/;"	f	class:CCRect	signature:(const CCRect& other)
CCRect	cocoa/CCGeometry.cpp	/^CCRect::CCRect(float x, float y, float width, float height)$/;"	f	class:CCRect	signature:(float x, float y, float width, float height)
CCRect	cocoa/CCGeometry.cpp	/^CCRect::CCRect(void)$/;"	f	class:CCRect	signature:(void)
CCRect	cocoa/CCGeometry.h	/^    CCRect();    $/;"	p	class:CCRect	access:public	signature:()
CCRect	cocoa/CCGeometry.h	/^    CCRect(const CCRect& other);$/;"	p	class:CCRect	access:public	signature:(const CCRect& other)
CCRect	cocoa/CCGeometry.h	/^    CCRect(float x, float y, float width, float height);$/;"	p	class:CCRect	access:public	signature:(float x, float y, float width, float height)
CCRect	cocoa/CCGeometry.h	/^class CC_DLL CCRect$/;"	c
CCRect::CCRect	cocoa/CCGeometry.cpp	/^CCRect::CCRect(const CCRect& other)$/;"	f	class:CCRect	signature:(const CCRect& other)
CCRect::CCRect	cocoa/CCGeometry.cpp	/^CCRect::CCRect(float x, float y, float width, float height)$/;"	f	class:CCRect	signature:(float x, float y, float width, float height)
CCRect::CCRect	cocoa/CCGeometry.cpp	/^CCRect::CCRect(void)$/;"	f	class:CCRect	signature:(void)
CCRect::CCRect	cocoa/CCGeometry.h	/^    CCRect();    $/;"	p	class:CCRect	access:public	signature:()
CCRect::CCRect	cocoa/CCGeometry.h	/^    CCRect(const CCRect& other);$/;"	p	class:CCRect	access:public	signature:(const CCRect& other)
CCRect::CCRect	cocoa/CCGeometry.h	/^    CCRect(float x, float y, float width, float height);$/;"	p	class:CCRect	access:public	signature:(float x, float y, float width, float height)
CCRect::containsPoint	cocoa/CCGeometry.cpp	/^bool CCRect::containsPoint(const CCPoint& point) const$/;"	f	class:CCRect	signature:(const CCPoint& point) const
CCRect::containsPoint	cocoa/CCGeometry.h	/^    bool containsPoint(const CCPoint& point) const;$/;"	p	class:CCRect	access:public	signature:(const CCPoint& point) const
CCRect::equals	cocoa/CCGeometry.cpp	/^bool CCRect::equals(const CCRect& rect) const$/;"	f	class:CCRect	signature:(const CCRect& rect) const
CCRect::equals	cocoa/CCGeometry.h	/^    bool equals(const CCRect& rect) const;   $/;"	p	class:CCRect	access:public	signature:(const CCRect& rect) const
CCRect::getMaxX	cocoa/CCGeometry.cpp	/^float CCRect::getMaxX() const$/;"	f	class:CCRect	signature:() const
CCRect::getMaxX	cocoa/CCGeometry.h	/^    float getMaxX() const; \/\/\/ return the rightmost x-value of current rect$/;"	p	class:CCRect	access:public	signature:() const
CCRect::getMaxY	cocoa/CCGeometry.cpp	/^float CCRect::getMaxY() const$/;"	f	class:CCRect	signature:() const
CCRect::getMaxY	cocoa/CCGeometry.h	/^    float getMaxY() const; \/\/\/ return the topmost y-value of current rect$/;"	p	class:CCRect	access:public	signature:() const
CCRect::getMidX	cocoa/CCGeometry.cpp	/^float CCRect::getMidX() const$/;"	f	class:CCRect	signature:() const
CCRect::getMidX	cocoa/CCGeometry.h	/^    float getMidX() const; \/\/\/ return the midpoint x-value of current rect$/;"	p	class:CCRect	access:public	signature:() const
CCRect::getMidY	cocoa/CCGeometry.cpp	/^float CCRect::getMidY() const$/;"	f	class:CCRect	signature:() const
CCRect::getMidY	cocoa/CCGeometry.h	/^    float getMidY() const; \/\/\/ return the midpoint y-value of current rect$/;"	p	class:CCRect	access:public	signature:() const
CCRect::getMinX	cocoa/CCGeometry.cpp	/^float CCRect::getMinX() const$/;"	f	class:CCRect	signature:() const
CCRect::getMinX	cocoa/CCGeometry.h	/^    float getMinX() const; \/\/\/ return the leftmost x-value of current rect$/;"	p	class:CCRect	access:public	signature:() const
CCRect::getMinY	cocoa/CCGeometry.cpp	/^float CCRect::getMinY() const$/;"	f	class:CCRect	signature:() const
CCRect::getMinY	cocoa/CCGeometry.h	/^    float getMinY() const; \/\/\/ return the bottommost y-value of current rect$/;"	p	class:CCRect	access:public	signature:() const
CCRect::intersectsRect	cocoa/CCGeometry.cpp	/^bool CCRect::intersectsRect(const CCRect& rect) const$/;"	f	class:CCRect	signature:(const CCRect& rect) const
CCRect::intersectsRect	cocoa/CCGeometry.h	/^    bool intersectsRect(const CCRect& rect) const;$/;"	p	class:CCRect	access:public	signature:(const CCRect& rect) const
CCRect::operator =	cocoa/CCGeometry.cpp	/^CCRect& CCRect::operator= (const CCRect& other)$/;"	f	class:CCRect	signature:(const CCRect& other)
CCRect::operator =	cocoa/CCGeometry.h	/^    CCRect& operator= (const CCRect& other); $/;"	p	class:CCRect	access:public	signature:(const CCRect& other)
CCRect::origin	cocoa/CCGeometry.h	/^    CCPoint origin;$/;"	m	class:CCRect	access:public
CCRect::setRect	cocoa/CCGeometry.cpp	/^void CCRect::setRect(float x, float y, float width, float height)$/;"	f	class:CCRect	signature:(float x, float y, float width, float height)
CCRect::setRect	cocoa/CCGeometry.h	/^    void setRect(float x, float y, float width, float height);$/;"	p	class:CCRect	access:public	signature:(float x, float y, float width, float height)
CCRect::size	cocoa/CCGeometry.h	/^    CCSize  size;$/;"	m	class:CCRect	access:public
CCRectApplyAffineTransform	cocoa/CCAffineTransform.cpp	/^CCRect CCRectApplyAffineTransform(const CCRect& rect, const CCAffineTransform& anAffineTransform)$/;"	f	signature:(const CCRect& rect, const CCAffineTransform& anAffineTransform)
CCRectApplyAffineTransform	cocoa/CCAffineTransform.h	/^CC_DLL CCRect CCRectApplyAffineTransform(const CCRect& rect, const CCAffineTransform& anAffineTransform);$/;"	p	signature:(const CCRect& rect, const CCAffineTransform& anAffineTransform)
CCRectFromString	cocoa/CCNS.cpp	/^CCRect CCRectFromString(const char* pszContent)$/;"	f	signature:(const char* pszContent)
CCRectFromString	cocoa/CCNS.h	/^CCRect CC_DLL CCRectFromString(const char* pszContent);$/;"	p	signature:(const char* pszContent)
CCRectMake	cocoa/CCGeometry.h	94;"	d
CCRectZero	cocoa/CCGeometry.h	/^const CCRect CCRectZero = CCRectMake(0,0,0,0);$/;"	v
CCRenderTexture	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture::CCRenderTexture()$/;"	f	class:CCRenderTexture	signature:()
CCRenderTexture	misc_nodes/CCRenderTexture.h	/^    CCRenderTexture();$/;"	p	class:CCRenderTexture	access:public	signature:()
CCRenderTexture	misc_nodes/CCRenderTexture.h	/^class CC_DLL CCRenderTexture : public CCNode $/;"	c	inherits:CCNode
CCRenderTexture::CCRenderTexture	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture::CCRenderTexture()$/;"	f	class:CCRenderTexture	signature:()
CCRenderTexture::CCRenderTexture	misc_nodes/CCRenderTexture.h	/^    CCRenderTexture();$/;"	p	class:CCRenderTexture	access:public	signature:()
CCRenderTexture::begin	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::begin()$/;"	f	class:CCRenderTexture	signature:()
CCRenderTexture::begin	misc_nodes/CCRenderTexture.h	/^    void begin();$/;"	p	class:CCRenderTexture	access:public	signature:()
CCRenderTexture::beginWithClear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::beginWithClear(float r, float g, float b, float a)$/;"	f	class:CCRenderTexture	signature:(float r, float g, float b, float a)
CCRenderTexture::beginWithClear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue)$/;"	f	class:CCRenderTexture	signature:(float r, float g, float b, float a, float depthValue)
CCRenderTexture::beginWithClear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue)$/;"	f	class:CCRenderTexture	signature:(float r, float g, float b, float a, float depthValue, int stencilValue)
CCRenderTexture::beginWithClear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags)$/;"	f	class:CCRenderTexture	signature:(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags)
CCRenderTexture::beginWithClear	misc_nodes/CCRenderTexture.h	/^    void beginWithClear(float r, float g, float b, float a);$/;"	p	class:CCRenderTexture	access:public	signature:(float r, float g, float b, float a)
CCRenderTexture::beginWithClear	misc_nodes/CCRenderTexture.h	/^    void beginWithClear(float r, float g, float b, float a, float depthValue);$/;"	p	class:CCRenderTexture	access:public	signature:(float r, float g, float b, float a, float depthValue)
CCRenderTexture::beginWithClear	misc_nodes/CCRenderTexture.h	/^    void beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue);$/;"	p	class:CCRenderTexture	access:public	signature:(float r, float g, float b, float a, float depthValue, int stencilValue)
CCRenderTexture::beginWithClear	misc_nodes/CCRenderTexture.h	/^    void beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags);$/;"	p	class:CCRenderTexture	access:private	signature:(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags)
CCRenderTexture::clear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::clear(float r, float g, float b, float a)$/;"	f	class:CCRenderTexture	signature:(float r, float g, float b, float a)
CCRenderTexture::clear	misc_nodes/CCRenderTexture.h	/^    void clear(float r, float g, float b, float a);$/;"	p	class:CCRenderTexture	access:public	signature:(float r, float g, float b, float a)
CCRenderTexture::clearDepth	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::clearDepth(float depthValue)$/;"	f	class:CCRenderTexture	signature:(float depthValue)
CCRenderTexture::clearDepth	misc_nodes/CCRenderTexture.h	/^    void clearDepth(float depthValue);$/;"	p	class:CCRenderTexture	access:public	signature:(float depthValue)
CCRenderTexture::clearStencil	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::clearStencil(int stencilValue)$/;"	f	class:CCRenderTexture	signature:(int stencilValue)
CCRenderTexture::clearStencil	misc_nodes/CCRenderTexture.h	/^    void clearStencil(int stencilValue);$/;"	p	class:CCRenderTexture	access:public	signature:(int stencilValue)
CCRenderTexture::create	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture * CCRenderTexture::create(int w ,int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)$/;"	f	class:CCRenderTexture	signature:(int w ,int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)
CCRenderTexture::create	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture * CCRenderTexture::create(int w, int h)$/;"	f	class:CCRenderTexture	signature:(int w, int h)
CCRenderTexture::create	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture * CCRenderTexture::create(int w, int h, CCTexture2DPixelFormat eFormat)$/;"	f	class:CCRenderTexture	signature:(int w, int h, CCTexture2DPixelFormat eFormat)
CCRenderTexture::create	misc_nodes/CCRenderTexture.h	/^    static CCRenderTexture * create(int w ,int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat);$/;"	p	class:CCRenderTexture	access:public	signature:(int w ,int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)
CCRenderTexture::create	misc_nodes/CCRenderTexture.h	/^    static CCRenderTexture * create(int w, int h);$/;"	p	class:CCRenderTexture	access:public	signature:(int w, int h)
CCRenderTexture::create	misc_nodes/CCRenderTexture.h	/^    static CCRenderTexture * create(int w, int h, CCTexture2DPixelFormat eFormat);$/;"	p	class:CCRenderTexture	access:public	signature:(int w, int h, CCTexture2DPixelFormat eFormat)
CCRenderTexture::draw	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::draw()$/;"	f	class:CCRenderTexture	signature:()
CCRenderTexture::draw	misc_nodes/CCRenderTexture.h	/^    virtual void draw();$/;"	p	class:CCRenderTexture	access:public	signature:()
CCRenderTexture::end	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::end()$/;"	f	class:CCRenderTexture	signature:()
CCRenderTexture::end	misc_nodes/CCRenderTexture.h	/^    void end();$/;"	p	class:CCRenderTexture	access:public	signature:()
CCRenderTexture::endToLua	misc_nodes/CCRenderTexture.h	/^    inline void endToLua(){ end();};$/;"	f	class:CCRenderTexture	access:public	signature:()
CCRenderTexture::getClearColor	misc_nodes/CCRenderTexture.cpp	/^const ccColor4F& CCRenderTexture::getClearColor() const$/;"	f	class:CCRenderTexture	signature:() const
CCRenderTexture::getClearColor	misc_nodes/CCRenderTexture.h	/^    const ccColor4F& getClearColor() const;$/;"	p	class:CCRenderTexture	access:public	signature:() const
CCRenderTexture::getClearDepth	misc_nodes/CCRenderTexture.cpp	/^float CCRenderTexture::getClearDepth() const$/;"	f	class:CCRenderTexture	signature:() const
CCRenderTexture::getClearDepth	misc_nodes/CCRenderTexture.h	/^    float getClearDepth() const;$/;"	p	class:CCRenderTexture	access:public	signature:() const
CCRenderTexture::getClearFlags	misc_nodes/CCRenderTexture.cpp	/^unsigned int CCRenderTexture::getClearFlags() const$/;"	f	class:CCRenderTexture	signature:() const
CCRenderTexture::getClearFlags	misc_nodes/CCRenderTexture.h	/^    unsigned int getClearFlags() const;$/;"	p	class:CCRenderTexture	access:public	signature:() const
CCRenderTexture::getClearStencil	misc_nodes/CCRenderTexture.cpp	/^int CCRenderTexture::getClearStencil() const$/;"	f	class:CCRenderTexture	signature:() const
CCRenderTexture::getClearStencil	misc_nodes/CCRenderTexture.h	/^    int getClearStencil() const;$/;"	p	class:CCRenderTexture	access:public	signature:() const
CCRenderTexture::getSprite	misc_nodes/CCRenderTexture.cpp	/^CCSprite * CCRenderTexture::getSprite()$/;"	f	class:CCRenderTexture	signature:()
CCRenderTexture::initWithWidthAndHeight	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::initWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat)$/;"	f	class:CCRenderTexture	signature:(int w, int h, CCTexture2DPixelFormat eFormat)
CCRenderTexture::initWithWidthAndHeight	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::initWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)$/;"	f	class:CCRenderTexture	signature:(int w, int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)
CCRenderTexture::initWithWidthAndHeight	misc_nodes/CCRenderTexture.h	/^    bool initWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat);$/;"	p	class:CCRenderTexture	access:public	signature:(int w, int h, CCTexture2DPixelFormat eFormat)
CCRenderTexture::initWithWidthAndHeight	misc_nodes/CCRenderTexture.h	/^    bool initWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat);$/;"	p	class:CCRenderTexture	access:public	signature:(int w, int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)
CCRenderTexture::isAutoDraw	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::isAutoDraw() const$/;"	f	class:CCRenderTexture	signature:() const
CCRenderTexture::isAutoDraw	misc_nodes/CCRenderTexture.h	/^    bool isAutoDraw() const;$/;"	p	class:CCRenderTexture	access:public	signature:() const
CCRenderTexture::listenToBackground	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::listenToBackground(cocos2d::CCObject *obj)$/;"	f	class:CCRenderTexture	signature:(cocos2d::CCObject *obj)
CCRenderTexture::listenToBackground	misc_nodes/CCRenderTexture.h	/^    void listenToBackground(CCObject *obj);$/;"	p	class:CCRenderTexture	access:public	signature:(CCObject *obj)
CCRenderTexture::listenToForeground	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::listenToForeground(cocos2d::CCObject *obj)$/;"	f	class:CCRenderTexture	signature:(cocos2d::CCObject *obj)
CCRenderTexture::listenToForeground	misc_nodes/CCRenderTexture.h	/^    void listenToForeground(CCObject *obj);$/;"	p	class:CCRenderTexture	access:public	signature:(CCObject *obj)
CCRenderTexture::m_bAutoDraw	misc_nodes/CCRenderTexture.h	/^    bool         m_bAutoDraw;$/;"	m	class:CCRenderTexture	access:protected
CCRenderTexture::m_ePixelFormat	misc_nodes/CCRenderTexture.h	/^    GLenum       m_ePixelFormat;$/;"	m	class:CCRenderTexture	access:protected
CCRenderTexture::m_fClearDepth	misc_nodes/CCRenderTexture.h	/^    GLclampf     m_fClearDepth;$/;"	m	class:CCRenderTexture	access:protected
CCRenderTexture::m_nClearStencil	misc_nodes/CCRenderTexture.h	/^    GLint        m_nClearStencil;$/;"	m	class:CCRenderTexture	access:protected
CCRenderTexture::m_nOldFBO	misc_nodes/CCRenderTexture.h	/^    GLint        m_nOldFBO;$/;"	m	class:CCRenderTexture	access:protected
CCRenderTexture::m_pTexture	misc_nodes/CCRenderTexture.h	/^    CCTexture2D* m_pTexture;$/;"	m	class:CCRenderTexture	access:protected
CCRenderTexture::m_pTextureCopy	misc_nodes/CCRenderTexture.h	/^    CCTexture2D* m_pTextureCopy;    \/\/ a copy of m_pTexture$/;"	m	class:CCRenderTexture	access:protected
CCRenderTexture::m_pUITextureImage	misc_nodes/CCRenderTexture.h	/^    CCImage*     m_pUITextureImage;$/;"	m	class:CCRenderTexture	access:protected
CCRenderTexture::m_sClearColor	misc_nodes/CCRenderTexture.h	/^    ccColor4F    m_sClearColor;$/;"	m	class:CCRenderTexture	access:protected
CCRenderTexture::m_uClearFlags	misc_nodes/CCRenderTexture.h	/^    GLbitfield   m_uClearFlags;$/;"	m	class:CCRenderTexture	access:protected
CCRenderTexture::m_uDepthRenderBufffer	misc_nodes/CCRenderTexture.h	/^    GLuint       m_uDepthRenderBufffer;$/;"	m	class:CCRenderTexture	access:protected
CCRenderTexture::m_uFBO	misc_nodes/CCRenderTexture.h	/^    GLuint       m_uFBO;$/;"	m	class:CCRenderTexture	access:protected
CCRenderTexture::newCCImage	misc_nodes/CCRenderTexture.cpp	/^CCImage* CCRenderTexture::newCCImage(bool flipImage)$/;"	f	class:CCRenderTexture	signature:(bool flipImage)
CCRenderTexture::newCCImage	misc_nodes/CCRenderTexture.h	/^    CCImage* newCCImage(bool flipImage = true);$/;"	p	class:CCRenderTexture	access:public	signature:(bool flipImage = true)
CCRenderTexture::saveToFile	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::saveToFile(const char *fileName, tCCImageFormat format)$/;"	f	class:CCRenderTexture	signature:(const char *fileName, tCCImageFormat format)
CCRenderTexture::saveToFile	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::saveToFile(const char *szFilePath)$/;"	f	class:CCRenderTexture	signature:(const char *szFilePath)
CCRenderTexture::saveToFile	misc_nodes/CCRenderTexture.h	/^    bool saveToFile(const char *name, tCCImageFormat format);$/;"	p	class:CCRenderTexture	access:public	signature:(const char *name, tCCImageFormat format)
CCRenderTexture::saveToFile	misc_nodes/CCRenderTexture.h	/^    bool saveToFile(const char *szFilePath);$/;"	p	class:CCRenderTexture	access:public	signature:(const char *szFilePath)
CCRenderTexture::setAutoDraw	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setAutoDraw(bool bAutoDraw)$/;"	f	class:CCRenderTexture	signature:(bool bAutoDraw)
CCRenderTexture::setAutoDraw	misc_nodes/CCRenderTexture.h	/^    void setAutoDraw(bool bAutoDraw);$/;"	p	class:CCRenderTexture	access:public	signature:(bool bAutoDraw)
CCRenderTexture::setClearColor	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setClearColor(const ccColor4F &clearColor)$/;"	f	class:CCRenderTexture	signature:(const ccColor4F &clearColor)
CCRenderTexture::setClearColor	misc_nodes/CCRenderTexture.h	/^    void setClearColor(const ccColor4F &clearColor);$/;"	p	class:CCRenderTexture	access:public	signature:(const ccColor4F &clearColor)
CCRenderTexture::setClearDepth	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setClearDepth(float fClearDepth)$/;"	f	class:CCRenderTexture	signature:(float fClearDepth)
CCRenderTexture::setClearDepth	misc_nodes/CCRenderTexture.h	/^    void setClearDepth(float fClearDepth);$/;"	p	class:CCRenderTexture	access:public	signature:(float fClearDepth)
CCRenderTexture::setClearFlags	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setClearFlags(unsigned int uClearFlags)$/;"	f	class:CCRenderTexture	signature:(unsigned int uClearFlags)
CCRenderTexture::setClearFlags	misc_nodes/CCRenderTexture.h	/^    void setClearFlags(unsigned int uClearFlags);$/;"	p	class:CCRenderTexture	access:public	signature:(unsigned int uClearFlags)
CCRenderTexture::setClearStencil	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setClearStencil(float fClearStencil)$/;"	f	class:CCRenderTexture	signature:(float fClearStencil)
CCRenderTexture::setClearStencil	misc_nodes/CCRenderTexture.h	/^    void setClearStencil(float fClearStencil);$/;"	p	class:CCRenderTexture	access:public	signature:(float fClearStencil)
CCRenderTexture::setSprite	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setSprite(CCSprite* var)$/;"	f	class:CCRenderTexture	signature:(CCSprite* var)
CCRenderTexture::visit	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::visit()$/;"	f	class:CCRenderTexture	signature:()
CCRenderTexture::visit	misc_nodes/CCRenderTexture.h	/^    virtual void visit();$/;"	p	class:CCRenderTexture	access:public	signature:()
CCRenderTexture::~CCRenderTexture	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture::~CCRenderTexture()$/;"	f	class:CCRenderTexture	signature:()
CCRenderTexture::~CCRenderTexture	misc_nodes/CCRenderTexture.h	/^    virtual ~CCRenderTexture();$/;"	p	class:CCRenderTexture	access:public	signature:()
CCRepeat	actions/CCActionInterval.h	/^class CC_DLL CCRepeat : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCRepeat::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCRepeat::copyWithZone(CCZone *pZone)$/;"	f	class:CCRepeat	signature:(CCZone *pZone)
CCRepeat::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCRepeat	access:public	signature:(CCZone* pZone)
CCRepeat::create	actions/CCActionInterval.cpp	/^CCRepeat* CCRepeat::create(CCFiniteTimeAction *pAction, unsigned int times)$/;"	f	class:CCRepeat	signature:(CCFiniteTimeAction *pAction, unsigned int times)
CCRepeat::create	actions/CCActionInterval.h	/^    static CCRepeat* create(CCFiniteTimeAction *pAction, unsigned int times);$/;"	p	class:CCRepeat	access:public	signature:(CCFiniteTimeAction *pAction, unsigned int times)
CCRepeat::getInnerAction	actions/CCActionInterval.h	/^    inline CCFiniteTimeAction* getInnerAction()$/;"	f	class:CCRepeat	access:public	signature:()
CCRepeat::initWithAction	actions/CCActionInterval.cpp	/^bool CCRepeat::initWithAction(CCFiniteTimeAction *pAction, unsigned int times)$/;"	f	class:CCRepeat	signature:(CCFiniteTimeAction *pAction, unsigned int times)
CCRepeat::initWithAction	actions/CCActionInterval.h	/^    bool initWithAction(CCFiniteTimeAction *pAction, unsigned int times);$/;"	p	class:CCRepeat	access:public	signature:(CCFiniteTimeAction *pAction, unsigned int times)
CCRepeat::isDone	actions/CCActionInterval.cpp	/^bool CCRepeat::isDone(void)$/;"	f	class:CCRepeat	signature:(void)
CCRepeat::isDone	actions/CCActionInterval.h	/^    virtual bool isDone(void);$/;"	p	class:CCRepeat	access:public	signature:(void)
CCRepeat::m_bActionInstant	actions/CCActionInterval.h	/^    bool m_bActionInstant;$/;"	m	class:CCRepeat	access:protected
CCRepeat::m_fNextDt	actions/CCActionInterval.h	/^    float m_fNextDt;$/;"	m	class:CCRepeat	access:protected
CCRepeat::m_pInnerAction	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pInnerAction;$/;"	m	class:CCRepeat	access:protected
CCRepeat::m_uTimes	actions/CCActionInterval.h	/^    unsigned int m_uTimes;$/;"	m	class:CCRepeat	access:protected
CCRepeat::m_uTotal	actions/CCActionInterval.h	/^    unsigned int m_uTotal;$/;"	m	class:CCRepeat	access:protected
CCRepeat::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCRepeat::reverse(void)$/;"	f	class:CCRepeat	signature:(void)
CCRepeat::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCRepeat	access:public	signature:(void)
CCRepeat::setInnerAction	actions/CCActionInterval.h	/^    inline void setInnerAction(CCFiniteTimeAction *pAction)$/;"	f	class:CCRepeat	access:public	signature:(CCFiniteTimeAction *pAction)
CCRepeat::startWithTarget	actions/CCActionInterval.cpp	/^void CCRepeat::startWithTarget(CCNode *pTarget)$/;"	f	class:CCRepeat	signature:(CCNode *pTarget)
CCRepeat::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCRepeat	access:public	signature:(CCNode *pTarget)
CCRepeat::stop	actions/CCActionInterval.cpp	/^void CCRepeat::stop(void)$/;"	f	class:CCRepeat	signature:(void)
CCRepeat::stop	actions/CCActionInterval.h	/^    virtual void stop(void);$/;"	p	class:CCRepeat	access:public	signature:(void)
CCRepeat::update	actions/CCActionInterval.cpp	/^void CCRepeat::update(float dt)$/;"	f	class:CCRepeat	signature:(float dt)
CCRepeat::update	actions/CCActionInterval.h	/^    virtual void update(float dt);$/;"	p	class:CCRepeat	access:public	signature:(float dt)
CCRepeat::~CCRepeat	actions/CCActionInterval.cpp	/^CCRepeat::~CCRepeat(void)$/;"	f	class:CCRepeat	signature:(void)
CCRepeat::~CCRepeat	actions/CCActionInterval.h	/^    ~CCRepeat(void);$/;"	p	class:CCRepeat	access:public	signature:(void)
CCRepeatForever	actions/CCActionInterval.h	/^    CCRepeatForever()$/;"	f	class:CCRepeatForever	access:public	signature:()
CCRepeatForever	actions/CCActionInterval.h	/^class CC_DLL CCRepeatForever : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCRepeatForever::CCRepeatForever	actions/CCActionInterval.h	/^    CCRepeatForever()$/;"	f	class:CCRepeatForever	access:public	signature:()
CCRepeatForever::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCRepeatForever::copyWithZone(CCZone *pZone)$/;"	f	class:CCRepeatForever	signature:(CCZone *pZone)
CCRepeatForever::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCRepeatForever	access:public	signature:(CCZone *pZone)
CCRepeatForever::create	actions/CCActionInterval.cpp	/^CCRepeatForever *CCRepeatForever::create(CCActionInterval *pAction)$/;"	f	class:CCRepeatForever	signature:(CCActionInterval *pAction)
CCRepeatForever::create	actions/CCActionInterval.h	/^    static CCRepeatForever* create(CCActionInterval *pAction);$/;"	p	class:CCRepeatForever	access:public	signature:(CCActionInterval *pAction)
CCRepeatForever::getInnerAction	actions/CCActionInterval.h	/^    inline CCActionInterval* getInnerAction()$/;"	f	class:CCRepeatForever	access:public	signature:()
CCRepeatForever::initWithAction	actions/CCActionInterval.cpp	/^bool CCRepeatForever::initWithAction(CCActionInterval *pAction)$/;"	f	class:CCRepeatForever	signature:(CCActionInterval *pAction)
CCRepeatForever::initWithAction	actions/CCActionInterval.h	/^    bool initWithAction(CCActionInterval *pAction);$/;"	p	class:CCRepeatForever	access:public	signature:(CCActionInterval *pAction)
CCRepeatForever::isDone	actions/CCActionInterval.cpp	/^bool CCRepeatForever::isDone()$/;"	f	class:CCRepeatForever	signature:()
CCRepeatForever::isDone	actions/CCActionInterval.h	/^    virtual bool isDone(void);$/;"	p	class:CCRepeatForever	access:public	signature:(void)
CCRepeatForever::m_pInnerAction	actions/CCActionInterval.h	/^    CCActionInterval *m_pInnerAction;$/;"	m	class:CCRepeatForever	access:protected
CCRepeatForever::reverse	actions/CCActionInterval.cpp	/^CCActionInterval *CCRepeatForever::reverse()$/;"	f	class:CCRepeatForever	signature:()
CCRepeatForever::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCRepeatForever	access:public	signature:(void)
CCRepeatForever::setInnerAction	actions/CCActionInterval.h	/^    inline void setInnerAction(CCActionInterval *pAction)$/;"	f	class:CCRepeatForever	access:public	signature:(CCActionInterval *pAction)
CCRepeatForever::startWithTarget	actions/CCActionInterval.cpp	/^void CCRepeatForever::startWithTarget(CCNode* pTarget)$/;"	f	class:CCRepeatForever	signature:(CCNode* pTarget)
CCRepeatForever::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode* pTarget);$/;"	p	class:CCRepeatForever	access:public	signature:(CCNode* pTarget)
CCRepeatForever::step	actions/CCActionInterval.cpp	/^void CCRepeatForever::step(float dt)$/;"	f	class:CCRepeatForever	signature:(float dt)
CCRepeatForever::step	actions/CCActionInterval.h	/^    virtual void step(float dt);$/;"	p	class:CCRepeatForever	access:public	signature:(float dt)
CCRepeatForever::~CCRepeatForever	actions/CCActionInterval.cpp	/^CCRepeatForever::~CCRepeatForever()$/;"	f	class:CCRepeatForever	signature:()
CCRepeatForever::~CCRepeatForever	actions/CCActionInterval.h	/^    virtual ~CCRepeatForever();$/;"	p	class:CCRepeatForever	access:public	signature:()
CCReuseGrid	actions/CCActionGrid.h	/^class CC_DLL CCReuseGrid : public CCActionInstant$/;"	c	inherits:CCActionInstant
CCReuseGrid::create	actions/CCActionGrid.cpp	/^CCReuseGrid* CCReuseGrid::create(int times)$/;"	f	class:CCReuseGrid	signature:(int times)
CCReuseGrid::create	actions/CCActionGrid.h	/^    static CCReuseGrid* create(int times);$/;"	p	class:CCReuseGrid	access:public	signature:(int times)
CCReuseGrid::initWithTimes	actions/CCActionGrid.cpp	/^bool CCReuseGrid::initWithTimes(int times)$/;"	f	class:CCReuseGrid	signature:(int times)
CCReuseGrid::initWithTimes	actions/CCActionGrid.h	/^    bool initWithTimes(int times);$/;"	p	class:CCReuseGrid	access:public	signature:(int times)
CCReuseGrid::m_nTimes	actions/CCActionGrid.h	/^    int m_nTimes;$/;"	m	class:CCReuseGrid	access:protected
CCReuseGrid::startWithTarget	actions/CCActionGrid.cpp	/^void CCReuseGrid::startWithTarget(CCNode *pTarget)$/;"	f	class:CCReuseGrid	signature:(CCNode *pTarget)
CCReuseGrid::startWithTarget	actions/CCActionGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCReuseGrid	access:public	signature:(CCNode *pTarget)
CCReverseTime	actions/CCActionInterval.cpp	/^CCReverseTime::CCReverseTime() : m_pOther(NULL) $/;"	f	class:CCReverseTime	signature:()
CCReverseTime	actions/CCActionInterval.h	/^    CCReverseTime();$/;"	p	class:CCReverseTime	access:public	signature:()
CCReverseTime	actions/CCActionInterval.h	/^class CC_DLL CCReverseTime : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCReverseTime::CCReverseTime	actions/CCActionInterval.cpp	/^CCReverseTime::CCReverseTime() : m_pOther(NULL) $/;"	f	class:CCReverseTime	signature:()
CCReverseTime::CCReverseTime	actions/CCActionInterval.h	/^    CCReverseTime();$/;"	p	class:CCReverseTime	access:public	signature:()
CCReverseTime::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCReverseTime::copyWithZone(CCZone *pZone)$/;"	f	class:CCReverseTime	signature:(CCZone *pZone)
CCReverseTime::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCReverseTime	access:public	signature:(CCZone* pZone)
CCReverseTime::create	actions/CCActionInterval.cpp	/^CCReverseTime* CCReverseTime::create(CCFiniteTimeAction *pAction)$/;"	f	class:CCReverseTime	signature:(CCFiniteTimeAction *pAction)
CCReverseTime::create	actions/CCActionInterval.h	/^    static CCReverseTime* create(CCFiniteTimeAction *pAction);$/;"	p	class:CCReverseTime	access:public	signature:(CCFiniteTimeAction *pAction)
CCReverseTime::initWithAction	actions/CCActionInterval.cpp	/^bool CCReverseTime::initWithAction(CCFiniteTimeAction *pAction)$/;"	f	class:CCReverseTime	signature:(CCFiniteTimeAction *pAction)
CCReverseTime::initWithAction	actions/CCActionInterval.h	/^    bool initWithAction(CCFiniteTimeAction *pAction);$/;"	p	class:CCReverseTime	access:public	signature:(CCFiniteTimeAction *pAction)
CCReverseTime::m_pOther	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pOther;$/;"	m	class:CCReverseTime	access:protected
CCReverseTime::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCReverseTime::reverse(void)$/;"	f	class:CCReverseTime	signature:(void)
CCReverseTime::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCReverseTime	access:public	signature:(void)
CCReverseTime::startWithTarget	actions/CCActionInterval.cpp	/^void CCReverseTime::startWithTarget(CCNode *pTarget)$/;"	f	class:CCReverseTime	signature:(CCNode *pTarget)
CCReverseTime::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCReverseTime	access:public	signature:(CCNode *pTarget)
CCReverseTime::stop	actions/CCActionInterval.cpp	/^void CCReverseTime::stop(void)$/;"	f	class:CCReverseTime	signature:(void)
CCReverseTime::stop	actions/CCActionInterval.h	/^    virtual void stop(void);$/;"	p	class:CCReverseTime	access:public	signature:(void)
CCReverseTime::update	actions/CCActionInterval.cpp	/^void CCReverseTime::update(float time)$/;"	f	class:CCReverseTime	signature:(float time)
CCReverseTime::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCReverseTime	access:public	signature:(float time)
CCReverseTime::~CCReverseTime	actions/CCActionInterval.cpp	/^CCReverseTime::~CCReverseTime(void)$/;"	f	class:CCReverseTime	signature:(void)
CCReverseTime::~CCReverseTime	actions/CCActionInterval.h	/^    ~CCReverseTime(void);$/;"	p	class:CCReverseTime	access:public	signature:(void)
CCRipple3D	actions/CCActionGrid3D.h	/^class CC_DLL CCRipple3D : public CCGrid3DAction$/;"	c	inherits:CCGrid3DAction
CCRipple3D::copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCRipple3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCRipple3D	signature:(CCZone *pZone)
CCRipple3D::copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCRipple3D	access:public	signature:(CCZone* pZone)
CCRipple3D::create	actions/CCActionGrid3D.cpp	/^CCRipple3D* CCRipple3D::create(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude)$/;"	f	class:CCRipple3D	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude)
CCRipple3D::create	actions/CCActionGrid3D.h	/^    static CCRipple3D* create(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude);$/;"	p	class:CCRipple3D	access:public	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude)
CCRipple3D::getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCRipple3D	access:public	signature:(void)
CCRipple3D::getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCRipple3D	access:public	signature:(void)
CCRipple3D::getPosition	actions/CCActionGrid3D.h	/^    inline const CCPoint& getPosition(void) { return m_position; }$/;"	f	class:CCRipple3D	access:public	signature:(void)
CCRipple3D::initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCRipple3D::initWithDuration(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude)$/;"	f	class:CCRipple3D	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude)
CCRipple3D::initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude);$/;"	p	class:CCRipple3D	access:public	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude)
CCRipple3D::m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCRipple3D	access:protected
CCRipple3D::m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCRipple3D	access:protected
CCRipple3D::m_fRadius	actions/CCActionGrid3D.h	/^    float m_fRadius;$/;"	m	class:CCRipple3D	access:protected
CCRipple3D::m_nWaves	actions/CCActionGrid3D.h	/^    unsigned int m_nWaves;$/;"	m	class:CCRipple3D	access:protected
CCRipple3D::m_position	actions/CCActionGrid3D.h	/^    CCPoint m_position;$/;"	m	class:CCRipple3D	access:protected
CCRipple3D::setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCRipple3D	access:public	signature:(float fAmplitude)
CCRipple3D::setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCRipple3D	access:public	signature:(float fAmplitudeRate)
CCRipple3D::setPosition	actions/CCActionGrid3D.cpp	/^void CCRipple3D::setPosition(const CCPoint& position)$/;"	f	class:CCRipple3D	signature:(const CCPoint& position)
CCRipple3D::setPosition	actions/CCActionGrid3D.h	/^    void setPosition(const CCPoint& position);$/;"	p	class:CCRipple3D	access:public	signature:(const CCPoint& position)
CCRipple3D::update	actions/CCActionGrid3D.cpp	/^void CCRipple3D::update(float time)$/;"	f	class:CCRipple3D	signature:(float time)
CCRipple3D::update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCRipple3D	access:public	signature:(float time)
CCRotateBy	actions/CCActionInterval.h	/^class CC_DLL CCRotateBy : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCRotateBy::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCRotateBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCRotateBy	signature:(CCZone *pZone)
CCRotateBy::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCRotateBy	access:public	signature:(CCZone* pZone)
CCRotateBy::create	actions/CCActionInterval.cpp	/^CCRotateBy* CCRotateBy::create(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateBy	signature:(float fDuration, float fDeltaAngle)
CCRotateBy::create	actions/CCActionInterval.cpp	/^CCRotateBy* CCRotateBy::create(float fDuration, float fDeltaAngleX, float fDeltaAngleY)$/;"	f	class:CCRotateBy	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
CCRotateBy::create	actions/CCActionInterval.h	/^    static CCRotateBy* create(float fDuration, float fDeltaAngle);$/;"	p	class:CCRotateBy	access:public	signature:(float fDuration, float fDeltaAngle)
CCRotateBy::create	actions/CCActionInterval.h	/^    static CCRotateBy* create(float fDuration, float fDeltaAngleX, float fDeltaAngleY);$/;"	p	class:CCRotateBy	access:public	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
CCRotateBy::initWithDuration	actions/CCActionInterval.cpp	/^bool CCRotateBy::initWithDuration(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateBy	signature:(float fDuration, float fDeltaAngle)
CCRotateBy::initWithDuration	actions/CCActionInterval.cpp	/^bool CCRotateBy::initWithDuration(float fDuration, float fDeltaAngleX, float fDeltaAngleY)$/;"	f	class:CCRotateBy	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
CCRotateBy::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float fDuration, float fDeltaAngle);$/;"	p	class:CCRotateBy	access:public	signature:(float fDuration, float fDeltaAngle)
CCRotateBy::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float fDuration, float fDeltaAngleX, float fDeltaAngleY);$/;"	p	class:CCRotateBy	access:public	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
CCRotateBy::m_fAngleX	actions/CCActionInterval.h	/^    float m_fAngleX;$/;"	m	class:CCRotateBy	access:protected
CCRotateBy::m_fAngleY	actions/CCActionInterval.h	/^    float m_fAngleY;$/;"	m	class:CCRotateBy	access:protected
CCRotateBy::m_fStartAngleX	actions/CCActionInterval.h	/^    float m_fStartAngleX;$/;"	m	class:CCRotateBy	access:protected
CCRotateBy::m_fStartAngleY	actions/CCActionInterval.h	/^    float m_fStartAngleY;$/;"	m	class:CCRotateBy	access:protected
CCRotateBy::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCRotateBy::reverse(void)$/;"	f	class:CCRotateBy	signature:(void)
CCRotateBy::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCRotateBy	access:public	signature:(void)
CCRotateBy::startWithTarget	actions/CCActionInterval.cpp	/^void CCRotateBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCRotateBy	signature:(CCNode *pTarget)
CCRotateBy::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCRotateBy	access:public	signature:(CCNode *pTarget)
CCRotateBy::update	actions/CCActionInterval.cpp	/^void CCRotateBy::update(float time)$/;"	f	class:CCRotateBy	signature:(float time)
CCRotateBy::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCRotateBy	access:public	signature:(float time)
CCRotateTo	actions/CCActionInterval.h	/^class CC_DLL CCRotateTo : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCRotateTo::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCRotateTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCRotateTo	signature:(CCZone *pZone)
CCRotateTo::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCRotateTo	access:public	signature:(CCZone* pZone)
CCRotateTo::create	actions/CCActionInterval.cpp	/^CCRotateTo* CCRotateTo::create(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateTo	signature:(float fDuration, float fDeltaAngle)
CCRotateTo::create	actions/CCActionInterval.cpp	/^CCRotateTo* CCRotateTo::create(float fDuration, float fDeltaAngleX, float fDeltaAngleY)$/;"	f	class:CCRotateTo	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
CCRotateTo::create	actions/CCActionInterval.h	/^    static CCRotateTo* create(float fDuration, float fDeltaAngle);$/;"	p	class:CCRotateTo	access:public	signature:(float fDuration, float fDeltaAngle)
CCRotateTo::create	actions/CCActionInterval.h	/^    static CCRotateTo* create(float fDuration, float fDeltaAngleX, float fDeltaAngleY);$/;"	p	class:CCRotateTo	access:public	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
CCRotateTo::initWithDuration	actions/CCActionInterval.cpp	/^bool CCRotateTo::initWithDuration(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateTo	signature:(float fDuration, float fDeltaAngle)
CCRotateTo::initWithDuration	actions/CCActionInterval.cpp	/^bool CCRotateTo::initWithDuration(float fDuration, float fDeltaAngleX, float fDeltaAngleY)$/;"	f	class:CCRotateTo	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
CCRotateTo::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float fDuration, float fDeltaAngle);$/;"	p	class:CCRotateTo	access:public	signature:(float fDuration, float fDeltaAngle)
CCRotateTo::initWithDuration	actions/CCActionInterval.h	/^    virtual bool initWithDuration(float fDuration, float fDeltaAngleX, float fDeltaAngleY);$/;"	p	class:CCRotateTo	access:public	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
CCRotateTo::m_fDiffAngleX	actions/CCActionInterval.h	/^    float m_fDiffAngleX;$/;"	m	class:CCRotateTo	access:protected
CCRotateTo::m_fDiffAngleY	actions/CCActionInterval.h	/^    float m_fDiffAngleY;$/;"	m	class:CCRotateTo	access:protected
CCRotateTo::m_fDstAngleX	actions/CCActionInterval.h	/^    float m_fDstAngleX;$/;"	m	class:CCRotateTo	access:protected
CCRotateTo::m_fDstAngleY	actions/CCActionInterval.h	/^    float m_fDstAngleY;$/;"	m	class:CCRotateTo	access:protected
CCRotateTo::m_fStartAngleX	actions/CCActionInterval.h	/^    float m_fStartAngleX;$/;"	m	class:CCRotateTo	access:protected
CCRotateTo::m_fStartAngleY	actions/CCActionInterval.h	/^    float m_fStartAngleY;$/;"	m	class:CCRotateTo	access:protected
CCRotateTo::startWithTarget	actions/CCActionInterval.cpp	/^void CCRotateTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCRotateTo	signature:(CCNode *pTarget)
CCRotateTo::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCRotateTo	access:public	signature:(CCNode *pTarget)
CCRotateTo::update	actions/CCActionInterval.cpp	/^void CCRotateTo::update(float time)$/;"	f	class:CCRotateTo	signature:(float time)
CCRotateTo::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCRotateTo	access:public	signature:(float time)
CCSAXDelegator	platform/CCSAXParser.h	/^class CC_DLL CCSAXDelegator$/;"	c
CCSAXDelegator::endElement	platform/CCSAXParser.h	/^    virtual void endElement(void *ctx, const char *name) = 0;$/;"	p	class:CCSAXDelegator	access:public	signature:(void *ctx, const char *name)
CCSAXDelegator::startElement	platform/CCSAXParser.h	/^    virtual void startElement(void *ctx, const char *name, const char **atts) = 0;$/;"	p	class:CCSAXDelegator	access:public	signature:(void *ctx, const char *name, const char **atts)
CCSAXDelegator::textHandler	platform/CCSAXParser.h	/^    virtual void textHandler(void *ctx, const char *s, int len) = 0;$/;"	p	class:CCSAXDelegator	access:public	signature:(void *ctx, const char *s, int len)
CCSAXParser	platform/CCSAXParser.cpp	/^CCSAXParser::CCSAXParser()$/;"	f	class:CCSAXParser	signature:()
CCSAXParser	platform/CCSAXParser.h	/^    CCSAXParser();$/;"	p	class:CCSAXParser	access:public	signature:()
CCSAXParser	platform/CCSAXParser.h	/^class CC_DLL CCSAXParser$/;"	c
CCSAXParser::CCSAXParser	platform/CCSAXParser.cpp	/^CCSAXParser::CCSAXParser()$/;"	f	class:CCSAXParser	signature:()
CCSAXParser::CCSAXParser	platform/CCSAXParser.h	/^    CCSAXParser();$/;"	p	class:CCSAXParser	access:public	signature:()
CCSAXParser::endElement	platform/CCSAXParser.cpp	/^void CCSAXParser::endElement(void *ctx, const CC_XML_CHAR *name)$/;"	f	class:CCSAXParser	signature:(void *ctx, const CC_XML_CHAR *name)
CCSAXParser::endElement	platform/CCSAXParser.h	/^    static void endElement(void *ctx, const CC_XML_CHAR *name);$/;"	p	class:CCSAXParser	access:public	signature:(void *ctx, const CC_XML_CHAR *name)
CCSAXParser::init	platform/CCSAXParser.cpp	/^bool CCSAXParser::init(const char *pszEncoding)$/;"	f	class:CCSAXParser	signature:(const char *pszEncoding)
CCSAXParser::init	platform/CCSAXParser.h	/^    bool init(const char *pszEncoding);$/;"	p	class:CCSAXParser	access:public	signature:(const char *pszEncoding)
CCSAXParser::m_pDelegator	platform/CCSAXParser.h	/^    CCSAXDelegator*    m_pDelegator;$/;"	m	class:CCSAXParser	access:private
CCSAXParser::parse	platform/CCSAXParser.cpp	/^bool CCSAXParser::parse(const char *pszFile)$/;"	f	class:CCSAXParser	signature:(const char *pszFile)
CCSAXParser::parse	platform/CCSAXParser.cpp	/^bool CCSAXParser::parse(const char* pXMLData, unsigned int uDataLength)$/;"	f	class:CCSAXParser	signature:(const char* pXMLData, unsigned int uDataLength)
CCSAXParser::parse	platform/CCSAXParser.h	/^    bool parse(const char *pszFile);$/;"	p	class:CCSAXParser	access:public	signature:(const char *pszFile)
CCSAXParser::parse	platform/CCSAXParser.h	/^    bool parse(const char* pXMLData, unsigned int uDataLength);$/;"	p	class:CCSAXParser	access:public	signature:(const char* pXMLData, unsigned int uDataLength)
CCSAXParser::setDelegator	platform/CCSAXParser.cpp	/^void CCSAXParser::setDelegator(CCSAXDelegator* pDelegator)$/;"	f	class:CCSAXParser	signature:(CCSAXDelegator* pDelegator)
CCSAXParser::setDelegator	platform/CCSAXParser.h	/^    void setDelegator(CCSAXDelegator* pDelegator);$/;"	p	class:CCSAXParser	access:public	signature:(CCSAXDelegator* pDelegator)
CCSAXParser::startElement	platform/CCSAXParser.cpp	/^void CCSAXParser::startElement(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts)$/;"	f	class:CCSAXParser	signature:(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts)
CCSAXParser::startElement	platform/CCSAXParser.h	/^    static void startElement(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts);$/;"	p	class:CCSAXParser	access:public	signature:(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts)
CCSAXParser::textHandler	platform/CCSAXParser.cpp	/^void CCSAXParser::textHandler(void *ctx, const CC_XML_CHAR *name, int len)$/;"	f	class:CCSAXParser	signature:(void *ctx, const CC_XML_CHAR *name, int len)
CCSAXParser::textHandler	platform/CCSAXParser.h	/^    static void textHandler(void *ctx, const CC_XML_CHAR *name, int len);$/;"	p	class:CCSAXParser	access:public	signature:(void *ctx, const CC_XML_CHAR *name, int len)
CCSAXParser::~CCSAXParser	platform/CCSAXParser.cpp	/^CCSAXParser::~CCSAXParser(void)$/;"	f	class:CCSAXParser	signature:(void)
CCSAXParser::~CCSAXParser	platform/CCSAXParser.h	/^    ~CCSAXParser(void);$/;"	p	class:CCSAXParser	access:public	signature:(void)
CCSAXResult	platform/CCFileUtils.cpp	/^}CCSAXResult;$/;"	t	typeref:enum:__anon27	file:
CCSAXState	platform/CCFileUtils.cpp	/^}CCSAXState;$/;"	t	typeref:enum:__anon26	file:
CCScaleBy	actions/CCActionInterval.h	/^class CC_DLL CCScaleBy : public CCScaleTo$/;"	c	inherits:CCScaleTo
CCScaleBy::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCScaleBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCScaleBy	signature:(CCZone *pZone)
CCScaleBy::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCScaleBy	access:public	signature:(CCZone* pZone)
CCScaleBy::create	actions/CCActionInterval.cpp	/^CCScaleBy* CCScaleBy::create(float duration, float s)$/;"	f	class:CCScaleBy	signature:(float duration, float s)
CCScaleBy::create	actions/CCActionInterval.cpp	/^CCScaleBy* CCScaleBy::create(float duration, float sx, float sy)$/;"	f	class:CCScaleBy	signature:(float duration, float sx, float sy)
CCScaleBy::create	actions/CCActionInterval.h	/^    static CCScaleBy* create(float duration, float s);$/;"	p	class:CCScaleBy	access:public	signature:(float duration, float s)
CCScaleBy::create	actions/CCActionInterval.h	/^    static CCScaleBy* create(float duration, float sx, float sy);$/;"	p	class:CCScaleBy	access:public	signature:(float duration, float sx, float sy)
CCScaleBy::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCScaleBy::reverse(void)$/;"	f	class:CCScaleBy	signature:(void)
CCScaleBy::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCScaleBy	access:public	signature:(void)
CCScaleBy::startWithTarget	actions/CCActionInterval.cpp	/^void CCScaleBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCScaleBy	signature:(CCNode *pTarget)
CCScaleBy::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCScaleBy	access:public	signature:(CCNode *pTarget)
CCScaleTo	actions/CCActionInterval.h	/^class CC_DLL CCScaleTo : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCScaleTo::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCScaleTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCScaleTo	signature:(CCZone *pZone)
CCScaleTo::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCScaleTo	access:public	signature:(CCZone* pZone)
CCScaleTo::create	actions/CCActionInterval.cpp	/^CCScaleTo* CCScaleTo::create(float duration, float s)$/;"	f	class:CCScaleTo	signature:(float duration, float s)
CCScaleTo::create	actions/CCActionInterval.cpp	/^CCScaleTo* CCScaleTo::create(float duration, float sx, float sy)$/;"	f	class:CCScaleTo	signature:(float duration, float sx, float sy)
CCScaleTo::create	actions/CCActionInterval.h	/^    static CCScaleTo* create(float duration, float s);$/;"	p	class:CCScaleTo	access:public	signature:(float duration, float s)
CCScaleTo::create	actions/CCActionInterval.h	/^    static CCScaleTo* create(float duration, float sx, float sy);$/;"	p	class:CCScaleTo	access:public	signature:(float duration, float sx, float sy)
CCScaleTo::initWithDuration	actions/CCActionInterval.cpp	/^bool CCScaleTo::initWithDuration(float duration, float s)$/;"	f	class:CCScaleTo	signature:(float duration, float s)
CCScaleTo::initWithDuration	actions/CCActionInterval.cpp	/^bool CCScaleTo::initWithDuration(float duration, float sx, float sy)$/;"	f	class:CCScaleTo	signature:(float duration, float sx, float sy)
CCScaleTo::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, float s);$/;"	p	class:CCScaleTo	access:public	signature:(float duration, float s)
CCScaleTo::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, float sx, float sy);$/;"	p	class:CCScaleTo	access:public	signature:(float duration, float sx, float sy)
CCScaleTo::m_fDeltaX	actions/CCActionInterval.h	/^    float m_fDeltaX;$/;"	m	class:CCScaleTo	access:protected
CCScaleTo::m_fDeltaY	actions/CCActionInterval.h	/^    float m_fDeltaY;$/;"	m	class:CCScaleTo	access:protected
CCScaleTo::m_fEndScaleX	actions/CCActionInterval.h	/^    float m_fEndScaleX;$/;"	m	class:CCScaleTo	access:protected
CCScaleTo::m_fEndScaleY	actions/CCActionInterval.h	/^    float m_fEndScaleY;$/;"	m	class:CCScaleTo	access:protected
CCScaleTo::m_fScaleX	actions/CCActionInterval.h	/^    float m_fScaleX;$/;"	m	class:CCScaleTo	access:protected
CCScaleTo::m_fScaleY	actions/CCActionInterval.h	/^    float m_fScaleY;$/;"	m	class:CCScaleTo	access:protected
CCScaleTo::m_fStartScaleX	actions/CCActionInterval.h	/^    float m_fStartScaleX;$/;"	m	class:CCScaleTo	access:protected
CCScaleTo::m_fStartScaleY	actions/CCActionInterval.h	/^    float m_fStartScaleY;$/;"	m	class:CCScaleTo	access:protected
CCScaleTo::startWithTarget	actions/CCActionInterval.cpp	/^void CCScaleTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCScaleTo	signature:(CCNode *pTarget)
CCScaleTo::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCScaleTo	access:public	signature:(CCNode *pTarget)
CCScaleTo::update	actions/CCActionInterval.cpp	/^void CCScaleTo::update(float time)$/;"	f	class:CCScaleTo	signature:(float time)
CCScaleTo::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCScaleTo	access:public	signature:(float time)
CCScene	layers_scenes_transitions_nodes/CCScene.cpp	/^CCScene::CCScene()$/;"	f	class:CCScene	signature:()
CCScene	layers_scenes_transitions_nodes/CCScene.h	/^    CCScene();$/;"	p	class:CCScene	access:public	signature:()
CCScene	layers_scenes_transitions_nodes/CCScene.h	/^class CC_DLL CCScene : public CCNode$/;"	c	inherits:CCNode
CCScene::CCScene	layers_scenes_transitions_nodes/CCScene.cpp	/^CCScene::CCScene()$/;"	f	class:CCScene	signature:()
CCScene::CCScene	layers_scenes_transitions_nodes/CCScene.h	/^    CCScene();$/;"	p	class:CCScene	access:public	signature:()
CCScene::create	layers_scenes_transitions_nodes/CCScene.cpp	/^CCScene *CCScene::create()$/;"	f	class:CCScene	signature:()
CCScene::create	layers_scenes_transitions_nodes/CCScene.h	/^    static CCScene *create(void);$/;"	p	class:CCScene	access:public	signature:(void)
CCScene::init	layers_scenes_transitions_nodes/CCScene.cpp	/^bool CCScene::init()$/;"	f	class:CCScene	signature:()
CCScene::init	layers_scenes_transitions_nodes/CCScene.h	/^    bool init();$/;"	p	class:CCScene	access:public	signature:()
CCScene::~CCScene	layers_scenes_transitions_nodes/CCScene.cpp	/^CCScene::~CCScene()$/;"	f	class:CCScene	signature:()
CCScene::~CCScene	layers_scenes_transitions_nodes/CCScene.h	/^    virtual ~CCScene();$/;"	p	class:CCScene	access:public	signature:()
CCScheduler	CCScheduler.cpp	/^CCScheduler::CCScheduler(void)$/;"	f	class:CCScheduler	signature:(void)
CCScheduler	CCScheduler.h	/^    CCScheduler();$/;"	p	class:CCScheduler	access:public	signature:()
CCScheduler	CCScheduler.h	/^class CC_DLL CCScheduler : public CCObject$/;"	c	inherits:CCObject
CCScheduler::CCScheduler	CCScheduler.cpp	/^CCScheduler::CCScheduler(void)$/;"	f	class:CCScheduler	signature:(void)
CCScheduler::CCScheduler	CCScheduler.h	/^    CCScheduler();$/;"	p	class:CCScheduler	access:public	signature:()
CCScheduler::appendIn	CCScheduler.cpp	/^void CCScheduler::appendIn(_listEntry **ppList, CCObject *pTarget, bool bPaused)$/;"	f	class:CCScheduler	signature:(_listEntry **ppList, CCObject *pTarget, bool bPaused)
CCScheduler::appendIn	CCScheduler.h	/^    void appendIn(struct _listEntry **ppList, CCObject *pTarget, bool bPaused);$/;"	p	class:CCScheduler	access:private	signature:(struct _listEntry **ppList, CCObject *pTarget, bool bPaused)
CCScheduler::getTimeScale	CCScheduler.h	/^    inline float getTimeScale(void) { return m_fTimeScale; }$/;"	f	class:CCScheduler	access:public	signature:(void)
CCScheduler::isTargetPaused	CCScheduler.cpp	/^bool CCScheduler::isTargetPaused(CCObject *pTarget)$/;"	f	class:CCScheduler	signature:(CCObject *pTarget)
CCScheduler::isTargetPaused	CCScheduler.h	/^    bool isTargetPaused(CCObject *pTarget);$/;"	p	class:CCScheduler	access:public	signature:(CCObject *pTarget)
CCScheduler::m_bCurrentTargetSalvaged	CCScheduler.h	/^    bool m_bCurrentTargetSalvaged;$/;"	m	class:CCScheduler	access:protected
CCScheduler::m_bUpdateHashLocked	CCScheduler.h	/^    bool m_bUpdateHashLocked;$/;"	m	class:CCScheduler	access:protected
CCScheduler::m_fTimeScale	CCScheduler.h	/^    float m_fTimeScale;$/;"	m	class:CCScheduler	access:protected
CCScheduler::m_pCurrentTarget	CCScheduler.h	/^    struct _hashSelectorEntry *m_pCurrentTarget;$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_hashSelectorEntry	access:protected
CCScheduler::m_pHashForTimers	CCScheduler.h	/^    struct _hashSelectorEntry *m_pHashForTimers;$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_hashSelectorEntry	access:protected
CCScheduler::m_pHashForUpdates	CCScheduler.h	/^    struct _hashUpdateEntry *m_pHashForUpdates; \/\/ hash used to fetch quickly the list entries for pause,delete,etc$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_hashUpdateEntry	access:protected
CCScheduler::m_pScriptHandlerEntries	CCScheduler.h	/^    CCArray* m_pScriptHandlerEntries;$/;"	m	class:CCScheduler	access:protected
CCScheduler::m_pUpdates0List	CCScheduler.h	/^    struct _listEntry *m_pUpdates0List;            \/\/ list priority == 0$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_listEntry	access:protected
CCScheduler::m_pUpdatesNegList	CCScheduler.h	/^    struct _listEntry *m_pUpdatesNegList;        \/\/ list of priority < 0$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_listEntry	access:protected
CCScheduler::m_pUpdatesPosList	CCScheduler.h	/^    struct _listEntry *m_pUpdatesPosList;        \/\/ list priority > 0$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_listEntry	access:protected
CCScheduler::pauseAllTargets	CCScheduler.cpp	/^CCSet* CCScheduler::pauseAllTargets()$/;"	f	class:CCScheduler	signature:()
CCScheduler::pauseAllTargets	CCScheduler.h	/^    CCSet* pauseAllTargets();$/;"	p	class:CCScheduler	access:public	signature:()
CCScheduler::pauseAllTargetsWithMinPriority	CCScheduler.cpp	/^CCSet* CCScheduler::pauseAllTargetsWithMinPriority(int nMinPriority)$/;"	f	class:CCScheduler	signature:(int nMinPriority)
CCScheduler::pauseAllTargetsWithMinPriority	CCScheduler.h	/^    CCSet* pauseAllTargetsWithMinPriority(int nMinPriority);$/;"	p	class:CCScheduler	access:public	signature:(int nMinPriority)
CCScheduler::pauseTarget	CCScheduler.cpp	/^void CCScheduler::pauseTarget(CCObject *pTarget)$/;"	f	class:CCScheduler	signature:(CCObject *pTarget)
CCScheduler::pauseTarget	CCScheduler.h	/^    void pauseTarget(CCObject *pTarget);$/;"	p	class:CCScheduler	access:public	signature:(CCObject *pTarget)
CCScheduler::priorityIn	CCScheduler.cpp	/^void CCScheduler::priorityIn(tListEntry **ppList, CCObject *pTarget, int nPriority, bool bPaused)$/;"	f	class:CCScheduler	signature:(tListEntry **ppList, CCObject *pTarget, int nPriority, bool bPaused)
CCScheduler::priorityIn	CCScheduler.h	/^    void priorityIn(struct _listEntry **ppList, CCObject *pTarget, int nPriority, bool bPaused);$/;"	p	class:CCScheduler	access:private	signature:(struct _listEntry **ppList, CCObject *pTarget, int nPriority, bool bPaused)
CCScheduler::removeHashElement	CCScheduler.cpp	/^void CCScheduler::removeHashElement(_hashSelectorEntry *pElement)$/;"	f	class:CCScheduler	signature:(_hashSelectorEntry *pElement)
CCScheduler::removeHashElement	CCScheduler.h	/^    void removeHashElement(struct _hashSelectorEntry *pElement);$/;"	p	class:CCScheduler	access:private	signature:(struct _hashSelectorEntry *pElement)
CCScheduler::removeUpdateFromHash	CCScheduler.cpp	/^void CCScheduler::removeUpdateFromHash(struct _listEntry *entry)$/;"	f	class:CCScheduler	signature:(struct _listEntry *entry)
CCScheduler::removeUpdateFromHash	CCScheduler.h	/^    void removeUpdateFromHash(struct _listEntry *entry);$/;"	p	class:CCScheduler	access:private	signature:(struct _listEntry *entry)
CCScheduler::resumeTarget	CCScheduler.cpp	/^void CCScheduler::resumeTarget(CCObject *pTarget)$/;"	f	class:CCScheduler	signature:(CCObject *pTarget)
CCScheduler::resumeTarget	CCScheduler.h	/^    void resumeTarget(CCObject *pTarget);$/;"	p	class:CCScheduler	access:public	signature:(CCObject *pTarget)
CCScheduler::resumeTargets	CCScheduler.cpp	/^void CCScheduler::resumeTargets(CCSet* pTargetsToResume)$/;"	f	class:CCScheduler	signature:(CCSet* pTargetsToResume)
CCScheduler::resumeTargets	CCScheduler.h	/^    void resumeTargets(CCSet* targetsToResume);$/;"	p	class:CCScheduler	access:public	signature:(CCSet* targetsToResume)
CCScheduler::scheduleScriptFunc	CCScheduler.cpp	/^unsigned int CCScheduler::scheduleScriptFunc(unsigned int nHandler, float fInterval, bool bPaused)$/;"	f	class:CCScheduler	signature:(unsigned int nHandler, float fInterval, bool bPaused)
CCScheduler::scheduleScriptFunc	CCScheduler.h	/^    unsigned int scheduleScriptFunc(unsigned int nHandler, float fInterval, bool bPaused);$/;"	p	class:CCScheduler	access:public	signature:(unsigned int nHandler, float fInterval, bool bPaused)
CCScheduler::scheduleSelector	CCScheduler.cpp	/^void CCScheduler::scheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, bool bPaused)$/;"	f	class:CCScheduler	signature:(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, bool bPaused)
CCScheduler::scheduleSelector	CCScheduler.cpp	/^void CCScheduler::scheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, unsigned int repeat, float delay, bool bPaused)$/;"	f	class:CCScheduler	signature:(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, unsigned int repeat, float delay, bool bPaused)
CCScheduler::scheduleSelector	CCScheduler.h	/^    void scheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, bool bPaused);$/;"	p	class:CCScheduler	access:public	signature:(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, bool bPaused)
CCScheduler::scheduleSelector	CCScheduler.h	/^    void scheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, unsigned int repeat, float delay, bool bPaused);$/;"	p	class:CCScheduler	access:public	signature:(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, unsigned int repeat, float delay, bool bPaused)
CCScheduler::scheduleUpdateForTarget	CCScheduler.cpp	/^void CCScheduler::scheduleUpdateForTarget(CCObject *pTarget, int nPriority, bool bPaused)$/;"	f	class:CCScheduler	signature:(CCObject *pTarget, int nPriority, bool bPaused)
CCScheduler::scheduleUpdateForTarget	CCScheduler.h	/^    void scheduleUpdateForTarget(CCObject *pTarget, int nPriority, bool bPaused);$/;"	p	class:CCScheduler	access:public	signature:(CCObject *pTarget, int nPriority, bool bPaused)
CCScheduler::setTimeScale	CCScheduler.h	/^    inline void setTimeScale(float fTimeScale) { m_fTimeScale = fTimeScale; }$/;"	f	class:CCScheduler	access:public	signature:(float fTimeScale)
CCScheduler::unscheduleAll	CCScheduler.cpp	/^void CCScheduler::unscheduleAll(void)$/;"	f	class:CCScheduler	signature:(void)
CCScheduler::unscheduleAll	CCScheduler.h	/^    void unscheduleAll(void);$/;"	p	class:CCScheduler	access:public	signature:(void)
CCScheduler::unscheduleAllForTarget	CCScheduler.cpp	/^void CCScheduler::unscheduleAllForTarget(CCObject *pTarget)$/;"	f	class:CCScheduler	signature:(CCObject *pTarget)
CCScheduler::unscheduleAllForTarget	CCScheduler.h	/^    void unscheduleAllForTarget(CCObject *pTarget);$/;"	p	class:CCScheduler	access:public	signature:(CCObject *pTarget)
CCScheduler::unscheduleAllWithMinPriority	CCScheduler.cpp	/^void CCScheduler::unscheduleAllWithMinPriority(int nMinPriority)$/;"	f	class:CCScheduler	signature:(int nMinPriority)
CCScheduler::unscheduleAllWithMinPriority	CCScheduler.h	/^    void unscheduleAllWithMinPriority(int nMinPriority);$/;"	p	class:CCScheduler	access:public	signature:(int nMinPriority)
CCScheduler::unscheduleScriptEntry	CCScheduler.cpp	/^void CCScheduler::unscheduleScriptEntry(unsigned int uScheduleScriptEntryID)$/;"	f	class:CCScheduler	signature:(unsigned int uScheduleScriptEntryID)
CCScheduler::unscheduleScriptEntry	CCScheduler.h	/^    void unscheduleScriptEntry(unsigned int uScheduleScriptEntryID);$/;"	p	class:CCScheduler	access:public	signature:(unsigned int uScheduleScriptEntryID)
CCScheduler::unscheduleSelector	CCScheduler.cpp	/^void CCScheduler::unscheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget)$/;"	f	class:CCScheduler	signature:(SEL_SCHEDULE pfnSelector, CCObject *pTarget)
CCScheduler::unscheduleSelector	CCScheduler.h	/^    void unscheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget);$/;"	p	class:CCScheduler	access:public	signature:(SEL_SCHEDULE pfnSelector, CCObject *pTarget)
CCScheduler::unscheduleUpdateForTarget	CCScheduler.cpp	/^void CCScheduler::unscheduleUpdateForTarget(const CCObject *pTarget)$/;"	f	class:CCScheduler	signature:(const CCObject *pTarget)
CCScheduler::unscheduleUpdateForTarget	CCScheduler.h	/^    void unscheduleUpdateForTarget(const CCObject *pTarget);$/;"	p	class:CCScheduler	access:public	signature:(const CCObject *pTarget)
CCScheduler::update	CCScheduler.cpp	/^void CCScheduler::update(float dt)$/;"	f	class:CCScheduler	signature:(float dt)
CCScheduler::update	CCScheduler.h	/^    void update(float dt);$/;"	p	class:CCScheduler	access:public	signature:(float dt)
CCScheduler::~CCScheduler	CCScheduler.cpp	/^CCScheduler::~CCScheduler(void)$/;"	f	class:CCScheduler	signature:(void)
CCScheduler::~CCScheduler	CCScheduler.h	/^    ~CCScheduler(void);$/;"	p	class:CCScheduler	access:public	signature:(void)
CCSchedulerScriptHandlerEntry	script_support/CCScriptSupport.h	/^    CCSchedulerScriptHandlerEntry(int nHandler)$/;"	f	class:CCSchedulerScriptHandlerEntry	access:private	signature:(int nHandler)
CCSchedulerScriptHandlerEntry	script_support/CCScriptSupport.h	/^class CCSchedulerScriptHandlerEntry : public CCScriptHandlerEntry$/;"	c	inherits:CCScriptHandlerEntry
CCSchedulerScriptHandlerEntry::CCSchedulerScriptHandlerEntry	script_support/CCScriptSupport.h	/^    CCSchedulerScriptHandlerEntry(int nHandler)$/;"	f	class:CCSchedulerScriptHandlerEntry	access:private	signature:(int nHandler)
CCSchedulerScriptHandlerEntry::create	script_support/CCScriptSupport.cpp	/^CCSchedulerScriptHandlerEntry* CCSchedulerScriptHandlerEntry::create(int nHandler, float fInterval, bool bPaused)$/;"	f	class:CCSchedulerScriptHandlerEntry	signature:(int nHandler, float fInterval, bool bPaused)
CCSchedulerScriptHandlerEntry::create	script_support/CCScriptSupport.h	/^    static CCSchedulerScriptHandlerEntry* create(int nHandler, float fInterval, bool bPaused);$/;"	p	class:CCSchedulerScriptHandlerEntry	access:public	signature:(int nHandler, float fInterval, bool bPaused)
CCSchedulerScriptHandlerEntry::getTimer	script_support/CCScriptSupport.h	/^    cocos2d::CCTimer* getTimer(void) {$/;"	f	class:CCSchedulerScriptHandlerEntry	access:public	signature:(void)
CCSchedulerScriptHandlerEntry::init	script_support/CCScriptSupport.cpp	/^bool CCSchedulerScriptHandlerEntry::init(float fInterval, bool bPaused)$/;"	f	class:CCSchedulerScriptHandlerEntry	signature:(float fInterval, bool bPaused)
CCSchedulerScriptHandlerEntry::init	script_support/CCScriptSupport.h	/^    bool init(float fInterval, bool bPaused);$/;"	p	class:CCSchedulerScriptHandlerEntry	access:private	signature:(float fInterval, bool bPaused)
CCSchedulerScriptHandlerEntry::isMarkedForDeletion	script_support/CCScriptSupport.h	/^    bool isMarkedForDeletion(void) {$/;"	f	class:CCSchedulerScriptHandlerEntry	access:public	signature:(void)
CCSchedulerScriptHandlerEntry::isPaused	script_support/CCScriptSupport.h	/^    bool isPaused(void) {$/;"	f	class:CCSchedulerScriptHandlerEntry	access:public	signature:(void)
CCSchedulerScriptHandlerEntry::m_bMarkedForDeletion	script_support/CCScriptSupport.h	/^    bool                m_bMarkedForDeletion;$/;"	m	class:CCSchedulerScriptHandlerEntry	access:private
CCSchedulerScriptHandlerEntry::m_bPaused	script_support/CCScriptSupport.h	/^    bool                m_bPaused;$/;"	m	class:CCSchedulerScriptHandlerEntry	access:private
CCSchedulerScriptHandlerEntry::m_pTimer	script_support/CCScriptSupport.h	/^    cocos2d::CCTimer*   m_pTimer;$/;"	m	class:CCSchedulerScriptHandlerEntry	access:private
CCSchedulerScriptHandlerEntry::markedForDeletion	script_support/CCScriptSupport.h	/^    void markedForDeletion(void) {$/;"	f	class:CCSchedulerScriptHandlerEntry	access:public	signature:(void)
CCSchedulerScriptHandlerEntry::~CCSchedulerScriptHandlerEntry	script_support/CCScriptSupport.cpp	/^CCSchedulerScriptHandlerEntry::~CCSchedulerScriptHandlerEntry(void)$/;"	f	class:CCSchedulerScriptHandlerEntry	signature:(void)
CCSchedulerScriptHandlerEntry::~CCSchedulerScriptHandlerEntry	script_support/CCScriptSupport.h	/^    ~CCSchedulerScriptHandlerEntry(void);$/;"	p	class:CCSchedulerScriptHandlerEntry	access:public	signature:(void)
CCScriptEngineManager	script_support/CCScriptSupport.h	/^    CCScriptEngineManager(void)$/;"	f	class:CCScriptEngineManager	access:private	signature:(void)
CCScriptEngineManager	script_support/CCScriptSupport.h	/^class CC_DLL CCScriptEngineManager$/;"	c
CCScriptEngineManager::CCScriptEngineManager	script_support/CCScriptSupport.h	/^    CCScriptEngineManager(void)$/;"	f	class:CCScriptEngineManager	access:private	signature:(void)
CCScriptEngineManager::getScriptEngine	script_support/CCScriptSupport.h	/^    CCScriptEngineProtocol* getScriptEngine(void) {$/;"	f	class:CCScriptEngineManager	access:public	signature:(void)
CCScriptEngineManager::m_pScriptEngine	script_support/CCScriptSupport.h	/^    CCScriptEngineProtocol *m_pScriptEngine;$/;"	m	class:CCScriptEngineManager	access:private
CCScriptEngineManager::purgeSharedManager	script_support/CCScriptSupport.cpp	/^void CCScriptEngineManager::purgeSharedManager(void)$/;"	f	class:CCScriptEngineManager	signature:(void)
CCScriptEngineManager::purgeSharedManager	script_support/CCScriptSupport.h	/^    static void purgeSharedManager(void);$/;"	p	class:CCScriptEngineManager	access:public	signature:(void)
CCScriptEngineManager::removeScriptEngine	script_support/CCScriptSupport.cpp	/^void CCScriptEngineManager::removeScriptEngine(void)$/;"	f	class:CCScriptEngineManager	signature:(void)
CCScriptEngineManager::removeScriptEngine	script_support/CCScriptSupport.h	/^    void removeScriptEngine(void);$/;"	p	class:CCScriptEngineManager	access:public	signature:(void)
CCScriptEngineManager::setScriptEngine	script_support/CCScriptSupport.cpp	/^void CCScriptEngineManager::setScriptEngine(CCScriptEngineProtocol *pScriptEngine)$/;"	f	class:CCScriptEngineManager	signature:(CCScriptEngineProtocol *pScriptEngine)
CCScriptEngineManager::setScriptEngine	script_support/CCScriptSupport.h	/^    void setScriptEngine(CCScriptEngineProtocol *pScriptEngine);$/;"	p	class:CCScriptEngineManager	access:public	signature:(CCScriptEngineProtocol *pScriptEngine)
CCScriptEngineManager::sharedManager	script_support/CCScriptSupport.cpp	/^CCScriptEngineManager* CCScriptEngineManager::sharedManager(void)$/;"	f	class:CCScriptEngineManager	signature:(void)
CCScriptEngineManager::sharedManager	script_support/CCScriptSupport.h	/^    static CCScriptEngineManager* sharedManager(void);$/;"	p	class:CCScriptEngineManager	access:public	signature:(void)
CCScriptEngineManager::~CCScriptEngineManager	script_support/CCScriptSupport.cpp	/^CCScriptEngineManager::~CCScriptEngineManager(void)$/;"	f	class:CCScriptEngineManager	signature:(void)
CCScriptEngineManager::~CCScriptEngineManager	script_support/CCScriptSupport.h	/^    ~CCScriptEngineManager(void);$/;"	p	class:CCScriptEngineManager	access:public	signature:(void)
CCScriptEngineProtocol	script_support/CCScriptSupport.h	/^class CC_DLL CCScriptEngineProtocol$/;"	c
CCScriptEngineProtocol::executeAccelerometerEvent	script_support/CCScriptSupport.h	/^    virtual int executeAccelerometerEvent(CCLayer* pLayer, CCAcceleration* pAccelerationValue) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCLayer* pLayer, CCAcceleration* pAccelerationValue)
CCScriptEngineProtocol::executeAssert	script_support/CCScriptSupport.h	/^    virtual bool executeAssert(bool cond, const char *msg = NULL) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(bool cond, const char *msg = NULL)
CCScriptEngineProtocol::executeCallFuncActionEvent	script_support/CCScriptSupport.h	/^    virtual int executeCallFuncActionEvent(CCCallFunc* pAction, CCObject* pTarget = NULL) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCCallFunc* pAction, CCObject* pTarget = NULL)
CCScriptEngineProtocol::executeEvent	script_support/CCScriptSupport.h	/^    virtual int executeEvent(int nHandler, const char* pEventName, CCObject* pEventSource = NULL, const char* pEventSourceClassName = NULL) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(int nHandler, const char* pEventName, CCObject* pEventSource = NULL, const char* pEventSourceClassName = NULL)
CCScriptEngineProtocol::executeGlobalFunction	script_support/CCScriptSupport.h	/^    virtual int executeGlobalFunction(const char* functionName) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(const char* functionName)
CCScriptEngineProtocol::executeLayerKeypadEvent	script_support/CCScriptSupport.h	/^    virtual int executeLayerKeypadEvent(CCLayer* pLayer, int eventType) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCLayer* pLayer, int eventType)
CCScriptEngineProtocol::executeLayerTouchEvent	script_support/CCScriptSupport.h	/^    virtual int executeLayerTouchEvent(CCLayer* pLayer, int eventType, CCTouch *pTouch) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCLayer* pLayer, int eventType, CCTouch *pTouch)
CCScriptEngineProtocol::executeLayerTouchesEvent	script_support/CCScriptSupport.h	/^    virtual int executeLayerTouchesEvent(CCLayer* pLayer, int eventType, CCSet *pTouches) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCLayer* pLayer, int eventType, CCSet *pTouches)
CCScriptEngineProtocol::executeMenuItemEvent	script_support/CCScriptSupport.h	/^    virtual int executeMenuItemEvent(CCMenuItem* pMenuItem) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCMenuItem* pMenuItem)
CCScriptEngineProtocol::executeNodeEvent	script_support/CCScriptSupport.h	/^    virtual int executeNodeEvent(CCNode* pNode, int nAction) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCNode* pNode, int nAction)
CCScriptEngineProtocol::executeNotificationEvent	script_support/CCScriptSupport.h	/^    virtual int executeNotificationEvent(CCNotificationCenter* pNotificationCenter, const char* pszName) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCNotificationCenter* pNotificationCenter, const char* pszName)
CCScriptEngineProtocol::executeSchedule	script_support/CCScriptSupport.h	/^    virtual int executeSchedule(int nHandler, float dt, CCNode* pNode = NULL) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(int nHandler, float dt, CCNode* pNode = NULL)
CCScriptEngineProtocol::executeScriptFile	script_support/CCScriptSupport.h	/^    virtual int executeScriptFile(const char* filename) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(const char* filename)
CCScriptEngineProtocol::executeString	script_support/CCScriptSupport.h	/^    virtual int executeString(const char* codes) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(const char* codes)
CCScriptEngineProtocol::getScriptType	script_support/CCScriptSupport.h	/^    virtual ccScriptType getScriptType() { return kScriptTypeNone; };$/;"	f	class:CCScriptEngineProtocol	access:public	signature:()
CCScriptEngineProtocol::removeScriptHandler	script_support/CCScriptSupport.h	/^    virtual void removeScriptHandler(int nHandler) {};$/;"	f	class:CCScriptEngineProtocol	access:public	signature:(int nHandler)
CCScriptEngineProtocol::removeScriptObjectByCCObject	script_support/CCScriptSupport.h	/^    virtual void removeScriptObjectByCCObject(CCObject* pObj) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCObject* pObj)
CCScriptEngineProtocol::~CCScriptEngineProtocol	script_support/CCScriptSupport.h	/^    virtual ~CCScriptEngineProtocol() {};$/;"	f	class:CCScriptEngineProtocol	access:public	signature:()
CCScriptHandlerEntry	script_support/CCScriptSupport.h	/^    CCScriptHandlerEntry(int nHandler)$/;"	f	class:CCScriptHandlerEntry	access:protected	signature:(int nHandler)
CCScriptHandlerEntry	script_support/CCScriptSupport.h	/^class CCScriptHandlerEntry : public CCObject$/;"	c	inherits:CCObject
CCScriptHandlerEntry::CCScriptHandlerEntry	script_support/CCScriptSupport.h	/^    CCScriptHandlerEntry(int nHandler)$/;"	f	class:CCScriptHandlerEntry	access:protected	signature:(int nHandler)
CCScriptHandlerEntry::create	script_support/CCScriptSupport.cpp	/^CCScriptHandlerEntry* CCScriptHandlerEntry::create(int nHandler)$/;"	f	class:CCScriptHandlerEntry	signature:(int nHandler)
CCScriptHandlerEntry::create	script_support/CCScriptSupport.h	/^    static CCScriptHandlerEntry* create(int nHandler);$/;"	p	class:CCScriptHandlerEntry	access:public	signature:(int nHandler)
CCScriptHandlerEntry::getEntryId	script_support/CCScriptSupport.h	/^    int getEntryId(void) {$/;"	f	class:CCScriptHandlerEntry	access:public	signature:(void)
CCScriptHandlerEntry::getHandler	script_support/CCScriptSupport.h	/^    int getHandler(void) {$/;"	f	class:CCScriptHandlerEntry	access:public	signature:(void)
CCScriptHandlerEntry::m_nEntryId	script_support/CCScriptSupport.h	/^    int m_nEntryId;$/;"	m	class:CCScriptHandlerEntry	access:protected
CCScriptHandlerEntry::m_nHandler	script_support/CCScriptSupport.h	/^    int m_nHandler;$/;"	m	class:CCScriptHandlerEntry	access:protected
CCScriptHandlerEntry::~CCScriptHandlerEntry	script_support/CCScriptSupport.cpp	/^CCScriptHandlerEntry::~CCScriptHandlerEntry(void)$/;"	f	class:CCScriptHandlerEntry	signature:(void)
CCScriptHandlerEntry::~CCScriptHandlerEntry	script_support/CCScriptSupport.h	/^    ~CCScriptHandlerEntry(void);$/;"	p	class:CCScriptHandlerEntry	access:public	signature:(void)
CCSequence	actions/CCActionInterval.h	/^class CC_DLL CCSequence : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCSequence::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCSequence::copyWithZone(CCZone *pZone)$/;"	f	class:CCSequence	signature:(CCZone *pZone)
CCSequence::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCSequence	access:public	signature:(CCZone* pZone)
CCSequence::create	actions/CCActionInterval.cpp	/^CCSequence* CCSequence::create(CCArray* arrayOfActions)$/;"	f	class:CCSequence	signature:(CCArray* arrayOfActions)
CCSequence::create	actions/CCActionInterval.cpp	/^CCSequence* CCSequence::create(CCFiniteTimeAction *pAction1, ...)$/;"	f	class:CCSequence	signature:(CCFiniteTimeAction *pAction1, ...)
CCSequence::create	actions/CCActionInterval.h	/^    static CCSequence* create(CCArray *arrayOfActions);$/;"	p	class:CCSequence	access:public	signature:(CCArray *arrayOfActions)
CCSequence::create	actions/CCActionInterval.h	/^    static CCSequence* create(CCFiniteTimeAction *pAction1, ...);$/;"	p	class:CCSequence	access:public	signature:(CCFiniteTimeAction *pAction1, ...)
CCSequence::createWithTwoActions	actions/CCActionInterval.cpp	/^CCSequence* CCSequence::createWithTwoActions(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)$/;"	f	class:CCSequence	signature:(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)
CCSequence::createWithTwoActions	actions/CCActionInterval.h	/^    static CCSequence* createWithTwoActions(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo);$/;"	p	class:CCSequence	access:public	signature:(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)
CCSequence::createWithVariableList	actions/CCActionInterval.cpp	/^CCSequence* CCSequence::createWithVariableList(CCFiniteTimeAction *pAction1, va_list args)$/;"	f	class:CCSequence	signature:(CCFiniteTimeAction *pAction1, va_list args)
CCSequence::createWithVariableList	actions/CCActionInterval.h	/^    static CCSequence* createWithVariableList(CCFiniteTimeAction *pAction1, va_list args);$/;"	p	class:CCSequence	access:public	signature:(CCFiniteTimeAction *pAction1, va_list args)
CCSequence::initWithTwoActions	actions/CCActionInterval.cpp	/^bool CCSequence::initWithTwoActions(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)$/;"	f	class:CCSequence	signature:(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)
CCSequence::initWithTwoActions	actions/CCActionInterval.h	/^    bool initWithTwoActions(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo);$/;"	p	class:CCSequence	access:public	signature:(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)
CCSequence::m_last	actions/CCActionInterval.h	/^    int m_last;$/;"	m	class:CCSequence	access:protected
CCSequence::m_pActions	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pActions[2];$/;"	m	class:CCSequence	access:protected
CCSequence::m_split	actions/CCActionInterval.h	/^    float m_split;$/;"	m	class:CCSequence	access:protected
CCSequence::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCSequence::reverse(void)$/;"	f	class:CCSequence	signature:(void)
CCSequence::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCSequence	access:public	signature:(void)
CCSequence::startWithTarget	actions/CCActionInterval.cpp	/^void CCSequence::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSequence	signature:(CCNode *pTarget)
CCSequence::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCSequence	access:public	signature:(CCNode *pTarget)
CCSequence::stop	actions/CCActionInterval.cpp	/^void CCSequence::stop(void)$/;"	f	class:CCSequence	signature:(void)
CCSequence::stop	actions/CCActionInterval.h	/^    virtual void stop(void);$/;"	p	class:CCSequence	access:public	signature:(void)
CCSequence::update	actions/CCActionInterval.cpp	/^void CCSequence::update(float t)$/;"	f	class:CCSequence	signature:(float t)
CCSequence::update	actions/CCActionInterval.h	/^    virtual void update(float t);$/;"	p	class:CCSequence	access:public	signature:(float t)
CCSequence::~CCSequence	actions/CCActionInterval.cpp	/^CCSequence::~CCSequence(void)$/;"	f	class:CCSequence	signature:(void)
CCSequence::~CCSequence	actions/CCActionInterval.h	/^    ~CCSequence(void);$/;"	p	class:CCSequence	access:public	signature:(void)
CCSet	cocoa/CCSet.cpp	/^CCSet::CCSet(const CCSet &rSetObject)$/;"	f	class:CCSet	signature:(const CCSet &rSetObject)
CCSet	cocoa/CCSet.cpp	/^CCSet::CCSet(void)$/;"	f	class:CCSet	signature:(void)
CCSet	cocoa/CCSet.h	/^    CCSet(const CCSet &rSetObject);$/;"	p	class:CCSet	access:public	signature:(const CCSet &rSetObject)
CCSet	cocoa/CCSet.h	/^    CCSet(void);$/;"	p	class:CCSet	access:public	signature:(void)
CCSet	cocoa/CCSet.h	/^class CC_DLL CCSet : public CCObject$/;"	c	inherits:CCObject
CCSet::CCSet	cocoa/CCSet.cpp	/^CCSet::CCSet(const CCSet &rSetObject)$/;"	f	class:CCSet	signature:(const CCSet &rSetObject)
CCSet::CCSet	cocoa/CCSet.cpp	/^CCSet::CCSet(void)$/;"	f	class:CCSet	signature:(void)
CCSet::CCSet	cocoa/CCSet.h	/^    CCSet(const CCSet &rSetObject);$/;"	p	class:CCSet	access:public	signature:(const CCSet &rSetObject)
CCSet::CCSet	cocoa/CCSet.h	/^    CCSet(void);$/;"	p	class:CCSet	access:public	signature:(void)
CCSet::addObject	cocoa/CCSet.cpp	/^void CCSet::addObject(CCObject *pObject)$/;"	f	class:CCSet	signature:(CCObject *pObject)
CCSet::addObject	cocoa/CCSet.h	/^    void addObject(CCObject *pObject);$/;"	p	class:CCSet	access:public	signature:(CCObject *pObject)
CCSet::anyObject	cocoa/CCSet.cpp	/^CCObject* CCSet::anyObject()$/;"	f	class:CCSet	signature:()
CCSet::anyObject	cocoa/CCSet.h	/^    CCObject* anyObject();$/;"	p	class:CCSet	access:public	signature:()
CCSet::begin	cocoa/CCSet.cpp	/^CCSetIterator CCSet::begin(void)$/;"	f	class:CCSet	signature:(void)
CCSet::begin	cocoa/CCSet.h	/^    CCSetIterator begin();$/;"	p	class:CCSet	access:public	signature:()
CCSet::containsObject	cocoa/CCSet.cpp	/^bool CCSet::containsObject(CCObject *pObject)$/;"	f	class:CCSet	signature:(CCObject *pObject)
CCSet::containsObject	cocoa/CCSet.h	/^    bool containsObject(CCObject *pObject);$/;"	p	class:CCSet	access:public	signature:(CCObject *pObject)
CCSet::copy	cocoa/CCSet.cpp	/^CCSet* CCSet::copy(void)$/;"	f	class:CCSet	signature:(void)
CCSet::copy	cocoa/CCSet.h	/^    CCSet* copy();$/;"	p	class:CCSet	access:public	signature:()
CCSet::count	cocoa/CCSet.cpp	/^int CCSet::count(void)$/;"	f	class:CCSet	signature:(void)
CCSet::count	cocoa/CCSet.h	/^    int count();$/;"	p	class:CCSet	access:public	signature:()
CCSet::create	cocoa/CCSet.cpp	/^CCSet * CCSet::create()$/;"	f	class:CCSet	signature:()
CCSet::create	cocoa/CCSet.h	/^    static CCSet * create();$/;"	p	class:CCSet	access:public	signature:()
CCSet::end	cocoa/CCSet.cpp	/^CCSetIterator CCSet::end(void)$/;"	f	class:CCSet	signature:(void)
CCSet::end	cocoa/CCSet.h	/^    CCSetIterator end();$/;"	p	class:CCSet	access:public	signature:()
CCSet::m_pSet	cocoa/CCSet.h	/^    std::set<CCObject *> *m_pSet;$/;"	m	class:CCSet	access:private
CCSet::mutableCopy	cocoa/CCSet.cpp	/^CCSet* CCSet::mutableCopy(void)$/;"	f	class:CCSet	signature:(void)
CCSet::mutableCopy	cocoa/CCSet.h	/^    CCSet* mutableCopy();$/;"	p	class:CCSet	access:public	signature:()
CCSet::removeAllObjects	cocoa/CCSet.cpp	/^void CCSet::removeAllObjects()$/;"	f	class:CCSet	signature:()
CCSet::removeAllObjects	cocoa/CCSet.h	/^    void removeAllObjects();$/;"	p	class:CCSet	access:public	signature:()
CCSet::removeObject	cocoa/CCSet.cpp	/^void CCSet::removeObject(CCObject *pObject)$/;"	f	class:CCSet	signature:(CCObject *pObject)
CCSet::removeObject	cocoa/CCSet.h	/^    void removeObject(CCObject *pObject);$/;"	p	class:CCSet	access:public	signature:(CCObject *pObject)
CCSet::~CCSet	cocoa/CCSet.cpp	/^CCSet::~CCSet(void)$/;"	f	class:CCSet	signature:(void)
CCSet::~CCSet	cocoa/CCSet.h	/^    virtual ~CCSet(void);$/;"	p	class:CCSet	access:public	signature:(void)
CCSetIterator	cocoa/CCSet.h	/^typedef std::set<CCObject *>::iterator CCSetIterator;$/;"	t
CCShaderCache	shaders/CCShaderCache.cpp	/^CCShaderCache::CCShaderCache()$/;"	f	class:CCShaderCache	signature:()
CCShaderCache	shaders/CCShaderCache.h	/^    CCShaderCache();$/;"	p	class:CCShaderCache	access:public	signature:()
CCShaderCache	shaders/CCShaderCache.h	/^class CC_DLL CCShaderCache : public CCObject $/;"	c	inherits:CCObject
CCShaderCache::CCShaderCache	shaders/CCShaderCache.cpp	/^CCShaderCache::CCShaderCache()$/;"	f	class:CCShaderCache	signature:()
CCShaderCache::CCShaderCache	shaders/CCShaderCache.h	/^    CCShaderCache();$/;"	p	class:CCShaderCache	access:public	signature:()
CCShaderCache::addProgram	shaders/CCShaderCache.cpp	/^void CCShaderCache::addProgram(CCGLProgram* program, const char* key)$/;"	f	class:CCShaderCache	signature:(CCGLProgram* program, const char* key)
CCShaderCache::addProgram	shaders/CCShaderCache.h	/^    void addProgram(CCGLProgram* program, const char* key);$/;"	p	class:CCShaderCache	access:public	signature:(CCGLProgram* program, const char* key)
CCShaderCache::init	shaders/CCShaderCache.cpp	/^bool CCShaderCache::init()$/;"	f	class:CCShaderCache	signature:()
CCShaderCache::init	shaders/CCShaderCache.h	/^    bool init();$/;"	p	class:CCShaderCache	access:private	signature:()
CCShaderCache::loadDefaultShader	shaders/CCShaderCache.cpp	/^void CCShaderCache::loadDefaultShader(CCGLProgram *p, int type)$/;"	f	class:CCShaderCache	signature:(CCGLProgram *p, int type)
CCShaderCache::loadDefaultShader	shaders/CCShaderCache.h	/^    void loadDefaultShader(CCGLProgram *program, int type);$/;"	p	class:CCShaderCache	access:private	signature:(CCGLProgram *program, int type)
CCShaderCache::loadDefaultShaders	shaders/CCShaderCache.cpp	/^void CCShaderCache::loadDefaultShaders()$/;"	f	class:CCShaderCache	signature:()
CCShaderCache::loadDefaultShaders	shaders/CCShaderCache.h	/^    void loadDefaultShaders();$/;"	p	class:CCShaderCache	access:public	signature:()
CCShaderCache::m_pPrograms	shaders/CCShaderCache.h	/^    CCDictionary* m_pPrograms;$/;"	m	class:CCShaderCache	access:private
CCShaderCache::programForKey	shaders/CCShaderCache.cpp	/^CCGLProgram* CCShaderCache::programForKey(const char* key)$/;"	f	class:CCShaderCache	signature:(const char* key)
CCShaderCache::programForKey	shaders/CCShaderCache.h	/^    CCGLProgram * programForKey(const char* key);$/;"	p	class:CCShaderCache	access:public	signature:(const char* key)
CCShaderCache::purgeSharedShaderCache	shaders/CCShaderCache.cpp	/^void CCShaderCache::purgeSharedShaderCache()$/;"	f	class:CCShaderCache	signature:()
CCShaderCache::purgeSharedShaderCache	shaders/CCShaderCache.h	/^    static void purgeSharedShaderCache();$/;"	p	class:CCShaderCache	access:public	signature:()
CCShaderCache::reloadDefaultShaders	shaders/CCShaderCache.cpp	/^void CCShaderCache::reloadDefaultShaders()$/;"	f	class:CCShaderCache	signature:()
CCShaderCache::reloadDefaultShaders	shaders/CCShaderCache.h	/^    void reloadDefaultShaders();$/;"	p	class:CCShaderCache	access:public	signature:()
CCShaderCache::sharedShaderCache	shaders/CCShaderCache.cpp	/^CCShaderCache* CCShaderCache::sharedShaderCache()$/;"	f	class:CCShaderCache	signature:()
CCShaderCache::sharedShaderCache	shaders/CCShaderCache.h	/^    static CCShaderCache* sharedShaderCache();$/;"	p	class:CCShaderCache	access:public	signature:()
CCShaderCache::~CCShaderCache	shaders/CCShaderCache.cpp	/^CCShaderCache::~CCShaderCache()$/;"	f	class:CCShaderCache	signature:()
CCShaderCache::~CCShaderCache	shaders/CCShaderCache.h	/^    virtual ~CCShaderCache();$/;"	p	class:CCShaderCache	access:public	signature:()
CCShaky3D	actions/CCActionGrid3D.h	/^class CC_DLL CCShaky3D : public CCGrid3DAction$/;"	c	inherits:CCGrid3DAction
CCShaky3D::copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCShaky3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCShaky3D	signature:(CCZone *pZone)
CCShaky3D::copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCShaky3D	access:public	signature:(CCZone* pZone)
CCShaky3D::create	actions/CCActionGrid3D.cpp	/^CCShaky3D* CCShaky3D::create(float duration, const CCSize& gridSize, int range, bool shakeZ)$/;"	f	class:CCShaky3D	signature:(float duration, const CCSize& gridSize, int range, bool shakeZ)
CCShaky3D::create	actions/CCActionGrid3D.h	/^    static CCShaky3D* create(float duration, const CCSize& gridSize, int range, bool shakeZ);$/;"	p	class:CCShaky3D	access:public	signature:(float duration, const CCSize& gridSize, int range, bool shakeZ)
CCShaky3D::initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCShaky3D::initWithDuration(float duration, const CCSize& gridSize, int range, bool shakeZ)$/;"	f	class:CCShaky3D	signature:(float duration, const CCSize& gridSize, int range, bool shakeZ)
CCShaky3D::initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, int range, bool shakeZ);$/;"	p	class:CCShaky3D	access:public	signature:(float duration, const CCSize& gridSize, int range, bool shakeZ)
CCShaky3D::m_bShakeZ	actions/CCActionGrid3D.h	/^    bool m_bShakeZ;$/;"	m	class:CCShaky3D	access:protected
CCShaky3D::m_nRandrange	actions/CCActionGrid3D.h	/^    int m_nRandrange;$/;"	m	class:CCShaky3D	access:protected
CCShaky3D::update	actions/CCActionGrid3D.cpp	/^void CCShaky3D::update(float time)$/;"	f	class:CCShaky3D	signature:(float time)
CCShaky3D::update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCShaky3D	access:public	signature:(float time)
CCShakyTiles3D	actions/CCActionTiledGrid.h	/^class CC_DLL CCShakyTiles3D : public CCTiledGrid3DAction$/;"	c	inherits:CCTiledGrid3DAction
CCShakyTiles3D::copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCShakyTiles3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCShakyTiles3D	signature:(CCZone *pZone)
CCShakyTiles3D::copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCShakyTiles3D	access:public	signature:(CCZone* pZone)
CCShakyTiles3D::create	actions/CCActionTiledGrid.cpp	/^CCShakyTiles3D* CCShakyTiles3D::create(float duration, const CCSize& gridSize, int nRange, bool bShakeZ)$/;"	f	class:CCShakyTiles3D	signature:(float duration, const CCSize& gridSize, int nRange, bool bShakeZ)
CCShakyTiles3D::create	actions/CCActionTiledGrid.h	/^    static CCShakyTiles3D* create(float duration, const CCSize& gridSize, int nRange, bool bShakeZ);$/;"	p	class:CCShakyTiles3D	access:public	signature:(float duration, const CCSize& gridSize, int nRange, bool bShakeZ)
CCShakyTiles3D::initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCShakyTiles3D::initWithDuration(float duration, const CCSize& gridSize, int nRange, bool bShakeZ)$/;"	f	class:CCShakyTiles3D	signature:(float duration, const CCSize& gridSize, int nRange, bool bShakeZ)
CCShakyTiles3D::initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, const CCSize& gridSize, int nRange, bool bShakeZ);$/;"	p	class:CCShakyTiles3D	access:public	signature:(float duration, const CCSize& gridSize, int nRange, bool bShakeZ)
CCShakyTiles3D::m_bShakeZ	actions/CCActionTiledGrid.h	/^    bool m_bShakeZ;$/;"	m	class:CCShakyTiles3D	access:protected
CCShakyTiles3D::m_nRandrange	actions/CCActionTiledGrid.h	/^    int m_nRandrange;$/;"	m	class:CCShakyTiles3D	access:protected
CCShakyTiles3D::update	actions/CCActionTiledGrid.cpp	/^void CCShakyTiles3D::update(float time)$/;"	f	class:CCShakyTiles3D	signature:(float time)
CCShakyTiles3D::update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCShakyTiles3D	access:public	signature:(float time)
CCShatteredTiles3D	actions/CCActionTiledGrid.h	/^class CC_DLL CCShatteredTiles3D : public CCTiledGrid3DAction$/;"	c	inherits:CCTiledGrid3DAction
CCShatteredTiles3D::copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCShatteredTiles3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCShatteredTiles3D	signature:(CCZone *pZone)
CCShatteredTiles3D::copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCShatteredTiles3D	access:public	signature:(CCZone* pZone)
CCShatteredTiles3D::create	actions/CCActionTiledGrid.cpp	/^CCShatteredTiles3D* CCShatteredTiles3D::create(float duration, const CCSize& gridSize, int nRange, bool bShatterZ)$/;"	f	class:CCShatteredTiles3D	signature:(float duration, const CCSize& gridSize, int nRange, bool bShatterZ)
CCShatteredTiles3D::create	actions/CCActionTiledGrid.h	/^    static CCShatteredTiles3D* create(float duration, const CCSize& gridSize, int nRange, bool bShatterZ);$/;"	p	class:CCShatteredTiles3D	access:public	signature:(float duration, const CCSize& gridSize, int nRange, bool bShatterZ)
CCShatteredTiles3D::initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCShatteredTiles3D::initWithDuration(float duration, const CCSize& gridSize, int nRange, bool bShatterZ)$/;"	f	class:CCShatteredTiles3D	signature:(float duration, const CCSize& gridSize, int nRange, bool bShatterZ)
CCShatteredTiles3D::initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, const CCSize& gridSize, int nRange, bool bShatterZ);$/;"	p	class:CCShatteredTiles3D	access:public	signature:(float duration, const CCSize& gridSize, int nRange, bool bShatterZ)
CCShatteredTiles3D::m_bOnce	actions/CCActionTiledGrid.h	/^    bool m_bOnce;$/;"	m	class:CCShatteredTiles3D	access:protected
CCShatteredTiles3D::m_bShatterZ	actions/CCActionTiledGrid.h	/^    bool m_bShatterZ;$/;"	m	class:CCShatteredTiles3D	access:protected
CCShatteredTiles3D::m_nRandrange	actions/CCActionTiledGrid.h	/^    int m_nRandrange;$/;"	m	class:CCShatteredTiles3D	access:protected
CCShatteredTiles3D::update	actions/CCActionTiledGrid.cpp	/^void CCShatteredTiles3D::update(float time)$/;"	f	class:CCShatteredTiles3D	signature:(float time)
CCShatteredTiles3D::update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCShatteredTiles3D	access:public	signature:(float time)
CCShow	actions/CCActionInstant.h	/^    CCShow(){}$/;"	f	class:CCShow	access:public	signature:()
CCShow	actions/CCActionInstant.h	/^class CC_DLL CCShow : public CCActionInstant$/;"	c	inherits:CCActionInstant
CCShow::CCShow	actions/CCActionInstant.h	/^    CCShow(){}$/;"	f	class:CCShow	access:public	signature:()
CCShow::copyWithZone	actions/CCActionInstant.cpp	/^CCObject* CCShow::copyWithZone(CCZone *pZone) {$/;"	f	class:CCShow	signature:(CCZone *pZone)
CCShow::copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCShow	access:public	signature:(CCZone *pZone)
CCShow::create	actions/CCActionInstant.cpp	/^CCShow* CCShow::create() $/;"	f	class:CCShow	signature:()
CCShow::create	actions/CCActionInstant.h	/^    static CCShow * create();$/;"	p	class:CCShow	access:public	signature:()
CCShow::reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction* CCShow::reverse() {$/;"	f	class:CCShow	signature:()
CCShow::reverse	actions/CCActionInstant.h	/^    virtual CCFiniteTimeAction * reverse(void);$/;"	p	class:CCShow	access:public	signature:(void)
CCShow::update	actions/CCActionInstant.cpp	/^void CCShow::update(float time) {$/;"	f	class:CCShow	signature:(float time)
CCShow::update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCShow	access:public	signature:(float time)
CCShow::~CCShow	actions/CCActionInstant.h	/^    virtual ~CCShow(){}$/;"	f	class:CCShow	access:public	signature:()
CCShuffleTiles	actions/CCActionTiledGrid.h	/^class CC_DLL CCShuffleTiles : public CCTiledGrid3DAction$/;"	c	inherits:CCTiledGrid3DAction
CCShuffleTiles::copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCShuffleTiles::copyWithZone(CCZone *pZone)$/;"	f	class:CCShuffleTiles	signature:(CCZone *pZone)
CCShuffleTiles::copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCShuffleTiles	access:public	signature:(CCZone* pZone)
CCShuffleTiles::create	actions/CCActionTiledGrid.cpp	/^CCShuffleTiles* CCShuffleTiles::create(float duration, const CCSize& gridSize, unsigned int seed)$/;"	f	class:CCShuffleTiles	signature:(float duration, const CCSize& gridSize, unsigned int seed)
CCShuffleTiles::create	actions/CCActionTiledGrid.h	/^    static CCShuffleTiles* create(float duration, const CCSize& gridSize, unsigned int seed);$/;"	p	class:CCShuffleTiles	access:public	signature:(float duration, const CCSize& gridSize, unsigned int seed)
CCShuffleTiles::getDelta	actions/CCActionTiledGrid.cpp	/^CCSize CCShuffleTiles::getDelta(const CCSize& pos)$/;"	f	class:CCShuffleTiles	signature:(const CCSize& pos)
CCShuffleTiles::getDelta	actions/CCActionTiledGrid.h	/^    CCSize getDelta(const CCSize& pos);$/;"	p	class:CCShuffleTiles	access:public	signature:(const CCSize& pos)
CCShuffleTiles::initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCShuffleTiles::initWithDuration(float duration, const CCSize& gridSize, unsigned int seed)$/;"	f	class:CCShuffleTiles	signature:(float duration, const CCSize& gridSize, unsigned int seed)
CCShuffleTiles::initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, const CCSize& gridSize, unsigned int seed);$/;"	p	class:CCShuffleTiles	access:public	signature:(float duration, const CCSize& gridSize, unsigned int seed)
CCShuffleTiles::m_nSeed	actions/CCActionTiledGrid.h	/^    unsigned int m_nSeed;$/;"	m	class:CCShuffleTiles	access:protected
CCShuffleTiles::m_nTilesCount	actions/CCActionTiledGrid.h	/^    unsigned int m_nTilesCount;$/;"	m	class:CCShuffleTiles	access:protected
CCShuffleTiles::m_pTiles	actions/CCActionTiledGrid.h	/^    Tile* m_pTiles;$/;"	m	class:CCShuffleTiles	access:protected
CCShuffleTiles::m_pTilesOrder	actions/CCActionTiledGrid.h	/^    unsigned int* m_pTilesOrder;$/;"	m	class:CCShuffleTiles	access:protected
CCShuffleTiles::placeTile	actions/CCActionTiledGrid.cpp	/^void CCShuffleTiles::placeTile(const CCPoint& pos, Tile *t)$/;"	f	class:CCShuffleTiles	signature:(const CCPoint& pos, Tile *t)
CCShuffleTiles::placeTile	actions/CCActionTiledGrid.h	/^    void placeTile(const CCPoint& pos, Tile *t);$/;"	p	class:CCShuffleTiles	access:public	signature:(const CCPoint& pos, Tile *t)
CCShuffleTiles::shuffle	actions/CCActionTiledGrid.cpp	/^void CCShuffleTiles::shuffle(unsigned int *pArray, unsigned int nLen)$/;"	f	class:CCShuffleTiles	signature:(unsigned int *pArray, unsigned int nLen)
CCShuffleTiles::shuffle	actions/CCActionTiledGrid.h	/^    void shuffle(unsigned int *pArray, unsigned int nLen);$/;"	p	class:CCShuffleTiles	access:public	signature:(unsigned int *pArray, unsigned int nLen)
CCShuffleTiles::startWithTarget	actions/CCActionTiledGrid.cpp	/^void CCShuffleTiles::startWithTarget(CCNode *pTarget)$/;"	f	class:CCShuffleTiles	signature:(CCNode *pTarget)
CCShuffleTiles::startWithTarget	actions/CCActionTiledGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCShuffleTiles	access:public	signature:(CCNode *pTarget)
CCShuffleTiles::update	actions/CCActionTiledGrid.cpp	/^void CCShuffleTiles::update(float time)$/;"	f	class:CCShuffleTiles	signature:(float time)
CCShuffleTiles::update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCShuffleTiles	access:public	signature:(float time)
CCShuffleTiles::~CCShuffleTiles	actions/CCActionTiledGrid.cpp	/^CCShuffleTiles::~CCShuffleTiles(void)$/;"	f	class:CCShuffleTiles	signature:(void)
CCShuffleTiles::~CCShuffleTiles	actions/CCActionTiledGrid.h	/^    ~CCShuffleTiles(void);$/;"	p	class:CCShuffleTiles	access:public	signature:(void)
CCSize	cocoa/CCGeometry.cpp	/^CCSize::CCSize(const CCSize& other)$/;"	f	class:CCSize	signature:(const CCSize& other)
CCSize	cocoa/CCGeometry.cpp	/^CCSize::CCSize(float width, float height)$/;"	f	class:CCSize	signature:(float width, float height)
CCSize	cocoa/CCGeometry.cpp	/^CCSize::CCSize(void)$/;"	f	class:CCSize	signature:(void)
CCSize	cocoa/CCGeometry.h	/^    CCSize();$/;"	p	class:CCSize	access:public	signature:()
CCSize	cocoa/CCGeometry.h	/^    CCSize(const CCSize& other);$/;"	p	class:CCSize	access:public	signature:(const CCSize& other)
CCSize	cocoa/CCGeometry.h	/^    CCSize(float width, float height);$/;"	p	class:CCSize	access:public	signature:(float width, float height)
CCSize	cocoa/CCGeometry.h	/^class CC_DLL CCSize$/;"	c
CCSize::CCSize	cocoa/CCGeometry.cpp	/^CCSize::CCSize(const CCSize& other)$/;"	f	class:CCSize	signature:(const CCSize& other)
CCSize::CCSize	cocoa/CCGeometry.cpp	/^CCSize::CCSize(float width, float height)$/;"	f	class:CCSize	signature:(float width, float height)
CCSize::CCSize	cocoa/CCGeometry.cpp	/^CCSize::CCSize(void)$/;"	f	class:CCSize	signature:(void)
CCSize::CCSize	cocoa/CCGeometry.h	/^    CCSize();$/;"	p	class:CCSize	access:public	signature:()
CCSize::CCSize	cocoa/CCGeometry.h	/^    CCSize(const CCSize& other);$/;"	p	class:CCSize	access:public	signature:(const CCSize& other)
CCSize::CCSize	cocoa/CCGeometry.h	/^    CCSize(float width, float height);$/;"	p	class:CCSize	access:public	signature:(float width, float height)
CCSize::equals	cocoa/CCGeometry.cpp	/^bool CCSize::equals(const CCSize& target) const$/;"	f	class:CCSize	signature:(const CCSize& target) const
CCSize::equals	cocoa/CCGeometry.h	/^    bool equals(const CCSize& target) const;$/;"	p	class:CCSize	access:public	signature:(const CCSize& target) const
CCSize::height	cocoa/CCGeometry.h	/^    float height;$/;"	m	class:CCSize	access:public
CCSize::operator =	cocoa/CCGeometry.cpp	/^CCSize& CCSize::operator= (const CCSize& other)$/;"	f	class:CCSize	signature:(const CCSize& other)
CCSize::operator =	cocoa/CCGeometry.h	/^    CCSize& operator= (const CCSize& other);$/;"	p	class:CCSize	access:public	signature:(const CCSize& other)
CCSize::setSize	cocoa/CCGeometry.cpp	/^void CCSize::setSize(float width, float height)$/;"	f	class:CCSize	signature:(float width, float height)
CCSize::setSize	cocoa/CCGeometry.h	/^    void setSize(float width, float height);$/;"	p	class:CCSize	access:public	signature:(float width, float height)
CCSize::width	cocoa/CCGeometry.h	/^    float width;$/;"	m	class:CCSize	access:public
CCSizeApplyAffineTransform	cocoa/CCAffineTransform.h	45;"	d
CCSizeFromString	cocoa/CCNS.cpp	/^CCSize CCSizeFromString(const char* pszContent)$/;"	f	signature:(const char* pszContent)
CCSizeFromString	cocoa/CCNS.h	/^CCSize CC_DLL CCSizeFromString(const char* pszContent);$/;"	p	signature:(const char* pszContent)
CCSizeMake	cocoa/CCGeometry.h	93;"	d
CCSizeZero	cocoa/CCGeometry.h	/^const CCSize CCSizeZero = CCSizeMake(0,0);$/;"	v
CCSkewBy	actions/CCActionInterval.h	/^class CC_DLL CCSkewBy : public CCSkewTo$/;"	c	inherits:CCSkewTo
CCSkewBy::create	actions/CCActionInterval.cpp	/^CCSkewBy* CCSkewBy::create(float t, float sx, float sy)$/;"	f	class:CCSkewBy	signature:(float t, float sx, float sy)
CCSkewBy::create	actions/CCActionInterval.h	/^    static CCSkewBy* create(float t, float deltaSkewX, float deltaSkewY);$/;"	p	class:CCSkewBy	access:public	signature:(float t, float deltaSkewX, float deltaSkewY)
CCSkewBy::initWithDuration	actions/CCActionInterval.cpp	/^bool CCSkewBy::initWithDuration(float t, float deltaSkewX, float deltaSkewY)$/;"	f	class:CCSkewBy	signature:(float t, float deltaSkewX, float deltaSkewY)
CCSkewBy::initWithDuration	actions/CCActionInterval.h	/^    virtual bool initWithDuration(float t, float sx, float sy);$/;"	p	class:CCSkewBy	access:public	signature:(float t, float sx, float sy)
CCSkewBy::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCSkewBy::reverse()$/;"	f	class:CCSkewBy	signature:()
CCSkewBy::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCSkewBy	access:public	signature:(void)
CCSkewBy::startWithTarget	actions/CCActionInterval.cpp	/^void CCSkewBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSkewBy	signature:(CCNode *pTarget)
CCSkewBy::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCSkewBy	access:public	signature:(CCNode *pTarget)
CCSkewTo	actions/CCActionInterval.cpp	/^CCSkewTo::CCSkewTo()$/;"	f	class:CCSkewTo	signature:()
CCSkewTo	actions/CCActionInterval.h	/^    CCSkewTo();$/;"	p	class:CCSkewTo	access:public	signature:()
CCSkewTo	actions/CCActionInterval.h	/^class CC_DLL CCSkewTo : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCSkewTo::CCSkewTo	actions/CCActionInterval.cpp	/^CCSkewTo::CCSkewTo()$/;"	f	class:CCSkewTo	signature:()
CCSkewTo::CCSkewTo	actions/CCActionInterval.h	/^    CCSkewTo();$/;"	p	class:CCSkewTo	access:public	signature:()
CCSkewTo::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCSkewTo::copyWithZone(CCZone* pZone)$/;"	f	class:CCSkewTo	signature:(CCZone* pZone)
CCSkewTo::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCSkewTo	access:public	signature:(CCZone* pZone)
CCSkewTo::create	actions/CCActionInterval.cpp	/^CCSkewTo* CCSkewTo::create(float t, float sx, float sy)$/;"	f	class:CCSkewTo	signature:(float t, float sx, float sy)
CCSkewTo::create	actions/CCActionInterval.h	/^    static CCSkewTo* create(float t, float sx, float sy);$/;"	p	class:CCSkewTo	access:public	signature:(float t, float sx, float sy)
CCSkewTo::initWithDuration	actions/CCActionInterval.cpp	/^bool CCSkewTo::initWithDuration(float t, float sx, float sy)$/;"	f	class:CCSkewTo	signature:(float t, float sx, float sy)
CCSkewTo::initWithDuration	actions/CCActionInterval.h	/^    virtual bool initWithDuration(float t, float sx, float sy);$/;"	p	class:CCSkewTo	access:public	signature:(float t, float sx, float sy)
CCSkewTo::m_fDeltaX	actions/CCActionInterval.h	/^    float m_fDeltaX;$/;"	m	class:CCSkewTo	access:protected
CCSkewTo::m_fDeltaY	actions/CCActionInterval.h	/^    float m_fDeltaY;$/;"	m	class:CCSkewTo	access:protected
CCSkewTo::m_fEndSkewX	actions/CCActionInterval.h	/^    float m_fEndSkewX;$/;"	m	class:CCSkewTo	access:protected
CCSkewTo::m_fEndSkewY	actions/CCActionInterval.h	/^    float m_fEndSkewY;$/;"	m	class:CCSkewTo	access:protected
CCSkewTo::m_fSkewX	actions/CCActionInterval.h	/^    float m_fSkewX;$/;"	m	class:CCSkewTo	access:protected
CCSkewTo::m_fSkewY	actions/CCActionInterval.h	/^    float m_fSkewY;$/;"	m	class:CCSkewTo	access:protected
CCSkewTo::m_fStartSkewX	actions/CCActionInterval.h	/^    float m_fStartSkewX;$/;"	m	class:CCSkewTo	access:protected
CCSkewTo::m_fStartSkewY	actions/CCActionInterval.h	/^    float m_fStartSkewY;$/;"	m	class:CCSkewTo	access:protected
CCSkewTo::startWithTarget	actions/CCActionInterval.cpp	/^void CCSkewTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSkewTo	signature:(CCNode *pTarget)
CCSkewTo::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCSkewTo	access:public	signature:(CCNode *pTarget)
CCSkewTo::update	actions/CCActionInterval.cpp	/^void CCSkewTo::update(float t)$/;"	f	class:CCSkewTo	signature:(float t)
CCSkewTo::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCSkewTo	access:public	signature:(float time)
CCSpawn	actions/CCActionInterval.h	/^class CC_DLL CCSpawn : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCSpawn::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCSpawn::copyWithZone(CCZone *pZone)$/;"	f	class:CCSpawn	signature:(CCZone *pZone)
CCSpawn::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCSpawn	access:public	signature:(CCZone* pZone)
CCSpawn::create	actions/CCActionInterval.cpp	/^CCSpawn* CCSpawn::create(CCArray *arrayOfActions)$/;"	f	class:CCSpawn	signature:(CCArray *arrayOfActions)
CCSpawn::create	actions/CCActionInterval.cpp	/^CCSpawn* CCSpawn::create(CCFiniteTimeAction *pAction1, ...)$/;"	f	class:CCSpawn	signature:(CCFiniteTimeAction *pAction1, ...)
CCSpawn::create	actions/CCActionInterval.h	/^    static CCSpawn* create(CCArray *arrayOfActions);$/;"	p	class:CCSpawn	access:public	signature:(CCArray *arrayOfActions)
CCSpawn::create	actions/CCActionInterval.h	/^    static CCSpawn* create(CCFiniteTimeAction *pAction1, ...);$/;"	p	class:CCSpawn	access:public	signature:(CCFiniteTimeAction *pAction1, ...)
CCSpawn::createWithTwoActions	actions/CCActionInterval.cpp	/^CCSpawn* CCSpawn::createWithTwoActions(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)$/;"	f	class:CCSpawn	signature:(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)
CCSpawn::createWithTwoActions	actions/CCActionInterval.h	/^    static CCSpawn* createWithTwoActions(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2);$/;"	p	class:CCSpawn	access:public	signature:(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)
CCSpawn::createWithVariableList	actions/CCActionInterval.cpp	/^CCSpawn* CCSpawn::createWithVariableList(CCFiniteTimeAction *pAction1, va_list args)$/;"	f	class:CCSpawn	signature:(CCFiniteTimeAction *pAction1, va_list args)
CCSpawn::createWithVariableList	actions/CCActionInterval.h	/^    static CCSpawn* createWithVariableList(CCFiniteTimeAction *pAction1, va_list args);$/;"	p	class:CCSpawn	access:public	signature:(CCFiniteTimeAction *pAction1, va_list args)
CCSpawn::initWithTwoActions	actions/CCActionInterval.cpp	/^bool CCSpawn:: initWithTwoActions(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)$/;"	f	class:CCSpawn	signature:(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)
CCSpawn::initWithTwoActions	actions/CCActionInterval.h	/^    bool initWithTwoActions(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2);$/;"	p	class:CCSpawn	access:public	signature:(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)
CCSpawn::m_pOne	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pOne;$/;"	m	class:CCSpawn	access:protected
CCSpawn::m_pTwo	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pTwo;$/;"	m	class:CCSpawn	access:protected
CCSpawn::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCSpawn::reverse(void)$/;"	f	class:CCSpawn	signature:(void)
CCSpawn::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCSpawn	access:public	signature:(void)
CCSpawn::startWithTarget	actions/CCActionInterval.cpp	/^void CCSpawn::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSpawn	signature:(CCNode *pTarget)
CCSpawn::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCSpawn	access:public	signature:(CCNode *pTarget)
CCSpawn::stop	actions/CCActionInterval.cpp	/^void CCSpawn::stop(void)$/;"	f	class:CCSpawn	signature:(void)
CCSpawn::stop	actions/CCActionInterval.h	/^    virtual void stop(void);$/;"	p	class:CCSpawn	access:public	signature:(void)
CCSpawn::update	actions/CCActionInterval.cpp	/^void CCSpawn::update(float time)$/;"	f	class:CCSpawn	signature:(float time)
CCSpawn::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCSpawn	access:public	signature:(float time)
CCSpawn::~CCSpawn	actions/CCActionInterval.cpp	/^CCSpawn::~CCSpawn(void)$/;"	f	class:CCSpawn	signature:(void)
CCSpawn::~CCSpawn	actions/CCActionInterval.h	/^    ~CCSpawn(void);$/;"	p	class:CCSpawn	access:public	signature:(void)
CCSpeed	actions/CCAction.h	/^    CCSpeed()$/;"	f	class:CCSpeed	access:public	signature:()
CCSpeed	actions/CCAction.h	/^class CC_DLL CCSpeed : public CCAction$/;"	c	inherits:CCAction
CCSpeed::CCSpeed	actions/CCAction.h	/^    CCSpeed()$/;"	f	class:CCSpeed	access:public	signature:()
CCSpeed::copyWithZone	actions/CCAction.cpp	/^CCObject *CCSpeed::copyWithZone(CCZone *pZone)$/;"	f	class:CCSpeed	signature:(CCZone *pZone)
CCSpeed::copyWithZone	actions/CCAction.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCSpeed	access:public	signature:(CCZone *pZone)
CCSpeed::create	actions/CCAction.cpp	/^CCSpeed* CCSpeed::create(CCActionInterval* pAction, float fSpeed)$/;"	f	class:CCSpeed	signature:(CCActionInterval* pAction, float fSpeed)
CCSpeed::create	actions/CCAction.h	/^    static CCSpeed* create(CCActionInterval* pAction, float fSpeed);$/;"	p	class:CCSpeed	access:public	signature:(CCActionInterval* pAction, float fSpeed)
CCSpeed::getInnerAction	actions/CCAction.h	/^    inline CCActionInterval* getInnerAction()$/;"	f	class:CCSpeed	access:public	signature:()
CCSpeed::getSpeed	actions/CCAction.h	/^    inline float getSpeed(void) { return m_fSpeed; }$/;"	f	class:CCSpeed	access:public	signature:(void)
CCSpeed::initWithAction	actions/CCAction.cpp	/^bool CCSpeed::initWithAction(CCActionInterval *pAction, float fSpeed)$/;"	f	class:CCSpeed	signature:(CCActionInterval *pAction, float fSpeed)
CCSpeed::initWithAction	actions/CCAction.h	/^    bool initWithAction(CCActionInterval *pAction, float fSpeed);$/;"	p	class:CCSpeed	access:public	signature:(CCActionInterval *pAction, float fSpeed)
CCSpeed::isDone	actions/CCAction.cpp	/^bool CCSpeed::isDone()$/;"	f	class:CCSpeed	signature:()
CCSpeed::isDone	actions/CCAction.h	/^    virtual bool isDone(void);$/;"	p	class:CCSpeed	access:public	signature:(void)
CCSpeed::m_fSpeed	actions/CCAction.h	/^    float m_fSpeed;$/;"	m	class:CCSpeed	access:protected
CCSpeed::m_pInnerAction	actions/CCAction.h	/^    CCActionInterval *m_pInnerAction;$/;"	m	class:CCSpeed	access:protected
CCSpeed::reverse	actions/CCAction.cpp	/^CCActionInterval *CCSpeed::reverse()$/;"	f	class:CCSpeed	signature:()
CCSpeed::reverse	actions/CCAction.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCSpeed	access:public	signature:(void)
CCSpeed::setInnerAction	actions/CCAction.cpp	/^void CCSpeed::setInnerAction(CCActionInterval *pAction)$/;"	f	class:CCSpeed	signature:(CCActionInterval *pAction)
CCSpeed::setInnerAction	actions/CCAction.h	/^    void setInnerAction(CCActionInterval *pAction);$/;"	p	class:CCSpeed	access:public	signature:(CCActionInterval *pAction)
CCSpeed::setSpeed	actions/CCAction.h	/^    inline void setSpeed(float fSpeed) { m_fSpeed = fSpeed; }$/;"	f	class:CCSpeed	access:public	signature:(float fSpeed)
CCSpeed::startWithTarget	actions/CCAction.cpp	/^void CCSpeed::startWithTarget(CCNode* pTarget)$/;"	f	class:CCSpeed	signature:(CCNode* pTarget)
CCSpeed::startWithTarget	actions/CCAction.h	/^    virtual void startWithTarget(CCNode* pTarget);$/;"	p	class:CCSpeed	access:public	signature:(CCNode* pTarget)
CCSpeed::step	actions/CCAction.cpp	/^void CCSpeed::step(float dt)$/;"	f	class:CCSpeed	signature:(float dt)
CCSpeed::step	actions/CCAction.h	/^    virtual void step(float dt);$/;"	p	class:CCSpeed	access:public	signature:(float dt)
CCSpeed::stop	actions/CCAction.cpp	/^void CCSpeed::stop()$/;"	f	class:CCSpeed	signature:()
CCSpeed::stop	actions/CCAction.h	/^    virtual void stop();$/;"	p	class:CCSpeed	access:public	signature:()
CCSpeed::~CCSpeed	actions/CCAction.cpp	/^CCSpeed::~CCSpeed()$/;"	f	class:CCSpeed	signature:()
CCSpeed::~CCSpeed	actions/CCAction.h	/^    virtual ~CCSpeed(void);$/;"	p	class:CCSpeed	access:public	signature:(void)
CCSplitCols	actions/CCActionTiledGrid.h	/^class CC_DLL CCSplitCols : public CCTiledGrid3DAction$/;"	c	inherits:CCTiledGrid3DAction
CCSplitCols::copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCSplitCols::copyWithZone(CCZone *pZone)$/;"	f	class:CCSplitCols	signature:(CCZone *pZone)
CCSplitCols::copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCSplitCols	access:public	signature:(CCZone* pZone)
CCSplitCols::create	actions/CCActionTiledGrid.cpp	/^CCSplitCols* CCSplitCols::create(float duration, unsigned int nCols)$/;"	f	class:CCSplitCols	signature:(float duration, unsigned int nCols)
CCSplitCols::create	actions/CCActionTiledGrid.h	/^    static CCSplitCols* create(float duration, unsigned int nCols);$/;"	p	class:CCSplitCols	access:public	signature:(float duration, unsigned int nCols)
CCSplitCols::initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCSplitCols::initWithDuration(float duration, unsigned int nCols)$/;"	f	class:CCSplitCols	signature:(float duration, unsigned int nCols)
CCSplitCols::initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, unsigned int nCols);$/;"	p	class:CCSplitCols	access:public	signature:(float duration, unsigned int nCols)
CCSplitCols::m_nCols	actions/CCActionTiledGrid.h	/^    unsigned int m_nCols;$/;"	m	class:CCSplitCols	access:protected
CCSplitCols::m_winSize	actions/CCActionTiledGrid.h	/^    CCSize m_winSize;$/;"	m	class:CCSplitCols	access:protected
CCSplitCols::startWithTarget	actions/CCActionTiledGrid.cpp	/^void CCSplitCols::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSplitCols	signature:(CCNode *pTarget)
CCSplitCols::startWithTarget	actions/CCActionTiledGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCSplitCols	access:public	signature:(CCNode *pTarget)
CCSplitCols::update	actions/CCActionTiledGrid.cpp	/^void CCSplitCols::update(float time)$/;"	f	class:CCSplitCols	signature:(float time)
CCSplitCols::update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCSplitCols	access:public	signature:(float time)
CCSplitRows	actions/CCActionTiledGrid.h	/^class CC_DLL CCSplitRows : public CCTiledGrid3DAction$/;"	c	inherits:CCTiledGrid3DAction
CCSplitRows::copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCSplitRows::copyWithZone(CCZone *pZone)$/;"	f	class:CCSplitRows	signature:(CCZone *pZone)
CCSplitRows::copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCSplitRows	access:public	signature:(CCZone* pZone)
CCSplitRows::create	actions/CCActionTiledGrid.cpp	/^CCSplitRows* CCSplitRows::create(float duration, unsigned int nRows)$/;"	f	class:CCSplitRows	signature:(float duration, unsigned int nRows)
CCSplitRows::create	actions/CCActionTiledGrid.h	/^    static CCSplitRows* create(float duration, unsigned int nRows);$/;"	p	class:CCSplitRows	access:public	signature:(float duration, unsigned int nRows)
CCSplitRows::initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCSplitRows::initWithDuration(float duration, unsigned int nRows)$/;"	f	class:CCSplitRows	signature:(float duration, unsigned int nRows)
CCSplitRows::initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, unsigned int nRows);$/;"	p	class:CCSplitRows	access:public	signature:(float duration, unsigned int nRows)
CCSplitRows::m_nRows	actions/CCActionTiledGrid.h	/^    unsigned int m_nRows;$/;"	m	class:CCSplitRows	access:protected
CCSplitRows::m_winSize	actions/CCActionTiledGrid.h	/^    CCSize m_winSize;$/;"	m	class:CCSplitRows	access:protected
CCSplitRows::startWithTarget	actions/CCActionTiledGrid.cpp	/^void CCSplitRows::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSplitRows	signature:(CCNode *pTarget)
CCSplitRows::startWithTarget	actions/CCActionTiledGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCSplitRows	access:public	signature:(CCNode *pTarget)
CCSplitRows::update	actions/CCActionTiledGrid.cpp	/^void CCSplitRows::update(float time)$/;"	f	class:CCSplitRows	signature:(float time)
CCSplitRows::update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCSplitRows	access:public	signature:(float time)
CCSprite	sprite_nodes/CCSprite.cpp	/^CCSprite::CCSprite(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite	sprite_nodes/CCSprite.h	/^    CCSprite(void);$/;"	p	class:CCSprite	access:public	signature:(void)
CCSprite	sprite_nodes/CCSprite.h	/^class CC_DLL CCSprite : public CCNodeRGBA, public CCTextureProtocol$/;"	c	inherits:CCNodeRGBA,CCTextureProtocol
CCSprite::CCSprite	sprite_nodes/CCSprite.cpp	/^CCSprite::CCSprite(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::CCSprite	sprite_nodes/CCSprite.h	/^    CCSprite(void);$/;"	p	class:CCSprite	access:public	signature:(void)
CCSprite::addChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::addChild(CCNode *pChild, int zOrder)$/;"	f	class:CCSprite	signature:(CCNode *pChild, int zOrder)
CCSprite::addChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::addChild(CCNode *pChild, int zOrder, int tag)$/;"	f	class:CCSprite	signature:(CCNode *pChild, int zOrder, int tag)
CCSprite::addChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::addChild(CCNode* pChild)$/;"	f	class:CCSprite	signature:(CCNode* pChild)
CCSprite::addChild	sprite_nodes/CCSprite.h	/^    virtual void addChild(CCNode *pChild);$/;"	p	class:CCSprite	access:public	signature:(CCNode *pChild)
CCSprite::addChild	sprite_nodes/CCSprite.h	/^    virtual void addChild(CCNode *pChild, int zOrder);$/;"	p	class:CCSprite	access:public	signature:(CCNode *pChild, int zOrder)
CCSprite::addChild	sprite_nodes/CCSprite.h	/^    virtual void addChild(CCNode *pChild, int zOrder, int tag);$/;"	p	class:CCSprite	access:public	signature:(CCNode *pChild, int zOrder, int tag)
CCSprite::create	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::create()$/;"	f	class:CCSprite	signature:()
CCSprite::create	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::create(const char *pszFileName)$/;"	f	class:CCSprite	signature:(const char *pszFileName)
CCSprite::create	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::create(const char *pszFileName, const CCRect& rect)$/;"	f	class:CCSprite	signature:(const char *pszFileName, const CCRect& rect)
CCSprite::create	sprite_nodes/CCSprite.h	/^    static CCSprite* create();$/;"	p	class:CCSprite	access:public	signature:()
CCSprite::create	sprite_nodes/CCSprite.h	/^    static CCSprite* create(const char *pszFileName);$/;"	p	class:CCSprite	access:public	signature:(const char *pszFileName)
CCSprite::create	sprite_nodes/CCSprite.h	/^    static CCSprite* create(const char *pszFileName, const CCRect& rect);$/;"	p	class:CCSprite	access:public	signature:(const char *pszFileName, const CCRect& rect)
CCSprite::createWithSpriteFrame	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::createWithSpriteFrame(CCSpriteFrame *pSpriteFrame)$/;"	f	class:CCSprite	signature:(CCSpriteFrame *pSpriteFrame)
CCSprite::createWithSpriteFrame	sprite_nodes/CCSprite.h	/^    static CCSprite* createWithSpriteFrame(CCSpriteFrame *pSpriteFrame);$/;"	p	class:CCSprite	access:public	signature:(CCSpriteFrame *pSpriteFrame)
CCSprite::createWithSpriteFrameName	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::createWithSpriteFrameName(const char *pszSpriteFrameName)$/;"	f	class:CCSprite	signature:(const char *pszSpriteFrameName)
CCSprite::createWithSpriteFrameName	sprite_nodes/CCSprite.h	/^    static CCSprite* createWithSpriteFrameName(const char *pszSpriteFrameName);$/;"	p	class:CCSprite	access:public	signature:(const char *pszSpriteFrameName)
CCSprite::createWithTexture	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::createWithTexture(CCTexture2D *pTexture)$/;"	f	class:CCSprite	signature:(CCTexture2D *pTexture)
CCSprite::createWithTexture	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::createWithTexture(CCTexture2D *pTexture, const CCRect& rect)$/;"	f	class:CCSprite	signature:(CCTexture2D *pTexture, const CCRect& rect)
CCSprite::createWithTexture	sprite_nodes/CCSprite.h	/^    static CCSprite* createWithTexture(CCTexture2D *pTexture);$/;"	p	class:CCSprite	access:public	signature:(CCTexture2D *pTexture)
CCSprite::createWithTexture	sprite_nodes/CCSprite.h	/^    static CCSprite* createWithTexture(CCTexture2D *pTexture, const CCRect& rect);$/;"	p	class:CCSprite	access:public	signature:(CCTexture2D *pTexture, const CCRect& rect)
CCSprite::displayFrame	sprite_nodes/CCSprite.cpp	/^CCSpriteFrame* CCSprite::displayFrame(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::displayFrame	sprite_nodes/CCSprite.h	/^    virtual CCSpriteFrame* displayFrame(void);$/;"	p	class:CCSprite	access:public	signature:(void)
CCSprite::draw	sprite_nodes/CCSprite.cpp	/^void CCSprite::draw(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::draw	sprite_nodes/CCSprite.h	/^    virtual void draw(void);$/;"	p	class:CCSprite	access:public	signature:(void)
CCSprite::getAtlasIndex	sprite_nodes/CCSprite.h	/^    inline unsigned int getAtlasIndex(void) { return m_uAtlasIndex; }$/;"	f	class:CCSprite	access:public	signature:(void)
CCSprite::getBatchNode	sprite_nodes/CCSprite.cpp	/^CCSpriteBatchNode* CCSprite::getBatchNode(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::getBatchNode	sprite_nodes/CCSprite.h	/^    virtual CCSpriteBatchNode* getBatchNode(void);$/;"	p	class:CCSprite	access:public	signature:(void)
CCSprite::getBlendFunc	sprite_nodes/CCSprite.h	/^    inline ccBlendFunc getBlendFunc(void) { return m_sBlendFunc; }$/;"	f	class:CCSprite	access:public	signature:(void)
CCSprite::getOffsetPosition	sprite_nodes/CCSprite.h	/^    inline const CCPoint& getOffsetPosition(void) { return m_obOffsetPosition; }$/;"	f	class:CCSprite	access:public	signature:(void)
CCSprite::getQuad	sprite_nodes/CCSprite.h	/^    inline ccV3F_C4B_T2F_Quad getQuad(void) { return m_sQuad; }$/;"	f	class:CCSprite	access:public	signature:(void)
CCSprite::getTexture	sprite_nodes/CCSprite.cpp	/^CCTexture2D* CCSprite::getTexture(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::getTexture	sprite_nodes/CCSprite.h	/^    virtual CCTexture2D* getTexture(void);$/;"	p	class:CCSprite	access:public	signature:(void)
CCSprite::getTextureAtlas	sprite_nodes/CCSprite.h	/^    inline CCTextureAtlas* getTextureAtlas(void) { return m_pobTextureAtlas; }$/;"	f	class:CCSprite	access:public	signature:(void)
CCSprite::getTextureRect	sprite_nodes/CCSprite.h	/^    inline const CCRect& getTextureRect(void) { return m_obRect; }$/;"	f	class:CCSprite	access:public	signature:(void)
CCSprite::ignoreAnchorPointForPosition	sprite_nodes/CCSprite.cpp	/^void CCSprite::ignoreAnchorPointForPosition(bool value)$/;"	f	class:CCSprite	signature:(bool value)
CCSprite::ignoreAnchorPointForPosition	sprite_nodes/CCSprite.h	/^    virtual void ignoreAnchorPointForPosition(bool value);$/;"	p	class:CCSprite	access:public	signature:(bool value)
CCSprite::init	sprite_nodes/CCSprite.cpp	/^bool CCSprite::init(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::init	sprite_nodes/CCSprite.h	/^    virtual bool init(void);$/;"	p	class:CCSprite	access:public	signature:(void)
CCSprite::initWithFile	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithFile(const char *pszFilename)$/;"	f	class:CCSprite	signature:(const char *pszFilename)
CCSprite::initWithFile	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithFile(const char *pszFilename, const CCRect& rect)$/;"	f	class:CCSprite	signature:(const char *pszFilename, const CCRect& rect)
CCSprite::initWithFile	sprite_nodes/CCSprite.h	/^    virtual bool initWithFile(const char *pszFilename);$/;"	p	class:CCSprite	access:public	signature:(const char *pszFilename)
CCSprite::initWithFile	sprite_nodes/CCSprite.h	/^    virtual bool initWithFile(const char *pszFilename, const CCRect& rect);$/;"	p	class:CCSprite	access:public	signature:(const char *pszFilename, const CCRect& rect)
CCSprite::initWithSpriteFrame	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithSpriteFrame(CCSpriteFrame *pSpriteFrame)$/;"	f	class:CCSprite	signature:(CCSpriteFrame *pSpriteFrame)
CCSprite::initWithSpriteFrame	sprite_nodes/CCSprite.h	/^    virtual bool initWithSpriteFrame(CCSpriteFrame *pSpriteFrame);$/;"	p	class:CCSprite	access:public	signature:(CCSpriteFrame *pSpriteFrame)
CCSprite::initWithSpriteFrameName	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithSpriteFrameName(const char *pszSpriteFrameName)$/;"	f	class:CCSprite	signature:(const char *pszSpriteFrameName)
CCSprite::initWithSpriteFrameName	sprite_nodes/CCSprite.h	/^    virtual bool initWithSpriteFrameName(const char *pszSpriteFrameName);$/;"	p	class:CCSprite	access:public	signature:(const char *pszSpriteFrameName)
CCSprite::initWithTexture	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithTexture(CCTexture2D *pTexture)$/;"	f	class:CCSprite	signature:(CCTexture2D *pTexture)
CCSprite::initWithTexture	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithTexture(CCTexture2D *pTexture, const CCRect& rect)$/;"	f	class:CCSprite	signature:(CCTexture2D *pTexture, const CCRect& rect)
CCSprite::initWithTexture	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithTexture(CCTexture2D *pTexture, const CCRect& rect, bool rotated)$/;"	f	class:CCSprite	signature:(CCTexture2D *pTexture, const CCRect& rect, bool rotated)
CCSprite::initWithTexture	sprite_nodes/CCSprite.h	/^    virtual bool initWithTexture(CCTexture2D *pTexture);$/;"	p	class:CCSprite	access:public	signature:(CCTexture2D *pTexture)
CCSprite::initWithTexture	sprite_nodes/CCSprite.h	/^    virtual bool initWithTexture(CCTexture2D *pTexture, const CCRect& rect);$/;"	p	class:CCSprite	access:public	signature:(CCTexture2D *pTexture, const CCRect& rect)
CCSprite::initWithTexture	sprite_nodes/CCSprite.h	/^    virtual bool initWithTexture(CCTexture2D *pTexture, const CCRect& rect, bool rotated);$/;"	p	class:CCSprite	access:public	signature:(CCTexture2D *pTexture, const CCRect& rect, bool rotated)
CCSprite::isDirty	sprite_nodes/CCSprite.h	/^    inline virtual bool isDirty(void) { return m_bDirty; }$/;"	f	class:CCSprite	access:public	signature:(void)
CCSprite::isFlipX	sprite_nodes/CCSprite.cpp	/^bool CCSprite::isFlipX(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::isFlipX	sprite_nodes/CCSprite.h	/^    bool isFlipX(void);$/;"	p	class:CCSprite	access:public	signature:(void)
CCSprite::isFlipY	sprite_nodes/CCSprite.cpp	/^bool CCSprite::isFlipY(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::isFlipY	sprite_nodes/CCSprite.h	/^    bool isFlipY(void);$/;"	p	class:CCSprite	access:public	signature:(void)
CCSprite::isFrameDisplayed	sprite_nodes/CCSprite.cpp	/^bool CCSprite::isFrameDisplayed(CCSpriteFrame *pFrame)$/;"	f	class:CCSprite	signature:(CCSpriteFrame *pFrame)
CCSprite::isFrameDisplayed	sprite_nodes/CCSprite.h	/^    virtual bool isFrameDisplayed(CCSpriteFrame *pFrame);$/;"	p	class:CCSprite	access:public	signature:(CCSpriteFrame *pFrame)
CCSprite::isOpacityModifyRGB	sprite_nodes/CCSprite.cpp	/^bool CCSprite::isOpacityModifyRGB(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::isOpacityModifyRGB	sprite_nodes/CCSprite.h	/^    virtual bool isOpacityModifyRGB(void);$/;"	p	class:CCSprite	access:public	signature:(void)
CCSprite::isTextureRectRotated	sprite_nodes/CCSprite.h	/^    inline bool isTextureRectRotated(void) { return m_bRectRotated; }$/;"	f	class:CCSprite	access:public	signature:(void)
CCSprite::m_bDirty	sprite_nodes/CCSprite.h	/^    bool                m_bDirty;               \/\/\/ Whether the sprite needs to be updated$/;"	m	class:CCSprite	access:protected
CCSprite::m_bFlipX	sprite_nodes/CCSprite.h	/^    bool m_bFlipX;                              \/\/\/ Whether the sprite is flipped horizaontally or not.$/;"	m	class:CCSprite	access:protected
CCSprite::m_bFlipY	sprite_nodes/CCSprite.h	/^    bool m_bFlipY;                              \/\/\/ Whether the sprite is flipped vertically or not.$/;"	m	class:CCSprite	access:protected
CCSprite::m_bHasChildren	sprite_nodes/CCSprite.h	/^    bool                m_bHasChildren;         \/\/\/ Whether the sprite contains children$/;"	m	class:CCSprite	access:protected
CCSprite::m_bOpacityModifyRGB	sprite_nodes/CCSprite.h	/^    bool m_bOpacityModifyRGB;$/;"	m	class:CCSprite	access:protected
CCSprite::m_bRectRotated	sprite_nodes/CCSprite.h	/^    bool   m_bRectRotated;                      \/\/\/ Whether the texture is rotated$/;"	m	class:CCSprite	access:protected
CCSprite::m_bRecursiveDirty	sprite_nodes/CCSprite.h	/^    bool                m_bRecursiveDirty;      \/\/\/ Whether all of the sprite's children needs to be updated$/;"	m	class:CCSprite	access:protected
CCSprite::m_bShouldBeHidden	sprite_nodes/CCSprite.h	/^    bool                m_bShouldBeHidden;      \/\/\/ should not be drawn because one of the ancestors is not visible$/;"	m	class:CCSprite	access:protected
CCSprite::m_obOffsetPosition	sprite_nodes/CCSprite.h	/^    CCPoint m_obOffsetPosition;$/;"	m	class:CCSprite	access:protected
CCSprite::m_obRect	sprite_nodes/CCSprite.h	/^    CCRect m_obRect;                            \/\/\/ Retangle of CCTexture2D$/;"	m	class:CCSprite	access:protected
CCSprite::m_obUnflippedOffsetPositionFromCenter	sprite_nodes/CCSprite.h	/^    CCPoint m_obUnflippedOffsetPositionFromCenter;$/;"	m	class:CCSprite	access:protected
CCSprite::m_pobBatchNode	sprite_nodes/CCSprite.h	/^    CCSpriteBatchNode*  m_pobBatchNode;         \/\/\/ Used batch node (weak reference)$/;"	m	class:CCSprite	access:protected
CCSprite::m_pobTexture	sprite_nodes/CCSprite.h	/^    CCTexture2D*       m_pobTexture;            \/\/\/ CCTexture2D object that is used to render the sprite$/;"	m	class:CCSprite	access:protected
CCSprite::m_pobTextureAtlas	sprite_nodes/CCSprite.h	/^    CCTextureAtlas*     m_pobTextureAtlas;      \/\/\/ CCSpriteBatchNode texture atlas (weak reference)$/;"	m	class:CCSprite	access:protected
CCSprite::m_sBlendFunc	sprite_nodes/CCSprite.h	/^    ccBlendFunc        m_sBlendFunc;            \/\/\/ It's required for CCTextureProtocol inheritance$/;"	m	class:CCSprite	access:protected
CCSprite::m_sQuad	sprite_nodes/CCSprite.h	/^    ccV3F_C4B_T2F_Quad m_sQuad;$/;"	m	class:CCSprite	access:protected
CCSprite::m_transformToBatch	sprite_nodes/CCSprite.h	/^    CCAffineTransform   m_transformToBatch;$/;"	m	class:CCSprite	access:protected
CCSprite::m_uAtlasIndex	sprite_nodes/CCSprite.h	/^    unsigned int        m_uAtlasIndex;          \/\/\/ Absolute (real) Index on the SpriteSheet$/;"	m	class:CCSprite	access:protected
CCSprite::removeAllChildrenWithCleanup	sprite_nodes/CCSprite.cpp	/^void CCSprite::removeAllChildrenWithCleanup(bool bCleanup)$/;"	f	class:CCSprite	signature:(bool bCleanup)
CCSprite::removeAllChildrenWithCleanup	sprite_nodes/CCSprite.h	/^    virtual void removeAllChildrenWithCleanup(bool bCleanup);$/;"	p	class:CCSprite	access:public	signature:(bool bCleanup)
CCSprite::removeChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::removeChild(CCNode *pChild, bool bCleanup)$/;"	f	class:CCSprite	signature:(CCNode *pChild, bool bCleanup)
CCSprite::removeChild	sprite_nodes/CCSprite.h	/^    virtual void removeChild(CCNode* pChild, bool bCleanup);$/;"	p	class:CCSprite	access:public	signature:(CCNode* pChild, bool bCleanup)
CCSprite::reorderChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::reorderChild(CCNode *pChild, int zOrder)$/;"	f	class:CCSprite	signature:(CCNode *pChild, int zOrder)
CCSprite::reorderChild	sprite_nodes/CCSprite.h	/^    virtual void reorderChild(CCNode *pChild, int zOrder);$/;"	p	class:CCSprite	access:public	signature:(CCNode *pChild, int zOrder)
CCSprite::setAnchorPoint	sprite_nodes/CCSprite.cpp	/^void CCSprite::setAnchorPoint(const CCPoint& anchor)$/;"	f	class:CCSprite	signature:(const CCPoint& anchor)
CCSprite::setAnchorPoint	sprite_nodes/CCSprite.h	/^    virtual void setAnchorPoint(const CCPoint& anchor);$/;"	p	class:CCSprite	access:public	signature:(const CCPoint& anchor)
CCSprite::setAtlasIndex	sprite_nodes/CCSprite.h	/^    inline void setAtlasIndex(unsigned int uAtlasIndex) { m_uAtlasIndex = uAtlasIndex; }$/;"	f	class:CCSprite	access:public	signature:(unsigned int uAtlasIndex)
CCSprite::setBatchNode	sprite_nodes/CCSprite.cpp	/^void CCSprite::setBatchNode(CCSpriteBatchNode *pobSpriteBatchNode)$/;"	f	class:CCSprite	signature:(CCSpriteBatchNode *pobSpriteBatchNode)
CCSprite::setBatchNode	sprite_nodes/CCSprite.h	/^    virtual void setBatchNode(CCSpriteBatchNode *pobSpriteBatchNode);$/;"	p	class:CCSprite	access:public	signature:(CCSpriteBatchNode *pobSpriteBatchNode)
CCSprite::setBlendFunc	sprite_nodes/CCSprite.h	/^    inline void setBlendFunc(ccBlendFunc blendFunc) { m_sBlendFunc = blendFunc; }$/;"	f	class:CCSprite	access:public	signature:(ccBlendFunc blendFunc)
CCSprite::setColor	sprite_nodes/CCSprite.cpp	/^void CCSprite::setColor(const ccColor3B& color3)$/;"	f	class:CCSprite	signature:(const ccColor3B& color3)
CCSprite::setColor	sprite_nodes/CCSprite.h	/^    virtual void setColor(const ccColor3B& color3);$/;"	p	class:CCSprite	access:public	signature:(const ccColor3B& color3)
CCSprite::setDirty	sprite_nodes/CCSprite.h	/^    inline virtual void setDirty(bool bDirty) { m_bDirty = bDirty; }$/;"	f	class:CCSprite	access:public	signature:(bool bDirty)
CCSprite::setDirtyRecursively	sprite_nodes/CCSprite.cpp	/^void CCSprite::setDirtyRecursively(bool bValue)$/;"	f	class:CCSprite	signature:(bool bValue)
CCSprite::setDirtyRecursively	sprite_nodes/CCSprite.h	/^    virtual void setDirtyRecursively(bool bValue);$/;"	p	class:CCSprite	access:protected	signature:(bool bValue)
CCSprite::setDisplayFrame	sprite_nodes/CCSprite.cpp	/^void CCSprite::setDisplayFrame(CCSpriteFrame *pNewFrame)$/;"	f	class:CCSprite	signature:(CCSpriteFrame *pNewFrame)
CCSprite::setDisplayFrame	sprite_nodes/CCSprite.h	/^    virtual void setDisplayFrame(CCSpriteFrame *pNewFrame);$/;"	p	class:CCSprite	access:public	signature:(CCSpriteFrame *pNewFrame)
CCSprite::setDisplayFrameWithAnimationName	sprite_nodes/CCSprite.cpp	/^void CCSprite::setDisplayFrameWithAnimationName(const char *animationName, int frameIndex)$/;"	f	class:CCSprite	signature:(const char *animationName, int frameIndex)
CCSprite::setDisplayFrameWithAnimationName	sprite_nodes/CCSprite.h	/^    virtual void setDisplayFrameWithAnimationName(const char *animationName, int frameIndex);$/;"	p	class:CCSprite	access:public	signature:(const char *animationName, int frameIndex)
CCSprite::setFlipX	sprite_nodes/CCSprite.cpp	/^void CCSprite::setFlipX(bool bFlipX)$/;"	f	class:CCSprite	signature:(bool bFlipX)
CCSprite::setFlipX	sprite_nodes/CCSprite.h	/^    void setFlipX(bool bFlipX);$/;"	p	class:CCSprite	access:public	signature:(bool bFlipX)
CCSprite::setFlipY	sprite_nodes/CCSprite.cpp	/^void CCSprite::setFlipY(bool bFlipY)$/;"	f	class:CCSprite	signature:(bool bFlipY)
CCSprite::setFlipY	sprite_nodes/CCSprite.h	/^    void setFlipY(bool bFlipY);$/;"	p	class:CCSprite	access:public	signature:(bool bFlipY)
CCSprite::setOpacity	sprite_nodes/CCSprite.cpp	/^void CCSprite::setOpacity(GLubyte opacity)$/;"	f	class:CCSprite	signature:(GLubyte opacity)
CCSprite::setOpacity	sprite_nodes/CCSprite.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCSprite	access:public	signature:(GLubyte opacity)
CCSprite::setOpacityModifyRGB	sprite_nodes/CCSprite.cpp	/^void CCSprite::setOpacityModifyRGB(bool modify)$/;"	f	class:CCSprite	signature:(bool modify)
CCSprite::setOpacityModifyRGB	sprite_nodes/CCSprite.h	/^    virtual void setOpacityModifyRGB(bool modify);$/;"	p	class:CCSprite	access:public	signature:(bool modify)
CCSprite::setPosition	sprite_nodes/CCSprite.cpp	/^void CCSprite::setPosition(const CCPoint& pos)$/;"	f	class:CCSprite	signature:(const CCPoint& pos)
CCSprite::setPosition	sprite_nodes/CCSprite.h	/^    virtual void setPosition(const CCPoint& pos);$/;"	p	class:CCSprite	access:public	signature:(const CCPoint& pos)
CCSprite::setReorderChildDirtyRecursively	sprite_nodes/CCSprite.cpp	/^void CCSprite::setReorderChildDirtyRecursively(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::setReorderChildDirtyRecursively	sprite_nodes/CCSprite.h	/^    virtual void setReorderChildDirtyRecursively(void);$/;"	p	class:CCSprite	access:protected	signature:(void)
CCSprite::setRotation	sprite_nodes/CCSprite.cpp	/^void CCSprite::setRotation(float fRotation)$/;"	f	class:CCSprite	signature:(float fRotation)
CCSprite::setRotation	sprite_nodes/CCSprite.h	/^    virtual void setRotation(float fRotation);$/;"	p	class:CCSprite	access:public	signature:(float fRotation)
CCSprite::setRotationX	sprite_nodes/CCSprite.cpp	/^void CCSprite::setRotationX(float fRotationX)$/;"	f	class:CCSprite	signature:(float fRotationX)
CCSprite::setRotationX	sprite_nodes/CCSprite.h	/^    virtual void setRotationX(float fRotationX);$/;"	p	class:CCSprite	access:public	signature:(float fRotationX)
CCSprite::setRotationY	sprite_nodes/CCSprite.cpp	/^void CCSprite::setRotationY(float fRotationY)$/;"	f	class:CCSprite	signature:(float fRotationY)
CCSprite::setRotationY	sprite_nodes/CCSprite.h	/^    virtual void setRotationY(float fRotationY);$/;"	p	class:CCSprite	access:public	signature:(float fRotationY)
CCSprite::setScale	sprite_nodes/CCSprite.cpp	/^void CCSprite::setScale(float fScale)$/;"	f	class:CCSprite	signature:(float fScale)
CCSprite::setScale	sprite_nodes/CCSprite.h	/^    virtual void setScale(float fScale);$/;"	p	class:CCSprite	access:public	signature:(float fScale)
CCSprite::setScaleX	sprite_nodes/CCSprite.cpp	/^void CCSprite::setScaleX(float fScaleX)$/;"	f	class:CCSprite	signature:(float fScaleX)
CCSprite::setScaleX	sprite_nodes/CCSprite.h	/^    virtual void setScaleX(float fScaleX);$/;"	p	class:CCSprite	access:public	signature:(float fScaleX)
CCSprite::setScaleY	sprite_nodes/CCSprite.cpp	/^void CCSprite::setScaleY(float fScaleY)$/;"	f	class:CCSprite	signature:(float fScaleY)
CCSprite::setScaleY	sprite_nodes/CCSprite.h	/^    virtual void setScaleY(float fScaleY);$/;"	p	class:CCSprite	access:public	signature:(float fScaleY)
CCSprite::setSkewX	sprite_nodes/CCSprite.cpp	/^void CCSprite::setSkewX(float sx)$/;"	f	class:CCSprite	signature:(float sx)
CCSprite::setSkewX	sprite_nodes/CCSprite.h	/^    virtual void setSkewX(float sx);$/;"	p	class:CCSprite	access:public	signature:(float sx)
CCSprite::setSkewY	sprite_nodes/CCSprite.cpp	/^void CCSprite::setSkewY(float sy)$/;"	f	class:CCSprite	signature:(float sy)
CCSprite::setSkewY	sprite_nodes/CCSprite.h	/^    virtual void setSkewY(float sy);$/;"	p	class:CCSprite	access:public	signature:(float sy)
CCSprite::setTexture	sprite_nodes/CCSprite.cpp	/^void CCSprite::setTexture(CCTexture2D *texture)$/;"	f	class:CCSprite	signature:(CCTexture2D *texture)
CCSprite::setTexture	sprite_nodes/CCSprite.h	/^    virtual void setTexture(CCTexture2D *texture);$/;"	p	class:CCSprite	access:public	signature:(CCTexture2D *texture)
CCSprite::setTextureAtlas	sprite_nodes/CCSprite.h	/^    inline void setTextureAtlas(CCTextureAtlas *pobTextureAtlas) { m_pobTextureAtlas = pobTextureAtlas; }$/;"	f	class:CCSprite	access:public	signature:(CCTextureAtlas *pobTextureAtlas)
CCSprite::setTextureCoords	sprite_nodes/CCSprite.cpp	/^void CCSprite::setTextureCoords(CCRect rect)$/;"	f	class:CCSprite	signature:(CCRect rect)
CCSprite::setTextureCoords	sprite_nodes/CCSprite.h	/^    virtual void setTextureCoords(CCRect rect);$/;"	p	class:CCSprite	access:protected	signature:(CCRect rect)
CCSprite::setTextureRect	sprite_nodes/CCSprite.cpp	/^void CCSprite::setTextureRect(const CCRect& rect)$/;"	f	class:CCSprite	signature:(const CCRect& rect)
CCSprite::setTextureRect	sprite_nodes/CCSprite.cpp	/^void CCSprite::setTextureRect(const CCRect& rect, bool rotated, const CCSize& untrimmedSize)$/;"	f	class:CCSprite	signature:(const CCRect& rect, bool rotated, const CCSize& untrimmedSize)
CCSprite::setTextureRect	sprite_nodes/CCSprite.h	/^    virtual void setTextureRect(const CCRect& rect);$/;"	p	class:CCSprite	access:public	signature:(const CCRect& rect)
CCSprite::setTextureRect	sprite_nodes/CCSprite.h	/^    virtual void setTextureRect(const CCRect& rect, bool rotated, const CCSize& untrimmedSize);$/;"	p	class:CCSprite	access:public	signature:(const CCRect& rect, bool rotated, const CCSize& untrimmedSize)
CCSprite::setVertexRect	sprite_nodes/CCSprite.cpp	/^void CCSprite::setVertexRect(const CCRect& rect)$/;"	f	class:CCSprite	signature:(const CCRect& rect)
CCSprite::setVertexRect	sprite_nodes/CCSprite.h	/^    virtual void setVertexRect(const CCRect& rect);$/;"	p	class:CCSprite	access:public	signature:(const CCRect& rect)
CCSprite::setVertexZ	sprite_nodes/CCSprite.cpp	/^void CCSprite::setVertexZ(float fVertexZ)$/;"	f	class:CCSprite	signature:(float fVertexZ)
CCSprite::setVertexZ	sprite_nodes/CCSprite.h	/^    virtual void setVertexZ(float fVertexZ);$/;"	p	class:CCSprite	access:public	signature:(float fVertexZ)
CCSprite::setVisible	sprite_nodes/CCSprite.cpp	/^void CCSprite::setVisible(bool bVisible)$/;"	f	class:CCSprite	signature:(bool bVisible)
CCSprite::setVisible	sprite_nodes/CCSprite.h	/^    virtual void setVisible(bool bVisible);$/;"	p	class:CCSprite	access:public	signature:(bool bVisible)
CCSprite::sortAllChildren	sprite_nodes/CCSprite.cpp	/^void CCSprite::sortAllChildren()$/;"	f	class:CCSprite	signature:()
CCSprite::sortAllChildren	sprite_nodes/CCSprite.h	/^    virtual void sortAllChildren();$/;"	p	class:CCSprite	access:public	signature:()
CCSprite::updateBlendFunc	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateBlendFunc(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::updateBlendFunc	sprite_nodes/CCSprite.h	/^    virtual void updateBlendFunc(void);$/;"	p	class:CCSprite	access:protected	signature:(void)
CCSprite::updateColor	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateColor(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::updateColor	sprite_nodes/CCSprite.h	/^    void updateColor(void);$/;"	p	class:CCSprite	access:protected	signature:(void)
CCSprite::updateDisplayedColor	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateDisplayedColor(const ccColor3B& parentColor)$/;"	f	class:CCSprite	signature:(const ccColor3B& parentColor)
CCSprite::updateDisplayedColor	sprite_nodes/CCSprite.h	/^    virtual void updateDisplayedColor(const ccColor3B& parentColor);$/;"	p	class:CCSprite	access:public	signature:(const ccColor3B& parentColor)
CCSprite::updateDisplayedOpacity	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateDisplayedOpacity(GLubyte opacity)$/;"	f	class:CCSprite	signature:(GLubyte opacity)
CCSprite::updateDisplayedOpacity	sprite_nodes/CCSprite.h	/^    virtual void updateDisplayedOpacity(GLubyte parentOpacity);$/;"	p	class:CCSprite	access:public	signature:(GLubyte parentOpacity)
CCSprite::updateTransform	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateTransform(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::updateTransform	sprite_nodes/CCSprite.h	/^    virtual void updateTransform(void);$/;"	p	class:CCSprite	access:public	signature:(void)
CCSprite::~CCSprite	sprite_nodes/CCSprite.cpp	/^CCSprite::~CCSprite(void)$/;"	f	class:CCSprite	signature:(void)
CCSprite::~CCSprite	sprite_nodes/CCSprite.h	/^    virtual ~CCSprite(void);$/;"	p	class:CCSprite	access:public	signature:(void)
CCSpriteBatchNode	sprite_nodes/CCSpriteBatchNode.h	/^class CC_DLL CCSpriteBatchNode : public CCNode, public CCTextureProtocol$/;"	c	inherits:CCNode,CCTextureProtocol
CCSpriteBatchNode::addChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::addChild(CCNode *child)$/;"	f	class:CCSpriteBatchNode	signature:(CCNode *child)
CCSpriteBatchNode::addChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::addChild(CCNode *child, int zOrder)$/;"	f	class:CCSpriteBatchNode	signature:(CCNode *child, int zOrder)
CCSpriteBatchNode::addChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::addChild(CCNode *child, int zOrder, int tag)$/;"	f	class:CCSpriteBatchNode	signature:(CCNode *child, int zOrder, int tag)
CCSpriteBatchNode::addChild	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void addChild(CCNode * child);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCNode * child)
CCSpriteBatchNode::addChild	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void addChild(CCNode * child, int zOrder);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCNode * child, int zOrder)
CCSpriteBatchNode::addChild	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void addChild(CCNode * child, int zOrder, int tag);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCNode * child, int zOrder, int tag)
CCSpriteBatchNode::addSpriteWithoutQuad	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode * CCSpriteBatchNode::addSpriteWithoutQuad(CCSprite*child, unsigned int z, int aTag)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite*child, unsigned int z, int aTag)
CCSpriteBatchNode::addSpriteWithoutQuad	sprite_nodes/CCSpriteBatchNode.h	/^    CCSpriteBatchNode * addSpriteWithoutQuad(CCSprite*child, unsigned int z, int aTag);$/;"	p	class:CCSpriteBatchNode	access:protected	signature:(CCSprite*child, unsigned int z, int aTag)
CCSpriteBatchNode::appendChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::appendChild(CCSprite* sprite)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite* sprite)
CCSpriteBatchNode::appendChild	sprite_nodes/CCSpriteBatchNode.h	/^    void appendChild(CCSprite* sprite);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite* sprite)
CCSpriteBatchNode::atlasIndexForChild	sprite_nodes/CCSpriteBatchNode.cpp	/^unsigned int CCSpriteBatchNode::atlasIndexForChild(CCSprite *pobSprite, int nZ)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *pobSprite, int nZ)
CCSpriteBatchNode::atlasIndexForChild	sprite_nodes/CCSpriteBatchNode.h	/^    unsigned int atlasIndexForChild(CCSprite *sprite, int z);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite *sprite, int z)
CCSpriteBatchNode::create	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode* CCSpriteBatchNode::create(const char *fileImage, unsigned int capacity\/* = kDefaultSpriteBatchCapacity*\/)$/;"	f	class:CCSpriteBatchNode	signature:(const char *fileImage, unsigned int capacity )
CCSpriteBatchNode::create	sprite_nodes/CCSpriteBatchNode.h	/^    static CCSpriteBatchNode* create(const char* fileImage) {$/;"	f	class:CCSpriteBatchNode	access:public	signature:(const char* fileImage)
CCSpriteBatchNode::create	sprite_nodes/CCSpriteBatchNode.h	/^    static CCSpriteBatchNode* create(const char* fileImage, unsigned int capacity);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(const char* fileImage, unsigned int capacity)
CCSpriteBatchNode::createWithTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode* CCSpriteBatchNode::createWithTexture(CCTexture2D* tex, unsigned int capacity\/* = kDefaultSpriteBatchCapacity*\/)$/;"	f	class:CCSpriteBatchNode	signature:(CCTexture2D* tex, unsigned int capacity )
CCSpriteBatchNode::createWithTexture	sprite_nodes/CCSpriteBatchNode.h	/^    static CCSpriteBatchNode* createWithTexture(CCTexture2D* tex) {$/;"	f	class:CCSpriteBatchNode	access:public	signature:(CCTexture2D* tex)
CCSpriteBatchNode::createWithTexture	sprite_nodes/CCSpriteBatchNode.h	/^    static CCSpriteBatchNode* createWithTexture(CCTexture2D* tex, unsigned int capacity);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCTexture2D* tex, unsigned int capacity)
CCSpriteBatchNode::draw	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::draw(void)$/;"	f	class:CCSpriteBatchNode	signature:(void)
CCSpriteBatchNode::draw	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void draw(void);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(void)
CCSpriteBatchNode::getBlendFunc	sprite_nodes/CCSpriteBatchNode.cpp	/^ccBlendFunc CCSpriteBatchNode::getBlendFunc(void)$/;"	f	class:CCSpriteBatchNode	signature:(void)
CCSpriteBatchNode::getBlendFunc	sprite_nodes/CCSpriteBatchNode.h	/^    virtual ccBlendFunc getBlendFunc(void);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(void)
CCSpriteBatchNode::getDescendants	sprite_nodes/CCSpriteBatchNode.h	/^    inline CCArray* getDescendants(void) { return m_pobDescendants; }$/;"	f	class:CCSpriteBatchNode	access:public	signature:(void)
CCSpriteBatchNode::getTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^CCTexture2D* CCSpriteBatchNode::getTexture(void)$/;"	f	class:CCSpriteBatchNode	signature:(void)
CCSpriteBatchNode::getTexture	sprite_nodes/CCSpriteBatchNode.h	/^    virtual CCTexture2D* getTexture(void);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(void)
CCSpriteBatchNode::getTextureAtlas	sprite_nodes/CCSpriteBatchNode.h	/^    inline CCTextureAtlas* getTextureAtlas(void) { return m_pobTextureAtlas; }$/;"	f	class:CCSpriteBatchNode	access:public	signature:(void)
CCSpriteBatchNode::highestAtlasIndexInChild	sprite_nodes/CCSpriteBatchNode.cpp	/^unsigned int CCSpriteBatchNode::highestAtlasIndexInChild(CCSprite *pSprite)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *pSprite)
CCSpriteBatchNode::highestAtlasIndexInChild	sprite_nodes/CCSpriteBatchNode.h	/^    unsigned int highestAtlasIndexInChild(CCSprite *sprite);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite *sprite)
CCSpriteBatchNode::increaseAtlasCapacity	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::increaseAtlasCapacity(void)$/;"	f	class:CCSpriteBatchNode	signature:(void)
CCSpriteBatchNode::increaseAtlasCapacity	sprite_nodes/CCSpriteBatchNode.h	/^    void increaseAtlasCapacity();$/;"	p	class:CCSpriteBatchNode	access:public	signature:()
CCSpriteBatchNode::init	sprite_nodes/CCSpriteBatchNode.cpp	/^bool CCSpriteBatchNode::init()$/;"	f	class:CCSpriteBatchNode	signature:()
CCSpriteBatchNode::init	sprite_nodes/CCSpriteBatchNode.h	/^    bool init();$/;"	p	class:CCSpriteBatchNode	access:public	signature:()
CCSpriteBatchNode::initWithFile	sprite_nodes/CCSpriteBatchNode.cpp	/^bool CCSpriteBatchNode::initWithFile(const char* fileImage, unsigned int capacity)$/;"	f	class:CCSpriteBatchNode	signature:(const char* fileImage, unsigned int capacity)
CCSpriteBatchNode::initWithFile	sprite_nodes/CCSpriteBatchNode.h	/^    bool initWithFile(const char* fileImage, unsigned int capacity);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(const char* fileImage, unsigned int capacity)
CCSpriteBatchNode::initWithTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^bool CCSpriteBatchNode::initWithTexture(CCTexture2D *tex, unsigned int capacity)$/;"	f	class:CCSpriteBatchNode	signature:(CCTexture2D *tex, unsigned int capacity)
CCSpriteBatchNode::initWithTexture	sprite_nodes/CCSpriteBatchNode.h	/^    bool initWithTexture(CCTexture2D *tex, unsigned int capacity);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCTexture2D *tex, unsigned int capacity)
CCSpriteBatchNode::insertChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::insertChild(CCSprite *pSprite, unsigned int uIndex)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *pSprite, unsigned int uIndex)
CCSpriteBatchNode::insertChild	sprite_nodes/CCSpriteBatchNode.h	/^    void insertChild(CCSprite *child, unsigned int index);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite *child, unsigned int index)
CCSpriteBatchNode::insertQuadFromSprite	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::insertQuadFromSprite(CCSprite *sprite, unsigned int index)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *sprite, unsigned int index)
CCSpriteBatchNode::insertQuadFromSprite	sprite_nodes/CCSpriteBatchNode.h	/^    void insertQuadFromSprite(CCSprite *sprite, unsigned int index);$/;"	p	class:CCSpriteBatchNode	access:protected	signature:(CCSprite *sprite, unsigned int index)
CCSpriteBatchNode::lowestAtlasIndexInChild	sprite_nodes/CCSpriteBatchNode.cpp	/^unsigned int CCSpriteBatchNode::lowestAtlasIndexInChild(CCSprite *pSprite)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *pSprite)
CCSpriteBatchNode::lowestAtlasIndexInChild	sprite_nodes/CCSpriteBatchNode.h	/^    unsigned int lowestAtlasIndexInChild(CCSprite *sprite);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite *sprite)
CCSpriteBatchNode::m_blendFunc	sprite_nodes/CCSpriteBatchNode.h	/^    ccBlendFunc m_blendFunc;$/;"	m	class:CCSpriteBatchNode	access:protected
CCSpriteBatchNode::m_pobDescendants	sprite_nodes/CCSpriteBatchNode.h	/^    CCArray* m_pobDescendants;$/;"	m	class:CCSpriteBatchNode	access:protected
CCSpriteBatchNode::m_pobTextureAtlas	sprite_nodes/CCSpriteBatchNode.h	/^    CCTextureAtlas *m_pobTextureAtlas;$/;"	m	class:CCSpriteBatchNode	access:protected
CCSpriteBatchNode::rebuildIndexInOrder	sprite_nodes/CCSpriteBatchNode.cpp	/^unsigned int CCSpriteBatchNode::rebuildIndexInOrder(CCSprite *pobParent, unsigned int uIndex)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *pobParent, unsigned int uIndex)
CCSpriteBatchNode::rebuildIndexInOrder	sprite_nodes/CCSpriteBatchNode.h	/^    unsigned int rebuildIndexInOrder(CCSprite *parent, unsigned int index);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite *parent, unsigned int index)
CCSpriteBatchNode::removeAllChildrenWithCleanup	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::removeAllChildrenWithCleanup(bool bCleanup)$/;"	f	class:CCSpriteBatchNode	signature:(bool bCleanup)
CCSpriteBatchNode::removeAllChildrenWithCleanup	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void removeAllChildrenWithCleanup(bool cleanup);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(bool cleanup)
CCSpriteBatchNode::removeChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::removeChild(CCNode *child, bool cleanup)$/;"	f	class:CCSpriteBatchNode	signature:(CCNode *child, bool cleanup)
CCSpriteBatchNode::removeChild	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void removeChild(CCNode* child, bool cleanup);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCNode* child, bool cleanup)
CCSpriteBatchNode::removeChildAtIndex	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::removeChildAtIndex(unsigned int uIndex, bool bDoCleanup)$/;"	f	class:CCSpriteBatchNode	signature:(unsigned int uIndex, bool bDoCleanup)
CCSpriteBatchNode::removeChildAtIndex	sprite_nodes/CCSpriteBatchNode.h	/^    void removeChildAtIndex(unsigned int index, bool doCleanup);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(unsigned int index, bool doCleanup)
CCSpriteBatchNode::removeSpriteFromAtlas	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::removeSpriteFromAtlas(CCSprite *pobSprite)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *pobSprite)
CCSpriteBatchNode::removeSpriteFromAtlas	sprite_nodes/CCSpriteBatchNode.h	/^    void removeSpriteFromAtlas(CCSprite *sprite);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite *sprite)
CCSpriteBatchNode::reorderBatch	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::reorderBatch(bool reorder)$/;"	f	class:CCSpriteBatchNode	signature:(bool reorder)
CCSpriteBatchNode::reorderBatch	sprite_nodes/CCSpriteBatchNode.h	/^    void reorderBatch(bool reorder);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(bool reorder)
CCSpriteBatchNode::reorderChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::reorderChild(CCNode *child, int zOrder)$/;"	f	class:CCSpriteBatchNode	signature:(CCNode *child, int zOrder)
CCSpriteBatchNode::reorderChild	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void reorderChild(CCNode * child, int zOrder);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCNode * child, int zOrder)
CCSpriteBatchNode::setBlendFunc	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCSpriteBatchNode	signature:(ccBlendFunc blendFunc)
CCSpriteBatchNode::setBlendFunc	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void setBlendFunc(ccBlendFunc blendFunc);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(ccBlendFunc blendFunc)
CCSpriteBatchNode::setTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::setTexture(CCTexture2D *texture)$/;"	f	class:CCSpriteBatchNode	signature:(CCTexture2D *texture)
CCSpriteBatchNode::setTexture	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void setTexture(CCTexture2D *texture);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCTexture2D *texture)
CCSpriteBatchNode::setTextureAtlas	sprite_nodes/CCSpriteBatchNode.h	/^    inline void setTextureAtlas(CCTextureAtlas* textureAtlas) $/;"	f	class:CCSpriteBatchNode	access:public	signature:(CCTextureAtlas* textureAtlas)
CCSpriteBatchNode::sortAllChildren	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::sortAllChildren()$/;"	f	class:CCSpriteBatchNode	signature:()
CCSpriteBatchNode::sortAllChildren	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void sortAllChildren();$/;"	p	class:CCSpriteBatchNode	access:public	signature:()
CCSpriteBatchNode::swap	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::swap(int oldIndex, int newIndex)$/;"	f	class:CCSpriteBatchNode	signature:(int oldIndex, int newIndex)
CCSpriteBatchNode::swap	sprite_nodes/CCSpriteBatchNode.h	/^    void swap(int oldIndex, int newIndex);$/;"	p	class:CCSpriteBatchNode	access:private	signature:(int oldIndex, int newIndex)
CCSpriteBatchNode::updateAtlasIndex	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::updateAtlasIndex(CCSprite* sprite, int* curIndex)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite* sprite, int* curIndex)
CCSpriteBatchNode::updateAtlasIndex	sprite_nodes/CCSpriteBatchNode.h	/^    void updateAtlasIndex(CCSprite* sprite, int* curIndex);$/;"	p	class:CCSpriteBatchNode	access:private	signature:(CCSprite* sprite, int* curIndex)
CCSpriteBatchNode::updateBlendFunc	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::updateBlendFunc(void)$/;"	f	class:CCSpriteBatchNode	signature:(void)
CCSpriteBatchNode::updateBlendFunc	sprite_nodes/CCSpriteBatchNode.h	/^    void updateBlendFunc();$/;"	p	class:CCSpriteBatchNode	access:private	signature:()
CCSpriteBatchNode::updateQuadFromSprite	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::updateQuadFromSprite(CCSprite *sprite, unsigned int index)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *sprite, unsigned int index)
CCSpriteBatchNode::updateQuadFromSprite	sprite_nodes/CCSpriteBatchNode.h	/^    void updateQuadFromSprite(CCSprite *sprite, unsigned int index);$/;"	p	class:CCSpriteBatchNode	access:protected	signature:(CCSprite *sprite, unsigned int index)
CCSpriteBatchNode::visit	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::visit(void)$/;"	f	class:CCSpriteBatchNode	signature:(void)
CCSpriteBatchNode::visit	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void visit(void);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(void)
CCSpriteBatchNode::~CCSpriteBatchNode	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode::~CCSpriteBatchNode()$/;"	f	class:CCSpriteBatchNode	signature:()
CCSpriteBatchNode::~CCSpriteBatchNode	sprite_nodes/CCSpriteBatchNode.h	/^    ~CCSpriteBatchNode();$/;"	p	class:CCSpriteBatchNode	access:public	signature:()
CCSpriteFrame	sprite_nodes/CCSpriteFrame.h	/^class CC_DLL CCSpriteFrame : public CCObject$/;"	c	inherits:CCObject
CCSpriteFrame::copyWithZone	sprite_nodes/CCSpriteFrame.cpp	/^CCObject* CCSpriteFrame::copyWithZone(CCZone *pZone)$/;"	f	class:CCSpriteFrame	signature:(CCZone *pZone)
CCSpriteFrame::copyWithZone	sprite_nodes/CCSpriteFrame.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCSpriteFrame	access:public	signature:(CCZone *pZone)
CCSpriteFrame::create	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::create(const char* filename, const CCRect& rect)$/;"	f	class:CCSpriteFrame	signature:(const char* filename, const CCRect& rect)
CCSpriteFrame::create	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::create(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame	signature:(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
CCSpriteFrame::create	sprite_nodes/CCSpriteFrame.h	/^    static CCSpriteFrame* create(const char* filename, const CCRect& rect);$/;"	p	class:CCSpriteFrame	access:public	signature:(const char* filename, const CCRect& rect)
CCSpriteFrame::create	sprite_nodes/CCSpriteFrame.h	/^    static CCSpriteFrame* create(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize);$/;"	p	class:CCSpriteFrame	access:public	signature:(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
CCSpriteFrame::createWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::createWithTexture(CCTexture2D *pobTexture, const CCRect& rect)$/;"	f	class:CCSpriteFrame	signature:(CCTexture2D *pobTexture, const CCRect& rect)
CCSpriteFrame::createWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::createWithTexture(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame	signature:(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
CCSpriteFrame::createWithTexture	sprite_nodes/CCSpriteFrame.h	/^    static CCSpriteFrame* createWithTexture(CCTexture2D* pobTexture, const CCRect& rect);$/;"	p	class:CCSpriteFrame	access:public	signature:(CCTexture2D* pobTexture, const CCRect& rect)
CCSpriteFrame::createWithTexture	sprite_nodes/CCSpriteFrame.h	/^    static CCSpriteFrame* createWithTexture(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize);$/;"	p	class:CCSpriteFrame	access:public	signature:(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
CCSpriteFrame::getOffset	sprite_nodes/CCSpriteFrame.cpp	/^const CCPoint& CCSpriteFrame::getOffset(void)$/;"	f	class:CCSpriteFrame	signature:(void)
CCSpriteFrame::getOffset	sprite_nodes/CCSpriteFrame.h	/^    const CCPoint& getOffset(void);$/;"	p	class:CCSpriteFrame	access:public	signature:(void)
CCSpriteFrame::getOffsetInPixels	sprite_nodes/CCSpriteFrame.cpp	/^const CCPoint& CCSpriteFrame::getOffsetInPixels(void)$/;"	f	class:CCSpriteFrame	signature:(void)
CCSpriteFrame::getOffsetInPixels	sprite_nodes/CCSpriteFrame.h	/^    const CCPoint& getOffsetInPixels(void);$/;"	p	class:CCSpriteFrame	access:public	signature:(void)
CCSpriteFrame::getOriginalSize	sprite_nodes/CCSpriteFrame.h	/^    inline const CCSize& getOriginalSize(void) { return m_obOriginalSize; }$/;"	f	class:CCSpriteFrame	access:public	signature:(void)
CCSpriteFrame::getOriginalSizeInPixels	sprite_nodes/CCSpriteFrame.h	/^    inline const CCSize& getOriginalSizeInPixels(void) { return m_obOriginalSizeInPixels; }$/;"	f	class:CCSpriteFrame	access:public	signature:(void)
CCSpriteFrame::getRect	sprite_nodes/CCSpriteFrame.h	/^    inline const CCRect& getRect(void) { return m_obRect; }$/;"	f	class:CCSpriteFrame	access:public	signature:(void)
CCSpriteFrame::getRectInPixels	sprite_nodes/CCSpriteFrame.h	/^    inline const CCRect& getRectInPixels(void) { return m_obRectInPixels; }$/;"	f	class:CCSpriteFrame	access:public	signature:(void)
CCSpriteFrame::getTexture	sprite_nodes/CCSpriteFrame.cpp	/^CCTexture2D* CCSpriteFrame::getTexture(void)$/;"	f	class:CCSpriteFrame	signature:(void)
CCSpriteFrame::getTexture	sprite_nodes/CCSpriteFrame.h	/^    CCTexture2D* getTexture(void);$/;"	p	class:CCSpriteFrame	access:public	signature:(void)
CCSpriteFrame::initWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^bool CCSpriteFrame::initWithTexture(CCTexture2D* pobTexture, const CCRect& rect)$/;"	f	class:CCSpriteFrame	signature:(CCTexture2D* pobTexture, const CCRect& rect)
CCSpriteFrame::initWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^bool CCSpriteFrame::initWithTexture(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame	signature:(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
CCSpriteFrame::initWithTexture	sprite_nodes/CCSpriteFrame.h	/^    bool initWithTexture(CCTexture2D* pobTexture, const CCRect& rect);$/;"	p	class:CCSpriteFrame	access:public	signature:(CCTexture2D* pobTexture, const CCRect& rect)
CCSpriteFrame::initWithTexture	sprite_nodes/CCSpriteFrame.h	/^    bool initWithTexture(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize);$/;"	p	class:CCSpriteFrame	access:public	signature:(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
CCSpriteFrame::initWithTextureFilename	sprite_nodes/CCSpriteFrame.cpp	/^bool CCSpriteFrame::initWithTextureFilename(const char* filename, const CCRect& rect)$/;"	f	class:CCSpriteFrame	signature:(const char* filename, const CCRect& rect)
CCSpriteFrame::initWithTextureFilename	sprite_nodes/CCSpriteFrame.cpp	/^bool CCSpriteFrame::initWithTextureFilename(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame	signature:(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
CCSpriteFrame::initWithTextureFilename	sprite_nodes/CCSpriteFrame.h	/^    bool initWithTextureFilename(const char* filename, const CCRect& rect);$/;"	p	class:CCSpriteFrame	access:public	signature:(const char* filename, const CCRect& rect)
CCSpriteFrame::initWithTextureFilename	sprite_nodes/CCSpriteFrame.h	/^    bool initWithTextureFilename(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize);$/;"	p	class:CCSpriteFrame	access:public	signature:(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
CCSpriteFrame::isRotated	sprite_nodes/CCSpriteFrame.h	/^    inline bool isRotated(void) { return m_bRotated; }$/;"	f	class:CCSpriteFrame	access:public	signature:(void)
CCSpriteFrame::m_bRotated	sprite_nodes/CCSpriteFrame.h	/^    bool   m_bRotated;$/;"	m	class:CCSpriteFrame	access:protected
CCSpriteFrame::m_obOffset	sprite_nodes/CCSpriteFrame.h	/^    CCPoint m_obOffset;$/;"	m	class:CCSpriteFrame	access:protected
CCSpriteFrame::m_obOffsetInPixels	sprite_nodes/CCSpriteFrame.h	/^    CCPoint m_obOffsetInPixels;$/;"	m	class:CCSpriteFrame	access:protected
CCSpriteFrame::m_obOriginalSize	sprite_nodes/CCSpriteFrame.h	/^    CCSize m_obOriginalSize;$/;"	m	class:CCSpriteFrame	access:protected
CCSpriteFrame::m_obOriginalSizeInPixels	sprite_nodes/CCSpriteFrame.h	/^    CCSize m_obOriginalSizeInPixels;$/;"	m	class:CCSpriteFrame	access:protected
CCSpriteFrame::m_obRect	sprite_nodes/CCSpriteFrame.h	/^    CCRect m_obRect;$/;"	m	class:CCSpriteFrame	access:protected
CCSpriteFrame::m_obRectInPixels	sprite_nodes/CCSpriteFrame.h	/^    CCRect m_obRectInPixels;$/;"	m	class:CCSpriteFrame	access:protected
CCSpriteFrame::m_pobTexture	sprite_nodes/CCSpriteFrame.h	/^    CCTexture2D *m_pobTexture;$/;"	m	class:CCSpriteFrame	access:protected
CCSpriteFrame::m_strTextureFilename	sprite_nodes/CCSpriteFrame.h	/^    std::string  m_strTextureFilename;$/;"	m	class:CCSpriteFrame	access:protected
CCSpriteFrame::setOffset	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setOffset(const CCPoint& offsets)$/;"	f	class:CCSpriteFrame	signature:(const CCPoint& offsets)
CCSpriteFrame::setOffset	sprite_nodes/CCSpriteFrame.h	/^    void setOffset(const CCPoint& offsets);$/;"	p	class:CCSpriteFrame	access:public	signature:(const CCPoint& offsets)
CCSpriteFrame::setOffsetInPixels	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setOffsetInPixels(const CCPoint& offsetInPixels)$/;"	f	class:CCSpriteFrame	signature:(const CCPoint& offsetInPixels)
CCSpriteFrame::setOffsetInPixels	sprite_nodes/CCSpriteFrame.h	/^    void setOffsetInPixels(const CCPoint& offsetInPixels);$/;"	p	class:CCSpriteFrame	access:public	signature:(const CCPoint& offsetInPixels)
CCSpriteFrame::setOriginalSize	sprite_nodes/CCSpriteFrame.h	/^    inline void setOriginalSize(const CCSize& sizeInPixels) { m_obOriginalSize = sizeInPixels; }$/;"	f	class:CCSpriteFrame	access:public	signature:(const CCSize& sizeInPixels)
CCSpriteFrame::setOriginalSizeInPixels	sprite_nodes/CCSpriteFrame.h	/^    inline void setOriginalSizeInPixels(const CCSize& sizeInPixels) { m_obOriginalSizeInPixels = sizeInPixels; }$/;"	f	class:CCSpriteFrame	access:public	signature:(const CCSize& sizeInPixels)
CCSpriteFrame::setRect	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setRect(const CCRect& rect)$/;"	f	class:CCSpriteFrame	signature:(const CCRect& rect)
CCSpriteFrame::setRect	sprite_nodes/CCSpriteFrame.h	/^    void setRect(const CCRect& rect);$/;"	p	class:CCSpriteFrame	access:public	signature:(const CCRect& rect)
CCSpriteFrame::setRectInPixels	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setRectInPixels(const CCRect& rectInPixels)$/;"	f	class:CCSpriteFrame	signature:(const CCRect& rectInPixels)
CCSpriteFrame::setRectInPixels	sprite_nodes/CCSpriteFrame.h	/^    void setRectInPixels(const CCRect& rectInPixels);$/;"	p	class:CCSpriteFrame	access:public	signature:(const CCRect& rectInPixels)
CCSpriteFrame::setRotated	sprite_nodes/CCSpriteFrame.h	/^    inline void setRotated(bool bRotated) { m_bRotated = bRotated; }$/;"	f	class:CCSpriteFrame	access:public	signature:(bool bRotated)
CCSpriteFrame::setTexture	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setTexture(CCTexture2D * texture)$/;"	f	class:CCSpriteFrame	signature:(CCTexture2D * texture)
CCSpriteFrame::setTexture	sprite_nodes/CCSpriteFrame.h	/^    void setTexture(CCTexture2D* pobTexture);$/;"	p	class:CCSpriteFrame	access:public	signature:(CCTexture2D* pobTexture)
CCSpriteFrame::~CCSpriteFrame	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame::~CCSpriteFrame(void)$/;"	f	class:CCSpriteFrame	signature:(void)
CCSpriteFrame::~CCSpriteFrame	sprite_nodes/CCSpriteFrame.h	/^    ~CCSpriteFrame(void);$/;"	p	class:CCSpriteFrame	access:public	signature:(void)
CCSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.h	/^    CCSpriteFrameCache(void) : m_pSpriteFrames(NULL), m_pSpriteFramesAliases(NULL){}$/;"	f	class:CCSpriteFrameCache	access:protected	signature:(void)
CCSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.h	/^class CC_DLL CCSpriteFrameCache : public CCObject$/;"	c	inherits:CCObject
CCSpriteFrameCache::CCSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.h	/^    CCSpriteFrameCache(void) : m_pSpriteFrames(NULL), m_pSpriteFramesAliases(NULL){}$/;"	f	class:CCSpriteFrameCache	access:protected	signature:(void)
CCSpriteFrameCache::addSpriteFrame	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFrame(CCSpriteFrame *pobFrame, const char *pszFrameName)$/;"	f	class:CCSpriteFrameCache	signature:(CCSpriteFrame *pobFrame, const char *pszFrameName)
CCSpriteFrameCache::addSpriteFrame	sprite_nodes/CCSpriteFrameCache.h	/^    void addSpriteFrame(CCSpriteFrame *pobFrame, const char *pszFrameName);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(CCSpriteFrame *pobFrame, const char *pszFrameName)
CCSpriteFrameCache::addSpriteFramesWithDictionary	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFramesWithDictionary(CCDictionary* dictionary, CCTexture2D *pobTexture)$/;"	f	class:CCSpriteFrameCache	signature:(CCDictionary* dictionary, CCTexture2D *pobTexture)
CCSpriteFrameCache::addSpriteFramesWithDictionary	sprite_nodes/CCSpriteFrameCache.h	/^    void addSpriteFramesWithDictionary(CCDictionary* pobDictionary, CCTexture2D *pobTexture);$/;"	p	class:CCSpriteFrameCache	access:private	signature:(CCDictionary* pobDictionary, CCTexture2D *pobTexture)
CCSpriteFrameCache::addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFramesWithFile(const char *pszPlist)$/;"	f	class:CCSpriteFrameCache	signature:(const char *pszPlist)
CCSpriteFrameCache::addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFramesWithFile(const char *pszPlist, CCTexture2D *pobTexture)$/;"	f	class:CCSpriteFrameCache	signature:(const char *pszPlist, CCTexture2D *pobTexture)
CCSpriteFrameCache::addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFramesWithFile(const char* plist, const char* textureFileName)$/;"	f	class:CCSpriteFrameCache	signature:(const char* plist, const char* textureFileName)
CCSpriteFrameCache::addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.h	/^    void addSpriteFramesWithFile(const char *pszPlist);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(const char *pszPlist)
CCSpriteFrameCache::addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.h	/^    void addSpriteFramesWithFile(const char *pszPlist, CCTexture2D *pobTexture);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(const char *pszPlist, CCTexture2D *pobTexture)
CCSpriteFrameCache::addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.h	/^    void addSpriteFramesWithFile(const char* plist, const char* textureFileName);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(const char* plist, const char* textureFileName)
CCSpriteFrameCache::init	sprite_nodes/CCSpriteFrameCache.cpp	/^bool CCSpriteFrameCache::init(void)$/;"	f	class:CCSpriteFrameCache	signature:(void)
CCSpriteFrameCache::init	sprite_nodes/CCSpriteFrameCache.h	/^    bool init(void);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(void)
CCSpriteFrameCache::m_pLoadedFileNames	sprite_nodes/CCSpriteFrameCache.h	/^    std::set<std::string>*  m_pLoadedFileNames;$/;"	m	class:CCSpriteFrameCache	access:protected
CCSpriteFrameCache::m_pSpriteFrames	sprite_nodes/CCSpriteFrameCache.h	/^    CCDictionary* m_pSpriteFrames;$/;"	m	class:CCSpriteFrameCache	access:protected
CCSpriteFrameCache::m_pSpriteFramesAliases	sprite_nodes/CCSpriteFrameCache.h	/^    CCDictionary* m_pSpriteFramesAliases;$/;"	m	class:CCSpriteFrameCache	access:protected
CCSpriteFrameCache::purgeSharedSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::purgeSharedSpriteFrameCache(void)$/;"	f	class:CCSpriteFrameCache	signature:(void)
CCSpriteFrameCache::purgeSharedSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.h	/^    static void purgeSharedSpriteFrameCache(void);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(void)
CCSpriteFrameCache::removeSpriteFrameByName	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFrameByName(const char *pszName)$/;"	f	class:CCSpriteFrameCache	signature:(const char *pszName)
CCSpriteFrameCache::removeSpriteFrameByName	sprite_nodes/CCSpriteFrameCache.h	/^    void removeSpriteFrameByName(const char *pszName);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(const char *pszName)
CCSpriteFrameCache::removeSpriteFrames	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFrames(void)$/;"	f	class:CCSpriteFrameCache	signature:(void)
CCSpriteFrameCache::removeSpriteFrames	sprite_nodes/CCSpriteFrameCache.h	/^    void removeSpriteFrames(void);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(void)
CCSpriteFrameCache::removeSpriteFramesFromDictionary	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFramesFromDictionary(CCDictionary* dictionary)$/;"	f	class:CCSpriteFrameCache	signature:(CCDictionary* dictionary)
CCSpriteFrameCache::removeSpriteFramesFromDictionary	sprite_nodes/CCSpriteFrameCache.h	/^    void removeSpriteFramesFromDictionary(CCDictionary* dictionary);$/;"	p	class:CCSpriteFrameCache	access:private	signature:(CCDictionary* dictionary)
CCSpriteFrameCache::removeSpriteFramesFromFile	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFramesFromFile(const char* plist)$/;"	f	class:CCSpriteFrameCache	signature:(const char* plist)
CCSpriteFrameCache::removeSpriteFramesFromFile	sprite_nodes/CCSpriteFrameCache.h	/^    void removeSpriteFramesFromFile(const char* plist);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(const char* plist)
CCSpriteFrameCache::removeSpriteFramesFromTexture	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFramesFromTexture(CCTexture2D* texture)$/;"	f	class:CCSpriteFrameCache	signature:(CCTexture2D* texture)
CCSpriteFrameCache::removeSpriteFramesFromTexture	sprite_nodes/CCSpriteFrameCache.h	/^    void removeSpriteFramesFromTexture(CCTexture2D* texture);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(CCTexture2D* texture)
CCSpriteFrameCache::removeUnusedSpriteFrames	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeUnusedSpriteFrames(void)$/;"	f	class:CCSpriteFrameCache	signature:(void)
CCSpriteFrameCache::removeUnusedSpriteFrames	sprite_nodes/CCSpriteFrameCache.h	/^    void removeUnusedSpriteFrames(void);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(void)
CCSpriteFrameCache::sharedSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.cpp	/^CCSpriteFrameCache* CCSpriteFrameCache::sharedSpriteFrameCache(void)$/;"	f	class:CCSpriteFrameCache	signature:(void)
CCSpriteFrameCache::sharedSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.h	/^    static CCSpriteFrameCache* sharedSpriteFrameCache(void);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(void)
CCSpriteFrameCache::spriteFrameByName	sprite_nodes/CCSpriteFrameCache.cpp	/^CCSpriteFrame* CCSpriteFrameCache::spriteFrameByName(const char *pszName)$/;"	f	class:CCSpriteFrameCache	signature:(const char *pszName)
CCSpriteFrameCache::spriteFrameByName	sprite_nodes/CCSpriteFrameCache.h	/^    CCSpriteFrame* spriteFrameByName(const char *pszName);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(const char *pszName)
CCSpriteFrameCache::~CCSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.cpp	/^CCSpriteFrameCache::~CCSpriteFrameCache(void)$/;"	f	class:CCSpriteFrameCache	signature:(void)
CCSpriteFrameCache::~CCSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.h	/^    ~CCSpriteFrameCache(void);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(void)
CCSpriteIndexNotInitialized	sprite_nodes/CCSprite.h	53;"	d
CCStandardTouchDelegate	touch_dispatcher/CCTouchDelegateProtocol.h	/^ class CC_DLL CCStandardTouchDelegate : public CCTouchDelegate$/;"	c	inherits:CCTouchDelegate
CCStandardTouchDelegate::ccTouchesBegan	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCStandardTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
CCStandardTouchDelegate::ccTouchesCancelled	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual void ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCStandardTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
CCStandardTouchDelegate::ccTouchesEnded	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCStandardTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
CCStandardTouchDelegate::ccTouchesMoved	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCStandardTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
CCStandardTouchHandler	touch_dispatcher/CCTouchHandler.h	/^class CC_DLL  CCStandardTouchHandler : public CCTouchHandler$/;"	c	inherits:CCTouchHandler
CCStandardTouchHandler::handlerWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^CCStandardTouchHandler* CCStandardTouchHandler::handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCStandardTouchHandler	signature:(CCTouchDelegate *pDelegate, int nPriority)
CCStandardTouchHandler::handlerWithDelegate	touch_dispatcher/CCTouchHandler.h	/^    static CCStandardTouchHandler* handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority);$/;"	p	class:CCStandardTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority)
CCStandardTouchHandler::initWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^bool CCStandardTouchHandler::initWithDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCStandardTouchHandler	signature:(CCTouchDelegate *pDelegate, int nPriority)
CCStandardTouchHandler::initWithDelegate	touch_dispatcher/CCTouchHandler.h	/^    virtual bool initWithDelegate(CCTouchDelegate *pDelegate, int nPriority);$/;"	p	class:CCStandardTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority)
CCStopGrid	actions/CCActionGrid.h	/^class CC_DLL CCStopGrid : public CCActionInstant$/;"	c	inherits:CCActionInstant
CCStopGrid::create	actions/CCActionGrid.cpp	/^CCStopGrid* CCStopGrid::create(void)$/;"	f	class:CCStopGrid	signature:(void)
CCStopGrid::create	actions/CCActionGrid.h	/^    static CCStopGrid* create(void);$/;"	p	class:CCStopGrid	access:public	signature:(void)
CCStopGrid::startWithTarget	actions/CCActionGrid.cpp	/^void CCStopGrid::startWithTarget(CCNode *pTarget)$/;"	f	class:CCStopGrid	signature:(CCNode *pTarget)
CCStopGrid::startWithTarget	actions/CCActionGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCStopGrid	access:public	signature:(CCNode *pTarget)
CCString	cocoa/CCString.cpp	/^CCString::CCString()$/;"	f	class:CCString	signature:()
CCString	cocoa/CCString.cpp	/^CCString::CCString(const CCString& str)$/;"	f	class:CCString	signature:(const CCString& str)
CCString	cocoa/CCString.cpp	/^CCString::CCString(const char * str)$/;"	f	class:CCString	signature:(const char * str)
CCString	cocoa/CCString.cpp	/^CCString::CCString(const std::string& str)$/;"	f	class:CCString	signature:(const std::string& str)
CCString	cocoa/CCString.h	/^    CCString();$/;"	p	class:CCString	access:public	signature:()
CCString	cocoa/CCString.h	/^    CCString(const CCString& str);$/;"	p	class:CCString	access:public	signature:(const CCString& str)
CCString	cocoa/CCString.h	/^    CCString(const char* str);$/;"	p	class:CCString	access:public	signature:(const char* str)
CCString	cocoa/CCString.h	/^    CCString(const std::string& str);$/;"	p	class:CCString	access:public	signature:(const std::string& str)
CCString	cocoa/CCString.h	/^class CC_DLL CCString : public CCObject$/;"	c	inherits:CCObject
CCString::CCString	cocoa/CCString.cpp	/^CCString::CCString()$/;"	f	class:CCString	signature:()
CCString::CCString	cocoa/CCString.cpp	/^CCString::CCString(const CCString& str)$/;"	f	class:CCString	signature:(const CCString& str)
CCString::CCString	cocoa/CCString.cpp	/^CCString::CCString(const char * str)$/;"	f	class:CCString	signature:(const char * str)
CCString::CCString	cocoa/CCString.cpp	/^CCString::CCString(const std::string& str)$/;"	f	class:CCString	signature:(const std::string& str)
CCString::CCString	cocoa/CCString.h	/^    CCString();$/;"	p	class:CCString	access:public	signature:()
CCString::CCString	cocoa/CCString.h	/^    CCString(const CCString& str);$/;"	p	class:CCString	access:public	signature:(const CCString& str)
CCString::CCString	cocoa/CCString.h	/^    CCString(const char* str);$/;"	p	class:CCString	access:public	signature:(const char* str)
CCString::CCString	cocoa/CCString.h	/^    CCString(const std::string& str);$/;"	p	class:CCString	access:public	signature:(const std::string& str)
CCString::boolValue	cocoa/CCString.cpp	/^bool CCString::boolValue() const$/;"	f	class:CCString	signature:() const
CCString::boolValue	cocoa/CCString.h	/^    bool boolValue() const;$/;"	p	class:CCString	access:public	signature:() const
CCString::compare	cocoa/CCString.cpp	/^int CCString::compare(const char * pStr) const$/;"	f	class:CCString	signature:(const char * pStr) const
CCString::compare	cocoa/CCString.h	/^    int compare(const char *) const;$/;"	p	class:CCString	access:public	signature:(const char *) const
CCString::copyWithZone	cocoa/CCString.cpp	/^CCObject* CCString::copyWithZone(CCZone* pZone)$/;"	f	class:CCString	signature:(CCZone* pZone)
CCString::copyWithZone	cocoa/CCString.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCString	access:public	signature:(CCZone* pZone)
CCString::create	cocoa/CCString.cpp	/^CCString* CCString::create(const std::string& str)$/;"	f	class:CCString	signature:(const std::string& str)
CCString::create	cocoa/CCString.h	/^    static CCString* create(const std::string& str);$/;"	p	class:CCString	access:public	signature:(const std::string& str)
CCString::createWithContentsOfFile	cocoa/CCString.cpp	/^CCString* CCString::createWithContentsOfFile(const char* pszFileName)$/;"	f	class:CCString	signature:(const char* pszFileName)
CCString::createWithContentsOfFile	cocoa/CCString.h	/^    static CCString* createWithContentsOfFile(const char* pszFileName);$/;"	p	class:CCString	access:public	signature:(const char* pszFileName)
CCString::createWithData	cocoa/CCString.cpp	/^CCString* CCString::createWithData(const unsigned char* pData, unsigned long nLen)$/;"	f	class:CCString	signature:(const unsigned char* pData, unsigned long nLen)
CCString::createWithData	cocoa/CCString.h	/^    static CCString* createWithData(const unsigned char* pData, unsigned long nLen);$/;"	p	class:CCString	access:public	signature:(const unsigned char* pData, unsigned long nLen)
CCString::createWithFormat	cocoa/CCString.cpp	/^CCString* CCString::createWithFormat(const char* format, ...)$/;"	f	class:CCString	signature:(const char* format, ...)
CCString::createWithFormat	cocoa/CCString.h	/^    static CCString* createWithFormat(const char* format, ...);$/;"	p	class:CCString	access:public	signature:(const char* format, ...)
CCString::doubleValue	cocoa/CCString.cpp	/^double CCString::doubleValue() const$/;"	f	class:CCString	signature:() const
CCString::doubleValue	cocoa/CCString.h	/^    double doubleValue() const;$/;"	p	class:CCString	access:public	signature:() const
CCString::floatValue	cocoa/CCString.cpp	/^float CCString::floatValue() const$/;"	f	class:CCString	signature:() const
CCString::floatValue	cocoa/CCString.h	/^    float floatValue() const;$/;"	p	class:CCString	access:public	signature:() const
CCString::getCString	cocoa/CCString.cpp	/^const char* CCString::getCString() const$/;"	f	class:CCString	signature:() const
CCString::getCString	cocoa/CCString.h	/^    const char* getCString() const;$/;"	p	class:CCString	access:public	signature:() const
CCString::initWithFormat	cocoa/CCString.cpp	/^bool CCString::initWithFormat(const char* format, ...)$/;"	f	class:CCString	signature:(const char* format, ...)
CCString::initWithFormat	cocoa/CCString.h	/^    bool initWithFormat(const char* format, ...);$/;"	p	class:CCString	access:public	signature:(const char* format, ...)
CCString::initWithFormatAndValist	cocoa/CCString.cpp	/^bool CCString::initWithFormatAndValist(const char* format, va_list ap)$/;"	f	class:CCString	signature:(const char* format, va_list ap)
CCString::initWithFormatAndValist	cocoa/CCString.h	/^    bool initWithFormatAndValist(const char* format, va_list ap);$/;"	p	class:CCString	access:private	signature:(const char* format, va_list ap)
CCString::intValue	cocoa/CCString.cpp	/^int CCString::intValue() const$/;"	f	class:CCString	signature:() const
CCString::intValue	cocoa/CCString.h	/^    int intValue() const;$/;"	p	class:CCString	access:public	signature:() const
CCString::isEqual	cocoa/CCString.cpp	/^bool CCString::isEqual(const CCObject* pObject)$/;"	f	class:CCString	signature:(const CCObject* pObject)
CCString::isEqual	cocoa/CCString.h	/^    virtual bool isEqual(const CCObject* pObject);$/;"	p	class:CCString	access:public	signature:(const CCObject* pObject)
CCString::length	cocoa/CCString.cpp	/^unsigned int CCString::length() const$/;"	f	class:CCString	signature:() const
CCString::length	cocoa/CCString.h	/^    unsigned int length() const;$/;"	p	class:CCString	access:public	signature:() const
CCString::m_sString	cocoa/CCString.h	/^    std::string m_sString;$/;"	m	class:CCString	access:public
CCString::operator =	cocoa/CCString.cpp	/^CCString& CCString::operator= (const CCString& other)$/;"	f	class:CCString	signature:(const CCString& other)
CCString::operator =	cocoa/CCString.h	/^    CCString& operator= (const CCString& other);$/;"	p	class:CCString	access:public	signature:(const CCString& other)
CCString::uintValue	cocoa/CCString.cpp	/^unsigned int CCString::uintValue() const$/;"	f	class:CCString	signature:() const
CCString::uintValue	cocoa/CCString.h	/^    unsigned int uintValue() const;$/;"	p	class:CCString	access:public	signature:() const
CCString::~CCString	cocoa/CCString.cpp	/^CCString::~CCString()$/;"	f	class:CCString	signature:()
CCString::~CCString	cocoa/CCString.h	/^    virtual ~CCString();$/;"	p	class:CCString	access:public	signature:()
CCStringCompare	cocoa/CCString.h	/^struct CCStringCompare : public std::binary_function<CCString *, CCString *, bool> {$/;"	s	inherits:std::binary_function
CCStringCompare::operator ()	cocoa/CCString.h	/^        bool operator() (CCString * a, CCString * b) const {$/;"	f	struct:CCStringCompare	access:public	signature:(CCString * a, CCString * b) const
CCStringMake	cocoa/CCString.h	128;"	d
CCTMXLayer	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXLayer::CCTMXLayer()$/;"	f	class:CCTMXLayer	signature:()
CCTMXLayer	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCTMXLayer();$/;"	p	class:CCTMXLayer	access:public	signature:()
CCTMXLayer	tilemap_parallax_nodes/CCTMXLayer.h	/^class CC_DLL CCTMXLayer : public CCSpriteBatchNode$/;"	c	inherits:CCSpriteBatchNode
CCTMXLayer::CCTMXLayer	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXLayer::CCTMXLayer()$/;"	f	class:CCTMXLayer	signature:()
CCTMXLayer::CCTMXLayer	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCTMXLayer();$/;"	p	class:CCTMXLayer	access:public	signature:()
CCTMXLayer::CC_PROPERTY	tilemap_parallax_nodes/CCTMXLayer.h	/^    CC_PROPERTY(CCDictionary*, m_pProperties, Properties);$/;"	p	class:CCTMXLayer	access:private	signature:(CCDictionary*, m_pProperties, Properties)
CCTMXLayer::CC_PROPERTY	tilemap_parallax_nodes/CCTMXLayer.h	/^    CC_PROPERTY(CCTMXTilesetInfo*, m_pTileSet, TileSet);$/;"	p	class:CCTMXLayer	access:private	signature:(CCTMXTilesetInfo*, m_pTileSet, TileSet)
CCTMXLayer::CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXLayer.h	/^    CC_SYNTHESIZE(unsigned int*, m_pTiles, Tiles);$/;"	p	class:CCTMXLayer	access:private	signature:(unsigned int*, m_pTiles, Tiles)
CCTMXLayer::CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXLayer.h	/^    CC_SYNTHESIZE(unsigned int, m_uLayerOrientation, LayerOrientation);$/;"	p	class:CCTMXLayer	access:private	signature:(unsigned int, m_uLayerOrientation, LayerOrientation)
CCTMXLayer::CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXLayer.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCSize, m_tLayerSize, LayerSize);$/;"	p	class:CCTMXLayer	access:private	signature:(CCSize, m_tLayerSize, LayerSize)
CCTMXLayer::CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXLayer.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCSize, m_tMapTileSize, MapTileSize);$/;"	p	class:CCTMXLayer	access:private	signature:(CCSize, m_tMapTileSize, MapTileSize)
CCTMXLayer::addChild	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::addChild(CCNode * child, int zOrder, int tag)$/;"	f	class:CCTMXLayer	signature:(CCNode * child, int zOrder, int tag)
CCTMXLayer::addChild	tilemap_parallax_nodes/CCTMXLayer.h	/^    virtual void addChild(CCNode * child, int zOrder, int tag);$/;"	p	class:CCTMXLayer	access:public	signature:(CCNode * child, int zOrder, int tag)
CCTMXLayer::appendTileForGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite * CCTMXLayer::appendTileForGID(unsigned int gid, const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(unsigned int gid, const CCPoint& pos)
CCTMXLayer::appendTileForGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite* appendTileForGID(unsigned int gid, const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(unsigned int gid, const CCPoint& pos)
CCTMXLayer::atlasIndexForExistantZ	tilemap_parallax_nodes/CCTMXLayer.cpp	/^unsigned int CCTMXLayer::atlasIndexForExistantZ(unsigned int z)$/;"	f	class:CCTMXLayer	signature:(unsigned int z)
CCTMXLayer::atlasIndexForExistantZ	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int atlasIndexForExistantZ(unsigned int z);$/;"	p	class:CCTMXLayer	access:private	signature:(unsigned int z)
CCTMXLayer::atlasIndexForNewZ	tilemap_parallax_nodes/CCTMXLayer.cpp	/^unsigned int CCTMXLayer::atlasIndexForNewZ(int z)$/;"	f	class:CCTMXLayer	signature:(int z)
CCTMXLayer::atlasIndexForNewZ	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int atlasIndexForNewZ(int z);$/;"	p	class:CCTMXLayer	access:private	signature:(int z)
CCTMXLayer::calculateLayerOffset	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::calculateLayerOffset(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
CCTMXLayer::calculateLayerOffset	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCPoint calculateLayerOffset(const CCPoint& offset);$/;"	p	class:CCTMXLayer	access:private	signature:(const CCPoint& offset)
CCTMXLayer::create	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXLayer * CCTMXLayer::create(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXLayer	signature:(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
CCTMXLayer::create	tilemap_parallax_nodes/CCTMXLayer.h	/^    static CCTMXLayer * create(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo);$/;"	p	class:CCTMXLayer	access:public	signature:(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
CCTMXLayer::getLayerName	tilemap_parallax_nodes/CCTMXLayer.h	/^    inline const char* getLayerName(){ return m_sLayerName.c_str(); }$/;"	f	class:CCTMXLayer	access:public	signature:()
CCTMXLayer::getProperties	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCDictionary * CCTMXLayer::getProperties()$/;"	f	class:CCTMXLayer	signature:()
CCTMXLayer::getTileSet	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXTilesetInfo * CCTMXLayer::getTileSet()$/;"	f	class:CCTMXLayer	signature:()
CCTMXLayer::initWithTilesetInfo	tilemap_parallax_nodes/CCTMXLayer.cpp	/^bool CCTMXLayer::initWithTilesetInfo(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXLayer	signature:(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
CCTMXLayer::initWithTilesetInfo	tilemap_parallax_nodes/CCTMXLayer.h	/^    bool initWithTilesetInfo(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo);$/;"	p	class:CCTMXLayer	access:public	signature:(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
CCTMXLayer::insertTileForGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite * CCTMXLayer::insertTileForGID(unsigned int gid, const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(unsigned int gid, const CCPoint& pos)
CCTMXLayer::insertTileForGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite* insertTileForGID(unsigned int gid, const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(unsigned int gid, const CCPoint& pos)
CCTMXLayer::m_bUseAutomaticVertexZ	tilemap_parallax_nodes/CCTMXLayer.h	/^    bool                m_bUseAutomaticVertexZ;$/;"	m	class:CCTMXLayer	access:protected
CCTMXLayer::m_cOpacity	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned char        m_cOpacity;$/;"	m	class:CCTMXLayer	access:protected
CCTMXLayer::m_fContentScaleFactor	tilemap_parallax_nodes/CCTMXLayer.h	/^    float               m_fContentScaleFactor;            $/;"	m	class:CCTMXLayer	access:protected
CCTMXLayer::m_nVertexZvalue	tilemap_parallax_nodes/CCTMXLayer.h	/^    int                    m_nVertexZvalue;$/;"	m	class:CCTMXLayer	access:protected
CCTMXLayer::m_pAtlasIndexArray	tilemap_parallax_nodes/CCTMXLayer.h	/^    ccCArray            *m_pAtlasIndexArray;$/;"	m	class:CCTMXLayer	access:protected
CCTMXLayer::m_pReusedTile	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite            *m_pReusedTile;$/;"	m	class:CCTMXLayer	access:protected
CCTMXLayer::m_sLayerName	tilemap_parallax_nodes/CCTMXLayer.h	/^    std::string m_sLayerName;$/;"	m	class:CCTMXLayer	access:protected
CCTMXLayer::m_uMaxGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int        m_uMaxGID;$/;"	m	class:CCTMXLayer	access:protected
CCTMXLayer::m_uMinGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int        m_uMinGID;$/;"	m	class:CCTMXLayer	access:protected
CCTMXLayer::parseInternalProperties	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::parseInternalProperties()$/;"	f	class:CCTMXLayer	signature:()
CCTMXLayer::parseInternalProperties	tilemap_parallax_nodes/CCTMXLayer.h	/^    void parseInternalProperties();$/;"	p	class:CCTMXLayer	access:private	signature:()
CCTMXLayer::positionAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::positionAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
CCTMXLayer::positionAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCPoint positionAt(const CCPoint& tileCoordinate);$/;"	p	class:CCTMXLayer	access:public	signature:(const CCPoint& tileCoordinate)
CCTMXLayer::positionForHexAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::positionForHexAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
CCTMXLayer::positionForHexAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCPoint positionForHexAt(const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(const CCPoint& pos)
CCTMXLayer::positionForIsoAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::positionForIsoAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
CCTMXLayer::positionForIsoAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCPoint positionForIsoAt(const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(const CCPoint& pos)
CCTMXLayer::positionForOrthoAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::positionForOrthoAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
CCTMXLayer::positionForOrthoAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCPoint positionForOrthoAt(const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(const CCPoint& pos)
CCTMXLayer::propertyNamed	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCString* CCTMXLayer::propertyNamed(const char *propertyName)$/;"	f	class:CCTMXLayer	signature:(const char *propertyName)
CCTMXLayer::propertyNamed	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCString *propertyNamed(const char *propertyName);$/;"	p	class:CCTMXLayer	access:public	signature:(const char *propertyName)
CCTMXLayer::releaseMap	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::releaseMap()$/;"	f	class:CCTMXLayer	signature:()
CCTMXLayer::releaseMap	tilemap_parallax_nodes/CCTMXLayer.h	/^    void releaseMap();$/;"	p	class:CCTMXLayer	access:public	signature:()
CCTMXLayer::removeChild	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::removeChild(CCNode* node, bool cleanup)$/;"	f	class:CCTMXLayer	signature:(CCNode* node, bool cleanup)
CCTMXLayer::removeChild	tilemap_parallax_nodes/CCTMXLayer.h	/^    void removeChild(CCNode* child, bool cleanup);$/;"	p	class:CCTMXLayer	access:public	signature:(CCNode* child, bool cleanup)
CCTMXLayer::removeTileAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::removeTileAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
CCTMXLayer::removeTileAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    void removeTileAt(const CCPoint& tileCoordinate);$/;"	p	class:CCTMXLayer	access:public	signature:(const CCPoint& tileCoordinate)
CCTMXLayer::reusedTileWithRect	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite* CCTMXLayer::reusedTileWithRect(CCRect rect)$/;"	f	class:CCTMXLayer	signature:(CCRect rect)
CCTMXLayer::reusedTileWithRect	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite* reusedTileWithRect(CCRect rect);$/;"	p	class:CCTMXLayer	access:private	signature:(CCRect rect)
CCTMXLayer::setLayerName	tilemap_parallax_nodes/CCTMXLayer.h	/^    inline void setLayerName(const char *layerName){ m_sLayerName = layerName; }$/;"	f	class:CCTMXLayer	access:public	signature:(const char *layerName)
CCTMXLayer::setProperties	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setProperties(CCDictionary* var)$/;"	f	class:CCTMXLayer	signature:(CCDictionary* var)
CCTMXLayer::setTileGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setTileGID(unsigned int gid, const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(unsigned int gid, const CCPoint& pos)
CCTMXLayer::setTileGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setTileGID(unsigned int gid, const CCPoint& pos, ccTMXTileFlags flags)$/;"	f	class:CCTMXLayer	signature:(unsigned int gid, const CCPoint& pos, ccTMXTileFlags flags)
CCTMXLayer::setTileGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    void setTileGID(unsigned int gid, const CCPoint& tileCoordinate);$/;"	p	class:CCTMXLayer	access:public	signature:(unsigned int gid, const CCPoint& tileCoordinate)
CCTMXLayer::setTileGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    void setTileGID(unsigned int gid, const CCPoint& tileCoordinate, ccTMXTileFlags flags);$/;"	p	class:CCTMXLayer	access:public	signature:(unsigned int gid, const CCPoint& tileCoordinate, ccTMXTileFlags flags)
CCTMXLayer::setTileSet	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setTileSet(CCTMXTilesetInfo* var)$/;"	f	class:CCTMXLayer	signature:(CCTMXTilesetInfo* var)
CCTMXLayer::setupTileSprite	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setupTileSprite(CCSprite* sprite, CCPoint pos, unsigned int gid)$/;"	f	class:CCTMXLayer	signature:(CCSprite* sprite, CCPoint pos, unsigned int gid)
CCTMXLayer::setupTileSprite	tilemap_parallax_nodes/CCTMXLayer.h	/^    void setupTileSprite(CCSprite* sprite, CCPoint pos, unsigned int gid);$/;"	p	class:CCTMXLayer	access:private	signature:(CCSprite* sprite, CCPoint pos, unsigned int gid)
CCTMXLayer::setupTiles	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setupTiles()$/;"	f	class:CCTMXLayer	signature:()
CCTMXLayer::setupTiles	tilemap_parallax_nodes/CCTMXLayer.h	/^    void setupTiles();$/;"	p	class:CCTMXLayer	access:public	signature:()
CCTMXLayer::tileAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite * CCTMXLayer::tileAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
CCTMXLayer::tileAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite* tileAt(const CCPoint& tileCoordinate);$/;"	p	class:CCTMXLayer	access:public	signature:(const CCPoint& tileCoordinate)
CCTMXLayer::tileGIDAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^unsigned int CCTMXLayer::tileGIDAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
CCTMXLayer::tileGIDAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^unsigned int CCTMXLayer::tileGIDAt(const CCPoint& pos, ccTMXTileFlags* flags)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos, ccTMXTileFlags* flags)
CCTMXLayer::tileGIDAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int  tileGIDAt(const CCPoint& tileCoordinate);$/;"	p	class:CCTMXLayer	access:public	signature:(const CCPoint& tileCoordinate)
CCTMXLayer::tileGIDAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int tileGIDAt(const CCPoint& tileCoordinate, ccTMXTileFlags* flags);$/;"	p	class:CCTMXLayer	access:public	signature:(const CCPoint& tileCoordinate, ccTMXTileFlags* flags)
CCTMXLayer::updateTileForGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite * CCTMXLayer::updateTileForGID(unsigned int gid, const CCPoint& pos)    $/;"	f	class:CCTMXLayer	signature:(unsigned int gid, const CCPoint& pos)
CCTMXLayer::updateTileForGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite* updateTileForGID(unsigned int gid, const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(unsigned int gid, const CCPoint& pos)
CCTMXLayer::vertexZForPos	tilemap_parallax_nodes/CCTMXLayer.cpp	/^int CCTMXLayer::vertexZForPos(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
CCTMXLayer::vertexZForPos	tilemap_parallax_nodes/CCTMXLayer.h	/^    int vertexZForPos(const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(const CCPoint& pos)
CCTMXLayer::~CCTMXLayer	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXLayer::~CCTMXLayer()$/;"	f	class:CCTMXLayer	signature:()
CCTMXLayer::~CCTMXLayer	tilemap_parallax_nodes/CCTMXLayer.h	/^    virtual ~CCTMXLayer();$/;"	p	class:CCTMXLayer	access:public	signature:()
CCTMXLayerInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXLayerInfo::CCTMXLayerInfo()$/;"	f	class:CCTMXLayerInfo	signature:()
CCTMXLayerInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCTMXLayerInfo();$/;"	p	class:CCTMXLayerInfo	access:public	signature:()
CCTMXLayerInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^class CC_DLL CCTMXLayerInfo : public CCObject$/;"	c	inherits:CCObject
CCTMXLayerInfo::CCTMXLayerInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXLayerInfo::CCTMXLayerInfo()$/;"	f	class:CCTMXLayerInfo	signature:()
CCTMXLayerInfo::CCTMXLayerInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCTMXLayerInfo();$/;"	p	class:CCTMXLayerInfo	access:public	signature:()
CCTMXLayerInfo::CC_PROPERTY	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_PROPERTY(CCDictionary*, m_pProperties, Properties);$/;"	p	class:CCTMXLayerInfo	access:private	signature:(CCDictionary*, m_pProperties, Properties)
CCTMXLayerInfo::getProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCDictionary * CCTMXLayerInfo::getProperties()$/;"	f	class:CCTMXLayerInfo	signature:()
CCTMXLayerInfo::m_bOwnTiles	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool                m_bOwnTiles;$/;"	m	class:CCTMXLayerInfo	access:public
CCTMXLayerInfo::m_bVisible	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool                m_bVisible;$/;"	m	class:CCTMXLayerInfo	access:public
CCTMXLayerInfo::m_cOpacity	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned char       m_cOpacity;$/;"	m	class:CCTMXLayerInfo	access:public
CCTMXLayerInfo::m_pTiles	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int        *m_pTiles;$/;"	m	class:CCTMXLayerInfo	access:public
CCTMXLayerInfo::m_sName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string         m_sName;$/;"	m	class:CCTMXLayerInfo	access:public
CCTMXLayerInfo::m_tLayerSize	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCSize              m_tLayerSize;$/;"	m	class:CCTMXLayerInfo	access:public
CCTMXLayerInfo::m_tOffset	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCPoint             m_tOffset;$/;"	m	class:CCTMXLayerInfo	access:public
CCTMXLayerInfo::m_uMaxGID	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int        m_uMaxGID;$/;"	m	class:CCTMXLayerInfo	access:public
CCTMXLayerInfo::m_uMinGID	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int        m_uMinGID;$/;"	m	class:CCTMXLayerInfo	access:public
CCTMXLayerInfo::setProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXLayerInfo::setProperties(CCDictionary* var)$/;"	f	class:CCTMXLayerInfo	signature:(CCDictionary* var)
CCTMXLayerInfo::~CCTMXLayerInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXLayerInfo::~CCTMXLayerInfo()$/;"	f	class:CCTMXLayerInfo	signature:()
CCTMXLayerInfo::~CCTMXLayerInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    virtual ~CCTMXLayerInfo();$/;"	p	class:CCTMXLayerInfo	access:public	signature:()
CCTMXMapInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXMapInfo::CCTMXMapInfo()$/;"	f	class:CCTMXMapInfo	signature:()
CCTMXMapInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCTMXMapInfo();$/;"	p	class:CCTMXMapInfo	access:public	signature:()
CCTMXMapInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^class CC_DLL CCTMXMapInfo : public CCObject, public CCSAXDelegator$/;"	c	inherits:CCObject,CCSAXDelegator
CCTMXMapInfo::CCTMXMapInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXMapInfo::CCTMXMapInfo()$/;"	f	class:CCTMXMapInfo	signature:()
CCTMXMapInfo::CCTMXMapInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCTMXMapInfo();$/;"	p	class:CCTMXMapInfo	access:public	signature:()
CCTMXMapInfo::CC_PROPERTY	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_PROPERTY(CCArray*, m_pLayers, Layers);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCArray*, m_pLayers, Layers)
CCTMXMapInfo::CC_PROPERTY	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_PROPERTY(CCArray*, m_pObjectGroups, ObjectGroups);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCArray*, m_pObjectGroups, ObjectGroups)
CCTMXMapInfo::CC_PROPERTY	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_PROPERTY(CCArray*, m_pTilesets, Tilesets);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCArray*, m_pTilesets, Tilesets)
CCTMXMapInfo::CC_PROPERTY	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_PROPERTY(CCDictionary*, m_pProperties, Properties);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCDictionary*, m_pProperties, Properties)
CCTMXMapInfo::CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE(bool, m_bStoringCharacters, StoringCharacters);$/;"	p	class:CCTMXMapInfo	access:public	signature:(bool, m_bStoringCharacters, StoringCharacters)
CCTMXMapInfo::CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE(int,    m_nOrientation, Orientation);$/;"	p	class:CCTMXMapInfo	access:public	signature:(int, m_nOrientation, Orientation)
CCTMXMapInfo::CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE(int, m_nLayerAttribs, LayerAttribs);$/;"	p	class:CCTMXMapInfo	access:public	signature:(int, m_nLayerAttribs, LayerAttribs)
CCTMXMapInfo::CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE(int, m_nParentElement, ParentElement);$/;"	p	class:CCTMXMapInfo	access:public	signature:(int, m_nParentElement, ParentElement)
CCTMXMapInfo::CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE(unsigned int, m_uParentGID, ParentGID);$/;"	p	class:CCTMXMapInfo	access:public	signature:(unsigned int, m_uParentGID, ParentGID)
CCTMXMapInfo::CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCSize, m_tMapSize, MapSize);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCSize, m_tMapSize, MapSize)
CCTMXMapInfo::CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCSize, m_tTileSize, TileSize);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCSize, m_tTileSize, TileSize)
CCTMXMapInfo::endElement	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::endElement(void *ctx, const char *name)$/;"	f	class:CCTMXMapInfo	signature:(void *ctx, const char *name)
CCTMXMapInfo::endElement	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    void endElement(void *ctx, const char *name);$/;"	p	class:CCTMXMapInfo	access:public	signature:(void *ctx, const char *name)
CCTMXMapInfo::formatWithTMXFile	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXMapInfo * CCTMXMapInfo::formatWithTMXFile(const char *tmxFile)$/;"	f	class:CCTMXMapInfo	signature:(const char *tmxFile)
CCTMXMapInfo::formatWithTMXFile	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    static CCTMXMapInfo * formatWithTMXFile(const char *tmxFile);$/;"	p	class:CCTMXMapInfo	access:public	signature:(const char *tmxFile)
CCTMXMapInfo::formatWithXML	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXMapInfo * CCTMXMapInfo::formatWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXMapInfo	signature:(const char* tmxString, const char* resourcePath)
CCTMXMapInfo::formatWithXML	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    static CCTMXMapInfo * formatWithXML(const char* tmxString, const char* resourcePath);$/;"	p	class:CCTMXMapInfo	access:public	signature:(const char* tmxString, const char* resourcePath)
CCTMXMapInfo::getCurrentString	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    inline const char* getCurrentString(){ return m_sCurrentString.c_str(); }$/;"	f	class:CCTMXMapInfo	access:public	signature:()
CCTMXMapInfo::getLayers	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCArray* CCTMXMapInfo::getLayers()$/;"	f	class:CCTMXMapInfo	signature:()
CCTMXMapInfo::getObjectGroups	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCArray* CCTMXMapInfo::getObjectGroups()$/;"	f	class:CCTMXMapInfo	signature:()
CCTMXMapInfo::getProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCDictionary * CCTMXMapInfo::getProperties()$/;"	f	class:CCTMXMapInfo	signature:()
CCTMXMapInfo::getTMXFileName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    inline const char* getTMXFileName(){ return m_sTMXFileName.c_str(); }$/;"	f	class:CCTMXMapInfo	access:public	signature:()
CCTMXMapInfo::getTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCDictionary* CCTMXMapInfo::getTileProperties()$/;"	f	class:CCTMXMapInfo	signature:()
CCTMXMapInfo::getTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCDictionary* getTileProperties();$/;"	p	class:CCTMXMapInfo	access:public	signature:()
CCTMXMapInfo::getTilesets	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCArray* CCTMXMapInfo::getTilesets()$/;"	f	class:CCTMXMapInfo	signature:()
CCTMXMapInfo::initWithTMXFile	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^bool CCTMXMapInfo::initWithTMXFile(const char *tmxFile)$/;"	f	class:CCTMXMapInfo	signature:(const char *tmxFile)
CCTMXMapInfo::initWithTMXFile	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool initWithTMXFile(const char *tmxFile);$/;"	p	class:CCTMXMapInfo	access:public	signature:(const char *tmxFile)
CCTMXMapInfo::initWithXML	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^bool CCTMXMapInfo::initWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXMapInfo	signature:(const char* tmxString, const char* resourcePath)
CCTMXMapInfo::initWithXML	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool initWithXML(const char* tmxString, const char* resourcePath);$/;"	p	class:CCTMXMapInfo	access:public	signature:(const char* tmxString, const char* resourcePath)
CCTMXMapInfo::internalInit	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::internalInit(const char* tmxFileName, const char* resourcePath)$/;"	f	class:CCTMXMapInfo	signature:(const char* tmxFileName, const char* resourcePath)
CCTMXMapInfo::internalInit	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    void internalInit(const char* tmxFileName, const char* resourcePath);$/;"	p	class:CCTMXMapInfo	access:private	signature:(const char* tmxFileName, const char* resourcePath)
CCTMXMapInfo::m_pTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCDictionary* m_pTileProperties;$/;"	m	class:CCTMXMapInfo	access:protected
CCTMXMapInfo::m_sCurrentString	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string m_sCurrentString;$/;"	m	class:CCTMXMapInfo	access:protected
CCTMXMapInfo::m_sResources	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string m_sResources;$/;"	m	class:CCTMXMapInfo	access:protected
CCTMXMapInfo::m_sTMXFileName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string m_sTMXFileName;$/;"	m	class:CCTMXMapInfo	access:protected
CCTMXMapInfo::m_uCurrentFirstGID	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int m_uCurrentFirstGID;$/;"	m	class:CCTMXMapInfo	access:protected
CCTMXMapInfo::parseXMLFile	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^bool CCTMXMapInfo::parseXMLFile(const char *xmlFilename)$/;"	f	class:CCTMXMapInfo	signature:(const char *xmlFilename)
CCTMXMapInfo::parseXMLFile	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool parseXMLFile(const char *xmlFilename);$/;"	p	class:CCTMXMapInfo	access:public	signature:(const char *xmlFilename)
CCTMXMapInfo::parseXMLString	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^bool CCTMXMapInfo::parseXMLString(const char *xmlString)$/;"	f	class:CCTMXMapInfo	signature:(const char *xmlString)
CCTMXMapInfo::parseXMLString	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool parseXMLString(const char *xmlString);$/;"	p	class:CCTMXMapInfo	access:public	signature:(const char *xmlString)
CCTMXMapInfo::setCurrentString	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    inline void setCurrentString(const char *currentString){ m_sCurrentString = currentString; }$/;"	f	class:CCTMXMapInfo	access:public	signature:(const char *currentString)
CCTMXMapInfo::setLayers	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setLayers(CCArray* var)$/;"	f	class:CCTMXMapInfo	signature:(CCArray* var)
CCTMXMapInfo::setObjectGroups	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setObjectGroups(CCArray* var)$/;"	f	class:CCTMXMapInfo	signature:(CCArray* var)
CCTMXMapInfo::setProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setProperties(CCDictionary* var)$/;"	f	class:CCTMXMapInfo	signature:(CCDictionary* var)
CCTMXMapInfo::setTMXFileName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    inline void setTMXFileName(const char *fileName){ m_sTMXFileName = fileName; }$/;"	f	class:CCTMXMapInfo	access:public	signature:(const char *fileName)
CCTMXMapInfo::setTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setTileProperties(CCDictionary* tileProperties)$/;"	f	class:CCTMXMapInfo	signature:(CCDictionary* tileProperties)
CCTMXMapInfo::setTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    void setTileProperties(CCDictionary* tileProperties);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCDictionary* tileProperties)
CCTMXMapInfo::setTilesets	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setTilesets(CCArray* var)$/;"	f	class:CCTMXMapInfo	signature:(CCArray* var)
CCTMXMapInfo::startElement	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::startElement(void *ctx, const char *name, const char **atts)$/;"	f	class:CCTMXMapInfo	signature:(void *ctx, const char *name, const char **atts)
CCTMXMapInfo::startElement	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    void startElement(void *ctx, const char *name, const char **atts);$/;"	p	class:CCTMXMapInfo	access:public	signature:(void *ctx, const char *name, const char **atts)
CCTMXMapInfo::textHandler	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::textHandler(void *ctx, const char *ch, int len)$/;"	f	class:CCTMXMapInfo	signature:(void *ctx, const char *ch, int len)
CCTMXMapInfo::textHandler	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    void textHandler(void *ctx, const char *ch, int len);$/;"	p	class:CCTMXMapInfo	access:public	signature:(void *ctx, const char *ch, int len)
CCTMXMapInfo::~CCTMXMapInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXMapInfo::~CCTMXMapInfo()$/;"	f	class:CCTMXMapInfo	signature:()
CCTMXMapInfo::~CCTMXMapInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    virtual ~CCTMXMapInfo();$/;"	p	class:CCTMXMapInfo	access:public	signature:()
CCTMXObjectGroup	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCTMXObjectGroup::CCTMXObjectGroup()$/;"	f	class:CCTMXObjectGroup	signature:()
CCTMXObjectGroup	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    CCTMXObjectGroup();$/;"	p	class:CCTMXObjectGroup	access:public	signature:()
CCTMXObjectGroup	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^class CC_DLL CCTMXObjectGroup : public CCObject$/;"	c	inherits:CCObject
CCTMXObjectGroup::CCTMXObjectGroup	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCTMXObjectGroup::CCTMXObjectGroup()$/;"	f	class:CCTMXObjectGroup	signature:()
CCTMXObjectGroup::CCTMXObjectGroup	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    CCTMXObjectGroup();$/;"	p	class:CCTMXObjectGroup	access:public	signature:()
CCTMXObjectGroup::CC_PROPERTY	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    CC_PROPERTY(CCArray*, m_pObjects, Objects);$/;"	p	class:CCTMXObjectGroup	access:private	signature:(CCArray*, m_pObjects, Objects)
CCTMXObjectGroup::CC_PROPERTY	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    CC_PROPERTY(CCDictionary*, m_pProperties, Properties);$/;"	p	class:CCTMXObjectGroup	access:private	signature:(CCDictionary*, m_pProperties, Properties)
CCTMXObjectGroup::CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCPoint, m_tPositionOffset, PositionOffset);$/;"	p	class:CCTMXObjectGroup	access:private	signature:(CCPoint, m_tPositionOffset, PositionOffset)
CCTMXObjectGroup::getGroupName	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    inline const char* getGroupName(){ return m_sGroupName.c_str(); }$/;"	f	class:CCTMXObjectGroup	access:public	signature:()
CCTMXObjectGroup::getObjects	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCArray* CCTMXObjectGroup::getObjects()$/;"	f	class:CCTMXObjectGroup	signature:()
CCTMXObjectGroup::getProperties	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCDictionary* CCTMXObjectGroup::getProperties()$/;"	f	class:CCTMXObjectGroup	signature:()
CCTMXObjectGroup::m_sGroupName	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    std::string m_sGroupName;$/;"	m	class:CCTMXObjectGroup	access:protected
CCTMXObjectGroup::objectNamed	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCDictionary* CCTMXObjectGroup::objectNamed(const char *objectName)$/;"	f	class:CCTMXObjectGroup	signature:(const char *objectName)
CCTMXObjectGroup::objectNamed	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    CCDictionary* objectNamed(const char *objectName);$/;"	p	class:CCTMXObjectGroup	access:public	signature:(const char *objectName)
CCTMXObjectGroup::propertyNamed	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCString* CCTMXObjectGroup::propertyNamed(const char* propertyName)$/;"	f	class:CCTMXObjectGroup	signature:(const char* propertyName)
CCTMXObjectGroup::propertyNamed	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    CCString *propertyNamed(const char* propertyName);$/;"	p	class:CCTMXObjectGroup	access:public	signature:(const char* propertyName)
CCTMXObjectGroup::setGroupName	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    inline void setGroupName(const char *groupName){ m_sGroupName = groupName; }$/;"	f	class:CCTMXObjectGroup	access:public	signature:(const char *groupName)
CCTMXObjectGroup::setObjects	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^void CCTMXObjectGroup::setObjects(CCArray* objects)$/;"	f	class:CCTMXObjectGroup	signature:(CCArray* objects)
CCTMXObjectGroup::setProperties	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^void CCTMXObjectGroup::setProperties(CCDictionary * properties)$/;"	f	class:CCTMXObjectGroup	signature:(CCDictionary * properties)
CCTMXObjectGroup::~CCTMXObjectGroup	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCTMXObjectGroup::~CCTMXObjectGroup()$/;"	f	class:CCTMXObjectGroup	signature:()
CCTMXObjectGroup::~CCTMXObjectGroup	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    virtual ~CCTMXObjectGroup();$/;"	p	class:CCTMXObjectGroup	access:public	signature:()
CCTMXOrientationHex	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXOrientationHex,$/;"	e	enum:__anon58
CCTMXOrientationIso	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXOrientationIso,$/;"	e	enum:__anon58
CCTMXOrientationOrtho	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXOrientationOrtho,$/;"	e	enum:__anon58
CCTMXTiledMap	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap::CCTMXTiledMap()$/;"	f	class:CCTMXTiledMap	signature:()
CCTMXTiledMap	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXTiledMap();$/;"	p	class:CCTMXTiledMap	access:public	signature:()
CCTMXTiledMap	tilemap_parallax_nodes/CCTMXTiledMap.h	/^class CC_DLL CCTMXTiledMap : public CCNode$/;"	c	inherits:CCNode
CCTMXTiledMap::CCTMXTiledMap	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap::CCTMXTiledMap()$/;"	f	class:CCTMXTiledMap	signature:()
CCTMXTiledMap::CCTMXTiledMap	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXTiledMap();$/;"	p	class:CCTMXTiledMap	access:public	signature:()
CCTMXTiledMap::CC_PROPERTY	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CC_PROPERTY(CCArray*, m_pObjectGroups, ObjectGroups);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCArray*, m_pObjectGroups, ObjectGroups)
CCTMXTiledMap::CC_PROPERTY	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CC_PROPERTY(CCDictionary*, m_pProperties, Properties);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCDictionary*, m_pProperties, Properties)
CCTMXTiledMap::CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CC_SYNTHESIZE(int, m_nMapOrientation, MapOrientation);$/;"	p	class:CCTMXTiledMap	access:private	signature:(int, m_nMapOrientation, MapOrientation)
CCTMXTiledMap::CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCSize, m_tMapSize, MapSize);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCSize, m_tMapSize, MapSize)
CCTMXTiledMap::CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCSize, m_tTileSize, TileSize);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCSize, m_tTileSize, TileSize)
CCTMXTiledMap::buildWithMapInfo	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^void CCTMXTiledMap::buildWithMapInfo(CCTMXMapInfo* mapInfo)$/;"	f	class:CCTMXTiledMap	signature:(CCTMXMapInfo* mapInfo)
CCTMXTiledMap::buildWithMapInfo	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    void buildWithMapInfo(CCTMXMapInfo* mapInfo);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCTMXMapInfo* mapInfo)
CCTMXTiledMap::create	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap * CCTMXTiledMap::create(const char *tmxFile)$/;"	f	class:CCTMXTiledMap	signature:(const char *tmxFile)
CCTMXTiledMap::create	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    static CCTMXTiledMap* create(const char *tmxFile);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char *tmxFile)
CCTMXTiledMap::createWithXML	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap* CCTMXTiledMap::createWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXTiledMap	signature:(const char* tmxString, const char* resourcePath)
CCTMXTiledMap::createWithXML	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    static CCTMXTiledMap* createWithXML(const char* tmxString, const char* resourcePath);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char* tmxString, const char* resourcePath)
CCTMXTiledMap::getObjectGroups	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCArray* CCTMXTiledMap::getObjectGroups()$/;"	f	class:CCTMXTiledMap	signature:()
CCTMXTiledMap::getProperties	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCDictionary * CCTMXTiledMap::getProperties()$/;"	f	class:CCTMXTiledMap	signature:()
CCTMXTiledMap::initWithTMXFile	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^bool CCTMXTiledMap::initWithTMXFile(const char *tmxFile)$/;"	f	class:CCTMXTiledMap	signature:(const char *tmxFile)
CCTMXTiledMap::initWithTMXFile	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    bool initWithTMXFile(const char *tmxFile);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char *tmxFile)
CCTMXTiledMap::initWithXML	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^bool CCTMXTiledMap::initWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXTiledMap	signature:(const char* tmxString, const char* resourcePath)
CCTMXTiledMap::initWithXML	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    bool initWithXML(const char* tmxString, const char* resourcePath);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char* tmxString, const char* resourcePath)
CCTMXTiledMap::layerNamed	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXLayer * CCTMXTiledMap::layerNamed(const char *layerName)$/;"	f	class:CCTMXTiledMap	signature:(const char *layerName)
CCTMXTiledMap::layerNamed	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXLayer* layerNamed(const char *layerName);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char *layerName)
CCTMXTiledMap::m_pTileProperties	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCDictionary* m_pTileProperties;$/;"	m	class:CCTMXTiledMap	access:protected
CCTMXTiledMap::objectGroupNamed	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXObjectGroup * CCTMXTiledMap::objectGroupNamed(const char *groupName)$/;"	f	class:CCTMXTiledMap	signature:(const char *groupName)
CCTMXTiledMap::objectGroupNamed	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXObjectGroup* objectGroupNamed(const char *groupName);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char *groupName)
CCTMXTiledMap::parseLayer	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXLayer * CCTMXTiledMap::parseLayer(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXTiledMap	signature:(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
CCTMXTiledMap::parseLayer	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXLayer * parseLayer(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
CCTMXTiledMap::propertiesForGID	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCDictionary* CCTMXTiledMap::propertiesForGID(int GID)$/;"	f	class:CCTMXTiledMap	signature:(int GID)
CCTMXTiledMap::propertiesForGID	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCDictionary* propertiesForGID(int GID);$/;"	p	class:CCTMXTiledMap	access:public	signature:(int GID)
CCTMXTiledMap::propertyNamed	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCString* CCTMXTiledMap::propertyNamed(const char *propertyName)$/;"	f	class:CCTMXTiledMap	signature:(const char *propertyName)
CCTMXTiledMap::propertyNamed	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCString *propertyNamed(const char *propertyName);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char *propertyName)
CCTMXTiledMap::setObjectGroups	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^void CCTMXTiledMap::setObjectGroups(CCArray* var)$/;"	f	class:CCTMXTiledMap	signature:(CCArray* var)
CCTMXTiledMap::setProperties	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^void CCTMXTiledMap::setProperties(CCDictionary* var)$/;"	f	class:CCTMXTiledMap	signature:(CCDictionary* var)
CCTMXTiledMap::tilesetForLayer	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTilesetInfo * CCTMXTiledMap::tilesetForLayer(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXTiledMap	signature:(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
CCTMXTiledMap::tilesetForLayer	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXTilesetInfo * tilesetForLayer(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
CCTMXTiledMap::~CCTMXTiledMap	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap::~CCTMXTiledMap()$/;"	f	class:CCTMXTiledMap	signature:()
CCTMXTiledMap::~CCTMXTiledMap	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    virtual ~CCTMXTiledMap();$/;"	p	class:CCTMXTiledMap	access:public	signature:()
CCTMXTilesetInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXTilesetInfo::CCTMXTilesetInfo()$/;"	f	class:CCTMXTilesetInfo	signature:()
CCTMXTilesetInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCTMXTilesetInfo();$/;"	p	class:CCTMXTilesetInfo	access:public	signature:()
CCTMXTilesetInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^class CC_DLL CCTMXTilesetInfo : public CCObject$/;"	c	inherits:CCObject
CCTMXTilesetInfo::CCTMXTilesetInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXTilesetInfo::CCTMXTilesetInfo()$/;"	f	class:CCTMXTilesetInfo	signature:()
CCTMXTilesetInfo::CCTMXTilesetInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCTMXTilesetInfo();$/;"	p	class:CCTMXTilesetInfo	access:public	signature:()
CCTMXTilesetInfo::m_sName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string     m_sName;$/;"	m	class:CCTMXTilesetInfo	access:public
CCTMXTilesetInfo::m_sSourceImage	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string     m_sSourceImage;$/;"	m	class:CCTMXTilesetInfo	access:public
CCTMXTilesetInfo::m_tImageSize	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCSize          m_tImageSize;$/;"	m	class:CCTMXTilesetInfo	access:public
CCTMXTilesetInfo::m_tTileSize	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCSize          m_tTileSize;$/;"	m	class:CCTMXTilesetInfo	access:public
CCTMXTilesetInfo::m_uFirstGid	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int    m_uFirstGid;$/;"	m	class:CCTMXTilesetInfo	access:public
CCTMXTilesetInfo::m_uMargin	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int    m_uMargin;$/;"	m	class:CCTMXTilesetInfo	access:public
CCTMXTilesetInfo::m_uSpacing	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int    m_uSpacing;$/;"	m	class:CCTMXTilesetInfo	access:public
CCTMXTilesetInfo::rectForGID	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCRect CCTMXTilesetInfo::rectForGID(unsigned int gid)$/;"	f	class:CCTMXTilesetInfo	signature:(unsigned int gid)
CCTMXTilesetInfo::rectForGID	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCRect rectForGID(unsigned int gid);$/;"	p	class:CCTMXTilesetInfo	access:public	signature:(unsigned int gid)
CCTMXTilesetInfo::~CCTMXTilesetInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXTilesetInfo::~CCTMXTilesetInfo()$/;"	f	class:CCTMXTilesetInfo	signature:()
CCTMXTilesetInfo::~CCTMXTilesetInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    virtual ~CCTMXTilesetInfo();$/;"	p	class:CCTMXTilesetInfo	access:public	signature:()
CCTOUCHBEGAN	touch_dispatcher/CCTouchDispatcher.h	/^    CCTOUCHBEGAN,$/;"	e	enum:__anon62
CCTOUCHCANCELLED	touch_dispatcher/CCTouchDispatcher.h	/^    CCTOUCHCANCELLED,$/;"	e	enum:__anon62
CCTOUCHENDED	touch_dispatcher/CCTouchDispatcher.h	/^    CCTOUCHENDED,$/;"	e	enum:__anon62
CCTOUCHMOVED	touch_dispatcher/CCTouchDispatcher.h	/^    CCTOUCHMOVED,$/;"	e	enum:__anon62
CCTargetedAction	actions/CCActionInterval.cpp	/^CCTargetedAction::CCTargetedAction()$/;"	f	class:CCTargetedAction	signature:()
CCTargetedAction	actions/CCActionInterval.h	/^    CCTargetedAction();$/;"	p	class:CCTargetedAction	access:public	signature:()
CCTargetedAction	actions/CCActionInterval.h	/^class CC_DLL CCTargetedAction : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCTargetedAction::CCTargetedAction	actions/CCActionInterval.cpp	/^CCTargetedAction::CCTargetedAction()$/;"	f	class:CCTargetedAction	signature:()
CCTargetedAction::CCTargetedAction	actions/CCActionInterval.h	/^    CCTargetedAction();$/;"	p	class:CCTargetedAction	access:public	signature:()
CCTargetedAction::CC_SYNTHESIZE_RETAIN	actions/CCActionInterval.h	/^    CC_SYNTHESIZE_RETAIN(CCNode*, m_pForcedTarget, ForcedTarget);$/;"	p	class:CCTargetedAction	access:public	signature:(CCNode*, m_pForcedTarget, ForcedTarget)
CCTargetedAction::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCTargetedAction::copyWithZone(CCZone* pZone)$/;"	f	class:CCTargetedAction	signature:(CCZone* pZone)
CCTargetedAction::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCTargetedAction	access:public	signature:(CCZone* pZone)
CCTargetedAction::create	actions/CCActionInterval.cpp	/^CCTargetedAction* CCTargetedAction::create(CCNode* pTarget, CCFiniteTimeAction* pAction)$/;"	f	class:CCTargetedAction	signature:(CCNode* pTarget, CCFiniteTimeAction* pAction)
CCTargetedAction::create	actions/CCActionInterval.h	/^    static CCTargetedAction* create(CCNode* pTarget, CCFiniteTimeAction* pAction);$/;"	p	class:CCTargetedAction	access:public	signature:(CCNode* pTarget, CCFiniteTimeAction* pAction)
CCTargetedAction::initWithTarget	actions/CCActionInterval.cpp	/^bool CCTargetedAction::initWithTarget(CCNode* pTarget, CCFiniteTimeAction* pAction)$/;"	f	class:CCTargetedAction	signature:(CCNode* pTarget, CCFiniteTimeAction* pAction)
CCTargetedAction::initWithTarget	actions/CCActionInterval.h	/^    bool initWithTarget(CCNode* pTarget, CCFiniteTimeAction* pAction);$/;"	p	class:CCTargetedAction	access:public	signature:(CCNode* pTarget, CCFiniteTimeAction* pAction)
CCTargetedAction::m_pAction	actions/CCActionInterval.h	/^    CCFiniteTimeAction* m_pAction;$/;"	m	class:CCTargetedAction	access:private
CCTargetedAction::startWithTarget	actions/CCActionInterval.cpp	/^void CCTargetedAction::startWithTarget(CCNode *pTarget)$/;"	f	class:CCTargetedAction	signature:(CCNode *pTarget)
CCTargetedAction::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCTargetedAction	access:public	signature:(CCNode *pTarget)
CCTargetedAction::stop	actions/CCActionInterval.cpp	/^void CCTargetedAction::stop(void)$/;"	f	class:CCTargetedAction	signature:(void)
CCTargetedAction::stop	actions/CCActionInterval.h	/^    virtual void stop(void);$/;"	p	class:CCTargetedAction	access:public	signature:(void)
CCTargetedAction::update	actions/CCActionInterval.cpp	/^void CCTargetedAction::update(float time)$/;"	f	class:CCTargetedAction	signature:(float time)
CCTargetedAction::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCTargetedAction	access:public	signature:(float time)
CCTargetedAction::~CCTargetedAction	actions/CCActionInterval.cpp	/^CCTargetedAction::~CCTargetedAction()$/;"	f	class:CCTargetedAction	signature:()
CCTargetedAction::~CCTargetedAction	actions/CCActionInterval.h	/^    virtual ~CCTargetedAction();$/;"	p	class:CCTargetedAction	access:public	signature:()
CCTargetedTouchDelegate	touch_dispatcher/CCTouchDelegateProtocol.h	/^ class CC_DLL CCTargetedTouchDelegate : public CCTouchDelegate$/;"	c	inherits:CCTouchDelegate
CCTargetedTouchDelegate::ccTouchBegan	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent) { CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);return false;};$/;"	f	class:CCTargetedTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCTargetedTouchDelegate::ccTouchCancelled	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTargetedTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCTargetedTouchDelegate::ccTouchEnded	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTargetedTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCTargetedTouchDelegate::ccTouchMoved	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTargetedTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCTargetedTouchHandler	touch_dispatcher/CCTouchHandler.h	/^class CC_DLL  CCTargetedTouchHandler : public CCTouchHandler$/;"	c	inherits:CCTouchHandler
CCTargetedTouchHandler::getClaimedTouches	touch_dispatcher/CCTouchHandler.cpp	/^CCSet* CCTargetedTouchHandler::getClaimedTouches(void)$/;"	f	class:CCTargetedTouchHandler	signature:(void)
CCTargetedTouchHandler::getClaimedTouches	touch_dispatcher/CCTouchHandler.h	/^    CCSet* getClaimedTouches(void);$/;"	p	class:CCTargetedTouchHandler	access:public	signature:(void)
CCTargetedTouchHandler::handlerWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^CCTargetedTouchHandler* CCTargetedTouchHandler::handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)$/;"	f	class:CCTargetedTouchHandler	signature:(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)
CCTargetedTouchHandler::handlerWithDelegate	touch_dispatcher/CCTouchHandler.h	/^    static CCTargetedTouchHandler* handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow);$/;"	p	class:CCTargetedTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)
CCTargetedTouchHandler::initWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^bool CCTargetedTouchHandler::initWithDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)$/;"	f	class:CCTargetedTouchHandler	signature:(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)
CCTargetedTouchHandler::initWithDelegate	touch_dispatcher/CCTouchHandler.h	/^    bool initWithDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow);$/;"	p	class:CCTargetedTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)
CCTargetedTouchHandler::isSwallowsTouches	touch_dispatcher/CCTouchHandler.cpp	/^bool CCTargetedTouchHandler::isSwallowsTouches(void)$/;"	f	class:CCTargetedTouchHandler	signature:(void)
CCTargetedTouchHandler::isSwallowsTouches	touch_dispatcher/CCTouchHandler.h	/^    bool isSwallowsTouches(void);$/;"	p	class:CCTargetedTouchHandler	access:public	signature:(void)
CCTargetedTouchHandler::m_bSwallowsTouches	touch_dispatcher/CCTouchHandler.h	/^    bool m_bSwallowsTouches;$/;"	m	class:CCTargetedTouchHandler	access:protected
CCTargetedTouchHandler::m_pClaimedTouches	touch_dispatcher/CCTouchHandler.h	/^    CCSet *m_pClaimedTouches;$/;"	m	class:CCTargetedTouchHandler	access:protected
CCTargetedTouchHandler::setSwallowsTouches	touch_dispatcher/CCTouchHandler.cpp	/^void CCTargetedTouchHandler::setSwallowsTouches(bool bSwallowsTouches)$/;"	f	class:CCTargetedTouchHandler	signature:(bool bSwallowsTouches)
CCTargetedTouchHandler::setSwallowsTouches	touch_dispatcher/CCTouchHandler.h	/^    void setSwallowsTouches(bool bSwallowsTouches);$/;"	p	class:CCTargetedTouchHandler	access:public	signature:(bool bSwallowsTouches)
CCTargetedTouchHandler::~CCTargetedTouchHandler	touch_dispatcher/CCTouchHandler.cpp	/^CCTargetedTouchHandler::~CCTargetedTouchHandler(void)$/;"	f	class:CCTargetedTouchHandler	signature:(void)
CCTargetedTouchHandler::~CCTargetedTouchHandler	touch_dispatcher/CCTouchHandler.h	/^    ~CCTargetedTouchHandler(void);$/;"	p	class:CCTargetedTouchHandler	access:public	signature:(void)
CCTextAlignment	include/ccTypes.h	/^} CCTextAlignment;$/;"	t	typeref:enum:__anon7
CCTextFieldDelegate	text_input_node/CCTextFieldTTF.h	/^class CC_DLL CCTextFieldDelegate$/;"	c
CCTextFieldDelegate::onDraw	text_input_node/CCTextFieldTTF.h	/^    virtual bool onDraw(CCTextFieldTTF * sender)$/;"	f	class:CCTextFieldDelegate	access:public	signature:(CCTextFieldTTF * sender)
CCTextFieldDelegate::onTextFieldAttachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool onTextFieldAttachWithIME(CCTextFieldTTF * sender)$/;"	f	class:CCTextFieldDelegate	access:public	signature:(CCTextFieldTTF * sender)
CCTextFieldDelegate::onTextFieldDeleteBackward	text_input_node/CCTextFieldTTF.h	/^    virtual bool onTextFieldDeleteBackward(CCTextFieldTTF * sender, const char * delText, int nLen)$/;"	f	class:CCTextFieldDelegate	access:public	signature:(CCTextFieldTTF * sender, const char * delText, int nLen)
CCTextFieldDelegate::onTextFieldDetachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool onTextFieldDetachWithIME(CCTextFieldTTF * sender)$/;"	f	class:CCTextFieldDelegate	access:public	signature:(CCTextFieldTTF * sender)
CCTextFieldDelegate::onTextFieldInsertText	text_input_node/CCTextFieldTTF.h	/^    virtual bool onTextFieldInsertText(CCTextFieldTTF * sender, const char * text, int nLen)$/;"	f	class:CCTextFieldDelegate	access:public	signature:(CCTextFieldTTF * sender, const char * text, int nLen)
CCTextFieldTTF	text_input_node/CCTextFieldTTF.cpp	/^CCTextFieldTTF::CCTextFieldTTF()$/;"	f	class:CCTextFieldTTF	signature:()
CCTextFieldTTF	text_input_node/CCTextFieldTTF.h	/^    CCTextFieldTTF();$/;"	p	class:CCTextFieldTTF	access:public	signature:()
CCTextFieldTTF	text_input_node/CCTextFieldTTF.h	/^class CC_DLL CCTextFieldTTF : public CCLabelTTF, public CCIMEDelegate$/;"	c	inherits:CCLabelTTF,CCIMEDelegate
CCTextFieldTTF::CCTextFieldTTF	text_input_node/CCTextFieldTTF.cpp	/^CCTextFieldTTF::CCTextFieldTTF()$/;"	f	class:CCTextFieldTTF	signature:()
CCTextFieldTTF::CCTextFieldTTF	text_input_node/CCTextFieldTTF.h	/^    CCTextFieldTTF();$/;"	p	class:CCTextFieldTTF	access:public	signature:()
CCTextFieldTTF::CC_SYNTHESIZE	text_input_node/CCTextFieldTTF.h	/^    CC_SYNTHESIZE(CCTextFieldDelegate *, m_pDelegate, Delegate);$/;"	p	class:CCTextFieldTTF	access:public	signature:(CCTextFieldDelegate *, m_pDelegate, Delegate)
CCTextFieldTTF::CC_SYNTHESIZE_READONLY	text_input_node/CCTextFieldTTF.h	/^    CC_SYNTHESIZE_READONLY(int, m_nCharCount, CharCount);$/;"	p	class:CCTextFieldTTF	access:public	signature:(int, m_nCharCount, CharCount)
CCTextFieldTTF::attachWithIME	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::attachWithIME()$/;"	f	class:CCTextFieldTTF	signature:()
CCTextFieldTTF::attachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool attachWithIME();$/;"	p	class:CCTextFieldTTF	access:public	signature:()
CCTextFieldTTF::canAttachWithIME	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::canAttachWithIME()$/;"	f	class:CCTextFieldTTF	signature:()
CCTextFieldTTF::canAttachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool canAttachWithIME();$/;"	p	class:CCTextFieldTTF	access:protected	signature:()
CCTextFieldTTF::canDetachWithIME	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::canDetachWithIME()$/;"	f	class:CCTextFieldTTF	signature:()
CCTextFieldTTF::canDetachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool canDetachWithIME();$/;"	p	class:CCTextFieldTTF	access:protected	signature:()
CCTextFieldTTF::deleteBackward	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::deleteBackward()$/;"	f	class:CCTextFieldTTF	signature:()
CCTextFieldTTF::deleteBackward	text_input_node/CCTextFieldTTF.h	/^    virtual void deleteBackward();$/;"	p	class:CCTextFieldTTF	access:protected	signature:()
CCTextFieldTTF::detachWithIME	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::detachWithIME()$/;"	f	class:CCTextFieldTTF	signature:()
CCTextFieldTTF::detachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool detachWithIME();$/;"	p	class:CCTextFieldTTF	access:public	signature:()
CCTextFieldTTF::draw	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::draw()$/;"	f	class:CCTextFieldTTF	signature:()
CCTextFieldTTF::draw	text_input_node/CCTextFieldTTF.h	/^    virtual void draw();$/;"	p	class:CCTextFieldTTF	access:protected	signature:()
CCTextFieldTTF::getColorSpaceHolder	text_input_node/CCTextFieldTTF.cpp	/^const ccColor3B& CCTextFieldTTF::getColorSpaceHolder()$/;"	f	class:CCTextFieldTTF	signature:()
CCTextFieldTTF::getColorSpaceHolder	text_input_node/CCTextFieldTTF.h	/^    virtual const ccColor3B& getColorSpaceHolder();$/;"	p	class:CCTextFieldTTF	access:public	signature:()
CCTextFieldTTF::getContentText	text_input_node/CCTextFieldTTF.cpp	/^const char * CCTextFieldTTF::getContentText()$/;"	f	class:CCTextFieldTTF	signature:()
CCTextFieldTTF::getContentText	text_input_node/CCTextFieldTTF.h	/^    virtual const char * getContentText();$/;"	p	class:CCTextFieldTTF	access:protected	signature:()
CCTextFieldTTF::getPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^const char * CCTextFieldTTF::getPlaceHolder(void)$/;"	f	class:CCTextFieldTTF	signature:(void)
CCTextFieldTTF::getPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    virtual const char * getPlaceHolder(void);$/;"	p	class:CCTextFieldTTF	access:public	signature:(void)
CCTextFieldTTF::getString	text_input_node/CCTextFieldTTF.cpp	/^const char* CCTextFieldTTF::getString(void)$/;"	f	class:CCTextFieldTTF	signature:(void)
CCTextFieldTTF::getString	text_input_node/CCTextFieldTTF.h	/^    virtual const char* getString(void);$/;"	p	class:CCTextFieldTTF	access:public	signature:(void)
CCTextFieldTTF::initWithPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::initWithPlaceHolder(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)$/;"	f	class:CCTextFieldTTF	signature:(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)
CCTextFieldTTF::initWithPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::initWithPlaceHolder(const char *placeholder, const char *fontName, float fontSize)$/;"	f	class:CCTextFieldTTF	signature:(const char *placeholder, const char *fontName, float fontSize)
CCTextFieldTTF::initWithPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    bool initWithPlaceHolder(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)
CCTextFieldTTF::initWithPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    bool initWithPlaceHolder(const char *placeholder, const char *fontName, float fontSize);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const char *placeholder, const char *fontName, float fontSize)
CCTextFieldTTF::insertText	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::insertText(const char * text, int len)$/;"	f	class:CCTextFieldTTF	signature:(const char * text, int len)
CCTextFieldTTF::insertText	text_input_node/CCTextFieldTTF.h	/^    virtual void insertText(const char * text, int len);$/;"	p	class:CCTextFieldTTF	access:protected	signature:(const char * text, int len)
CCTextFieldTTF::m_ColorSpaceHolder	text_input_node/CCTextFieldTTF.h	/^    ccColor3B m_ColorSpaceHolder;$/;"	m	class:CCTextFieldTTF	access:protected
CCTextFieldTTF::m_pInputText	text_input_node/CCTextFieldTTF.h	/^    std::string * m_pInputText;$/;"	m	class:CCTextFieldTTF	access:protected
CCTextFieldTTF::m_pLens	text_input_node/CCTextFieldTTF.h	/^    LengthStack * m_pLens;$/;"	m	class:CCTextFieldTTF	access:private
CCTextFieldTTF::m_pPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    std::string * m_pPlaceHolder;$/;"	m	class:CCTextFieldTTF	access:protected
CCTextFieldTTF::setColorSpaceHolder	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::setColorSpaceHolder(const ccColor3B& color)$/;"	f	class:CCTextFieldTTF	signature:(const ccColor3B& color)
CCTextFieldTTF::setColorSpaceHolder	text_input_node/CCTextFieldTTF.h	/^    virtual void setColorSpaceHolder(const ccColor3B& color);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const ccColor3B& color)
CCTextFieldTTF::setPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::setPlaceHolder(const char * text)$/;"	f	class:CCTextFieldTTF	signature:(const char * text)
CCTextFieldTTF::setPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    virtual void setPlaceHolder(const char * text);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const char * text)
CCTextFieldTTF::setString	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::setString(const char *text)$/;"	f	class:CCTextFieldTTF	signature:(const char *text)
CCTextFieldTTF::setString	text_input_node/CCTextFieldTTF.h	/^    virtual void setString(const char *text);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const char *text)
CCTextFieldTTF::textFieldWithPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^CCTextFieldTTF * CCTextFieldTTF::textFieldWithPlaceHolder(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)$/;"	f	class:CCTextFieldTTF	signature:(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)
CCTextFieldTTF::textFieldWithPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^CCTextFieldTTF * CCTextFieldTTF::textFieldWithPlaceHolder(const char *placeholder, const char *fontName, float fontSize)$/;"	f	class:CCTextFieldTTF	signature:(const char *placeholder, const char *fontName, float fontSize)
CCTextFieldTTF::textFieldWithPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    static CCTextFieldTTF * textFieldWithPlaceHolder(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)
CCTextFieldTTF::textFieldWithPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    static CCTextFieldTTF * textFieldWithPlaceHolder(const char *placeholder, const char *fontName, float fontSize);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const char *placeholder, const char *fontName, float fontSize)
CCTextFieldTTF::~CCTextFieldTTF	text_input_node/CCTextFieldTTF.cpp	/^CCTextFieldTTF::~CCTextFieldTTF()$/;"	f	class:CCTextFieldTTF	signature:()
CCTextFieldTTF::~CCTextFieldTTF	text_input_node/CCTextFieldTTF.h	/^    virtual ~CCTextFieldTTF();$/;"	p	class:CCTextFieldTTF	access:public	signature:()
CCTexture2D	textures/CCTexture2D.cpp	/^CCTexture2D::CCTexture2D()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D	textures/CCTexture2D.h	/^    CCTexture2D();$/;"	p	class:CCTexture2D	access:public	signature:()
CCTexture2D	textures/CCTexture2D.h	/^class CC_DLL CCTexture2D : public CCObject$/;"	c	inherits:CCObject
CCTexture2D::CCTexture2D	textures/CCTexture2D.cpp	/^CCTexture2D::CCTexture2D()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::CCTexture2D	textures/CCTexture2D.h	/^    CCTexture2D();$/;"	p	class:CCTexture2D	access:public	signature:()
CCTexture2D::CC_PROPERTY	textures/CCTexture2D.h	/^    CC_PROPERTY(CCGLProgram*, m_pShaderProgram, ShaderProgram);$/;"	p	class:CCTexture2D	access:private	signature:(CCGLProgram*, m_pShaderProgram, ShaderProgram)
CCTexture2D::PVRImagesHavePremultipliedAlpha	textures/CCTexture2D.cpp	/^void CCTexture2D::PVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)$/;"	f	class:CCTexture2D	signature:(bool haveAlphaPremultiplied)
CCTexture2D::PVRImagesHavePremultipliedAlpha	textures/CCTexture2D.h	/^    static void PVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied);$/;"	p	class:CCTexture2D	access:public	signature:(bool haveAlphaPremultiplied)
CCTexture2D::bitsPerPixelForFormat	textures/CCTexture2D.cpp	/^unsigned int CCTexture2D::bitsPerPixelForFormat()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::bitsPerPixelForFormat	textures/CCTexture2D.cpp	/^unsigned int CCTexture2D::bitsPerPixelForFormat(CCTexture2DPixelFormat format)$/;"	f	class:CCTexture2D	signature:(CCTexture2DPixelFormat format)
CCTexture2D::bitsPerPixelForFormat	textures/CCTexture2D.h	/^    unsigned int bitsPerPixelForFormat();  $/;"	p	class:CCTexture2D	access:public	signature:()
CCTexture2D::bitsPerPixelForFormat	textures/CCTexture2D.h	/^    unsigned int bitsPerPixelForFormat(CCTexture2DPixelFormat format);$/;"	p	class:CCTexture2D	access:public	signature:(CCTexture2DPixelFormat format)
CCTexture2D::defaultAlphaPixelFormat	textures/CCTexture2D.cpp	/^CCTexture2DPixelFormat CCTexture2D::defaultAlphaPixelFormat()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::defaultAlphaPixelFormat	textures/CCTexture2D.h	/^    static CCTexture2DPixelFormat defaultAlphaPixelFormat();$/;"	p	class:CCTexture2D	access:public	signature:()
CCTexture2D::description	textures/CCTexture2D.cpp	/^const char* CCTexture2D::description(void)$/;"	f	class:CCTexture2D	signature:(void)
CCTexture2D::description	textures/CCTexture2D.h	/^    const char* description(void);$/;"	p	class:CCTexture2D	access:public	signature:(void)
CCTexture2D::drawAtPoint	textures/CCTexture2D.cpp	/^void CCTexture2D::drawAtPoint(const CCPoint& point)$/;"	f	class:CCTexture2D	signature:(const CCPoint& point)
CCTexture2D::drawAtPoint	textures/CCTexture2D.h	/^    void drawAtPoint(const CCPoint& point);$/;"	p	class:CCTexture2D	access:public	signature:(const CCPoint& point)
CCTexture2D::drawInRect	textures/CCTexture2D.cpp	/^void CCTexture2D::drawInRect(const CCRect& rect)$/;"	f	class:CCTexture2D	signature:(const CCRect& rect)
CCTexture2D::drawInRect	textures/CCTexture2D.h	/^    void drawInRect(const CCRect& rect);$/;"	p	class:CCTexture2D	access:public	signature:(const CCRect& rect)
CCTexture2D::generateMipmap	textures/CCTexture2D.cpp	/^void CCTexture2D::generateMipmap()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::generateMipmap	textures/CCTexture2D.h	/^    void generateMipmap();$/;"	p	class:CCTexture2D	access:public	signature:()
CCTexture2D::getContentSize	textures/CCTexture2D.cpp	/^CCSize CCTexture2D::getContentSize()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::getContentSizeInPixels	textures/CCTexture2D.cpp	/^const CCSize& CCTexture2D::getContentSizeInPixels()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::getContentSizeInPixels	textures/CCTexture2D.h	/^    const CCSize& getContentSizeInPixels();$/;"	p	class:CCTexture2D	access:public	signature:()
CCTexture2D::getMaxS	textures/CCTexture2D.cpp	/^GLfloat CCTexture2D::getMaxS()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::getMaxT	textures/CCTexture2D.cpp	/^GLfloat CCTexture2D::getMaxT()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::getName	textures/CCTexture2D.cpp	/^GLuint CCTexture2D::getName()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::getPixelFormat	textures/CCTexture2D.cpp	/^CCTexture2DPixelFormat CCTexture2D::getPixelFormat()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::getPixelsHigh	textures/CCTexture2D.cpp	/^unsigned int CCTexture2D::getPixelsHigh()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::getPixelsWide	textures/CCTexture2D.cpp	/^unsigned int CCTexture2D::getPixelsWide()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::getShaderProgram	textures/CCTexture2D.cpp	/^CCGLProgram* CCTexture2D::getShaderProgram(void)$/;"	f	class:CCTexture2D	signature:(void)
CCTexture2D::hasMipmaps	textures/CCTexture2D.cpp	/^bool CCTexture2D::hasMipmaps()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::hasMipmaps	textures/CCTexture2D.h	/^    bool hasMipmaps();$/;"	p	class:CCTexture2D	access:public	signature:()
CCTexture2D::hasPremultipliedAlpha	textures/CCTexture2D.cpp	/^bool CCTexture2D::hasPremultipliedAlpha()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::hasPremultipliedAlpha	textures/CCTexture2D.h	/^    bool hasPremultipliedAlpha();$/;"	p	class:CCTexture2D	access:public	signature:()
CCTexture2D::initPremultipliedATextureWithImage	textures/CCTexture2D.cpp	/^bool CCTexture2D::initPremultipliedATextureWithImage(CCImage *image, unsigned int width, unsigned int height)$/;"	f	class:CCTexture2D	signature:(CCImage *image, unsigned int width, unsigned int height)
CCTexture2D::initPremultipliedATextureWithImage	textures/CCTexture2D.h	/^    bool initPremultipliedATextureWithImage(CCImage * image, unsigned int pixelsWide, unsigned int pixelsHigh);$/;"	p	class:CCTexture2D	access:private	signature:(CCImage * image, unsigned int pixelsWide, unsigned int pixelsHigh)
CCTexture2D::initWithData	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithData(const void *data, CCTexture2DPixelFormat pixelFormat, unsigned int pixelsWide, unsigned int pixelsHigh, const CCSize& contentSize)$/;"	f	class:CCTexture2D	signature:(const void *data, CCTexture2DPixelFormat pixelFormat, unsigned int pixelsWide, unsigned int pixelsHigh, const CCSize& contentSize)
CCTexture2D::initWithData	textures/CCTexture2D.h	/^    bool initWithData(const void* data, CCTexture2DPixelFormat pixelFormat, unsigned int pixelsWide, unsigned int pixelsHigh, const CCSize& contentSize);$/;"	p	class:CCTexture2D	access:public	signature:(const void* data, CCTexture2DPixelFormat pixelFormat, unsigned int pixelsWide, unsigned int pixelsHigh, const CCSize& contentSize)
CCTexture2D::initWithImage	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithImage(CCImage *uiImage)$/;"	f	class:CCTexture2D	signature:(CCImage *uiImage)
CCTexture2D::initWithImage	textures/CCTexture2D.h	/^    bool initWithImage(CCImage * uiImage);$/;"	p	class:CCTexture2D	access:public	signature:(CCImage * uiImage)
CCTexture2D::initWithPVRFile	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithPVRFile(const char* file)$/;"	f	class:CCTexture2D	signature:(const char* file)
CCTexture2D::initWithPVRFile	textures/CCTexture2D.h	/^    bool initWithPVRFile(const char* file);$/;"	p	class:CCTexture2D	access:public	signature:(const char* file)
CCTexture2D::initWithPVRTCData	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithPVRTCData(const void *data, int level, int bpp, bool hasAlpha, int length, CCTexture2DPixelFormat pixelFormat)$/;"	f	class:CCTexture2D	signature:(const void *data, int level, int bpp, bool hasAlpha, int length, CCTexture2DPixelFormat pixelFormat)
CCTexture2D::initWithPVRTCData	textures/CCTexture2D.h	/^    bool initWithPVRTCData(const void *data, int level, int bpp, bool hasAlpha, int length, CCTexture2DPixelFormat pixelFormat);$/;"	p	class:CCTexture2D	access:public	signature:(const void *data, int level, int bpp, bool hasAlpha, int length, CCTexture2DPixelFormat pixelFormat)
CCTexture2D::initWithString	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithString(const char *text, const char *fontName, float fontSize)$/;"	f	class:CCTexture2D	signature:(const char *text, const char *fontName, float fontSize)
CCTexture2D::initWithString	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithString(const char *text, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)$/;"	f	class:CCTexture2D	signature:(const char *text, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)
CCTexture2D::initWithString	textures/CCTexture2D.h	/^    bool initWithString(const char *text,  const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment);$/;"	p	class:CCTexture2D	access:public	signature:(const char *text, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)
CCTexture2D::initWithString	textures/CCTexture2D.h	/^    bool initWithString(const char *text, const char *fontName, float fontSize);$/;"	p	class:CCTexture2D	access:public	signature:(const char *text, const char *fontName, float fontSize)
CCTexture2D::keepData	textures/CCTexture2D.cpp	/^void* CCTexture2D::keepData(void *data, unsigned int length)$/;"	f	class:CCTexture2D	signature:(void *data, unsigned int length)
CCTexture2D::keepData	textures/CCTexture2D.h	/^    void* keepData(void *data, unsigned int length);$/;"	p	class:CCTexture2D	access:public	signature:(void *data, unsigned int length)
CCTexture2D::m_bHasMipmaps	textures/CCTexture2D.h	/^    bool m_bHasMipmaps;$/;"	m	class:CCTexture2D	access:private
CCTexture2D::m_bHasPremultipliedAlpha	textures/CCTexture2D.h	/^    bool m_bHasPremultipliedAlpha;$/;"	m	class:CCTexture2D	access:private
CCTexture2D::m_bPVRHaveAlphaPremultiplied	textures/CCTexture2D.h	/^    bool m_bPVRHaveAlphaPremultiplied;$/;"	m	class:CCTexture2D	access:private
CCTexture2D::releaseData	textures/CCTexture2D.cpp	/^void CCTexture2D::releaseData(void *data)$/;"	f	class:CCTexture2D	signature:(void *data)
CCTexture2D::releaseData	textures/CCTexture2D.h	/^    void releaseData(void *data);$/;"	p	class:CCTexture2D	access:public	signature:(void *data)
CCTexture2D::setAliasTexParameters	textures/CCTexture2D.cpp	/^void CCTexture2D::setAliasTexParameters()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::setAliasTexParameters	textures/CCTexture2D.h	/^    void setAliasTexParameters();$/;"	p	class:CCTexture2D	access:public	signature:()
CCTexture2D::setAntiAliasTexParameters	textures/CCTexture2D.cpp	/^void CCTexture2D::setAntiAliasTexParameters()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::setAntiAliasTexParameters	textures/CCTexture2D.h	/^    void setAntiAliasTexParameters();$/;"	p	class:CCTexture2D	access:public	signature:()
CCTexture2D::setDefaultAlphaPixelFormat	textures/CCTexture2D.cpp	/^void CCTexture2D::setDefaultAlphaPixelFormat(CCTexture2DPixelFormat format)$/;"	f	class:CCTexture2D	signature:(CCTexture2DPixelFormat format)
CCTexture2D::setDefaultAlphaPixelFormat	textures/CCTexture2D.h	/^    static void setDefaultAlphaPixelFormat(CCTexture2DPixelFormat format);$/;"	p	class:CCTexture2D	access:public	signature:(CCTexture2DPixelFormat format)
CCTexture2D::setMaxS	textures/CCTexture2D.cpp	/^void CCTexture2D::setMaxS(GLfloat maxS)$/;"	f	class:CCTexture2D	signature:(GLfloat maxS)
CCTexture2D::setMaxT	textures/CCTexture2D.cpp	/^void CCTexture2D::setMaxT(GLfloat maxT)$/;"	f	class:CCTexture2D	signature:(GLfloat maxT)
CCTexture2D::setShaderProgram	textures/CCTexture2D.cpp	/^void CCTexture2D::setShaderProgram(CCGLProgram* pShaderProgram)$/;"	f	class:CCTexture2D	signature:(CCGLProgram* pShaderProgram)
CCTexture2D::setTexParameters	textures/CCTexture2D.cpp	/^void CCTexture2D::setTexParameters(ccTexParams *texParams)$/;"	f	class:CCTexture2D	signature:(ccTexParams *texParams)
CCTexture2D::setTexParameters	textures/CCTexture2D.h	/^    void setTexParameters(ccTexParams* texParams);$/;"	p	class:CCTexture2D	access:public	signature:(ccTexParams* texParams)
CCTexture2D::stringForFormat	textures/CCTexture2D.cpp	/^const char* CCTexture2D::stringForFormat()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::stringForFormat	textures/CCTexture2D.h	/^    const char* stringForFormat();$/;"	p	class:CCTexture2D	access:public	signature:()
CCTexture2D::~CCTexture2D	textures/CCTexture2D.cpp	/^CCTexture2D::~CCTexture2D()$/;"	f	class:CCTexture2D	signature:()
CCTexture2D::~CCTexture2D	textures/CCTexture2D.h	/^    virtual ~CCTexture2D();$/;"	p	class:CCTexture2D	access:public	signature:()
CCTexture2DPixelFormat	textures/CCTexture2D.h	/^} CCTexture2DPixelFormat;$/;"	t	typeref:enum:__anon47
CCTextureAtlas	textures/CCTextureAtlas.cpp	/^CCTextureAtlas::CCTextureAtlas()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas	textures/CCTextureAtlas.h	/^    CCTextureAtlas();$/;"	p	class:CCTextureAtlas	access:public	signature:()
CCTextureAtlas	textures/CCTextureAtlas.h	/^class CC_DLL CCTextureAtlas : public CCObject $/;"	c	inherits:CCObject
CCTextureAtlas::CCTextureAtlas	textures/CCTextureAtlas.cpp	/^CCTextureAtlas::CCTextureAtlas()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::CCTextureAtlas	textures/CCTextureAtlas.h	/^    CCTextureAtlas();$/;"	p	class:CCTextureAtlas	access:public	signature:()
CCTextureAtlas::create	textures/CCTextureAtlas.cpp	/^CCTextureAtlas * CCTextureAtlas::create(const char* file, unsigned int capacity)$/;"	f	class:CCTextureAtlas	signature:(const char* file, unsigned int capacity)
CCTextureAtlas::create	textures/CCTextureAtlas.h	/^    static CCTextureAtlas* create(const char* file , unsigned int capacity);$/;"	p	class:CCTextureAtlas	access:public	signature:(const char* file , unsigned int capacity)
CCTextureAtlas::createWithTexture	textures/CCTextureAtlas.cpp	/^CCTextureAtlas * CCTextureAtlas::createWithTexture(CCTexture2D *texture, unsigned int capacity)$/;"	f	class:CCTextureAtlas	signature:(CCTexture2D *texture, unsigned int capacity)
CCTextureAtlas::createWithTexture	textures/CCTextureAtlas.h	/^    static CCTextureAtlas* createWithTexture(CCTexture2D *texture, unsigned int capacity);$/;"	p	class:CCTextureAtlas	access:public	signature:(CCTexture2D *texture, unsigned int capacity)
CCTextureAtlas::description	textures/CCTextureAtlas.cpp	/^const char* CCTextureAtlas::description()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::description	textures/CCTextureAtlas.h	/^    const char* description();$/;"	p	class:CCTextureAtlas	access:public	signature:()
CCTextureAtlas::drawNumberOfQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::drawNumberOfQuads(unsigned int n)$/;"	f	class:CCTextureAtlas	signature:(unsigned int n)
CCTextureAtlas::drawNumberOfQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::drawNumberOfQuads(unsigned int n, unsigned int start)$/;"	f	class:CCTextureAtlas	signature:(unsigned int n, unsigned int start)
CCTextureAtlas::drawNumberOfQuads	textures/CCTextureAtlas.h	/^    void drawNumberOfQuads(unsigned int n);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int n)
CCTextureAtlas::drawNumberOfQuads	textures/CCTextureAtlas.h	/^    void drawNumberOfQuads(unsigned int n, unsigned int start);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int n, unsigned int start)
CCTextureAtlas::drawQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::drawQuads()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::drawQuads	textures/CCTextureAtlas.h	/^    void drawQuads();$/;"	p	class:CCTextureAtlas	access:public	signature:()
CCTextureAtlas::fillWithEmptyQuadsFromIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::fillWithEmptyQuadsFromIndex(unsigned int index, unsigned int amount)$/;"	f	class:CCTextureAtlas	signature:(unsigned int index, unsigned int amount)
CCTextureAtlas::fillWithEmptyQuadsFromIndex	textures/CCTextureAtlas.h	/^    void fillWithEmptyQuadsFromIndex(unsigned int index, unsigned int amount);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int index, unsigned int amount)
CCTextureAtlas::getCapacity	textures/CCTextureAtlas.cpp	/^unsigned int CCTextureAtlas::getCapacity()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::getQuads	textures/CCTextureAtlas.cpp	/^ccV3F_C4B_T2F_Quad* CCTextureAtlas::getQuads()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::getTexture	textures/CCTextureAtlas.cpp	/^CCTexture2D* CCTextureAtlas::getTexture()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::getTotalQuads	textures/CCTextureAtlas.cpp	/^unsigned int CCTextureAtlas::getTotalQuads()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::increaseTotalQuadsWith	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::increaseTotalQuadsWith(unsigned int amount)$/;"	f	class:CCTextureAtlas	signature:(unsigned int amount)
CCTextureAtlas::increaseTotalQuadsWith	textures/CCTextureAtlas.h	/^    void increaseTotalQuadsWith(unsigned int amount);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int amount)
CCTextureAtlas::initWithFile	textures/CCTextureAtlas.cpp	/^bool CCTextureAtlas::initWithFile(const char * file, unsigned int capacity)$/;"	f	class:CCTextureAtlas	signature:(const char * file, unsigned int capacity)
CCTextureAtlas::initWithFile	textures/CCTextureAtlas.h	/^    bool initWithFile(const char* file, unsigned int capacity);$/;"	p	class:CCTextureAtlas	access:public	signature:(const char* file, unsigned int capacity)
CCTextureAtlas::initWithTexture	textures/CCTextureAtlas.cpp	/^bool CCTextureAtlas::initWithTexture(CCTexture2D *texture, unsigned int capacity)$/;"	f	class:CCTextureAtlas	signature:(CCTexture2D *texture, unsigned int capacity)
CCTextureAtlas::initWithTexture	textures/CCTextureAtlas.h	/^    bool initWithTexture(CCTexture2D *texture, unsigned int capacity);$/;"	p	class:CCTextureAtlas	access:public	signature:(CCTexture2D *texture, unsigned int capacity)
CCTextureAtlas::insertQuad	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::insertQuad(ccV3F_C4B_T2F_Quad *quad, unsigned int index)$/;"	f	class:CCTextureAtlas	signature:(ccV3F_C4B_T2F_Quad *quad, unsigned int index)
CCTextureAtlas::insertQuad	textures/CCTextureAtlas.h	/^    void insertQuad(ccV3F_C4B_T2F_Quad* quad, unsigned int index);$/;"	p	class:CCTextureAtlas	access:public	signature:(ccV3F_C4B_T2F_Quad* quad, unsigned int index)
CCTextureAtlas::insertQuadFromIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::insertQuadFromIndex(unsigned int oldIndex, unsigned int newIndex)$/;"	f	class:CCTextureAtlas	signature:(unsigned int oldIndex, unsigned int newIndex)
CCTextureAtlas::insertQuadFromIndex	textures/CCTextureAtlas.h	/^    void insertQuadFromIndex(unsigned int fromIndex, unsigned int newIndex);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int fromIndex, unsigned int newIndex)
CCTextureAtlas::insertQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::insertQuads(ccV3F_C4B_T2F_Quad* quads, unsigned int index, unsigned int amount)$/;"	f	class:CCTextureAtlas	signature:(ccV3F_C4B_T2F_Quad* quads, unsigned int index, unsigned int amount)
CCTextureAtlas::insertQuads	textures/CCTextureAtlas.h	/^    void insertQuads(ccV3F_C4B_T2F_Quad* quads, unsigned int index, unsigned int amount);$/;"	p	class:CCTextureAtlas	access:public	signature:(ccV3F_C4B_T2F_Quad* quads, unsigned int index, unsigned int amount)
CCTextureAtlas::listenBackToForeground	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::listenBackToForeground(CCObject *obj)$/;"	f	class:CCTextureAtlas	signature:(CCObject *obj)
CCTextureAtlas::listenBackToForeground	textures/CCTextureAtlas.h	/^    void listenBackToForeground(CCObject *obj);$/;"	p	class:CCTextureAtlas	access:public	signature:(CCObject *obj)
CCTextureAtlas::m_bDirty	textures/CCTextureAtlas.h	/^    bool                m_bDirty; \/\/indicates whether or not the array buffer of the VBO needs to be updated$/;"	m	class:CCTextureAtlas	access:protected
CCTextureAtlas::m_pBuffersVBO	textures/CCTextureAtlas.h	/^    GLuint              m_pBuffersVBO[2]; \/\/0: vertex  1: indices$/;"	m	class:CCTextureAtlas	access:protected
CCTextureAtlas::m_pIndices	textures/CCTextureAtlas.h	/^    GLushort*           m_pIndices;$/;"	m	class:CCTextureAtlas	access:protected
CCTextureAtlas::m_uVAOname	textures/CCTextureAtlas.h	/^    GLuint              m_uVAOname;$/;"	m	class:CCTextureAtlas	access:protected
CCTextureAtlas::mapBuffers	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::mapBuffers()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::mapBuffers	textures/CCTextureAtlas.h	/^    void mapBuffers();$/;"	p	class:CCTextureAtlas	access:private	signature:()
CCTextureAtlas::moveQuadsFromIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::moveQuadsFromIndex(unsigned int index, unsigned int newIndex)$/;"	f	class:CCTextureAtlas	signature:(unsigned int index, unsigned int newIndex)
CCTextureAtlas::moveQuadsFromIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::moveQuadsFromIndex(unsigned int oldIndex, unsigned int amount, unsigned int newIndex)$/;"	f	class:CCTextureAtlas	signature:(unsigned int oldIndex, unsigned int amount, unsigned int newIndex)
CCTextureAtlas::moveQuadsFromIndex	textures/CCTextureAtlas.h	/^    void moveQuadsFromIndex(unsigned int index, unsigned int newIndex);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int index, unsigned int newIndex)
CCTextureAtlas::moveQuadsFromIndex	textures/CCTextureAtlas.h	/^    void moveQuadsFromIndex(unsigned int oldIndex, unsigned int amount, unsigned int newIndex);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int oldIndex, unsigned int amount, unsigned int newIndex)
CCTextureAtlas::removeAllQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::removeAllQuads()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::removeAllQuads	textures/CCTextureAtlas.h	/^    void removeAllQuads();$/;"	p	class:CCTextureAtlas	access:public	signature:()
CCTextureAtlas::removeQuadAtIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::removeQuadAtIndex(unsigned int index)$/;"	f	class:CCTextureAtlas	signature:(unsigned int index)
CCTextureAtlas::removeQuadAtIndex	textures/CCTextureAtlas.h	/^    void removeQuadAtIndex(unsigned int index);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int index)
CCTextureAtlas::removeQuadsAtIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::removeQuadsAtIndex(unsigned int index, unsigned int amount)$/;"	f	class:CCTextureAtlas	signature:(unsigned int index, unsigned int amount)
CCTextureAtlas::removeQuadsAtIndex	textures/CCTextureAtlas.h	/^    void removeQuadsAtIndex(unsigned int index, unsigned int amount);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int index, unsigned int amount)
CCTextureAtlas::resizeCapacity	textures/CCTextureAtlas.cpp	/^bool CCTextureAtlas::resizeCapacity(unsigned int newCapacity)$/;"	f	class:CCTextureAtlas	signature:(unsigned int newCapacity)
CCTextureAtlas::resizeCapacity	textures/CCTextureAtlas.h	/^    bool resizeCapacity(unsigned int n);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int n)
CCTextureAtlas::setQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setQuads(ccV3F_C4B_T2F_Quad *var)$/;"	f	class:CCTextureAtlas	signature:(ccV3F_C4B_T2F_Quad *var)
CCTextureAtlas::setTexture	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setTexture(CCTexture2D * var)$/;"	f	class:CCTextureAtlas	signature:(CCTexture2D * var)
CCTextureAtlas::setupIndices	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setupIndices()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::setupIndices	textures/CCTextureAtlas.h	/^    void setupIndices();$/;"	p	class:CCTextureAtlas	access:private	signature:()
CCTextureAtlas::setupVBO	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setupVBO()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::setupVBO	textures/CCTextureAtlas.h	/^    void setupVBO();$/;"	p	class:CCTextureAtlas	access:private	signature:()
CCTextureAtlas::setupVBOandVAO	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setupVBOandVAO()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::setupVBOandVAO	textures/CCTextureAtlas.h	/^    void setupVBOandVAO();$/;"	p	class:CCTextureAtlas	access:private	signature:()
CCTextureAtlas::updateQuad	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::updateQuad(ccV3F_C4B_T2F_Quad *quad, unsigned int index)$/;"	f	class:CCTextureAtlas	signature:(ccV3F_C4B_T2F_Quad *quad, unsigned int index)
CCTextureAtlas::updateQuad	textures/CCTextureAtlas.h	/^    void updateQuad(ccV3F_C4B_T2F_Quad* quad, unsigned int index);$/;"	p	class:CCTextureAtlas	access:public	signature:(ccV3F_C4B_T2F_Quad* quad, unsigned int index)
CCTextureAtlas::~CCTextureAtlas	textures/CCTextureAtlas.cpp	/^CCTextureAtlas::~CCTextureAtlas()$/;"	f	class:CCTextureAtlas	signature:()
CCTextureAtlas::~CCTextureAtlas	textures/CCTextureAtlas.h	/^    virtual ~CCTextureAtlas();$/;"	p	class:CCTextureAtlas	access:public	signature:()
CCTextureCache	textures/CCTextureCache.cpp	/^CCTextureCache::CCTextureCache()$/;"	f	class:CCTextureCache	signature:()
CCTextureCache	textures/CCTextureCache.h	/^    CCTextureCache();$/;"	p	class:CCTextureCache	access:public	signature:()
CCTextureCache	textures/CCTextureCache.h	/^class CC_DLL CCTextureCache : public CCObject$/;"	c	inherits:CCObject
CCTextureCache::CCTextureCache	textures/CCTextureCache.cpp	/^CCTextureCache::CCTextureCache()$/;"	f	class:CCTextureCache	signature:()
CCTextureCache::CCTextureCache	textures/CCTextureCache.h	/^    CCTextureCache();$/;"	p	class:CCTextureCache	access:public	signature:()
CCTextureCache::addImage	textures/CCTextureCache.cpp	/^CCTexture2D * CCTextureCache::addImage(const char * path)$/;"	f	class:CCTextureCache	signature:(const char * path)
CCTextureCache::addImage	textures/CCTextureCache.h	/^    CCTexture2D* addImage(const char* fileimage);$/;"	p	class:CCTextureCache	access:public	signature:(const char* fileimage)
CCTextureCache::addImageAsync	textures/CCTextureCache.cpp	/^void CCTextureCache::addImageAsync(const char *path, CCObject *target, SEL_CallFuncO selector)$/;"	f	class:CCTextureCache	signature:(const char *path, CCObject *target, SEL_CallFuncO selector)
CCTextureCache::addImageAsync	textures/CCTextureCache.h	/^    void addImageAsync(const char *path, CCObject *target, SEL_CallFuncO selector);$/;"	p	class:CCTextureCache	access:public	signature:(const char *path, CCObject *target, SEL_CallFuncO selector)
CCTextureCache::addImageAsyncCallBack	textures/CCTextureCache.cpp	/^void CCTextureCache::addImageAsyncCallBack(float dt)$/;"	f	class:CCTextureCache	signature:(float dt)
CCTextureCache::addImageAsyncCallBack	textures/CCTextureCache.h	/^    void addImageAsyncCallBack(float dt);$/;"	p	class:CCTextureCache	access:private	signature:(float dt)
CCTextureCache::addPVRImage	textures/CCTextureCache.cpp	/^CCTexture2D * CCTextureCache::addPVRImage(const char* path)$/;"	f	class:CCTextureCache	signature:(const char* path)
CCTextureCache::addPVRImage	textures/CCTextureCache.h	/^    CCTexture2D* addPVRImage(const char* filename);$/;"	p	class:CCTextureCache	access:public	signature:(const char* filename)
CCTextureCache::addPVRTCImage	textures/CCTextureCache.cpp	/^CCTexture2D* CCTextureCache::addPVRTCImage(const char* path, int bpp, bool hasAlpha, int width)$/;"	f	class:CCTextureCache	signature:(const char* path, int bpp, bool hasAlpha, int width)
CCTextureCache::addPVRTCImage	textures/CCTextureCache.h	/^    CCTexture2D* addPVRTCImage(const char* fileimage, int bpp, bool hasAlpha, int width);$/;"	p	class:CCTextureCache	access:public	signature:(const char* fileimage, int bpp, bool hasAlpha, int width)
CCTextureCache::addUIImage	textures/CCTextureCache.cpp	/^CCTexture2D* CCTextureCache::addUIImage(CCImage *image, const char *key)$/;"	f	class:CCTextureCache	signature:(CCImage *image, const char *key)
CCTextureCache::addUIImage	textures/CCTextureCache.h	/^    CCTexture2D* addUIImage(CCImage *image, const char *key);$/;"	p	class:CCTextureCache	access:public	signature:(CCImage *image, const char *key)
CCTextureCache::description	textures/CCTextureCache.cpp	/^const char* CCTextureCache::description()$/;"	f	class:CCTextureCache	signature:()
CCTextureCache::description	textures/CCTextureCache.h	/^    const char* description(void);$/;"	p	class:CCTextureCache	access:public	signature:(void)
CCTextureCache::dumpCachedTextureInfo	textures/CCTextureCache.cpp	/^void CCTextureCache::dumpCachedTextureInfo()$/;"	f	class:CCTextureCache	signature:()
CCTextureCache::dumpCachedTextureInfo	textures/CCTextureCache.h	/^    void dumpCachedTextureInfo();$/;"	p	class:CCTextureCache	access:public	signature:()
CCTextureCache::m_pTextures	textures/CCTextureCache.h	/^    CCDictionary* m_pTextures;$/;"	m	class:CCTextureCache	access:protected
CCTextureCache::purgeSharedTextureCache	textures/CCTextureCache.cpp	/^void CCTextureCache::purgeSharedTextureCache()$/;"	f	class:CCTextureCache	signature:()
CCTextureCache::purgeSharedTextureCache	textures/CCTextureCache.h	/^    static void purgeSharedTextureCache();$/;"	p	class:CCTextureCache	access:public	signature:()
CCTextureCache::reloadAllTextures	textures/CCTextureCache.cpp	/^void CCTextureCache::reloadAllTextures()$/;"	f	class:CCTextureCache	signature:()
CCTextureCache::reloadAllTextures	textures/CCTextureCache.h	/^    static void reloadAllTextures();$/;"	p	class:CCTextureCache	access:public	signature:()
CCTextureCache::removeAllTextures	textures/CCTextureCache.cpp	/^void CCTextureCache::removeAllTextures()$/;"	f	class:CCTextureCache	signature:()
CCTextureCache::removeAllTextures	textures/CCTextureCache.h	/^    void removeAllTextures();$/;"	p	class:CCTextureCache	access:public	signature:()
CCTextureCache::removeTexture	textures/CCTextureCache.cpp	/^void CCTextureCache::removeTexture(CCTexture2D* texture)$/;"	f	class:CCTextureCache	signature:(CCTexture2D* texture)
CCTextureCache::removeTexture	textures/CCTextureCache.h	/^    void removeTexture(CCTexture2D* texture);$/;"	p	class:CCTextureCache	access:public	signature:(CCTexture2D* texture)
CCTextureCache::removeTextureForKey	textures/CCTextureCache.cpp	/^void CCTextureCache::removeTextureForKey(const char *textureKeyName)$/;"	f	class:CCTextureCache	signature:(const char *textureKeyName)
CCTextureCache::removeTextureForKey	textures/CCTextureCache.h	/^    void removeTextureForKey(const char *textureKeyName);$/;"	p	class:CCTextureCache	access:public	signature:(const char *textureKeyName)
CCTextureCache::removeUnusedTextures	textures/CCTextureCache.cpp	/^void CCTextureCache::removeUnusedTextures()$/;"	f	class:CCTextureCache	signature:()
CCTextureCache::removeUnusedTextures	textures/CCTextureCache.h	/^    void removeUnusedTextures();$/;"	p	class:CCTextureCache	access:public	signature:()
CCTextureCache::sharedTextureCache	textures/CCTextureCache.cpp	/^CCTextureCache * CCTextureCache::sharedTextureCache()$/;"	f	class:CCTextureCache	signature:()
CCTextureCache::sharedTextureCache	textures/CCTextureCache.h	/^    static CCTextureCache * sharedTextureCache();$/;"	p	class:CCTextureCache	access:public	signature:()
CCTextureCache::snapshotTextures	textures/CCTextureCache.cpp	/^CCDictionary* CCTextureCache::snapshotTextures()$/;"	f	class:CCTextureCache	signature:()
CCTextureCache::snapshotTextures	textures/CCTextureCache.h	/^    CCDictionary* snapshotTextures();$/;"	p	class:CCTextureCache	access:public	signature:()
CCTextureCache::textureForKey	textures/CCTextureCache.cpp	/^CCTexture2D* CCTextureCache::textureForKey(const char* key)$/;"	f	class:CCTextureCache	signature:(const char* key)
CCTextureCache::textureForKey	textures/CCTextureCache.h	/^    CCTexture2D* textureForKey(const char* key);$/;"	p	class:CCTextureCache	access:public	signature:(const char* key)
CCTextureCache::~CCTextureCache	textures/CCTextureCache.cpp	/^CCTextureCache::~CCTextureCache()$/;"	f	class:CCTextureCache	signature:()
CCTextureCache::~CCTextureCache	textures/CCTextureCache.h	/^    virtual ~CCTextureCache();$/;"	p	class:CCTextureCache	access:public	signature:()
CCTexturePVR	textures/CCTexturePVR.h	/^    CCTexturePVR();$/;"	p	class:CCTexturePVR	access:public	signature:()
CCTexturePVR	textures/CCTexturePVR.h	/^class CCTexturePVR : public CCObject$/;"	c	inherits:CCObject
CCTexturePVR::CCTexturePVR	textures/CCTexturePVR.h	/^    CCTexturePVR();$/;"	p	class:CCTexturePVR	access:public	signature:()
CCTexturePVR::create	textures/CCTexturePVR.h	/^    static CCTexturePVR* create(const char* path);$/;"	p	class:CCTexturePVR	access:public	signature:(const char* path)
CCTexturePVR::createGLTexture	textures/CCTexturePVR.h	/^    bool createGLTexture();$/;"	p	class:CCTexturePVR	access:private	signature:()
CCTexturePVR::getFormat	textures/CCTexturePVR.h	/^    inline CCTexture2DPixelFormat getFormat() { return m_eFormat; }$/;"	f	class:CCTexturePVR	access:public	signature:()
CCTexturePVR::getHeight	textures/CCTexturePVR.h	/^    inline unsigned int getHeight() { return m_uHeight; }$/;"	f	class:CCTexturePVR	access:public	signature:()
CCTexturePVR::getName	textures/CCTexturePVR.h	/^    inline unsigned int getName() { return m_uName; }$/;"	f	class:CCTexturePVR	access:public	signature:()
CCTexturePVR::getNumberOfMipmaps	textures/CCTexturePVR.h	/^    inline unsigned int getNumberOfMipmaps() { return m_uNumberOfMipmaps; }$/;"	f	class:CCTexturePVR	access:public	signature:()
CCTexturePVR::getWidth	textures/CCTexturePVR.h	/^    inline unsigned int getWidth() { return m_uWidth; }$/;"	f	class:CCTexturePVR	access:public	signature:()
CCTexturePVR::hasAlpha	textures/CCTexturePVR.h	/^    inline bool hasAlpha() { return m_bHasAlpha; }$/;"	f	class:CCTexturePVR	access:public	signature:()
CCTexturePVR::hasPremultipliedAlpha	textures/CCTexturePVR.h	/^    inline bool hasPremultipliedAlpha() { return m_bHasPremultipliedAlpha; }$/;"	f	class:CCTexturePVR	access:public	signature:()
CCTexturePVR::initWithContentsOfFile	textures/CCTexturePVR.h	/^    bool initWithContentsOfFile(const char* path);$/;"	p	class:CCTexturePVR	access:public	signature:(const char* path)
CCTexturePVR::isForcePremultipliedAlpha	textures/CCTexturePVR.h	/^    inline bool isForcePremultipliedAlpha() { return m_bForcePremultipliedAlpha; }$/;"	f	class:CCTexturePVR	access:public	signature:()
CCTexturePVR::isRetainName	textures/CCTexturePVR.h	/^    inline bool isRetainName() { return m_bRetainName; }$/;"	f	class:CCTexturePVR	access:public	signature:()
CCTexturePVR::m_asMipmaps	textures/CCTexturePVR.h	/^    struct CCPVRMipmap m_asMipmaps[CC_PVRMIPMAP_MAX];   \/\/ pointer to mipmap images    $/;"	m	class:CCTexturePVR	typeref:struct:CCTexturePVR::CCPVRMipmap	access:protected
CCTexturePVR::m_bForcePremultipliedAlpha	textures/CCTexturePVR.h	/^    bool m_bForcePremultipliedAlpha;$/;"	m	class:CCTexturePVR	access:protected
CCTexturePVR::m_bHasAlpha	textures/CCTexturePVR.h	/^    bool m_bHasAlpha;$/;"	m	class:CCTexturePVR	access:protected
CCTexturePVR::m_bHasPremultipliedAlpha	textures/CCTexturePVR.h	/^    bool m_bHasPremultipliedAlpha;$/;"	m	class:CCTexturePVR	access:protected
CCTexturePVR::m_bRetainName	textures/CCTexturePVR.h	/^    bool m_bRetainName;$/;"	m	class:CCTexturePVR	access:protected
CCTexturePVR::m_eFormat	textures/CCTexturePVR.h	/^    CCTexture2DPixelFormat m_eFormat;$/;"	m	class:CCTexturePVR	access:protected
CCTexturePVR::m_pPixelFormatInfo	textures/CCTexturePVR.h	/^   const ccPVRTexturePixelFormatInfo *m_pPixelFormatInfo;$/;"	m	class:CCTexturePVR	access:protected
CCTexturePVR::m_uHeight	textures/CCTexturePVR.h	/^    unsigned int m_uWidth, m_uHeight;$/;"	m	class:CCTexturePVR	access:protected
CCTexturePVR::m_uName	textures/CCTexturePVR.h	/^    GLuint m_uName;$/;"	m	class:CCTexturePVR	access:protected
CCTexturePVR::m_uNumberOfMipmaps	textures/CCTexturePVR.h	/^    unsigned int m_uNumberOfMipmaps;                    \/\/ number of mipmap used$/;"	m	class:CCTexturePVR	access:protected
CCTexturePVR::m_uWidth	textures/CCTexturePVR.h	/^    unsigned int m_uWidth, m_uHeight;$/;"	m	class:CCTexturePVR	access:protected
CCTexturePVR::setRetainName	textures/CCTexturePVR.h	/^    inline void setRetainName(bool retainName) { m_bRetainName = retainName; }$/;"	f	class:CCTexturePVR	access:public	signature:(bool retainName)
CCTexturePVR::unpackPVRv2Data	textures/CCTexturePVR.h	/^    bool unpackPVRv2Data(unsigned char* data, unsigned int len);$/;"	p	class:CCTexturePVR	access:private	signature:(unsigned char* data, unsigned int len)
CCTexturePVR::unpackPVRv3Data	textures/CCTexturePVR.h	/^    bool unpackPVRv3Data(unsigned char* dataPointer, unsigned int dataLength);$/;"	p	class:CCTexturePVR	access:private	signature:(unsigned char* dataPointer, unsigned int dataLength)
CCTexturePVR::~CCTexturePVR	textures/CCTexturePVR.h	/^    virtual ~CCTexturePVR();$/;"	p	class:CCTexturePVR	access:public	signature:()
CCTextureProtocol	include/CCProtocols.h	/^class CC_DLL CCTextureProtocol : public CCBlendProtocol$/;"	c	inherits:CCBlendProtocol
CCTextureProtocol::getTexture	include/CCProtocols.h	/^    virtual CCTexture2D* getTexture(void) = 0;$/;"	p	class:CCTextureProtocol	access:public	signature:(void)
CCTextureProtocol::setTexture	include/CCProtocols.h	/^    virtual void setTexture(CCTexture2D *texture) = 0;$/;"	p	class:CCTextureProtocol	access:public	signature:(CCTexture2D *texture)
CCThread	platform/CCThread.h	/^    CCThread() : m_pAutoreasePool(0) {}$/;"	f	class:CCThread	access:public	signature:()
CCThread	platform/CCThread.h	/^class CC_DLL CCThread$/;"	c
CCThread::CCThread	platform/CCThread.h	/^    CCThread() : m_pAutoreasePool(0) {}$/;"	f	class:CCThread	access:public	signature:()
CCThread::createAutoreleasePool	platform/CCThread.cpp	/^void CCThread::createAutoreleasePool()$/;"	f	class:CCThread	signature:()
CCThread::createAutoreleasePool	platform/CCThread.h	/^    void createAutoreleasePool();$/;"	p	class:CCThread	access:public	signature:()
CCThread::m_pAutoreasePool	platform/CCThread.h	/^    void *m_pAutoreasePool;$/;"	m	class:CCThread	access:private
CCThread::~CCThread	platform/CCThread.cpp	/^CCThread::~CCThread()$/;"	f	class:CCThread	signature:()
CCThread::~CCThread	platform/CCThread.h	/^    ~CCThread();$/;"	p	class:CCThread	access:public	signature:()
CCTileMapAtlas	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^CCTileMapAtlas::CCTileMapAtlas()$/;"	f	class:CCTileMapAtlas	signature:()
CCTileMapAtlas	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    CCTileMapAtlas();$/;"	p	class:CCTileMapAtlas	access:public	signature:()
CCTileMapAtlas	tilemap_parallax_nodes/CCTileMapAtlas.h	/^class CC_DLL CCTileMapAtlas : public CCAtlasNode $/;"	c	inherits:CCAtlasNode
CCTileMapAtlas::CCTileMapAtlas	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^CCTileMapAtlas::CCTileMapAtlas()$/;"	f	class:CCTileMapAtlas	signature:()
CCTileMapAtlas::CCTileMapAtlas	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    CCTileMapAtlas();$/;"	p	class:CCTileMapAtlas	access:public	signature:()
CCTileMapAtlas::CC_PROPERTY	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    CC_PROPERTY(struct sImageTGA*, m_pTGAInfo, TGAInfo);$/;"	p	class:CCTileMapAtlas	access:private	signature:(struct sImageTGA*, m_pTGAInfo, TGAInfo)
CCTileMapAtlas::calculateItemsToRender	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::calculateItemsToRender()$/;"	f	class:CCTileMapAtlas	signature:()
CCTileMapAtlas::calculateItemsToRender	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    void calculateItemsToRender();$/;"	p	class:CCTileMapAtlas	access:private	signature:()
CCTileMapAtlas::create	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^CCTileMapAtlas * CCTileMapAtlas::create(const char *tile, const char *mapFile, int tileWidth, int tileHeight)$/;"	f	class:CCTileMapAtlas	signature:(const char *tile, const char *mapFile, int tileWidth, int tileHeight)
CCTileMapAtlas::create	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    static CCTileMapAtlas * create(const char *tile, const char *mapFile, int tileWidth, int tileHeight);$/;"	p	class:CCTileMapAtlas	access:public	signature:(const char *tile, const char *mapFile, int tileWidth, int tileHeight)
CCTileMapAtlas::getTGAInfo	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^struct sImageTGA * CCTileMapAtlas::getTGAInfo()$/;"	f	class:CCTileMapAtlas	signature:()
CCTileMapAtlas::initWithTileFile	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^bool CCTileMapAtlas::initWithTileFile(const char *tile, const char *mapFile, int tileWidth, int tileHeight)$/;"	f	class:CCTileMapAtlas	signature:(const char *tile, const char *mapFile, int tileWidth, int tileHeight)
CCTileMapAtlas::initWithTileFile	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    bool initWithTileFile(const char *tile, const char *mapFile, int tileWidth, int tileHeight);$/;"	p	class:CCTileMapAtlas	access:public	signature:(const char *tile, const char *mapFile, int tileWidth, int tileHeight)
CCTileMapAtlas::loadTGAfile	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::loadTGAfile(const char *file)$/;"	f	class:CCTileMapAtlas	signature:(const char *file)
CCTileMapAtlas::loadTGAfile	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    void loadTGAfile(const char *file);$/;"	p	class:CCTileMapAtlas	access:private	signature:(const char *file)
CCTileMapAtlas::m_nItemsToRender	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    int m_nItemsToRender;$/;"	m	class:CCTileMapAtlas	access:protected
CCTileMapAtlas::m_pPosToAtlasIndex	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    CCDictionary* m_pPosToAtlasIndex;$/;"	m	class:CCTileMapAtlas	access:protected
CCTileMapAtlas::releaseMap	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::releaseMap()$/;"	f	class:CCTileMapAtlas	signature:()
CCTileMapAtlas::releaseMap	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    void releaseMap();$/;"	p	class:CCTileMapAtlas	access:public	signature:()
CCTileMapAtlas::setTGAInfo	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::setTGAInfo(struct sImageTGA* var)$/;"	f	class:CCTileMapAtlas	signature:(struct sImageTGA* var)
CCTileMapAtlas::setTile	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::setTile(const ccColor3B& tile, const CCPoint& position)$/;"	f	class:CCTileMapAtlas	signature:(const ccColor3B& tile, const CCPoint& position)
CCTileMapAtlas::setTile	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    void setTile(const ccColor3B& tile, const CCPoint& position);$/;"	p	class:CCTileMapAtlas	access:public	signature:(const ccColor3B& tile, const CCPoint& position)
CCTileMapAtlas::tileAt	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^ccColor3B CCTileMapAtlas::tileAt(const CCPoint& position)$/;"	f	class:CCTileMapAtlas	signature:(const CCPoint& position)
CCTileMapAtlas::tileAt	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    ccColor3B tileAt(const CCPoint& position);$/;"	p	class:CCTileMapAtlas	access:public	signature:(const CCPoint& position)
CCTileMapAtlas::updateAtlasValueAt	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::updateAtlasValueAt(const CCPoint& pos, const ccColor3B& value, unsigned int index)$/;"	f	class:CCTileMapAtlas	signature:(const CCPoint& pos, const ccColor3B& value, unsigned int index)
CCTileMapAtlas::updateAtlasValueAt	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    void updateAtlasValueAt(const CCPoint& pos, const ccColor3B& value, unsigned int index);$/;"	p	class:CCTileMapAtlas	access:private	signature:(const CCPoint& pos, const ccColor3B& value, unsigned int index)
CCTileMapAtlas::updateAtlasValues	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::updateAtlasValues()$/;"	f	class:CCTileMapAtlas	signature:()
CCTileMapAtlas::updateAtlasValues	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    void updateAtlasValues();$/;"	p	class:CCTileMapAtlas	access:private	signature:()
CCTileMapAtlas::~CCTileMapAtlas	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^CCTileMapAtlas::~CCTileMapAtlas()$/;"	f	class:CCTileMapAtlas	signature:()
CCTileMapAtlas::~CCTileMapAtlas	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    virtual ~CCTileMapAtlas();$/;"	p	class:CCTileMapAtlas	access:public	signature:()
CCTiledGrid3D	effects/CCGrid.cpp	/^CCTiledGrid3D::CCTiledGrid3D()$/;"	f	class:CCTiledGrid3D	signature:()
CCTiledGrid3D	effects/CCGrid.h	/^    CCTiledGrid3D();$/;"	p	class:CCTiledGrid3D	access:public	signature:()
CCTiledGrid3D	effects/CCGrid.h	/^class CC_DLL CCTiledGrid3D : public CCGridBase$/;"	c	inherits:CCGridBase
CCTiledGrid3D::CCTiledGrid3D	effects/CCGrid.cpp	/^CCTiledGrid3D::CCTiledGrid3D()$/;"	f	class:CCTiledGrid3D	signature:()
CCTiledGrid3D::CCTiledGrid3D	effects/CCGrid.h	/^    CCTiledGrid3D();$/;"	p	class:CCTiledGrid3D	access:public	signature:()
CCTiledGrid3D::blit	effects/CCGrid.cpp	/^void CCTiledGrid3D::blit(void)$/;"	f	class:CCTiledGrid3D	signature:(void)
CCTiledGrid3D::blit	effects/CCGrid.h	/^    virtual void blit(void);$/;"	p	class:CCTiledGrid3D	access:public	signature:(void)
CCTiledGrid3D::calculateVertexPoints	effects/CCGrid.cpp	/^void CCTiledGrid3D::calculateVertexPoints(void)$/;"	f	class:CCTiledGrid3D	signature:(void)
CCTiledGrid3D::calculateVertexPoints	effects/CCGrid.h	/^    virtual void calculateVertexPoints(void);$/;"	p	class:CCTiledGrid3D	access:public	signature:(void)
CCTiledGrid3D::create	effects/CCGrid.cpp	/^CCTiledGrid3D* CCTiledGrid3D::create(const CCSize& gridSize)$/;"	f	class:CCTiledGrid3D	signature:(const CCSize& gridSize)
CCTiledGrid3D::create	effects/CCGrid.cpp	/^CCTiledGrid3D* CCTiledGrid3D::create(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)$/;"	f	class:CCTiledGrid3D	signature:(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)
CCTiledGrid3D::create	effects/CCGrid.h	/^    static CCTiledGrid3D* create(const CCSize& gridSize);$/;"	p	class:CCTiledGrid3D	access:public	signature:(const CCSize& gridSize)
CCTiledGrid3D::create	effects/CCGrid.h	/^    static CCTiledGrid3D* create(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped);$/;"	p	class:CCTiledGrid3D	access:public	signature:(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)
CCTiledGrid3D::m_pIndices	effects/CCGrid.h	/^    GLushort *m_pIndices;$/;"	m	class:CCTiledGrid3D	access:protected
CCTiledGrid3D::m_pOriginalVertices	effects/CCGrid.h	/^    GLvoid *m_pOriginalVertices;$/;"	m	class:CCTiledGrid3D	access:protected
CCTiledGrid3D::m_pTexCoordinates	effects/CCGrid.h	/^    GLvoid *m_pTexCoordinates;$/;"	m	class:CCTiledGrid3D	access:protected
CCTiledGrid3D::m_pVertices	effects/CCGrid.h	/^    GLvoid *m_pVertices;$/;"	m	class:CCTiledGrid3D	access:protected
CCTiledGrid3D::originalTile	effects/CCGrid.cpp	/^ccQuad3 CCTiledGrid3D::originalTile(const CCPoint& pos)$/;"	f	class:CCTiledGrid3D	signature:(const CCPoint& pos)
CCTiledGrid3D::originalTile	effects/CCGrid.h	/^    ccQuad3 originalTile(const CCPoint& pos);$/;"	p	class:CCTiledGrid3D	access:public	signature:(const CCPoint& pos)
CCTiledGrid3D::reuse	effects/CCGrid.cpp	/^void CCTiledGrid3D::reuse(void)$/;"	f	class:CCTiledGrid3D	signature:(void)
CCTiledGrid3D::reuse	effects/CCGrid.h	/^    virtual void reuse(void);$/;"	p	class:CCTiledGrid3D	access:public	signature:(void)
CCTiledGrid3D::setTile	effects/CCGrid.cpp	/^void CCTiledGrid3D::setTile(const CCPoint& pos, const ccQuad3& coords)$/;"	f	class:CCTiledGrid3D	signature:(const CCPoint& pos, const ccQuad3& coords)
CCTiledGrid3D::setTile	effects/CCGrid.h	/^    void setTile(const CCPoint& pos, const ccQuad3& coords);$/;"	p	class:CCTiledGrid3D	access:public	signature:(const CCPoint& pos, const ccQuad3& coords)
CCTiledGrid3D::tile	effects/CCGrid.cpp	/^ccQuad3 CCTiledGrid3D::tile(const CCPoint& pos)$/;"	f	class:CCTiledGrid3D	signature:(const CCPoint& pos)
CCTiledGrid3D::tile	effects/CCGrid.h	/^    ccQuad3 tile(const CCPoint& pos);$/;"	p	class:CCTiledGrid3D	access:public	signature:(const CCPoint& pos)
CCTiledGrid3D::~CCTiledGrid3D	effects/CCGrid.cpp	/^CCTiledGrid3D::~CCTiledGrid3D(void)$/;"	f	class:CCTiledGrid3D	signature:(void)
CCTiledGrid3D::~CCTiledGrid3D	effects/CCGrid.h	/^    ~CCTiledGrid3D(void);$/;"	p	class:CCTiledGrid3D	access:public	signature:(void)
CCTiledGrid3DAction	actions/CCActionGrid.h	/^class CC_DLL CCTiledGrid3DAction : public CCGridAction$/;"	c	inherits:CCGridAction
CCTiledGrid3DAction::create	actions/CCActionGrid.cpp	/^CCTiledGrid3DAction* CCTiledGrid3DAction::create(float duration, const CCSize& gridSize)$/;"	f	class:CCTiledGrid3DAction	signature:(float duration, const CCSize& gridSize)
CCTiledGrid3DAction::create	actions/CCActionGrid.h	/^    static CCTiledGrid3DAction* create(float duration, const CCSize& gridSize);$/;"	p	class:CCTiledGrid3DAction	access:public	signature:(float duration, const CCSize& gridSize)
CCTiledGrid3DAction::getGrid	actions/CCActionGrid.cpp	/^CCGridBase* CCTiledGrid3DAction::getGrid(void)$/;"	f	class:CCTiledGrid3DAction	signature:(void)
CCTiledGrid3DAction::getGrid	actions/CCActionGrid.h	/^    virtual CCGridBase* getGrid(void);$/;"	p	class:CCTiledGrid3DAction	access:public	signature:(void)
CCTiledGrid3DAction::originalTile	actions/CCActionGrid.cpp	/^ccQuad3 CCTiledGrid3DAction::originalTile(const CCPoint& pos)$/;"	f	class:CCTiledGrid3DAction	signature:(const CCPoint& pos)
CCTiledGrid3DAction::originalTile	actions/CCActionGrid.h	/^    ccQuad3 originalTile(const CCPoint& position);$/;"	p	class:CCTiledGrid3DAction	access:public	signature:(const CCPoint& position)
CCTiledGrid3DAction::setTile	actions/CCActionGrid.cpp	/^void CCTiledGrid3DAction::setTile(const CCPoint& pos, const ccQuad3& coords)$/;"	f	class:CCTiledGrid3DAction	signature:(const CCPoint& pos, const ccQuad3& coords)
CCTiledGrid3DAction::setTile	actions/CCActionGrid.h	/^    void setTile(const CCPoint& position, const ccQuad3& coords);$/;"	p	class:CCTiledGrid3DAction	access:public	signature:(const CCPoint& position, const ccQuad3& coords)
CCTiledGrid3DAction::tile	actions/CCActionGrid.cpp	/^ccQuad3 CCTiledGrid3DAction::tile(const CCPoint& pos)$/;"	f	class:CCTiledGrid3DAction	signature:(const CCPoint& pos)
CCTiledGrid3DAction::tile	actions/CCActionGrid.h	/^    ccQuad3 tile(const CCPoint& position);$/;"	p	class:CCTiledGrid3DAction	access:public	signature:(const CCPoint& position)
CCTime	platform/platform.h	/^class CC_DLL CCTime$/;"	c
CCTime::gettimeofdayCocos2d	platform/platform.cpp	/^int CCTime::gettimeofdayCocos2d(struct cc_timeval *tp, void *tzp)$/;"	f	class:CCTime	signature:(struct cc_timeval *tp, void *tzp)
CCTime::gettimeofdayCocos2d	platform/platform.h	/^    static int gettimeofdayCocos2d(struct cc_timeval *tp, void *tzp);$/;"	p	class:CCTime	access:public	signature:(struct cc_timeval *tp, void *tzp)
CCTime::timersubCocos2d	platform/platform.cpp	/^double CCTime::timersubCocos2d(struct cc_timeval *start, struct cc_timeval *end)$/;"	f	class:CCTime	signature:(struct cc_timeval *start, struct cc_timeval *end)
CCTime::timersubCocos2d	platform/platform.h	/^    static double timersubCocos2d(struct cc_timeval *start, struct cc_timeval *end);$/;"	p	class:CCTime	access:public	signature:(struct cc_timeval *start, struct cc_timeval *end)
CCTimer	CCScheduler.cpp	/^CCTimer::CCTimer()$/;"	f	class:CCTimer	signature:()
CCTimer	CCScheduler.h	/^    CCTimer(void);$/;"	p	class:CCTimer	access:public	signature:(void)
CCTimer	CCScheduler.h	/^class CC_DLL CCTimer : public CCObject$/;"	c	inherits:CCObject
CCTimer::CCTimer	CCScheduler.cpp	/^CCTimer::CCTimer()$/;"	f	class:CCTimer	signature:()
CCTimer::CCTimer	CCScheduler.h	/^    CCTimer(void);$/;"	p	class:CCTimer	access:public	signature:(void)
CCTimer::getInterval	CCScheduler.cpp	/^float CCTimer::getInterval() const$/;"	f	class:CCTimer	signature:() const
CCTimer::getInterval	CCScheduler.h	/^    float getInterval(void) const;$/;"	p	class:CCTimer	access:public	signature:(void) const
CCTimer::getScriptHandler	CCScheduler.h	/^    inline int getScriptHandler() { return m_nScriptHandler; };$/;"	f	class:CCTimer	access:public	signature:()
CCTimer::getSelector	CCScheduler.cpp	/^SEL_SCHEDULE CCTimer::getSelector() const$/;"	f	class:CCTimer	signature:() const
CCTimer::getSelector	CCScheduler.h	/^    SEL_SCHEDULE getSelector() const;$/;"	p	class:CCTimer	access:public	signature:() const
CCTimer::initWithScriptHandler	CCScheduler.cpp	/^bool CCTimer::initWithScriptHandler(int nHandler, float fSeconds)$/;"	f	class:CCTimer	signature:(int nHandler, float fSeconds)
CCTimer::initWithScriptHandler	CCScheduler.h	/^    bool initWithScriptHandler(int nHandler, float fSeconds);$/;"	p	class:CCTimer	access:public	signature:(int nHandler, float fSeconds)
CCTimer::initWithTarget	CCScheduler.cpp	/^bool CCTimer::initWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector)$/;"	f	class:CCTimer	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector)
CCTimer::initWithTarget	CCScheduler.cpp	/^bool CCTimer::initWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds, unsigned int nRepeat, float fDelay)$/;"	f	class:CCTimer	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds, unsigned int nRepeat, float fDelay)
CCTimer::initWithTarget	CCScheduler.h	/^    bool initWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector);$/;"	p	class:CCTimer	access:public	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector)
CCTimer::initWithTarget	CCScheduler.h	/^    bool initWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds, unsigned int nRepeat, float fDelay);$/;"	p	class:CCTimer	access:public	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds, unsigned int nRepeat, float fDelay)
CCTimer::m_bRunForever	CCScheduler.h	/^    bool m_bRunForever;$/;"	m	class:CCTimer	access:protected
CCTimer::m_bUseDelay	CCScheduler.h	/^    bool m_bUseDelay;$/;"	m	class:CCTimer	access:protected
CCTimer::m_fDelay	CCScheduler.h	/^    float m_fDelay;$/;"	m	class:CCTimer	access:protected
CCTimer::m_fElapsed	CCScheduler.h	/^    float m_fElapsed;$/;"	m	class:CCTimer	access:protected
CCTimer::m_fInterval	CCScheduler.h	/^    float m_fInterval;$/;"	m	class:CCTimer	access:protected
CCTimer::m_nScriptHandler	CCScheduler.h	/^    int m_nScriptHandler;$/;"	m	class:CCTimer	access:protected
CCTimer::m_pTarget	CCScheduler.h	/^    CCObject *m_pTarget;$/;"	m	class:CCTimer	access:protected
CCTimer::m_pfnSelector	CCScheduler.h	/^    SEL_SCHEDULE m_pfnSelector;$/;"	m	class:CCTimer	access:protected
CCTimer::m_uRepeat	CCScheduler.h	/^    unsigned int m_uRepeat; \/\/0 = once, 1 is 2 x executed$/;"	m	class:CCTimer	access:protected
CCTimer::m_uTimesExecuted	CCScheduler.h	/^    unsigned int m_uTimesExecuted;$/;"	m	class:CCTimer	access:protected
CCTimer::setInterval	CCScheduler.cpp	/^void CCTimer::setInterval(float fInterval)$/;"	f	class:CCTimer	signature:(float fInterval)
CCTimer::setInterval	CCScheduler.h	/^    void setInterval(float fInterval);$/;"	p	class:CCTimer	access:public	signature:(float fInterval)
CCTimer::timerWithScriptHandler	CCScheduler.cpp	/^CCTimer* CCTimer::timerWithScriptHandler(int nHandler, float fSeconds)$/;"	f	class:CCTimer	signature:(int nHandler, float fSeconds)
CCTimer::timerWithScriptHandler	CCScheduler.h	/^    static CCTimer* timerWithScriptHandler(int nHandler, float fSeconds);$/;"	p	class:CCTimer	access:public	signature:(int nHandler, float fSeconds)
CCTimer::timerWithTarget	CCScheduler.cpp	/^CCTimer* CCTimer::timerWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector)$/;"	f	class:CCTimer	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector)
CCTimer::timerWithTarget	CCScheduler.cpp	/^CCTimer* CCTimer::timerWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds)$/;"	f	class:CCTimer	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds)
CCTimer::timerWithTarget	CCScheduler.h	/^    static CCTimer* timerWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector);$/;"	p	class:CCTimer	access:public	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector)
CCTimer::timerWithTarget	CCScheduler.h	/^    static CCTimer* timerWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds);$/;"	p	class:CCTimer	access:public	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds)
CCTimer::update	CCScheduler.cpp	/^void CCTimer::update(float dt)$/;"	f	class:CCTimer	signature:(float dt)
CCTimer::update	CCScheduler.h	/^    void update(float dt);$/;"	p	class:CCTimer	access:public	signature:(float dt)
CCTintBy	actions/CCActionInterval.h	/^class CC_DLL CCTintBy : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCTintBy::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCTintBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCTintBy	signature:(CCZone *pZone)
CCTintBy::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCTintBy	access:public	signature:(CCZone* pZone)
CCTintBy::create	actions/CCActionInterval.cpp	/^CCTintBy* CCTintBy::create(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)$/;"	f	class:CCTintBy	signature:(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)
CCTintBy::create	actions/CCActionInterval.h	/^    static CCTintBy* create(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue);$/;"	p	class:CCTintBy	access:public	signature:(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)
CCTintBy::initWithDuration	actions/CCActionInterval.cpp	/^bool CCTintBy::initWithDuration(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)$/;"	f	class:CCTintBy	signature:(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)
CCTintBy::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue);$/;"	p	class:CCTintBy	access:public	signature:(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)
CCTintBy::m_deltaB	actions/CCActionInterval.h	/^    GLshort m_deltaB;$/;"	m	class:CCTintBy	access:protected
CCTintBy::m_deltaG	actions/CCActionInterval.h	/^    GLshort m_deltaG;$/;"	m	class:CCTintBy	access:protected
CCTintBy::m_deltaR	actions/CCActionInterval.h	/^    GLshort m_deltaR;$/;"	m	class:CCTintBy	access:protected
CCTintBy::m_fromB	actions/CCActionInterval.h	/^    GLshort m_fromB;$/;"	m	class:CCTintBy	access:protected
CCTintBy::m_fromG	actions/CCActionInterval.h	/^    GLshort m_fromG;$/;"	m	class:CCTintBy	access:protected
CCTintBy::m_fromR	actions/CCActionInterval.h	/^    GLshort m_fromR;$/;"	m	class:CCTintBy	access:protected
CCTintBy::reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCTintBy::reverse(void)$/;"	f	class:CCTintBy	signature:(void)
CCTintBy::reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCTintBy	access:public	signature:(void)
CCTintBy::startWithTarget	actions/CCActionInterval.cpp	/^void CCTintBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCTintBy	signature:(CCNode *pTarget)
CCTintBy::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCTintBy	access:public	signature:(CCNode *pTarget)
CCTintBy::update	actions/CCActionInterval.cpp	/^void CCTintBy::update(float time)$/;"	f	class:CCTintBy	signature:(float time)
CCTintBy::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCTintBy	access:public	signature:(float time)
CCTintTo	actions/CCActionInterval.h	/^class CC_DLL CCTintTo : public CCActionInterval$/;"	c	inherits:CCActionInterval
CCTintTo::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCTintTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCTintTo	signature:(CCZone *pZone)
CCTintTo::copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCTintTo	access:public	signature:(CCZone* pZone)
CCTintTo::create	actions/CCActionInterval.cpp	/^CCTintTo* CCTintTo::create(float duration, GLubyte red, GLubyte green, GLubyte blue)$/;"	f	class:CCTintTo	signature:(float duration, GLubyte red, GLubyte green, GLubyte blue)
CCTintTo::create	actions/CCActionInterval.h	/^    static CCTintTo* create(float duration, GLubyte red, GLubyte green, GLubyte blue);$/;"	p	class:CCTintTo	access:public	signature:(float duration, GLubyte red, GLubyte green, GLubyte blue)
CCTintTo::initWithDuration	actions/CCActionInterval.cpp	/^bool CCTintTo::initWithDuration(float duration, GLubyte red, GLubyte green, GLubyte blue)$/;"	f	class:CCTintTo	signature:(float duration, GLubyte red, GLubyte green, GLubyte blue)
CCTintTo::initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, GLubyte red, GLubyte green, GLubyte blue);$/;"	p	class:CCTintTo	access:public	signature:(float duration, GLubyte red, GLubyte green, GLubyte blue)
CCTintTo::m_from	actions/CCActionInterval.h	/^    ccColor3B m_from;$/;"	m	class:CCTintTo	access:protected
CCTintTo::m_to	actions/CCActionInterval.h	/^    ccColor3B m_to;$/;"	m	class:CCTintTo	access:protected
CCTintTo::startWithTarget	actions/CCActionInterval.cpp	/^void CCTintTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCTintTo	signature:(CCNode *pTarget)
CCTintTo::startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCTintTo	access:public	signature:(CCNode *pTarget)
CCTintTo::update	actions/CCActionInterval.cpp	/^void CCTintTo::update(float time)$/;"	f	class:CCTintTo	signature:(float time)
CCTintTo::update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCTintTo	access:public	signature:(float time)
CCToggleVisibility	actions/CCActionInstant.h	/^    CCToggleVisibility(){}$/;"	f	class:CCToggleVisibility	access:public	signature:()
CCToggleVisibility	actions/CCActionInstant.h	/^class CC_DLL CCToggleVisibility : public CCActionInstant$/;"	c	inherits:CCActionInstant
CCToggleVisibility::CCToggleVisibility	actions/CCActionInstant.h	/^    CCToggleVisibility(){}$/;"	f	class:CCToggleVisibility	access:public	signature:()
CCToggleVisibility::copyWithZone	actions/CCActionInstant.cpp	/^CCObject* CCToggleVisibility::copyWithZone(CCZone *pZone)$/;"	f	class:CCToggleVisibility	signature:(CCZone *pZone)
CCToggleVisibility::copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCToggleVisibility	access:public	signature:(CCZone *pZone)
CCToggleVisibility::create	actions/CCActionInstant.cpp	/^CCToggleVisibility * CCToggleVisibility::create()$/;"	f	class:CCToggleVisibility	signature:()
CCToggleVisibility::create	actions/CCActionInstant.h	/^    static CCToggleVisibility * create();$/;"	p	class:CCToggleVisibility	access:public	signature:()
CCToggleVisibility::update	actions/CCActionInstant.cpp	/^void CCToggleVisibility::update(float time) $/;"	f	class:CCToggleVisibility	signature:(float time)
CCToggleVisibility::update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCToggleVisibility	access:public	signature:(float time)
CCToggleVisibility::~CCToggleVisibility	actions/CCActionInstant.h	/^    virtual ~CCToggleVisibility(){}$/;"	f	class:CCToggleVisibility	access:public	signature:()
CCTouch	touch_dispatcher/CCTouch.h	/^    CCTouch() $/;"	f	class:CCTouch	access:public	signature:()
CCTouch	touch_dispatcher/CCTouch.h	/^class CC_DLL CCTouch : public CCObject$/;"	c	inherits:CCObject
CCTouch::CCTouch	touch_dispatcher/CCTouch.h	/^    CCTouch() $/;"	f	class:CCTouch	access:public	signature:()
CCTouch::getDelta	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getDelta() const$/;"	f	class:CCTouch	signature:() const
CCTouch::getDelta	touch_dispatcher/CCTouch.h	/^    CCPoint getDelta() const;$/;"	p	class:CCTouch	access:public	signature:() const
CCTouch::getID	touch_dispatcher/CCTouch.h	/^    int getID() const$/;"	f	class:CCTouch	access:public	signature:() const
CCTouch::getLocation	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getLocation() const$/;"	f	class:CCTouch	signature:() const
CCTouch::getLocation	touch_dispatcher/CCTouch.h	/^    CCPoint getLocation() const;$/;"	p	class:CCTouch	access:public	signature:() const
CCTouch::getLocationInView	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getLocationInView() const $/;"	f	class:CCTouch	signature:() const
CCTouch::getLocationInView	touch_dispatcher/CCTouch.h	/^    CCPoint getLocationInView() const;$/;"	p	class:CCTouch	access:public	signature:() const
CCTouch::getPreviousLocation	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getPreviousLocation() const$/;"	f	class:CCTouch	signature:() const
CCTouch::getPreviousLocation	touch_dispatcher/CCTouch.h	/^    CCPoint getPreviousLocation() const;$/;"	p	class:CCTouch	access:public	signature:() const
CCTouch::getPreviousLocationInView	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getPreviousLocationInView() const $/;"	f	class:CCTouch	signature:() const
CCTouch::getPreviousLocationInView	touch_dispatcher/CCTouch.h	/^    CCPoint getPreviousLocationInView() const;$/;"	p	class:CCTouch	access:public	signature:() const
CCTouch::getStartLocation	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getStartLocation() const$/;"	f	class:CCTouch	signature:() const
CCTouch::getStartLocation	touch_dispatcher/CCTouch.h	/^    CCPoint getStartLocation() const;$/;"	p	class:CCTouch	access:public	signature:() const
CCTouch::getStartLocationInView	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getStartLocationInView() const $/;"	f	class:CCTouch	signature:() const
CCTouch::getStartLocationInView	touch_dispatcher/CCTouch.h	/^    CCPoint getStartLocationInView() const;$/;"	p	class:CCTouch	access:public	signature:() const
CCTouch::m_nId	touch_dispatcher/CCTouch.h	/^    int m_nId;$/;"	m	class:CCTouch	access:private
CCTouch::m_point	touch_dispatcher/CCTouch.h	/^    CCPoint m_point;$/;"	m	class:CCTouch	access:private
CCTouch::m_prevPoint	touch_dispatcher/CCTouch.h	/^    CCPoint m_prevPoint;$/;"	m	class:CCTouch	access:private
CCTouch::m_startPoint	touch_dispatcher/CCTouch.h	/^    CCPoint m_startPoint;$/;"	m	class:CCTouch	access:private
CCTouch::m_startPointCaptured	touch_dispatcher/CCTouch.h	/^    bool m_startPointCaptured;$/;"	m	class:CCTouch	access:private
CCTouch::setTouchInfo	touch_dispatcher/CCTouch.h	/^    void setTouchInfo(int id, float x, float y)$/;"	f	class:CCTouch	access:public	signature:(int id, float x, float y)
CCTouchDelegate	touch_dispatcher/CCTouchDelegateProtocol.h	/^    CCTouchDelegate() {}$/;"	f	class:CCTouchDelegate	access:public	signature:()
CCTouchDelegate	touch_dispatcher/CCTouchDelegateProtocol.h	/^class CC_DLL CCTouchDelegate$/;"	c
CCTouchDelegate::CCTouchDelegate	touch_dispatcher/CCTouchDelegateProtocol.h	/^    CCTouchDelegate() {}$/;"	f	class:CCTouchDelegate	access:public	signature:()
CCTouchDelegate::ccTouchBegan	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent); return false;};$/;"	f	class:CCTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCTouchDelegate::ccTouchCancelled	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCTouchDelegate::ccTouchEnded	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCTouchDelegate::ccTouchMoved	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
CCTouchDelegate::ccTouchesBegan	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
CCTouchDelegate::ccTouchesCancelled	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
CCTouchDelegate::ccTouchesEnded	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
CCTouchDelegate::ccTouchesMoved	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
CCTouchDelegate::~CCTouchDelegate	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual ~CCTouchDelegate()$/;"	f	class:CCTouchDelegate	access:public	signature:()
CCTouchDispatcher	touch_dispatcher/CCTouchDispatcher.h	/^    CCTouchDispatcher() $/;"	f	class:CCTouchDispatcher	access:public	signature:()
CCTouchDispatcher	touch_dispatcher/CCTouchDispatcher.h	/^class CC_DLL CCTouchDispatcher : public CCObject, public EGLTouchDelegate$/;"	c	inherits:CCObject,EGLTouchDelegate
CCTouchDispatcher::CCTouchDispatcher	touch_dispatcher/CCTouchDispatcher.h	/^    CCTouchDispatcher() $/;"	f	class:CCTouchDispatcher	access:public	signature:()
CCTouchDispatcher::addStandardDelegate	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::addStandardDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCTouchDispatcher	signature:(CCTouchDelegate *pDelegate, int nPriority)
CCTouchDispatcher::addStandardDelegate	touch_dispatcher/CCTouchDispatcher.h	/^    void addStandardDelegate(CCTouchDelegate *pDelegate, int nPriority);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority)
CCTouchDispatcher::addTargetedDelegate	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::addTargetedDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallowsTouches)$/;"	f	class:CCTouchDispatcher	signature:(CCTouchDelegate *pDelegate, int nPriority, bool bSwallowsTouches)
CCTouchDispatcher::addTargetedDelegate	touch_dispatcher/CCTouchDispatcher.h	/^    void addTargetedDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallowsTouches);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority, bool bSwallowsTouches)
CCTouchDispatcher::findHandler	touch_dispatcher/CCTouchDispatcher.cpp	/^CCTouchHandler* CCTouchDispatcher::findHandler(CCArray* pArray, CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher	signature:(CCArray* pArray, CCTouchDelegate *pDelegate)
CCTouchDispatcher::findHandler	touch_dispatcher/CCTouchDispatcher.cpp	/^CCTouchHandler* CCTouchDispatcher::findHandler(CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher	signature:(CCTouchDelegate *pDelegate)
CCTouchDispatcher::findHandler	touch_dispatcher/CCTouchDispatcher.h	/^    CCTouchHandler* findHandler(CCArray* pArray, CCTouchDelegate *pDelegate);$/;"	p	class:CCTouchDispatcher	access:protected	signature:(CCArray* pArray, CCTouchDelegate *pDelegate)
CCTouchDispatcher::findHandler	touch_dispatcher/CCTouchDispatcher.h	/^    CCTouchHandler* findHandler(CCTouchDelegate *pDelegate);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCTouchDelegate *pDelegate)
CCTouchDispatcher::forceAddHandler	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::forceAddHandler(CCTouchHandler *pHandler, CCArray *pArray)$/;"	f	class:CCTouchDispatcher	signature:(CCTouchHandler *pHandler, CCArray *pArray)
CCTouchDispatcher::forceAddHandler	touch_dispatcher/CCTouchDispatcher.h	/^    void forceAddHandler(CCTouchHandler *pHandler, CCArray* pArray);$/;"	p	class:CCTouchDispatcher	access:protected	signature:(CCTouchHandler *pHandler, CCArray* pArray)
CCTouchDispatcher::forceRemoveAllDelegates	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::forceRemoveAllDelegates(void)$/;"	f	class:CCTouchDispatcher	signature:(void)
CCTouchDispatcher::forceRemoveAllDelegates	touch_dispatcher/CCTouchDispatcher.h	/^    void forceRemoveAllDelegates(void);$/;"	p	class:CCTouchDispatcher	access:protected	signature:(void)
CCTouchDispatcher::forceRemoveDelegate	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::forceRemoveDelegate(CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher	signature:(CCTouchDelegate *pDelegate)
CCTouchDispatcher::forceRemoveDelegate	touch_dispatcher/CCTouchDispatcher.h	/^    void forceRemoveDelegate(CCTouchDelegate *pDelegate);$/;"	p	class:CCTouchDispatcher	access:protected	signature:(CCTouchDelegate *pDelegate)
CCTouchDispatcher::init	touch_dispatcher/CCTouchDispatcher.cpp	/^bool CCTouchDispatcher::init(void)$/;"	f	class:CCTouchDispatcher	signature:(void)
CCTouchDispatcher::init	touch_dispatcher/CCTouchDispatcher.h	/^    bool init(void);$/;"	p	class:CCTouchDispatcher	access:public	signature:(void)
CCTouchDispatcher::isDispatchEvents	touch_dispatcher/CCTouchDispatcher.cpp	/^bool CCTouchDispatcher::isDispatchEvents(void)$/;"	f	class:CCTouchDispatcher	signature:(void)
CCTouchDispatcher::isDispatchEvents	touch_dispatcher/CCTouchDispatcher.h	/^    bool isDispatchEvents(void);$/;"	p	class:CCTouchDispatcher	access:public	signature:(void)
CCTouchDispatcher::m_bDispatchEvents	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bDispatchEvents;$/;"	m	class:CCTouchDispatcher	access:protected
CCTouchDispatcher::m_bLocked	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bLocked;$/;"	m	class:CCTouchDispatcher	access:protected
CCTouchDispatcher::m_bToAdd	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bToAdd;$/;"	m	class:CCTouchDispatcher	access:protected
CCTouchDispatcher::m_bToQuit	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bToQuit;$/;"	m	class:CCTouchDispatcher	access:protected
CCTouchDispatcher::m_bToRemove	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bToRemove;$/;"	m	class:CCTouchDispatcher	access:protected
CCTouchDispatcher::m_pHandlersToAdd	touch_dispatcher/CCTouchDispatcher.h	/^     CCArray* m_pHandlersToAdd;$/;"	m	class:CCTouchDispatcher	access:protected
CCTouchDispatcher::m_pHandlersToRemove	touch_dispatcher/CCTouchDispatcher.h	/^    struct _ccCArray *m_pHandlersToRemove;$/;"	m	class:CCTouchDispatcher	typeref:struct:CCTouchDispatcher::_ccCArray	access:protected
CCTouchDispatcher::m_pStandardHandlers	touch_dispatcher/CCTouchDispatcher.h	/^     CCArray* m_pStandardHandlers;$/;"	m	class:CCTouchDispatcher	access:protected
CCTouchDispatcher::m_pTargetedHandlers	touch_dispatcher/CCTouchDispatcher.h	/^     CCArray* m_pTargetedHandlers;$/;"	m	class:CCTouchDispatcher	access:protected
CCTouchDispatcher::m_sHandlerHelperData	touch_dispatcher/CCTouchDispatcher.h	/^    struct ccTouchHandlerHelperData m_sHandlerHelperData[ccTouchMax];$/;"	m	class:CCTouchDispatcher	typeref:struct:CCTouchDispatcher::ccTouchHandlerHelperData	access:protected
CCTouchDispatcher::rearrangeHandlers	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::rearrangeHandlers(CCArray *pArray)$/;"	f	class:CCTouchDispatcher	signature:(CCArray *pArray)
CCTouchDispatcher::rearrangeHandlers	touch_dispatcher/CCTouchDispatcher.h	/^    void rearrangeHandlers(CCArray* pArray);$/;"	p	class:CCTouchDispatcher	access:protected	signature:(CCArray* pArray)
CCTouchDispatcher::removeAllDelegates	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::removeAllDelegates(void)$/;"	f	class:CCTouchDispatcher	signature:(void)
CCTouchDispatcher::removeAllDelegates	touch_dispatcher/CCTouchDispatcher.h	/^    void removeAllDelegates(void);$/;"	p	class:CCTouchDispatcher	access:public	signature:(void)
CCTouchDispatcher::removeDelegate	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::removeDelegate(CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher	signature:(CCTouchDelegate *pDelegate)
CCTouchDispatcher::removeDelegate	touch_dispatcher/CCTouchDispatcher.h	/^    void removeDelegate(CCTouchDelegate *pDelegate);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCTouchDelegate *pDelegate)
CCTouchDispatcher::setDispatchEvents	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::setDispatchEvents(bool bDispatchEvents)$/;"	f	class:CCTouchDispatcher	signature:(bool bDispatchEvents)
CCTouchDispatcher::setDispatchEvents	touch_dispatcher/CCTouchDispatcher.h	/^    void setDispatchEvents(bool bDispatchEvents);$/;"	p	class:CCTouchDispatcher	access:public	signature:(bool bDispatchEvents)
CCTouchDispatcher::setPriority	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::setPriority(int nPriority, CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher	signature:(int nPriority, CCTouchDelegate *pDelegate)
CCTouchDispatcher::setPriority	touch_dispatcher/CCTouchDispatcher.h	/^    void setPriority(int nPriority, CCTouchDelegate *pDelegate);$/;"	p	class:CCTouchDispatcher	access:public	signature:(int nPriority, CCTouchDelegate *pDelegate)
CCTouchDispatcher::touches	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touches(CCSet *pTouches, CCEvent *pEvent, unsigned int uIndex)$/;"	f	class:CCTouchDispatcher	signature:(CCSet *pTouches, CCEvent *pEvent, unsigned int uIndex)
CCTouchDispatcher::touches	touch_dispatcher/CCTouchDispatcher.h	/^    void touches(CCSet *pTouches, CCEvent *pEvent, unsigned int uIndex);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCSet *pTouches, CCEvent *pEvent, unsigned int uIndex)
CCTouchDispatcher::touchesBegan	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touchesBegan(CCSet *touches, CCEvent *pEvent)$/;"	f	class:CCTouchDispatcher	signature:(CCSet *touches, CCEvent *pEvent)
CCTouchDispatcher::touchesBegan	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesBegan(CCSet* touches, CCEvent* pEvent);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCSet* touches, CCEvent* pEvent)
CCTouchDispatcher::touchesCancelled	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touchesCancelled(CCSet *touches, CCEvent *pEvent)$/;"	f	class:CCTouchDispatcher	signature:(CCSet *touches, CCEvent *pEvent)
CCTouchDispatcher::touchesCancelled	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesCancelled(CCSet* touches, CCEvent* pEvent);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCSet* touches, CCEvent* pEvent)
CCTouchDispatcher::touchesEnded	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touchesEnded(CCSet *touches, CCEvent *pEvent)$/;"	f	class:CCTouchDispatcher	signature:(CCSet *touches, CCEvent *pEvent)
CCTouchDispatcher::touchesEnded	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesEnded(CCSet* touches, CCEvent* pEvent);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCSet* touches, CCEvent* pEvent)
CCTouchDispatcher::touchesMoved	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touchesMoved(CCSet *touches, CCEvent *pEvent)$/;"	f	class:CCTouchDispatcher	signature:(CCSet *touches, CCEvent *pEvent)
CCTouchDispatcher::touchesMoved	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesMoved(CCSet* touches, CCEvent* pEvent);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCSet* touches, CCEvent* pEvent)
CCTouchDispatcher::~CCTouchDispatcher	touch_dispatcher/CCTouchDispatcher.cpp	/^CCTouchDispatcher::~CCTouchDispatcher(void)$/;"	f	class:CCTouchDispatcher	signature:(void)
CCTouchDispatcher::~CCTouchDispatcher	touch_dispatcher/CCTouchDispatcher.h	/^    ~CCTouchDispatcher();$/;"	p	class:CCTouchDispatcher	access:public	signature:()
CCTouchHandler	touch_dispatcher/CCTouchHandler.h	/^class CC_DLL  CCTouchHandler : public CCObject$/;"	c	inherits:CCObject
CCTouchHandler::getDelegate	touch_dispatcher/CCTouchHandler.cpp	/^CCTouchDelegate* CCTouchHandler::getDelegate(void)$/;"	f	class:CCTouchHandler	signature:(void)
CCTouchHandler::getDelegate	touch_dispatcher/CCTouchHandler.h	/^    CCTouchDelegate* getDelegate();$/;"	p	class:CCTouchHandler	access:public	signature:()
CCTouchHandler::getEnabledSelectors	touch_dispatcher/CCTouchHandler.cpp	/^int CCTouchHandler::getEnabledSelectors(void)$/;"	f	class:CCTouchHandler	signature:(void)
CCTouchHandler::getEnabledSelectors	touch_dispatcher/CCTouchHandler.h	/^    int getEnabledSelectors(void);$/;"	p	class:CCTouchHandler	access:public	signature:(void)
CCTouchHandler::getPriority	touch_dispatcher/CCTouchHandler.cpp	/^int CCTouchHandler::getPriority(void)$/;"	f	class:CCTouchHandler	signature:(void)
CCTouchHandler::getPriority	touch_dispatcher/CCTouchHandler.h	/^    int getPriority(void);$/;"	p	class:CCTouchHandler	access:public	signature:(void)
CCTouchHandler::handlerWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^CCTouchHandler* CCTouchHandler::handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCTouchHandler	signature:(CCTouchDelegate *pDelegate, int nPriority)
CCTouchHandler::handlerWithDelegate	touch_dispatcher/CCTouchHandler.h	/^    static CCTouchHandler* handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority);$/;"	p	class:CCTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority)
CCTouchHandler::initWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^bool CCTouchHandler::initWithDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCTouchHandler	signature:(CCTouchDelegate *pDelegate, int nPriority)
CCTouchHandler::initWithDelegate	touch_dispatcher/CCTouchHandler.h	/^    virtual bool initWithDelegate(CCTouchDelegate *pDelegate, int nPriority);$/;"	p	class:CCTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority)
CCTouchHandler::m_nEnabledSelectors	touch_dispatcher/CCTouchHandler.h	/^    int m_nEnabledSelectors;$/;"	m	class:CCTouchHandler	access:protected
CCTouchHandler::m_nPriority	touch_dispatcher/CCTouchHandler.h	/^    int m_nPriority;$/;"	m	class:CCTouchHandler	access:protected
CCTouchHandler::m_pDelegate	touch_dispatcher/CCTouchHandler.h	/^    CCTouchDelegate *m_pDelegate;$/;"	m	class:CCTouchHandler	access:protected
CCTouchHandler::setDelegate	touch_dispatcher/CCTouchHandler.cpp	/^void CCTouchHandler::setDelegate(CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchHandler	signature:(CCTouchDelegate *pDelegate)
CCTouchHandler::setDelegate	touch_dispatcher/CCTouchHandler.h	/^    void setDelegate(CCTouchDelegate *pDelegate);$/;"	p	class:CCTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate)
CCTouchHandler::setEnalbedSelectors	touch_dispatcher/CCTouchHandler.cpp	/^void CCTouchHandler::setEnalbedSelectors(int nValue)$/;"	f	class:CCTouchHandler	signature:(int nValue)
CCTouchHandler::setEnalbedSelectors	touch_dispatcher/CCTouchHandler.h	/^    void setEnalbedSelectors(int nValue);$/;"	p	class:CCTouchHandler	access:public	signature:(int nValue)
CCTouchHandler::setPriority	touch_dispatcher/CCTouchHandler.cpp	/^void CCTouchHandler::setPriority(int nPriority)$/;"	f	class:CCTouchHandler	signature:(int nPriority)
CCTouchHandler::setPriority	touch_dispatcher/CCTouchHandler.h	/^    void setPriority(int nPriority);$/;"	p	class:CCTouchHandler	access:public	signature:(int nPriority)
CCTouchHandler::~CCTouchHandler	touch_dispatcher/CCTouchHandler.cpp	/^CCTouchHandler::~CCTouchHandler(void)$/;"	f	class:CCTouchHandler	signature:(void)
CCTouchHandler::~CCTouchHandler	touch_dispatcher/CCTouchHandler.h	/^    virtual ~CCTouchHandler(void);$/;"	p	class:CCTouchHandler	access:public	signature:(void)
CCTouchScriptHandlerEntry	script_support/CCScriptSupport.h	/^    CCTouchScriptHandlerEntry(int nHandler)$/;"	f	class:CCTouchScriptHandlerEntry	access:private	signature:(int nHandler)
CCTouchScriptHandlerEntry	script_support/CCScriptSupport.h	/^class CCTouchScriptHandlerEntry : public CCScriptHandlerEntry$/;"	c	inherits:CCScriptHandlerEntry
CCTouchScriptHandlerEntry::CCTouchScriptHandlerEntry	script_support/CCScriptSupport.h	/^    CCTouchScriptHandlerEntry(int nHandler)$/;"	f	class:CCTouchScriptHandlerEntry	access:private	signature:(int nHandler)
CCTouchScriptHandlerEntry::create	script_support/CCScriptSupport.cpp	/^CCTouchScriptHandlerEntry* CCTouchScriptHandlerEntry::create(int nHandler,$/;"	f	class:CCTouchScriptHandlerEntry	signature:(int nHandler, bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)
CCTouchScriptHandlerEntry::create	script_support/CCScriptSupport.h	/^    static CCTouchScriptHandlerEntry* create(int nHandler, bool bIsMultiTouches, int nPriority, bool bSwallowsTouches);$/;"	p	class:CCTouchScriptHandlerEntry	access:public	signature:(int nHandler, bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)
CCTouchScriptHandlerEntry::getPriority	script_support/CCScriptSupport.h	/^    int getPriority(void) {$/;"	f	class:CCTouchScriptHandlerEntry	access:public	signature:(void)
CCTouchScriptHandlerEntry::getSwallowsTouches	script_support/CCScriptSupport.h	/^    bool getSwallowsTouches(void) {$/;"	f	class:CCTouchScriptHandlerEntry	access:public	signature:(void)
CCTouchScriptHandlerEntry::init	script_support/CCScriptSupport.cpp	/^bool CCTouchScriptHandlerEntry::init(bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)$/;"	f	class:CCTouchScriptHandlerEntry	signature:(bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)
CCTouchScriptHandlerEntry::init	script_support/CCScriptSupport.h	/^    bool init(bool bIsMultiTouches, int nPriority, bool bSwallowsTouches);$/;"	p	class:CCTouchScriptHandlerEntry	access:private	signature:(bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)
CCTouchScriptHandlerEntry::isMultiTouches	script_support/CCScriptSupport.h	/^    bool isMultiTouches(void) {$/;"	f	class:CCTouchScriptHandlerEntry	access:public	signature:(void)
CCTouchScriptHandlerEntry::m_bIsMultiTouches	script_support/CCScriptSupport.h	/^    bool    m_bIsMultiTouches;$/;"	m	class:CCTouchScriptHandlerEntry	access:private
CCTouchScriptHandlerEntry::m_bSwallowsTouches	script_support/CCScriptSupport.h	/^    bool    m_bSwallowsTouches;$/;"	m	class:CCTouchScriptHandlerEntry	access:private
CCTouchScriptHandlerEntry::m_nPriority	script_support/CCScriptSupport.h	/^    int     m_nPriority;$/;"	m	class:CCTouchScriptHandlerEntry	access:private
CCTouchScriptHandlerEntry::~CCTouchScriptHandlerEntry	script_support/CCScriptSupport.cpp	/^CCTouchScriptHandlerEntry::~CCTouchScriptHandlerEntry(void)$/;"	f	class:CCTouchScriptHandlerEntry	signature:(void)
CCTouchScriptHandlerEntry::~CCTouchScriptHandlerEntry	script_support/CCScriptSupport.h	/^    ~CCTouchScriptHandlerEntry(void);$/;"	p	class:CCTouchScriptHandlerEntry	access:public	signature:(void)
CCTransitionCrossFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionCrossFade::CCTransitionCrossFade()$/;"	f	class:CCTransitionCrossFade	signature:()
CCTransitionCrossFade	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionCrossFade();$/;"	p	class:CCTransitionCrossFade	access:public	signature:()
CCTransitionCrossFade	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionCrossFade : public CCTransitionScene$/;"	c	inherits:CCTransitionScene
CCTransitionCrossFade::CCTransitionCrossFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionCrossFade::CCTransitionCrossFade()$/;"	f	class:CCTransitionCrossFade	signature:()
CCTransitionCrossFade::CCTransitionCrossFade	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionCrossFade();$/;"	p	class:CCTransitionCrossFade	access:public	signature:()
CCTransitionCrossFade::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionCrossFade* CCTransitionCrossFade::create(float t, CCScene* scene)$/;"	f	class:CCTransitionCrossFade	signature:(float t, CCScene* scene)
CCTransitionCrossFade::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionCrossFade* create(float t, CCScene* scene);$/;"	p	class:CCTransitionCrossFade	access:public	signature:(float t, CCScene* scene)
CCTransitionCrossFade::draw	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionCrossFade:: draw()$/;"	f	class:CCTransitionCrossFade	signature:()
CCTransitionCrossFade::draw	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void draw();$/;"	p	class:CCTransitionCrossFade	access:public	signature:()
CCTransitionCrossFade::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionCrossFade::onEnter()$/;"	f	class:CCTransitionCrossFade	signature:()
CCTransitionCrossFade::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionCrossFade	access:public	signature:()
CCTransitionCrossFade::onExit	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionCrossFade::onExit()$/;"	f	class:CCTransitionCrossFade	signature:()
CCTransitionCrossFade::onExit	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onExit();$/;"	p	class:CCTransitionCrossFade	access:public	signature:()
CCTransitionCrossFade::~CCTransitionCrossFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionCrossFade::~CCTransitionCrossFade()$/;"	f	class:CCTransitionCrossFade	signature:()
CCTransitionCrossFade::~CCTransitionCrossFade	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionCrossFade();$/;"	p	class:CCTransitionCrossFade	access:public	signature:()
CCTransitionEaseScene	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionEaseScene\/\/ : public CCObject$/;"	c
CCTransitionEaseScene::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval * easeActionWithAction(CCActionInterval * action) = 0;$/;"	p	class:CCTransitionEaseScene	access:public	signature:(CCActionInterval * action)
CCTransitionFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade::CCTransitionFade()$/;"	f	class:CCTransitionFade	signature:()
CCTransitionFade	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFade();$/;"	p	class:CCTransitionFade	access:public	signature:()
CCTransitionFade	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFade : public CCTransitionScene$/;"	c	inherits:CCTransitionScene
CCTransitionFade::CCTransitionFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade::CCTransitionFade()$/;"	f	class:CCTransitionFade	signature:()
CCTransitionFade::CCTransitionFade	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFade();$/;"	p	class:CCTransitionFade	access:public	signature:()
CCTransitionFade::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade * CCTransitionFade::create(float duration, CCScene *scene, const ccColor3B& color)$/;"	f	class:CCTransitionFade	signature:(float duration, CCScene *scene, const ccColor3B& color)
CCTransitionFade::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade* CCTransitionFade::create(float duration,CCScene* scene)$/;"	f	class:CCTransitionFade	signature:(float duration,CCScene* scene)
CCTransitionFade::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFade* create(float duration,CCScene* scene);$/;"	p	class:CCTransitionFade	access:public	signature:(float duration,CCScene* scene)
CCTransitionFade::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFade* create(float duration,CCScene* scene, const ccColor3B& color);$/;"	p	class:CCTransitionFade	access:public	signature:(float duration,CCScene* scene, const ccColor3B& color)
CCTransitionFade::initWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^bool CCTransitionFade::initWithDuration(float duration, CCScene *scene, const ccColor3B& color)$/;"	f	class:CCTransitionFade	signature:(float duration, CCScene *scene, const ccColor3B& color)
CCTransitionFade::initWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^bool CCTransitionFade::initWithDuration(float t, CCScene *scene)$/;"	f	class:CCTransitionFade	signature:(float t, CCScene *scene)
CCTransitionFade::initWithDuration	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual bool initWithDuration(float t, CCScene*scene ,const ccColor3B& color);$/;"	p	class:CCTransitionFade	access:public	signature:(float t, CCScene*scene ,const ccColor3B& color)
CCTransitionFade::initWithDuration	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual bool initWithDuration(float t,CCScene* scene); $/;"	p	class:CCTransitionFade	access:public	signature:(float t,CCScene* scene)
CCTransitionFade::m_tColor	layers_scenes_transitions_nodes/CCTransition.h	/^    ccColor4B    m_tColor;$/;"	m	class:CCTransitionFade	access:protected
CCTransitionFade::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFade :: onEnter()$/;"	f	class:CCTransitionFade	signature:()
CCTransitionFade::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionFade	access:public	signature:()
CCTransitionFade::onExit	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFade::onExit()$/;"	f	class:CCTransitionFade	signature:()
CCTransitionFade::onExit	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onExit();$/;"	p	class:CCTransitionFade	access:public	signature:()
CCTransitionFade::~CCTransitionFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade::~CCTransitionFade()$/;"	f	class:CCTransitionFade	signature:()
CCTransitionFade::~CCTransitionFade	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFade();$/;"	p	class:CCTransitionFade	access:public	signature:()
CCTransitionFadeBL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeBL::CCTransitionFadeBL()$/;"	f	class:CCTransitionFadeBL	signature:()
CCTransitionFadeBL	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFadeBL();$/;"	p	class:CCTransitionFadeBL	access:public	signature:()
CCTransitionFadeBL	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFadeBL : public CCTransitionFadeTR$/;"	c	inherits:CCTransitionFadeTR
CCTransitionFadeBL::CCTransitionFadeBL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeBL::CCTransitionFadeBL()$/;"	f	class:CCTransitionFadeBL	signature:()
CCTransitionFadeBL::CCTransitionFadeBL	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFadeBL();$/;"	p	class:CCTransitionFadeBL	access:public	signature:()
CCTransitionFadeBL::actionWithSize	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval*  CCTransitionFadeBL::actionWithSize(const CCSize& size)$/;"	f	class:CCTransitionFadeBL	signature:(const CCSize& size)
CCTransitionFadeBL::actionWithSize	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* actionWithSize(const CCSize& size);$/;"	p	class:CCTransitionFadeBL	access:public	signature:(const CCSize& size)
CCTransitionFadeBL::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeBL* CCTransitionFadeBL::create(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeBL	signature:(float t, CCScene* scene)
CCTransitionFadeBL::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFadeBL* create(float t, CCScene* scene);$/;"	p	class:CCTransitionFadeBL	access:public	signature:(float t, CCScene* scene)
CCTransitionFadeBL::~CCTransitionFadeBL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeBL::~CCTransitionFadeBL()$/;"	f	class:CCTransitionFadeBL	signature:()
CCTransitionFadeBL::~CCTransitionFadeBL	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFadeBL();$/;"	p	class:CCTransitionFadeBL	access:public	signature:()
CCTransitionFadeDown	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeDown::CCTransitionFadeDown()$/;"	f	class:CCTransitionFadeDown	signature:()
CCTransitionFadeDown	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFadeDown();$/;"	p	class:CCTransitionFadeDown	access:public	signature:()
CCTransitionFadeDown	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFadeDown : public CCTransitionFadeTR$/;"	c	inherits:CCTransitionFadeTR
CCTransitionFadeDown::CCTransitionFadeDown	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeDown::CCTransitionFadeDown()$/;"	f	class:CCTransitionFadeDown	signature:()
CCTransitionFadeDown::CCTransitionFadeDown	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFadeDown();$/;"	p	class:CCTransitionFadeDown	access:public	signature:()
CCTransitionFadeDown::actionWithSize	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionFadeDown::actionWithSize(const CCSize& size)$/;"	f	class:CCTransitionFadeDown	signature:(const CCSize& size)
CCTransitionFadeDown::actionWithSize	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* actionWithSize(const CCSize& size);$/;"	p	class:CCTransitionFadeDown	access:public	signature:(const CCSize& size)
CCTransitionFadeDown::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeDown* CCTransitionFadeDown::create(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeDown	signature:(float t, CCScene* scene)
CCTransitionFadeDown::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFadeDown* create(float t, CCScene* scene);$/;"	p	class:CCTransitionFadeDown	access:public	signature:(float t, CCScene* scene)
CCTransitionFadeDown::~CCTransitionFadeDown	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeDown::~CCTransitionFadeDown()$/;"	f	class:CCTransitionFadeDown	signature:()
CCTransitionFadeDown::~CCTransitionFadeDown	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFadeDown();$/;"	p	class:CCTransitionFadeDown	access:public	signature:()
CCTransitionFadeTR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeTR::CCTransitionFadeTR()$/;"	f	class:CCTransitionFadeTR	signature:()
CCTransitionFadeTR	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFadeTR();$/;"	p	class:CCTransitionFadeTR	access:public	signature:()
CCTransitionFadeTR	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFadeTR : public CCTransitionScene , public CCTransitionEaseScene$/;"	c	inherits:CCTransitionScene,CCTransitionEaseScene
CCTransitionFadeTR::CCTransitionFadeTR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeTR::CCTransitionFadeTR()$/;"	f	class:CCTransitionFadeTR	signature:()
CCTransitionFadeTR::CCTransitionFadeTR	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFadeTR();$/;"	p	class:CCTransitionFadeTR	access:public	signature:()
CCTransitionFadeTR::actionWithSize	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval*  CCTransitionFadeTR::actionWithSize(const CCSize& size)$/;"	f	class:CCTransitionFadeTR	signature:(const CCSize& size)
CCTransitionFadeTR::actionWithSize	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* actionWithSize(const CCSize& size);$/;"	p	class:CCTransitionFadeTR	access:public	signature:(const CCSize& size)
CCTransitionFadeTR::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeTR* CCTransitionFadeTR::create(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeTR	signature:(float t, CCScene* scene)
CCTransitionFadeTR::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFadeTR* create(float t, CCScene* scene);$/;"	p	class:CCTransitionFadeTR	access:public	signature:(float t, CCScene* scene)
CCTransitionFadeTR::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionFadeTR:: easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionFadeTR	signature:(CCActionInterval* action)
CCTransitionFadeTR::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* easeActionWithAction(CCActionInterval * action);$/;"	p	class:CCTransitionFadeTR	access:public	signature:(CCActionInterval * action)
CCTransitionFadeTR::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFadeTR::onEnter()$/;"	f	class:CCTransitionFadeTR	signature:()
CCTransitionFadeTR::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionFadeTR	access:public	signature:()
CCTransitionFadeTR::sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFadeTR::sceneOrder()$/;"	f	class:CCTransitionFadeTR	signature:()
CCTransitionFadeTR::sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionFadeTR	access:protected	signature:()
CCTransitionFadeTR::~CCTransitionFadeTR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeTR::~CCTransitionFadeTR()$/;"	f	class:CCTransitionFadeTR	signature:()
CCTransitionFadeTR::~CCTransitionFadeTR	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFadeTR();$/;"	p	class:CCTransitionFadeTR	access:public	signature:()
CCTransitionFadeUp	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeUp::CCTransitionFadeUp()$/;"	f	class:CCTransitionFadeUp	signature:()
CCTransitionFadeUp	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFadeUp();$/;"	p	class:CCTransitionFadeUp	access:public	signature:()
CCTransitionFadeUp	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFadeUp : public CCTransitionFadeTR$/;"	c	inherits:CCTransitionFadeTR
CCTransitionFadeUp::CCTransitionFadeUp	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeUp::CCTransitionFadeUp()$/;"	f	class:CCTransitionFadeUp	signature:()
CCTransitionFadeUp::CCTransitionFadeUp	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFadeUp();$/;"	p	class:CCTransitionFadeUp	access:public	signature:()
CCTransitionFadeUp::actionWithSize	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionFadeUp::actionWithSize(const CCSize& size)$/;"	f	class:CCTransitionFadeUp	signature:(const CCSize& size)
CCTransitionFadeUp::actionWithSize	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* actionWithSize(const CCSize& size);$/;"	p	class:CCTransitionFadeUp	access:public	signature:(const CCSize& size)
CCTransitionFadeUp::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeUp* CCTransitionFadeUp::create(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeUp	signature:(float t, CCScene* scene)
CCTransitionFadeUp::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFadeUp* create(float t, CCScene* scene);$/;"	p	class:CCTransitionFadeUp	access:public	signature:(float t, CCScene* scene)
CCTransitionFadeUp::~CCTransitionFadeUp	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeUp::~CCTransitionFadeUp()$/;"	f	class:CCTransitionFadeUp	signature:()
CCTransitionFadeUp::~CCTransitionFadeUp	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFadeUp();$/;"	p	class:CCTransitionFadeUp	access:public	signature:()
CCTransitionFlipAngular	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular::CCTransitionFlipAngular()$/;"	f	class:CCTransitionFlipAngular	signature:()
CCTransitionFlipAngular	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFlipAngular();$/;"	p	class:CCTransitionFlipAngular	access:public	signature:()
CCTransitionFlipAngular	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFlipAngular : public CCTransitionSceneOriented$/;"	c	inherits:CCTransitionSceneOriented
CCTransitionFlipAngular::CCTransitionFlipAngular	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular::CCTransitionFlipAngular()$/;"	f	class:CCTransitionFlipAngular	signature:()
CCTransitionFlipAngular::CCTransitionFlipAngular	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFlipAngular();$/;"	p	class:CCTransitionFlipAngular	access:public	signature:()
CCTransitionFlipAngular::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular* CCTransitionFlipAngular::create(float t, CCScene* s)$/;"	f	class:CCTransitionFlipAngular	signature:(float t, CCScene* s)
CCTransitionFlipAngular::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular* CCTransitionFlipAngular::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionFlipAngular	signature:(float t, CCScene* s, tOrientation o)
CCTransitionFlipAngular::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFlipAngular* create(float t, CCScene* s);$/;"	p	class:CCTransitionFlipAngular	access:public	signature:(float t, CCScene* s)
CCTransitionFlipAngular::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFlipAngular* create(float t, CCScene* s, tOrientation o);$/;"	p	class:CCTransitionFlipAngular	access:public	signature:(float t, CCScene* s, tOrientation o)
CCTransitionFlipAngular::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFlipAngular::onEnter()$/;"	f	class:CCTransitionFlipAngular	signature:()
CCTransitionFlipAngular::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionFlipAngular	access:public	signature:()
CCTransitionFlipAngular::~CCTransitionFlipAngular	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular::~CCTransitionFlipAngular()$/;"	f	class:CCTransitionFlipAngular	signature:()
CCTransitionFlipAngular::~CCTransitionFlipAngular	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFlipAngular();$/;"	p	class:CCTransitionFlipAngular	access:public	signature:()
CCTransitionFlipX	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX::CCTransitionFlipX()$/;"	f	class:CCTransitionFlipX	signature:()
CCTransitionFlipX	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFlipX();$/;"	p	class:CCTransitionFlipX	access:public	signature:()
CCTransitionFlipX	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFlipX : public CCTransitionSceneOriented$/;"	c	inherits:CCTransitionSceneOriented
CCTransitionFlipX::CCTransitionFlipX	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX::CCTransitionFlipX()$/;"	f	class:CCTransitionFlipX	signature:()
CCTransitionFlipX::CCTransitionFlipX	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFlipX();$/;"	p	class:CCTransitionFlipX	access:public	signature:()
CCTransitionFlipX::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX* CCTransitionFlipX::create(float t, CCScene* s)$/;"	f	class:CCTransitionFlipX	signature:(float t, CCScene* s)
CCTransitionFlipX::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX* CCTransitionFlipX::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionFlipX	signature:(float t, CCScene* s, tOrientation o)
CCTransitionFlipX::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFlipX* create(float t, CCScene* s);$/;"	p	class:CCTransitionFlipX	access:public	signature:(float t, CCScene* s)
CCTransitionFlipX::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFlipX* create(float t, CCScene* s, tOrientation o);$/;"	p	class:CCTransitionFlipX	access:public	signature:(float t, CCScene* s, tOrientation o)
CCTransitionFlipX::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFlipX::onEnter()$/;"	f	class:CCTransitionFlipX	signature:()
CCTransitionFlipX::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionFlipX	access:public	signature:()
CCTransitionFlipX::~CCTransitionFlipX	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX::~CCTransitionFlipX()$/;"	f	class:CCTransitionFlipX	signature:()
CCTransitionFlipX::~CCTransitionFlipX	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFlipX();$/;"	p	class:CCTransitionFlipX	access:public	signature:()
CCTransitionFlipY	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY::CCTransitionFlipY()$/;"	f	class:CCTransitionFlipY	signature:()
CCTransitionFlipY	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFlipY();$/;"	p	class:CCTransitionFlipY	access:public	signature:()
CCTransitionFlipY	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFlipY : public CCTransitionSceneOriented$/;"	c	inherits:CCTransitionSceneOriented
CCTransitionFlipY::CCTransitionFlipY	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY::CCTransitionFlipY()$/;"	f	class:CCTransitionFlipY	signature:()
CCTransitionFlipY::CCTransitionFlipY	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionFlipY();$/;"	p	class:CCTransitionFlipY	access:public	signature:()
CCTransitionFlipY::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY* CCTransitionFlipY::create(float t, CCScene* s)$/;"	f	class:CCTransitionFlipY	signature:(float t, CCScene* s)
CCTransitionFlipY::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY* CCTransitionFlipY::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionFlipY	signature:(float t, CCScene* s, tOrientation o)
CCTransitionFlipY::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFlipY* create(float t, CCScene* s);$/;"	p	class:CCTransitionFlipY	access:public	signature:(float t, CCScene* s)
CCTransitionFlipY::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFlipY* create(float t, CCScene* s, tOrientation o);$/;"	p	class:CCTransitionFlipY	access:public	signature:(float t, CCScene* s, tOrientation o)
CCTransitionFlipY::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFlipY::onEnter()$/;"	f	class:CCTransitionFlipY	signature:()
CCTransitionFlipY::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionFlipY	access:public	signature:()
CCTransitionFlipY::~CCTransitionFlipY	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY::~CCTransitionFlipY()$/;"	f	class:CCTransitionFlipY	signature:()
CCTransitionFlipY::~CCTransitionFlipY	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFlipY();$/;"	p	class:CCTransitionFlipY	access:public	signature:()
CCTransitionJumpZoom	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionJumpZoom::CCTransitionJumpZoom()$/;"	f	class:CCTransitionJumpZoom	signature:()
CCTransitionJumpZoom	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionJumpZoom();$/;"	p	class:CCTransitionJumpZoom	access:public	signature:()
CCTransitionJumpZoom	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionJumpZoom : public CCTransitionScene$/;"	c	inherits:CCTransitionScene
CCTransitionJumpZoom::CCTransitionJumpZoom	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionJumpZoom::CCTransitionJumpZoom()$/;"	f	class:CCTransitionJumpZoom	signature:()
CCTransitionJumpZoom::CCTransitionJumpZoom	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionJumpZoom();$/;"	p	class:CCTransitionJumpZoom	access:public	signature:()
CCTransitionJumpZoom::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionJumpZoom* CCTransitionJumpZoom::create(float t, CCScene* scene)$/;"	f	class:CCTransitionJumpZoom	signature:(float t, CCScene* scene)
CCTransitionJumpZoom::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionJumpZoom* create(float t, CCScene* scene);$/;"	p	class:CCTransitionJumpZoom	access:public	signature:(float t, CCScene* scene)
CCTransitionJumpZoom::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionJumpZoom::onEnter()$/;"	f	class:CCTransitionJumpZoom	signature:()
CCTransitionJumpZoom::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionJumpZoom	access:public	signature:()
CCTransitionJumpZoom::~CCTransitionJumpZoom	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionJumpZoom::~CCTransitionJumpZoom()$/;"	f	class:CCTransitionJumpZoom	signature:()
CCTransitionJumpZoom::~CCTransitionJumpZoom	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionJumpZoom();$/;"	p	class:CCTransitionJumpZoom	access:public	signature:()
CCTransitionMoveInB	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInB::CCTransitionMoveInB()$/;"	f	class:CCTransitionMoveInB	signature:()
CCTransitionMoveInB	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionMoveInB();$/;"	p	class:CCTransitionMoveInB	access:public	signature:()
CCTransitionMoveInB	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionMoveInB : public CCTransitionMoveInL$/;"	c	inherits:CCTransitionMoveInL
CCTransitionMoveInB::CCTransitionMoveInB	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInB::CCTransitionMoveInB()$/;"	f	class:CCTransitionMoveInB	signature:()
CCTransitionMoveInB::CCTransitionMoveInB	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionMoveInB();$/;"	p	class:CCTransitionMoveInB	access:public	signature:()
CCTransitionMoveInB::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInB* CCTransitionMoveInB::create(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInB	signature:(float t, CCScene* scene)
CCTransitionMoveInB::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionMoveInB* create(float t, CCScene* scene);$/;"	p	class:CCTransitionMoveInB	access:public	signature:(float t, CCScene* scene)
CCTransitionMoveInB::initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInB::initScenes()$/;"	f	class:CCTransitionMoveInB	signature:()
CCTransitionMoveInB::initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes();$/;"	p	class:CCTransitionMoveInB	access:public	signature:()
CCTransitionMoveInB::~CCTransitionMoveInB	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInB::~CCTransitionMoveInB()$/;"	f	class:CCTransitionMoveInB	signature:()
CCTransitionMoveInB::~CCTransitionMoveInB	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionMoveInB();$/;"	p	class:CCTransitionMoveInB	access:public	signature:()
CCTransitionMoveInL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInL::CCTransitionMoveInL()$/;"	f	class:CCTransitionMoveInL	signature:()
CCTransitionMoveInL	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionMoveInL();$/;"	p	class:CCTransitionMoveInL	access:public	signature:()
CCTransitionMoveInL	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionMoveInL : public CCTransitionScene, public CCTransitionEaseScene$/;"	c	inherits:CCTransitionScene,CCTransitionEaseScene
CCTransitionMoveInL::CCTransitionMoveInL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInL::CCTransitionMoveInL()$/;"	f	class:CCTransitionMoveInL	signature:()
CCTransitionMoveInL::CCTransitionMoveInL	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionMoveInL();$/;"	p	class:CCTransitionMoveInL	access:public	signature:()
CCTransitionMoveInL::action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionMoveInL::action()$/;"	f	class:CCTransitionMoveInL	signature:()
CCTransitionMoveInL::action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionMoveInL	access:public	signature:(void)
CCTransitionMoveInL::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInL* CCTransitionMoveInL::create(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInL	signature:(float t, CCScene* scene)
CCTransitionMoveInL::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionMoveInL* create(float t, CCScene* scene);$/;"	p	class:CCTransitionMoveInL	access:public	signature:(float t, CCScene* scene)
CCTransitionMoveInL::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionMoveInL::easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionMoveInL	signature:(CCActionInterval* action)
CCTransitionMoveInL::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* easeActionWithAction(CCActionInterval * action);$/;"	p	class:CCTransitionMoveInL	access:public	signature:(CCActionInterval * action)
CCTransitionMoveInL::initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInL::initScenes()$/;"	f	class:CCTransitionMoveInL	signature:()
CCTransitionMoveInL::initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes(void);$/;"	p	class:CCTransitionMoveInL	access:public	signature:(void)
CCTransitionMoveInL::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInL::onEnter()$/;"	f	class:CCTransitionMoveInL	signature:()
CCTransitionMoveInL::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionMoveInL	access:public	signature:()
CCTransitionMoveInL::~CCTransitionMoveInL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInL::~CCTransitionMoveInL()$/;"	f	class:CCTransitionMoveInL	signature:()
CCTransitionMoveInL::~CCTransitionMoveInL	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionMoveInL();$/;"	p	class:CCTransitionMoveInL	access:public	signature:()
CCTransitionMoveInR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInR::CCTransitionMoveInR()$/;"	f	class:CCTransitionMoveInR	signature:()
CCTransitionMoveInR	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionMoveInR();$/;"	p	class:CCTransitionMoveInR	access:public	signature:()
CCTransitionMoveInR	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionMoveInR : public CCTransitionMoveInL$/;"	c	inherits:CCTransitionMoveInL
CCTransitionMoveInR::CCTransitionMoveInR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInR::CCTransitionMoveInR()$/;"	f	class:CCTransitionMoveInR	signature:()
CCTransitionMoveInR::CCTransitionMoveInR	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionMoveInR();$/;"	p	class:CCTransitionMoveInR	access:public	signature:()
CCTransitionMoveInR::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInR* CCTransitionMoveInR::create(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInR	signature:(float t, CCScene* scene)
CCTransitionMoveInR::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionMoveInR* create(float t, CCScene* scene);$/;"	p	class:CCTransitionMoveInR	access:public	signature:(float t, CCScene* scene)
CCTransitionMoveInR::initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInR::initScenes()$/;"	f	class:CCTransitionMoveInR	signature:()
CCTransitionMoveInR::initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes();$/;"	p	class:CCTransitionMoveInR	access:public	signature:()
CCTransitionMoveInR::~CCTransitionMoveInR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInR::~CCTransitionMoveInR()$/;"	f	class:CCTransitionMoveInR	signature:()
CCTransitionMoveInR::~CCTransitionMoveInR	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionMoveInR();$/;"	p	class:CCTransitionMoveInR	access:public	signature:()
CCTransitionMoveInT	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInT::CCTransitionMoveInT()$/;"	f	class:CCTransitionMoveInT	signature:()
CCTransitionMoveInT	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionMoveInT();$/;"	p	class:CCTransitionMoveInT	access:public	signature:()
CCTransitionMoveInT	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionMoveInT : public CCTransitionMoveInL $/;"	c	inherits:CCTransitionMoveInL
CCTransitionMoveInT::CCTransitionMoveInT	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInT::CCTransitionMoveInT()$/;"	f	class:CCTransitionMoveInT	signature:()
CCTransitionMoveInT::CCTransitionMoveInT	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionMoveInT();$/;"	p	class:CCTransitionMoveInT	access:public	signature:()
CCTransitionMoveInT::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInT* CCTransitionMoveInT::create(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInT	signature:(float t, CCScene* scene)
CCTransitionMoveInT::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionMoveInT* create(float t, CCScene* scene);$/;"	p	class:CCTransitionMoveInT	access:public	signature:(float t, CCScene* scene)
CCTransitionMoveInT::initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInT::initScenes()$/;"	f	class:CCTransitionMoveInT	signature:()
CCTransitionMoveInT::initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes();$/;"	p	class:CCTransitionMoveInT	access:public	signature:()
CCTransitionMoveInT::~CCTransitionMoveInT	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInT::~CCTransitionMoveInT()$/;"	f	class:CCTransitionMoveInT	signature:()
CCTransitionMoveInT::~CCTransitionMoveInT	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionMoveInT();$/;"	p	class:CCTransitionMoveInT	access:public	signature:()
CCTransitionPageTurn	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCTransitionPageTurn::CCTransitionPageTurn()$/;"	f	class:CCTransitionPageTurn	signature:()
CCTransitionPageTurn	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    CCTransitionPageTurn();$/;"	p	class:CCTransitionPageTurn	access:public	signature:()
CCTransitionPageTurn	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^class CC_DLL CCTransitionPageTurn : public CCTransitionScene$/;"	c	inherits:CCTransitionScene
CCTransitionPageTurn::CCTransitionPageTurn	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCTransitionPageTurn::CCTransitionPageTurn()$/;"	f	class:CCTransitionPageTurn	signature:()
CCTransitionPageTurn::CCTransitionPageTurn	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    CCTransitionPageTurn();$/;"	p	class:CCTransitionPageTurn	access:public	signature:()
CCTransitionPageTurn::actionWithSize	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCActionInterval* CCTransitionPageTurn:: actionWithSize(const CCSize& vector)$/;"	f	class:CCTransitionPageTurn	signature:(const CCSize& vector)
CCTransitionPageTurn::actionWithSize	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    CCActionInterval* actionWithSize(const CCSize& vector);$/;"	p	class:CCTransitionPageTurn	access:public	signature:(const CCSize& vector)
CCTransitionPageTurn::create	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCTransitionPageTurn * CCTransitionPageTurn::create(float t, CCScene *scene, bool backwards)$/;"	f	class:CCTransitionPageTurn	signature:(float t, CCScene *scene, bool backwards)
CCTransitionPageTurn::create	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    static CCTransitionPageTurn* create(float t,CCScene* scene,bool backwards);$/;"	p	class:CCTransitionPageTurn	access:public	signature:(float t,CCScene* scene,bool backwards)
CCTransitionPageTurn::initWithDuration	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^bool CCTransitionPageTurn::initWithDuration(float t, CCScene *scene, bool backwards)$/;"	f	class:CCTransitionPageTurn	signature:(float t, CCScene *scene, bool backwards)
CCTransitionPageTurn::initWithDuration	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    virtual bool initWithDuration(float t,CCScene* scene,bool backwards);$/;"	p	class:CCTransitionPageTurn	access:public	signature:(float t,CCScene* scene,bool backwards)
CCTransitionPageTurn::m_bBack	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    bool    m_bBack;$/;"	m	class:CCTransitionPageTurn	access:protected
CCTransitionPageTurn::onEnter	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^void CCTransitionPageTurn::onEnter()$/;"	f	class:CCTransitionPageTurn	signature:()
CCTransitionPageTurn::onEnter	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionPageTurn	access:public	signature:()
CCTransitionPageTurn::sceneOrder	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^void CCTransitionPageTurn::sceneOrder()$/;"	f	class:CCTransitionPageTurn	signature:()
CCTransitionPageTurn::sceneOrder	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionPageTurn	access:protected	signature:()
CCTransitionPageTurn::~CCTransitionPageTurn	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCTransitionPageTurn::~CCTransitionPageTurn()$/;"	f	class:CCTransitionPageTurn	signature:()
CCTransitionPageTurn::~CCTransitionPageTurn	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    virtual ~CCTransitionPageTurn();$/;"	p	class:CCTransitionPageTurn	access:public	signature:()
CCTransitionProgress	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgress::CCTransitionProgress()$/;"	f	class:CCTransitionProgress	signature:()
CCTransitionProgress	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    CCTransitionProgress();$/;"	p	class:CCTransitionProgress	access:public	signature:()
CCTransitionProgress	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgress : public CCTransitionScene$/;"	c	inherits:CCTransitionScene
CCTransitionProgress::CCTransitionProgress	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgress::CCTransitionProgress()$/;"	f	class:CCTransitionProgress	signature:()
CCTransitionProgress::CCTransitionProgress	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    CCTransitionProgress();$/;"	p	class:CCTransitionProgress	access:public	signature:()
CCTransitionProgress::create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgress* CCTransitionProgress::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgress	signature:(float t, CCScene* scene)
CCTransitionProgress::create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgress* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgress	access:public	signature:(float t, CCScene* scene)
CCTransitionProgress::m_fFrom	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    float m_fFrom;$/;"	m	class:CCTransitionProgress	access:protected
CCTransitionProgress::m_fTo	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    float m_fTo;$/;"	m	class:CCTransitionProgress	access:protected
CCTransitionProgress::m_pSceneToBeModified	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    CCScene* m_pSceneToBeModified;$/;"	m	class:CCTransitionProgress	access:protected
CCTransitionProgress::onEnter	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgress::onEnter()$/;"	f	class:CCTransitionProgress	signature:()
CCTransitionProgress::onEnter	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionProgress	access:public	signature:()
CCTransitionProgress::onExit	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgress::onExit()$/;"	f	class:CCTransitionProgress	signature:()
CCTransitionProgress::onExit	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual void onExit();$/;"	p	class:CCTransitionProgress	access:public	signature:()
CCTransitionProgress::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgress::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgress	signature:(CCRenderTexture* texture)
CCTransitionProgress::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgress	access:protected	signature:(CCRenderTexture* texture)
CCTransitionProgress::sceneOrder	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgress::sceneOrder()$/;"	f	class:CCTransitionProgress	signature:()
CCTransitionProgress::sceneOrder	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionProgress	access:protected	signature:()
CCTransitionProgress::setupTransition	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgress::setupTransition()$/;"	f	class:CCTransitionProgress	signature:()
CCTransitionProgress::setupTransition	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual void setupTransition();$/;"	p	class:CCTransitionProgress	access:protected	signature:()
CCTransitionProgressHorizontal	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgressHorizontal : public CCTransitionProgress$/;"	c	inherits:CCTransitionProgress
CCTransitionProgressHorizontal::create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressHorizontal* CCTransitionProgressHorizontal::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressHorizontal	signature:(float t, CCScene* scene)
CCTransitionProgressHorizontal::create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgressHorizontal* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgressHorizontal	access:public	signature:(float t, CCScene* scene)
CCTransitionProgressHorizontal::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressHorizontal::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressHorizontal	signature:(CCRenderTexture* texture)
CCTransitionProgressHorizontal::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgressHorizontal	access:protected	signature:(CCRenderTexture* texture)
CCTransitionProgressInOut	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgressInOut : public CCTransitionProgress$/;"	c	inherits:CCTransitionProgress
CCTransitionProgressInOut::create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressInOut* CCTransitionProgressInOut::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressInOut	signature:(float t, CCScene* scene)
CCTransitionProgressInOut::create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgressInOut* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgressInOut	access:public	signature:(float t, CCScene* scene)
CCTransitionProgressInOut::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressInOut::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressInOut	signature:(CCRenderTexture* texture)
CCTransitionProgressInOut::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgressInOut	access:protected	signature:(CCRenderTexture* texture)
CCTransitionProgressInOut::sceneOrder	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgressInOut::sceneOrder()$/;"	f	class:CCTransitionProgressInOut	signature:()
CCTransitionProgressInOut::sceneOrder	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionProgressInOut	access:protected	signature:()
CCTransitionProgressInOut::setupTransition	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgressInOut::setupTransition()$/;"	f	class:CCTransitionProgressInOut	signature:()
CCTransitionProgressInOut::setupTransition	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual void setupTransition();$/;"	p	class:CCTransitionProgressInOut	access:protected	signature:()
CCTransitionProgressOutIn	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgressOutIn : public CCTransitionProgress$/;"	c	inherits:CCTransitionProgress
CCTransitionProgressOutIn::create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressOutIn* CCTransitionProgressOutIn::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressOutIn	signature:(float t, CCScene* scene)
CCTransitionProgressOutIn::create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgressOutIn* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgressOutIn	access:public	signature:(float t, CCScene* scene)
CCTransitionProgressOutIn::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressOutIn::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressOutIn	signature:(CCRenderTexture* texture)
CCTransitionProgressOutIn::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgressOutIn	access:protected	signature:(CCRenderTexture* texture)
CCTransitionProgressRadialCCW	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgressRadialCCW : public CCTransitionProgress$/;"	c	inherits:CCTransitionProgress
CCTransitionProgressRadialCCW::create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressRadialCCW* CCTransitionProgressRadialCCW::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressRadialCCW	signature:(float t, CCScene* scene)
CCTransitionProgressRadialCCW::create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgressRadialCCW* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgressRadialCCW	access:public	signature:(float t, CCScene* scene)
CCTransitionProgressRadialCCW::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressRadialCCW::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressRadialCCW	signature:(CCRenderTexture* texture)
CCTransitionProgressRadialCCW::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgressRadialCCW	access:protected	signature:(CCRenderTexture* texture)
CCTransitionProgressRadialCW	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgressRadialCW : public CCTransitionProgress$/;"	c	inherits:CCTransitionProgress
CCTransitionProgressRadialCW::create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressRadialCW* CCTransitionProgressRadialCW::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressRadialCW	signature:(float t, CCScene* scene)
CCTransitionProgressRadialCW::create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgressRadialCW* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgressRadialCW	access:public	signature:(float t, CCScene* scene)
CCTransitionProgressRadialCW::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressRadialCW::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressRadialCW	signature:(CCRenderTexture* texture)
CCTransitionProgressRadialCW::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgressRadialCW	access:protected	signature:(CCRenderTexture* texture)
CCTransitionProgressVertical	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgressVertical : public CCTransitionProgress$/;"	c	inherits:CCTransitionProgress
CCTransitionProgressVertical::create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressVertical* CCTransitionProgressVertical::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressVertical	signature:(float t, CCScene* scene)
CCTransitionProgressVertical::create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgressVertical* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgressVertical	access:public	signature:(float t, CCScene* scene)
CCTransitionProgressVertical::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressVertical::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressVertical	signature:(CCRenderTexture* texture)
CCTransitionProgressVertical::progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgressVertical	access:protected	signature:(CCRenderTexture* texture)
CCTransitionRotoZoom	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionRotoZoom::CCTransitionRotoZoom()$/;"	f	class:CCTransitionRotoZoom	signature:()
CCTransitionRotoZoom	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionRotoZoom();$/;"	p	class:CCTransitionRotoZoom	access:public	signature:()
CCTransitionRotoZoom	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionRotoZoom : public CCTransitionScene$/;"	c	inherits:CCTransitionScene
CCTransitionRotoZoom::CCTransitionRotoZoom	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionRotoZoom::CCTransitionRotoZoom()$/;"	f	class:CCTransitionRotoZoom	signature:()
CCTransitionRotoZoom::CCTransitionRotoZoom	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionRotoZoom();$/;"	p	class:CCTransitionRotoZoom	access:public	signature:()
CCTransitionRotoZoom::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionRotoZoom* CCTransitionRotoZoom::create(float t, CCScene* scene)                   $/;"	f	class:CCTransitionRotoZoom	signature:(float t, CCScene* scene)
CCTransitionRotoZoom::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionRotoZoom* create(float t, CCScene* scene);$/;"	p	class:CCTransitionRotoZoom	access:public	signature:(float t, CCScene* scene)
CCTransitionRotoZoom::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionRotoZoom:: onEnter()$/;"	f	class:CCTransitionRotoZoom	signature:()
CCTransitionRotoZoom::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionRotoZoom	access:public	signature:()
CCTransitionRotoZoom::~CCTransitionRotoZoom	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionRotoZoom::~CCTransitionRotoZoom()$/;"	f	class:CCTransitionRotoZoom	signature:()
CCTransitionRotoZoom::~CCTransitionRotoZoom	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionRotoZoom();$/;"	p	class:CCTransitionRotoZoom	access:public	signature:()
CCTransitionScene	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionScene::CCTransitionScene()$/;"	f	class:CCTransitionScene	signature:()
CCTransitionScene	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionScene();$/;"	p	class:CCTransitionScene	access:public	signature:()
CCTransitionScene	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionScene : public CCScene$/;"	c	inherits:CCScene
CCTransitionScene::CCTransitionScene	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionScene::CCTransitionScene()$/;"	f	class:CCTransitionScene	signature:()
CCTransitionScene::CCTransitionScene	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionScene();$/;"	p	class:CCTransitionScene	access:public	signature:()
CCTransitionScene::cleanup	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::cleanup()$/;"	f	class:CCTransitionScene	signature:()
CCTransitionScene::cleanup	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void cleanup();$/;"	p	class:CCTransitionScene	access:public	signature:()
CCTransitionScene::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionScene * CCTransitionScene::create(float t, CCScene *scene)$/;"	f	class:CCTransitionScene	signature:(float t, CCScene *scene)
CCTransitionScene::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionScene * create(float t, CCScene *scene);$/;"	p	class:CCTransitionScene	access:public	signature:(float t, CCScene *scene)
CCTransitionScene::draw	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::draw()$/;"	f	class:CCTransitionScene	signature:()
CCTransitionScene::draw	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void draw();$/;"	p	class:CCTransitionScene	access:public	signature:()
CCTransitionScene::finish	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::finish()$/;"	f	class:CCTransitionScene	signature:()
CCTransitionScene::finish	layers_scenes_transitions_nodes/CCTransition.h	/^    void finish(void);$/;"	p	class:CCTransitionScene	access:public	signature:(void)
CCTransitionScene::hideOutShowIn	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::hideOutShowIn()$/;"	f	class:CCTransitionScene	signature:()
CCTransitionScene::hideOutShowIn	layers_scenes_transitions_nodes/CCTransition.h	/^    void hideOutShowIn(void);$/;"	p	class:CCTransitionScene	access:public	signature:(void)
CCTransitionScene::initWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^bool CCTransitionScene::initWithDuration(float t, CCScene *scene)$/;"	f	class:CCTransitionScene	signature:(float t, CCScene *scene)
CCTransitionScene::initWithDuration	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual bool initWithDuration(float t,CCScene* scene);$/;"	p	class:CCTransitionScene	access:public	signature:(float t,CCScene* scene)
CCTransitionScene::m_bIsInSceneOnTop	layers_scenes_transitions_nodes/CCTransition.h	/^    bool    m_bIsInSceneOnTop;$/;"	m	class:CCTransitionScene	access:protected
CCTransitionScene::m_bIsSendCleanupToScene	layers_scenes_transitions_nodes/CCTransition.h	/^    bool    m_bIsSendCleanupToScene;$/;"	m	class:CCTransitionScene	access:protected
CCTransitionScene::m_fDuration	layers_scenes_transitions_nodes/CCTransition.h	/^    float    m_fDuration;$/;"	m	class:CCTransitionScene	access:protected
CCTransitionScene::m_pInScene	layers_scenes_transitions_nodes/CCTransition.h	/^    CCScene    * m_pInScene;$/;"	m	class:CCTransitionScene	access:protected
CCTransitionScene::m_pOutScene	layers_scenes_transitions_nodes/CCTransition.h	/^    CCScene    * m_pOutScene;$/;"	m	class:CCTransitionScene	access:protected
CCTransitionScene::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::onEnter()$/;"	f	class:CCTransitionScene	signature:()
CCTransitionScene::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionScene	access:public	signature:()
CCTransitionScene::onExit	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::onExit()$/;"	f	class:CCTransitionScene	signature:()
CCTransitionScene::onExit	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onExit();$/;"	p	class:CCTransitionScene	access:public	signature:()
CCTransitionScene::sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::sceneOrder()$/;"	f	class:CCTransitionScene	signature:()
CCTransitionScene::sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionScene	access:protected	signature:()
CCTransitionScene::setNewScene	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::setNewScene(float dt)$/;"	f	class:CCTransitionScene	signature:(float dt)
CCTransitionScene::setNewScene	layers_scenes_transitions_nodes/CCTransition.h	/^    void setNewScene(float dt);$/;"	p	class:CCTransitionScene	access:private	signature:(float dt)
CCTransitionScene::~CCTransitionScene	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionScene::~CCTransitionScene()$/;"	f	class:CCTransitionScene	signature:()
CCTransitionScene::~CCTransitionScene	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionScene();$/;"	p	class:CCTransitionScene	access:public	signature:()
CCTransitionSceneOriented	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSceneOriented::CCTransitionSceneOriented()$/;"	f	class:CCTransitionSceneOriented	signature:()
CCTransitionSceneOriented	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSceneOriented();$/;"	p	class:CCTransitionSceneOriented	access:public	signature:()
CCTransitionSceneOriented	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSceneOriented : public CCTransitionScene$/;"	c	inherits:CCTransitionScene
CCTransitionSceneOriented::CCTransitionSceneOriented	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSceneOriented::CCTransitionSceneOriented()$/;"	f	class:CCTransitionSceneOriented	signature:()
CCTransitionSceneOriented::CCTransitionSceneOriented	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSceneOriented();$/;"	p	class:CCTransitionSceneOriented	access:public	signature:()
CCTransitionSceneOriented::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSceneOriented * CCTransitionSceneOriented::create(float t, CCScene *scene, tOrientation orientation)$/;"	f	class:CCTransitionSceneOriented	signature:(float t, CCScene *scene, tOrientation orientation)
CCTransitionSceneOriented::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSceneOriented * create(float t,CCScene* scene, tOrientation orientation);$/;"	p	class:CCTransitionSceneOriented	access:public	signature:(float t,CCScene* scene, tOrientation orientation)
CCTransitionSceneOriented::initWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^bool CCTransitionSceneOriented::initWithDuration(float t, CCScene *scene, tOrientation orientation)$/;"	f	class:CCTransitionSceneOriented	signature:(float t, CCScene *scene, tOrientation orientation)
CCTransitionSceneOriented::initWithDuration	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual bool initWithDuration(float t,CCScene* scene,tOrientation orientation);$/;"	p	class:CCTransitionSceneOriented	access:public	signature:(float t,CCScene* scene,tOrientation orientation)
CCTransitionSceneOriented::m_eOrientation	layers_scenes_transitions_nodes/CCTransition.h	/^    tOrientation m_eOrientation;$/;"	m	class:CCTransitionSceneOriented	access:protected
CCTransitionSceneOriented::~CCTransitionSceneOriented	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSceneOriented::~CCTransitionSceneOriented()$/;"	f	class:CCTransitionSceneOriented	signature:()
CCTransitionSceneOriented::~CCTransitionSceneOriented	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSceneOriented();$/;"	p	class:CCTransitionSceneOriented	access:public	signature:()
CCTransitionShrinkGrow	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionShrinkGrow::CCTransitionShrinkGrow()$/;"	f	class:CCTransitionShrinkGrow	signature:()
CCTransitionShrinkGrow	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionShrinkGrow();$/;"	p	class:CCTransitionShrinkGrow	access:public	signature:()
CCTransitionShrinkGrow	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionShrinkGrow : public CCTransitionScene , public CCTransitionEaseScene$/;"	c	inherits:CCTransitionScene,CCTransitionEaseScene
CCTransitionShrinkGrow::CCTransitionShrinkGrow	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionShrinkGrow::CCTransitionShrinkGrow()$/;"	f	class:CCTransitionShrinkGrow	signature:()
CCTransitionShrinkGrow::CCTransitionShrinkGrow	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionShrinkGrow();$/;"	p	class:CCTransitionShrinkGrow	access:public	signature:()
CCTransitionShrinkGrow::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionShrinkGrow* CCTransitionShrinkGrow::create(float t, CCScene* scene)$/;"	f	class:CCTransitionShrinkGrow	signature:(float t, CCScene* scene)
CCTransitionShrinkGrow::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionShrinkGrow* create(float t, CCScene* scene);$/;"	p	class:CCTransitionShrinkGrow	access:public	signature:(float t, CCScene* scene)
CCTransitionShrinkGrow::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionShrinkGrow:: easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionShrinkGrow	signature:(CCActionInterval* action)
CCTransitionShrinkGrow::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* easeActionWithAction(CCActionInterval * action);$/;"	p	class:CCTransitionShrinkGrow	access:public	signature:(CCActionInterval * action)
CCTransitionShrinkGrow::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionShrinkGrow::onEnter()$/;"	f	class:CCTransitionShrinkGrow	signature:()
CCTransitionShrinkGrow::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionShrinkGrow	access:public	signature:()
CCTransitionShrinkGrow::~CCTransitionShrinkGrow	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionShrinkGrow::~CCTransitionShrinkGrow()$/;"	f	class:CCTransitionShrinkGrow	signature:()
CCTransitionShrinkGrow::~CCTransitionShrinkGrow	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionShrinkGrow();$/;"	p	class:CCTransitionShrinkGrow	access:public	signature:()
CCTransitionSlideInB	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInB::CCTransitionSlideInB()$/;"	f	class:CCTransitionSlideInB	signature:()
CCTransitionSlideInB	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSlideInB();$/;"	p	class:CCTransitionSlideInB	access:public	signature:()
CCTransitionSlideInB	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSlideInB : public CCTransitionSlideInL$/;"	c	inherits:CCTransitionSlideInL
CCTransitionSlideInB::CCTransitionSlideInB	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInB::CCTransitionSlideInB()$/;"	f	class:CCTransitionSlideInB	signature:()
CCTransitionSlideInB::CCTransitionSlideInB	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSlideInB();$/;"	p	class:CCTransitionSlideInB	access:public	signature:()
CCTransitionSlideInB::action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInB:: action()$/;"	f	class:CCTransitionSlideInB	signature:()
CCTransitionSlideInB::action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionSlideInB	access:public	signature:(void)
CCTransitionSlideInB::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInB* CCTransitionSlideInB::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInB	signature:(float t, CCScene* scene)
CCTransitionSlideInB::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSlideInB* create(float t, CCScene* scene);$/;"	p	class:CCTransitionSlideInB	access:public	signature:(float t, CCScene* scene)
CCTransitionSlideInB::initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInB:: initScenes()$/;"	f	class:CCTransitionSlideInB	signature:()
CCTransitionSlideInB::initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes(void);$/;"	p	class:CCTransitionSlideInB	access:public	signature:(void)
CCTransitionSlideInB::sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInB::sceneOrder()$/;"	f	class:CCTransitionSlideInB	signature:()
CCTransitionSlideInB::sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionSlideInB	access:protected	signature:()
CCTransitionSlideInB::~CCTransitionSlideInB	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInB::~CCTransitionSlideInB()$/;"	f	class:CCTransitionSlideInB	signature:()
CCTransitionSlideInB::~CCTransitionSlideInB	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSlideInB();$/;"	p	class:CCTransitionSlideInB	access:public	signature:()
CCTransitionSlideInL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInL::CCTransitionSlideInL()$/;"	f	class:CCTransitionSlideInL	signature:()
CCTransitionSlideInL	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSlideInL();$/;"	p	class:CCTransitionSlideInL	access:public	signature:()
CCTransitionSlideInL	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSlideInL : public CCTransitionScene, public CCTransitionEaseScene$/;"	c	inherits:CCTransitionScene,CCTransitionEaseScene
CCTransitionSlideInL::CCTransitionSlideInL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInL::CCTransitionSlideInL()$/;"	f	class:CCTransitionSlideInL	signature:()
CCTransitionSlideInL::CCTransitionSlideInL	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSlideInL();$/;"	p	class:CCTransitionSlideInL	access:public	signature:()
CCTransitionSlideInL::action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInL::action()$/;"	f	class:CCTransitionSlideInL	signature:()
CCTransitionSlideInL::action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionSlideInL	access:public	signature:(void)
CCTransitionSlideInL::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInL* CCTransitionSlideInL::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInL	signature:(float t, CCScene* scene)
CCTransitionSlideInL::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSlideInL* create(float t, CCScene* scene);$/;"	p	class:CCTransitionSlideInL	access:public	signature:(float t, CCScene* scene)
CCTransitionSlideInL::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInL::easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionSlideInL	signature:(CCActionInterval* action)
CCTransitionSlideInL::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* easeActionWithAction(CCActionInterval * action);$/;"	p	class:CCTransitionSlideInL	access:public	signature:(CCActionInterval * action)
CCTransitionSlideInL::initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInL:: initScenes()$/;"	f	class:CCTransitionSlideInL	signature:()
CCTransitionSlideInL::initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes(void);$/;"	p	class:CCTransitionSlideInL	access:public	signature:(void)
CCTransitionSlideInL::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInL::onEnter()$/;"	f	class:CCTransitionSlideInL	signature:()
CCTransitionSlideInL::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionSlideInL	access:public	signature:()
CCTransitionSlideInL::sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInL::sceneOrder()$/;"	f	class:CCTransitionSlideInL	signature:()
CCTransitionSlideInL::sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionSlideInL	access:protected	signature:()
CCTransitionSlideInL::~CCTransitionSlideInL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInL::~CCTransitionSlideInL()$/;"	f	class:CCTransitionSlideInL	signature:()
CCTransitionSlideInL::~CCTransitionSlideInL	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSlideInL();$/;"	p	class:CCTransitionSlideInL	access:public	signature:()
CCTransitionSlideInR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInR::CCTransitionSlideInR()$/;"	f	class:CCTransitionSlideInR	signature:()
CCTransitionSlideInR	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSlideInR();$/;"	p	class:CCTransitionSlideInR	access:public	signature:()
CCTransitionSlideInR	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSlideInR : public CCTransitionSlideInL $/;"	c	inherits:CCTransitionSlideInL
CCTransitionSlideInR::CCTransitionSlideInR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInR::CCTransitionSlideInR()$/;"	f	class:CCTransitionSlideInR	signature:()
CCTransitionSlideInR::CCTransitionSlideInR	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSlideInR();$/;"	p	class:CCTransitionSlideInR	access:public	signature:()
CCTransitionSlideInR::action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInR:: action()$/;"	f	class:CCTransitionSlideInR	signature:()
CCTransitionSlideInR::action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionSlideInR	access:public	signature:(void)
CCTransitionSlideInR::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInR* CCTransitionSlideInR::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInR	signature:(float t, CCScene* scene)
CCTransitionSlideInR::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSlideInR* create(float t, CCScene* scene);$/;"	p	class:CCTransitionSlideInR	access:public	signature:(float t, CCScene* scene)
CCTransitionSlideInR::initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInR::initScenes()$/;"	f	class:CCTransitionSlideInR	signature:()
CCTransitionSlideInR::initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes(void);$/;"	p	class:CCTransitionSlideInR	access:public	signature:(void)
CCTransitionSlideInR::sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInR::sceneOrder()$/;"	f	class:CCTransitionSlideInR	signature:()
CCTransitionSlideInR::sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionSlideInR	access:protected	signature:()
CCTransitionSlideInR::~CCTransitionSlideInR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInR::~CCTransitionSlideInR()$/;"	f	class:CCTransitionSlideInR	signature:()
CCTransitionSlideInR::~CCTransitionSlideInR	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSlideInR();$/;"	p	class:CCTransitionSlideInR	access:public	signature:()
CCTransitionSlideInT	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInT::CCTransitionSlideInT()$/;"	f	class:CCTransitionSlideInT	signature:()
CCTransitionSlideInT	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSlideInT();$/;"	p	class:CCTransitionSlideInT	access:public	signature:()
CCTransitionSlideInT	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSlideInT : public CCTransitionSlideInL$/;"	c	inherits:CCTransitionSlideInL
CCTransitionSlideInT::CCTransitionSlideInT	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInT::CCTransitionSlideInT()$/;"	f	class:CCTransitionSlideInT	signature:()
CCTransitionSlideInT::CCTransitionSlideInT	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSlideInT();$/;"	p	class:CCTransitionSlideInT	access:public	signature:()
CCTransitionSlideInT::action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInT::action()$/;"	f	class:CCTransitionSlideInT	signature:()
CCTransitionSlideInT::action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionSlideInT	access:public	signature:(void)
CCTransitionSlideInT::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInT* CCTransitionSlideInT::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInT	signature:(float t, CCScene* scene)
CCTransitionSlideInT::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSlideInT* create(float t, CCScene* scene);$/;"	p	class:CCTransitionSlideInT	access:public	signature:(float t, CCScene* scene)
CCTransitionSlideInT::initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInT::initScenes()$/;"	f	class:CCTransitionSlideInT	signature:()
CCTransitionSlideInT::initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes(void);$/;"	p	class:CCTransitionSlideInT	access:public	signature:(void)
CCTransitionSlideInT::sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInT::sceneOrder()$/;"	f	class:CCTransitionSlideInT	signature:()
CCTransitionSlideInT::sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionSlideInT	access:protected	signature:()
CCTransitionSlideInT::~CCTransitionSlideInT	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInT::~CCTransitionSlideInT()$/;"	f	class:CCTransitionSlideInT	signature:()
CCTransitionSlideInT::~CCTransitionSlideInT	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSlideInT();$/;"	p	class:CCTransitionSlideInT	access:public	signature:()
CCTransitionSplitCols	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitCols::CCTransitionSplitCols()$/;"	f	class:CCTransitionSplitCols	signature:()
CCTransitionSplitCols	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSplitCols();$/;"	p	class:CCTransitionSplitCols	access:public	signature:()
CCTransitionSplitCols	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSplitCols : public CCTransitionScene , public CCTransitionEaseScene$/;"	c	inherits:CCTransitionScene,CCTransitionEaseScene
CCTransitionSplitCols::CCTransitionSplitCols	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitCols::CCTransitionSplitCols()$/;"	f	class:CCTransitionSplitCols	signature:()
CCTransitionSplitCols::CCTransitionSplitCols	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSplitCols();$/;"	p	class:CCTransitionSplitCols	access:public	signature:()
CCTransitionSplitCols::action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSplitCols:: action()$/;"	f	class:CCTransitionSplitCols	signature:()
CCTransitionSplitCols::action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionSplitCols	access:public	signature:(void)
CCTransitionSplitCols::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitCols* CCTransitionSplitCols::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSplitCols	signature:(float t, CCScene* scene)
CCTransitionSplitCols::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSplitCols* create(float t, CCScene* scene);$/;"	p	class:CCTransitionSplitCols	access:public	signature:(float t, CCScene* scene)
CCTransitionSplitCols::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSplitCols::easeActionWithAction(CCActionInterval * action)$/;"	f	class:CCTransitionSplitCols	signature:(CCActionInterval * action)
CCTransitionSplitCols::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval * easeActionWithAction(CCActionInterval * action);$/;"	p	class:CCTransitionSplitCols	access:public	signature:(CCActionInterval * action)
CCTransitionSplitCols::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSplitCols::onEnter()$/;"	f	class:CCTransitionSplitCols	signature:()
CCTransitionSplitCols::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionSplitCols	access:public	signature:()
CCTransitionSplitCols::~CCTransitionSplitCols	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitCols::~CCTransitionSplitCols()$/;"	f	class:CCTransitionSplitCols	signature:()
CCTransitionSplitCols::~CCTransitionSplitCols	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSplitCols();$/;"	p	class:CCTransitionSplitCols	access:public	signature:()
CCTransitionSplitRows	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitRows::CCTransitionSplitRows()$/;"	f	class:CCTransitionSplitRows	signature:()
CCTransitionSplitRows	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSplitRows();$/;"	p	class:CCTransitionSplitRows	access:public	signature:()
CCTransitionSplitRows	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSplitRows : public CCTransitionSplitCols$/;"	c	inherits:CCTransitionSplitCols
CCTransitionSplitRows::CCTransitionSplitRows	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitRows::CCTransitionSplitRows()$/;"	f	class:CCTransitionSplitRows	signature:()
CCTransitionSplitRows::CCTransitionSplitRows	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionSplitRows();$/;"	p	class:CCTransitionSplitRows	access:public	signature:()
CCTransitionSplitRows::action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSplitRows::action()$/;"	f	class:CCTransitionSplitRows	signature:()
CCTransitionSplitRows::action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionSplitRows	access:public	signature:(void)
CCTransitionSplitRows::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitRows* CCTransitionSplitRows::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSplitRows	signature:(float t, CCScene* scene)
CCTransitionSplitRows::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSplitRows* create(float t, CCScene* scene);$/;"	p	class:CCTransitionSplitRows	access:public	signature:(float t, CCScene* scene)
CCTransitionSplitRows::~CCTransitionSplitRows	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitRows::~CCTransitionSplitRows()$/;"	f	class:CCTransitionSplitRows	signature:()
CCTransitionSplitRows::~CCTransitionSplitRows	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSplitRows();$/;"	p	class:CCTransitionSplitRows	access:public	signature:()
CCTransitionTurnOffTiles	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionTurnOffTiles::CCTransitionTurnOffTiles()$/;"	f	class:CCTransitionTurnOffTiles	signature:()
CCTransitionTurnOffTiles	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionTurnOffTiles();$/;"	p	class:CCTransitionTurnOffTiles	access:public	signature:()
CCTransitionTurnOffTiles	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionTurnOffTiles : public CCTransitionScene ,public CCTransitionEaseScene$/;"	c	inherits:CCTransitionScene,CCTransitionEaseScene
CCTransitionTurnOffTiles::CCTransitionTurnOffTiles	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionTurnOffTiles::CCTransitionTurnOffTiles()$/;"	f	class:CCTransitionTurnOffTiles	signature:()
CCTransitionTurnOffTiles::CCTransitionTurnOffTiles	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionTurnOffTiles();$/;"	p	class:CCTransitionTurnOffTiles	access:public	signature:()
CCTransitionTurnOffTiles::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionTurnOffTiles* CCTransitionTurnOffTiles::create(float t, CCScene* scene)$/;"	f	class:CCTransitionTurnOffTiles	signature:(float t, CCScene* scene)
CCTransitionTurnOffTiles::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionTurnOffTiles* create(float t, CCScene* scene);$/;"	p	class:CCTransitionTurnOffTiles	access:public	signature:(float t, CCScene* scene)
CCTransitionTurnOffTiles::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionTurnOffTiles:: easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionTurnOffTiles	signature:(CCActionInterval* action)
CCTransitionTurnOffTiles::easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval * easeActionWithAction(CCActionInterval * action);$/;"	p	class:CCTransitionTurnOffTiles	access:public	signature:(CCActionInterval * action)
CCTransitionTurnOffTiles::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionTurnOffTiles::onEnter()$/;"	f	class:CCTransitionTurnOffTiles	signature:()
CCTransitionTurnOffTiles::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionTurnOffTiles	access:public	signature:()
CCTransitionTurnOffTiles::sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionTurnOffTiles::sceneOrder()$/;"	f	class:CCTransitionTurnOffTiles	signature:()
CCTransitionTurnOffTiles::sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionTurnOffTiles	access:protected	signature:()
CCTransitionTurnOffTiles::~CCTransitionTurnOffTiles	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionTurnOffTiles::~CCTransitionTurnOffTiles()$/;"	f	class:CCTransitionTurnOffTiles	signature:()
CCTransitionTurnOffTiles::~CCTransitionTurnOffTiles	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionTurnOffTiles();$/;"	p	class:CCTransitionTurnOffTiles	access:public	signature:()
CCTransitionZoomFlipAngular	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular::CCTransitionZoomFlipAngular()$/;"	f	class:CCTransitionZoomFlipAngular	signature:()
CCTransitionZoomFlipAngular	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionZoomFlipAngular();$/;"	p	class:CCTransitionZoomFlipAngular	access:public	signature:()
CCTransitionZoomFlipAngular	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionZoomFlipAngular : public CCTransitionSceneOriented$/;"	c	inherits:CCTransitionSceneOriented
CCTransitionZoomFlipAngular::CCTransitionZoomFlipAngular	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular::CCTransitionZoomFlipAngular()$/;"	f	class:CCTransitionZoomFlipAngular	signature:()
CCTransitionZoomFlipAngular::CCTransitionZoomFlipAngular	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionZoomFlipAngular();$/;"	p	class:CCTransitionZoomFlipAngular	access:public	signature:()
CCTransitionZoomFlipAngular::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular* CCTransitionZoomFlipAngular::create(float t, CCScene* s)$/;"	f	class:CCTransitionZoomFlipAngular	signature:(float t, CCScene* s)
CCTransitionZoomFlipAngular::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular* CCTransitionZoomFlipAngular::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionZoomFlipAngular	signature:(float t, CCScene* s, tOrientation o)
CCTransitionZoomFlipAngular::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionZoomFlipAngular* create(float t, CCScene* s);$/;"	p	class:CCTransitionZoomFlipAngular	access:public	signature:(float t, CCScene* s)
CCTransitionZoomFlipAngular::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionZoomFlipAngular* create(float t, CCScene* s, tOrientation o);$/;"	p	class:CCTransitionZoomFlipAngular	access:public	signature:(float t, CCScene* s, tOrientation o)
CCTransitionZoomFlipAngular::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionZoomFlipAngular::onEnter()$/;"	f	class:CCTransitionZoomFlipAngular	signature:()
CCTransitionZoomFlipAngular::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionZoomFlipAngular	access:public	signature:()
CCTransitionZoomFlipAngular::~CCTransitionZoomFlipAngular	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular::~CCTransitionZoomFlipAngular()$/;"	f	class:CCTransitionZoomFlipAngular	signature:()
CCTransitionZoomFlipAngular::~CCTransitionZoomFlipAngular	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionZoomFlipAngular();$/;"	p	class:CCTransitionZoomFlipAngular	access:public	signature:()
CCTransitionZoomFlipX	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX::CCTransitionZoomFlipX()$/;"	f	class:CCTransitionZoomFlipX	signature:()
CCTransitionZoomFlipX	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionZoomFlipX();$/;"	p	class:CCTransitionZoomFlipX	access:public	signature:()
CCTransitionZoomFlipX	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionZoomFlipX : public CCTransitionSceneOriented$/;"	c	inherits:CCTransitionSceneOriented
CCTransitionZoomFlipX::CCTransitionZoomFlipX	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX::CCTransitionZoomFlipX()$/;"	f	class:CCTransitionZoomFlipX	signature:()
CCTransitionZoomFlipX::CCTransitionZoomFlipX	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionZoomFlipX();$/;"	p	class:CCTransitionZoomFlipX	access:public	signature:()
CCTransitionZoomFlipX::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX* CCTransitionZoomFlipX::create(float t, CCScene* s)$/;"	f	class:CCTransitionZoomFlipX	signature:(float t, CCScene* s)
CCTransitionZoomFlipX::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX* CCTransitionZoomFlipX::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionZoomFlipX	signature:(float t, CCScene* s, tOrientation o)
CCTransitionZoomFlipX::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionZoomFlipX* create(float t, CCScene* s);$/;"	p	class:CCTransitionZoomFlipX	access:public	signature:(float t, CCScene* s)
CCTransitionZoomFlipX::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionZoomFlipX* create(float t, CCScene* s, tOrientation o);$/;"	p	class:CCTransitionZoomFlipX	access:public	signature:(float t, CCScene* s, tOrientation o)
CCTransitionZoomFlipX::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionZoomFlipX::onEnter()$/;"	f	class:CCTransitionZoomFlipX	signature:()
CCTransitionZoomFlipX::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionZoomFlipX	access:public	signature:()
CCTransitionZoomFlipX::~CCTransitionZoomFlipX	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX::~CCTransitionZoomFlipX()$/;"	f	class:CCTransitionZoomFlipX	signature:()
CCTransitionZoomFlipX::~CCTransitionZoomFlipX	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionZoomFlipX();$/;"	p	class:CCTransitionZoomFlipX	access:public	signature:()
CCTransitionZoomFlipY	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY::CCTransitionZoomFlipY()$/;"	f	class:CCTransitionZoomFlipY	signature:()
CCTransitionZoomFlipY	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionZoomFlipY();$/;"	p	class:CCTransitionZoomFlipY	access:public	signature:()
CCTransitionZoomFlipY	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionZoomFlipY : public CCTransitionSceneOriented$/;"	c	inherits:CCTransitionSceneOriented
CCTransitionZoomFlipY::CCTransitionZoomFlipY	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY::CCTransitionZoomFlipY()$/;"	f	class:CCTransitionZoomFlipY	signature:()
CCTransitionZoomFlipY::CCTransitionZoomFlipY	layers_scenes_transitions_nodes/CCTransition.h	/^    CCTransitionZoomFlipY();$/;"	p	class:CCTransitionZoomFlipY	access:public	signature:()
CCTransitionZoomFlipY::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY* CCTransitionZoomFlipY::create(float t, CCScene* s)$/;"	f	class:CCTransitionZoomFlipY	signature:(float t, CCScene* s)
CCTransitionZoomFlipY::create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY* CCTransitionZoomFlipY::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionZoomFlipY	signature:(float t, CCScene* s, tOrientation o)
CCTransitionZoomFlipY::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionZoomFlipY* create(float t, CCScene* s);$/;"	p	class:CCTransitionZoomFlipY	access:public	signature:(float t, CCScene* s)
CCTransitionZoomFlipY::create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionZoomFlipY* create(float t, CCScene* s, tOrientation o);$/;"	p	class:CCTransitionZoomFlipY	access:public	signature:(float t, CCScene* s, tOrientation o)
CCTransitionZoomFlipY::onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionZoomFlipY::onEnter()$/;"	f	class:CCTransitionZoomFlipY	signature:()
CCTransitionZoomFlipY::onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionZoomFlipY	access:public	signature:()
CCTransitionZoomFlipY::~CCTransitionZoomFlipY	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY::~CCTransitionZoomFlipY()$/;"	f	class:CCTransitionZoomFlipY	signature:()
CCTransitionZoomFlipY::~CCTransitionZoomFlipY	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionZoomFlipY();$/;"	p	class:CCTransitionZoomFlipY	access:public	signature:()
CCTurnOffTiles	actions/CCActionTiledGrid.h	/^class CC_DLL CCTurnOffTiles : public CCTiledGrid3DAction$/;"	c	inherits:CCTiledGrid3DAction
CCTurnOffTiles::copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCTurnOffTiles::copyWithZone(CCZone *pZone)$/;"	f	class:CCTurnOffTiles	signature:(CCZone *pZone)
CCTurnOffTiles::copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCTurnOffTiles	access:public	signature:(CCZone* pZone)
CCTurnOffTiles::create	actions/CCActionTiledGrid.cpp	/^CCTurnOffTiles* CCTurnOffTiles::create(float duration, const CCSize& gridSize)$/;"	f	class:CCTurnOffTiles	signature:(float duration, const CCSize& gridSize)
CCTurnOffTiles::create	actions/CCActionTiledGrid.cpp	/^CCTurnOffTiles* CCTurnOffTiles::create(float duration, const CCSize& gridSize, unsigned int seed)$/;"	f	class:CCTurnOffTiles	signature:(float duration, const CCSize& gridSize, unsigned int seed)
CCTurnOffTiles::create	actions/CCActionTiledGrid.h	/^    static CCTurnOffTiles* create(float duration, const CCSize& gridSize);$/;"	p	class:CCTurnOffTiles	access:public	signature:(float duration, const CCSize& gridSize)
CCTurnOffTiles::create	actions/CCActionTiledGrid.h	/^    static CCTurnOffTiles* create(float duration, const CCSize& gridSize, unsigned int seed);$/;"	p	class:CCTurnOffTiles	access:public	signature:(float duration, const CCSize& gridSize, unsigned int seed)
CCTurnOffTiles::initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCTurnOffTiles::initWithDuration(float duration, const CCSize& gridSize, unsigned int seed)$/;"	f	class:CCTurnOffTiles	signature:(float duration, const CCSize& gridSize, unsigned int seed)
CCTurnOffTiles::initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, const CCSize& gridSize, unsigned int seed);$/;"	p	class:CCTurnOffTiles	access:public	signature:(float duration, const CCSize& gridSize, unsigned int seed)
CCTurnOffTiles::m_nSeed	actions/CCActionTiledGrid.h	/^    unsigned int    m_nSeed;$/;"	m	class:CCTurnOffTiles	access:protected
CCTurnOffTiles::m_nTilesCount	actions/CCActionTiledGrid.h	/^    unsigned int    m_nTilesCount;$/;"	m	class:CCTurnOffTiles	access:protected
CCTurnOffTiles::m_pTilesOrder	actions/CCActionTiledGrid.h	/^    unsigned int*   m_pTilesOrder;$/;"	m	class:CCTurnOffTiles	access:protected
CCTurnOffTiles::shuffle	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::shuffle(unsigned int *pArray, unsigned int nLen)$/;"	f	class:CCTurnOffTiles	signature:(unsigned int *pArray, unsigned int nLen)
CCTurnOffTiles::shuffle	actions/CCActionTiledGrid.h	/^    void shuffle(unsigned int *pArray, unsigned int nLen);$/;"	p	class:CCTurnOffTiles	access:public	signature:(unsigned int *pArray, unsigned int nLen)
CCTurnOffTiles::startWithTarget	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::startWithTarget(CCNode *pTarget)$/;"	f	class:CCTurnOffTiles	signature:(CCNode *pTarget)
CCTurnOffTiles::startWithTarget	actions/CCActionTiledGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCTurnOffTiles	access:public	signature:(CCNode *pTarget)
CCTurnOffTiles::turnOffTile	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::turnOffTile(const CCPoint& pos)$/;"	f	class:CCTurnOffTiles	signature:(const CCPoint& pos)
CCTurnOffTiles::turnOffTile	actions/CCActionTiledGrid.h	/^    void turnOffTile(const CCPoint& pos);$/;"	p	class:CCTurnOffTiles	access:public	signature:(const CCPoint& pos)
CCTurnOffTiles::turnOnTile	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::turnOnTile(const CCPoint& pos)$/;"	f	class:CCTurnOffTiles	signature:(const CCPoint& pos)
CCTurnOffTiles::turnOnTile	actions/CCActionTiledGrid.h	/^    void turnOnTile(const CCPoint& pos);$/;"	p	class:CCTurnOffTiles	access:public	signature:(const CCPoint& pos)
CCTurnOffTiles::update	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::update(float time)$/;"	f	class:CCTurnOffTiles	signature:(float time)
CCTurnOffTiles::update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCTurnOffTiles	access:public	signature:(float time)
CCTurnOffTiles::~CCTurnOffTiles	actions/CCActionTiledGrid.cpp	/^CCTurnOffTiles::~CCTurnOffTiles(void)$/;"	f	class:CCTurnOffTiles	signature:(void)
CCTurnOffTiles::~CCTurnOffTiles	actions/CCActionTiledGrid.h	/^    ~CCTurnOffTiles(void);$/;"	p	class:CCTurnOffTiles	access:public	signature:(void)
CCTwirl	actions/CCActionGrid3D.h	/^class CC_DLL CCTwirl : public CCGrid3DAction$/;"	c	inherits:CCGrid3DAction
CCTwirl::copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCTwirl::copyWithZone(CCZone *pZone)$/;"	f	class:CCTwirl	signature:(CCZone *pZone)
CCTwirl::copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCTwirl	access:public	signature:(CCZone* pZone)
CCTwirl::create	actions/CCActionGrid3D.cpp	/^CCTwirl* CCTwirl::create(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude)$/;"	f	class:CCTwirl	signature:(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude)
CCTwirl::create	actions/CCActionGrid3D.h	/^    static CCTwirl* create(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude);$/;"	p	class:CCTwirl	access:public	signature:(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude)
CCTwirl::getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCTwirl	access:public	signature:(void)
CCTwirl::getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCTwirl	access:public	signature:(void)
CCTwirl::getPosition	actions/CCActionGrid3D.h	/^    inline const CCPoint& getPosition(void) { return m_position; }$/;"	f	class:CCTwirl	access:public	signature:(void)
CCTwirl::initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCTwirl::initWithDuration(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude)$/;"	f	class:CCTwirl	signature:(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude)
CCTwirl::initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude);$/;"	p	class:CCTwirl	access:public	signature:(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude)
CCTwirl::m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCTwirl	access:protected
CCTwirl::m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCTwirl	access:protected
CCTwirl::m_nTwirls	actions/CCActionGrid3D.h	/^    unsigned int m_nTwirls;$/;"	m	class:CCTwirl	access:protected
CCTwirl::m_position	actions/CCActionGrid3D.h	/^    CCPoint m_position;$/;"	m	class:CCTwirl	access:protected
CCTwirl::setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCTwirl	access:public	signature:(float fAmplitude)
CCTwirl::setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCTwirl	access:public	signature:(float fAmplitudeRate)
CCTwirl::setPosition	actions/CCActionGrid3D.cpp	/^void CCTwirl::setPosition(const CCPoint& position)$/;"	f	class:CCTwirl	signature:(const CCPoint& position)
CCTwirl::setPosition	actions/CCActionGrid3D.h	/^    void setPosition(const CCPoint& position);$/;"	p	class:CCTwirl	access:public	signature:(const CCPoint& position)
CCTwirl::update	actions/CCActionGrid3D.cpp	/^void CCTwirl::update(float time)$/;"	f	class:CCTwirl	signature:(float time)
CCTwirl::update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCTwirl	access:public	signature:(float time)
CCUserDefault	support/user_default/CCUserDefault.cpp	/^CCUserDefault::CCUserDefault()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault	support/user_default/CCUserDefault.h	/^    CCUserDefault();$/;"	p	class:CCUserDefault	access:private	signature:()
CCUserDefault	support/user_default/CCUserDefault.h	/^class CC_DLL CCUserDefault$/;"	c
CCUserDefault	support/user_default/CCUserDefaultAndroid.cpp	/^CCUserDefault::CCUserDefault()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::CCUserDefault	support/user_default/CCUserDefault.cpp	/^CCUserDefault::CCUserDefault()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::CCUserDefault	support/user_default/CCUserDefault.h	/^    CCUserDefault();$/;"	p	class:CCUserDefault	access:private	signature:()
CCUserDefault::CCUserDefault	support/user_default/CCUserDefaultAndroid.cpp	/^CCUserDefault::CCUserDefault()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::createXMLFile	support/user_default/CCUserDefault.cpp	/^bool CCUserDefault::createXMLFile()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::createXMLFile	support/user_default/CCUserDefault.h	/^    static bool createXMLFile();$/;"	p	class:CCUserDefault	access:private	signature:()
CCUserDefault::createXMLFile	support/user_default/CCUserDefaultAndroid.cpp	/^bool CCUserDefault::createXMLFile()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::flush	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::flush()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::flush	support/user_default/CCUserDefault.h	/^    void    flush();$/;"	p	class:CCUserDefault	access:public	signature:()
CCUserDefault::flush	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::flush()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::getBoolForKey	support/user_default/CCUserDefault.cpp	/^ bool CCUserDefault::getBoolForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
CCUserDefault::getBoolForKey	support/user_default/CCUserDefault.cpp	/^bool CCUserDefault::getBoolForKey(const char* pKey, bool defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, bool defaultValue)
CCUserDefault::getBoolForKey	support/user_default/CCUserDefault.h	/^    bool    getBoolForKey(const char* pKey);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey)
CCUserDefault::getBoolForKey	support/user_default/CCUserDefault.h	/^    bool    getBoolForKey(const char* pKey, bool defaultValue);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, bool defaultValue)
CCUserDefault::getBoolForKey	support/user_default/CCUserDefaultAndroid.cpp	/^ bool CCUserDefault::getBoolForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
CCUserDefault::getBoolForKey	support/user_default/CCUserDefaultAndroid.cpp	/^bool CCUserDefault::getBoolForKey(const char* pKey, bool defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, bool defaultValue)
CCUserDefault::getDoubleForKey	support/user_default/CCUserDefault.cpp	/^double  CCUserDefault::getDoubleForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
CCUserDefault::getDoubleForKey	support/user_default/CCUserDefault.cpp	/^double CCUserDefault::getDoubleForKey(const char* pKey, double defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, double defaultValue)
CCUserDefault::getDoubleForKey	support/user_default/CCUserDefault.h	/^    double  getDoubleForKey(const char* pKey);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey)
CCUserDefault::getDoubleForKey	support/user_default/CCUserDefault.h	/^    double  getDoubleForKey(const char* pKey, double defaultValue);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, double defaultValue)
CCUserDefault::getDoubleForKey	support/user_default/CCUserDefaultAndroid.cpp	/^double  CCUserDefault::getDoubleForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
CCUserDefault::getDoubleForKey	support/user_default/CCUserDefaultAndroid.cpp	/^double CCUserDefault::getDoubleForKey(const char* pKey, double defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, double defaultValue)
CCUserDefault::getFloatForKey	support/user_default/CCUserDefault.cpp	/^float CCUserDefault::getFloatForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
CCUserDefault::getFloatForKey	support/user_default/CCUserDefault.cpp	/^float CCUserDefault::getFloatForKey(const char* pKey, float defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, float defaultValue)
CCUserDefault::getFloatForKey	support/user_default/CCUserDefault.h	/^    float    getFloatForKey(const char* pKey);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey)
CCUserDefault::getFloatForKey	support/user_default/CCUserDefault.h	/^    float    getFloatForKey(const char* pKey, float defaultValue);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, float defaultValue)
CCUserDefault::getFloatForKey	support/user_default/CCUserDefaultAndroid.cpp	/^float CCUserDefault::getFloatForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
CCUserDefault::getFloatForKey	support/user_default/CCUserDefaultAndroid.cpp	/^float CCUserDefault::getFloatForKey(const char* pKey, float defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, float defaultValue)
CCUserDefault::getIntegerForKey	support/user_default/CCUserDefault.cpp	/^int CCUserDefault::getIntegerForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
CCUserDefault::getIntegerForKey	support/user_default/CCUserDefault.cpp	/^int CCUserDefault::getIntegerForKey(const char* pKey, int defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, int defaultValue)
CCUserDefault::getIntegerForKey	support/user_default/CCUserDefault.h	/^    int     getIntegerForKey(const char* pKey);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey)
CCUserDefault::getIntegerForKey	support/user_default/CCUserDefault.h	/^    int     getIntegerForKey(const char* pKey, int defaultValue);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, int defaultValue)
CCUserDefault::getIntegerForKey	support/user_default/CCUserDefaultAndroid.cpp	/^int CCUserDefault::getIntegerForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
CCUserDefault::getIntegerForKey	support/user_default/CCUserDefaultAndroid.cpp	/^int CCUserDefault::getIntegerForKey(const char* pKey, int defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, int defaultValue)
CCUserDefault::getStringForKey	support/user_default/CCUserDefault.cpp	/^std::string CCUserDefault::getStringForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
CCUserDefault::getStringForKey	support/user_default/CCUserDefault.cpp	/^string CCUserDefault::getStringForKey(const char* pKey, const std::string & defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, const std::string & defaultValue)
CCUserDefault::getStringForKey	support/user_default/CCUserDefault.h	/^    std::string getStringForKey(const char* pKey);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey)
CCUserDefault::getStringForKey	support/user_default/CCUserDefault.h	/^    std::string getStringForKey(const char* pKey, const std::string & defaultValue);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, const std::string & defaultValue)
CCUserDefault::getStringForKey	support/user_default/CCUserDefaultAndroid.cpp	/^std::string CCUserDefault::getStringForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
CCUserDefault::getStringForKey	support/user_default/CCUserDefaultAndroid.cpp	/^string CCUserDefault::getStringForKey(const char* pKey, const std::string & defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, const std::string & defaultValue)
CCUserDefault::getXMLFilePath	support/user_default/CCUserDefault.cpp	/^const string& CCUserDefault::getXMLFilePath()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::getXMLFilePath	support/user_default/CCUserDefault.h	/^    const static std::string& getXMLFilePath();$/;"	p	class:CCUserDefault	access:public	signature:()
CCUserDefault::getXMLFilePath	support/user_default/CCUserDefaultAndroid.cpp	/^const string& CCUserDefault::getXMLFilePath()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::initXMLFilePath	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::initXMLFilePath()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::initXMLFilePath	support/user_default/CCUserDefault.h	/^    static void initXMLFilePath();$/;"	p	class:CCUserDefault	access:private	signature:()
CCUserDefault::initXMLFilePath	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::initXMLFilePath()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::isXMLFileExist	support/user_default/CCUserDefault.cpp	/^bool CCUserDefault::isXMLFileExist()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::isXMLFileExist	support/user_default/CCUserDefault.h	/^    static bool isXMLFileExist();$/;"	p	class:CCUserDefault	access:private	signature:()
CCUserDefault::isXMLFileExist	support/user_default/CCUserDefaultAndroid.cpp	/^bool CCUserDefault::isXMLFileExist()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::m_sFilePath	support/user_default/CCUserDefault.cpp	/^string CCUserDefault::m_sFilePath = string("");$/;"	m	class:CCUserDefault	file:
CCUserDefault::m_sFilePath	support/user_default/CCUserDefault.h	/^    static std::string m_sFilePath;$/;"	m	class:CCUserDefault	access:private
CCUserDefault::m_sFilePath	support/user_default/CCUserDefaultAndroid.cpp	/^string CCUserDefault::m_sFilePath = string("");$/;"	m	class:CCUserDefault	file:
CCUserDefault::m_sbIsFilePathInitialized	support/user_default/CCUserDefault.cpp	/^bool CCUserDefault::m_sbIsFilePathInitialized = false;$/;"	m	class:CCUserDefault	file:
CCUserDefault::m_sbIsFilePathInitialized	support/user_default/CCUserDefault.h	/^    static bool m_sbIsFilePathInitialized;$/;"	m	class:CCUserDefault	access:private
CCUserDefault::m_sbIsFilePathInitialized	support/user_default/CCUserDefaultAndroid.cpp	/^bool CCUserDefault::m_sbIsFilePathInitialized = false;$/;"	m	class:CCUserDefault	file:
CCUserDefault::m_spUserDefault	support/user_default/CCUserDefault.cpp	/^CCUserDefault* CCUserDefault::m_spUserDefault = 0;$/;"	m	class:CCUserDefault	file:
CCUserDefault::m_spUserDefault	support/user_default/CCUserDefault.h	/^    static CCUserDefault* m_spUserDefault;$/;"	m	class:CCUserDefault	access:private
CCUserDefault::purgeSharedUserDefault	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::purgeSharedUserDefault()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::purgeSharedUserDefault	support/user_default/CCUserDefault.h	/^    static void purgeSharedUserDefault();$/;"	p	class:CCUserDefault	access:public	signature:()
CCUserDefault::purgeSharedUserDefault	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::purgeSharedUserDefault()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::setBoolForKey	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::setBoolForKey(const char* pKey, bool value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, bool value)
CCUserDefault::setBoolForKey	support/user_default/CCUserDefault.h	/^    void    setBoolForKey(const char* pKey, bool value);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, bool value)
CCUserDefault::setBoolForKey	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::setBoolForKey(const char* pKey, bool value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, bool value)
CCUserDefault::setDoubleForKey	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::setDoubleForKey(const char* pKey, double value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, double value)
CCUserDefault::setDoubleForKey	support/user_default/CCUserDefault.h	/^    void    setDoubleForKey(const char* pKey, double value);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, double value)
CCUserDefault::setDoubleForKey	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::setDoubleForKey(const char* pKey, double value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, double value)
CCUserDefault::setFloatForKey	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::setFloatForKey(const char* pKey, float value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, float value)
CCUserDefault::setFloatForKey	support/user_default/CCUserDefault.h	/^    void    setFloatForKey(const char* pKey, float value);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, float value)
CCUserDefault::setFloatForKey	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::setFloatForKey(const char* pKey, float value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, float value)
CCUserDefault::setIntegerForKey	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::setIntegerForKey(const char* pKey, int value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, int value)
CCUserDefault::setIntegerForKey	support/user_default/CCUserDefault.h	/^    void    setIntegerForKey(const char* pKey, int value);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, int value)
CCUserDefault::setIntegerForKey	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::setIntegerForKey(const char* pKey, int value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, int value)
CCUserDefault::setStringForKey	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::setStringForKey(const char* pKey, const std::string & value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, const std::string & value)
CCUserDefault::setStringForKey	support/user_default/CCUserDefault.h	/^    void    setStringForKey(const char* pKey, const std::string & value);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, const std::string & value)
CCUserDefault::setStringForKey	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::setStringForKey(const char* pKey, const std::string & value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, const std::string & value)
CCUserDefault::sharedUserDefault	support/user_default/CCUserDefault.cpp	/^CCUserDefault* CCUserDefault::sharedUserDefault()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::sharedUserDefault	support/user_default/CCUserDefault.h	/^    static CCUserDefault* sharedUserDefault();$/;"	p	class:CCUserDefault	access:public	signature:()
CCUserDefault::sharedUserDefault	support/user_default/CCUserDefaultAndroid.cpp	/^CCUserDefault* CCUserDefault::sharedUserDefault()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::~CCUserDefault	support/user_default/CCUserDefault.cpp	/^CCUserDefault::~CCUserDefault()$/;"	f	class:CCUserDefault	signature:()
CCUserDefault::~CCUserDefault	support/user_default/CCUserDefault.h	/^    ~CCUserDefault();$/;"	p	class:CCUserDefault	access:public	signature:()
CCUserDefault::~CCUserDefault	support/user_default/CCUserDefaultAndroid.cpp	/^CCUserDefault::~CCUserDefault()$/;"	f	class:CCUserDefault	signature:()
CCVerticalTextAlignment	include/ccTypes.h	/^} CCVerticalTextAlignment;$/;"	t	typeref:enum:__anon6
CCWaves	actions/CCActionGrid3D.h	/^class CC_DLL CCWaves : public CCGrid3DAction$/;"	c	inherits:CCGrid3DAction
CCWaves3D	actions/CCActionGrid3D.h	/^class CC_DLL CCWaves3D : public CCGrid3DAction$/;"	c	inherits:CCGrid3DAction
CCWaves3D::copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCWaves3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCWaves3D	signature:(CCZone *pZone)
CCWaves3D::copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCWaves3D	access:public	signature:(CCZone* pZone)
CCWaves3D::create	actions/CCActionGrid3D.cpp	/^CCWaves3D* CCWaves3D::create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)$/;"	f	class:CCWaves3D	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
CCWaves3D::create	actions/CCActionGrid3D.h	/^    static CCWaves3D* create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude);$/;"	p	class:CCWaves3D	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
CCWaves3D::getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCWaves3D	access:public	signature:(void)
CCWaves3D::getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCWaves3D	access:public	signature:(void)
CCWaves3D::initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCWaves3D::initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)$/;"	f	class:CCWaves3D	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
CCWaves3D::initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude);$/;"	p	class:CCWaves3D	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
CCWaves3D::m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCWaves3D	access:protected
CCWaves3D::m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCWaves3D	access:protected
CCWaves3D::m_nWaves	actions/CCActionGrid3D.h	/^    unsigned int m_nWaves;$/;"	m	class:CCWaves3D	access:protected
CCWaves3D::setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCWaves3D	access:public	signature:(float fAmplitude)
CCWaves3D::setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCWaves3D	access:public	signature:(float fAmplitudeRate)
CCWaves3D::update	actions/CCActionGrid3D.cpp	/^void CCWaves3D::update(float time)$/;"	f	class:CCWaves3D	signature:(float time)
CCWaves3D::update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCWaves3D	access:public	signature:(float time)
CCWaves::copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCWaves::copyWithZone(CCZone *pZone)$/;"	f	class:CCWaves	signature:(CCZone *pZone)
CCWaves::copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCWaves	access:public	signature:(CCZone* pZone)
CCWaves::create	actions/CCActionGrid3D.cpp	/^CCWaves* CCWaves::create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)$/;"	f	class:CCWaves	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)
CCWaves::create	actions/CCActionGrid3D.h	/^    static CCWaves* create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical);$/;"	p	class:CCWaves	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)
CCWaves::getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCWaves	access:public	signature:(void)
CCWaves::getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCWaves	access:public	signature:(void)
CCWaves::initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCWaves::initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)$/;"	f	class:CCWaves	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)
CCWaves::initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical);$/;"	p	class:CCWaves	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)
CCWaves::m_bHorizontal	actions/CCActionGrid3D.h	/^    bool m_bHorizontal;$/;"	m	class:CCWaves	access:protected
CCWaves::m_bVertical	actions/CCActionGrid3D.h	/^    bool m_bVertical;$/;"	m	class:CCWaves	access:protected
CCWaves::m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCWaves	access:protected
CCWaves::m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCWaves	access:protected
CCWaves::m_nWaves	actions/CCActionGrid3D.h	/^    unsigned int m_nWaves;$/;"	m	class:CCWaves	access:protected
CCWaves::setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCWaves	access:public	signature:(float fAmplitude)
CCWaves::setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCWaves	access:public	signature:(float fAmplitudeRate)
CCWaves::update	actions/CCActionGrid3D.cpp	/^void CCWaves::update(float time)$/;"	f	class:CCWaves	signature:(float time)
CCWaves::update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCWaves	access:public	signature:(float time)
CCWavesTiles3D	actions/CCActionTiledGrid.h	/^class CC_DLL CCWavesTiles3D : public CCTiledGrid3DAction$/;"	c	inherits:CCTiledGrid3DAction
CCWavesTiles3D::copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCWavesTiles3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCWavesTiles3D	signature:(CCZone *pZone)
CCWavesTiles3D::copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCWavesTiles3D	access:public	signature:(CCZone* pZone)
CCWavesTiles3D::create	actions/CCActionTiledGrid.cpp	/^CCWavesTiles3D* CCWavesTiles3D::create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)$/;"	f	class:CCWavesTiles3D	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
CCWavesTiles3D::create	actions/CCActionTiledGrid.h	/^    static CCWavesTiles3D* create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude);$/;"	p	class:CCWavesTiles3D	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
CCWavesTiles3D::getAmplitude	actions/CCActionTiledGrid.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCWavesTiles3D	access:public	signature:(void)
CCWavesTiles3D::getAmplitudeRate	actions/CCActionTiledGrid.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCWavesTiles3D	access:public	signature:(void)
CCWavesTiles3D::initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCWavesTiles3D::initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)$/;"	f	class:CCWavesTiles3D	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
CCWavesTiles3D::initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude);$/;"	p	class:CCWavesTiles3D	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
CCWavesTiles3D::m_fAmplitude	actions/CCActionTiledGrid.h	/^    float m_fAmplitude;$/;"	m	class:CCWavesTiles3D	access:protected
CCWavesTiles3D::m_fAmplitudeRate	actions/CCActionTiledGrid.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCWavesTiles3D	access:protected
CCWavesTiles3D::m_nWaves	actions/CCActionTiledGrid.h	/^    unsigned int m_nWaves;$/;"	m	class:CCWavesTiles3D	access:protected
CCWavesTiles3D::setAmplitude	actions/CCActionTiledGrid.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCWavesTiles3D	access:public	signature:(float fAmplitude)
CCWavesTiles3D::setAmplitudeRate	actions/CCActionTiledGrid.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCWavesTiles3D	access:public	signature:(float fAmplitudeRate)
CCWavesTiles3D::update	actions/CCActionTiledGrid.cpp	/^void CCWavesTiles3D::update(float time)$/;"	f	class:CCWavesTiles3D	signature:(float time)
CCWavesTiles3D::update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCWavesTiles3D	access:public	signature:(float time)
CCZHeader	support/zip_support/ZipUtils.h	/^    struct CCZHeader {$/;"	s	namespace:cocos2d
CCZ_COMPRESSION_BZIP2	support/zip_support/ZipUtils.h	/^        CCZ_COMPRESSION_BZIP2,                \/\/ bzip2 format (not supported yet)$/;"	e	enum:cocos2d::__anon45
CCZ_COMPRESSION_GZIP	support/zip_support/ZipUtils.h	/^        CCZ_COMPRESSION_GZIP,                \/\/ gzip format (not supported yet)$/;"	e	enum:cocos2d::__anon45
CCZ_COMPRESSION_NONE	support/zip_support/ZipUtils.h	/^        CCZ_COMPRESSION_NONE,                \/\/ plain (not supported yet)$/;"	e	enum:cocos2d::__anon45
CCZ_COMPRESSION_ZLIB	support/zip_support/ZipUtils.h	/^        CCZ_COMPRESSION_ZLIB,                \/\/ zlib format.$/;"	e	enum:cocos2d::__anon45
CCZone	cocoa/CCZone.cpp	/^CCZone::CCZone(CCObject *pObject)$/;"	f	class:CCZone	signature:(CCObject *pObject)
CCZone	cocoa/CCZone.h	/^    CCZone(CCObject *pObject = NULL);$/;"	p	class:CCZone	access:public	signature:(CCObject *pObject = NULL)
CCZone	cocoa/CCZone.h	/^class CC_DLL CCZone$/;"	c
CCZone::CCZone	cocoa/CCZone.cpp	/^CCZone::CCZone(CCObject *pObject)$/;"	f	class:CCZone	signature:(CCObject *pObject)
CCZone::CCZone	cocoa/CCZone.h	/^    CCZone(CCObject *pObject = NULL);$/;"	p	class:CCZone	access:public	signature:(CCObject *pObject = NULL)
CCZone::m_pCopyObject	cocoa/CCZone.h	/^    CCObject *m_pCopyObject;$/;"	m	class:CCZone	access:public
CC_ARRAY_H	support/data_support/ccCArray.h	43;"	d
CC_ASYNC_TEXTURE_CACHE_SEMAPHORE	textures/CCTextureCache.cpp	81;"	d	file:
CC_ASYNC_TEXTURE_CACHE_USE_NAMED_SEMAPHORE	textures/CCTextureCache.cpp	74;"	d	file:
CC_ASYNC_TEXTURE_CACHE_USE_NAMED_SEMAPHORE	textures/CCTextureCache.cpp	76;"	d	file:
CC_BLEND_DST	include/ccMacros.h	87;"	d
CC_BLEND_SRC	include/ccMacros.h	86;"	d
CC_BREAK_IF	platform/CCPlatformMacros.h	204;"	d
CC_CONTENT_SCALE_FACTOR	include/ccMacros.h	121;"	d
CC_DEGREES_TO_RADIANS	include/ccMacros.h	74;"	d
CC_DEPRECATED_ATTRIBUTE	platform/CCPlatformMacros.h	240;"	d
CC_DEPRECATED_ATTRIBUTE	platform/CCPlatformMacros.h	242;"	d
CC_DEPRECATED_ATTRIBUTE	platform/CCPlatformMacros.h	244;"	d
CC_DIRECTOR_DISPATCH_FAST_EVENTS	include/ccConfig.h	125;"	d
CC_DIRECTOR_END	include/ccMacros.h	111;"	d
CC_DIRECTOR_FPS_POSITION	include/ccConfig.h	111;"	d
CC_DIRECTOR_MAC_USE_DISPLAY_LINK_THREAD	include/ccConfig.h	140;"	d
CC_DIRECTOR_STATS_INTERVAL	include/ccConfig.h	102;"	d
CC_DIRECTOR_STATS_POSITION	CCDirector.cpp	68;"	d	file:
CC_ENABLE_CACHE_TEXTURE_DATA	platform/CCPlatformMacros.h	84;"	d
CC_ENABLE_CACHE_TEXTURE_DATA	platform/CCPlatformMacros.h	86;"	d
CC_ENABLE_GL_STATE_CACHE	include/ccConfig.h	67;"	d
CC_ENABLE_PROFILERS	include/ccConfig.h	261;"	d
CC_ENABLE_STACKABLE_ACTIONS	include/ccConfig.h	47;"	d
CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL	include/ccConfig.h	91;"	d
CC_GL_ALL	shaders/ccGLStateCache.h	/^      CC_GL_ALL = 0,$/;"	e	enum:__anon34
CC_HOST_IS_BIG_ENDIAN	include/ccMacros.h	182;"	d
CC_INCREMENT_GL_DRAWS	include/ccMacros.h	247;"	d
CC_INVALID_INDEX	support/data_support/ccCArray.h	54;"	d
CC_LABELATLAS_DEBUG_DRAW	include/ccConfig.h	250;"	d
CC_LABELBMFONT_DEBUG_DRAW	include/ccConfig.h	240;"	d
CC_LUA_ENGINE_DEBUG	include/ccConfig.h	266;"	d
CC_MAX_TOUCHES	platform/CCEGLViewProtocol.h	23;"	d
CC_NODE_DRAW_SETUP	include/ccMacros.h	94;"	d
CC_NODE_RENDER_SUBPIXEL	include/ccConfig.h	150;"	d
CC_PLATFORM_ANDROID	platform/CCPlatformConfig.h	39;"	d
CC_PLATFORM_BADA	platform/CCPlatformConfig.h	43;"	d
CC_PLATFORM_BLACKBERRY	platform/CCPlatformConfig.h	44;"	d
CC_PLATFORM_IOS	platform/CCPlatformConfig.h	38;"	d
CC_PLATFORM_LINUX	platform/CCPlatformConfig.h	42;"	d
CC_PLATFORM_MAC	platform/CCPlatformConfig.h	45;"	d
CC_PLATFORM_MARMALADE	platform/CCPlatformConfig.h	41;"	d
CC_PLATFORM_NACL	platform/CCPlatformConfig.h	46;"	d
CC_PLATFORM_UNKNOWN	platform/CCPlatformConfig.h	37;"	d
CC_PLATFORM_WIN32	platform/CCPlatformConfig.h	40;"	d
CC_POINT_PIXELS_TO_POINTS	include/ccMacros.h	144;"	d
CC_POINT_POINTS_TO_PIXELS	include/ccMacros.h	150;"	d
CC_PROFILER_DISPLAY_TIMERS	include/ccMacros.h	195;"	d
CC_PROFILER_DISPLAY_TIMERS	include/ccMacros.h	213;"	d
CC_PROFILER_PURGE_ALL	include/ccMacros.h	196;"	d
CC_PROFILER_PURGE_ALL	include/ccMacros.h	214;"	d
CC_PROFILER_RESET	include/ccMacros.h	200;"	d
CC_PROFILER_RESET	include/ccMacros.h	218;"	d
CC_PROFILER_RESET_CATEGORY	include/ccMacros.h	204;"	d
CC_PROFILER_RESET_CATEGORY	include/ccMacros.h	222;"	d
CC_PROFILER_RESET_INSTANCE	include/ccMacros.h	208;"	d
CC_PROFILER_RESET_INSTANCE	include/ccMacros.h	226;"	d
CC_PROFILER_START	include/ccMacros.h	198;"	d
CC_PROFILER_START	include/ccMacros.h	216;"	d
CC_PROFILER_START_CATEGORY	include/ccMacros.h	202;"	d
CC_PROFILER_START_CATEGORY	include/ccMacros.h	220;"	d
CC_PROFILER_START_INSTANCE	include/ccMacros.h	206;"	d
CC_PROFILER_START_INSTANCE	include/ccMacros.h	224;"	d
CC_PROFILER_STOP	include/ccMacros.h	199;"	d
CC_PROFILER_STOP	include/ccMacros.h	217;"	d
CC_PROFILER_STOP_CATEGORY	include/ccMacros.h	203;"	d
CC_PROFILER_STOP_CATEGORY	include/ccMacros.h	221;"	d
CC_PROFILER_STOP_INSTANCE	include/ccMacros.h	207;"	d
CC_PROFILER_STOP_INSTANCE	include/ccMacros.h	225;"	d
CC_PROPERTY	CCDirector.h	/^    CC_PROPERTY(CCAccelerometer*, m_pAccelerometer, Accelerometer);$/;"	p	class:CCDirector	access:public	signature:(CCAccelerometer*, m_pAccelerometer, Accelerometer)
CC_PROPERTY	CCDirector.h	/^    CC_PROPERTY(CCActionManager*, m_pActionManager, ActionManager);$/;"	p	class:CCDirector	access:public	signature:(CCActionManager*, m_pActionManager, ActionManager)
CC_PROPERTY	CCDirector.h	/^    CC_PROPERTY(CCKeypadDispatcher*, m_pKeypadDispatcher, KeypadDispatcher);$/;"	p	class:CCDirector	access:public	signature:(CCKeypadDispatcher*, m_pKeypadDispatcher, KeypadDispatcher)
CC_PROPERTY	CCDirector.h	/^    CC_PROPERTY(CCScheduler*, m_pScheduler, Scheduler);$/;"	p	class:CCDirector	access:public	signature:(CCScheduler*, m_pScheduler, Scheduler)
CC_PROPERTY	CCDirector.h	/^    CC_PROPERTY(CCTouchDispatcher*, m_pTouchDispatcher, TouchDispatcher);$/;"	p	class:CCDirector	access:public	signature:(CCTouchDispatcher*, m_pTouchDispatcher, TouchDispatcher)
CC_PROPERTY	base_nodes/CCAtlasNode.h	/^    CC_PROPERTY(CCTextureAtlas*, m_pTextureAtlas, TextureAtlas);$/;"	p	class:CCAtlasNode	access:protected	signature:(CCTextureAtlas*, m_pTextureAtlas, TextureAtlas)
CC_PROPERTY	base_nodes/CCAtlasNode.h	/^    CC_PROPERTY(ccBlendFunc, m_tBlendFunc, BlendFunc);$/;"	p	class:CCAtlasNode	access:protected	signature:(ccBlendFunc, m_tBlendFunc, BlendFunc)
CC_PROPERTY	base_nodes/CCAtlasNode.h	/^    CC_PROPERTY(unsigned int, m_uQuadsToDraw, QuadsToDraw);$/;"	p	class:CCAtlasNode	access:protected	signature:(unsigned int, m_uQuadsToDraw, QuadsToDraw)
CC_PROPERTY	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY(CCArray*, m_pSubItems, SubItems);$/;"	p	class:CCMenuItemToggle	access:private	signature:(CCArray*, m_pSubItems, SubItems)
CC_PROPERTY	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY(CCNode*, m_pDisabledImage, DisabledImage);$/;"	p	class:CCMenuItemSprite	access:private	signature:(CCNode*, m_pDisabledImage, DisabledImage)
CC_PROPERTY	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY(CCNode*, m_pLabel, Label);$/;"	p	class:CCMenuItemLabel	access:private	signature:(CCNode*, m_pLabel, Label)
CC_PROPERTY	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY(CCNode*, m_pNormalImage, NormalImage);$/;"	p	class:CCMenuItemSprite	access:private	signature:(CCNode*, m_pNormalImage, NormalImage)
CC_PROPERTY	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY(CCNode*, m_pSelectedImage, SelectedImage);$/;"	p	class:CCMenuItemSprite	access:private	signature:(CCNode*, m_pSelectedImage, SelectedImage)
CC_PROPERTY	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY(unsigned int, m_uSelectedIndex, SelectedIndex);$/;"	p	class:CCMenuItemToggle	access:private	signature:(unsigned int, m_uSelectedIndex, SelectedIndex)
CC_PROPERTY	misc_nodes/CCProgressTimer.h	/^    CC_PROPERTY(CCPoint, m_tMidpoint, Midpoint);$/;"	p	class:CCProgressTimer	access:protected	signature:(CCPoint, m_tMidpoint, Midpoint)
CC_PROPERTY	particle_nodes/CCParticleSystem.h	/^    CC_PROPERTY(CCParticleBatchNode*, m_pBatchNode, BatchNode);$/;"	p	class:CCParticleSystem	access:protected	signature:(CCParticleBatchNode*, m_pBatchNode, BatchNode)
CC_PROPERTY	platform/CCPlatformMacros.h	138;"	d
CC_PROPERTY	textures/CCTexture2D.h	/^    CC_PROPERTY(CCGLProgram*, m_pShaderProgram, ShaderProgram);$/;"	p	class:CCTexture2D	access:private	signature:(CCGLProgram*, m_pShaderProgram, ShaderProgram)
CC_PROPERTY	tilemap_parallax_nodes/CCTMXLayer.h	/^    CC_PROPERTY(CCDictionary*, m_pProperties, Properties);$/;"	p	class:CCTMXLayer	access:private	signature:(CCDictionary*, m_pProperties, Properties)
CC_PROPERTY	tilemap_parallax_nodes/CCTMXLayer.h	/^    CC_PROPERTY(CCTMXTilesetInfo*, m_pTileSet, TileSet);$/;"	p	class:CCTMXLayer	access:private	signature:(CCTMXTilesetInfo*, m_pTileSet, TileSet)
CC_PROPERTY	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    CC_PROPERTY(CCArray*, m_pObjects, Objects);$/;"	p	class:CCTMXObjectGroup	access:private	signature:(CCArray*, m_pObjects, Objects)
CC_PROPERTY	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    CC_PROPERTY(CCDictionary*, m_pProperties, Properties);$/;"	p	class:CCTMXObjectGroup	access:private	signature:(CCDictionary*, m_pProperties, Properties)
CC_PROPERTY	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CC_PROPERTY(CCArray*, m_pObjectGroups, ObjectGroups);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCArray*, m_pObjectGroups, ObjectGroups)
CC_PROPERTY	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CC_PROPERTY(CCDictionary*, m_pProperties, Properties);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCDictionary*, m_pProperties, Properties)
CC_PROPERTY	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_PROPERTY(CCArray*, m_pLayers, Layers);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCArray*, m_pLayers, Layers)
CC_PROPERTY	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_PROPERTY(CCArray*, m_pObjectGroups, ObjectGroups);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCArray*, m_pObjectGroups, ObjectGroups)
CC_PROPERTY	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_PROPERTY(CCArray*, m_pTilesets, Tilesets);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCArray*, m_pTilesets, Tilesets)
CC_PROPERTY	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_PROPERTY(CCDictionary*, m_pProperties, Properties);$/;"	p	class:CCTMXLayerInfo	access:private	signature:(CCDictionary*, m_pProperties, Properties)
CC_PROPERTY	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_PROPERTY(CCDictionary*, m_pProperties, Properties);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCDictionary*, m_pProperties, Properties)
CC_PROPERTY	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    CC_PROPERTY(struct sImageTGA*, m_pTGAInfo, TGAInfo);$/;"	p	class:CCTileMapAtlas	access:private	signature:(struct sImageTGA*, m_pTGAInfo, TGAInfo)
CC_PROPERTY_PASS_BY_REF	menu_nodes/CCMenuItem.h	/^    CC_PROPERTY_PASS_BY_REF(ccColor3B, m_tDisabledColor, DisabledColor);$/;"	p	class:CCMenuItemLabel	access:private	signature:(ccColor3B, m_tDisabledColor, DisabledColor)
CC_PROPERTY_PASS_BY_REF	platform/CCPlatformMacros.h	143;"	d
CC_PROPERTY_READONLY	CCDirector.h	/^	CC_PROPERTY_READONLY(float, m_fDeltaTime, DeltaTime);$/;"	p	class:CCDirector	access:public	signature:(float, m_fDeltaTime, DeltaTime)
CC_PROPERTY_READONLY	platform/CCPlatformMacros.h	120;"	d
CC_PROPERTY_READONLY	support/CCNotificationCenter.h	/^    CC_PROPERTY_READONLY(CCObject *, m_object, Object);$/;"	p	class:CCNotificationObserver	access:private	signature:(CCObject *, m_object, Object)
CC_PROPERTY_READONLY	support/CCNotificationCenter.h	/^    CC_PROPERTY_READONLY(CCObject *, m_target, Target);$/;"	p	class:CCNotificationObserver	access:private	signature:(CCObject *, m_target, Target)
CC_PROPERTY_READONLY	support/CCNotificationCenter.h	/^    CC_PROPERTY_READONLY(SEL_CallFuncO, m_selector, Selector);$/;"	p	class:CCNotificationObserver	access:private	signature:(SEL_CallFuncO, m_selector, Selector)
CC_PROPERTY_READONLY	support/CCNotificationCenter.h	/^    CC_PROPERTY_READONLY(char *, m_name, Name);$/;"	p	class:CCNotificationObserver	access:private	signature:(char *, m_name, Name)
CC_PROPERTY_READONLY_PASS_BY_REF	platform/CCPlatformMacros.h	124;"	d
CC_PVRMIPMAP_MAX	textures/CCTexturePVR.h	/^    CC_PVRMIPMAP_MAX = 16,$/;"	e	enum:__anon57
CC_RADIANS_TO_DEGREES	include/ccMacros.h	79;"	d
CC_REBIND_INDICES_BUFFER	platform/CCPlatformMacros.h	93;"	d
CC_REBIND_INDICES_BUFFER	platform/CCPlatformMacros.h	95;"	d
CC_RECT_PIXELS_TO_POINTS	include/ccMacros.h	130;"	d
CC_RECT_POINTS_TO_PIXELS	include/ccMacros.h	137;"	d
CC_RGB_PREMULTIPLY_ALPHA	platform/CCImageCommon_cpp.h	43;"	d
CC_SAFE_DELETE	platform/CCPlatformMacros.h	198;"	d
CC_SAFE_DELETE_ARRAY	platform/CCPlatformMacros.h	199;"	d
CC_SAFE_FREE	platform/CCPlatformMacros.h	200;"	d
CC_SAFE_RELEASE	platform/CCPlatformMacros.h	201;"	d
CC_SAFE_RELEASE_NULL	platform/CCPlatformMacros.h	202;"	d
CC_SAFE_RETAIN	platform/CCPlatformMacros.h	203;"	d
CC_SIZE_PIXELS_TO_POINTS	include/ccMacros.h	156;"	d
CC_SIZE_POINTS_TO_PIXELS	include/ccMacros.h	162;"	d
CC_SPRITEBATCHNODE_DEBUG_DRAW	include/ccConfig.h	230;"	d
CC_SPRITEBATCHNODE_RENDER_SUBPIXEL	include/ccConfig.h	160;"	d
CC_SPRITE_DEBUG_DRAW	include/ccConfig.h	220;"	d
CC_SUPPORT_PVRTC	platform/CCPlatformConfig.h	61;"	d
CC_SWAP	include/ccMacros.h	55;"	d
CC_SWAP16	include/ccMacros.h	184;"	d
CC_SWAP32	include/ccMacros.h	183;"	d
CC_SWAP_INT16_BIG_TO_HOST	include/ccMacros.h	188;"	d
CC_SWAP_INT16_LITTLE_TO_HOST	include/ccMacros.h	186;"	d
CC_SWAP_INT32_BIG_TO_HOST	include/ccMacros.h	187;"	d
CC_SWAP_INT32_LITTLE_TO_HOST	include/ccMacros.h	185;"	d
CC_SYNTHESIZE	misc_nodes/CCProgressTimer.h	/^    CC_SYNTHESIZE(CCPoint, m_tBarChangeRate, BarChangeRate);$/;"	p	class:CCProgressTimer	access:protected	signature:(CCPoint, m_tBarChangeRate, BarChangeRate)
CC_SYNTHESIZE	particle_nodes/CCParticleBatchNode.h	/^    CC_SYNTHESIZE(CCTextureAtlas*, m_pTextureAtlas, TextureAtlas);$/;"	p	class:CCParticleBatchNode	access:private	signature:(CCTextureAtlas*, m_pTextureAtlas, TextureAtlas)
CC_SYNTHESIZE	particle_nodes/CCParticleSystem.h	/^    CC_SYNTHESIZE(unsigned int, m_uAtlasIndex, AtlasIndex);$/;"	p	class:CCParticleSystem	access:protected	signature:(unsigned int, m_uAtlasIndex, AtlasIndex)
CC_SYNTHESIZE	platform/CCPlatformMacros.h	175;"	d
CC_SYNTHESIZE	text_input_node/CCTextFieldTTF.h	/^    CC_SYNTHESIZE(CCTextFieldDelegate *, m_pDelegate, Delegate);$/;"	p	class:CCTextFieldTTF	access:public	signature:(CCTextFieldDelegate *, m_pDelegate, Delegate)
CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXLayer.h	/^    CC_SYNTHESIZE(unsigned int*, m_pTiles, Tiles);$/;"	p	class:CCTMXLayer	access:private	signature:(unsigned int*, m_pTiles, Tiles)
CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXLayer.h	/^    CC_SYNTHESIZE(unsigned int, m_uLayerOrientation, LayerOrientation);$/;"	p	class:CCTMXLayer	access:private	signature:(unsigned int, m_uLayerOrientation, LayerOrientation)
CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CC_SYNTHESIZE(int, m_nMapOrientation, MapOrientation);$/;"	p	class:CCTMXTiledMap	access:private	signature:(int, m_nMapOrientation, MapOrientation)
CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE(bool, m_bStoringCharacters, StoringCharacters);$/;"	p	class:CCTMXMapInfo	access:public	signature:(bool, m_bStoringCharacters, StoringCharacters)
CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE(int,    m_nOrientation, Orientation);$/;"	p	class:CCTMXMapInfo	access:public	signature:(int, m_nOrientation, Orientation)
CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE(int, m_nLayerAttribs, LayerAttribs);$/;"	p	class:CCTMXMapInfo	access:public	signature:(int, m_nLayerAttribs, LayerAttribs)
CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE(int, m_nParentElement, ParentElement);$/;"	p	class:CCTMXMapInfo	access:public	signature:(int, m_nParentElement, ParentElement)
CC_SYNTHESIZE	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE(unsigned int, m_uParentGID, ParentGID);$/;"	p	class:CCTMXMapInfo	access:public	signature:(unsigned int, m_uParentGID, ParentGID)
CC_SYNTHESIZE_PASS_BY_REF	platform/CCPlatformMacros.h	180;"	d
CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXLayer.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCSize, m_tLayerSize, LayerSize);$/;"	p	class:CCTMXLayer	access:private	signature:(CCSize, m_tLayerSize, LayerSize)
CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXLayer.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCSize, m_tMapTileSize, MapTileSize);$/;"	p	class:CCTMXLayer	access:private	signature:(CCSize, m_tMapTileSize, MapTileSize)
CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCPoint, m_tPositionOffset, PositionOffset);$/;"	p	class:CCTMXObjectGroup	access:private	signature:(CCPoint, m_tPositionOffset, PositionOffset)
CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCSize, m_tMapSize, MapSize);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCSize, m_tMapSize, MapSize)
CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCSize, m_tTileSize, TileSize);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCSize, m_tTileSize, TileSize)
CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCSize, m_tMapSize, MapSize);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCSize, m_tMapSize, MapSize)
CC_SYNTHESIZE_PASS_BY_REF	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CC_SYNTHESIZE_PASS_BY_REF(CCSize, m_tTileSize, TileSize);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCSize, m_tTileSize, TileSize)
CC_SYNTHESIZE_READONLY	platform/CCImage.h	/^    CC_SYNTHESIZE_READONLY(int,     m_nBitsPerComponent,   BitsPerComponent);$/;"	p	class:CCImage	access:public	signature:(int, m_nBitsPerComponent, BitsPerComponent)
CC_SYNTHESIZE_READONLY	platform/CCImage.h	/^    CC_SYNTHESIZE_READONLY(unsigned short,   m_nHeight,      Height);$/;"	p	class:CCImage	access:public	signature:(unsigned short, m_nHeight, Height)
CC_SYNTHESIZE_READONLY	platform/CCImage.h	/^    CC_SYNTHESIZE_READONLY(unsigned short,   m_nWidth,       Width);$/;"	p	class:CCImage	access:public	signature:(unsigned short, m_nWidth, Width)
CC_SYNTHESIZE_READONLY	platform/CCPlatformMacros.h	157;"	d
CC_SYNTHESIZE_READONLY	text_input_node/CCTextFieldTTF.h	/^    CC_SYNTHESIZE_READONLY(int, m_nCharCount, CharCount);$/;"	p	class:CCTextFieldTTF	access:public	signature:(int, m_nCharCount, CharCount)
CC_SYNTHESIZE_READONLY_PASS_BY_REF	platform/CCPlatformMacros.h	161;"	d
CC_SYNTHESIZE_RETAIN	actions/CCActionInterval.h	/^    CC_SYNTHESIZE_RETAIN(CCNode*, m_pForcedTarget, ForcedTarget);$/;"	p	class:CCTargetedAction	access:public	signature:(CCNode*, m_pForcedTarget, ForcedTarget)
CC_SYNTHESIZE_RETAIN	platform/CCPlatformMacros.h	185;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	102;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	103;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	49;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	53;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	54;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	59;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	60;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	66;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	67;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	72;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	73;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	78;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	79;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	84;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	85;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	90;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	91;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	96;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	97;"	d
CC_TEXTURE_ATLAS_USE_TRIANGLE_STRIP	include/ccConfig.h	171;"	d
CC_TEXTURE_ATLAS_USE_VAO	include/ccConfig.h	184;"	d
CC_TEXTURE_ATLAS_USE_VAO	include/ccConfig.h	189;"	d
CC_UNUSED	platform/CCPlatformMacros.h	248;"	d
CC_UNUSED	platform/CCPlatformMacros.h	250;"	d
CC_USE_LA88_LABELS	include/ccConfig.h	204;"	d
CC_XML_CHAR	platform/CCSAXParser.h	/^typedef unsigned char CC_XML_CHAR;$/;"	t
CDL_DELETE	support/data_support/utlist.h	458;"	d
CDL_FOREACH	support/data_support/utlist.h	469;"	d
CDL_FOREACH_SAFE	support/data_support/utlist.h	472;"	d
CDL_PREPEND	support/data_support/utlist.h	444;"	d
CDL_SEARCH	support/data_support/utlist.h	484;"	d
CDL_SEARCH_SCALAR	support/data_support/utlist.h	477;"	d
CDL_SORT	support/data_support/utlist.h	216;"	d
CData	support/tinyxml2/tinyxml2.h	/^    bool CData() const						{$/;"	f	class:tinyxml2::XMLText	access:public	signature:() const
CGAffineToGL	support/TransformUtils.cpp	/^void CGAffineToGL(const CCAffineTransform *t, GLfloat *m)$/;"	f	namespace:cocos2d	signature:(const CCAffineTransform *t, GLfloat *m)
CGAffineToGL	support/TransformUtils.h	/^void CGAffineToGL(const CCAffineTransform *t, GLfloat *m);$/;"	p	namespace:cocos2d	signature:(const CCAffineTransform *t, GLfloat *m)
CHECK_GL_ERROR_DEBUG	include/ccMacros.h	231;"	d
CHECK_GL_ERROR_DEBUG	include/ccMacros.h	233;"	d
CLOSED	support/tinyxml2/tinyxml2.h	/^        CLOSED,		\/\/ <foo\/>$/;"	e	enum:tinyxml2::XMLElement::__anon41
CLOSING	support/tinyxml2/tinyxml2.h	/^        CLOSING		\/\/ <\/foo>$/;"	e	enum:tinyxml2::XMLElement::__anon41
COCOS2D_VERSION	include/cocos2d.h	32;"	d
COLLAPSE_WHITESPACE	support/tinyxml2/tinyxml2.h	/^        COLLAPSE_WHITESPACE				= 0x04,$/;"	e	enum:tinyxml2::StrPair::__anon37
COLLAPSE_WHITESPACE	support/tinyxml2/tinyxml2.h	/^    COLLAPSE_WHITESPACE$/;"	e	enum:tinyxml2::Whitespace
COMMENT	support/tinyxml2/tinyxml2.h	/^        COMMENT				            = NEEDS_NEWLINE_NORMALIZATION$/;"	e	enum:tinyxml2::StrPair::__anon37
COUNT	support/tinyxml2/tinyxml2.h	/^    enum { COUNT = 1024\/SIZE }; \/\/ Some compilers do not accept to use COUNT in private part if COUNT is private$/;"	e	enum:tinyxml2::MemPoolT::__anon39
CR	support/tinyxml2/tinyxml2.cpp	/^static const char CR = CARRIAGE_RETURN;$/;"	v	file:
CREATE_FUNC	layers_scenes_transitions_nodes/CCLayer.h	/^    CREATE_FUNC(CCLayerRGBA);$/;"	p	class:CCLayerRGBA	access:public	signature:(CCLayerRGBA)
CREATE_FUNC	platform/CCPlatformMacros.h	38;"	d
CStr	support/tinyxml2/tinyxml2.h	/^    const char* CStr() const {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:() const
CStrSize	support/tinyxml2/tinyxml2.h	/^    int CStrSize() const {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:() const
C_STACK_H_INCLUDED	kazmath/include/kazmath/GL/mat4stack.h	27;"	d
Capacity	support/tinyxml2/tinyxml2.h	/^    int Capacity() const				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
Chunk	support/tinyxml2/tinyxml2.h	/^    union Chunk {$/;"	u	class:tinyxml2::MemPoolT	access:private
CloseElement	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::CloseElement()$/;"	f	class:tinyxml2::XMLPrinter	signature:()
CloseElement	support/tinyxml2/tinyxml2.h	/^    void CloseElement();$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:()
ClosingType	support/tinyxml2/tinyxml2.h	/^    int ClosingType() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
CollapseWhitespace	support/tinyxml2/tinyxml2.cpp	/^void StrPair::CollapseWhitespace()$/;"	f	class:tinyxml2::StrPair	signature:()
CollapseWhitespace	support/tinyxml2/tinyxml2.h	/^    void CollapseWhitespace();$/;"	p	class:tinyxml2::StrPair	access:private	signature:()
ConvertUTF32ToUTF8	support/tinyxml2/tinyxml2.cpp	/^void XMLUtil::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:tinyxml2::XMLUtil	signature:( unsigned long input, char* output, int* length )
ConvertUTF32ToUTF8	support/tinyxml2/tinyxml2.h	/^    static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned long input, char* output, int* length )
CurrentAllocs	support/tinyxml2/tinyxml2.h	/^    int CurrentAllocs() const		{$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
DEBUG	support/tinyxml2/tinyxml2.h	58;"	d
DECLTYPE	support/data_support/uthash.h	37;"	d
DECLTYPE	support/data_support/uthash.h	40;"	d
DECLTYPE	support/data_support/uthash.h	43;"	d
DECLTYPE	support/data_support/uthash.h	48;"	d
DECLTYPE	support/data_support/uthash.h	49;"	d
DECLTYPE_ASSIGN	support/data_support/uthash.h	53;"	d
DECLTYPE_ASSIGN	support/data_support/uthash.h	59;"	d
DELETE_ATTRIBUTE	support/tinyxml2/tinyxml2.cpp	56;"	d	file:
DELETE_NODE	support/tinyxml2/tinyxml2.cpp	49;"	d	file:
DISALLOW_COPY_AND_ASSIGN	CCCamera.h	/^    DISALLOW_COPY_AND_ASSIGN(CCCamera);$/;"	p	class:CCCamera	access:private	signature:(CCCamera)
DISALLOW_COPY_AND_ASSIGN	include/ccMacros.h	170;"	d
DL_APPEND	support/data_support/utlist.h	398;"	d
DL_DELETE	support/data_support/utlist.h	412;"	d
DL_FOREACH	support/data_support/utlist.h	430;"	d
DL_FOREACH_SAFE	support/data_support/utlist.h	434;"	d
DL_PREPEND	support/data_support/utlist.h	386;"	d
DL_SEARCH	support/data_support/utlist.h	439;"	d
DL_SEARCH_SCALAR	support/data_support/utlist.h	438;"	d
DL_SORT	support/data_support/utlist.h	158;"	d
DOUBLE_QUOTE	support/tinyxml2/tinyxml2.cpp	/^static const char DOUBLE_QUOTE			= '\\"';$/;"	v	file:
DelegateIter	text_input_node/CCIMEDispatcher.cpp	/^typedef std::list< CCIMEDelegate * >::iterator  DelegateIter;$/;"	t	file:
DelegateList	text_input_node/CCIMEDispatcher.cpp	/^typedef std::list< CCIMEDelegate * > DelegateList;$/;"	t	file:
DeleteAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLElement::DeleteAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
DeleteAttribute	support/tinyxml2/tinyxml2.h	/^    void DeleteAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name )
DeleteChild	support/tinyxml2/tinyxml2.cpp	/^void XMLNode::DeleteChild( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* node )
DeleteChild	support/tinyxml2/tinyxml2.h	/^    void DeleteChild( XMLNode* node );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* node )
DeleteChildren	support/tinyxml2/tinyxml2.cpp	/^void XMLNode::DeleteChildren()$/;"	f	class:tinyxml2::XMLNode	signature:()
DeleteChildren	support/tinyxml2/tinyxml2.h	/^    void DeleteChildren();$/;"	p	class:tinyxml2::XMLNode	access:public	signature:()
DeleteNode	support/tinyxml2/tinyxml2.h	/^    void DeleteNode( XMLNode* node )	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( XMLNode* node )
DoubleAttribute	support/tinyxml2/tinyxml2.h	/^    double 	 DoubleAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
DoubleValue	support/tinyxml2/tinyxml2.h	/^    double 	 DoubleValue() const			{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
DynArray	support/tinyxml2/tinyxml2.h	/^    DynArray< T, INIT >() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
DynArray	support/tinyxml2/tinyxml2.h	/^class DynArray$/;"	c	namespace:tinyxml2
EGLTouchDelegate	touch_dispatcher/CCTouchDispatcher.h	/^class CC_DLL EGLTouchDelegate$/;"	c
EGLTouchDelegate::touchesBegan	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesBegan(CCSet* touches, CCEvent* pEvent) = 0;$/;"	p	class:EGLTouchDelegate	access:public	signature:(CCSet* touches, CCEvent* pEvent)
EGLTouchDelegate::touchesCancelled	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesCancelled(CCSet* touches, CCEvent* pEvent) = 0;$/;"	p	class:EGLTouchDelegate	access:public	signature:(CCSet* touches, CCEvent* pEvent)
EGLTouchDelegate::touchesEnded	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesEnded(CCSet* touches, CCEvent* pEvent) = 0;$/;"	p	class:EGLTouchDelegate	access:public	signature:(CCSet* touches, CCEvent* pEvent)
EGLTouchDelegate::touchesMoved	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesMoved(CCSet* touches, CCEvent* pEvent) = 0;$/;"	p	class:EGLTouchDelegate	access:public	signature:(CCSet* touches, CCEvent* pEvent)
EGLTouchDelegate::~EGLTouchDelegate	touch_dispatcher/CCTouchDispatcher.h	/^    virtual ~EGLTouchDelegate() {}$/;"	f	class:EGLTouchDelegate	access:public	signature:()
EImageFormat	platform/CCImage.h	/^    }EImageFormat;$/;"	t	class:CCImage	typeref:enum:CCImage::__anon28	access:public
ELMT_FROM_HH	support/data_support/uthash.h	93;"	d
ENTITY_RANGE	support/tinyxml2/tinyxml2.h	/^        ENTITY_RANGE = 64,$/;"	e	enum:tinyxml2::XMLPrinter::__anon42
ETextAlign	platform/CCImage.h	/^    }ETextAlign;$/;"	t	class:CCImage	typeref:enum:CCImage::__anon29	access:public
EVENT_COME_TO_BACKGROUND	include/CCEventType.h	17;"	d
EVNET_COME_TO_FOREGROUND	include/CCEventType.h	12;"	d
Empty	support/tinyxml2/tinyxml2.h	/^    bool Empty() const					{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
Empty	support/tinyxml2/tinyxml2.h	/^    bool Empty() const {$/;"	f	class:tinyxml2::StrPair	access:public	signature:() const
EnsureCapacity	support/tinyxml2/tinyxml2.h	/^    void EnsureCapacity( int cap ) {$/;"	f	class:tinyxml2::DynArray	access:private	signature:( int cap )
Entity	support/tinyxml2/tinyxml2.cpp	/^struct Entity {$/;"	s	namespace:tinyxml2	file:
Error	support/tinyxml2/tinyxml2.h	/^    bool Error() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
ErrorID	support/tinyxml2/tinyxml2.h	/^    XMLError  ErrorID() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
ExtraAction	actions/CCActionInterval.cpp	/^class ExtraAction : public CCFiniteTimeAction$/;"	c	file:	inherits:CCFiniteTimeAction
ExtraAction::copyWithZone	actions/CCActionInterval.cpp	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:ExtraAction	file:	access:public	signature:(CCZone* pZone)
ExtraAction::copyWithZone	actions/CCActionInterval.cpp	/^CCObject* ExtraAction::copyWithZone(CCZone* pZone)$/;"	f	class:ExtraAction	signature:(CCZone* pZone)
ExtraAction::create	actions/CCActionInterval.cpp	/^    static ExtraAction* create();$/;"	p	class:ExtraAction	file:	access:public	signature:()
ExtraAction::create	actions/CCActionInterval.cpp	/^ExtraAction* ExtraAction::create()$/;"	f	class:ExtraAction	signature:()
ExtraAction::reverse	actions/CCActionInterval.cpp	/^    virtual ExtraAction* reverse(void);$/;"	p	class:ExtraAction	file:	access:public	signature:(void)
ExtraAction::reverse	actions/CCActionInterval.cpp	/^ExtraAction* ExtraAction::reverse(void)$/;"	f	class:ExtraAction	signature:(void)
ExtraAction::step	actions/CCActionInterval.cpp	/^    virtual void step(float dt);$/;"	p	class:ExtraAction	file:	access:public	signature:(float dt)
ExtraAction::step	actions/CCActionInterval.cpp	/^void ExtraAction::step(float dt)$/;"	f	class:ExtraAction	signature:(float dt)
ExtraAction::update	actions/CCActionInterval.cpp	/^    virtual void update(float time);$/;"	p	class:ExtraAction	file:	access:public	signature:(float time)
ExtraAction::update	actions/CCActionInterval.cpp	/^void ExtraAction::update(float time)$/;"	f	class:ExtraAction	signature:(float time)
FLT_EPSILON	include/ccMacros.h	167;"	d
FNTConfigLoadFile	label_nodes/CCLabelBMFont.cpp	/^CCBMFontConfiguration* FNTConfigLoadFile( const char *fntFile)$/;"	f	signature:( const char *fntFile)
FNTConfigLoadFile	label_nodes/CCLabelBMFont.h	/^CC_DLL CCBMFontConfiguration * FNTConfigLoadFile( const char *file );$/;"	p	signature:( const char *file )
FNTConfigRemoveCache	label_nodes/CCLabelBMFont.cpp	/^void FNTConfigRemoveCache( void )$/;"	f	signature:( void )
FNTConfigRemoveCache	label_nodes/CCLabelBMFont.h	/^CC_DLL void FNTConfigRemoveCache( void );$/;"	p	signature:( void )
FileListContainer	support/zip_support/ZipUtils.cpp	/^    typedef std::map<std::string, struct ZipEntryInfo> FileListContainer;$/;"	t	class:ZipFilePrivate	file:	access:public
FindAttribute	support/tinyxml2/tinyxml2.cpp	/^XMLAttribute* XMLElement::FindAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
FindAttribute	support/tinyxml2/tinyxml2.cpp	/^const XMLAttribute* XMLElement::FindAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name ) const
FindAttribute	support/tinyxml2/tinyxml2.h	/^    XMLAttribute* FindAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
FindAttribute	support/tinyxml2/tinyxml2.h	/^    const XMLAttribute* FindAttribute( const char* name ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
FindOrCreateAttribute	support/tinyxml2/tinyxml2.cpp	/^XMLAttribute* XMLElement::FindOrCreateAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
FindOrCreateAttribute	support/tinyxml2/tinyxml2.h	/^    XMLAttribute* FindOrCreateAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
FirstAttribute	support/tinyxml2/tinyxml2.h	/^    const XMLAttribute* FirstAttribute() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
FirstChild	support/tinyxml2/tinyxml2.h	/^    XMLHandle FirstChild() 													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
FirstChild	support/tinyxml2/tinyxml2.h	/^    XMLNode*		FirstChild()			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
FirstChild	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle FirstChild() const											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
FirstChild	support/tinyxml2/tinyxml2.h	/^    const XMLNode*  FirstChild() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
FirstChildElement	support/tinyxml2/tinyxml2.cpp	/^const XMLElement* XMLNode::FirstChildElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
FirstChildElement	support/tinyxml2/tinyxml2.h	/^    XMLElement* FirstChildElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
FirstChildElement	support/tinyxml2/tinyxml2.h	/^    XMLHandle FirstChildElement( const char* value=0 )						{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* value=0 )
FirstChildElement	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle FirstChildElement( const char* value=0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* value=0 ) const
FirstChildElement	support/tinyxml2/tinyxml2.h	/^    const XMLElement* FirstChildElement( const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
FloatAttribute	support/tinyxml2/tinyxml2.h	/^    float	 FloatAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
FloatValue	support/tinyxml2/tinyxml2.h	/^    float	 FloatValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Free	support/tinyxml2/tinyxml2.h	/^    virtual void Free( void* ) = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:( void* )
Free	support/tinyxml2/tinyxml2.h	/^    virtual void Free( void* mem ) {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:( void* mem )
GLInfoFunction	shaders/CCGLProgram.h	/^typedef void (*GLInfoFunction)(GLuint program, GLenum pname, GLint* params);$/;"	t
GLLogFunction	shaders/CCGLProgram.h	/^typedef void (*GLLogFunction) (GLuint program, GLsizei bufsize, GLsizei* length, GLchar* infolog);$/;"	t
GLToCGAffine	support/TransformUtils.cpp	/^void GLToCGAffine(const GLfloat *m, CCAffineTransform *t)$/;"	f	namespace:cocos2d	signature:(const GLfloat *m, CCAffineTransform *t)
GLToCGAffine	support/TransformUtils.h	/^void GLToCGAffine(const GLfloat *m, CCAffineTransform *t);$/;"	p	namespace:cocos2d	signature:(const GLfloat *m, CCAffineTransform *t)
GLToClipTransform	CCDirector.cpp	/^GLToClipTransform(kmMat4 *transformOut)$/;"	f	file:	signature:(kmMat4 *transformOut)
GetCharacterRef	support/tinyxml2/tinyxml2.cpp	/^const char* XMLUtil::GetCharacterRef( const char* p, char* value, int* length )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* p, char* value, int* length )
GetCharacterRef	support/tinyxml2/tinyxml2.h	/^    static const char* GetCharacterRef( const char* p, char* value, int* length );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, char* value, int* length )
GetDocument	support/tinyxml2/tinyxml2.h	/^    XMLDocument* GetDocument()				{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
GetDocument	support/tinyxml2/tinyxml2.h	/^    const XMLDocument* GetDocument() const	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
GetErrorStr1	support/tinyxml2/tinyxml2.h	/^    const char* GetErrorStr1() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
GetErrorStr2	support/tinyxml2/tinyxml2.h	/^    const char* GetErrorStr2() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
GetStr	support/tinyxml2/tinyxml2.cpp	/^const char* StrPair::GetStr()$/;"	f	class:tinyxml2::StrPair	signature:()
GetStr	support/tinyxml2/tinyxml2.h	/^    const char* GetStr();$/;"	p	class:tinyxml2::StrPair	access:public	signature:()
GetText	support/tinyxml2/tinyxml2.cpp	/^const char* XMLElement::GetText() const$/;"	f	class:tinyxml2::XMLElement	signature:() const
GetText	support/tinyxml2/tinyxml2.h	/^    const char* GetText() const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:() const
HASH_ADD	support/data_support/uthash.h	160;"	d
HASH_ADD_INT	support/data_support/uthash.h	248;"	d
HASH_ADD_KEYPTR	support/data_support/uthash.h	163;"	d
HASH_ADD_PTR	support/data_support/uthash.h	252;"	d
HASH_ADD_STR	support/data_support/uthash.h	244;"	d
HASH_ADD_TO_BKT	support/data_support/uthash.h	663;"	d
HASH_BER	support/data_support/uthash.h	339;"	d
HASH_BKT_CAPACITY_THRESH	support/data_support/uthash.h	90;"	d
HASH_BLOOM_ADD	support/data_support/uthash.h	128;"	d
HASH_BLOOM_ADD	support/data_support/uthash.h	137;"	d
HASH_BLOOM_BITLEN	support/data_support/uthash.h	109;"	d
HASH_BLOOM_BITSET	support/data_support/uthash.h	125;"	d
HASH_BLOOM_BITTEST	support/data_support/uthash.h	126;"	d
HASH_BLOOM_BYTELEN	support/data_support/uthash.h	110;"	d
HASH_BLOOM_FREE	support/data_support/uthash.h	120;"	d
HASH_BLOOM_FREE	support/data_support/uthash.h	136;"	d
HASH_BLOOM_MAKE	support/data_support/uthash.h	111;"	d
HASH_BLOOM_MAKE	support/data_support/uthash.h	135;"	d
HASH_BLOOM_SIGNATURE	support/data_support/uthash.h	939;"	d
HASH_BLOOM_TEST	support/data_support/uthash.h	131;"	d
HASH_BLOOM_TEST	support/data_support/uthash.h	138;"	d
HASH_CLEAR	support/data_support/uthash.h	893;"	d
HASH_CNT	support/data_support/uthash.h	915;"	d
HASH_COUNT	support/data_support/uthash.h	914;"	d
HASH_DEL	support/data_support/uthash.h	254;"	d
HASH_DELETE	support/data_support/uthash.h	205;"	d
HASH_DEL_IN_BKT	support/data_support/uthash.h	677;"	d
HASH_EMIT_KEY	support/data_support/uthash.h	321;"	d
HASH_EMIT_KEY	support/data_support/uthash.h	328;"	d
HASH_EXPAND_BUCKETS	support/data_support/uthash.h	718;"	d
HASH_FCN	support/data_support/uthash.h	333;"	d
HASH_FCN	support/data_support/uthash.h	335;"	d
HASH_FIND	support/data_support/uthash.h	95;"	d
HASH_FIND_INT	support/data_support/uthash.h	246;"	d
HASH_FIND_IN_BKT	support/data_support/uthash.h	649;"	d
HASH_FIND_PTR	support/data_support/uthash.h	250;"	d
HASH_FIND_STR	support/data_support/uthash.h	242;"	d
HASH_FNV	support/data_support/uthash.h	361;"	d
HASH_FSCK	support/data_support/uthash.h	262;"	d
HASH_FSCK	support/data_support/uthash.h	314;"	d
HASH_INITIAL_NUM_BUCKETS	support/data_support/uthash.h	88;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	support/data_support/uthash.h	89;"	d
HASH_ITER	support/data_support/uthash.h	904;"	d
HASH_ITER	support/data_support/uthash.h	908;"	d
HASH_JEN	support/data_support/uthash.h	400;"	d
HASH_JEN_MIX	support/data_support/uthash.h	387;"	d
HASH_KEYCMP	support/data_support/uthash.h	646;"	d
HASH_MAKE_TABLE	support/data_support/uthash.h	141;"	d
HASH_MUR	support/data_support/uthash.h	508;"	d
HASH_MUR	support/data_support/uthash.h	510;"	d
HASH_MUR_ALIGNED	support/data_support/uthash.h	548;"	d
HASH_MUR_UNALIGNED	support/data_support/uthash.h	514;"	d
HASH_OAT	support/data_support/uthash.h	371;"	d
HASH_OOPS	support/data_support/uthash.h	261;"	d
HASH_SAX	support/data_support/uthash.h	351;"	d
HASH_SELECT	support/data_support/uthash.h	855;"	d
HASH_SFH	support/data_support/uthash.h	452;"	d
HASH_SIGNATURE	support/data_support/uthash.h	938;"	d
HASH_SORT	support/data_support/uthash.h	770;"	d
HASH_SRT	support/data_support/uthash.h	771;"	d
HASH_TO_BKT	support/data_support/uthash.h	188;"	d
HasBOM	support/tinyxml2/tinyxml2.h	/^    bool HasBOM() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
INCREMENT	kazmath/src/GL/mat4stack.c	32;"	d	file:
INITIAL_SIZE	kazmath/src/GL/mat4stack.c	31;"	d	file:
Identify	support/tinyxml2/tinyxml2.cpp	/^char* XMLDocument::Identify( char* p, XMLNode** node )$/;"	f	class:tinyxml2::XMLDocument	signature:( char* p, XMLNode** node )
Identify	support/tinyxml2/tinyxml2.h	/^    char* Identify( char* p, XMLNode** node );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( char* p, XMLNode** node )
ImageInfo	textures/CCTextureCache.cpp	/^} ImageInfo;$/;"	t	typeref:struct:_ImageInfo	file:
Impl	text_input_node/CCIMEDispatcher.cpp	/^    Impl()$/;"	f	class:CCIMEDispatcher::Impl	access:public	signature:()
Impl	text_input_node/CCIMEDispatcher.cpp	/^class CCIMEDispatcher::Impl$/;"	c	class:CCIMEDispatcher	file:
InitDocument	support/tinyxml2/tinyxml2.cpp	/^void XMLDocument::InitDocument()$/;"	f	class:tinyxml2::XMLDocument	signature:()
InitDocument	support/tinyxml2/tinyxml2.h	/^    void InitDocument();$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:()
InsertAfterChild	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLNode::InsertAfterChild( XMLNode* afterThis, XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* afterThis, XMLNode* addThis )
InsertAfterChild	support/tinyxml2/tinyxml2.h	/^    XMLNode* InsertAfterChild( XMLNode* afterThis, XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* afterThis, XMLNode* addThis )
InsertEndChild	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLNode::InsertEndChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* addThis )
InsertEndChild	support/tinyxml2/tinyxml2.h	/^    XMLNode* InsertEndChild( XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
InsertFirstChild	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLNode::InsertFirstChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* addThis )
InsertFirstChild	support/tinyxml2/tinyxml2.h	/^    XMLNode* InsertFirstChild( XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
IntAttribute	support/tinyxml2/tinyxml2.h	/^    int		 IntAttribute( const char* name ) const		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
IntValue	support/tinyxml2/tinyxml2.h	/^    int		 IntValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
IsAlpha	support/tinyxml2/tinyxml2.h	/^    inline static int IsAlpha( unsigned char anyByte )		{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char anyByte )
IsAlphaNum	support/tinyxml2/tinyxml2.h	/^    inline static int IsAlphaNum( unsigned char anyByte )	{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char anyByte )
IsUTF8Continuation	support/tinyxml2/tinyxml2.h	/^    inline static int IsUTF8Continuation( const char p ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char p )
IsWhiteSpace	support/tinyxml2/tinyxml2.h	/^    static bool IsWhiteSpace( char p )					{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char p )
ItemSize	support/tinyxml2/tinyxml2.h	/^    virtual int ItemSize() const	{$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
ItemSize	support/tinyxml2/tinyxml2.h	/^    virtual int ItemSize() const = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:() const
KAZMATH_AABB_H_INCLUDED	kazmath/include/kazmath/aabb.h	27;"	d
KAZMATH_H_INCLUDED	kazmath/include/kazmath/kazmath.h	27;"	d
KM_FALSE	kazmath/include/kazmath/utility.h	45;"	d
KM_GL_MATRIX_H_INCLUDED	kazmath/include/kazmath/GL/matrix.h	27;"	d
KM_GL_MODELVIEW	kazmath/include/kazmath/GL/matrix.h	31;"	d
KM_GL_PROJECTION	kazmath/include/kazmath/GL/matrix.h	32;"	d
KM_GL_TEXTURE	kazmath/include/kazmath/GL/matrix.h	33;"	d
KM_PLANE_BOTTOM	kazmath/include/kazmath/plane.h	31;"	d
KM_PLANE_FAR	kazmath/include/kazmath/plane.h	34;"	d
KM_PLANE_LEFT	kazmath/include/kazmath/plane.h	29;"	d
KM_PLANE_NEAR	kazmath/include/kazmath/plane.h	33;"	d
KM_PLANE_RIGHT	kazmath/include/kazmath/plane.h	30;"	d
KM_PLANE_TOP	kazmath/include/kazmath/plane.h	32;"	d
KM_TRUE	kazmath/include/kazmath/utility.h	49;"	d
LDECLTYPE	support/data_support/utlist.h	68;"	d
LF	support/tinyxml2/tinyxml2.cpp	/^static const char LF = LINE_FEED;$/;"	v	file:
LINE_FEED	support/tinyxml2/tinyxml2.cpp	/^static const char LINE_FEED				= (char)0x0a;			\/\/ all line endings are normalized to LF$/;"	v	file:
LL_APPEND	support/data_support/utlist.h	295;"	d
LL_APPEND	support/data_support/utlist.h	356;"	d
LL_APPEND	support/data_support/utlist.h	357;"	d
LL_APPEND_VS2008	support/data_support/utlist.h	325;"	d
LL_DELETE	support/data_support/utlist.h	308;"	d
LL_DELETE	support/data_support/utlist.h	358;"	d
LL_DELETE	support/data_support/utlist.h	359;"	d
LL_DELETE_VS2008	support/data_support/utlist.h	337;"	d
LL_FOREACH	support/data_support/utlist.h	363;"	d
LL_FOREACH_SAFE	support/data_support/utlist.h	366;"	d
LL_PREPEND	support/data_support/utlist.h	289;"	d
LL_SEARCH	support/data_support/utlist.h	376;"	d
LL_SEARCH_SCALAR	support/data_support/utlist.h	369;"	d
LL_SORT	support/data_support/utlist.h	102;"	d
LOCAL_CFLAGS	Android.mk	/^LOCAL_CFLAGS := -Wno-psabi -DUSE_FILE32API$/;"	m
LOCAL_C_INCLUDES	Android.mk	/^LOCAL_C_INCLUDES := $(LOCAL_PATH) \\$/;"	m
LOCAL_EXPORT_CFLAGS	Android.mk	/^LOCAL_EXPORT_CFLAGS := -Wno-psabi -DUSE_FILE32API$/;"	m
LOCAL_EXPORT_C_INCLUDES	Android.mk	/^LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH) \\$/;"	m
LOCAL_EXPORT_LDLIBS	Android.mk	/^LOCAL_EXPORT_LDLIBS := -llog\\$/;"	m
LOCAL_LDLIBS	Android.mk	/^LOCAL_LDLIBS := -lGLESv2 \\$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := cocos2dx_static$/;"	m
LOCAL_MODULE_FILENAME	Android.mk	/^LOCAL_MODULE_FILENAME := libcocos2d$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := \\$/;"	m
LOCAL_WHOLE_STATIC_LIBRARIES	Android.mk	/^LOCAL_WHOLE_STATIC_LIBRARIES := cocos_libpng_static$/;"	m
LUALOG	platform/CCPlatformMacros.h	231;"	d
LUALOG	platform/CCPlatformMacros.h	233;"	d
LanguageType	platform/CCCommon.h	/^typedef enum LanguageType$/;"	g
LastChild	support/tinyxml2/tinyxml2.h	/^    XMLHandle LastChild()													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
LastChild	support/tinyxml2/tinyxml2.h	/^    XMLNode*		LastChild()								{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
LastChild	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle LastChild()	const										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
LastChild	support/tinyxml2/tinyxml2.h	/^    const XMLNode*	LastChild() const						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
LastChildElement	support/tinyxml2/tinyxml2.cpp	/^const XMLElement* XMLNode::LastChildElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
LastChildElement	support/tinyxml2/tinyxml2.h	/^    XMLElement* LastChildElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
LastChildElement	support/tinyxml2/tinyxml2.h	/^    XMLHandle LastChildElement( const char* _value=0 )						{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value=0 )
LastChildElement	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle LastChildElement( const char* _value=0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value=0 ) const
LastChildElement	support/tinyxml2/tinyxml2.h	/^    const XMLElement* LastChildElement( const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
LinkEndChild	support/tinyxml2/tinyxml2.h	/^    XMLNode* LinkEndChild( XMLNode* addThis )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
LoadFile	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( FILE* fp )$/;"	f	class:tinyxml2::XMLDocument	signature:( FILE* fp )
LoadFile	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( const char* filename )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* filename )
LoadFile	support/tinyxml2/tinyxml2.h	/^    XMLError LoadFile( FILE* );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* )
LoadFile	support/tinyxml2/tinyxml2.h	/^    XMLError LoadFile( const char* filename );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename )
MAT3_H_INCLUDED	kazmath/include/kazmath/mat3.h	28;"	d
MAT4_H_INCLUDED	kazmath/include/kazmath/mat4.h	27;"	d
MAX_KEY_LEN	cocoa/CCDictionary.h	124;"	d
M_PI	draw_nodes/CCDrawingPrimitives.cpp	53;"	d	file:
M_PI_X_2	actions/CCActionEase.cpp	39;"	d	file:
Mem	support/tinyxml2/tinyxml2.h	/^    T* Mem()							{$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
Mem	support/tinyxml2/tinyxml2.h	/^    const T* Mem() const				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
MemPool	support/tinyxml2/tinyxml2.h	/^    MemPool() {}$/;"	f	class:tinyxml2::MemPool	access:public	signature:()
MemPool	support/tinyxml2/tinyxml2.h	/^class MemPool$/;"	c	namespace:tinyxml2
MemPoolT	support/tinyxml2/tinyxml2.h	/^    MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
MemPoolT	support/tinyxml2/tinyxml2.h	/^class MemPoolT : public MemPool$/;"	c	namespace:tinyxml2	inherits:MemPool
NEEDS_DELETE	support/tinyxml2/tinyxml2.h	/^        NEEDS_DELETE = 0x200$/;"	e	enum:tinyxml2::StrPair::__anon38
NEEDS_ENTITY_PROCESSING	support/tinyxml2/tinyxml2.h	/^        NEEDS_ENTITY_PROCESSING			= 0x01,$/;"	e	enum:tinyxml2::StrPair::__anon37
NEEDS_FLUSH	support/tinyxml2/tinyxml2.h	/^        NEEDS_FLUSH = 0x100,$/;"	e	enum:tinyxml2::StrPair::__anon38
NEEDS_NEWLINE_NORMALIZATION	support/tinyxml2/tinyxml2.h	/^        NEEDS_NEWLINE_NORMALIZATION		= 0x02,$/;"	e	enum:tinyxml2::StrPair::__anon37
NEON_Matrix4Mul	kazmath/include/kazmath/neon_matrix_impl.h	/^void NEON_Matrix4Mul(const float* a, const float* b, float* output );$/;"	p	signature:(const float* a, const float* b, float* output )
NEON_Matrix4Mul	kazmath/src/neon_matrix_impl.c	/^void NEON_Matrix4Mul(const float* a, const float* b, float* output )$/;"	f	signature:(const float* a, const float* b, float* output )
NEON_Matrix4Vector4Mul	kazmath/include/kazmath/neon_matrix_impl.h	/^void NEON_Matrix4Vector4Mul(const float* m, const float* v, float* output);$/;"	p	signature:(const float* m, const float* v, float* output)
NEON_Matrix4Vector4Mul	kazmath/src/neon_matrix_impl.c	/^void NEON_Matrix4Vector4Mul(const float* m, const float* v, float* output)$/;"	f	signature:(const float* m, const float* v, float* output)
NODE_FUNC	platform/CCPlatformMacros.h	60;"	d
NOUNCRYPT	support/zip_support/unzip.cpp	72;"	d	file:
NO_DECLTYPE	support/data_support/uthash.h	39;"	d
NO_DECLTYPE	support/data_support/uthash.h	47;"	d
NS_CC_BEGIN	platform/CCPlatformMacros.h	102;"	d
NS_CC_BEGIN	platform/CCPlatformMacros.h	106;"	d
NS_CC_END	platform/CCPlatformMacros.h	103;"	d
NS_CC_END	platform/CCPlatformMacros.h	107;"	d
NULL	kazmath/src/quaternion.c	36;"	d	file:
NUM_ENTITIES	support/tinyxml2/tinyxml2.cpp	/^static const int NUM_ENTITIES = 5;$/;"	m	namespace:tinyxml2	file:
Name	support/tinyxml2/tinyxml2.h	/^    const char* Name() const		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
Name	support/tinyxml2/tinyxml2.h	/^    const char* Name() const {$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
NewComment	support/tinyxml2/tinyxml2.cpp	/^XMLComment* XMLDocument::NewComment( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
NewComment	support/tinyxml2/tinyxml2.h	/^    XMLComment* NewComment( const char* comment );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* comment )
NewDeclaration	support/tinyxml2/tinyxml2.cpp	/^XMLDeclaration* XMLDocument::NewDeclaration( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
NewDeclaration	support/tinyxml2/tinyxml2.h	/^    XMLDeclaration* NewDeclaration( const char* text=0 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text=0 )
NewElement	support/tinyxml2/tinyxml2.cpp	/^XMLElement* XMLDocument::NewElement( const char* name )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* name )
NewElement	support/tinyxml2/tinyxml2.h	/^    XMLElement* NewElement( const char* name );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* name )
NewText	support/tinyxml2/tinyxml2.cpp	/^XMLText* XMLDocument::NewText( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
NewText	support/tinyxml2/tinyxml2.h	/^    XMLText* NewText( const char* text );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
NewUnknown	support/tinyxml2/tinyxml2.cpp	/^XMLUnknown* XMLDocument::NewUnknown( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
NewUnknown	support/tinyxml2/tinyxml2.h	/^    XMLUnknown* NewUnknown( const char* text );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
Next	support/tinyxml2/tinyxml2.h	/^    const XMLAttribute* Next() const {$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
NextSibling	support/tinyxml2/tinyxml2.h	/^    XMLHandle NextSibling()													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
NextSibling	support/tinyxml2/tinyxml2.h	/^    XMLNode*	NextSibling()								{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
NextSibling	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle NextSibling() const										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
NextSibling	support/tinyxml2/tinyxml2.h	/^    const XMLNode*	NextSibling() const						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
NextSiblingElement	support/tinyxml2/tinyxml2.cpp	/^const XMLElement* XMLNode::NextSiblingElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
NextSiblingElement	support/tinyxml2/tinyxml2.h	/^    XMLElement*	NextSiblingElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
NextSiblingElement	support/tinyxml2/tinyxml2.h	/^    XMLHandle NextSiblingElement( const char* _value=0 )					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value=0 )
NextSiblingElement	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle NextSiblingElement( const char* _value=0 ) const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value=0 ) const
NextSiblingElement	support/tinyxml2/tinyxml2.h	/^    const XMLElement*	NextSiblingElement( const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
NoChildren	support/tinyxml2/tinyxml2.h	/^    bool NoChildren() const					{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
OF	support/zip_support/ioapi.h	/^typedef ZPOS64_T (ZCALLBACK *tell64_file_func)    OF((voidpf opaque, voidpf stream));$/;"	t	namespace:cocos2d
OF	support/zip_support/ioapi.h	/^typedef uLong    (ZCALLBACK *read_file_func)      OF((voidpf opaque, voidpf stream, void* buf, uLong size));$/;"	t	namespace:cocos2d
OF	support/zip_support/ioapi.h	/^typedef uLong    (ZCALLBACK *write_file_func)     OF((voidpf opaque, voidpf stream, const void* buf, uLong size));$/;"	t	namespace:cocos2d
OF	support/zip_support/ioapi.h	/^typedef voidpf   (ZCALLBACK *open64_file_func)    OF((voidpf opaque, const void* filename, int mode));$/;"	t	namespace:cocos2d
OF	support/zip_support/ioapi.h	/^typedef voidpf   (ZCALLBACK *open_file_func)      OF((voidpf opaque, const char* filename, int mode));$/;"	t	namespace:cocos2d
OPEN	support/tinyxml2/tinyxml2.h	/^        OPEN,		\/\/ <foo>$/;"	e	enum:tinyxml2::XMLElement::__anon41
OpenElement	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::OpenElement( const char* name )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name )
OpenElement	support/tinyxml2/tinyxml2.h	/^    void OpenElement( const char* name );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name )
PLANE_H_INCLUDED	kazmath/include/kazmath/plane.h	27;"	d
PNGSIGSIZE	platform/CCImageCommon_cpp.h	350;"	d
POINT_BEHIND_PLANE	kazmath/include/kazmath/plane.h	/^    POINT_BEHIND_PLANE,$/;"	e	enum:POINT_CLASSIFICATION
POINT_CLASSIFICATION	kazmath/include/kazmath/plane.h	/^typedef enum POINT_CLASSIFICATION {$/;"	g
POINT_CLASSIFICATION	kazmath/include/kazmath/plane.h	/^} POINT_CLASSIFICATION;$/;"	t	typeref:enum:POINT_CLASSIFICATION
POINT_INFRONT_OF_PLANE	kazmath/include/kazmath/plane.h	/^    POINT_INFRONT_OF_PLANE = 0,$/;"	e	enum:POINT_CLASSIFICATION
POINT_ON_PLANE	kazmath/include/kazmath/plane.h	/^    POINT_ON_PLANE,$/;"	e	enum:POINT_CLASSIFICATION
PRESERVE_WHITESPACE	support/tinyxml2/tinyxml2.h	/^    PRESERVE_WHITESPACE,$/;"	e	enum:tinyxml2::Whitespace
PVR2_MAX_TABLE_ELEMENTS	textures/CCTexturePVR.cpp	158;"	d	file:
PVR3_MAX_TABLE_ELEMENTS	textures/CCTexturePVR.cpp	183;"	d	file:
PVRHaveAlphaPremultiplied_	textures/CCTexture2D.cpp	/^static bool PVRHaveAlphaPremultiplied_ = false;$/;"	v	file:
PVRImagesHavePremultipliedAlpha	textures/CCTexture2D.cpp	/^void CCTexture2D::PVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)$/;"	f	class:CCTexture2D	signature:(bool haveAlphaPremultiplied)
PVRImagesHavePremultipliedAlpha	textures/CCTexture2D.h	/^    static void PVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied);$/;"	p	class:CCTexture2D	access:public	signature:(bool haveAlphaPremultiplied)
PVRTableFormats	textures/CCTexturePVR.cpp	/^static const ccPVRTexturePixelFormatInfo PVRTableFormats[] = {$/;"	v	file:
PVR_TEXTURE_FLAG_TYPE_MASK	textures/CCTexturePVR.cpp	41;"	d	file:
Parent	support/tinyxml2/tinyxml2.h	/^    XMLNode* Parent()						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
Parent	support/tinyxml2/tinyxml2.h	/^    const XMLNode*	Parent() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
Parse	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLDocument::Parse( const char* p, size_t len )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* p, size_t len )
Parse	support/tinyxml2/tinyxml2.h	/^    XMLError Parse( const char* xml, size_t nBytes=(size_t)(-1) );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* xml, size_t nBytes=(size_t)(-1) )
ParseAttributes	support/tinyxml2/tinyxml2.cpp	/^char* XMLElement::ParseAttributes( char* p )$/;"	f	class:tinyxml2::XMLElement	signature:( char* p )
ParseAttributes	support/tinyxml2/tinyxml2.h	/^    char* ParseAttributes( char* p );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( char* p )
ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLAttribute::ParseDeep( char* p, bool processEntities )$/;"	f	class:tinyxml2::XMLAttribute	signature:( char* p, bool processEntities )
ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLComment::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLComment	signature:( char* p, StrPair* )
ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLDeclaration::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLDeclaration	signature:( char* p, StrPair* )
ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLElement::ParseDeep( char* p, StrPair* strPair )$/;"	f	class:tinyxml2::XMLElement	signature:( char* p, StrPair* strPair )
ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLNode::ParseDeep( char* p, StrPair* parentEnd )$/;"	f	class:tinyxml2::XMLNode	signature:( char* p, StrPair* parentEnd )
ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLText::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLText	signature:( char* p, StrPair* )
ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLUnknown::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLUnknown	signature:( char* p, StrPair* )
ParseDeep	support/tinyxml2/tinyxml2.h	/^    char* ParseDeep( char* p, StrPair* endTag );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( char* p, StrPair* endTag )
ParseDeep	support/tinyxml2/tinyxml2.h	/^    char* ParseDeep( char* p, bool processEntities );$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( char* p, bool processEntities )
ParseDeep	support/tinyxml2/tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( char*, StrPair* endTag )
ParseDeep	support/tinyxml2/tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( char*, StrPair* endTag )
ParseDeep	support/tinyxml2/tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLText	access:public	signature:( char*, StrPair* endTag )
ParseDeep	support/tinyxml2/tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( char*, StrPair* endTag )
ParseDeep	support/tinyxml2/tinyxml2.h	/^    virtual char* ParseDeep( char*, StrPair* );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( char*, StrPair* )
ParseName	support/tinyxml2/tinyxml2.cpp	/^char* StrPair::ParseName( char* p )$/;"	f	class:tinyxml2::StrPair	signature:( char* p )
ParseName	support/tinyxml2/tinyxml2.h	/^    char* ParseName( char* in );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( char* in )
ParseText	support/tinyxml2/tinyxml2.cpp	/^char* StrPair::ParseText( char* p, const char* endTag, int strFlags )$/;"	f	class:tinyxml2::StrPair	signature:( char* p, const char* endTag, int strFlags )
ParseText	support/tinyxml2/tinyxml2.h	/^    char* ParseText( char* in, const char* endTag, int strFlags );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( char* in, const char* endTag, int strFlags )
Pop	support/tinyxml2/tinyxml2.h	/^    T Pop() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
PopArr	support/tinyxml2/tinyxml2.h	/^    void PopArr( int count ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( int count )
PreviousSibling	support/tinyxml2/tinyxml2.h	/^    XMLHandle PreviousSibling()												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
PreviousSibling	support/tinyxml2/tinyxml2.h	/^    XMLNode*	PreviousSibling()							{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
PreviousSibling	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle PreviousSibling() const									{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
PreviousSibling	support/tinyxml2/tinyxml2.h	/^    const XMLNode*	PreviousSibling() const					{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
PreviousSiblingElement	support/tinyxml2/tinyxml2.cpp	/^const XMLElement* XMLNode::PreviousSiblingElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
PreviousSiblingElement	support/tinyxml2/tinyxml2.h	/^    XMLElement*	PreviousSiblingElement( const char* value=0 ) {$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
PreviousSiblingElement	support/tinyxml2/tinyxml2.h	/^    XMLHandle PreviousSiblingElement( const char* _value=0 )				{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value=0 )
PreviousSiblingElement	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle PreviousSiblingElement( const char* _value=0 ) const		{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value=0 ) const
PreviousSiblingElement	support/tinyxml2/tinyxml2.h	/^    const XMLElement*	PreviousSiblingElement( const char* value=0 ) const ;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
Print	support/tinyxml2/tinyxml2.cpp	/^void XMLDocument::Print( XMLPrinter* streamer )$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLPrinter* streamer )
Print	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::Print( const char* format, ... )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* format, ... )
Print	support/tinyxml2/tinyxml2.h	/^    void Print( XMLPrinter* streamer=0 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLPrinter* streamer=0 )
Print	support/tinyxml2/tinyxml2.h	/^    void Print( const char* format, ... );$/;"	p	class:tinyxml2::XMLPrinter	access:private	signature:( const char* format, ... )
PrintError	support/tinyxml2/tinyxml2.cpp	/^void XMLDocument::PrintError() const$/;"	f	class:tinyxml2::XMLDocument	signature:() const
PrintError	support/tinyxml2/tinyxml2.h	/^    void PrintError() const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:() const
PrintSpace	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PrintSpace( int depth )$/;"	f	class:tinyxml2::XMLPrinter	signature:( int depth )
PrintSpace	support/tinyxml2/tinyxml2.h	/^    void PrintSpace( int depth );$/;"	p	class:tinyxml2::XMLPrinter	access:private	signature:( int depth )
PrintString	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PrintString( const char* p, bool restricted )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* p, bool restricted )
PrintString	support/tinyxml2/tinyxml2.h	/^    void PrintString( const char*, bool restrictedEntitySet );	\/\/ prints out, after detecting entities.$/;"	p	class:tinyxml2::XMLPrinter	access:private	signature:( const char*, bool restrictedEntitySet )
ProcessEntities	support/tinyxml2/tinyxml2.h	/^    bool ProcessEntities() const		{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
Push	support/tinyxml2/tinyxml2.h	/^    void Push( T t ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( T t )
PushArr	support/tinyxml2/tinyxml2.h	/^    T* PushArr( int count ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( int count )
PushAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, bool v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, bool v )
PushAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, const char* value )
PushAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, double v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, double v )
PushAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, int v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, int v )
PushAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, unsigned v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, unsigned v )
PushAttribute	support/tinyxml2/tinyxml2.h	/^    void PushAttribute( const char* name, bool value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, bool value )
PushAttribute	support/tinyxml2/tinyxml2.h	/^    void PushAttribute( const char* name, const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, const char* value )
PushAttribute	support/tinyxml2/tinyxml2.h	/^    void PushAttribute( const char* name, double value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, double value )
PushAttribute	support/tinyxml2/tinyxml2.h	/^    void PushAttribute( const char* name, int value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, int value )
PushAttribute	support/tinyxml2/tinyxml2.h	/^    void PushAttribute( const char* name, unsigned value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, unsigned value )
PushComment	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushComment( const char* comment )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* comment )
PushComment	support/tinyxml2/tinyxml2.h	/^    void PushComment( const char* comment );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* comment )
PushDeclaration	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushDeclaration( const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* value )
PushDeclaration	support/tinyxml2/tinyxml2.h	/^    void PushDeclaration( const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
PushHeader	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushHeader( bool writeBOM, bool writeDec )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool writeBOM, bool writeDec )
PushHeader	support/tinyxml2/tinyxml2.h	/^    void PushHeader( bool writeBOM, bool writeDeclaration );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool writeBOM, bool writeDeclaration )
PushText	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushText( bool value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool value )
PushText	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushText( const char* text, bool cdata )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* text, bool cdata )
PushText	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushText( double value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( double value )
PushText	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushText( float value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( float value )
PushText	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushText( int value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( int value )
PushText	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushText( unsigned value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( unsigned value )
PushText	support/tinyxml2/tinyxml2.h	/^    void PushText( bool value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool value )
PushText	support/tinyxml2/tinyxml2.h	/^    void PushText( const char* text, bool cdata=false );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* text, bool cdata=false )
PushText	support/tinyxml2/tinyxml2.h	/^    void PushText( double value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( double value )
PushText	support/tinyxml2/tinyxml2.h	/^    void PushText( float value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( float value )
PushText	support/tinyxml2/tinyxml2.h	/^    void PushText( int value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( int value )
PushText	support/tinyxml2/tinyxml2.h	/^    void PushText( unsigned value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( unsigned value )
PushUnknown	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushUnknown( const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* value )
PushUnknown	support/tinyxml2/tinyxml2.h	/^    void PushUnknown( const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
QUATERNION_H_INCLUDED	kazmath/include/kazmath/quaternion.h	27;"	d
QueryBoolAttribute	support/tinyxml2/tinyxml2.h	/^    XMLError QueryBoolAttribute( const char* name, bool* value ) const				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
QueryBoolText	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLElement::QueryBoolText( bool* bval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( bool* bval ) const
QueryBoolText	support/tinyxml2/tinyxml2.h	/^    XMLError QueryBoolText( bool* bval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( bool* bval ) const
QueryBoolValue	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLAttribute::QueryBoolValue( bool* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( bool* value ) const
QueryBoolValue	support/tinyxml2/tinyxml2.h	/^    XMLError QueryBoolValue( bool* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( bool* value ) const
QueryDoubleAttribute	support/tinyxml2/tinyxml2.h	/^    XMLError QueryDoubleAttribute( const char* name, double* value ) const			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
QueryDoubleText	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLElement::QueryDoubleText( double* dval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( double* dval ) const
QueryDoubleText	support/tinyxml2/tinyxml2.h	/^    XMLError QueryDoubleText( double* dval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( double* dval ) const
QueryDoubleValue	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLAttribute::QueryDoubleValue( double* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( double* value ) const
QueryDoubleValue	support/tinyxml2/tinyxml2.h	/^    XMLError QueryDoubleValue( double* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( double* value ) const
QueryFloatAttribute	support/tinyxml2/tinyxml2.h	/^    XMLError QueryFloatAttribute( const char* name, float* value ) const			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
QueryFloatText	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLElement::QueryFloatText( float* fval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( float* fval ) const
QueryFloatText	support/tinyxml2/tinyxml2.h	/^    XMLError QueryFloatText( float* fval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( float* fval ) const
QueryFloatValue	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLAttribute::QueryFloatValue( float* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( float* value ) const
QueryFloatValue	support/tinyxml2/tinyxml2.h	/^    XMLError QueryFloatValue( float* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( float* value ) const
QueryIntAttribute	support/tinyxml2/tinyxml2.h	/^    XMLError QueryIntAttribute( const char* name, int* value ) const				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
QueryIntText	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLElement::QueryIntText( int* ival ) const$/;"	f	class:tinyxml2::XMLElement	signature:( int* ival ) const
QueryIntText	support/tinyxml2/tinyxml2.h	/^    XMLError QueryIntText( int* ival ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( int* ival ) const
QueryIntValue	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLAttribute::QueryIntValue( int* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( int* value ) const
QueryIntValue	support/tinyxml2/tinyxml2.h	/^    XMLError QueryIntValue( int* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( int* value ) const
QueryUnsignedAttribute	support/tinyxml2/tinyxml2.h	/^    XMLError QueryUnsignedAttribute( const char* name, unsigned int* value ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
QueryUnsignedText	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLElement::QueryUnsignedText( unsigned* uval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( unsigned* uval ) const
QueryUnsignedText	support/tinyxml2/tinyxml2.h	/^    XMLError QueryUnsignedText( unsigned* uval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( unsigned* uval ) const
QueryUnsignedValue	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLAttribute::QueryUnsignedValue( unsigned int* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( unsigned int* value ) const
QueryUnsignedValue	support/tinyxml2/tinyxml2.h	/^    XMLError QueryUnsignedValue( unsigned int* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned int* value ) const
RAY_2_H	kazmath/include/kazmath/ray2.h	27;"	d
RENDER_IN_SUBPIXEL	base_nodes/CCNode.cpp	44;"	d	file:
RENDER_IN_SUBPIXEL	base_nodes/CCNode.cpp	46;"	d	file:
RENDER_IN_SUBPIXEL	sprite_nodes/CCSprite.cpp	55;"	d	file:
ReadBOM	support/tinyxml2/tinyxml2.cpp	/^const char* XMLUtil::ReadBOM( const char* p, bool* bom )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* p, bool* bom )
ReadBOM	support/tinyxml2/tinyxml2.h	/^    static const char* ReadBOM( const char* p, bool* hasBOM );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, bool* hasBOM )
Reset	support/tinyxml2/tinyxml2.cpp	/^void StrPair::Reset()$/;"	f	class:tinyxml2::StrPair	signature:()
Reset	support/tinyxml2/tinyxml2.h	/^    void Reset();$/;"	p	class:tinyxml2::StrPair	access:private	signature:()
ResolutionPolicy	platform/CCEGLViewProtocol.h	/^enum ResolutionPolicy$/;"	g
RootElement	support/tinyxml2/tinyxml2.h	/^    XMLElement* RootElement()				{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:()
RootElement	support/tinyxml2/tinyxml2.h	/^    const XMLElement* RootElement() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
SAX_ARRAY	platform/CCFileUtils.cpp	/^    SAX_ARRAY$/;"	e	enum:__anon26	file:
SAX_DICT	platform/CCFileUtils.cpp	/^    SAX_DICT,$/;"	e	enum:__anon26	file:
SAX_INT	platform/CCFileUtils.cpp	/^    SAX_INT,$/;"	e	enum:__anon26	file:
SAX_KEY	platform/CCFileUtils.cpp	/^    SAX_KEY,$/;"	e	enum:__anon26	file:
SAX_NONE	platform/CCFileUtils.cpp	/^    SAX_NONE = 0,$/;"	e	enum:__anon26	file:
SAX_REAL	platform/CCFileUtils.cpp	/^    SAX_REAL,$/;"	e	enum:__anon26	file:
SAX_RESULT_ARRAY	platform/CCFileUtils.cpp	/^    SAX_RESULT_ARRAY$/;"	e	enum:__anon27	file:
SAX_RESULT_DICT	platform/CCFileUtils.cpp	/^    SAX_RESULT_DICT,$/;"	e	enum:__anon27	file:
SAX_RESULT_NONE	platform/CCFileUtils.cpp	/^    SAX_RESULT_NONE = 0,$/;"	e	enum:__anon27	file:
SAX_STRING	platform/CCFileUtils.cpp	/^    SAX_STRING,$/;"	e	enum:__anon26	file:
SEL_CallFunc	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_CallFunc)();$/;"	t
SEL_CallFuncN	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_CallFuncN)(CCNode*);$/;"	t
SEL_CallFuncND	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_CallFuncND)(CCNode*, void*);$/;"	t
SEL_CallFuncO	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_CallFuncO)(CCObject*);$/;"	t
SEL_Compare	cocoa/CCObject.h	/^typedef int (CCObject::*SEL_Compare)(CCObject*);$/;"	t
SEL_EventHandler	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_EventHandler)(CCEvent*);$/;"	t
SEL_MenuHandler	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_MenuHandler)(CCObject*);$/;"	t
SEL_SCHEDULE	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_SCHEDULE)(float);$/;"	t
SET_DIRTY_RECURSIVELY	sprite_nodes/CCSprite.cpp	774;"	d	file:
SHADER_PROGRAM	label_nodes/CCLabelTTF.cpp	34;"	d	file:
SINGLE_QUOTE	support/tinyxml2/tinyxml2.cpp	/^static const char SINGLE_QUOTE			= '\\'';$/;"	v	file:
SIZECENTRALDIRITEM	support/zip_support/unzip.cpp	119;"	d	file:
SIZEZIPLOCALHEADER	support/zip_support/unzip.cpp	120;"	d	file:
STRCMPCASENOSENTIVEFUNCTION	support/zip_support/unzip.cpp	379;"	d	file:
SURROGATE_VALUE	support/ccUTF8.cpp	369;"	d	file:
SaveFile	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( FILE* fp, bool compact )$/;"	f	class:tinyxml2::XMLDocument	signature:( FILE* fp, bool compact )
SaveFile	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( const char* filename, bool compact )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* filename, bool compact )
SaveFile	support/tinyxml2/tinyxml2.h	/^    XMLError SaveFile( FILE* fp, bool compact = false );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* fp, bool compact = false )
SaveFile	support/tinyxml2/tinyxml2.h	/^    XMLError SaveFile( const char* filename, bool compact = false );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename, bool compact = false )
SealElement	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::SealElement()$/;"	f	class:tinyxml2::XMLPrinter	signature:()
SealElement	support/tinyxml2/tinyxml2.h	/^    void SealElement();$/;"	p	class:tinyxml2::XMLPrinter	access:private	signature:()
Set	support/tinyxml2/tinyxml2.h	/^    void Set( char* start, char* end, int flags ) {$/;"	f	class:tinyxml2::StrPair	access:public	signature:( char* start, char* end, int flags )
SetAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( bool v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( bool v )
SetAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( const char* v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( const char* v )
SetAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( double v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( double v )
SetAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( float v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( float v )
SetAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( int v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( int v )
SetAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( unsigned v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( unsigned v )
SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( bool value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( bool value )
SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( const char* name, bool value )			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool value )
SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( const char* name, const char* value )	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value )
SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( const char* name, double value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double value )
SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( const char* name, int value )			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int value )
SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( const char* name, unsigned value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned value )
SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( const char* value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( const char* value )
SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( double value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( double value )
SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( float value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( float value )
SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( int value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( int value )
SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( unsigned value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned value )
SetBOM	support/tinyxml2/tinyxml2.h	/^    void SetBOM( bool useBOM ) {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( bool useBOM )
SetBlending	shaders/ccGLStateCache.cpp	/^static void SetBlending(GLenum sfactor, GLenum dfactor)$/;"	f	file:	signature:(GLenum sfactor, GLenum dfactor)
SetCData	support/tinyxml2/tinyxml2.h	/^    void SetCData( bool isCData )			{$/;"	f	class:tinyxml2::XMLText	access:public	signature:( bool isCData )
SetError	support/tinyxml2/tinyxml2.cpp	/^void XMLDocument::SetError( XMLError error, const char* str1, const char* str2 )$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLError error, const char* str1, const char* str2 )
SetError	support/tinyxml2/tinyxml2.h	/^    void SetError( XMLError error, const char* str1, const char* str2 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLError error, const char* str1, const char* str2 )
SetInternedStr	support/tinyxml2/tinyxml2.h	/^    void SetInternedStr( const char* str ) {$/;"	f	class:tinyxml2::StrPair	access:public	signature:( const char* str )
SetName	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetName( const char* n )$/;"	f	class:tinyxml2::XMLAttribute	signature:( const char* n )
SetName	support/tinyxml2/tinyxml2.h	/^    void SetName( const char* name );$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const char* name )
SetName	support/tinyxml2/tinyxml2.h	/^    void SetName( const char* str, bool staticMem=false )	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* str, bool staticMem=false )
SetStr	support/tinyxml2/tinyxml2.cpp	/^void StrPair::SetStr( const char* str, int flags )$/;"	f	class:tinyxml2::StrPair	signature:( const char* str, int flags )
SetStr	support/tinyxml2/tinyxml2.h	/^    void SetStr( const char* str, int flags=0 );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( const char* str, int flags=0 )
SetTracked	support/tinyxml2/tinyxml2.h	/^    virtual void SetTracked() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
SetTracked	support/tinyxml2/tinyxml2.h	/^    void SetTracked() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
SetValue	support/tinyxml2/tinyxml2.cpp	/^void XMLNode::SetValue( const char* str, bool staticMem )$/;"	f	class:tinyxml2::XMLNode	signature:( const char* str, bool staticMem )
SetValue	support/tinyxml2/tinyxml2.h	/^    void SetValue( const char* val, bool staticMem=false );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* val, bool staticMem=false )
ShallowClone	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLComment::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLComment	signature:( XMLDocument* doc ) const
ShallowClone	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLDeclaration::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLDocument* doc ) const
ShallowClone	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLElement::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLElement	signature:( XMLDocument* doc ) const
ShallowClone	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLText::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLText	signature:( XMLDocument* doc ) const
ShallowClone	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLUnknown::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLDocument* doc ) const
ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* \/*document*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( XMLDocument* ) const
ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLDocument* document ) const
ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( XMLDocument* document ) const
ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLDocument* document ) const
ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( XMLDocument* document ) const
ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( XMLDocument* document ) const
ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLDocument* document ) const
ShallowEqual	support/tinyxml2/tinyxml2.cpp	/^bool XMLComment::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLComment	signature:( const XMLNode* compare ) const
ShallowEqual	support/tinyxml2/tinyxml2.cpp	/^bool XMLDeclaration::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( const XMLNode* compare ) const
ShallowEqual	support/tinyxml2/tinyxml2.cpp	/^bool XMLElement::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const XMLNode* compare ) const
ShallowEqual	support/tinyxml2/tinyxml2.cpp	/^bool XMLText::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLText	signature:( const XMLNode* compare ) const
ShallowEqual	support/tinyxml2/tinyxml2.cpp	/^bool XMLUnknown::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( const XMLNode* compare ) const
ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* \/*compare*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( const XMLNode* ) const
ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( const XMLNode* compare ) const
ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( const XMLNode* compare ) const
Size	support/tinyxml2/tinyxml2.h	/^    int Size() const					{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
SkipWhiteSpace	support/tinyxml2/tinyxml2.h	/^    static char* SkipWhiteSpace( char* p )				{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char* p )
SkipWhiteSpace	support/tinyxml2/tinyxml2.h	/^    static const char* SkipWhiteSpace( const char* p )	{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p )
StrPair	support/tinyxml2/tinyxml2.h	/^    StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}$/;"	f	class:tinyxml2::StrPair	access:public	signature:()
StrPair	support/tinyxml2/tinyxml2.h	/^class StrPair$/;"	c	namespace:tinyxml2
StringEqual	support/tinyxml2/tinyxml2.h	/^    inline static bool StringEqual( const char* p, const char* q, int nChar=INT_MAX )  {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, const char* q, int nChar=INT_MAX )
TEXT_ELEMENT	support/tinyxml2/tinyxml2.h	/^        TEXT_ELEMENT		            = NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon37
TEXT_ELEMENT_LEAVE_ENTITIES	support/tinyxml2/tinyxml2.h	/^        TEXT_ELEMENT_LEAVE_ENTITIES		= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon37
TGA_ERROR_COMPRESSED_FILE	support/image_support/TGAlib.h	/^    TGA_ERROR_COMPRESSED_FILE,$/;"	e	enum:cocos2d::__anon36
TGA_ERROR_FILE_OPEN	support/image_support/TGAlib.h	/^    TGA_ERROR_FILE_OPEN,$/;"	e	enum:cocos2d::__anon36
TGA_ERROR_INDEXED_COLOR	support/image_support/TGAlib.h	/^    TGA_ERROR_INDEXED_COLOR,$/;"	e	enum:cocos2d::__anon36
TGA_ERROR_MEMORY	support/image_support/TGAlib.h	/^    TGA_ERROR_MEMORY,$/;"	e	enum:cocos2d::__anon36
TGA_ERROR_READING_FILE	support/image_support/TGAlib.h	/^    TGA_ERROR_READING_FILE,$/;"	e	enum:cocos2d::__anon36
TGA_OK	support/image_support/TGAlib.h	/^    TGA_OK,$/;"	e	enum:cocos2d::__anon36
TINYXML2_INCLUDED	support/tinyxml2/tinyxml2.h	25;"	d
TIXML2_MAJOR_VERSION	support/tinyxml2/tinyxml2.h	/^static const int TIXML2_MAJOR_VERSION = 1;$/;"	v
TIXML2_MINOR_VERSION	support/tinyxml2/tinyxml2.h	/^static const int TIXML2_MINOR_VERSION = 0;$/;"	v
TIXML2_PATCH_VERSION	support/tinyxml2/tinyxml2.h	/^static const int TIXML2_PATCH_VERSION = 9;$/;"	v
TIXMLASSERT	support/tinyxml2/tinyxml2.h	65;"	d
TIXMLASSERT	support/tinyxml2/tinyxml2.h	68;"	d
TIXMLASSERT	support/tinyxml2/tinyxml2.h	71;"	d
TIXMLASSERT	support/tinyxml2/tinyxml2.h	74;"	d
TIXML_SNPRINTF	support/tinyxml2/tinyxml2.h	/^inline int TIXML_SNPRINTF( char* buffer, size_t size, const char* format, ... )$/;"	f	signature:( char* buffer, size_t size, const char* format, ... )
TIXML_SNPRINTF	support/tinyxml2/tinyxml2.h	99;"	d
TIXML_SSCANF	support/tinyxml2/tinyxml2.h	100;"	d
TIXML_SSCANF	support/tinyxml2/tinyxml2.h	95;"	d
TIXML_UTF_LEAD_0	support/tinyxml2/tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v	file:
TIXML_UTF_LEAD_1	support/tinyxml2/tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v	file:
TIXML_UTF_LEAD_2	support/tinyxml2/tinyxml2.cpp	/^static const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v	file:
TMXLayerAttribBase64	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXLayerAttribBase64 = 1 << 1,$/;"	e	enum:__anon59
TMXLayerAttribGzip	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXLayerAttribGzip = 1 << 2,$/;"	e	enum:__anon59
TMXLayerAttribNone	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXLayerAttribNone = 1 << 0,$/;"	e	enum:__anon59
TMXLayerAttribZlib	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXLayerAttribZlib = 1 << 3,$/;"	e	enum:__anon59
TMXPropertyLayer	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXPropertyLayer,$/;"	e	enum:__anon60
TMXPropertyMap	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXPropertyMap,$/;"	e	enum:__anon60
TMXPropertyNone	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXPropertyNone,$/;"	e	enum:__anon60
TMXPropertyObject	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXPropertyObject,$/;"	e	enum:__anon60
TMXPropertyObjectGroup	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXPropertyObjectGroup,$/;"	e	enum:__anon60
TMXPropertyTile	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXPropertyTile$/;"	e	enum:__anon60
TRYFREE	support/zip_support/unzip.cpp	116;"	d	file:
TagunzFile__	support/zip_support/unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	s
TagunzFile__::unused	support/zip_support/unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	m	struct:TagunzFile__	access:public
TargetPlatform	platform/CCApplicationProtocol.h	/^enum TargetPlatform$/;"	g
Tile	actions/CCActionTiledGrid.cpp	/^struct Tile$/;"	s	file:
Tile::delta	actions/CCActionTiledGrid.cpp	/^    CCSize    delta;$/;"	m	struct:Tile	file:	access:public
Tile::position	actions/CCActionTiledGrid.cpp	/^    CCPoint    position;$/;"	m	struct:Tile	file:	access:public
Tile::startPosition	actions/CCActionTiledGrid.cpp	/^    CCPoint    startPosition;$/;"	m	struct:Tile	file:	access:public
ToBool	support/tinyxml2/tinyxml2.cpp	/^bool XMLUtil::ToBool( const char* str, bool* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, bool* value )
ToBool	support/tinyxml2/tinyxml2.h	/^    static bool	ToBool( const char* str, bool* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, bool* value )
ToComment	support/tinyxml2/tinyxml2.h	/^    virtual XMLComment*		ToComment()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToComment	support/tinyxml2/tinyxml2.h	/^    virtual XMLComment*	ToComment()					{$/;"	f	class:tinyxml2::XMLComment	access:public	signature:()
ToComment	support/tinyxml2/tinyxml2.h	/^    virtual const XMLComment*		ToComment() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToComment	support/tinyxml2/tinyxml2.h	/^    virtual const XMLComment* ToComment() const		{$/;"	f	class:tinyxml2::XMLComment	access:public	signature:() const
ToDeclaration	support/tinyxml2/tinyxml2.h	/^    XMLDeclaration* ToDeclaration() 			{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToDeclaration	support/tinyxml2/tinyxml2.h	/^    const XMLDeclaration* ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToDeclaration	support/tinyxml2/tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()					{$/;"	f	class:tinyxml2::XMLDeclaration	access:public	signature:()
ToDeclaration	support/tinyxml2/tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToDeclaration	support/tinyxml2/tinyxml2.h	/^    virtual const XMLDeclaration*	ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToDeclaration	support/tinyxml2/tinyxml2.h	/^    virtual const XMLDeclaration* ToDeclaration() const		{$/;"	f	class:tinyxml2::XMLDeclaration	access:public	signature:() const
ToDocument	support/tinyxml2/tinyxml2.h	/^    virtual XMLDocument*	ToDocument()	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToDocument	support/tinyxml2/tinyxml2.h	/^    virtual XMLDocument* ToDocument()				{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:()
ToDocument	support/tinyxml2/tinyxml2.h	/^    virtual const XMLDocument*		ToDocument() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToDocument	support/tinyxml2/tinyxml2.h	/^    virtual const XMLDocument* ToDocument() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
ToDouble	support/tinyxml2/tinyxml2.cpp	/^bool XMLUtil::ToDouble( const char* str, double* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, double* value )
ToDouble	support/tinyxml2/tinyxml2.h	/^    static bool ToDouble( const char* str, double* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, double* value )
ToElement	support/tinyxml2/tinyxml2.h	/^    XMLElement* ToElement() 					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToElement	support/tinyxml2/tinyxml2.h	/^    const XMLElement* ToElement() const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToElement	support/tinyxml2/tinyxml2.h	/^    virtual XMLElement*		ToElement()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToElement	support/tinyxml2/tinyxml2.h	/^    virtual XMLElement* ToElement()				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:()
ToElement	support/tinyxml2/tinyxml2.h	/^    virtual const XMLElement*		ToElement() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToElement	support/tinyxml2/tinyxml2.h	/^    virtual const XMLElement* ToElement() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
ToFloat	support/tinyxml2/tinyxml2.cpp	/^bool XMLUtil::ToFloat( const char* str, float* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, float* value )
ToFloat	support/tinyxml2/tinyxml2.h	/^    static bool	ToFloat( const char* str, float* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, float* value )
ToInt	support/tinyxml2/tinyxml2.cpp	/^bool XMLUtil::ToInt( const char* str, int* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, int* value )
ToInt	support/tinyxml2/tinyxml2.h	/^    static bool	ToInt( const char* str, int* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, int* value )
ToNode	support/tinyxml2/tinyxml2.h	/^    XMLNode* ToNode()							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToNode	support/tinyxml2/tinyxml2.h	/^    const XMLNode* ToNode() const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToStr	support/tinyxml2/tinyxml2.cpp	/^void XMLUtil::ToStr( bool v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( bool v, char* buffer, int bufferSize )
ToStr	support/tinyxml2/tinyxml2.cpp	/^void XMLUtil::ToStr( double v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( double v, char* buffer, int bufferSize )
ToStr	support/tinyxml2/tinyxml2.cpp	/^void XMLUtil::ToStr( float v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( float v, char* buffer, int bufferSize )
ToStr	support/tinyxml2/tinyxml2.cpp	/^void XMLUtil::ToStr( int v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( int v, char* buffer, int bufferSize )
ToStr	support/tinyxml2/tinyxml2.cpp	/^void XMLUtil::ToStr( unsigned v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( unsigned v, char* buffer, int bufferSize )
ToStr	support/tinyxml2/tinyxml2.h	/^    static void ToStr( bool v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( bool v, char* buffer, int bufferSize )
ToStr	support/tinyxml2/tinyxml2.h	/^    static void ToStr( double v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( double v, char* buffer, int bufferSize )
ToStr	support/tinyxml2/tinyxml2.h	/^    static void ToStr( float v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( float v, char* buffer, int bufferSize )
ToStr	support/tinyxml2/tinyxml2.h	/^    static void ToStr( int v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( int v, char* buffer, int bufferSize )
ToStr	support/tinyxml2/tinyxml2.h	/^    static void ToStr( unsigned v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned v, char* buffer, int bufferSize )
ToText	support/tinyxml2/tinyxml2.h	/^    XMLText* ToText() 							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToText	support/tinyxml2/tinyxml2.h	/^    const XMLText* ToText() const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToText	support/tinyxml2/tinyxml2.h	/^    virtual XMLText*		ToText()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToText	support/tinyxml2/tinyxml2.h	/^    virtual XMLText* ToText()			{$/;"	f	class:tinyxml2::XMLText	access:public	signature:()
ToText	support/tinyxml2/tinyxml2.h	/^    virtual const XMLText*			ToText() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToText	support/tinyxml2/tinyxml2.h	/^    virtual const XMLText* ToText() const	{$/;"	f	class:tinyxml2::XMLText	access:public	signature:() const
ToUnknown	support/tinyxml2/tinyxml2.h	/^    XMLUnknown* ToUnknown() 					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
ToUnknown	support/tinyxml2/tinyxml2.h	/^    const XMLUnknown* ToUnknown() const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
ToUnknown	support/tinyxml2/tinyxml2.h	/^    virtual XMLUnknown*		ToUnknown()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
ToUnknown	support/tinyxml2/tinyxml2.h	/^    virtual XMLUnknown*	ToUnknown()					{$/;"	f	class:tinyxml2::XMLUnknown	access:public	signature:()
ToUnknown	support/tinyxml2/tinyxml2.h	/^    virtual const XMLUnknown*		ToUnknown() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
ToUnknown	support/tinyxml2/tinyxml2.h	/^    virtual const XMLUnknown* ToUnknown() const		{$/;"	f	class:tinyxml2::XMLUnknown	access:public	signature:() const
ToUnsigned	support/tinyxml2/tinyxml2.cpp	/^bool XMLUtil::ToUnsigned( const char* str, unsigned *value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, unsigned *value )
ToUnsigned	support/tinyxml2/tinyxml2.h	/^    static bool ToUnsigned( const char* str, unsigned* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, unsigned* value )
Trace	support/tinyxml2/tinyxml2.h	/^    void Trace( const char* name ) {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:( const char* name )
TypeInfo	include/ccTypeInfo.h	/^class TypeInfo$/;"	c
TypeInfo::getClassTypeInfo	include/ccTypeInfo.h	/^	virtual long getClassTypeInfo() = 0;$/;"	p	class:TypeInfo	access:public	signature:()
UNICODE_VALID	support/ccUTF8.cpp	94;"	d	file:
UNZ_BADZIPFILE	support/zip_support/unzip.h	77;"	d
UNZ_BUFSIZE	support/zip_support/unzip.cpp	105;"	d	file:
UNZ_CRCERROR	support/zip_support/unzip.h	79;"	d
UNZ_END_OF_LIST_OF_FILE	support/zip_support/unzip.h	73;"	d
UNZ_EOF	support/zip_support/unzip.h	75;"	d
UNZ_ERRNO	support/zip_support/unzip.h	74;"	d
UNZ_INTERNALERROR	support/zip_support/unzip.h	78;"	d
UNZ_MAXFILENAMEINZIP	support/zip_support/ZipUtils.cpp	289;"	d	file:
UNZ_MAXFILENAMEINZIP	support/zip_support/unzip.cpp	109;"	d	file:
UNZ_OK	support/zip_support/unzip.h	72;"	d
UNZ_PARAMERROR	support/zip_support/unzip.h	76;"	d
USERDEFAULT_ROOT_NAME	support/user_default/CCUserDefault.cpp	32;"	d	file:
USERDEFAULT_ROOT_NAME	support/user_default/CCUserDefaultAndroid.cpp	31;"	d	file:
USING_NS_CC	platform/CCPlatformMacros.h	104;"	d
USING_NS_CC	platform/CCPlatformMacros.h	108;"	d
UTF8_COMPUTE	support/ccUTF8.cpp	39;"	d	file:
UTF8_GET	support/ccUTF8.cpp	81;"	d	file:
UTF8_LENGTH	support/ccUTF8.cpp	73;"	d	file:
UTHASH_VERSION	support/data_support/uthash.h	78;"	d
UTILITY_H_INCLUDED	kazmath/include/kazmath/utility.h	27;"	d
UTLIST_VERSION	support/data_support/utlist.h	29;"	d
UT_hash_bucket	support/data_support/uthash.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	support/data_support/uthash.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
UT_hash_bucket::count	support/data_support/uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket	access:public
UT_hash_bucket::expand_mult	support/data_support/uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket	access:public
UT_hash_bucket::hh_head	support/data_support/uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle	access:public
UT_hash_handle	support/data_support/uthash.h	/^typedef struct UT_hash_handle {$/;"	s
UT_hash_handle	support/data_support/uthash.h	/^} UT_hash_handle;$/;"	t	typeref:struct:UT_hash_handle
UT_hash_handle::hashv	support/data_support/uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::hh_next	support/data_support/uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle	access:public
UT_hash_handle::hh_prev	support/data_support/uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle	access:public
UT_hash_handle::key	support/data_support/uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::keylen	support/data_support/uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::next	support/data_support/uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::prev	support/data_support/uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::tbl	support/data_support/uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table	access:public
UT_hash_table	support/data_support/uthash.h	/^typedef struct UT_hash_table {$/;"	s
UT_hash_table	support/data_support/uthash.h	/^} UT_hash_table;$/;"	t	typeref:struct:UT_hash_table
UT_hash_table::bloom_bv	support/data_support/uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::bloom_nbits	support/data_support/uthash.h	/^   char bloom_nbits;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::bloom_sig	support/data_support/uthash.h	/^   unsigned int bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::buckets	support/data_support/uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::hho	support/data_support/uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::ideal_chain_maxlen	support/data_support/uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::ineff_expands	support/data_support/uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::log2_num_buckets	support/data_support/uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::noexpand	support/data_support/uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::nonideal_items	support/data_support/uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::num_buckets	support/data_support/uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::num_items	support/data_support/uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::signature	support/data_support/uthash.h	/^   unsigned int signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::tail	support/data_support/uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle	access:public
Unlink	support/tinyxml2/tinyxml2.cpp	/^void XMLNode::Unlink( XMLNode* child )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* child )
Unlink	support/tinyxml2/tinyxml2.h	/^    void Unlink( XMLNode* child );$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( XMLNode* child )
UnsignedAttribute	support/tinyxml2/tinyxml2.h	/^    unsigned UnsignedAttribute( const char* name ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
UnsignedValue	support/tinyxml2/tinyxml2.h	/^    unsigned UnsignedValue() const			{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Untracked	support/tinyxml2/tinyxml2.h	/^    int Untracked() const {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
VEC2_H_INCLUDED	kazmath/include/kazmath/vec2.h	27;"	d
VEC3_H_INCLUDED	kazmath/include/kazmath/vec3.h	27;"	d
VEC4_H_INCLUDED	kazmath/include/kazmath/vec4.h	27;"	d
Value	support/tinyxml2/tinyxml2.h	/^    const char* Value() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
Value	support/tinyxml2/tinyxml2.h	/^    const char* Value() const {$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
Visit	platform/CCSAXParser.cpp	/^	virtual bool Visit( const tinyxml2::XMLText& text );$/;"	p	class:XmlSaxHander	file:	access:public	signature:( const tinyxml2::XMLText& text )
Visit	platform/CCSAXParser.cpp	/^	virtual bool Visit( const tinyxml2::XMLUnknown&){ return true; }$/;"	f	class:XmlSaxHander	access:public	signature:( const tinyxml2::XMLUnknown&)
Visit	platform/CCSAXParser.cpp	/^bool XmlSaxHander::Visit( const tinyxml2::XMLText& text )$/;"	f	class:XmlSaxHander	signature:( const tinyxml2::XMLText& text )
Visit	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLComment& comment )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLComment& comment )
Visit	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLDeclaration& declaration )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLDeclaration& declaration )
Visit	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLText& text )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLText& text )
Visit	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLUnknown& unknown )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLUnknown& unknown )
Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLComment& \/*comment*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLComment& )
Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLComment& comment );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLComment& comment )
Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLDeclaration& \/*declaration*\/ )		{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDeclaration& )
Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLDeclaration& declaration );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDeclaration& declaration )
Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLText& \/*text*\/ )					{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLText& )
Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLText& text );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLText& text )
Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLUnknown& \/*unknown*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLUnknown& )
Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLUnknown& unknown );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLUnknown& unknown )
VisitEnter	platform/CCSAXParser.cpp	/^	virtual bool VisitEnter( const tinyxml2::XMLElement& element, const tinyxml2::XMLAttribute* firstAttribute );$/;"	p	class:XmlSaxHander	file:	access:public	signature:( const tinyxml2::XMLElement& element, const tinyxml2::XMLAttribute* firstAttribute )
VisitEnter	platform/CCSAXParser.cpp	/^bool XmlSaxHander::VisitEnter( const tinyxml2::XMLElement& element, const tinyxml2::XMLAttribute* firstAttribute )$/;"	f	class:XmlSaxHander	signature:( const tinyxml2::XMLElement& element, const tinyxml2::XMLAttribute* firstAttribute )
VisitEnter	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLDocument& doc )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLDocument& doc )
VisitEnter	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLElement& element, const XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLElement& element, const XMLAttribute* attribute )
VisitEnter	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
VisitEnter	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
VisitEnter	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitEnter( const XMLElement& \/*element*\/, const XMLAttribute* \/*firstAttribute*\/ )	{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& , const XMLAttribute* )
VisitEnter	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitEnter( const XMLElement& element, const XMLAttribute* attribute );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element, const XMLAttribute* attribute )
VisitExit	platform/CCSAXParser.cpp	/^	virtual bool VisitExit( const tinyxml2::XMLElement& element );$/;"	p	class:XmlSaxHander	file:	access:public	signature:( const tinyxml2::XMLElement& element )
VisitExit	platform/CCSAXParser.cpp	/^bool XmlSaxHander::VisitExit( const tinyxml2::XMLElement& element )$/;"	f	class:XmlSaxHander	signature:( const tinyxml2::XMLElement& element )
VisitExit	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::VisitExit( const XMLElement& )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLElement& )
VisitExit	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
VisitExit	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
VisitExit	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitExit( const XMLElement& \/*element*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& )
VisitExit	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitExit( const XMLElement& element );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element )
VolatileTexture	textures/CCTextureCache.cpp	/^VolatileTexture::VolatileTexture(CCTexture2D *t)$/;"	f	class:VolatileTexture	signature:(CCTexture2D *t)
VolatileTexture	textures/CCTextureCache.h	/^    VolatileTexture(CCTexture2D *t);$/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *t)
VolatileTexture	textures/CCTextureCache.h	/^class VolatileTexture$/;"	c
VolatileTexture::VolatileTexture	textures/CCTextureCache.cpp	/^VolatileTexture::VolatileTexture(CCTexture2D *t)$/;"	f	class:VolatileTexture	signature:(CCTexture2D *t)
VolatileTexture::VolatileTexture	textures/CCTextureCache.h	/^    VolatileTexture(CCTexture2D *t);$/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *t)
VolatileTexture::addCCImage	textures/CCTextureCache.cpp	/^void VolatileTexture::addCCImage(CCTexture2D *tt, CCImage *image)$/;"	f	class:VolatileTexture	signature:(CCTexture2D *tt, CCImage *image)
VolatileTexture::addCCImage	textures/CCTextureCache.h	/^    static void addCCImage(CCTexture2D *tt, CCImage *image);$/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *tt, CCImage *image)
VolatileTexture::addDataTexture	textures/CCTextureCache.cpp	/^void VolatileTexture::addDataTexture(CCTexture2D *tt, void* data, CCTexture2DPixelFormat pixelFormat, const CCSize& contentSize)$/;"	f	class:VolatileTexture	signature:(CCTexture2D *tt, void* data, CCTexture2DPixelFormat pixelFormat, const CCSize& contentSize)
VolatileTexture::addDataTexture	textures/CCTextureCache.h	/^    static void addDataTexture(CCTexture2D *tt, void* data, CCTexture2DPixelFormat pixelFormat, const CCSize& contentSize);$/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *tt, void* data, CCTexture2DPixelFormat pixelFormat, const CCSize& contentSize)
VolatileTexture::addImageTexture	textures/CCTextureCache.cpp	/^void VolatileTexture::addImageTexture(CCTexture2D *tt, const char* imageFileName, CCImage::EImageFormat format)$/;"	f	class:VolatileTexture	signature:(CCTexture2D *tt, const char* imageFileName, CCImage::EImageFormat format)
VolatileTexture::addImageTexture	textures/CCTextureCache.h	/^    static void addImageTexture(CCTexture2D *tt, const char* imageFileName, CCImage::EImageFormat format);$/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *tt, const char* imageFileName, CCImage::EImageFormat format)
VolatileTexture::addStringTexture	textures/CCTextureCache.cpp	/^void VolatileTexture::addStringTexture(CCTexture2D *tt, const char* text, const CCSize& dimensions, CCTextAlignment alignment, $/;"	f	class:VolatileTexture	signature:(CCTexture2D *tt, const char* text, const CCSize& dimensions, CCTextAlignment alignment, CCVerticalTextAlignment vAlignment, const char *fontName, float fontSize)
VolatileTexture::addStringTexture	textures/CCTextureCache.h	/^    static void addStringTexture(CCTexture2D *tt, const char* text, const CCSize& dimensions, CCTextAlignment alignment, $/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *tt, const char* text, const CCSize& dimensions, CCTextAlignment alignment, CCVerticalTextAlignment vAlignment, const char *fontName, float fontSize)
VolatileTexture::ccCachedImageType	textures/CCTextureCache.h	/^}ccCachedImageType;$/;"	t	class:VolatileTexture	typeref:enum:VolatileTexture::__anon48	access:private
VolatileTexture::findVolotileTexture	textures/CCTextureCache.cpp	/^VolatileTexture* VolatileTexture::findVolotileTexture(CCTexture2D *tt)$/;"	f	class:VolatileTexture	signature:(CCTexture2D *tt)
VolatileTexture::findVolotileTexture	textures/CCTextureCache.h	/^    static VolatileTexture* findVolotileTexture(CCTexture2D *tt);$/;"	p	class:VolatileTexture	access:private	signature:(CCTexture2D *tt)
VolatileTexture::isReloading	textures/CCTextureCache.cpp	/^bool VolatileTexture::isReloading = false;$/;"	m	class:VolatileTexture	file:
VolatileTexture::isReloading	textures/CCTextureCache.h	/^    static bool isReloading;$/;"	m	class:VolatileTexture	access:public
VolatileTexture::kImage	textures/CCTextureCache.h	/^    kImage,$/;"	e	enum:VolatileTexture::__anon48
VolatileTexture::kImageData	textures/CCTextureCache.h	/^    kImageData,$/;"	e	enum:VolatileTexture::__anon48
VolatileTexture::kImageFile	textures/CCTextureCache.h	/^    kImageFile,$/;"	e	enum:VolatileTexture::__anon48
VolatileTexture::kInvalid	textures/CCTextureCache.h	/^    kInvalid = 0,$/;"	e	enum:VolatileTexture::__anon48
VolatileTexture::kString	textures/CCTextureCache.h	/^    kString,$/;"	e	enum:VolatileTexture::__anon48
VolatileTexture::m_FmtImage	textures/CCTextureCache.h	/^    CCImage::EImageFormat m_FmtImage;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::m_PixelFormat	textures/CCTextureCache.h	/^    CCTexture2DPixelFormat m_PixelFormat;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::m_TextureSize	textures/CCTextureCache.h	/^    CCSize m_TextureSize;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::m_alignment	textures/CCTextureCache.h	/^    CCTextAlignment m_alignment;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::m_eCashedImageType	textures/CCTextureCache.h	/^    ccCachedImageType m_eCashedImageType;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::m_fFontSize	textures/CCTextureCache.h	/^    float           m_fFontSize;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::m_pTextureData	textures/CCTextureCache.h	/^    void *m_pTextureData;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::m_size	textures/CCTextureCache.h	/^    CCSize          m_size;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::m_strFileName	textures/CCTextureCache.h	/^    std::string m_strFileName;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::m_strFontName	textures/CCTextureCache.h	/^    std::string     m_strFontName;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::m_strText	textures/CCTextureCache.h	/^    std::string     m_strText;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::m_texParams	textures/CCTextureCache.h	/^    ccTexParams     m_texParams;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::m_vAlignment	textures/CCTextureCache.h	/^    CCVerticalTextAlignment m_vAlignment;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::reloadAllTextures	textures/CCTextureCache.cpp	/^void VolatileTexture::reloadAllTextures()$/;"	f	class:VolatileTexture	signature:()
VolatileTexture::reloadAllTextures	textures/CCTextureCache.h	/^    static void reloadAllTextures();$/;"	p	class:VolatileTexture	access:public	signature:()
VolatileTexture::removeTexture	textures/CCTextureCache.cpp	/^void VolatileTexture::removeTexture(CCTexture2D *t) $/;"	f	class:VolatileTexture	signature:(CCTexture2D *t)
VolatileTexture::removeTexture	textures/CCTextureCache.h	/^    static void removeTexture(CCTexture2D *t);$/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *t)
VolatileTexture::setTexParameters	textures/CCTextureCache.cpp	/^void VolatileTexture::setTexParameters(CCTexture2D *t, ccTexParams *texParams) $/;"	f	class:VolatileTexture	signature:(CCTexture2D *t, ccTexParams *texParams)
VolatileTexture::setTexParameters	textures/CCTextureCache.h	/^    static void setTexParameters(CCTexture2D *t, ccTexParams *texParams);$/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *t, ccTexParams *texParams)
VolatileTexture::texture	textures/CCTextureCache.h	/^    CCTexture2D *texture;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::textures	textures/CCTextureCache.cpp	/^std::list<VolatileTexture*> VolatileTexture::textures;$/;"	m	class:VolatileTexture	file:
VolatileTexture::textures	textures/CCTextureCache.h	/^    static std::list<VolatileTexture*> textures;$/;"	m	class:VolatileTexture	access:public
VolatileTexture::uiImage	textures/CCTextureCache.h	/^    CCImage *uiImage;$/;"	m	class:VolatileTexture	access:protected
VolatileTexture::~VolatileTexture	textures/CCTextureCache.cpp	/^VolatileTexture::~VolatileTexture()$/;"	f	class:VolatileTexture	signature:()
VolatileTexture::~VolatileTexture	textures/CCTextureCache.h	/^    ~VolatileTexture();$/;"	p	class:VolatileTexture	access:public	signature:()
Whitespace	support/tinyxml2/tinyxml2.h	/^enum Whitespace {$/;"	g	namespace:tinyxml2
WhitespaceMode	support/tinyxml2/tinyxml2.h	/^    Whitespace WhitespaceMode() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
XMLAttribute	support/tinyxml2/tinyxml2.h	/^    XMLAttribute( const XMLAttribute& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
XMLAttribute	support/tinyxml2/tinyxml2.h	/^    XMLAttribute() : _next( 0 ) {}$/;"	f	class:tinyxml2::XMLAttribute	access:private	signature:()
XMLAttribute	support/tinyxml2/tinyxml2.h	/^class XMLAttribute$/;"	c	namespace:tinyxml2
XMLComment	support/tinyxml2/tinyxml2.cpp	/^XMLComment::XMLComment( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLComment	signature:( XMLDocument* doc )
XMLComment	support/tinyxml2/tinyxml2.h	/^    XMLComment( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( XMLDocument* doc )
XMLComment	support/tinyxml2/tinyxml2.h	/^    XMLComment( const XMLComment& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( const XMLComment& )
XMLComment	support/tinyxml2/tinyxml2.h	/^class XMLComment : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLConstHandle	support/tinyxml2/tinyxml2.h	/^    XMLConstHandle( const XMLConstHandle& ref )										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
XMLConstHandle	support/tinyxml2/tinyxml2.h	/^    XMLConstHandle( const XMLNode& node )											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode& node )
XMLConstHandle	support/tinyxml2/tinyxml2.h	/^    XMLConstHandle( const XMLNode* node )											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode* node )
XMLConstHandle	support/tinyxml2/tinyxml2.h	/^class XMLConstHandle$/;"	c	namespace:tinyxml2
XMLDeclaration	support/tinyxml2/tinyxml2.cpp	/^XMLDeclaration::XMLDeclaration( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLDocument* doc )
XMLDeclaration	support/tinyxml2/tinyxml2.h	/^    XMLDeclaration( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( XMLDocument* doc )
XMLDeclaration	support/tinyxml2/tinyxml2.h	/^    XMLDeclaration( const XMLDeclaration& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( const XMLDeclaration& )
XMLDeclaration	support/tinyxml2/tinyxml2.h	/^class XMLDeclaration : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLDocument	support/tinyxml2/tinyxml2.cpp	/^XMLDocument::XMLDocument( bool processEntities, Whitespace whitespace ) :$/;"	f	class:tinyxml2::XMLDocument	signature:( bool processEntities, Whitespace whitespace )
XMLDocument	support/tinyxml2/tinyxml2.h	/^    XMLDocument( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE )
XMLDocument	support/tinyxml2/tinyxml2.h	/^    XMLDocument( const XMLDocument& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
XMLDocument	support/tinyxml2/tinyxml2.h	/^class XMLDocument : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLElement	support/tinyxml2/tinyxml2.cpp	/^XMLElement::XMLElement( XMLDocument* doc ) : XMLNode( doc ),$/;"	f	class:tinyxml2::XMLElement	signature:( XMLDocument* doc )
XMLElement	support/tinyxml2/tinyxml2.h	/^    XMLElement( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( XMLDocument* doc )
XMLElement	support/tinyxml2/tinyxml2.h	/^    XMLElement( const XMLElement& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
XMLElement	support/tinyxml2/tinyxml2.h	/^class XMLElement : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLError	support/tinyxml2/tinyxml2.h	/^enum XMLError {$/;"	g	namespace:tinyxml2
XMLHandle	support/tinyxml2/tinyxml2.h	/^    XMLHandle( XMLNode& node )												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode& node )
XMLHandle	support/tinyxml2/tinyxml2.h	/^    XMLHandle( XMLNode* node )												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode* node )
XMLHandle	support/tinyxml2/tinyxml2.h	/^    XMLHandle( const XMLHandle& ref )										{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
XMLHandle	support/tinyxml2/tinyxml2.h	/^class XMLHandle$/;"	c	namespace:tinyxml2
XMLNode	support/tinyxml2/tinyxml2.cpp	/^XMLNode::XMLNode( XMLDocument* doc ) :$/;"	f	class:tinyxml2::XMLNode	signature:( XMLDocument* doc )
XMLNode	support/tinyxml2/tinyxml2.h	/^    XMLNode( XMLDocument* );$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( XMLDocument* )
XMLNode	support/tinyxml2/tinyxml2.h	/^    XMLNode( const XMLNode& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( const XMLNode& )
XMLNode	support/tinyxml2/tinyxml2.h	/^class XMLNode$/;"	c	namespace:tinyxml2
XMLPrinter	support/tinyxml2/tinyxml2.cpp	/^XMLPrinter::XMLPrinter( FILE* file, bool compact ) :$/;"	f	class:tinyxml2::XMLPrinter	signature:( FILE* file, bool compact )
XMLPrinter	support/tinyxml2/tinyxml2.h	/^    XMLPrinter( FILE* file=0, bool compact = false );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( FILE* file=0, bool compact = false )
XMLPrinter	support/tinyxml2/tinyxml2.h	/^class XMLPrinter : public XMLVisitor$/;"	c	namespace:tinyxml2	inherits:XMLVisitor
XMLText	support/tinyxml2/tinyxml2.h	/^    XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}$/;"	f	class:tinyxml2::XMLText	access:protected	signature:( XMLDocument* doc )
XMLText	support/tinyxml2/tinyxml2.h	/^    XMLText( const XMLText& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLText	access:protected	signature:( const XMLText& )
XMLText	support/tinyxml2/tinyxml2.h	/^class XMLText : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLUnknown	support/tinyxml2/tinyxml2.cpp	/^XMLUnknown::XMLUnknown( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLDocument* doc )
XMLUnknown	support/tinyxml2/tinyxml2.h	/^    XMLUnknown( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( XMLDocument* doc )
XMLUnknown	support/tinyxml2/tinyxml2.h	/^    XMLUnknown( const XMLUnknown& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( const XMLUnknown& )
XMLUnknown	support/tinyxml2/tinyxml2.h	/^class XMLUnknown : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
XMLUtil	support/tinyxml2/tinyxml2.h	/^class XMLUtil$/;"	c	namespace:tinyxml2
XMLVisitor	support/tinyxml2/tinyxml2.h	/^class XMLVisitor$/;"	c	namespace:tinyxml2
XML_CAN_NOT_CONVERT_TEXT	support/tinyxml2/tinyxml2.h	/^    XML_CAN_NOT_CONVERT_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_ELEMENT_MISMATCH	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_ELEMENT_MISMATCH,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_EMPTY_DOCUMENT	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_EMPTY_DOCUMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_COULD_NOT_BE_OPENED	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_FILE_COULD_NOT_BE_OPENED,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_NOT_FOUND	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_FILE_NOT_FOUND,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_FILE_READ_ERROR	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_FILE_READ_ERROR,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_IDENTIFYING_TAG	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_IDENTIFYING_TAG,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_MISMATCHED_ELEMENT	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_MISMATCHED_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ATTRIBUTE	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_CDATA	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_CDATA,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_COMMENT	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_COMMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_DECLARATION	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_DECLARATION,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_ELEMENT	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_TEXT	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_TEXT,$/;"	e	enum:tinyxml2::XMLError
XML_ERROR_PARSING_UNKNOWN	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:tinyxml2::XMLError
XML_FILE_NAME	support/user_default/CCUserDefault.cpp	34;"	d	file:
XML_FILE_NAME	support/user_default/CCUserDefaultAndroid.cpp	33;"	d	file:
XML_NO_ATTRIBUTE	support/tinyxml2/tinyxml2.h	/^    XML_NO_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
XML_NO_ERROR	support/tinyxml2/tinyxml2.h	/^    XML_NO_ERROR = 0,$/;"	e	enum:tinyxml2::XMLError
XML_NO_TEXT_NODE	support/tinyxml2/tinyxml2.h	/^    XML_NO_TEXT_NODE$/;"	e	enum:tinyxml2::XMLError
XML_SUCCESS	support/tinyxml2/tinyxml2.h	/^    XML_SUCCESS = 0,$/;"	e	enum:tinyxml2::XMLError
XML_WRONG_ATTRIBUTE_TYPE	support/tinyxml2/tinyxml2.h	/^    XML_WRONG_ATTRIBUTE_TYPE,$/;"	e	enum:tinyxml2::XMLError
XmlSaxHander	platform/CCSAXParser.cpp	/^	XmlSaxHander():m_ccsaxParserImp(0){};$/;"	f	class:XmlSaxHander	access:public	signature:()
XmlSaxHander	platform/CCSAXParser.cpp	/^class XmlSaxHander : public tinyxml2::XMLVisitor$/;"	c	file:	inherits:tinyxml2::XMLVisitor
XmlSaxHander::Visit	platform/CCSAXParser.cpp	/^	virtual bool Visit( const tinyxml2::XMLText& text );$/;"	p	class:XmlSaxHander	file:	access:public	signature:( const tinyxml2::XMLText& text )
XmlSaxHander::Visit	platform/CCSAXParser.cpp	/^	virtual bool Visit( const tinyxml2::XMLUnknown&){ return true; }$/;"	f	class:XmlSaxHander	access:public	signature:( const tinyxml2::XMLUnknown&)
XmlSaxHander::Visit	platform/CCSAXParser.cpp	/^bool XmlSaxHander::Visit( const tinyxml2::XMLText& text )$/;"	f	class:XmlSaxHander	signature:( const tinyxml2::XMLText& text )
XmlSaxHander::VisitEnter	platform/CCSAXParser.cpp	/^	virtual bool VisitEnter( const tinyxml2::XMLElement& element, const tinyxml2::XMLAttribute* firstAttribute );$/;"	p	class:XmlSaxHander	file:	access:public	signature:( const tinyxml2::XMLElement& element, const tinyxml2::XMLAttribute* firstAttribute )
XmlSaxHander::VisitEnter	platform/CCSAXParser.cpp	/^bool XmlSaxHander::VisitEnter( const tinyxml2::XMLElement& element, const tinyxml2::XMLAttribute* firstAttribute )$/;"	f	class:XmlSaxHander	signature:( const tinyxml2::XMLElement& element, const tinyxml2::XMLAttribute* firstAttribute )
XmlSaxHander::VisitExit	platform/CCSAXParser.cpp	/^	virtual bool VisitExit( const tinyxml2::XMLElement& element );$/;"	p	class:XmlSaxHander	file:	access:public	signature:( const tinyxml2::XMLElement& element )
XmlSaxHander::VisitExit	platform/CCSAXParser.cpp	/^bool XmlSaxHander::VisitExit( const tinyxml2::XMLElement& element )$/;"	f	class:XmlSaxHander	signature:( const tinyxml2::XMLElement& element )
XmlSaxHander::XmlSaxHander	platform/CCSAXParser.cpp	/^	XmlSaxHander():m_ccsaxParserImp(0){};$/;"	f	class:XmlSaxHander	access:public	signature:()
XmlSaxHander::m_ccsaxParserImp	platform/CCSAXParser.cpp	/^	CCSAXParser *m_ccsaxParserImp;$/;"	m	class:XmlSaxHander	file:	access:private
XmlSaxHander::setCCSAXParserImp	platform/CCSAXParser.cpp	/^	void setCCSAXParserImp(CCSAXParser* parser)$/;"	f	class:XmlSaxHander	access:public	signature:(CCSAXParser* parser)
ZCALLBACK	support/zip_support/ioapi.h	117;"	d
ZCALLBACK	support/zip_support/ioapi.h	119;"	d
ZCLOSE64	support/zip_support/ioapi.h	182;"	d
ZERROR64	support/zip_support/ioapi.h	183;"	d
ZLIB_FILEFUNC_MODE_CREATE	support/zip_support/ioapi.h	112;"	d
ZLIB_FILEFUNC_MODE_EXISTING	support/zip_support/ioapi.h	111;"	d
ZLIB_FILEFUNC_MODE_READ	support/zip_support/ioapi.h	107;"	d
ZLIB_FILEFUNC_MODE_READWRITEFILTER	support/zip_support/ioapi.h	109;"	d
ZLIB_FILEFUNC_MODE_WRITE	support/zip_support/ioapi.h	108;"	d
ZLIB_FILEFUNC_SEEK_CUR	support/zip_support/ioapi.h	103;"	d
ZLIB_FILEFUNC_SEEK_END	support/zip_support/ioapi.h	104;"	d
ZLIB_FILEFUNC_SEEK_SET	support/zip_support/ioapi.h	105;"	d
ZOPEN64	support/zip_support/ioapi.h	191;"	d
ZPOS64_T	support/zip_support/ioapi.h	/^typedef  64BIT_INT_CUSTOM_TYPE ZPOS64_T;$/;"	t	namespace:cocos2d
ZPOS64_T	support/zip_support/ioapi.h	/^typedef uint64_t ZPOS64_T;$/;"	t	namespace:cocos2d
ZREAD64	support/zip_support/ioapi.h	178;"	d
ZSEEK64	support/zip_support/ioapi.h	193;"	d
ZTELL64	support/zip_support/ioapi.h	192;"	d
ZWRITE64	support/zip_support/ioapi.h	179;"	d
Z_BZIP2ED	support/zip_support/unzip.h	60;"	d
ZipEntryInfo	support/zip_support/ZipUtils.cpp	/^struct ZipEntryInfo$/;"	s	file:
ZipEntryInfo::pos	support/zip_support/ZipUtils.cpp	/^    unz_file_pos pos;$/;"	m	struct:ZipEntryInfo	file:	access:public
ZipEntryInfo::uncompressed_size	support/zip_support/ZipUtils.cpp	/^    uLong uncompressed_size;$/;"	m	struct:ZipEntryInfo	file:	access:public
ZipFile	support/zip_support/ZipUtils.cpp	/^ZipFile::ZipFile(const std::string &zipFile, const std::string &filter)$/;"	f	class:ZipFile	signature:(const std::string &zipFile, const std::string &filter)
ZipFile	support/zip_support/ZipUtils.h	/^        ZipFile(const std::string &zipFile, const std::string &filter = std::string());$/;"	p	class:cocos2d::ZipFile	access:public	signature:(const std::string &zipFile, const std::string &filter = std::string())
ZipFile	support/zip_support/ZipUtils.h	/^    class ZipFile$/;"	c	namespace:cocos2d
ZipFile::ZipFile	support/zip_support/ZipUtils.cpp	/^ZipFile::ZipFile(const std::string &zipFile, const std::string &filter)$/;"	f	class:ZipFile	signature:(const std::string &zipFile, const std::string &filter)
ZipFile::fileExists	support/zip_support/ZipUtils.cpp	/^bool ZipFile::fileExists(const std::string &fileName) const$/;"	f	class:ZipFile	signature:(const std::string &fileName) const
ZipFile::getFileData	support/zip_support/ZipUtils.cpp	/^unsigned char *ZipFile::getFileData(const std::string &fileName, unsigned long *pSize)$/;"	f	class:ZipFile	signature:(const std::string &fileName, unsigned long *pSize)
ZipFile::setFilter	support/zip_support/ZipUtils.cpp	/^bool ZipFile::setFilter(const std::string &filter)$/;"	f	class:ZipFile	signature:(const std::string &filter)
ZipFile::~ZipFile	support/zip_support/ZipUtils.cpp	/^ZipFile::~ZipFile()$/;"	f	class:ZipFile	signature:()
ZipFilePrivate	support/zip_support/ZipUtils.cpp	/^class ZipFilePrivate$/;"	c	file:
ZipFilePrivate::FileListContainer	support/zip_support/ZipUtils.cpp	/^    typedef std::map<std::string, struct ZipEntryInfo> FileListContainer;$/;"	t	class:ZipFilePrivate	file:	access:public
ZipFilePrivate::fileList	support/zip_support/ZipUtils.cpp	/^    FileListContainer fileList;$/;"	m	class:ZipFilePrivate	file:	access:public
ZipFilePrivate::zipFile	support/zip_support/ZipUtils.cpp	/^    unzFile zipFile;$/;"	m	class:ZipFilePrivate	file:	access:public
ZipUtils	support/zip_support/ZipUtils.h	/^    class ZipUtils$/;"	c	namespace:cocos2d
ZipUtils::ccInflateCCZFile	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateCCZFile(const char *path, unsigned char **out)$/;"	f	class:ZipUtils	signature:(const char *path, unsigned char **out)
ZipUtils::ccInflateGZipFile	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateGZipFile(const char *path, unsigned char **out)$/;"	f	class:ZipUtils	signature:(const char *path, unsigned char **out)
ZipUtils::ccInflateMemory	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateMemory(unsigned char *in, unsigned int inLength, unsigned char **out)$/;"	f	class:ZipUtils	signature:(unsigned char *in, unsigned int inLength, unsigned char **out)
ZipUtils::ccInflateMemoryWithHint	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateMemoryWithHint(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int *outLength, unsigned int outLenghtHint)$/;"	f	class:ZipUtils	signature:(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int *outLength, unsigned int outLenghtHint)
ZipUtils::ccInflateMemoryWithHint	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateMemoryWithHint(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int outLengthHint)$/;"	f	class:ZipUtils	signature:(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int outLengthHint)
_AsyncStruct	textures/CCTextureCache.cpp	/^typedef struct _AsyncStruct$/;"	s	file:
_AsyncStruct::filename	textures/CCTextureCache.cpp	/^    std::string            filename;$/;"	m	struct:_AsyncStruct	file:	access:public
_AsyncStruct::selector	textures/CCTextureCache.cpp	/^    SEL_CallFuncO        selector;$/;"	m	struct:_AsyncStruct	file:	access:public
_AsyncStruct::target	textures/CCTextureCache.cpp	/^    CCObject    *target;$/;"	m	struct:_AsyncStruct	file:	access:public
_BMFontDef	label_nodes/CCLabelBMFont.h	/^typedef struct _BMFontDef {$/;"	s
_BMFontDef::charID	label_nodes/CCLabelBMFont.h	/^    unsigned int charID;$/;"	m	struct:_BMFontDef	access:public
_BMFontDef::rect	label_nodes/CCLabelBMFont.h	/^    CCRect rect;$/;"	m	struct:_BMFontDef	access:public
_BMFontDef::xAdvance	label_nodes/CCLabelBMFont.h	/^    short xAdvance;$/;"	m	struct:_BMFontDef	access:public
_BMFontDef::xOffset	label_nodes/CCLabelBMFont.h	/^    short xOffset;$/;"	m	struct:_BMFontDef	access:public
_BMFontDef::yOffset	label_nodes/CCLabelBMFont.h	/^    short yOffset;$/;"	m	struct:_BMFontDef	access:public
_BMFontPadding	label_nodes/CCLabelBMFont.h	/^typedef struct _BMFontPadding {$/;"	s
_BMFontPadding::bottom	label_nodes/CCLabelBMFont.h	/^    int bottom;$/;"	m	struct:_BMFontPadding	access:public
_BMFontPadding::left	label_nodes/CCLabelBMFont.h	/^    int    left;$/;"	m	struct:_BMFontPadding	access:public
_BMFontPadding::right	label_nodes/CCLabelBMFont.h	/^    int right;$/;"	m	struct:_BMFontPadding	access:public
_BMFontPadding::top	label_nodes/CCLabelBMFont.h	/^    int top;$/;"	m	struct:_BMFontPadding	access:public
_CASTASGN	support/data_support/utlist.h	87;"	d
_FILE_OFFSET_BIT	support/zip_support/ioapi.h	41;"	d
_FontDefHashElement	label_nodes/CCLabelBMFont.h	/^typedef struct _FontDefHashElement$/;"	s
_FontDefHashElement::fontDef	label_nodes/CCLabelBMFont.h	/^	ccBMFontDef		fontDef;	\/\/ font definition$/;"	m	struct:_FontDefHashElement	access:public
_FontDefHashElement::hh	label_nodes/CCLabelBMFont.h	/^	UT_hash_handle	hh;$/;"	m	struct:_FontDefHashElement	access:public
_FontDefHashElement::key	label_nodes/CCLabelBMFont.h	/^	unsigned int	key;		\/\/ key. Font Unicode value$/;"	m	struct:_FontDefHashElement	access:public
_ImageInfo	textures/CCTextureCache.cpp	/^typedef struct _ImageInfo$/;"	s	file:
_ImageInfo::asyncStruct	textures/CCTextureCache.cpp	/^    AsyncStruct *asyncStruct;$/;"	m	struct:_ImageInfo	file:	access:public
_ImageInfo::image	textures/CCTextureCache.cpp	/^    CCImage        *image;$/;"	m	struct:_ImageInfo	file:	access:public
_ImageInfo::imageType	textures/CCTextureCache.cpp	/^    CCImage::EImageFormat imageType;$/;"	m	struct:_ImageInfo	file:	access:public
_KerningHashElement	label_nodes/CCLabelBMFont.h	/^typedef struct _KerningHashElement$/;"	s
_KerningHashElement::amount	label_nodes/CCLabelBMFont.h	/^	int				amount;$/;"	m	struct:_KerningHashElement	access:public
_KerningHashElement::hh	label_nodes/CCLabelBMFont.h	/^	UT_hash_handle	hh;$/;"	m	struct:_KerningHashElement	access:public
_KerningHashElement::key	label_nodes/CCLabelBMFont.h	/^	int				key;		\/\/ key for the hash. 16-bit for 1st element, 16-bit for 2nd element$/;"	m	struct:_KerningHashElement	access:public
_LARGEFILE64_SOURCE	support/zip_support/ioapi.h	38;"	d
_NEXT	support/data_support/utlist.h	82;"	d
_NEXTASGN	support/data_support/utlist.h	83;"	d
_PREV	support/data_support/utlist.h	84;"	d
_PREVASGN	support/data_support/utlist.h	85;"	d
_PVRTexHeader	textures/CCTexturePVR.cpp	/^typedef struct _PVRTexHeader$/;"	s	file:
_PVRTexHeader::bitmaskAlpha	textures/CCTexturePVR.cpp	/^    unsigned int bitmaskAlpha;$/;"	m	struct:_PVRTexHeader	file:	access:public
_PVRTexHeader::bitmaskBlue	textures/CCTexturePVR.cpp	/^    unsigned int bitmaskBlue;$/;"	m	struct:_PVRTexHeader	file:	access:public
_PVRTexHeader::bitmaskGreen	textures/CCTexturePVR.cpp	/^    unsigned int bitmaskGreen;$/;"	m	struct:_PVRTexHeader	file:	access:public
_PVRTexHeader::bitmaskRed	textures/CCTexturePVR.cpp	/^    unsigned int bitmaskRed;$/;"	m	struct:_PVRTexHeader	file:	access:public
_PVRTexHeader::bpp	textures/CCTexturePVR.cpp	/^    unsigned int bpp;$/;"	m	struct:_PVRTexHeader	file:	access:public
_PVRTexHeader::dataLength	textures/CCTexturePVR.cpp	/^    unsigned int dataLength;$/;"	m	struct:_PVRTexHeader	file:	access:public
_PVRTexHeader::flags	textures/CCTexturePVR.cpp	/^    unsigned int flags;$/;"	m	struct:_PVRTexHeader	file:	access:public
_PVRTexHeader::headerLength	textures/CCTexturePVR.cpp	/^    unsigned int headerLength;$/;"	m	struct:_PVRTexHeader	file:	access:public
_PVRTexHeader::height	textures/CCTexturePVR.cpp	/^    unsigned int height;$/;"	m	struct:_PVRTexHeader	file:	access:public
_PVRTexHeader::numMipmaps	textures/CCTexturePVR.cpp	/^    unsigned int numMipmaps;$/;"	m	struct:_PVRTexHeader	file:	access:public
_PVRTexHeader::numSurfs	textures/CCTexturePVR.cpp	/^    unsigned int numSurfs;$/;"	m	struct:_PVRTexHeader	file:	access:public
_PVRTexHeader::pvrTag	textures/CCTexturePVR.cpp	/^    unsigned int pvrTag;$/;"	m	struct:_PVRTexHeader	file:	access:public
_PVRTexHeader::width	textures/CCTexturePVR.cpp	/^    unsigned int width;$/;"	m	struct:_PVRTexHeader	file:	access:public
_RS	support/data_support/utlist.h	86;"	d
_SV	support/data_support/utlist.h	81;"	d
_USE_MATH_DEFINES	include/ccMacros.h	31;"	d
_ZLIBIOAPI64_H	support/zip_support/ioapi.h	22;"	d
__ACTIONS_CCACTION_H__	actions/CCAction.h	28;"	d
__ACTION_CCACTION_MANAGER_H__	actions/CCActionManager.h	29;"	d
__ACTION_CCEASE_ACTION_H__	actions/CCActionEase.h	27;"	d
__ACTION_CCGRID3D_ACTION_H__	actions/CCActionGrid3D.h	26;"	d
__ACTION_CCGRID_ACTION_H__	actions/CCActionGrid.h	26;"	d
__ACTION_CCINTERVAL_ACTION_H__	actions/CCActionInterval.h	28;"	d
__ACTION_CCPAGETURN3D_ACTION_H__	actions/CCActionPageTurn3D.h	26;"	d
__ACTION_CCPROGRESS_TIMER_H__	actions/CCActionProgressTimer.h	26;"	d
__ACTION_CCTILEDGRID_ACTION_H__	actions/CCActionTiledGrid.h	26;"	d
__AUTORELEASEPOOL_H__	cocoa/CCAutoreleasePool.h	25;"	d
__CCACCELEROMETER_DELEGATE_H__	platform/CCAccelerometerDelegate.h	26;"	d
__CCACTIONTWEEN_H__	actions/CCActionTween.h	26;"	d
__CCACTION_CATMULLROM_H__	actions/CCActionCatmullRom.h	38;"	d
__CCARRAY_H__	cocoa/CCArray.h	26;"	d
__CCATLAS_NODE_H__	base_nodes/CCAtlasNode.h	28;"	d
__CCAffineTransformMake	cocoa/CCAffineTransform.cpp	/^CCAffineTransform __CCAffineTransformMake(float a, float b, float c, float d, float tx, float ty)$/;"	f	signature:(float a, float b, float c, float d, float tx, float ty)
__CCAffineTransformMake	cocoa/CCAffineTransform.h	/^CC_DLL CCAffineTransform __CCAffineTransformMake(float a, float b, float c, float d, float tx, float ty);$/;"	p	signature:(float a, float b, float c, float d, float tx, float ty)
__CCBITMAP_FONT_ATLAS_H__	label_nodes/CCLabelBMFont.h	34;"	d
__CCBOOL_H__	cocoa/CCBool.h	26;"	d
__CCCAMERA_ACTION_H__	actions/CCActionCamera.h	27;"	d
__CCCAMERA_H__	CCCamera.h	28;"	d
__CCCONFIGURATION_H__	CCConfiguration.h	27;"	d
__CCCONFIG_H__	include/ccConfig.h	28;"	d
__CCDEVICE_H__	platform/CCDevice.h	2;"	d
__CCDICTIONARY_H__	cocoa/CCDictionary.h	26;"	d
__CCDIRECTOR_H__	CCDirector.h	28;"	d
__CCDOUBLE_H__	cocoa/CCDouble.h	26;"	d
__CCDRAWING_PRIMITIVES__	draw_nodes/CCDrawingPrimitives.h	40;"	d
__CCDRAWNODES_CCDRAW_NODE_H__	draw_nodes/CCDrawNode.h	31;"	d
__CCEGLVIEWPROTOCOL_H__	platform/CCEGLViewProtocol.h	2;"	d
__CCEVENT_TYPE_H__	include/CCEventType.h	3;"	d
__CCFLOAT_H__	cocoa/CCFloat.h	26;"	d
__CCGEMETRY_H__	cocoa/CCGeometry.h	26;"	d
__CCGLPROGRAM_H__	shaders/CCGLProgram.h	29;"	d
__CCGLSTATE_H__	shaders/ccGLStateCache.h	28;"	d
__CCINSTANT_ACTION_H__	actions/CCActionInstant.h	28;"	d
__CCINTEGER_H__	cocoa/CCInteger.h	2;"	d
__CCKEYPAD_DELEGATE_H__	keypad_dispatcher/CCKeypadDelegate.h	26;"	d
__CCKEYPAD_DISPATCHER_H__	keypad_dispatcher/CCKeypadDispatcher.h	26;"	d
__CCLABELTTF_H__	label_nodes/CCLabelTTF.h	26;"	d
__CCLABEL_ATLAS_H__	label_nodes/CCLabelAtlas.h	27;"	d
__CCLAYER_H__	layers_scenes_transitions_nodes/CCLayer.h	28;"	d
__CCLOGWITHFUNCTION	platform/CCPlatformMacros.h	206;"	d
__CCMACROS_H__	include/ccMacros.h	28;"	d
__CCMENU_H_	menu_nodes/CCMenu.h	26;"	d
__CCMENU_ITEM_H__	menu_nodes/CCMenuItem.h	28;"	d
__CCMOTION_STREAK_H__	misc_nodes/CCMotionStreak.h	26;"	d
__CCNOTIFICATIONCENTER_H__	support/CCNotificationCenter.h	26;"	d
__CCOBJECT_H__	cocoa/CCObject.h	26;"	d
__CCPAGE_TURN_TRANSITION_H__	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	27;"	d
__CCPARALLAX_NODE_H__	tilemap_parallax_nodes/CCParallaxNode.h	27;"	d
__CCPARTICLEBATCHNODE_H__	particle_nodes/CCParticleBatchNode.h	30;"	d
__CCPARTICLE_EXAMPLE_H__	particle_nodes/CCParticleExamples.h	27;"	d
__CCPARTICLE_SYSTEM_H__	particle_nodes/CCParticleSystem.h	27;"	d
__CCPROTOCOLS_H__	include/CCProtocols.h	27;"	d
__CCPVRTEXTURE_H__	textures/CCTexturePVR.h	27;"	d
__CCPointApplyAffineTransform	cocoa/CCAffineTransform.cpp	/^CCPoint __CCPointApplyAffineTransform(const CCPoint& point, const CCAffineTransform& t)$/;"	f	signature:(const CCPoint& point, const CCAffineTransform& t)
__CCPointApplyAffineTransform	cocoa/CCAffineTransform.h	/^CC_DLL CCPoint __CCPointApplyAffineTransform(const CCPoint& point, const CCAffineTransform& t);$/;"	p	signature:(const CCPoint& point, const CCAffineTransform& t)
__CCRENDER_TEXTURE_H__	misc_nodes/CCRenderTexture.h	26;"	d
__CCSAXPARSER_H__	platform/CCSAXParser.h	25;"	d
__CCSCENE_H__	layers_scenes_transitions_nodes/CCScene.h	28;"	d
__CCSCHEDULER_H__	CCScheduler.h	28;"	d
__CCSHADERCACHE_H__	shaders/CCShaderCache.h	28;"	d
__CCSHADER_H__	shaders/ccShaders.h	26;"	d
__CCSTRING_H__	cocoa/CCString.h	25;"	d
__CCSizeApplyAffineTransform	cocoa/CCAffineTransform.cpp	/^CCSize __CCSizeApplyAffineTransform(const CCSize& size, const CCAffineTransform& t)$/;"	f	signature:(const CCSize& size, const CCAffineTransform& t)
__CCSizeApplyAffineTransform	cocoa/CCAffineTransform.h	/^CC_DLL CCSize __CCSizeApplyAffineTransform(const CCSize& size, const CCAffineTransform& t);$/;"	p	signature:(const CCSize& size, const CCAffineTransform& t)
__CCTEXTURE2D_H__	textures/CCTexture2D.h	27;"	d
__CCTEXTURE_ATLAS_H__	textures/CCTextureAtlas.h	28;"	d
__CCTEXTURE_CACHE_H__	textures/CCTextureCache.h	28;"	d
__CCTILE_MAP_ATLAS__	tilemap_parallax_nodes/CCTileMapAtlas.h	27;"	d
__CCTMX_LAYER_H__	tilemap_parallax_nodes/CCTMXLayer.h	27;"	d
__CCTMX_OBJECT_GROUP_H__	tilemap_parallax_nodes/CCTMXObjectGroup.h	28;"	d
__CCTMX_TILE_MAP_H__	tilemap_parallax_nodes/CCTMXTiledMap.h	27;"	d
__CCTRANSITIONPROGRESS_H__	layers_scenes_transitions_nodes/CCTransitionProgress.h	28;"	d
__CCTRANSITION_H__	layers_scenes_transitions_nodes/CCTransition.h	28;"	d
__CCTYPES_H__	include/ccTypes.h	28;"	d
__CCVERTEX_H__	support/CCVertex.h	26;"	d
__CC_ANIMATION_CACHE_H__	sprite_nodes/CCAnimationCache.h	27;"	d
__CC_ANIMATION_H__	sprite_nodes/CCAnimation.h	27;"	d
__CC_APPLICATION_PROTOCOL_H__	platform/CCApplicationProtocol.h	2;"	d
__CC_COMMON_H__	platform/CCCommon.h	26;"	d
__CC_FILEUTILS_H__	platform/CCFileUtils.h	25;"	d
__CC_IMAGE_H__	platform/CCImage.h	26;"	d
__CC_IME_DELEGATE_H__	text_input_node/CCIMEDelegate.h	26;"	d
__CC_IME_DISPATCHER_H__	text_input_node/CCIMEDispatcher.h	26;"	d
__CC_PARTICLE_SYSTEM_QUAD_H__	particle_nodes/CCParticleSystemQuad.h	28;"	d
__CC_PLATFORM_CONFIG_H__	platform/CCPlatformConfig.h	26;"	d
__CC_PLATFORM_MACROS_H__	platform/CCPlatformMacros.h	25;"	d
__CC_PLATFORM_THREAD_H__	platform/CCThread.h	26;"	d
__CC_SET_H__	cocoa/CCSet.h	26;"	d
__CC_SPRITE_BATCH_NODE_H__	sprite_nodes/CCSpriteBatchNode.h	29;"	d
__CC_TEXT_FIELD_H__	text_input_node/CCTextFieldTTF.h	26;"	d
__CC_TM_XML_PARSER__	tilemap_parallax_nodes/CCTMXXMLParser.h	29;"	d
__CC_TOUCH_H__	touch_dispatcher/CCTouch.h	26;"	d
__CC_ZONE_H__	cocoa/CCZone.h	26;"	d
__COCOA_CGAFFINETRANSFORM_H__	cocoa/CCAffineTransform.h	26;"	d
__COCOS2D_H__	include/cocos2d.h	28;"	d
__EFFECTS_CCGRABBER_H__	effects/CCGrabber.h	26;"	d
__EFFECTS_CCGRID_H__	effects/CCGrid.h	26;"	d
__MISCNODE_CCCLIPPING_NODE_H__	misc_nodes/CCClippingNode.h	29;"	d
__MISC_NODE_CCPROGRESS_TIMER_H__	misc_nodes/CCProgressTimer.h	26;"	d
__NEON_MATRIX_IMPL_H__	kazmath/include/kazmath/neon_matrix_impl.h	25;"	d
__PLATFOMR_CCNS_H__	cocoa/CCNS.h	26;"	d
__PLATFORM_CCNODE_H__	base_nodes/CCNode.h	29;"	d
__PLATFORM_H__	platform/platform.h	26;"	d
__SCRIPT_SUPPORT_H__	script_support/CCScriptSupport.h	26;"	d
__SPITE_NODE_CCSPRITE_H__	sprite_nodes/CCSprite.h	28;"	d
__SPRITE_CCSPRITE_FRAME_CACHE_H__	sprite_nodes/CCSpriteFrameCache.h	30;"	d
__SPRITE_CCSPRITE_FRAME_H__	sprite_nodes/CCSpriteFrame.h	28;"	d
__SUPPORT_BASE64_H__	support/base64.h	26;"	d
__SUPPORT_CCPROFILING_H__	support/CCProfiling.h	26;"	d
__SUPPORT_CCUSERDEFAULT_H__	support/user_default/CCUserDefault.h	25;"	d
__SUPPORT_CC_UTILS_H__	support/ccUtils.h	25;"	d
__SUPPORT_CGPOINTEXTENSION_H__	support/CCPointExtension.h	28;"	d
__SUPPORT_DATA_SUPPORT_TGALIB_H__	support/image_support/TGAlib.h	26;"	d
__SUPPORT_DATA_SUPPORT_UTHASH_H__	support/data_support/uthash.h	25;"	d
__SUPPORT_DATA_SUPPORT_UTLIST_H__	support/data_support/utlist.h	26;"	d
__SUPPORT_TRANSFORM_UTILS_H__	support/TransformUtils.h	27;"	d
__SUPPORT_ZIPUTILS_H__	support/zip_support/ZipUtils.h	25;"	d
__TOUCH_DISPATCHER_CCTOUCH_DISPATCHER_H__	touch_dispatcher/CCTouchDispatcher.h	27;"	d
__TOUCH_DISPATCHER_CCTOUCH_HANDLER_H__	touch_dispatcher/CCTouchHandler.h	27;"	d
__TOUCH_DISPATHCHER_CCTOUCH_DELEGATE_PROTOCOL_H__	touch_dispatcher/CCTouchDelegateProtocol.h	27;"	d
__USE_FILE_OFFSET64	support/zip_support/ioapi.h	32;"	d
__USE_LARGEFILE64	support/zip_support/ioapi.h	35;"	d
__anon30::data	platform/CCImageCommon_cpp.h	/^    unsigned char* data;$/;"	m	struct:__anon30	access:public
__anon30::offset	platform/CCImageCommon_cpp.h	/^    int offset;$/;"	m	struct:__anon30	access:public
__anon30::size	platform/CCImageCommon_cpp.h	/^    int size;$/;"	m	struct:__anon30	access:public
__anon46::begin	text_input_node/CCIMEDelegate.h	/^    CCRect  begin;              \/\/ the soft keyboard rectangle when animation begins$/;"	m	struct:__anon46	access:public
__anon46::duration	text_input_node/CCIMEDelegate.h	/^    float     duration;           \/\/ the soft keyboard animation duration$/;"	m	struct:__anon46	access:public
__anon46::end	text_input_node/CCIMEDelegate.h	/^    CCRect  end;                \/\/ the soft keyboard rectangle when animation ends$/;"	m	struct:__anon46	access:public
__anon56::channelType	textures/CCTexturePVR.cpp	/^	uint32_t channelType;$/;"	m	struct:__anon56	file:	access:public
__anon56::colorSpace	textures/CCTexturePVR.cpp	/^	uint32_t colorSpace;$/;"	m	struct:__anon56	file:	access:public
__anon56::depth	textures/CCTexturePVR.cpp	/^	uint32_t depth;$/;"	m	struct:__anon56	file:	access:public
__anon56::flags	textures/CCTexturePVR.cpp	/^	uint32_t flags;$/;"	m	struct:__anon56	file:	access:public
__anon56::height	textures/CCTexturePVR.cpp	/^	uint32_t height;$/;"	m	struct:__anon56	file:	access:public
__anon56::metadataLength	textures/CCTexturePVR.cpp	/^	uint32_t metadataLength;$/;"	m	struct:__anon56	file:	access:public
__anon56::numberOfFaces	textures/CCTexturePVR.cpp	/^	uint32_t numberOfFaces;$/;"	m	struct:__anon56	file:	access:public
__anon56::numberOfMipmaps	textures/CCTexturePVR.cpp	/^	uint32_t numberOfMipmaps;$/;"	m	struct:__anon56	file:	access:public
__anon56::numberOfSurfaces	textures/CCTexturePVR.cpp	/^	uint32_t numberOfSurfaces;$/;"	m	struct:__anon56	file:	access:public
__anon56::pixelFormat	textures/CCTexturePVR.cpp	/^	uint64_t pixelFormat;$/;"	m	struct:__anon56	file:	access:public
__anon56::version	textures/CCTexturePVR.cpp	/^	uint32_t version;$/;"	m	struct:__anon56	file:	access:public
__anon56::width	textures/CCTexturePVR.cpp	/^	uint32_t width;$/;"	m	struct:__anon56	file:	access:public
__anon8::delay	include/ccTypes.h	/^    float delay;$/;"	m	struct:__anon8	access:public
__anon8::size	include/ccTypes.h	/^    CCSize size; $/;"	m	struct:__anon8	access:public
__anon8::texCoords	include/ccTypes.h	/^    ccT2F_Quad texCoords;$/;"	m	struct:__anon8	access:public
__cocos2dx__ccUTF8__	support/ccUTF8.h	9;"	d
__firePngData	particle_nodes/firePngData.h	/^const unsigned char __firePngData[] = {$/;"	v
__t	draw_nodes/CCDrawNode.cpp	/^static inline ccTex2F __t(const ccVertex2F &v)$/;"	f	file:	signature:(const ccVertex2F &v)
__v2f	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F __v2f(const CCPoint &v)$/;"	f	file:	signature:(const CCPoint &v)
_accumulator	support/tinyxml2/tinyxml2.h	/^    DynArray< char, 20 > _accumulator;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_allocated	support/tinyxml2/tinyxml2.h	/^    int _allocated;		\/\/ objects allocated$/;"	m	class:tinyxml2::DynArray	access:private
_attributePool	support/tinyxml2/tinyxml2.h	/^    MemPoolT< sizeof(XMLAttribute) > _attributePool;$/;"	m	class:tinyxml2::XMLDocument	access:private
_base64Decode	support/base64.cpp	/^int _base64Decode( unsigned char *input, unsigned int input_len, unsigned char *output, unsigned int *output_len )$/;"	f	namespace:cocos2d	signature:( unsigned char *input, unsigned int input_len, unsigned char *output, unsigned int *output_len )
_base64Decode	support/base64.cpp	/^int _base64Decode( unsigned char *input, unsigned int input_len, unsigned char *output, unsigned int *output_len );$/;"	p	namespace:cocos2d	file:	signature:( unsigned char *input, unsigned int input_len, unsigned char *output, unsigned int *output_len )
_blockPtrs	support/tinyxml2/tinyxml2.h	/^    DynArray< Block*, 10 > _blockPtrs;$/;"	m	class:tinyxml2::MemPoolT	access:private
_buffer	support/tinyxml2/tinyxml2.h	/^    DynArray< char, 20 > _buffer;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_calcCharCount	text_input_node/CCTextFieldTTF.cpp	/^static int _calcCharCount(const char * pszText)$/;"	f	file:	signature:(const char * pszText)
_cascadeColorEnabled	base_nodes/CCNode.h	/^	bool		_cascadeColorEnabled;$/;"	m	class:CCNodeRGBA	access:protected
_cascadeColorEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^	bool		_cascadeOpacityEnabled, _cascadeColorEnabled;$/;"	m	class:CCLayerRGBA	access:protected
_cascadeOpacityEnabled	base_nodes/CCNode.h	/^    bool        _cascadeOpacityEnabled;$/;"	m	class:CCNodeRGBA	access:protected
_cascadeOpacityEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^	bool		_cascadeOpacityEnabled, _cascadeColorEnabled;$/;"	m	class:CCLayerRGBA	access:protected
_ccArray	support/data_support/ccCArray.h	/^typedef struct _ccArray {$/;"	s
_ccArray::arr	support/data_support/ccCArray.h	/^	CCObject** arr;$/;"	m	struct:_ccArray	access:public
_ccArray::max	support/data_support/ccCArray.h	/^	unsigned int num, max;$/;"	m	struct:_ccArray	access:public
_ccArray::num	support/data_support/ccCArray.h	/^	unsigned int num, max;$/;"	m	struct:_ccArray	access:public
_ccBezierConfig	actions/CCActionInterval.h	/^typedef struct _ccBezierConfig {$/;"	s
_ccBezierConfig::controlPoint_1	actions/CCActionInterval.h	/^    CCPoint controlPoint_1;$/;"	m	struct:_ccBezierConfig	access:public
_ccBezierConfig::controlPoint_2	actions/CCActionInterval.h	/^    CCPoint controlPoint_2;$/;"	m	struct:_ccBezierConfig	access:public
_ccBezierConfig::endPosition	actions/CCActionInterval.h	/^    CCPoint endPosition;$/;"	m	struct:_ccBezierConfig	access:public
_ccBlendFunc	include/ccTypes.h	/^typedef struct _ccBlendFunc$/;"	s
_ccBlendFunc::dst	include/ccTypes.h	/^    GLenum dst;$/;"	m	struct:_ccBlendFunc	access:public
_ccBlendFunc::src	include/ccTypes.h	/^    GLenum src;$/;"	m	struct:_ccBlendFunc	access:public
_ccCArray	support/data_support/ccCArray.h	/^typedef struct _ccCArray {$/;"	s
_ccCArray::arr	support/data_support/ccCArray.h	/^    void** arr;$/;"	m	struct:_ccCArray	access:public
_ccCArray::max	support/data_support/ccCArray.h	/^    unsigned int num, max;$/;"	m	struct:_ccCArray	access:public
_ccCArray::num	support/data_support/ccCArray.h	/^    unsigned int num, max;$/;"	m	struct:_ccCArray	access:public
_ccColor3B	include/ccTypes.h	/^typedef struct _ccColor3B$/;"	s
_ccColor3B::b	include/ccTypes.h	/^    GLubyte b;$/;"	m	struct:_ccColor3B	access:public
_ccColor3B::g	include/ccTypes.h	/^    GLubyte g;$/;"	m	struct:_ccColor3B	access:public
_ccColor3B::r	include/ccTypes.h	/^    GLubyte r;$/;"	m	struct:_ccColor3B	access:public
_ccColor4B	include/ccTypes.h	/^typedef struct _ccColor4B$/;"	s
_ccColor4B::a	include/ccTypes.h	/^    GLubyte a;$/;"	m	struct:_ccColor4B	access:public
_ccColor4B::b	include/ccTypes.h	/^    GLubyte b;$/;"	m	struct:_ccColor4B	access:public
_ccColor4B::g	include/ccTypes.h	/^    GLubyte g;$/;"	m	struct:_ccColor4B	access:public
_ccColor4B::r	include/ccTypes.h	/^    GLubyte r;$/;"	m	struct:_ccColor4B	access:public
_ccColor4F	include/ccTypes.h	/^typedef struct _ccColor4F {$/;"	s
_ccColor4F::a	include/ccTypes.h	/^    GLfloat a;$/;"	m	struct:_ccColor4F	access:public
_ccColor4F::b	include/ccTypes.h	/^    GLfloat b;$/;"	m	struct:_ccColor4F	access:public
_ccColor4F::g	include/ccTypes.h	/^    GLfloat g;$/;"	m	struct:_ccColor4F	access:public
_ccColor4F::r	include/ccTypes.h	/^    GLfloat r;$/;"	m	struct:_ccColor4F	access:public
_ccPVRTexturePixelFormatInfo	textures/CCTexturePVR.h	/^typedef struct _ccPVRTexturePixelFormatInfo {$/;"	s
_ccPVRTexturePixelFormatInfo::alpha	textures/CCTexturePVR.h	/^	bool alpha;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
_ccPVRTexturePixelFormatInfo::bpp	textures/CCTexturePVR.h	/^	uint32_t bpp;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
_ccPVRTexturePixelFormatInfo::ccPixelFormat	textures/CCTexturePVR.h	/^	CCTexture2DPixelFormat ccPixelFormat;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
_ccPVRTexturePixelFormatInfo::compressed	textures/CCTexturePVR.h	/^	bool compressed;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
_ccPVRTexturePixelFormatInfo::format	textures/CCTexturePVR.h	/^	GLenum format;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
_ccPVRTexturePixelFormatInfo::internalFormat	textures/CCTexturePVR.h	/^	GLenum internalFormat;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
_ccPVRTexturePixelFormatInfo::type	textures/CCTexturePVR.h	/^	GLenum type;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
_ccPointSprite	include/ccTypes.h	/^typedef struct _ccPointSprite$/;"	s
_ccPointSprite::color	include/ccTypes.h	/^    ccColor4B    color;        \/\/ 4 bytes$/;"	m	struct:_ccPointSprite	access:public
_ccPointSprite::pos	include/ccTypes.h	/^    ccVertex2F    pos;        \/\/ 8 bytes$/;"	m	struct:_ccPointSprite	access:public
_ccPointSprite::size	include/ccTypes.h	/^    GLfloat        size;        \/\/ 4 bytes$/;"	m	struct:_ccPointSprite	access:public
_ccQuad2	include/ccTypes.h	/^typedef struct _ccQuad2 {$/;"	s
_ccQuad2::bl	include/ccTypes.h	/^    ccVertex2F        bl;$/;"	m	struct:_ccQuad2	access:public
_ccQuad2::br	include/ccTypes.h	/^    ccVertex2F        br;$/;"	m	struct:_ccQuad2	access:public
_ccQuad2::tl	include/ccTypes.h	/^    ccVertex2F        tl;$/;"	m	struct:_ccQuad2	access:public
_ccQuad2::tr	include/ccTypes.h	/^    ccVertex2F        tr;$/;"	m	struct:_ccQuad2	access:public
_ccQuad3	include/ccTypes.h	/^typedef struct _ccQuad3 {$/;"	s
_ccQuad3::bl	include/ccTypes.h	/^    ccVertex3F        bl;$/;"	m	struct:_ccQuad3	access:public
_ccQuad3::br	include/ccTypes.h	/^    ccVertex3F        br;$/;"	m	struct:_ccQuad3	access:public
_ccQuad3::tl	include/ccTypes.h	/^    ccVertex3F        tl;$/;"	m	struct:_ccQuad3	access:public
_ccQuad3::tr	include/ccTypes.h	/^    ccVertex3F        tr;$/;"	m	struct:_ccQuad3	access:public
_ccT2F_Quad	include/ccTypes.h	/^typedef struct _ccT2F_Quad$/;"	s
_ccT2F_Quad::bl	include/ccTypes.h	/^    ccTex2F    bl;$/;"	m	struct:_ccT2F_Quad	access:public
_ccT2F_Quad::br	include/ccTypes.h	/^    ccTex2F    br;$/;"	m	struct:_ccT2F_Quad	access:public
_ccT2F_Quad::tl	include/ccTypes.h	/^    ccTex2F    tl;$/;"	m	struct:_ccT2F_Quad	access:public
_ccT2F_Quad::tr	include/ccTypes.h	/^    ccTex2F    tr;$/;"	m	struct:_ccT2F_Quad	access:public
_ccTex2F	include/ccTypes.h	/^typedef struct _ccTex2F {$/;"	s
_ccTex2F::u	include/ccTypes.h	/^     GLfloat u;$/;"	m	struct:_ccTex2F	access:public
_ccTex2F::v	include/ccTypes.h	/^     GLfloat v;$/;"	m	struct:_ccTex2F	access:public
_ccTexParams	textures/CCTexture2D.h	/^typedef struct _ccTexParams {$/;"	s
_ccTexParams::magFilter	textures/CCTexture2D.h	/^    GLuint    magFilter;$/;"	m	struct:_ccTexParams	access:public
_ccTexParams::minFilter	textures/CCTexture2D.h	/^    GLuint    minFilter;$/;"	m	struct:_ccTexParams	access:public
_ccTexParams::wrapS	textures/CCTexture2D.h	/^    GLuint    wrapS;$/;"	m	struct:_ccTexParams	access:public
_ccTexParams::wrapT	textures/CCTexture2D.h	/^    GLuint    wrapT;$/;"	m	struct:_ccTexParams	access:public
_ccV2F_C4B_T2F	include/ccTypes.h	/^typedef struct _ccV2F_C4B_T2F$/;"	s
_ccV2F_C4B_T2F::colors	include/ccTypes.h	/^    ccColor4B        colors;$/;"	m	struct:_ccV2F_C4B_T2F	access:public
_ccV2F_C4B_T2F::texCoords	include/ccTypes.h	/^    ccTex2F            texCoords;$/;"	m	struct:_ccV2F_C4B_T2F	access:public
_ccV2F_C4B_T2F::vertices	include/ccTypes.h	/^    ccVertex2F        vertices;$/;"	m	struct:_ccV2F_C4B_T2F	access:public
_ccV2F_C4B_T2F_Quad	include/ccTypes.h	/^typedef struct _ccV2F_C4B_T2F_Quad$/;"	s
_ccV2F_C4B_T2F_Quad::bl	include/ccTypes.h	/^    ccV2F_C4B_T2F    bl;$/;"	m	struct:_ccV2F_C4B_T2F_Quad	access:public
_ccV2F_C4B_T2F_Quad::br	include/ccTypes.h	/^    ccV2F_C4B_T2F    br;$/;"	m	struct:_ccV2F_C4B_T2F_Quad	access:public
_ccV2F_C4B_T2F_Quad::tl	include/ccTypes.h	/^    ccV2F_C4B_T2F    tl;$/;"	m	struct:_ccV2F_C4B_T2F_Quad	access:public
_ccV2F_C4B_T2F_Quad::tr	include/ccTypes.h	/^    ccV2F_C4B_T2F    tr;$/;"	m	struct:_ccV2F_C4B_T2F_Quad	access:public
_ccV2F_C4B_T2F_Triangle	include/ccTypes.h	/^typedef struct _ccV2F_C4B_T2F_Triangle$/;"	s
_ccV2F_C4B_T2F_Triangle::a	include/ccTypes.h	/^	ccV2F_C4B_T2F a;$/;"	m	struct:_ccV2F_C4B_T2F_Triangle	access:public
_ccV2F_C4B_T2F_Triangle::b	include/ccTypes.h	/^	ccV2F_C4B_T2F b;$/;"	m	struct:_ccV2F_C4B_T2F_Triangle	access:public
_ccV2F_C4B_T2F_Triangle::c	include/ccTypes.h	/^	ccV2F_C4B_T2F c;$/;"	m	struct:_ccV2F_C4B_T2F_Triangle	access:public
_ccV2F_C4F_T2F	include/ccTypes.h	/^typedef struct _ccV2F_C4F_T2F$/;"	s
_ccV2F_C4F_T2F::colors	include/ccTypes.h	/^    ccColor4F        colors;$/;"	m	struct:_ccV2F_C4F_T2F	access:public
_ccV2F_C4F_T2F::texCoords	include/ccTypes.h	/^    ccTex2F            texCoords;$/;"	m	struct:_ccV2F_C4F_T2F	access:public
_ccV2F_C4F_T2F::vertices	include/ccTypes.h	/^    ccVertex2F        vertices;$/;"	m	struct:_ccV2F_C4F_T2F	access:public
_ccV2F_C4F_T2F_Quad	include/ccTypes.h	/^typedef struct _ccV2F_C4F_T2F_Quad$/;"	s
_ccV2F_C4F_T2F_Quad::bl	include/ccTypes.h	/^    ccV2F_C4F_T2F    bl;$/;"	m	struct:_ccV2F_C4F_T2F_Quad	access:public
_ccV2F_C4F_T2F_Quad::br	include/ccTypes.h	/^    ccV2F_C4F_T2F    br;$/;"	m	struct:_ccV2F_C4F_T2F_Quad	access:public
_ccV2F_C4F_T2F_Quad::tl	include/ccTypes.h	/^    ccV2F_C4F_T2F    tl;$/;"	m	struct:_ccV2F_C4F_T2F_Quad	access:public
_ccV2F_C4F_T2F_Quad::tr	include/ccTypes.h	/^    ccV2F_C4F_T2F    tr;$/;"	m	struct:_ccV2F_C4F_T2F_Quad	access:public
_ccV3F_C4B_T2F	include/ccTypes.h	/^typedef struct _ccV3F_C4B_T2F$/;"	s
_ccV3F_C4B_T2F::colors	include/ccTypes.h	/^    ccColor4B        colors;                \/\/ 4 bytes$/;"	m	struct:_ccV3F_C4B_T2F	access:public
_ccV3F_C4B_T2F::texCoords	include/ccTypes.h	/^    ccTex2F            texCoords;            \/\/ 8 bytes$/;"	m	struct:_ccV3F_C4B_T2F	access:public
_ccV3F_C4B_T2F::vertices	include/ccTypes.h	/^    ccVertex3F        vertices;            \/\/ 12 bytes$/;"	m	struct:_ccV3F_C4B_T2F	access:public
_ccV3F_C4B_T2F_Quad	include/ccTypes.h	/^typedef struct _ccV3F_C4B_T2F_Quad$/;"	s
_ccV3F_C4B_T2F_Quad::bl	include/ccTypes.h	/^    ccV3F_C4B_T2F    bl;$/;"	m	struct:_ccV3F_C4B_T2F_Quad	access:public
_ccV3F_C4B_T2F_Quad::br	include/ccTypes.h	/^    ccV3F_C4B_T2F    br;$/;"	m	struct:_ccV3F_C4B_T2F_Quad	access:public
_ccV3F_C4B_T2F_Quad::tl	include/ccTypes.h	/^    ccV3F_C4B_T2F    tl;$/;"	m	struct:_ccV3F_C4B_T2F_Quad	access:public
_ccV3F_C4B_T2F_Quad::tr	include/ccTypes.h	/^    ccV3F_C4B_T2F    tr;$/;"	m	struct:_ccV3F_C4B_T2F_Quad	access:public
_ccVertex2F	include/ccTypes.h	/^typedef struct _ccVertex2F$/;"	s
_ccVertex2F::x	include/ccTypes.h	/^    GLfloat x;$/;"	m	struct:_ccVertex2F	access:public
_ccVertex2F::y	include/ccTypes.h	/^    GLfloat y;$/;"	m	struct:_ccVertex2F	access:public
_ccVertex3F	include/ccTypes.h	/^typedef struct _ccVertex3F$/;"	s
_ccVertex3F::x	include/ccTypes.h	/^    GLfloat x;$/;"	m	struct:_ccVertex3F	access:public
_ccVertex3F::y	include/ccTypes.h	/^    GLfloat y;$/;"	m	struct:_ccVertex3F	access:public
_ccVertex3F::z	include/ccTypes.h	/^    GLfloat z;$/;"	m	struct:_ccVertex3F	access:public
_charBuffer	support/tinyxml2/tinyxml2.h	/^    char*       _charBuffer;$/;"	m	class:tinyxml2::XMLDocument	access:private
_closingType	support/tinyxml2/tinyxml2.h	/^    int _closingType;$/;"	m	class:tinyxml2::XMLElement	access:private
_commentPool	support/tinyxml2/tinyxml2.h	/^    MemPoolT< sizeof(XMLComment) >	 _commentPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
_compactMode	support/tinyxml2/tinyxml2.h	/^    bool _compactMode;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_currentAllocs	support/tinyxml2/tinyxml2.h	/^    int _currentAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
_depth	support/tinyxml2/tinyxml2.h	/^    int _depth;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_displayedColor	base_nodes/CCNode.h	/^	ccColor3B	_displayedColor;$/;"	m	class:CCNodeRGBA	access:protected
_displayedColor	layers_scenes_transitions_nodes/CCLayer.h	/^	ccColor3B	_displayedColor, _realColor;$/;"	m	class:CCLayerRGBA	access:protected
_displayedOpacity	base_nodes/CCNode.h	/^	GLubyte		_displayedOpacity;$/;"	m	class:CCNodeRGBA	access:protected
_displayedOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^	GLubyte		_displayedOpacity, _realOpacity;$/;"	m	class:CCLayerRGBA	access:protected
_document	support/tinyxml2/tinyxml2.h	/^    XMLDocument*	_document;$/;"	m	class:tinyxml2::XMLNode	access:protected
_elementJustOpened	support/tinyxml2/tinyxml2.h	/^    bool _elementJustOpened;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_elementPool	support/tinyxml2/tinyxml2.h	/^    MemPoolT< sizeof(XMLElement) >	 _elementPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
_end	support/tinyxml2/tinyxml2.h	/^    char*   _end;$/;"	m	class:tinyxml2::StrPair	access:private
_entityFlag	support/tinyxml2/tinyxml2.h	/^    bool _entityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter	access:private
_errorID	support/tinyxml2/tinyxml2.h	/^    XMLError    _errorID;$/;"	m	class:tinyxml2::XMLDocument	access:private
_errorStr1	support/tinyxml2/tinyxml2.h	/^    const char* _errorStr1;$/;"	m	class:tinyxml2::XMLDocument	access:private
_errorStr2	support/tinyxml2/tinyxml2.h	/^    const char* _errorStr2;$/;"	m	class:tinyxml2::XMLDocument	access:private
_firstChild	support/tinyxml2/tinyxml2.h	/^    XMLNode*		_firstChild;$/;"	m	class:tinyxml2::XMLNode	access:protected
_firstElement	support/tinyxml2/tinyxml2.h	/^    bool _firstElement;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_flags	support/tinyxml2/tinyxml2.h	/^    int     _flags;$/;"	m	class:tinyxml2::StrPair	access:private
_fp	support/tinyxml2/tinyxml2.h	/^    FILE* _fp;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_globalFontName	menu_nodes/CCMenuItem.cpp	/^static std::string _globalFontName = "Marker Felt";$/;"	v	file:
_globalFontNameRelease	menu_nodes/CCMenuItem.cpp	/^static bool _globalFontNameRelease = false;$/;"	v	file:
_globalFontSize	menu_nodes/CCMenuItem.cpp	/^static unsigned int _globalFontSize = kCCItemSize;$/;"	v	file:
_hashElement	actions/CCActionManager.cpp	/^typedef struct _hashElement$/;"	s	file:
_hashElement::actionIndex	actions/CCActionManager.cpp	/^    unsigned int                actionIndex;$/;"	m	struct:_hashElement	file:	access:public
_hashElement::actions	actions/CCActionManager.cpp	/^    struct _ccArray             *actions;$/;"	m	struct:_hashElement	typeref:struct:_hashElement::_ccArray	file:	access:public
_hashElement::currentAction	actions/CCActionManager.cpp	/^    CCAction                    *currentAction;$/;"	m	struct:_hashElement	file:	access:public
_hashElement::currentActionSalvaged	actions/CCActionManager.cpp	/^    bool                        currentActionSalvaged;$/;"	m	struct:_hashElement	file:	access:public
_hashElement::hh	actions/CCActionManager.cpp	/^    UT_hash_handle                hh;$/;"	m	struct:_hashElement	file:	access:public
_hashElement::paused	actions/CCActionManager.cpp	/^    bool                        paused;$/;"	m	struct:_hashElement	file:	access:public
_hashElement::target	actions/CCActionManager.cpp	/^    CCObject                    *target;$/;"	m	struct:_hashElement	file:	access:public
_hashSelectorEntry	CCScheduler.cpp	/^typedef struct _hashSelectorEntry$/;"	s	file:
_hashSelectorEntry::currentTimer	CCScheduler.cpp	/^    CCTimer             *currentTimer;$/;"	m	struct:_hashSelectorEntry	file:	access:public
_hashSelectorEntry::currentTimerSalvaged	CCScheduler.cpp	/^    bool                currentTimerSalvaged;$/;"	m	struct:_hashSelectorEntry	file:	access:public
_hashSelectorEntry::hh	CCScheduler.cpp	/^    UT_hash_handle      hh;$/;"	m	struct:_hashSelectorEntry	file:	access:public
_hashSelectorEntry::paused	CCScheduler.cpp	/^    bool                paused;$/;"	m	struct:_hashSelectorEntry	file:	access:public
_hashSelectorEntry::target	CCScheduler.cpp	/^    CCObject            *target;    \/\/ hash key (retained)$/;"	m	struct:_hashSelectorEntry	file:	access:public
_hashSelectorEntry::timerIndex	CCScheduler.cpp	/^    unsigned int        timerIndex;$/;"	m	struct:_hashSelectorEntry	file:	access:public
_hashSelectorEntry::timers	CCScheduler.cpp	/^    ccArray             *timers;$/;"	m	struct:_hashSelectorEntry	file:	access:public
_hashUniformEntry	shaders/CCGLProgram.cpp	/^typedef struct _hashUniformEntry$/;"	s	file:
_hashUniformEntry::hh	shaders/CCGLProgram.cpp	/^    UT_hash_handle  hh;          \/\/ hash entry$/;"	m	struct:_hashUniformEntry	file:	access:public
_hashUniformEntry::location	shaders/CCGLProgram.cpp	/^    unsigned int    location;    \/\/ Key$/;"	m	struct:_hashUniformEntry	file:	access:public
_hashUniformEntry::value	shaders/CCGLProgram.cpp	/^    GLvoid*         value;       \/\/ value$/;"	m	struct:_hashUniformEntry	file:	access:public
_hashUpdateEntry	CCScheduler.cpp	/^typedef struct _hashUpdateEntry$/;"	s	file:
_hashUpdateEntry::entry	CCScheduler.cpp	/^    tListEntry          *entry;        \/\/ entry in the list$/;"	m	struct:_hashUpdateEntry	file:	access:public
_hashUpdateEntry::hh	CCScheduler.cpp	/^    UT_hash_handle      hh;$/;"	m	struct:_hashUpdateEntry	file:	access:public
_hashUpdateEntry::list	CCScheduler.cpp	/^    tListEntry          **list;        \/\/ Which list does it belong to ?$/;"	m	struct:_hashUpdateEntry	file:	access:public
_hashUpdateEntry::target	CCScheduler.cpp	/^    CCObject            *target;        \/\/ hash key (retained)$/;"	m	struct:_hashUpdateEntry	file:	access:public
_initWithJpgData	platform/CCImage.h	/^    bool _initWithJpgData(void *pData, int nDatalen);$/;"	p	class:CCImage	access:protected	signature:(void *pData, int nDatalen)
_initWithJpgData	platform/CCImageCommon_cpp.h	/^bool CCImage::_initWithJpgData(void * data, int nSize)$/;"	f	class:CCImage	signature:(void * data, int nSize)
_initWithPngData	platform/CCImage.h	/^    bool _initWithPngData(void *pData, int nDatalen);$/;"	p	class:CCImage	access:protected	signature:(void *pData, int nDatalen)
_initWithPngData	platform/CCImageCommon_cpp.h	/^bool CCImage::_initWithPngData(void * pData, int nDatalen)$/;"	f	class:CCImage	signature:(void * pData, int nDatalen)
_initWithRawData	platform/CCImage.h	/^    bool _initWithRawData(void *pData, int nDatalen, int nWidth, int nHeight, int nBitsPerComponent);$/;"	p	class:CCImage	access:protected	signature:(void *pData, int nDatalen, int nWidth, int nHeight, int nBitsPerComponent)
_initWithRawData	platform/CCImageCommon_cpp.h	/^bool CCImage::_initWithRawData(void * pData, int nDatalen, int nWidth, int nHeight, int nBitsPerComponent)$/;"	f	class:CCImage	signature:(void * pData, int nDatalen, int nWidth, int nHeight, int nBitsPerComponent)
_initWithTiffData	platform/CCImage.h	/^    bool _initWithTiffData(void *pData, int nDataLen);$/;"	p	class:CCImage	access:protected	signature:(void *pData, int nDataLen)
_initWithTiffData	platform/CCImageCommon_cpp.h	/^bool CCImage::_initWithTiffData(void* pData, int nDataLen)$/;"	f	class:CCImage	signature:(void* pData, int nDataLen)
_initWithWebpData	platform/CCImage.h	/^    bool _initWithWebpData(void *pData, int nDataLen);$/;"	p	class:CCImage	access:protected	signature:(void *pData, int nDataLen)
_initWithWebpData	platform/CCImageCommonWebp.cpp	/^bool CCImage::_initWithWebpData(void *pData, int nDataLen)$/;"	f	class:CCImage	signature:(void *pData, int nDataLen)
_isCData	support/tinyxml2/tinyxml2.h	/^    bool _isCData;$/;"	m	class:tinyxml2::XMLText	access:private
_lastChild	support/tinyxml2/tinyxml2.h	/^    XMLNode*		_lastChild;$/;"	m	class:tinyxml2::XMLNode	access:protected
_listEntry	CCScheduler.cpp	/^typedef struct _listEntry$/;"	s	file:
_listEntry::markedForDeletion	CCScheduler.cpp	/^    bool                markedForDeletion; \/\/ selector will no longer be called and entry will be removed at end of the next tick$/;"	m	struct:_listEntry	file:	access:public
_listEntry::next	CCScheduler.cpp	/^    struct _listEntry   *prev, *next;$/;"	m	struct:_listEntry	typeref:struct:_listEntry::	file:	access:public
_listEntry::paused	CCScheduler.cpp	/^    bool                paused;$/;"	m	struct:_listEntry	file:	access:public
_listEntry::prev	CCScheduler.cpp	/^    struct _listEntry   *prev, *next;$/;"	m	struct:_listEntry	typeref:struct:_listEntry::_listEntry	file:	access:public
_listEntry::priority	CCScheduler.cpp	/^    int                 priority;$/;"	m	struct:_listEntry	file:	access:public
_listEntry::target	CCScheduler.cpp	/^    CCObject            *target;        \/\/ not retained (retained by hashUpdateEntry)$/;"	m	struct:_listEntry	file:	access:public
_maxAllocs	support/tinyxml2/tinyxml2.h	/^    int _maxAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
_mem	support/tinyxml2/tinyxml2.h	/^    T*  _mem;$/;"	m	class:tinyxml2::DynArray	access:private
_memPool	support/tinyxml2/tinyxml2.h	/^    MemPool*		_memPool;$/;"	m	class:tinyxml2::XMLNode	access:private
_memPool	support/tinyxml2/tinyxml2.h	/^    MemPool*        _memPool;$/;"	m	class:tinyxml2::XMLAttribute	access:private
_nAllocs	support/tinyxml2/tinyxml2.h	/^    int _nAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
_nUntracked	support/tinyxml2/tinyxml2.h	/^    int _nUntracked;$/;"	m	class:tinyxml2::MemPoolT	access:private
_name	support/tinyxml2/tinyxml2.h	/^    mutable StrPair _name;$/;"	m	class:tinyxml2::XMLAttribute	access:private
_next	support/tinyxml2/tinyxml2.h	/^    XMLAttribute*   _next;$/;"	m	class:tinyxml2::XMLAttribute	access:private
_next	support/tinyxml2/tinyxml2.h	/^    XMLNode*		_next;$/;"	m	class:tinyxml2::XMLNode	access:protected
_node	support/tinyxml2/tinyxml2.h	/^    XMLNode* _node;$/;"	m	class:tinyxml2::XMLHandle	access:private
_node	support/tinyxml2/tinyxml2.h	/^    const XMLNode* _node;$/;"	m	class:tinyxml2::XMLConstHandle	access:private
_parent	support/tinyxml2/tinyxml2.h	/^    XMLNode*		_parent;$/;"	m	class:tinyxml2::XMLNode	access:protected
_pixel_formathash	textures/CCTexturePVR.cpp	/^struct _pixel_formathash {$/;"	s	file:
_pixel_formathash::pixelFormat	textures/CCTexturePVR.cpp	/^	uint64_t pixelFormat;$/;"	m	struct:_pixel_formathash	file:	access:public
_pixel_formathash::pixelFormatInfo	textures/CCTexturePVR.cpp	/^	const ccPVRTexturePixelFormatInfo * pixelFormatInfo;$/;"	m	struct:_pixel_formathash	file:	access:public
_pool	support/tinyxml2/tinyxml2.h	/^    T   _pool[INIT];$/;"	m	class:tinyxml2::DynArray	access:private
_prev	support/tinyxml2/tinyxml2.h	/^    XMLNode*		_prev;$/;"	m	class:tinyxml2::XMLNode	access:protected
_processEntities	support/tinyxml2/tinyxml2.h	/^    bool        _processEntities;$/;"	m	class:tinyxml2::XMLDocument	access:private
_processEntities	support/tinyxml2/tinyxml2.h	/^    bool _processEntities;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_realColor	base_nodes/CCNode.h	/^    ccColor3B   _realColor;$/;"	m	class:CCNodeRGBA	access:protected
_realColor	layers_scenes_transitions_nodes/CCLayer.h	/^	ccColor3B	_displayedColor, _realColor;$/;"	m	class:CCLayerRGBA	access:protected
_realOpacity	base_nodes/CCNode.h	/^    GLubyte     _realOpacity;$/;"	m	class:CCNodeRGBA	access:protected
_realOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^	GLubyte		_displayedOpacity, _realOpacity;$/;"	m	class:CCLayerRGBA	access:protected
_restrictedEntityFlag	support/tinyxml2/tinyxml2.h	/^    bool _restrictedEntityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter	access:private
_root	support/tinyxml2/tinyxml2.h	/^    Chunk* _root;$/;"	m	class:tinyxml2::MemPoolT	access:private
_rootAttribute	support/tinyxml2/tinyxml2.h	/^    XMLAttribute* _rootAttribute;$/;"	m	class:tinyxml2::XMLElement	access:private
_saveImageToJPG	platform/CCImage.h	/^    bool _saveImageToJPG(const char *pszFilePath);$/;"	p	class:CCImage	access:protected	signature:(const char *pszFilePath)
_saveImageToJPG	platform/CCImageCommon_cpp.h	/^bool CCImage::_saveImageToJPG(const char * pszFilePath)$/;"	f	class:CCImage	signature:(const char * pszFilePath)
_saveImageToPNG	platform/CCImage.h	/^    bool _saveImageToPNG(const char *pszFilePath, bool bIsToRGB = true);$/;"	p	class:CCImage	access:protected	signature:(const char *pszFilePath, bool bIsToRGB = true)
_saveImageToPNG	platform/CCImageCommon_cpp.h	/^bool CCImage::_saveImageToPNG(const char * pszFilePath, bool bIsToRGB)$/;"	f	class:CCImage	signature:(const char * pszFilePath, bool bIsToRGB)
_setZOrder	base_nodes/CCNode.cpp	/^void CCNode::_setZOrder(int z)$/;"	f	class:CCNode	signature:(int z)
_setZOrder	base_nodes/CCNode.h	/^    virtual void _setZOrder(int z);$/;"	p	class:CCNode	access:public	signature:(int z)
_sharedShaderCache	shaders/CCShaderCache.cpp	/^static CCShaderCache *_sharedShaderCache = 0;$/;"	v	file:
_size	support/tinyxml2/tinyxml2.h	/^    int _size;			\/\/ number objects in use$/;"	m	class:tinyxml2::DynArray	access:private
_stack	support/tinyxml2/tinyxml2.h	/^    DynArray< const char*, 10 > _stack;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_start	support/tinyxml2/tinyxml2.h	/^    char*   _start;$/;"	m	class:tinyxml2::StrPair	access:private
_textDepth	support/tinyxml2/tinyxml2.h	/^    int _textDepth;$/;"	m	class:tinyxml2::XMLPrinter	access:private
_textPool	support/tinyxml2/tinyxml2.h	/^    MemPoolT< sizeof(XMLText) >		 _textPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
_tiffCloseProc	platform/CCImageCommon_cpp.h	/^static int _tiffCloseProc(thandle_t fd)$/;"	f	signature:(thandle_t fd)
_tiffMapProc	platform/CCImageCommon_cpp.h	/^static int _tiffMapProc(thandle_t fd, void** pbase, toff_t* psize)$/;"	f	signature:(thandle_t fd, void** pbase, toff_t* psize)
_tiffReadProc	platform/CCImageCommon_cpp.h	/^static tmsize_t _tiffReadProc(thandle_t fd, void* buf, tmsize_t size)$/;"	f	signature:(thandle_t fd, void* buf, tmsize_t size)
_tiffSeekProc	platform/CCImageCommon_cpp.h	/^static uint64 _tiffSeekProc(thandle_t fd, uint64 off, int whence)$/;"	f	signature:(thandle_t fd, uint64 off, int whence)
_tiffSizeProc	platform/CCImageCommon_cpp.h	/^static uint64 _tiffSizeProc(thandle_t fd)$/;"	f	signature:(thandle_t fd)
_tiffUnmapProc	platform/CCImageCommon_cpp.h	/^static void _tiffUnmapProc(thandle_t fd, void* base, toff_t size)$/;"	f	signature:(thandle_t fd, void* base, toff_t size)
_tiffWriteProc	platform/CCImageCommon_cpp.h	/^static tmsize_t _tiffWriteProc(thandle_t fd, void* buf, tmsize_t size)$/;"	f	signature:(thandle_t fd, void* buf, tmsize_t size)
_unz64_H	support/zip_support/unzip.h	44;"	d
_value	support/tinyxml2/tinyxml2.h	/^    mutable StrPair	_value;$/;"	m	class:tinyxml2::XMLNode	access:protected
_value	support/tinyxml2/tinyxml2.h	/^    mutable StrPair _value;$/;"	m	class:tinyxml2::XMLAttribute	access:private
_whitespace	support/tinyxml2/tinyxml2.h	/^    Whitespace  _whitespace;$/;"	m	class:tinyxml2::XMLDocument	access:private
_writeBOM	support/tinyxml2/tinyxml2.h	/^    bool        _writeBOM;$/;"	m	class:tinyxml2::XMLDocument	access:private
a	cocoa/CCAffineTransform.h	/^  float a, b, c, d;$/;"	m	struct:CCAffineTransform	access:public
a	include/ccTypes.h	/^	ccV2F_C4B_T2F a;$/;"	m	struct:_ccV2F_C4B_T2F_Triangle	access:public
a	include/ccTypes.h	/^    GLfloat a;$/;"	m	struct:_ccColor4F	access:public
a	include/ccTypes.h	/^    GLubyte a;$/;"	m	struct:_ccColor4B	access:public
a	kazmath/include/kazmath/plane.h	/^    kmScalar     a, b, c, d;$/;"	m	struct:kmPlane	access:public
absolutePosition	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCPoint CCParallaxNode::absolutePosition()$/;"	f	class:CCParallaxNode	signature:()
absolutePosition	tilemap_parallax_nodes/CCParallaxNode.h	/^    CCPoint absolutePosition();$/;"	p	class:CCParallaxNode	access:private	signature:()
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionMoveInL::action()$/;"	f	class:CCTransitionMoveInL	signature:()
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInB:: action()$/;"	f	class:CCTransitionSlideInB	signature:()
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInL::action()$/;"	f	class:CCTransitionSlideInL	signature:()
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInR:: action()$/;"	f	class:CCTransitionSlideInR	signature:()
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInT::action()$/;"	f	class:CCTransitionSlideInT	signature:()
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSplitCols:: action()$/;"	f	class:CCTransitionSplitCols	signature:()
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSplitRows::action()$/;"	f	class:CCTransitionSplitRows	signature:()
action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionMoveInL	access:public	signature:(void)
action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionSlideInB	access:public	signature:(void)
action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionSlideInL	access:public	signature:(void)
action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionSlideInR	access:public	signature:(void)
action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionSlideInT	access:public	signature:(void)
action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionSplitCols	access:public	signature:(void)
action	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* action(void);$/;"	p	class:CCTransitionSplitRows	access:public	signature:(void)
actionAllocWithHashElement	actions/CCActionManager.cpp	/^void CCActionManager::actionAllocWithHashElement(tHashElement *pElement)$/;"	f	class:CCActionManager	signature:(tHashElement *pElement)
actionAllocWithHashElement	actions/CCActionManager.h	/^    void actionAllocWithHashElement(struct _hashElement *pElement);$/;"	p	class:CCActionManager	access:protected	signature:(struct _hashElement *pElement)
actionIndex	actions/CCActionManager.cpp	/^    unsigned int                actionIndex;$/;"	m	struct:_hashElement	file:	access:public
actionWithSize	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval*  CCTransitionFadeBL::actionWithSize(const CCSize& size)$/;"	f	class:CCTransitionFadeBL	signature:(const CCSize& size)
actionWithSize	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval*  CCTransitionFadeTR::actionWithSize(const CCSize& size)$/;"	f	class:CCTransitionFadeTR	signature:(const CCSize& size)
actionWithSize	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionFadeDown::actionWithSize(const CCSize& size)$/;"	f	class:CCTransitionFadeDown	signature:(const CCSize& size)
actionWithSize	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionFadeUp::actionWithSize(const CCSize& size)$/;"	f	class:CCTransitionFadeUp	signature:(const CCSize& size)
actionWithSize	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* actionWithSize(const CCSize& size);$/;"	p	class:CCTransitionFadeBL	access:public	signature:(const CCSize& size)
actionWithSize	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* actionWithSize(const CCSize& size);$/;"	p	class:CCTransitionFadeDown	access:public	signature:(const CCSize& size)
actionWithSize	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* actionWithSize(const CCSize& size);$/;"	p	class:CCTransitionFadeTR	access:public	signature:(const CCSize& size)
actionWithSize	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* actionWithSize(const CCSize& size);$/;"	p	class:CCTransitionFadeUp	access:public	signature:(const CCSize& size)
actionWithSize	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCActionInterval* CCTransitionPageTurn:: actionWithSize(const CCSize& vector)$/;"	f	class:CCTransitionPageTurn	signature:(const CCSize& vector)
actionWithSize	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    CCActionInterval* actionWithSize(const CCSize& vector);$/;"	p	class:CCTransitionPageTurn	access:public	signature:(const CCSize& vector)
actions	actions/CCActionManager.cpp	/^    struct _ccArray             *actions;$/;"	m	struct:_hashElement	typeref:struct:_hashElement::_ccArray	file:	access:public
activate	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::activate()$/;"	f	class:CCMenuItem	signature:()
activate	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::activate()$/;"	f	class:CCMenuItemLabel	signature:()
activate	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::activate()$/;"	f	class:CCMenuItemToggle	signature:()
activate	menu_nodes/CCMenuItem.h	/^    virtual void activate();$/;"	p	class:CCMenuItem	access:public	signature:()
activate	menu_nodes/CCMenuItem.h	/^    virtual void activate();$/;"	p	class:CCMenuItemLabel	access:public	signature:()
activate	menu_nodes/CCMenuItem.h	/^    virtual void activate();$/;"	p	class:CCMenuItemToggle	access:public	signature:()
addAction	actions/CCActionManager.cpp	/^void CCActionManager::addAction(CCAction *pAction, CCNode *pTarget, bool paused)$/;"	f	class:CCActionManager	signature:(CCAction *pAction, CCNode *pTarget, bool paused)
addAction	actions/CCActionManager.h	/^    void addAction(CCAction *pAction, CCNode *pTarget, bool paused);$/;"	p	class:CCActionManager	access:public	signature:(CCAction *pAction, CCNode *pTarget, bool paused)
addAnimation	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::addAnimation(CCAnimation *animation, const char * name)$/;"	f	class:CCAnimationCache	signature:(CCAnimation *animation, const char * name)
addAnimation	sprite_nodes/CCAnimationCache.h	/^    void addAnimation(CCAnimation *animation, const char * name);$/;"	p	class:CCAnimationCache	access:public	signature:(CCAnimation *animation, const char * name)
addAnimationsWithDictionary	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::addAnimationsWithDictionary(CCDictionary* dictionary)$/;"	f	class:CCAnimationCache	signature:(CCDictionary* dictionary)
addAnimationsWithDictionary	sprite_nodes/CCAnimationCache.h	/^    void addAnimationsWithDictionary(CCDictionary* dictionary);$/;"	p	class:CCAnimationCache	access:public	signature:(CCDictionary* dictionary)
addAnimationsWithFile	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::addAnimationsWithFile(const char* plist)$/;"	f	class:CCAnimationCache	signature:(const char* plist)
addAnimationsWithFile	sprite_nodes/CCAnimationCache.h	/^    void addAnimationsWithFile(const char* plist);$/;"	p	class:CCAnimationCache	access:public	signature:(const char* plist)
addAttribute	shaders/CCGLProgram.cpp	/^void CCGLProgram::addAttribute(const char* attributeName, GLuint index)$/;"	f	class:CCGLProgram	signature:(const char* attributeName, GLuint index)
addAttribute	shaders/CCGLProgram.h	/^    void addAttribute(const char* attributeName, GLuint index);$/;"	p	class:CCGLProgram	access:public	signature:(const char* attributeName, GLuint index)
addCCImage	textures/CCTextureCache.cpp	/^void VolatileTexture::addCCImage(CCTexture2D *tt, CCImage *image)$/;"	f	class:VolatileTexture	signature:(CCTexture2D *tt, CCImage *image)
addCCImage	textures/CCTextureCache.h	/^    static void addCCImage(CCTexture2D *tt, CCImage *image);$/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *tt, CCImage *image)
addChild	base_nodes/CCNode.cpp	/^void CCNode::addChild(CCNode *child)$/;"	f	class:CCNode	signature:(CCNode *child)
addChild	base_nodes/CCNode.cpp	/^void CCNode::addChild(CCNode *child, int zOrder)$/;"	f	class:CCNode	signature:(CCNode *child, int zOrder)
addChild	base_nodes/CCNode.cpp	/^void CCNode::addChild(CCNode *child, int zOrder, int tag)$/;"	f	class:CCNode	signature:(CCNode *child, int zOrder, int tag)
addChild	base_nodes/CCNode.h	/^    virtual void addChild(CCNode * child);$/;"	p	class:CCNode	access:public	signature:(CCNode * child)
addChild	base_nodes/CCNode.h	/^    virtual void addChild(CCNode * child, int zOrder);$/;"	p	class:CCNode	access:public	signature:(CCNode * child, int zOrder)
addChild	base_nodes/CCNode.h	/^    virtual void addChild(CCNode* child, int zOrder, int tag);$/;"	p	class:CCNode	access:public	signature:(CCNode* child, int zOrder, int tag)
addChild	menu_nodes/CCMenu.cpp	/^void CCMenu::addChild(CCNode * child)$/;"	f	class:CCMenu	signature:(CCNode * child)
addChild	menu_nodes/CCMenu.cpp	/^void CCMenu::addChild(CCNode * child, int zOrder)$/;"	f	class:CCMenu	signature:(CCNode * child, int zOrder)
addChild	menu_nodes/CCMenu.cpp	/^void CCMenu::addChild(CCNode * child, int zOrder, int tag)$/;"	f	class:CCMenu	signature:(CCNode * child, int zOrder, int tag)
addChild	menu_nodes/CCMenu.h	/^    virtual void addChild(CCNode * child);$/;"	p	class:CCMenu	access:public	signature:(CCNode * child)
addChild	menu_nodes/CCMenu.h	/^    virtual void addChild(CCNode * child, int zOrder);$/;"	p	class:CCMenu	access:public	signature:(CCNode * child, int zOrder)
addChild	menu_nodes/CCMenu.h	/^    virtual void addChild(CCNode * child, int zOrder, int tag);$/;"	p	class:CCMenu	access:public	signature:(CCNode * child, int zOrder, int tag)
addChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::addChild(CCNode * child)$/;"	f	class:CCParticleBatchNode	signature:(CCNode * child)
addChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::addChild(CCNode * child, int zOrder)$/;"	f	class:CCParticleBatchNode	signature:(CCNode * child, int zOrder)
addChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::addChild(CCNode * child, int zOrder, int tag)$/;"	f	class:CCParticleBatchNode	signature:(CCNode * child, int zOrder, int tag)
addChild	particle_nodes/CCParticleBatchNode.h	/^    virtual void addChild(CCNode * child);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCNode * child)
addChild	particle_nodes/CCParticleBatchNode.h	/^    virtual void addChild(CCNode * child, int zOrder);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCNode * child, int zOrder)
addChild	particle_nodes/CCParticleBatchNode.h	/^    virtual void addChild(CCNode * child, int zOrder, int tag);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCNode * child, int zOrder, int tag)
addChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::addChild(CCNode *pChild, int zOrder)$/;"	f	class:CCSprite	signature:(CCNode *pChild, int zOrder)
addChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::addChild(CCNode *pChild, int zOrder, int tag)$/;"	f	class:CCSprite	signature:(CCNode *pChild, int zOrder, int tag)
addChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::addChild(CCNode* pChild)$/;"	f	class:CCSprite	signature:(CCNode* pChild)
addChild	sprite_nodes/CCSprite.h	/^    virtual void addChild(CCNode *pChild);$/;"	p	class:CCSprite	access:public	signature:(CCNode *pChild)
addChild	sprite_nodes/CCSprite.h	/^    virtual void addChild(CCNode *pChild, int zOrder);$/;"	p	class:CCSprite	access:public	signature:(CCNode *pChild, int zOrder)
addChild	sprite_nodes/CCSprite.h	/^    virtual void addChild(CCNode *pChild, int zOrder, int tag);$/;"	p	class:CCSprite	access:public	signature:(CCNode *pChild, int zOrder, int tag)
addChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::addChild(CCNode *child)$/;"	f	class:CCSpriteBatchNode	signature:(CCNode *child)
addChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::addChild(CCNode *child, int zOrder)$/;"	f	class:CCSpriteBatchNode	signature:(CCNode *child, int zOrder)
addChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::addChild(CCNode *child, int zOrder, int tag)$/;"	f	class:CCSpriteBatchNode	signature:(CCNode *child, int zOrder, int tag)
addChild	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void addChild(CCNode * child);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCNode * child)
addChild	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void addChild(CCNode * child, int zOrder);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCNode * child, int zOrder)
addChild	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void addChild(CCNode * child, int zOrder, int tag);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCNode * child, int zOrder, int tag)
addChild	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::addChild(CCNode * child, unsigned int zOrder, int tag)$/;"	f	class:CCParallaxNode	signature:(CCNode * child, unsigned int zOrder, int tag)
addChild	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::addChild(CCNode *child, unsigned int z, const CCPoint& ratio, const CCPoint& offset)$/;"	f	class:CCParallaxNode	signature:(CCNode *child, unsigned int z, const CCPoint& ratio, const CCPoint& offset)
addChild	tilemap_parallax_nodes/CCParallaxNode.h	/^    virtual void addChild(CCNode * child, unsigned int z, const CCPoint& parallaxRatio, const CCPoint& positionOffset);$/;"	p	class:CCParallaxNode	access:public	signature:(CCNode * child, unsigned int z, const CCPoint& parallaxRatio, const CCPoint& positionOffset)
addChild	tilemap_parallax_nodes/CCParallaxNode.h	/^    virtual void addChild(CCNode * child, unsigned int zOrder, int tag);$/;"	p	class:CCParallaxNode	access:public	signature:(CCNode * child, unsigned int zOrder, int tag)
addChild	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::addChild(CCNode * child, int zOrder, int tag)$/;"	f	class:CCTMXLayer	signature:(CCNode * child, int zOrder, int tag)
addChild	tilemap_parallax_nodes/CCTMXLayer.h	/^    virtual void addChild(CCNode * child, int zOrder, int tag);$/;"	p	class:CCTMXLayer	access:public	signature:(CCNode * child, int zOrder, int tag)
addChildHelper	particle_nodes/CCParticleBatchNode.cpp	/^unsigned int CCParticleBatchNode::addChildHelper(CCParticleSystem* child, int z, int aTag)$/;"	f	class:CCParticleBatchNode	signature:(CCParticleSystem* child, int z, int aTag)
addChildHelper	particle_nodes/CCParticleBatchNode.h	/^    unsigned int addChildHelper(CCParticleSystem* child, int z, int aTag);$/;"	p	class:CCParticleBatchNode	access:private	signature:(CCParticleSystem* child, int z, int aTag)
addControlPoint	actions/CCActionCatmullRom.cpp	/^void CCPointArray::addControlPoint(CCPoint controlPoint)$/;"	f	class:CCPointArray	signature:(CCPoint controlPoint)
addControlPoint	actions/CCActionCatmullRom.h	/^    void addControlPoint(CCPoint controlPoint);$/;"	p	class:CCPointArray	access:public	signature:(CCPoint controlPoint)
addDataTexture	textures/CCTextureCache.cpp	/^void VolatileTexture::addDataTexture(CCTexture2D *tt, void* data, CCTexture2DPixelFormat pixelFormat, const CCSize& contentSize)$/;"	f	class:VolatileTexture	signature:(CCTexture2D *tt, void* data, CCTexture2DPixelFormat pixelFormat, const CCSize& contentSize)
addDataTexture	textures/CCTextureCache.h	/^    static void addDataTexture(CCTexture2D *tt, void* data, CCTexture2DPixelFormat pixelFormat, const CCSize& contentSize);$/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *tt, void* data, CCTexture2DPixelFormat pixelFormat, const CCSize& contentSize)
addDelegate	keypad_dispatcher/CCKeypadDispatcher.cpp	/^void CCKeypadDispatcher::addDelegate(CCKeypadDelegate* pDelegate)$/;"	f	class:CCKeypadDispatcher	signature:(CCKeypadDelegate* pDelegate)
addDelegate	keypad_dispatcher/CCKeypadDispatcher.h	/^    void addDelegate(CCKeypadDelegate* pDelegate);$/;"	p	class:CCKeypadDispatcher	access:public	signature:(CCKeypadDelegate* pDelegate)
addDelegate	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::addDelegate(CCIMEDelegate* pDelegate)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEDelegate* pDelegate)
addDelegate	text_input_node/CCIMEDispatcher.h	/^    void addDelegate(CCIMEDelegate * pDelegate);$/;"	p	class:CCIMEDispatcher	access:protected	signature:(CCIMEDelegate * pDelegate)
addImage	textures/CCTextureCache.cpp	/^CCTexture2D * CCTextureCache::addImage(const char * path)$/;"	f	class:CCTextureCache	signature:(const char * path)
addImage	textures/CCTextureCache.h	/^    CCTexture2D* addImage(const char* fileimage);$/;"	p	class:CCTextureCache	access:public	signature:(const char* fileimage)
addImageAsync	textures/CCTextureCache.cpp	/^void CCTextureCache::addImageAsync(const char *path, CCObject *target, SEL_CallFuncO selector)$/;"	f	class:CCTextureCache	signature:(const char *path, CCObject *target, SEL_CallFuncO selector)
addImageAsync	textures/CCTextureCache.h	/^    void addImageAsync(const char *path, CCObject *target, SEL_CallFuncO selector);$/;"	p	class:CCTextureCache	access:public	signature:(const char *path, CCObject *target, SEL_CallFuncO selector)
addImageAsyncCallBack	textures/CCTextureCache.cpp	/^void CCTextureCache::addImageAsyncCallBack(float dt)$/;"	f	class:CCTextureCache	signature:(float dt)
addImageAsyncCallBack	textures/CCTextureCache.h	/^    void addImageAsyncCallBack(float dt);$/;"	p	class:CCTextureCache	access:private	signature:(float dt)
addImageTexture	textures/CCTextureCache.cpp	/^void VolatileTexture::addImageTexture(CCTexture2D *tt, const char* imageFileName, CCImage::EImageFormat format)$/;"	f	class:VolatileTexture	signature:(CCTexture2D *tt, const char* imageFileName, CCImage::EImageFormat format)
addImageTexture	textures/CCTextureCache.h	/^    static void addImageTexture(CCTexture2D *tt, const char* imageFileName, CCImage::EImageFormat format);$/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *tt, const char* imageFileName, CCImage::EImageFormat format)
addLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerMultiplex::addLayer(CCLayer* layer)$/;"	f	class:CCLayerMultiplex	signature:(CCLayer* layer)
addLayer	layers_scenes_transitions_nodes/CCLayer.h	/^    void addLayer(CCLayer* layer);$/;"	p	class:CCLayerMultiplex	access:public	signature:(CCLayer* layer)
addObject	cocoa/CCArray.cpp	/^void CCArray::addObject(CCObject* object)$/;"	f	class:CCArray	signature:(CCObject* object)
addObject	cocoa/CCArray.h	/^    void addObject(CCObject* object);$/;"	p	class:CCArray	access:public	signature:(CCObject* object)
addObject	cocoa/CCAutoreleasePool.cpp	/^void CCAutoreleasePool::addObject(CCObject* pObject)$/;"	f	class:CCAutoreleasePool	signature:(CCObject* pObject)
addObject	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::addObject(CCObject* pObject)$/;"	f	class:CCPoolManager	signature:(CCObject* pObject)
addObject	cocoa/CCAutoreleasePool.h	/^    void addObject(CCObject *pObject);$/;"	p	class:CCAutoreleasePool	access:public	signature:(CCObject *pObject)
addObject	cocoa/CCAutoreleasePool.h	/^    void addObject(CCObject* pObject);$/;"	p	class:CCPoolManager	access:public	signature:(CCObject* pObject)
addObject	cocoa/CCSet.cpp	/^void CCSet::addObject(CCObject *pObject)$/;"	f	class:CCSet	signature:(CCObject *pObject)
addObject	cocoa/CCSet.h	/^    void addObject(CCObject *pObject);$/;"	p	class:CCSet	access:public	signature:(CCObject *pObject)
addObjectsFromArray	cocoa/CCArray.cpp	/^void CCArray::addObjectsFromArray(CCArray* otherArray)$/;"	f	class:CCArray	signature:(CCArray* otherArray)
addObjectsFromArray	cocoa/CCArray.h	/^    void addObjectsFromArray(CCArray* otherArray);$/;"	p	class:CCArray	access:public	signature:(CCArray* otherArray)
addObserver	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::addObserver(CCObject *target, $/;"	f	class:CCNotificationCenter	signature:(CCObject *target, SEL_CallFuncO selector, const char *name, CCObject *obj)
addObserver	support/CCNotificationCenter.h	/^    void addObserver(CCObject *target, $/;"	p	class:CCNotificationCenter	access:public	signature:(CCObject *target, SEL_CallFuncO selector, const char *name, CCObject *obj)
addPVRImage	textures/CCTextureCache.cpp	/^CCTexture2D * CCTextureCache::addPVRImage(const char* path)$/;"	f	class:CCTextureCache	signature:(const char* path)
addPVRImage	textures/CCTextureCache.h	/^    CCTexture2D* addPVRImage(const char* filename);$/;"	p	class:CCTextureCache	access:public	signature:(const char* filename)
addPVRTCImage	textures/CCTextureCache.cpp	/^CCTexture2D* CCTextureCache::addPVRTCImage(const char* path, int bpp, bool hasAlpha, int width)$/;"	f	class:CCTextureCache	signature:(const char* path, int bpp, bool hasAlpha, int width)
addPVRTCImage	textures/CCTextureCache.h	/^    CCTexture2D* addPVRTCImage(const char* fileimage, int bpp, bool hasAlpha, int width);$/;"	p	class:CCTextureCache	access:public	signature:(const char* fileimage, int bpp, bool hasAlpha, int width)
addParticle	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::addParticle()$/;"	f	class:CCParticleSystem	signature:()
addParticle	particle_nodes/CCParticleSystem.h	/^    bool addParticle();$/;"	p	class:CCParticleSystem	access:public	signature:()
addProgram	shaders/CCShaderCache.cpp	/^void CCShaderCache::addProgram(CCGLProgram* program, const char* key)$/;"	f	class:CCShaderCache	signature:(CCGLProgram* program, const char* key)
addProgram	shaders/CCShaderCache.h	/^    void addProgram(CCGLProgram* program, const char* key);$/;"	p	class:CCShaderCache	access:public	signature:(CCGLProgram* program, const char* key)
addSearchPath	platform/CCFileUtils.cpp	/^void CCFileUtils::addSearchPath(const char* path_)$/;"	f	class:CCFileUtils	signature:(const char* path_)
addSearchPath	platform/CCFileUtils.h	/^     void addSearchPath(const char* path);$/;"	p	class:CCFileUtils	access:public	signature:(const char* path)
addSearchResolutionsOrder	platform/CCFileUtils.cpp	/^void CCFileUtils::addSearchResolutionsOrder(const char* order)$/;"	f	class:CCFileUtils	signature:(const char* order)
addSearchResolutionsOrder	platform/CCFileUtils.h	/^    virtual void addSearchResolutionsOrder(const char* order);$/;"	p	class:CCFileUtils	access:public	signature:(const char* order)
addSpriteFrame	sprite_nodes/CCAnimation.cpp	/^void CCAnimation::addSpriteFrame(CCSpriteFrame *pFrame)$/;"	f	class:CCAnimation	signature:(CCSpriteFrame *pFrame)
addSpriteFrame	sprite_nodes/CCAnimation.h	/^    void addSpriteFrame(CCSpriteFrame *pFrame);$/;"	p	class:CCAnimation	access:public	signature:(CCSpriteFrame *pFrame)
addSpriteFrame	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFrame(CCSpriteFrame *pobFrame, const char *pszFrameName)$/;"	f	class:CCSpriteFrameCache	signature:(CCSpriteFrame *pobFrame, const char *pszFrameName)
addSpriteFrame	sprite_nodes/CCSpriteFrameCache.h	/^    void addSpriteFrame(CCSpriteFrame *pobFrame, const char *pszFrameName);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(CCSpriteFrame *pobFrame, const char *pszFrameName)
addSpriteFrameWithFileName	sprite_nodes/CCAnimation.cpp	/^void CCAnimation::addSpriteFrameWithFileName(const char *pszFileName)$/;"	f	class:CCAnimation	signature:(const char *pszFileName)
addSpriteFrameWithFileName	sprite_nodes/CCAnimation.h	/^    void addSpriteFrameWithFileName(const char *pszFileName);$/;"	p	class:CCAnimation	access:public	signature:(const char *pszFileName)
addSpriteFrameWithTexture	sprite_nodes/CCAnimation.cpp	/^void CCAnimation::addSpriteFrameWithTexture(CCTexture2D *pobTexture, const CCRect& rect)$/;"	f	class:CCAnimation	signature:(CCTexture2D *pobTexture, const CCRect& rect)
addSpriteFrameWithTexture	sprite_nodes/CCAnimation.h	/^    void addSpriteFrameWithTexture(CCTexture2D* pobTexture, const CCRect& rect);$/;"	p	class:CCAnimation	access:public	signature:(CCTexture2D* pobTexture, const CCRect& rect)
addSpriteFramesWithDictionary	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFramesWithDictionary(CCDictionary* dictionary, CCTexture2D *pobTexture)$/;"	f	class:CCSpriteFrameCache	signature:(CCDictionary* dictionary, CCTexture2D *pobTexture)
addSpriteFramesWithDictionary	sprite_nodes/CCSpriteFrameCache.h	/^    void addSpriteFramesWithDictionary(CCDictionary* pobDictionary, CCTexture2D *pobTexture);$/;"	p	class:CCSpriteFrameCache	access:private	signature:(CCDictionary* pobDictionary, CCTexture2D *pobTexture)
addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFramesWithFile(const char *pszPlist)$/;"	f	class:CCSpriteFrameCache	signature:(const char *pszPlist)
addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFramesWithFile(const char *pszPlist, CCTexture2D *pobTexture)$/;"	f	class:CCSpriteFrameCache	signature:(const char *pszPlist, CCTexture2D *pobTexture)
addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFramesWithFile(const char* plist, const char* textureFileName)$/;"	f	class:CCSpriteFrameCache	signature:(const char* plist, const char* textureFileName)
addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.h	/^    void addSpriteFramesWithFile(const char *pszPlist);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(const char *pszPlist)
addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.h	/^    void addSpriteFramesWithFile(const char *pszPlist, CCTexture2D *pobTexture);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(const char *pszPlist, CCTexture2D *pobTexture)
addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.h	/^    void addSpriteFramesWithFile(const char* plist, const char* textureFileName);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(const char* plist, const char* textureFileName)
addSpriteWithoutQuad	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode * CCSpriteBatchNode::addSpriteWithoutQuad(CCSprite*child, unsigned int z, int aTag)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite*child, unsigned int z, int aTag)
addSpriteWithoutQuad	sprite_nodes/CCSpriteBatchNode.h	/^    CCSpriteBatchNode * addSpriteWithoutQuad(CCSprite*child, unsigned int z, int aTag);$/;"	p	class:CCSpriteBatchNode	access:protected	signature:(CCSprite*child, unsigned int z, int aTag)
addStandardDelegate	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::addStandardDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCTouchDispatcher	signature:(CCTouchDelegate *pDelegate, int nPriority)
addStandardDelegate	touch_dispatcher/CCTouchDispatcher.h	/^    void addStandardDelegate(CCTouchDelegate *pDelegate, int nPriority);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority)
addStringTexture	textures/CCTextureCache.cpp	/^void VolatileTexture::addStringTexture(CCTexture2D *tt, const char* text, const CCSize& dimensions, CCTextAlignment alignment, $/;"	f	class:VolatileTexture	signature:(CCTexture2D *tt, const char* text, const CCSize& dimensions, CCTextAlignment alignment, CCVerticalTextAlignment vAlignment, const char *fontName, float fontSize)
addStringTexture	textures/CCTextureCache.h	/^    static void addStringTexture(CCTexture2D *tt, const char* text, const CCSize& dimensions, CCTextAlignment alignment, $/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *tt, const char* text, const CCSize& dimensions, CCTextAlignment alignment, CCVerticalTextAlignment vAlignment, const char *fontName, float fontSize)
addSubItem	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::addSubItem(CCMenuItem *item)$/;"	f	class:CCMenuItemToggle	signature:(CCMenuItem *item)
addSubItem	menu_nodes/CCMenuItem.h	/^    void addSubItem(CCMenuItem *item);$/;"	p	class:CCMenuItemToggle	access:public	signature:(CCMenuItem *item)
addTargetedDelegate	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::addTargetedDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallowsTouches)$/;"	f	class:CCTouchDispatcher	signature:(CCTouchDelegate *pDelegate, int nPriority, bool bSwallowsTouches)
addTargetedDelegate	touch_dispatcher/CCTouchDispatcher.h	/^    void addTargetedDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallowsTouches);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority, bool bSwallowsTouches)
addUIImage	textures/CCTextureCache.cpp	/^CCTexture2D* CCTextureCache::addUIImage(CCImage *image, const char *key)$/;"	f	class:CCTextureCache	signature:(CCImage *image, const char *key)
addUIImage	textures/CCTextureCache.h	/^    CCTexture2D* addUIImage(CCImage *image, const char *key);$/;"	p	class:CCTextureCache	access:public	signature:(CCImage *image, const char *key)
address	textures/CCTexturePVR.h	/^    unsigned char *address;$/;"	m	struct:CCPVRMipmap	access:public
afterDraw	effects/CCGrid.cpp	/^void CCGridBase::afterDraw(cocos2d::CCNode *pTarget)$/;"	f	class:CCGridBase	signature:(cocos2d::CCNode *pTarget)
afterDraw	effects/CCGrid.h	/^    void afterDraw(CCNode *pTarget);$/;"	p	class:CCGridBase	access:public	signature:(CCNode *pTarget)
afterRender	effects/CCGrabber.cpp	/^void CCGrabber::afterRender(cocos2d::CCTexture2D *pTexture)$/;"	f	class:CCGrabber	signature:(cocos2d::CCTexture2D *pTexture)
afterRender	effects/CCGrabber.h	/^    void afterRender(CCTexture2D *pTexture);$/;"	p	class:CCGrabber	access:public	signature:(CCTexture2D *pTexture)
alignItemsHorizontally	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsHorizontally(void)$/;"	f	class:CCMenu	signature:(void)
alignItemsHorizontally	menu_nodes/CCMenu.h	/^    void alignItemsHorizontally();$/;"	p	class:CCMenu	access:public	signature:()
alignItemsHorizontallyWithPadding	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsHorizontallyWithPadding(float padding)$/;"	f	class:CCMenu	signature:(float padding)
alignItemsHorizontallyWithPadding	menu_nodes/CCMenu.h	/^    void alignItemsHorizontallyWithPadding(float padding);$/;"	p	class:CCMenu	access:public	signature:(float padding)
alignItemsInColumns	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInColumns(unsigned int columns, ...)$/;"	f	class:CCMenu	signature:(unsigned int columns, ...)
alignItemsInColumns	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInColumns(unsigned int columns, va_list args)$/;"	f	class:CCMenu	signature:(unsigned int columns, va_list args)
alignItemsInColumns	menu_nodes/CCMenu.h	/^    void alignItemsInColumns(unsigned int columns, ...);$/;"	p	class:CCMenu	access:public	signature:(unsigned int columns, ...)
alignItemsInColumns	menu_nodes/CCMenu.h	/^    void alignItemsInColumns(unsigned int columns, va_list args);$/;"	p	class:CCMenu	access:public	signature:(unsigned int columns, va_list args)
alignItemsInColumnsWithArray	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInColumnsWithArray(CCArray* rowsArray)$/;"	f	class:CCMenu	signature:(CCArray* rowsArray)
alignItemsInColumnsWithArray	menu_nodes/CCMenu.h	/^    void alignItemsInColumnsWithArray(CCArray* rows);$/;"	p	class:CCMenu	access:public	signature:(CCArray* rows)
alignItemsInRows	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInRows(unsigned int rows, ...)$/;"	f	class:CCMenu	signature:(unsigned int rows, ...)
alignItemsInRows	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInRows(unsigned int rows, va_list args)$/;"	f	class:CCMenu	signature:(unsigned int rows, va_list args)
alignItemsInRows	menu_nodes/CCMenu.h	/^    void alignItemsInRows(unsigned int rows, ...);$/;"	p	class:CCMenu	access:public	signature:(unsigned int rows, ...)
alignItemsInRows	menu_nodes/CCMenu.h	/^    void alignItemsInRows(unsigned int rows, va_list args);$/;"	p	class:CCMenu	access:public	signature:(unsigned int rows, va_list args)
alignItemsInRowsWithArray	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInRowsWithArray(CCArray* columnArray)$/;"	f	class:CCMenu	signature:(CCArray* columnArray)
alignItemsInRowsWithArray	menu_nodes/CCMenu.h	/^    void alignItemsInRowsWithArray(CCArray* columns);$/;"	p	class:CCMenu	access:public	signature:(CCArray* columns)
alignItemsVertically	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsVertically()$/;"	f	class:CCMenu	signature:()
alignItemsVertically	menu_nodes/CCMenu.h	/^    void alignItemsVertically();$/;"	p	class:CCMenu	access:public	signature:()
alignItemsVerticallyWithPadding	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsVerticallyWithPadding(float padding)$/;"	f	class:CCMenu	signature:(float padding)
alignItemsVerticallyWithPadding	menu_nodes/CCMenu.h	/^    void alignItemsVerticallyWithPadding(float padding);$/;"	p	class:CCMenu	access:public	signature:(float padding)
allKeys	cocoa/CCDictionary.cpp	/^CCArray* CCDictionary::allKeys()$/;"	f	class:CCDictionary	signature:()
allKeys	cocoa/CCDictionary.h	/^    CCArray* allKeys();$/;"	p	class:CCDictionary	access:public	signature:()
allKeysForObject	cocoa/CCDictionary.cpp	/^CCArray* CCDictionary::allKeysForObject(CCObject* object)$/;"	f	class:CCDictionary	signature:(CCObject* object)
allKeysForObject	cocoa/CCDictionary.h	/^    CCArray* allKeysForObject(CCObject* object);$/;"	p	class:CCDictionary	access:public	signature:(CCObject* object)
allocMemory	particle_nodes/CCParticleSystemQuad.cpp	/^bool CCParticleSystemQuad::allocMemory()$/;"	f	class:CCParticleSystemQuad	signature:()
allocMemory	particle_nodes/CCParticleSystemQuad.h	/^    bool allocMemory();$/;"	p	class:CCParticleSystemQuad	access:private	signature:()
alpha	textures/CCTexturePVR.h	/^	bool alpha;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
alphabet	support/base64.cpp	/^unsigned char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	m	namespace:cocos2d	file:
amount	label_nodes/CCLabelBMFont.h	/^	int				amount;$/;"	m	struct:_KerningHashElement	access:public
angle	particle_nodes/CCParticleSystem.h	/^        float        angle;$/;"	m	struct:sCCParticle::__anon23	access:public
animationByName	sprite_nodes/CCAnimationCache.cpp	/^CCAnimation* CCAnimationCache::animationByName(const char* name)$/;"	f	class:CCAnimationCache	signature:(const char* name)
animationByName	sprite_nodes/CCAnimationCache.h	/^    CCAnimation* animationByName(const char* name);$/;"	p	class:CCAnimationCache	access:public	signature:(const char* name)
anyObject	cocoa/CCSet.cpp	/^CCObject* CCSet::anyObject()$/;"	f	class:CCSet	signature:()
anyObject	cocoa/CCSet.h	/^    CCObject* anyObject();$/;"	p	class:CCSet	access:public	signature:()
appendChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::appendChild(CCSprite* sprite)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite* sprite)
appendChild	sprite_nodes/CCSpriteBatchNode.h	/^    void appendChild(CCSprite* sprite);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite* sprite)
appendIn	CCScheduler.cpp	/^void CCScheduler::appendIn(_listEntry **ppList, CCObject *pTarget, bool bPaused)$/;"	f	class:CCScheduler	signature:(_listEntry **ppList, CCObject *pTarget, bool bPaused)
appendIn	CCScheduler.h	/^    void appendIn(struct _listEntry **ppList, CCObject *pTarget, bool bPaused);$/;"	p	class:CCScheduler	access:private	signature:(struct _listEntry **ppList, CCObject *pTarget, bool bPaused)
appendTileForGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite * CCTMXLayer::appendTileForGID(unsigned int gid, const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(unsigned int gid, const CCPoint& pos)
appendTileForGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite* appendTileForGID(unsigned int gid, const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(unsigned int gid, const CCPoint& pos)
applicationDidEnterBackground	platform/CCApplicationProtocol.h	/^    virtual void applicationDidEnterBackground() = 0;$/;"	p	class:CCApplicationProtocol	access:public	signature:()
applicationDidFinishLaunching	platform/CCApplicationProtocol.h	/^    virtual bool applicationDidFinishLaunching() = 0;$/;"	p	class:CCApplicationProtocol	access:public	signature:()
applicationWillEnterForeground	platform/CCApplicationProtocol.h	/^    virtual void applicationWillEnterForeground() = 0;$/;"	p	class:CCApplicationProtocol	access:public	signature:()
arr	support/data_support/ccCArray.h	/^	CCObject** arr;$/;"	m	struct:_ccArray	access:public
arr	support/data_support/ccCArray.h	/^    void** arr;$/;"	m	struct:_ccCArray	access:public
arrayMakeObjectsPerformSelector	cocoa/CCArray.h	75;"	d
arrayMakeObjectsPerformSelectorWithObject	cocoa/CCArray.h	92;"	d
arrayWithContentsOfFile	platform/CCFileUtils.cpp	/^    CCArray* arrayWithContentsOfFile(const char* pFileName)$/;"	f	class:CCDictMaker	access:public	signature:(const char* pFileName)
asyncStruct	textures/CCTextureCache.cpp	/^    AsyncStruct *asyncStruct;$/;"	m	struct:_ImageInfo	file:	access:public
atlasIndex	particle_nodes/CCParticleSystem.h	/^    unsigned int    atlasIndex;$/;"	m	struct:sCCParticle	access:public
atlasIndexForChild	sprite_nodes/CCSpriteBatchNode.cpp	/^unsigned int CCSpriteBatchNode::atlasIndexForChild(CCSprite *pobSprite, int nZ)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *pobSprite, int nZ)
atlasIndexForChild	sprite_nodes/CCSpriteBatchNode.h	/^    unsigned int atlasIndexForChild(CCSprite *sprite, int z);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite *sprite, int z)
atlasIndexForExistantZ	tilemap_parallax_nodes/CCTMXLayer.cpp	/^unsigned int CCTMXLayer::atlasIndexForExistantZ(unsigned int z)$/;"	f	class:CCTMXLayer	signature:(unsigned int z)
atlasIndexForExistantZ	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int atlasIndexForExistantZ(unsigned int z);$/;"	p	class:CCTMXLayer	access:private	signature:(unsigned int z)
atlasIndexForNewZ	tilemap_parallax_nodes/CCTMXLayer.cpp	/^unsigned int CCTMXLayer::atlasIndexForNewZ(int z)$/;"	f	class:CCTMXLayer	signature:(int z)
atlasIndexForNewZ	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int atlasIndexForNewZ(int z);$/;"	p	class:CCTMXLayer	access:private	signature:(int z)
atlasNameFromFntFile	label_nodes/CCLabelBMFont.h	/^    char * atlasNameFromFntFile(const char *fntFile);$/;"	p	class:CCLabelBMFont	access:private	signature:(const char *fntFile)
attachDelegateWithIME	text_input_node/CCIMEDispatcher.cpp	/^bool CCIMEDispatcher::attachDelegateWithIME(CCIMEDelegate * pDelegate)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEDelegate * pDelegate)
attachDelegateWithIME	text_input_node/CCIMEDispatcher.h	/^    bool attachDelegateWithIME(CCIMEDelegate * pDelegate);$/;"	p	class:CCIMEDispatcher	access:protected	signature:(CCIMEDelegate * pDelegate)
attachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual bool attachWithIME();$/;"	p	class:CCIMEDelegate	access:public	signature:()
attachWithIME	text_input_node/CCIMEDispatcher.cpp	/^bool CCIMEDelegate::attachWithIME()$/;"	f	class:CCIMEDelegate	signature:()
attachWithIME	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::attachWithIME()$/;"	f	class:CCTextFieldTTF	signature:()
attachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool attachWithIME();$/;"	p	class:CCTextFieldTTF	access:public	signature:()
autorelease	cocoa/CCObject.cpp	/^CCObject* CCObject::autorelease(void)$/;"	f	class:CCObject	signature:(void)
autorelease	cocoa/CCObject.h	/^    CCObject* autorelease(void);$/;"	p	class:CCObject	access:public	signature:(void)
b	cocoa/CCAffineTransform.h	/^  float a, b, c, d;$/;"	m	struct:CCAffineTransform	access:public
b	include/ccTypes.h	/^	ccV2F_C4B_T2F b;$/;"	m	struct:_ccV2F_C4B_T2F_Triangle	access:public
b	include/ccTypes.h	/^    GLfloat b;$/;"	m	struct:_ccColor4F	access:public
b	include/ccTypes.h	/^    GLubyte b;$/;"	m	struct:_ccColor3B	access:public
b	include/ccTypes.h	/^    GLubyte b;$/;"	m	struct:_ccColor4B	access:public
b	kazmath/include/kazmath/plane.h	/^    kmScalar     a, b, c, d;$/;"	m	struct:kmPlane	access:public
base64Decode	support/base64.cpp	/^int base64Decode(unsigned char *in, unsigned int inLength, unsigned char **out)$/;"	f	namespace:cocos2d	signature:(unsigned char *in, unsigned int inLength, unsigned char **out)
base64Decode	support/base64.h	/^int base64Decode(unsigned char *in, unsigned int inLength, unsigned char **out);$/;"	p	namespace:cocos2d	signature:(unsigned char *in, unsigned int inLength, unsigned char **out)
beforeDraw	effects/CCGrid.cpp	/^void CCGridBase::beforeDraw(void)$/;"	f	class:CCGridBase	signature:(void)
beforeDraw	effects/CCGrid.h	/^    void beforeDraw(void);$/;"	p	class:CCGridBase	access:public	signature:(void)
beforeRender	effects/CCGrabber.cpp	/^void CCGrabber::beforeRender(CCTexture2D *pTexture)$/;"	f	class:CCGrabber	signature:(CCTexture2D *pTexture)
beforeRender	effects/CCGrabber.h	/^    void beforeRender(CCTexture2D *pTexture);$/;"	p	class:CCGrabber	access:public	signature:(CCTexture2D *pTexture)
begin	cocoa/CCSet.cpp	/^CCSetIterator CCSet::begin(void)$/;"	f	class:CCSet	signature:(void)
begin	cocoa/CCSet.h	/^    CCSetIterator begin();$/;"	p	class:CCSet	access:public	signature:()
begin	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::begin()$/;"	f	class:CCRenderTexture	signature:()
begin	misc_nodes/CCRenderTexture.h	/^    void begin();$/;"	p	class:CCRenderTexture	access:public	signature:()
begin	text_input_node/CCIMEDelegate.h	/^    CCRect  begin;              \/\/ the soft keyboard rectangle when animation begins$/;"	m	struct:__anon46	access:public
beginWithClear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::beginWithClear(float r, float g, float b, float a)$/;"	f	class:CCRenderTexture	signature:(float r, float g, float b, float a)
beginWithClear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue)$/;"	f	class:CCRenderTexture	signature:(float r, float g, float b, float a, float depthValue)
beginWithClear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue)$/;"	f	class:CCRenderTexture	signature:(float r, float g, float b, float a, float depthValue, int stencilValue)
beginWithClear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags)$/;"	f	class:CCRenderTexture	signature:(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags)
beginWithClear	misc_nodes/CCRenderTexture.h	/^    void beginWithClear(float r, float g, float b, float a);$/;"	p	class:CCRenderTexture	access:public	signature:(float r, float g, float b, float a)
beginWithClear	misc_nodes/CCRenderTexture.h	/^    void beginWithClear(float r, float g, float b, float a, float depthValue);$/;"	p	class:CCRenderTexture	access:public	signature:(float r, float g, float b, float a, float depthValue)
beginWithClear	misc_nodes/CCRenderTexture.h	/^    void beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue);$/;"	p	class:CCRenderTexture	access:public	signature:(float r, float g, float b, float a, float depthValue, int stencilValue)
beginWithClear	misc_nodes/CCRenderTexture.h	/^    void beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags);$/;"	p	class:CCRenderTexture	access:private	signature:(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags)
bezierat	actions/CCActionInterval.cpp	/^static inline float bezierat( float a, float b, float c, float d, float t )$/;"	f	file:	signature:( float a, float b, float c, float d, float t )
bitmaskAlpha	textures/CCTexturePVR.cpp	/^    unsigned int bitmaskAlpha;$/;"	m	struct:_PVRTexHeader	file:	access:public
bitmaskBlue	textures/CCTexturePVR.cpp	/^    unsigned int bitmaskBlue;$/;"	m	struct:_PVRTexHeader	file:	access:public
bitmaskGreen	textures/CCTexturePVR.cpp	/^    unsigned int bitmaskGreen;$/;"	m	struct:_PVRTexHeader	file:	access:public
bitmaskRed	textures/CCTexturePVR.cpp	/^    unsigned int bitmaskRed;$/;"	m	struct:_PVRTexHeader	file:	access:public
bitsPerPixelForFormat	textures/CCTexture2D.cpp	/^unsigned int CCTexture2D::bitsPerPixelForFormat()$/;"	f	class:CCTexture2D	signature:()
bitsPerPixelForFormat	textures/CCTexture2D.cpp	/^unsigned int CCTexture2D::bitsPerPixelForFormat(CCTexture2DPixelFormat format)$/;"	f	class:CCTexture2D	signature:(CCTexture2DPixelFormat format)
bitsPerPixelForFormat	textures/CCTexture2D.h	/^    unsigned int bitsPerPixelForFormat();  $/;"	p	class:CCTexture2D	access:public	signature:()
bitsPerPixelForFormat	textures/CCTexture2D.h	/^    unsigned int bitsPerPixelForFormat(CCTexture2DPixelFormat format);$/;"	p	class:CCTexture2D	access:public	signature:(CCTexture2DPixelFormat format)
bl	include/ccTypes.h	/^    ccTex2F    bl;$/;"	m	struct:_ccT2F_Quad	access:public
bl	include/ccTypes.h	/^    ccV2F_C4B_T2F    bl;$/;"	m	struct:_ccV2F_C4B_T2F_Quad	access:public
bl	include/ccTypes.h	/^    ccV2F_C4F_T2F    bl;$/;"	m	struct:_ccV2F_C4F_T2F_Quad	access:public
bl	include/ccTypes.h	/^    ccV3F_C4B_T2F    bl;$/;"	m	struct:_ccV3F_C4B_T2F_Quad	access:public
bl	include/ccTypes.h	/^    ccVertex2F        bl;$/;"	m	struct:_ccQuad2	access:public
bl	include/ccTypes.h	/^    ccVertex3F        bl;$/;"	m	struct:_ccQuad3	access:public
blit	effects/CCGrid.cpp	/^void CCGrid3D::blit(void)$/;"	f	class:CCGrid3D	signature:(void)
blit	effects/CCGrid.cpp	/^void CCGridBase::blit(void)$/;"	f	class:CCGridBase	signature:(void)
blit	effects/CCGrid.cpp	/^void CCTiledGrid3D::blit(void)$/;"	f	class:CCTiledGrid3D	signature:(void)
blit	effects/CCGrid.h	/^    virtual void blit(void);$/;"	p	class:CCGrid3D	access:public	signature:(void)
blit	effects/CCGrid.h	/^    virtual void blit(void);$/;"	p	class:CCGridBase	access:public	signature:(void)
blit	effects/CCGrid.h	/^    virtual void blit(void);$/;"	p	class:CCTiledGrid3D	access:public	signature:(void)
bloom_bv	support/data_support/uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table	access:public
bloom_nbits	support/data_support/uthash.h	/^   char bloom_nbits;$/;"	m	struct:UT_hash_table	access:public
bloom_sig	support/data_support/uthash.h	/^   unsigned int bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table	access:public
boolValue	cocoa/CCString.cpp	/^bool CCString::boolValue() const$/;"	f	class:CCString	signature:() const
boolValue	cocoa/CCString.h	/^    bool boolValue() const;$/;"	p	class:CCString	access:public	signature:() const
bottom	label_nodes/CCLabelBMFont.h	/^    int bottom;$/;"	m	struct:_BMFontPadding	access:public
bounceTime	actions/CCActionEase.cpp	/^float CCEaseBounce::bounceTime(float time)$/;"	f	class:CCEaseBounce	signature:(float time)
bounceTime	actions/CCActionEase.h	/^    float bounceTime(float time);$/;"	p	class:CCEaseBounce	access:public	signature:(float time)
boundaryTexCoord	misc_nodes/CCProgressTimer.cpp	/^CCPoint CCProgressTimer::boundaryTexCoord(char index)$/;"	f	class:CCProgressTimer	signature:(char index)
boundaryTexCoord	misc_nodes/CCProgressTimer.h	/^    CCPoint boundaryTexCoord(char index);$/;"	p	class:CCProgressTimer	access:protected	signature:(char index)
boundingBox	base_nodes/CCNode.cpp	/^CCRect CCNode::boundingBox()$/;"	f	class:CCNode	signature:()
boundingBox	base_nodes/CCNode.h	/^    CCRect boundingBox(void);$/;"	p	class:CCNode	access:public	signature:(void)
bpp	textures/CCTexturePVR.cpp	/^    unsigned int bpp;$/;"	m	struct:_PVRTexHeader	file:	access:public
bpp	textures/CCTexturePVR.h	/^	uint32_t bpp;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
br	include/ccTypes.h	/^    ccTex2F    br;$/;"	m	struct:_ccT2F_Quad	access:public
br	include/ccTypes.h	/^    ccV2F_C4B_T2F    br;$/;"	m	struct:_ccV2F_C4B_T2F_Quad	access:public
br	include/ccTypes.h	/^    ccV2F_C4F_T2F    br;$/;"	m	struct:_ccV2F_C4F_T2F_Quad	access:public
br	include/ccTypes.h	/^    ccV3F_C4B_T2F    br;$/;"	m	struct:_ccV3F_C4B_T2F_Quad	access:public
br	include/ccTypes.h	/^    ccVertex2F        br;$/;"	m	struct:_ccQuad2	access:public
br	include/ccTypes.h	/^    ccVertex3F        br;$/;"	m	struct:_ccQuad3	access:public
bstream	support/zip_support/unzip.cpp	/^    bz_stream bstream;          \/* bzLib stream structure for bziped *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
buckets	support/data_support/uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table	access:public
buildWithMapInfo	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^void CCTMXTiledMap::buildWithMapInfo(CCTMXMapInfo* mapInfo)$/;"	f	class:CCTMXTiledMap	signature:(CCTMXMapInfo* mapInfo)
buildWithMapInfo	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    void buildWithMapInfo(CCTMXMapInfo* mapInfo);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCTMXMapInfo* mapInfo)
byte_before_the_zipfile	support/zip_support/unzip.cpp	/^    ZPOS64_T byte_before_the_zipfile;\/* byte before the zipfile, (>0 for sfx)*\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
byte_before_the_zipfile	support/zip_support/unzip.cpp	/^    ZPOS64_T byte_before_the_zipfile;\/* byte before the zipfile, (>0 for sfx)*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
c	cocoa/CCAffineTransform.h	/^  float a, b, c, d;$/;"	m	struct:CCAffineTransform	access:public
c	include/ccTypes.h	/^	ccV2F_C4B_T2F c;$/;"	m	struct:_ccV2F_C4B_T2F_Triangle	access:public
c	kazmath/include/kazmath/plane.h	/^    kmScalar     a, b, c, d;$/;"	m	struct:kmPlane	access:public
calculateDeltaTime	CCDirector.cpp	/^void CCDirector::calculateDeltaTime(void)$/;"	f	class:CCDirector	signature:(void)
calculateDeltaTime	CCDirector.h	/^    void calculateDeltaTime();$/;"	p	class:CCDirector	access:protected	signature:()
calculateItemsToRender	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::calculateItemsToRender()$/;"	f	class:CCTileMapAtlas	signature:()
calculateItemsToRender	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    void calculateItemsToRender();$/;"	p	class:CCTileMapAtlas	access:private	signature:()
calculateLayerOffset	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::calculateLayerOffset(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
calculateLayerOffset	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCPoint calculateLayerOffset(const CCPoint& offset);$/;"	p	class:CCTMXLayer	access:private	signature:(const CCPoint& offset)
calculateMPF	CCDirector.cpp	/^void CCDirector::calculateMPF()$/;"	f	class:CCDirector	signature:()
calculateMPF	CCDirector.h	/^    void calculateMPF();$/;"	p	class:CCDirector	access:protected	signature:()
calculateMaxItems	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::calculateMaxItems()$/;"	f	class:CCAtlasNode	signature:()
calculateMaxItems	base_nodes/CCAtlasNode.h	/^    void calculateMaxItems();$/;"	p	class:CCAtlasNode	access:private	signature:()
calculateVertexPoints	effects/CCGrid.cpp	/^void CCGrid3D::calculateVertexPoints(void)$/;"	f	class:CCGrid3D	signature:(void)
calculateVertexPoints	effects/CCGrid.cpp	/^void CCGridBase::calculateVertexPoints(void)$/;"	f	class:CCGridBase	signature:(void)
calculateVertexPoints	effects/CCGrid.cpp	/^void CCTiledGrid3D::calculateVertexPoints(void)$/;"	f	class:CCTiledGrid3D	signature:(void)
calculateVertexPoints	effects/CCGrid.h	/^    virtual void calculateVertexPoints(void);$/;"	p	class:CCGrid3D	access:public	signature:(void)
calculateVertexPoints	effects/CCGrid.h	/^    virtual void calculateVertexPoints(void);$/;"	p	class:CCGridBase	access:public	signature:(void)
calculateVertexPoints	effects/CCGrid.h	/^    virtual void calculateVertexPoints(void);$/;"	p	class:CCTiledGrid3D	access:public	signature:(void)
calculate_line_normal	kazmath/src/ray2.c	/^void calculate_line_normal(kmVec2 p1, kmVec2 p2, kmVec2* normal_out) {$/;"	f	signature:(kmVec2 p1, kmVec2 p2, kmVec2* normal_out)
call_zopen64	support/zip_support/ioapi.cpp	/^voidpf call_zopen64 (const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode)$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode)
call_zopen64	support/zip_support/ioapi.h	/^voidpf call_zopen64 OF((const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode));$/;"	p	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode)
call_zseek64	support/zip_support/ioapi.cpp	/^long call_zseek64 (const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin)$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin)
call_zseek64	support/zip_support/ioapi.h	/^long    call_zseek64 OF((const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin));$/;"	p	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin)
call_ztell64	support/zip_support/ioapi.cpp	/^ZPOS64_T call_ztell64 (const zlib_filefunc64_32_def* pfilefunc,voidpf filestream)$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pfilefunc,voidpf filestream)
call_ztell64	support/zip_support/ioapi.h	/^ZPOS64_T call_ztell64 OF((const zlib_filefunc64_32_def* pfilefunc,voidpf filestream));$/;"	p	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pfilefunc,voidpf filestream)
callfuncND_selector	cocoa/CCObject.h	90;"	d
callfuncN_selector	cocoa/CCObject.h	89;"	d
callfuncO_selector	cocoa/CCObject.h	91;"	d
callfunc_selector	cocoa/CCObject.h	88;"	d
canAttachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual bool canAttachWithIME() { return false; }$/;"	f	class:CCIMEDelegate	access:protected	signature:()
canAttachWithIME	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::canAttachWithIME()$/;"	f	class:CCTextFieldTTF	signature:()
canAttachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool canAttachWithIME();$/;"	p	class:CCTextFieldTTF	access:protected	signature:()
canDetachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual bool canDetachWithIME() { return false; }$/;"	f	class:CCIMEDelegate	access:protected	signature:()
canDetachWithIME	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::canDetachWithIME()$/;"	f	class:CCTextFieldTTF	signature:()
canDetachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool canDetachWithIME();$/;"	p	class:CCTextFieldTTF	access:protected	signature:()
capacity	cocoa/CCArray.cpp	/^unsigned int CCArray::capacity()$/;"	f	class:CCArray	signature:()
capacity	cocoa/CCArray.h	/^    unsigned int capacity();$/;"	p	class:CCArray	access:public	signature:()
capacity	kazmath/include/kazmath/GL/mat4stack.h	/^    int capacity; \/\/The total item capacity$/;"	m	struct:km_mat4_stack	access:public
ccAnimationFrameData	include/ccTypes.h	/^} ccAnimationFrameData;$/;"	t	typeref:struct:__anon8
ccArray	support/data_support/ccCArray.h	/^} ccArray;$/;"	t	typeref:struct:_ccArray
ccArrayAppendArray	support/data_support/ccCArray.cpp	/^void ccArrayAppendArray(ccArray *arr, ccArray *plusArr)$/;"	f	signature:(ccArray *arr, ccArray *plusArr)
ccArrayAppendArray	support/data_support/ccCArray.h	/^void ccArrayAppendArray(ccArray *arr, ccArray *plusArr);$/;"	p	signature:(ccArray *arr, ccArray *plusArr)
ccArrayAppendArrayWithResize	support/data_support/ccCArray.cpp	/^void ccArrayAppendArrayWithResize(ccArray *arr, ccArray *plusArr)$/;"	f	signature:(ccArray *arr, ccArray *plusArr)
ccArrayAppendArrayWithResize	support/data_support/ccCArray.h	/^void ccArrayAppendArrayWithResize(ccArray *arr, ccArray *plusArr);$/;"	p	signature:(ccArray *arr, ccArray *plusArr)
ccArrayAppendObject	support/data_support/ccCArray.cpp	/^void ccArrayAppendObject(ccArray *arr, CCObject* object)$/;"	f	signature:(ccArray *arr, CCObject* object)
ccArrayAppendObject	support/data_support/ccCArray.h	/^void ccArrayAppendObject(ccArray *arr, CCObject* object);$/;"	p	signature:(ccArray *arr, CCObject* object)
ccArrayAppendObjectWithResize	support/data_support/ccCArray.cpp	/^void ccArrayAppendObjectWithResize(ccArray *arr, CCObject* object)$/;"	f	signature:(ccArray *arr, CCObject* object)
ccArrayAppendObjectWithResize	support/data_support/ccCArray.h	/^void ccArrayAppendObjectWithResize(ccArray *arr, CCObject* object);$/;"	p	signature:(ccArray *arr, CCObject* object)
ccArrayContainsObject	support/data_support/ccCArray.cpp	/^bool ccArrayContainsObject(ccArray *arr, CCObject* object)$/;"	f	signature:(ccArray *arr, CCObject* object)
ccArrayContainsObject	support/data_support/ccCArray.h	/^bool ccArrayContainsObject(ccArray *arr, CCObject* object);$/;"	p	signature:(ccArray *arr, CCObject* object)
ccArrayDoubleCapacity	support/data_support/ccCArray.cpp	/^void ccArrayDoubleCapacity(ccArray *arr)$/;"	f	signature:(ccArray *arr)
ccArrayDoubleCapacity	support/data_support/ccCArray.h	/^void ccArrayDoubleCapacity(ccArray *arr);$/;"	p	signature:(ccArray *arr)
ccArrayEnsureExtraCapacity	support/data_support/ccCArray.cpp	/^void ccArrayEnsureExtraCapacity(ccArray *arr, unsigned int extra)$/;"	f	signature:(ccArray *arr, unsigned int extra)
ccArrayEnsureExtraCapacity	support/data_support/ccCArray.h	/^void ccArrayEnsureExtraCapacity(ccArray *arr, unsigned int extra);$/;"	p	signature:(ccArray *arr, unsigned int extra)
ccArrayFastRemoveObject	support/data_support/ccCArray.cpp	/^void ccArrayFastRemoveObject(ccArray *arr, CCObject* object)$/;"	f	signature:(ccArray *arr, CCObject* object)
ccArrayFastRemoveObject	support/data_support/ccCArray.h	/^void ccArrayFastRemoveObject(ccArray *arr, CCObject* object);$/;"	p	signature:(ccArray *arr, CCObject* object)
ccArrayFastRemoveObjectAtIndex	support/data_support/ccCArray.cpp	/^void ccArrayFastRemoveObjectAtIndex(ccArray *arr, unsigned int index)$/;"	f	signature:(ccArray *arr, unsigned int index)
ccArrayFastRemoveObjectAtIndex	support/data_support/ccCArray.h	/^void ccArrayFastRemoveObjectAtIndex(ccArray *arr, unsigned int index);$/;"	p	signature:(ccArray *arr, unsigned int index)
ccArrayFree	support/data_support/ccCArray.cpp	/^void ccArrayFree(ccArray*& arr)$/;"	f	signature:(ccArray*& arr)
ccArrayFree	support/data_support/ccCArray.h	/^void ccArrayFree(ccArray*& arr);$/;"	p	signature:(ccArray*& arr)
ccArrayFullRemoveArray	support/data_support/ccCArray.cpp	/^void ccArrayFullRemoveArray(ccArray *arr, ccArray *minusArr)$/;"	f	signature:(ccArray *arr, ccArray *minusArr)
ccArrayFullRemoveArray	support/data_support/ccCArray.h	/^void ccArrayFullRemoveArray(ccArray *arr, ccArray *minusArr);$/;"	p	signature:(ccArray *arr, ccArray *minusArr)
ccArrayGetIndexOfObject	support/data_support/ccCArray.cpp	/^unsigned int ccArrayGetIndexOfObject(ccArray *arr, CCObject* object)$/;"	f	signature:(ccArray *arr, CCObject* object)
ccArrayGetIndexOfObject	support/data_support/ccCArray.h	/^unsigned int ccArrayGetIndexOfObject(ccArray *arr, CCObject* object);$/;"	p	signature:(ccArray *arr, CCObject* object)
ccArrayInsertObjectAtIndex	support/data_support/ccCArray.cpp	/^void ccArrayInsertObjectAtIndex(ccArray *arr, CCObject* object, unsigned int index)$/;"	f	signature:(ccArray *arr, CCObject* object, unsigned int index)
ccArrayInsertObjectAtIndex	support/data_support/ccCArray.h	/^void ccArrayInsertObjectAtIndex(ccArray *arr, CCObject* object, unsigned int index);$/;"	p	signature:(ccArray *arr, CCObject* object, unsigned int index)
ccArrayNew	support/data_support/ccCArray.cpp	/^ccArray* ccArrayNew(unsigned int capacity) $/;"	f	signature:(unsigned int capacity)
ccArrayNew	support/data_support/ccCArray.h	/^ccArray* ccArrayNew(unsigned int capacity);$/;"	p	signature:(unsigned int capacity)
ccArrayRemoveAllObjects	support/data_support/ccCArray.cpp	/^void ccArrayRemoveAllObjects(ccArray *arr)$/;"	f	signature:(ccArray *arr)
ccArrayRemoveAllObjects	support/data_support/ccCArray.h	/^void ccArrayRemoveAllObjects(ccArray *arr);$/;"	p	signature:(ccArray *arr)
ccArrayRemoveArray	support/data_support/ccCArray.cpp	/^void ccArrayRemoveArray(ccArray *arr, ccArray *minusArr)$/;"	f	signature:(ccArray *arr, ccArray *minusArr)
ccArrayRemoveArray	support/data_support/ccCArray.h	/^void ccArrayRemoveArray(ccArray *arr, ccArray *minusArr);$/;"	p	signature:(ccArray *arr, ccArray *minusArr)
ccArrayRemoveObject	support/data_support/ccCArray.cpp	/^void ccArrayRemoveObject(ccArray *arr, CCObject* object, bool bReleaseObj\/* = true*\/)$/;"	f	signature:(ccArray *arr, CCObject* object, bool bReleaseObj )
ccArrayRemoveObject	support/data_support/ccCArray.h	/^void ccArrayRemoveObject(ccArray *arr, CCObject* object, bool bReleaseObj = true);$/;"	p	signature:(ccArray *arr, CCObject* object, bool bReleaseObj = true)
ccArrayRemoveObjectAtIndex	support/data_support/ccCArray.cpp	/^void ccArrayRemoveObjectAtIndex(ccArray *arr, unsigned int index, bool bReleaseObj\/* = true*\/)$/;"	f	signature:(ccArray *arr, unsigned int index, bool bReleaseObj )
ccArrayRemoveObjectAtIndex	support/data_support/ccCArray.h	/^void ccArrayRemoveObjectAtIndex(ccArray *arr, unsigned int index, bool bReleaseObj = true);$/;"	p	signature:(ccArray *arr, unsigned int index, bool bReleaseObj = true)
ccArrayShrink	support/data_support/ccCArray.cpp	/^void ccArrayShrink(ccArray *arr)$/;"	f	signature:(ccArray *arr)
ccArrayShrink	support/data_support/ccCArray.h	/^void ccArrayShrink(ccArray *arr);$/;"	p	signature:(ccArray *arr)
ccArraySwapObjectsAtIndexes	support/data_support/ccCArray.cpp	/^void ccArraySwapObjectsAtIndexes(ccArray *arr, unsigned int index1, unsigned int index2)$/;"	f	signature:(ccArray *arr, unsigned int index1, unsigned int index2)
ccArraySwapObjectsAtIndexes	support/data_support/ccCArray.h	/^void ccArraySwapObjectsAtIndexes(ccArray *arr, unsigned int index1, unsigned int index2);$/;"	p	signature:(ccArray *arr, unsigned int index1, unsigned int index2)
ccBLACK	include/ccTypes.h	/^static const ccColor3B ccBLACK={0,0,0};$/;"	v
ccBLUE	include/ccTypes.h	/^static const ccColor3B ccBLUE={0,0,255};$/;"	v
ccBMFontDef	label_nodes/CCLabelBMFont.h	/^} ccBMFontDef;$/;"	t	typeref:struct:_BMFontDef
ccBMFontPadding	label_nodes/CCLabelBMFont.h	/^} ccBMFontPadding;$/;"	t	typeref:struct:_BMFontPadding
ccBezierConfig	actions/CCActionInterval.h	/^} ccBezierConfig;$/;"	t	typeref:struct:_ccBezierConfig
ccBlendFunc	include/ccTypes.h	/^} ccBlendFunc;$/;"	t	typeref:struct:_ccBlendFunc
ccCArray	support/data_support/ccCArray.h	/^} ccCArray;$/;"	t	typeref:struct:_ccCArray
ccCArrayAppendArray	support/data_support/ccCArray.cpp	/^void ccCArrayAppendArray(ccCArray *arr, ccCArray *plusArr)$/;"	f	signature:(ccCArray *arr, ccCArray *plusArr)
ccCArrayAppendArray	support/data_support/ccCArray.h	/^void ccCArrayAppendArray(ccCArray *arr, ccCArray *plusArr);$/;"	p	signature:(ccCArray *arr, ccCArray *plusArr)
ccCArrayAppendArrayWithResize	support/data_support/ccCArray.cpp	/^void ccCArrayAppendArrayWithResize(ccCArray *arr, ccCArray *plusArr)$/;"	f	signature:(ccCArray *arr, ccCArray *plusArr)
ccCArrayAppendArrayWithResize	support/data_support/ccCArray.h	/^void ccCArrayAppendArrayWithResize(ccCArray *arr, ccCArray *plusArr);$/;"	p	signature:(ccCArray *arr, ccCArray *plusArr)
ccCArrayAppendValue	support/data_support/ccCArray.cpp	/^void ccCArrayAppendValue(ccCArray *arr, void* value)$/;"	f	signature:(ccCArray *arr, void* value)
ccCArrayAppendValue	support/data_support/ccCArray.h	/^void ccCArrayAppendValue(ccCArray *arr, void* value);$/;"	p	signature:(ccCArray *arr, void* value)
ccCArrayAppendValueWithResize	support/data_support/ccCArray.cpp	/^void ccCArrayAppendValueWithResize(ccCArray *arr, void* value)$/;"	f	signature:(ccCArray *arr, void* value)
ccCArrayAppendValueWithResize	support/data_support/ccCArray.h	/^void ccCArrayAppendValueWithResize(ccCArray *arr, void* value);$/;"	p	signature:(ccCArray *arr, void* value)
ccCArrayContainsValue	support/data_support/ccCArray.cpp	/^bool ccCArrayContainsValue(ccCArray *arr, void* value)$/;"	f	signature:(ccCArray *arr, void* value)
ccCArrayContainsValue	support/data_support/ccCArray.h	/^bool ccCArrayContainsValue(ccCArray *arr, void* value);$/;"	p	signature:(ccCArray *arr, void* value)
ccCArrayDoubleCapacity	support/data_support/ccCArray.cpp	/^void ccCArrayDoubleCapacity(ccCArray *arr)$/;"	f	signature:(ccCArray *arr)
ccCArrayDoubleCapacity	support/data_support/ccCArray.h	/^void ccCArrayDoubleCapacity(ccCArray *arr);$/;"	p	signature:(ccCArray *arr)
ccCArrayEnsureExtraCapacity	support/data_support/ccCArray.cpp	/^void ccCArrayEnsureExtraCapacity(ccCArray *arr, unsigned int extra)$/;"	f	signature:(ccCArray *arr, unsigned int extra)
ccCArrayEnsureExtraCapacity	support/data_support/ccCArray.h	/^void ccCArrayEnsureExtraCapacity(ccCArray *arr, unsigned int extra);$/;"	p	signature:(ccCArray *arr, unsigned int extra)
ccCArrayFastRemoveValueAtIndex	support/data_support/ccCArray.cpp	/^void ccCArrayFastRemoveValueAtIndex(ccCArray *arr, unsigned int index)$/;"	f	signature:(ccCArray *arr, unsigned int index)
ccCArrayFastRemoveValueAtIndex	support/data_support/ccCArray.h	/^void ccCArrayFastRemoveValueAtIndex(ccCArray *arr, unsigned int index);$/;"	p	signature:(ccCArray *arr, unsigned int index)
ccCArrayFree	support/data_support/ccCArray.cpp	/^void ccCArrayFree(ccCArray *arr)$/;"	f	signature:(ccCArray *arr)
ccCArrayFree	support/data_support/ccCArray.h	/^void ccCArrayFree(ccCArray *arr);$/;"	p	signature:(ccCArray *arr)
ccCArrayFullRemoveArray	support/data_support/ccCArray.cpp	/^void ccCArrayFullRemoveArray(ccCArray *arr, ccCArray *minusArr)$/;"	f	signature:(ccCArray *arr, ccCArray *minusArr)
ccCArrayFullRemoveArray	support/data_support/ccCArray.h	/^void ccCArrayFullRemoveArray(ccCArray *arr, ccCArray *minusArr);$/;"	p	signature:(ccCArray *arr, ccCArray *minusArr)
ccCArrayGetIndexOfValue	support/data_support/ccCArray.cpp	/^unsigned int ccCArrayGetIndexOfValue(ccCArray *arr, void* value)$/;"	f	signature:(ccCArray *arr, void* value)
ccCArrayGetIndexOfValue	support/data_support/ccCArray.h	/^unsigned int ccCArrayGetIndexOfValue(ccCArray *arr, void* value);$/;"	p	signature:(ccCArray *arr, void* value)
ccCArrayInsertValueAtIndex	support/data_support/ccCArray.cpp	/^void ccCArrayInsertValueAtIndex( ccCArray *arr, void* value, unsigned int index)$/;"	f	signature:( ccCArray *arr, void* value, unsigned int index)
ccCArrayInsertValueAtIndex	support/data_support/ccCArray.h	/^void ccCArrayInsertValueAtIndex( ccCArray *arr, void* value, unsigned int index);$/;"	p	signature:( ccCArray *arr, void* value, unsigned int index)
ccCArrayNew	support/data_support/ccCArray.cpp	/^ccCArray* ccCArrayNew(unsigned int capacity)$/;"	f	signature:(unsigned int capacity)
ccCArrayNew	support/data_support/ccCArray.h	/^ccCArray* ccCArrayNew(unsigned int capacity);$/;"	p	signature:(unsigned int capacity)
ccCArrayRemoveAllValues	support/data_support/ccCArray.cpp	/^void ccCArrayRemoveAllValues(ccCArray *arr)$/;"	f	signature:(ccCArray *arr)
ccCArrayRemoveAllValues	support/data_support/ccCArray.h	/^void ccCArrayRemoveAllValues(ccCArray *arr);$/;"	p	signature:(ccCArray *arr)
ccCArrayRemoveArray	support/data_support/ccCArray.cpp	/^void ccCArrayRemoveArray(ccCArray *arr, ccCArray *minusArr)$/;"	f	signature:(ccCArray *arr, ccCArray *minusArr)
ccCArrayRemoveArray	support/data_support/ccCArray.h	/^void ccCArrayRemoveArray(ccCArray *arr, ccCArray *minusArr);$/;"	p	signature:(ccCArray *arr, ccCArray *minusArr)
ccCArrayRemoveValue	support/data_support/ccCArray.cpp	/^void ccCArrayRemoveValue(ccCArray *arr, void* value)$/;"	f	signature:(ccCArray *arr, void* value)
ccCArrayRemoveValue	support/data_support/ccCArray.h	/^void ccCArrayRemoveValue(ccCArray *arr, void* value);$/;"	p	signature:(ccCArray *arr, void* value)
ccCArrayRemoveValueAtIndex	support/data_support/ccCArray.cpp	/^void ccCArrayRemoveValueAtIndex(ccCArray *arr, unsigned int index)$/;"	f	signature:(ccCArray *arr, unsigned int index)
ccCArrayRemoveValueAtIndex	support/data_support/ccCArray.h	/^void ccCArrayRemoveValueAtIndex(ccCArray *arr, unsigned int index);$/;"	p	signature:(ccCArray *arr, unsigned int index)
ccCachedImageType	textures/CCTextureCache.h	/^}ccCachedImageType;$/;"	t	class:VolatileTexture	typeref:enum:VolatileTexture::__anon48	access:private
ccCardinalSplineAt	actions/CCActionCatmullRom.cpp	/^CCPoint ccCardinalSplineAt(CCPoint &p0, CCPoint &p1, CCPoint &p2, CCPoint &p3, float tension, float t)$/;"	f	signature:(CCPoint &p0, CCPoint &p1, CCPoint &p2, CCPoint &p3, float tension, float t)
ccCardinalSplineAt	actions/CCActionCatmullRom.h	/^extern CC_DLL CCPoint ccCardinalSplineAt(CCPoint &p0, CCPoint &p1, CCPoint &p2, CCPoint &p3, float tension, float t);$/;"	p	signature:(CCPoint &p0, CCPoint &p1, CCPoint &p2, CCPoint &p3, float tension, float t)
ccColor3B	include/ccTypes.h	/^} ccColor3B;$/;"	t	typeref:struct:_ccColor3B
ccColor4B	include/ccTypes.h	/^} ccColor4B;$/;"	t	typeref:struct:_ccColor4B
ccColor4F	include/ccTypes.h	/^} ccColor4F;$/;"	t	typeref:struct:_ccColor4F
ccDirectorProjection	CCDirector.h	/^} ccDirectorProjection;$/;"	t	typeref:enum:__anon5
ccDrawCardinalSpline	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawCardinalSpline( CCPointArray *config, float tension,  unsigned int segments )$/;"	f	signature:( CCPointArray *config, float tension, unsigned int segments )
ccDrawCardinalSpline	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawCardinalSpline( CCPointArray *config, float tension,  unsigned int segments );$/;"	p	signature:( CCPointArray *config, float tension, unsigned int segments )
ccDrawCatmullRom	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawCatmullRom( CCPointArray *points, unsigned int segments )$/;"	f	signature:( CCPointArray *points, unsigned int segments )
ccDrawCatmullRom	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawCatmullRom( CCPointArray *arrayOfControlPoints, unsigned int segments );$/;"	p	signature:( CCPointArray *arrayOfControlPoints, unsigned int segments )
ccDrawCircle	draw_nodes/CCDrawingPrimitives.cpp	/^void CC_DLL ccDrawCircle( const CCPoint& center, float radius, float angle, unsigned int segments, bool drawLineToCenter)$/;"	f	signature:( const CCPoint& center, float radius, float angle, unsigned int segments, bool drawLineToCenter)
ccDrawCircle	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawCircle( const CCPoint& center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY)$/;"	f	signature:( const CCPoint& center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY)
ccDrawCircle	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawCircle( const CCPoint& center, float radius, float angle, unsigned int segments, bool drawLineToCenter);$/;"	p	signature:( const CCPoint& center, float radius, float angle, unsigned int segments, bool drawLineToCenter)
ccDrawCircle	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawCircle( const CCPoint& center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY);$/;"	p	signature:( const CCPoint& center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY)
ccDrawColor4B	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawColor4B( GLubyte r, GLubyte g, GLubyte b, GLubyte a )$/;"	f	signature:( GLubyte r, GLubyte g, GLubyte b, GLubyte a )
ccDrawColor4B	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawColor4B( GLubyte r, GLubyte g, GLubyte b, GLubyte a );$/;"	p	signature:( GLubyte r, GLubyte g, GLubyte b, GLubyte a )
ccDrawColor4F	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawColor4F( GLfloat r, GLfloat g, GLfloat b, GLfloat a )$/;"	f	signature:( GLfloat r, GLfloat g, GLfloat b, GLfloat a )
ccDrawColor4F	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawColor4F( GLfloat r, GLfloat g, GLfloat b, GLfloat a );$/;"	p	signature:( GLfloat r, GLfloat g, GLfloat b, GLfloat a )
ccDrawCubicBezier	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawCubicBezier(const CCPoint& origin, const CCPoint& control1, const CCPoint& control2, const CCPoint& destination, unsigned int segments)$/;"	f	signature:(const CCPoint& origin, const CCPoint& control1, const CCPoint& control2, const CCPoint& destination, unsigned int segments)
ccDrawCubicBezier	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawCubicBezier(const CCPoint& origin, const CCPoint& control1, const CCPoint& control2, const CCPoint& destination, unsigned int segments);$/;"	p	signature:(const CCPoint& origin, const CCPoint& control1, const CCPoint& control2, const CCPoint& destination, unsigned int segments)
ccDrawFree	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawFree()$/;"	f	signature:()
ccDrawFree	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawFree();$/;"	p	signature:()
ccDrawInit	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawInit()$/;"	f	signature:()
ccDrawInit	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawInit();$/;"	p	signature:()
ccDrawLine	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawLine( const CCPoint& origin, const CCPoint& destination )$/;"	f	signature:( const CCPoint& origin, const CCPoint& destination )
ccDrawLine	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawLine( const CCPoint& origin, const CCPoint& destination );$/;"	p	signature:( const CCPoint& origin, const CCPoint& destination )
ccDrawPoint	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawPoint( const CCPoint& point )$/;"	f	signature:( const CCPoint& point )
ccDrawPoint	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawPoint( const CCPoint& point );$/;"	p	signature:( const CCPoint& point )
ccDrawPoints	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawPoints( const CCPoint *points, unsigned int numberOfPoints )$/;"	f	signature:( const CCPoint *points, unsigned int numberOfPoints )
ccDrawPoints	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawPoints( const CCPoint *points, unsigned int numberOfPoints );$/;"	p	signature:( const CCPoint *points, unsigned int numberOfPoints )
ccDrawPoly	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawPoly( const CCPoint *poli, unsigned int numberOfPoints, bool closePolygon )$/;"	f	signature:( const CCPoint *poli, unsigned int numberOfPoints, bool closePolygon )
ccDrawPoly	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawPoly( const CCPoint *vertices, unsigned int numOfVertices, bool closePolygon );$/;"	p	signature:( const CCPoint *vertices, unsigned int numOfVertices, bool closePolygon )
ccDrawQuadBezier	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawQuadBezier(const CCPoint& origin, const CCPoint& control, const CCPoint& destination, unsigned int segments)$/;"	f	signature:(const CCPoint& origin, const CCPoint& control, const CCPoint& destination, unsigned int segments)
ccDrawQuadBezier	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawQuadBezier(const CCPoint& origin, const CCPoint& control, const CCPoint& destination, unsigned int segments);$/;"	p	signature:(const CCPoint& origin, const CCPoint& control, const CCPoint& destination, unsigned int segments)
ccDrawRect	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawRect( CCPoint origin, CCPoint destination )$/;"	f	signature:( CCPoint origin, CCPoint destination )
ccDrawRect	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawRect( CCPoint origin, CCPoint destination );$/;"	p	signature:( CCPoint origin, CCPoint destination )
ccDrawSolidPoly	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawSolidPoly( const CCPoint *poli, unsigned int numberOfPoints, ccColor4F color )$/;"	f	signature:( const CCPoint *poli, unsigned int numberOfPoints, ccColor4F color )
ccDrawSolidPoly	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawSolidPoly( const CCPoint *poli, unsigned int numberOfPoints, ccColor4F color );$/;"	p	signature:( const CCPoint *poli, unsigned int numberOfPoints, ccColor4F color )
ccDrawSolidRect	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawSolidRect( CCPoint origin, CCPoint destination, ccColor4F color )$/;"	f	signature:( CCPoint origin, CCPoint destination, ccColor4F color )
ccDrawSolidRect	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccDrawSolidRect( CCPoint origin, CCPoint destination, ccColor4F color );$/;"	p	signature:( CCPoint origin, CCPoint destination, ccColor4F color )
ccGLBindTexture2D	shaders/ccGLStateCache.cpp	/^void ccGLBindTexture2D(GLuint textureId)$/;"	f	signature:(GLuint textureId)
ccGLBindTexture2D	shaders/ccGLStateCache.h	/^void CC_DLL ccGLBindTexture2D(GLuint textureId);$/;"	p	signature:(GLuint textureId)
ccGLBindTexture2DN	shaders/ccGLStateCache.cpp	/^void ccGLBindTexture2DN(GLuint textureUnit, GLuint textureId)$/;"	f	signature:(GLuint textureUnit, GLuint textureId)
ccGLBindTexture2DN	shaders/ccGLStateCache.h	/^void CC_DLL ccGLBindTexture2DN(GLuint textureUnit, GLuint textureId);$/;"	p	signature:(GLuint textureUnit, GLuint textureId)
ccGLBindVAO	shaders/ccGLStateCache.cpp	/^void ccGLBindVAO(GLuint vaoId)$/;"	f	signature:(GLuint vaoId)
ccGLBindVAO	shaders/ccGLStateCache.h	/^void CC_DLL ccGLBindVAO(GLuint vaoId);$/;"	p	signature:(GLuint vaoId)
ccGLBlendFunc	shaders/ccGLStateCache.cpp	/^void ccGLBlendFunc(GLenum sfactor, GLenum dfactor)$/;"	f	signature:(GLenum sfactor, GLenum dfactor)
ccGLBlendFunc	shaders/ccGLStateCache.h	/^void CC_DLL ccGLBlendFunc(GLenum sfactor, GLenum dfactor);$/;"	p	signature:(GLenum sfactor, GLenum dfactor)
ccGLBlendResetToCache	shaders/ccGLStateCache.cpp	/^void ccGLBlendResetToCache(void)$/;"	f	signature:(void)
ccGLBlendResetToCache	shaders/ccGLStateCache.h	/^void CC_DLL ccGLBlendResetToCache(void);$/;"	p	signature:(void)
ccGLDeleteProgram	shaders/ccGLStateCache.cpp	/^void ccGLDeleteProgram( GLuint program )$/;"	f	signature:( GLuint program )
ccGLDeleteProgram	shaders/ccGLStateCache.h	/^void CC_DLL ccGLDeleteProgram(GLuint program);$/;"	p	signature:(GLuint program)
ccGLDeleteTexture	shaders/ccGLStateCache.cpp	/^void ccGLDeleteTexture(GLuint textureId)$/;"	f	signature:(GLuint textureId)
ccGLDeleteTexture	shaders/ccGLStateCache.h	/^void CC_DLL ccGLDeleteTexture(GLuint textureId);$/;"	p	signature:(GLuint textureId)
ccGLDeleteTextureN	shaders/ccGLStateCache.cpp	/^void ccGLDeleteTextureN(GLuint textureUnit, GLuint textureId)$/;"	f	signature:(GLuint textureUnit, GLuint textureId)
ccGLDeleteTextureN	shaders/ccGLStateCache.h	/^void CC_DLL ccGLDeleteTextureN(GLuint textureUnit, GLuint textureId);$/;"	p	signature:(GLuint textureUnit, GLuint textureId)
ccGLEnable	shaders/ccGLStateCache.cpp	/^void ccGLEnable(ccGLServerState flags)$/;"	f	signature:(ccGLServerState flags)
ccGLEnable	shaders/ccGLStateCache.h	/^void CC_DLL ccGLEnable( ccGLServerState flags );$/;"	p	signature:( ccGLServerState flags )
ccGLEnableVertexAttribs	shaders/ccGLStateCache.cpp	/^void ccGLEnableVertexAttribs( unsigned int flags )$/;"	f	signature:( unsigned int flags )
ccGLEnableVertexAttribs	shaders/ccGLStateCache.h	/^void CC_DLL ccGLEnableVertexAttribs(unsigned int flags);$/;"	p	signature:(unsigned int flags)
ccGLInvalidateStateCache	shaders/ccGLStateCache.cpp	/^void ccGLInvalidateStateCache( void )$/;"	f	signature:( void )
ccGLInvalidateStateCache	shaders/ccGLStateCache.h	/^void CC_DLL ccGLInvalidateStateCache(void);$/;"	p	signature:(void)
ccGLServerState	shaders/ccGLStateCache.h	/^} ccGLServerState;$/;"	t	typeref:enum:__anon34
ccGLUseProgram	shaders/ccGLStateCache.cpp	/^void ccGLUseProgram( GLuint program )$/;"	f	signature:( GLuint program )
ccGLUseProgram	shaders/ccGLStateCache.h	/^void CC_DLL ccGLUseProgram(GLuint program);$/;"	p	signature:(GLuint program)
ccGRAY	include/ccTypes.h	/^static const ccColor3B ccGRAY={166,166,166};$/;"	v
ccGREEN	include/ccTypes.h	/^static const ccColor3B ccGREEN={0,255,0};$/;"	v
ccInflateCCZFile	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateCCZFile(const char *path, unsigned char **out)$/;"	f	class:ZipUtils	signature:(const char *path, unsigned char **out)
ccInflateCCZFile	support/zip_support/ZipUtils.h	/^        static int ccInflateCCZFile(const char *filename, unsigned char **out);$/;"	p	class:cocos2d::ZipUtils	access:public	signature:(const char *filename, unsigned char **out)
ccInflateGZipFile	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateGZipFile(const char *path, unsigned char **out)$/;"	f	class:ZipUtils	signature:(const char *path, unsigned char **out)
ccInflateGZipFile	support/zip_support/ZipUtils.h	/^        static int ccInflateGZipFile(const char *filename, unsigned char **out);$/;"	p	class:cocos2d::ZipUtils	access:public	signature:(const char *filename, unsigned char **out)
ccInflateMemory	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateMemory(unsigned char *in, unsigned int inLength, unsigned char **out)$/;"	f	class:ZipUtils	signature:(unsigned char *in, unsigned int inLength, unsigned char **out)
ccInflateMemory	support/zip_support/ZipUtils.h	/^        static int ccInflateMemory(unsigned char *in, unsigned int inLength, unsigned char **out);$/;"	p	class:cocos2d::ZipUtils	access:public	signature:(unsigned char *in, unsigned int inLength, unsigned char **out)
ccInflateMemoryWithHint	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateMemoryWithHint(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int *outLength, unsigned int outLenghtHint)$/;"	f	class:ZipUtils	signature:(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int *outLength, unsigned int outLenghtHint)
ccInflateMemoryWithHint	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateMemoryWithHint(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int outLengthHint)$/;"	f	class:ZipUtils	signature:(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int outLengthHint)
ccInflateMemoryWithHint	support/zip_support/ZipUtils.h	/^        static int ccInflateMemoryWithHint(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int *outLength, $/;"	p	class:cocos2d::ZipUtils	access:private	signature:(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int *outLength, unsigned int outLenghtHint)
ccInflateMemoryWithHint	support/zip_support/ZipUtils.h	/^        static int ccInflateMemoryWithHint(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int outLenghtHint);$/;"	p	class:cocos2d::ZipUtils	access:public	signature:(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int outLenghtHint)
ccKeypadMSGType	keypad_dispatcher/CCKeypadDispatcher.h	/^} ccKeypadMSGType;$/;"	t	typeref:enum:__anon9
ccLanguageType	platform/CCCommon.h	/^} ccLanguageType;$/;"	t	typeref:enum:LanguageType
ccMAGENTA	include/ccTypes.h	/^static const ccColor3B ccMAGENTA={255,0,255};$/;"	v
ccNextPOT	support/ccUtils.cpp	/^unsigned long ccNextPOT(unsigned long x)$/;"	f	namespace:cocos2d	signature:(unsigned long x)
ccNextPOT	support/ccUtils.h	/^unsigned long ccNextPOT( unsigned long value );$/;"	p	namespace:cocos2d	signature:( unsigned long value )
ccORANGE	include/ccTypes.h	/^static const ccColor3B ccORANGE={255,127,0};$/;"	v
ccPVR2TexturePixelFormat	textures/CCTexturePVR.cpp	/^} ccPVR2TexturePixelFormat;$/;"	t	typeref:enum:__anon55	file:
ccPVRTexturePixelFormatInfo	textures/CCTexturePVR.h	/^} ccPVRTexturePixelFormatInfo;$/;"	t	typeref:struct:_ccPVRTexturePixelFormatInfo
ccPVRv2TexHeader	textures/CCTexturePVR.cpp	/^} ccPVRv2TexHeader;$/;"	t	typeref:struct:_PVRTexHeader	file:
ccPVRv3TexHeader	textures/CCTexturePVR.cpp	/^} ccPVRv3TexHeader;$/;"	t	typeref:struct:__anon56	file:
ccPixelFormat	textures/CCTexturePVR.h	/^	CCTexture2DPixelFormat ccPixelFormat;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
ccPointSize	draw_nodes/CCDrawingPrimitives.cpp	/^void ccPointSize( GLfloat pointSize )$/;"	f	signature:( GLfloat pointSize )
ccPointSize	draw_nodes/CCDrawingPrimitives.h	/^void CC_DLL ccPointSize( GLfloat pointSize );$/;"	p	signature:( GLfloat pointSize )
ccPointSprite	include/ccTypes.h	/^} ccPointSprite;$/;"	t	typeref:struct:_ccPointSprite
ccQuad2	include/ccTypes.h	/^} ccQuad2;$/;"	t	typeref:struct:_ccQuad2
ccQuad3	include/ccTypes.h	/^} ccQuad3;$/;"	t	typeref:struct:_ccQuad3
ccRED	include/ccTypes.h	/^static const ccColor3B ccRED={255,0,0};$/;"	v
ccScriptType	script_support/CCScriptSupport.h	/^enum ccScriptType {$/;"	g
ccSetProjectionMatrixDirty	shaders/ccGLStateCache.cpp	/^void ccSetProjectionMatrixDirty( void )$/;"	f	signature:( void )
ccSetProjectionMatrixDirty	shaders/ccGLStateCache.h	/^void CC_DLL ccSetProjectionMatrixDirty(void);$/;"	p	signature:(void)
ccT2F_Quad	include/ccTypes.h	/^} ccT2F_Quad;$/;"	t	typeref:struct:_ccT2F_Quad
ccTMXTileFlags	tilemap_parallax_nodes/CCTMXXMLParser.h	/^} ccTMXTileFlags;$/;"	t	typeref:enum:ccTMXTileFlags_
ccTMXTileFlags_	tilemap_parallax_nodes/CCTMXXMLParser.h	/^typedef enum ccTMXTileFlags_ {$/;"	g
ccTex2F	include/ccTypes.h	/^} ccTex2F;$/;"	t	typeref:struct:_ccTex2F
ccTexParams	textures/CCTexture2D.h	/^} ccTexParams;$/;"	t	typeref:struct:_ccTexParams
ccTouchBegan	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchBegan	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchBegan	menu_nodes/CCMenu.cpp	/^bool CCMenu::ccTouchBegan(CCTouch* touch, CCEvent* event)$/;"	f	class:CCMenu	signature:(CCTouch* touch, CCEvent* event)
ccTouchBegan	menu_nodes/CCMenu.h	/^    virtual bool ccTouchBegan(CCTouch* touch, CCEvent* event);$/;"	p	class:CCMenu	access:public	signature:(CCTouch* touch, CCEvent* event)
ccTouchBegan	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent) { CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);return false;};$/;"	f	class:CCTargetedTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchBegan	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent); return false;};$/;"	f	class:CCTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchCancelled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchCancelled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchCancelled	menu_nodes/CCMenu.cpp	/^void CCMenu::ccTouchCancelled(CCTouch *touch, CCEvent* event)$/;"	f	class:CCMenu	signature:(CCTouch *touch, CCEvent* event)
ccTouchCancelled	menu_nodes/CCMenu.h	/^    virtual void ccTouchCancelled(CCTouch *touch, CCEvent* event);$/;"	p	class:CCMenu	access:public	signature:(CCTouch *touch, CCEvent* event)
ccTouchCancelled	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTargetedTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchCancelled	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchEnded	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchEnded	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchEnded	menu_nodes/CCMenu.cpp	/^void CCMenu::ccTouchEnded(CCTouch *touch, CCEvent* event)$/;"	f	class:CCMenu	signature:(CCTouch *touch, CCEvent* event)
ccTouchEnded	menu_nodes/CCMenu.h	/^    virtual void ccTouchEnded(CCTouch* touch, CCEvent* event);$/;"	p	class:CCMenu	access:public	signature:(CCTouch* touch, CCEvent* event)
ccTouchEnded	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTargetedTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchEnded	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchHandlerHelperData	touch_dispatcher/CCTouchDispatcher.h	/^struct ccTouchHandlerHelperData {$/;"	s
ccTouchHandlerHelperData::m_type	touch_dispatcher/CCTouchDispatcher.h	/^    int  m_type;$/;"	m	struct:ccTouchHandlerHelperData	access:public
ccTouchMax	touch_dispatcher/CCTouchDispatcher.h	/^    ccTouchMax,$/;"	e	enum:__anon62
ccTouchMoved	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchMoved	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchMoved	menu_nodes/CCMenu.cpp	/^void CCMenu::ccTouchMoved(CCTouch* touch, CCEvent* event)$/;"	f	class:CCMenu	signature:(CCTouch* touch, CCEvent* event)
ccTouchMoved	menu_nodes/CCMenu.h	/^    virtual void ccTouchMoved(CCTouch* touch, CCEvent* event);$/;"	p	class:CCMenu	access:public	signature:(CCTouch* touch, CCEvent* event)
ccTouchMoved	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTargetedTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchMoved	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCTouch *pTouch, CCEvent *pEvent)
ccTouchSelectorAllBits	touch_dispatcher/CCTouchDispatcher.h	/^    ccTouchSelectorAllBits = ( ccTouchSelectorBeganBit | ccTouchSelectorMovedBit | ccTouchSelectorEndedBit | ccTouchSelectorCancelledBit),$/;"	e	enum:__anon61
ccTouchSelectorBeganBit	touch_dispatcher/CCTouchDispatcher.h	/^    ccTouchSelectorBeganBit = 1 << 0,$/;"	e	enum:__anon61
ccTouchSelectorCancelledBit	touch_dispatcher/CCTouchDispatcher.h	/^    ccTouchSelectorCancelledBit = 1 << 3,$/;"	e	enum:__anon61
ccTouchSelectorEndedBit	touch_dispatcher/CCTouchDispatcher.h	/^    ccTouchSelectorEndedBit = 1 << 2,$/;"	e	enum:__anon61
ccTouchSelectorFlag	touch_dispatcher/CCTouchDispatcher.h	/^} ccTouchSelectorFlag;$/;"	t	typeref:enum:__anon61
ccTouchSelectorMovedBit	touch_dispatcher/CCTouchDispatcher.h	/^    ccTouchSelectorMovedBit = 1 << 1,$/;"	e	enum:__anon61
ccTouchesBegan	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesBegan	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesBegan	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCStandardTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesBegan	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesCancelled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesCancelled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesCancelled	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesCancelled	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual void ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCStandardTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesEnded	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesEnded	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesEnded	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCStandardTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesEnded	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesMode	layers_scenes_transitions_nodes/CCLayer.h	/^} ccTouchesMode;$/;"	t	typeref:enum:__anon11
ccTouchesMoved	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:CCLayer	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesMoved	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent);$/;"	p	class:CCLayer	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesMoved	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCStandardTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccTouchesMoved	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate	access:public	signature:(CCSet *pTouches, CCEvent *pEvent)
ccV2F_C4B_T2F	include/ccTypes.h	/^} ccV2F_C4B_T2F;$/;"	t	typeref:struct:_ccV2F_C4B_T2F
ccV2F_C4B_T2F_Quad	include/ccTypes.h	/^} ccV2F_C4B_T2F_Quad;$/;"	t	typeref:struct:_ccV2F_C4B_T2F_Quad
ccV2F_C4B_T2F_Triangle	include/ccTypes.h	/^} ccV2F_C4B_T2F_Triangle;$/;"	t	typeref:struct:_ccV2F_C4B_T2F_Triangle
ccV2F_C4F_T2F	include/ccTypes.h	/^} ccV2F_C4F_T2F;$/;"	t	typeref:struct:_ccV2F_C4F_T2F
ccV2F_C4F_T2F_Quad	include/ccTypes.h	/^} ccV2F_C4F_T2F_Quad;$/;"	t	typeref:struct:_ccV2F_C4F_T2F_Quad
ccV3F_C4B_T2F	include/ccTypes.h	/^} ccV3F_C4B_T2F;$/;"	t	typeref:struct:_ccV3F_C4B_T2F
ccV3F_C4B_T2F_Quad	include/ccTypes.h	/^} ccV3F_C4B_T2F_Quad;$/;"	t	typeref:struct:_ccV3F_C4B_T2F_Quad
ccVertex2F	include/ccTypes.h	/^} ccVertex2F;$/;"	t	typeref:struct:_ccVertex2F
ccVertex3F	include/ccTypes.h	/^} ccVertex3F;$/;"	t	typeref:struct:_ccVertex3F
ccVertexLineIntersect	support/CCVertex.cpp	/^bool ccVertexLineIntersect(float Ax, float Ay,$/;"	f	signature:(float Ax, float Ay, float Bx, float By, float Cx, float Cy, float Dx, float Dy, float *T)
ccVertexLineIntersect	support/CCVertex.h	/^bool CC_DLL ccVertexLineIntersect(float Ax, float Ay,$/;"	p	signature:(float Ax, float Ay, float Bx, float By, float Cx, float Cy, float Dx, float Dy, float *T)
ccVertexLineToPolygon	support/CCVertex.cpp	/^void ccVertexLineToPolygon(CCPoint *points, float stroke, ccVertex2F *vertices, unsigned int offset, unsigned int nuPoints)$/;"	f	signature:(CCPoint *points, float stroke, ccVertex2F *vertices, unsigned int offset, unsigned int nuPoints)
ccVertexLineToPolygon	support/CCVertex.h	/^void CC_DLL ccVertexLineToPolygon(CCPoint *points, float stroke, ccVertex2F *vertices, unsigned int offset, unsigned int nuPoints);$/;"	p	signature:(CCPoint *points, float stroke, ccVertex2F *vertices, unsigned int offset, unsigned int nuPoints)
ccWHITE	include/ccTypes.h	/^static const ccColor3B ccWHITE={255,255,255};$/;"	v
ccYELLOW	include/ccTypes.h	/^static const ccColor3B ccYELLOW={255,255,0};$/;"	v
cc_assert_script_compatible	include/ccMacros.h	/^extern void CC_DLL cc_assert_script_compatible(bool cond, const char *msg);$/;"	p	signature:(bool cond, const char *msg)
cc_assert_script_compatible	script_support/CCScriptSupport.cpp	/^void CC_DLL cc_assert_script_compatible(bool cond, const char *msg)$/;"	f	signature:(bool cond, const char *msg)
cc_fps_images_hd_len	ccFPSImages.c	/^unsigned int cc_fps_images_hd_len(void)$/;"	f	signature:(void)
cc_fps_images_hd_len	ccFPSImages.h	/^unsigned int cc_fps_images_hd_len(void);$/;"	p	signature:(void)
cc_fps_images_hd_png	ccFPSImages.c	/^unsigned char cc_fps_images_hd_png[] = {$/;"	v
cc_fps_images_ipadhd_len	ccFPSImages.c	/^unsigned int cc_fps_images_ipadhd_len(void)$/;"	f	signature:(void)
cc_fps_images_ipadhd_len	ccFPSImages.h	/^unsigned int cc_fps_images_ipadhd_len(void);$/;"	p	signature:(void)
cc_fps_images_ipadhd_png	ccFPSImages.c	/^unsigned char cc_fps_images_ipadhd_png[] = {$/;"	v
cc_fps_images_len	ccFPSImages.c	/^unsigned int cc_fps_images_len(void)$/;"	f	signature:(void)
cc_fps_images_len	ccFPSImages.h	/^unsigned int cc_fps_images_len(void);$/;"	p	signature:(void)
cc_fps_images_png	ccFPSImages.c	/^unsigned char cc_fps_images_png[] = {$/;"	v
cc_timeval	platform/platform.h	/^struct CC_DLL cc_timeval$/;"	s
cc_timeval::tv_sec	platform/platform.h	/^    time_t    tv_sec;        \/\/ seconds$/;"	m	struct:cc_timeval	access:public
cc_timeval::tv_usec	platform/platform.h	/^    long    tv_usec;    \/\/ microSeconds$/;"	m	struct:cc_timeval	access:public
cc_unichar_to_utf8	support/ccUTF8.cpp	/^cc_unichar_to_utf8 (unsigned short c,$/;"	f	signature:(unsigned short c, char *outbuf)
cc_utf16_to_utf8	support/ccUTF8.cpp	/^cc_utf16_to_utf8 (const unsigned short  *str,$/;"	f	signature:(const unsigned short *str, long len, long *items_read, long *items_written)
cc_utf16_to_utf8	support/ccUTF8.h	/^cc_utf16_to_utf8 (const unsigned short  *str,$/;"	p	signature:(const unsigned short *str, long len, long *items_read, long *items_written)
cc_utf16_vec_from_utf16_str	support/ccUTF8.cpp	/^std::vector<unsigned short> cc_utf16_vec_from_utf16_str(const unsigned short* str)$/;"	f	signature:(const unsigned short* str)
cc_utf16_vec_from_utf16_str	support/ccUTF8.h	/^CC_DLL std::vector<unsigned short> cc_utf16_vec_from_utf16_str(const unsigned short* str);$/;"	p	signature:(const unsigned short* str)
cc_utf8_find_last_not_char	support/ccUTF8.cpp	/^unsigned int cc_utf8_find_last_not_char(std::vector<unsigned short> str, unsigned short c)$/;"	f	signature:(std::vector<unsigned short> str, unsigned short c)
cc_utf8_find_last_not_char	support/ccUTF8.h	/^CC_DLL unsigned int cc_utf8_find_last_not_char(std::vector<unsigned short> str, unsigned short c);$/;"	p	signature:(std::vector<unsigned short> str, unsigned short c)
cc_utf8_get_char	support/ccUTF8.cpp	/^cc_utf8_get_char (const char * p)$/;"	f	file:	signature:(const char * p)
cc_utf8_next_char	support/ccUTF8.cpp	122;"	d	file:
cc_utf8_strlen	support/ccUTF8.cpp	/^cc_utf8_strlen (const char * p, int max)$/;"	f	signature:(const char * p, int max)
cc_utf8_strlen	support/ccUTF8.h	/^cc_utf8_strlen (const char * p, int max);$/;"	p	signature:(const char * p, int max)
cc_utf8_to_utf16	support/ccUTF8.cpp	/^unsigned short* cc_utf8_to_utf16(const char* str_old)$/;"	f	signature:(const char* str_old)
cc_utf8_to_utf16	support/ccUTF8.h	/^CC_DLL unsigned short* cc_utf8_to_utf16(const char* str_old);$/;"	p	signature:(const char* str_old)
cc_utf8_trim_from	support/ccUTF8.cpp	/^static void cc_utf8_trim_from(std::vector<unsigned short>* str, int index)$/;"	f	file:	signature:(std::vector<unsigned short>* str, int index)
cc_utf8_trim_ws	support/ccUTF8.cpp	/^void cc_utf8_trim_ws(std::vector<unsigned short>* str)$/;"	f	signature:(std::vector<unsigned short>* str)
cc_utf8_trim_ws	support/ccUTF8.h	/^CC_DLL void cc_utf8_trim_ws(std::vector<unsigned short>* str);$/;"	p	signature:(std::vector<unsigned short>* str)
cc_wcslen	support/ccUTF8.cpp	/^int cc_wcslen(const unsigned short* str)$/;"	f	signature:(const unsigned short* str)
cc_wcslen	support/ccUTF8.h	/^CC_DLL int cc_wcslen(const unsigned short* str);$/;"	p	signature:(const unsigned short* str)
ccarray_to_std_vector	menu_nodes/CCMenu.cpp	/^static std::vector<unsigned int> ccarray_to_std_vector(CCArray* pArray)$/;"	f	file:	signature:(CCArray* pArray)
ccc3	include/ccTypes.h	/^ccc3(const GLubyte r, const GLubyte g, const GLubyte b)$/;"	f	signature:(const GLubyte r, const GLubyte g, const GLubyte b)
ccc4	include/ccTypes.h	/^ccc4(const GLubyte r, const GLubyte g, const GLubyte b, const GLubyte o)$/;"	f	signature:(const GLubyte r, const GLubyte g, const GLubyte b, const GLubyte o)
ccc4BFromccc4F	include/ccTypes.h	/^static inline ccColor4B ccc4BFromccc4F(ccColor4F c)$/;"	f	signature:(ccColor4F c)
ccc4FEqual	include/ccTypes.h	/^static inline bool ccc4FEqual(ccColor4F a, ccColor4F b)$/;"	f	signature:(ccColor4F a, ccColor4F b)
ccc4FFromccc3B	include/ccTypes.h	/^static inline ccColor4F ccc4FFromccc3B(ccColor3B c)$/;"	f	signature:(ccColor3B c)
ccc4FFromccc4B	include/ccTypes.h	/^static inline ccColor4F ccc4FFromccc4B(ccColor4B c)$/;"	f	signature:(ccColor4B c)
ccc4f	include/ccTypes.h	/^ccc4f(const GLfloat r, const GLfloat g, const GLfloat b, const GLfloat a)$/;"	f	signature:(const GLfloat r, const GLfloat g, const GLfloat b, const GLfloat a)
ccp	support/CCPointExtension.h	60;"	d
ccpAdd	support/CCPointExtension.h	/^ccpAdd(const CCPoint& v1, const CCPoint& v2)$/;"	f	signature:(const CCPoint& v1, const CCPoint& v2)
ccpAngle	support/CCPointExtension.cpp	/^float ccpAngle(const CCPoint& a, const CCPoint& b)$/;"	f	signature:(const CCPoint& a, const CCPoint& b)
ccpAngle	support/CCPointExtension.h	/^float CC_DLL ccpAngle(const CCPoint& a, const CCPoint& b);$/;"	p	signature:(const CCPoint& a, const CCPoint& b)
ccpAngleSigned	support/CCPointExtension.cpp	/^float ccpAngleSigned(const CCPoint& a, const CCPoint& b)$/;"	f	signature:(const CCPoint& a, const CCPoint& b)
ccpAngleSigned	support/CCPointExtension.h	/^float CC_DLL ccpAngleSigned(const CCPoint& a, const CCPoint& b);$/;"	p	signature:(const CCPoint& a, const CCPoint& b)
ccpClamp	support/CCPointExtension.cpp	/^CCPoint ccpClamp(const CCPoint& p, const CCPoint& min_inclusive, const CCPoint& max_inclusive)$/;"	f	signature:(const CCPoint& p, const CCPoint& min_inclusive, const CCPoint& max_inclusive)
ccpClamp	support/CCPointExtension.h	/^CCPoint CC_DLL ccpClamp(const CCPoint& p, const CCPoint& from, const CCPoint& to);$/;"	p	signature:(const CCPoint& p, const CCPoint& from, const CCPoint& to)
ccpCompMult	support/CCPointExtension.cpp	/^CCPoint ccpCompMult(const CCPoint& a, const CCPoint& b)$/;"	f	signature:(const CCPoint& a, const CCPoint& b)
ccpCompMult	support/CCPointExtension.h	/^CCPoint CC_DLL ccpCompMult(const CCPoint& a, const CCPoint& b);$/;"	p	signature:(const CCPoint& a, const CCPoint& b)
ccpCompOp	support/CCPointExtension.cpp	/^CCPoint ccpCompOp(const CCPoint& p, float (*opFunc)(float))$/;"	f	signature:(const CCPoint& p, float (*opFunc)(float))
ccpCompOp	support/CCPointExtension.h	/^CCPoint CC_DLL ccpCompOp(const CCPoint& p, float (*opFunc)(float));$/;"	p	signature:(const CCPoint& p, float (*opFunc)(float))
ccpCross	support/CCPointExtension.h	/^ccpCross(const CCPoint& v1, const CCPoint& v2)$/;"	f	signature:(const CCPoint& v1, const CCPoint& v2)
ccpDistance	support/CCPointExtension.cpp	/^ccpDistance(const CCPoint& v1, const CCPoint& v2)$/;"	f	signature:(const CCPoint& v1, const CCPoint& v2)
ccpDistance	support/CCPointExtension.h	/^float CC_DLL ccpDistance(const CCPoint& v1, const CCPoint& v2);$/;"	p	signature:(const CCPoint& v1, const CCPoint& v2)
ccpDistanceSQ	support/CCPointExtension.h	/^ccpDistanceSQ(const CCPoint p1, const CCPoint p2)$/;"	f	signature:(const CCPoint p1, const CCPoint p2)
ccpDot	support/CCPointExtension.h	/^ccpDot(const CCPoint& v1, const CCPoint& v2)$/;"	f	signature:(const CCPoint& v1, const CCPoint& v2)
ccpForAngle	support/CCPointExtension.cpp	/^ccpForAngle(const float a)$/;"	f	signature:(const float a)
ccpForAngle	support/CCPointExtension.h	/^CCPoint CC_DLL ccpForAngle(const float a);$/;"	p	signature:(const float a)
ccpFromSize	support/CCPointExtension.cpp	/^CCPoint ccpFromSize(const CCSize& s)$/;"	f	signature:(const CCSize& s)
ccpFromSize	support/CCPointExtension.h	/^CCPoint CC_DLL ccpFromSize(const CCSize& s);$/;"	p	signature:(const CCSize& s)
ccpFuzzyEqual	support/CCPointExtension.cpp	/^bool ccpFuzzyEqual(const CCPoint& a, const CCPoint& b, float var)$/;"	f	signature:(const CCPoint& a, const CCPoint& b, float var)
ccpFuzzyEqual	support/CCPointExtension.h	/^bool CC_DLL ccpFuzzyEqual(const CCPoint& a, const CCPoint& b, float variance);$/;"	p	signature:(const CCPoint& a, const CCPoint& b, float variance)
ccpIntersectPoint	support/CCPointExtension.cpp	/^CCPoint ccpIntersectPoint(const CCPoint& A, const CCPoint& B, const CCPoint& C, const CCPoint& D)$/;"	f	signature:(const CCPoint& A, const CCPoint& B, const CCPoint& C, const CCPoint& D)
ccpIntersectPoint	support/CCPointExtension.h	/^CCPoint CC_DLL ccpIntersectPoint(const CCPoint& A, const CCPoint& B, const CCPoint& C, const CCPoint& D);$/;"	p	signature:(const CCPoint& A, const CCPoint& B, const CCPoint& C, const CCPoint& D)
ccpLength	support/CCPointExtension.cpp	/^ccpLength(const CCPoint& v)$/;"	f	signature:(const CCPoint& v)
ccpLength	support/CCPointExtension.h	/^float CC_DLL ccpLength(const CCPoint& v);$/;"	p	signature:(const CCPoint& v)
ccpLengthSQ	support/CCPointExtension.h	/^ccpLengthSQ(const CCPoint& v)$/;"	f	signature:(const CCPoint& v)
ccpLerp	support/CCPointExtension.cpp	/^CCPoint ccpLerp(const CCPoint& a, const CCPoint& b, float alpha)$/;"	f	signature:(const CCPoint& a, const CCPoint& b, float alpha)
ccpLerp	support/CCPointExtension.h	/^CCPoint CC_DLL ccpLerp(const CCPoint& a, const CCPoint& b, float alpha);$/;"	p	signature:(const CCPoint& a, const CCPoint& b, float alpha)
ccpLineIntersect	support/CCPointExtension.cpp	/^bool ccpLineIntersect(const CCPoint& A, const CCPoint& B, $/;"	f	signature:(const CCPoint& A, const CCPoint& B, const CCPoint& C, const CCPoint& D, float *S, float *T)
ccpLineIntersect	support/CCPointExtension.h	/^bool CC_DLL ccpLineIntersect(const CCPoint& p1, const CCPoint& p2, $/;"	p	signature:(const CCPoint& p1, const CCPoint& p2, const CCPoint& p3, const CCPoint& p4, float *s, float *t)
ccpMidpoint	support/CCPointExtension.h	/^ccpMidpoint(const CCPoint& v1, const CCPoint& v2)$/;"	f	signature:(const CCPoint& v1, const CCPoint& v2)
ccpMult	support/CCPointExtension.h	/^ccpMult(const CCPoint& v, const float s)$/;"	f	signature:(const CCPoint& v, const float s)
ccpNeg	support/CCPointExtension.h	/^ccpNeg(const CCPoint& v)$/;"	f	signature:(const CCPoint& v)
ccpNormalize	support/CCPointExtension.cpp	/^ccpNormalize(const CCPoint& v)$/;"	f	signature:(const CCPoint& v)
ccpNormalize	support/CCPointExtension.h	/^CCPoint CC_DLL ccpNormalize(const CCPoint& v);$/;"	p	signature:(const CCPoint& v)
ccpPerp	support/CCPointExtension.h	/^ccpPerp(const CCPoint& v)$/;"	f	signature:(const CCPoint& v)
ccpProject	support/CCPointExtension.h	/^ccpProject(const CCPoint& v1, const CCPoint& v2)$/;"	f	signature:(const CCPoint& v1, const CCPoint& v2)
ccpRPerp	support/CCPointExtension.h	/^ccpRPerp(const CCPoint& v)$/;"	f	signature:(const CCPoint& v)
ccpRotate	support/CCPointExtension.h	/^ccpRotate(const CCPoint& v1, const CCPoint& v2)$/;"	f	signature:(const CCPoint& v1, const CCPoint& v2)
ccpRotateByAngle	support/CCPointExtension.cpp	/^CCPoint ccpRotateByAngle(const CCPoint& v, const CCPoint& pivot, float angle)$/;"	f	signature:(const CCPoint& v, const CCPoint& pivot, float angle)
ccpRotateByAngle	support/CCPointExtension.h	/^CCPoint CC_DLL ccpRotateByAngle(const CCPoint& v, const CCPoint& pivot, float angle);$/;"	p	signature:(const CCPoint& v, const CCPoint& pivot, float angle)
ccpSegmentIntersect	support/CCPointExtension.cpp	/^bool ccpSegmentIntersect(const CCPoint& A, const CCPoint& B, const CCPoint& C, const CCPoint& D)$/;"	f	signature:(const CCPoint& A, const CCPoint& B, const CCPoint& C, const CCPoint& D)
ccpSegmentIntersect	support/CCPointExtension.h	/^bool CC_DLL ccpSegmentIntersect(const CCPoint& A, const CCPoint& B, const CCPoint& C, const CCPoint& D);$/;"	p	signature:(const CCPoint& A, const CCPoint& B, const CCPoint& C, const CCPoint& D)
ccpSub	support/CCPointExtension.h	/^ccpSub(const CCPoint& v1, const CCPoint& v2)$/;"	f	signature:(const CCPoint& v1, const CCPoint& v2)
ccpToAngle	support/CCPointExtension.cpp	/^ccpToAngle(const CCPoint& v)$/;"	f	signature:(const CCPoint& v)
ccpToAngle	support/CCPointExtension.h	/^float CC_DLL ccpToAngle(const CCPoint& v);$/;"	p	signature:(const CCPoint& v)
ccpUnrotate	support/CCPointExtension.h	/^ccpUnrotate(const CCPoint& v1, const CCPoint& v2)$/;"	f	signature:(const CCPoint& v1, const CCPoint& v2)
ccs	cocoa/CCString.h	129;"	d
central_pos	support/zip_support/unzip.cpp	/^    ZPOS64_T central_pos;          \/* position of the beginning of the central dir*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
changeHeight	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::changeHeight(GLfloat h)$/;"	f	class:CCLayerColor	signature:(GLfloat h)
changeHeight	layers_scenes_transitions_nodes/CCLayer.h	/^    void changeHeight(GLfloat h);$/;"	p	class:CCLayerColor	access:public	signature:(GLfloat h)
changeWidth	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::changeWidth(GLfloat w)$/;"	f	class:CCLayerColor	signature:(GLfloat w)
changeWidth	layers_scenes_transitions_nodes/CCLayer.h	/^    void changeWidth(GLfloat w);$/;"	p	class:CCLayerColor	access:public	signature:(GLfloat w)
changeWidthAndHeight	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::changeWidthAndHeight(GLfloat w ,GLfloat h)$/;"	f	class:CCLayerColor	signature:(GLfloat w ,GLfloat h)
changeWidthAndHeight	layers_scenes_transitions_nodes/CCLayer.h	/^    void changeWidthAndHeight(GLfloat w ,GLfloat h);$/;"	p	class:CCLayerColor	access:public	signature:(GLfloat w ,GLfloat h)
channelType	textures/CCTexturePVR.cpp	/^	uint32_t channelType;$/;"	m	struct:__anon56	file:	access:public
charID	label_nodes/CCLabelBMFont.h	/^    unsigned int charID;$/;"	m	struct:_BMFontDef	access:public
checkForGLExtension	CCConfiguration.cpp	/^bool CCConfiguration::checkForGLExtension(const string &searchName)$/;"	f	class:CCConfiguration	signature:(const string &searchName)
checkForGLExtension	CCConfiguration.h	/^    bool checkForGLExtension(const std::string &searchName);$/;"	p	class:CCConfiguration	access:public	signature:(const std::string &searchName)
childrenAlloc	base_nodes/CCNode.cpp	/^void CCNode::childrenAlloc(void)$/;"	f	class:CCNode	signature:(void)
childrenAlloc	base_nodes/CCNode.h	/^    void childrenAlloc(void);$/;"	p	class:CCNode	access:private	signature:(void)
chunk	support/tinyxml2/tinyxml2.h	/^        Chunk chunk[COUNT];$/;"	m	struct:tinyxml2::MemPoolT::Block	access:public
clampf	support/CCPointExtension.cpp	/^float clampf(float value, float min_inclusive, float max_inclusive)$/;"	f	signature:(float value, float min_inclusive, float max_inclusive)
clampf	support/CCPointExtension.h	/^float CC_DLL clampf(float value, float min_inclusive, float max_inclusive);$/;"	p	signature:(float value, float min_inclusive, float max_inclusive)
cleanup	base_nodes/CCNode.cpp	/^void CCNode::cleanup()$/;"	f	class:CCNode	signature:()
cleanup	base_nodes/CCNode.h	/^    virtual void cleanup(void);$/;"	p	class:CCNode	access:public	signature:(void)
cleanup	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::cleanup()$/;"	f	class:CCTransitionScene	signature:()
cleanup	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void cleanup();$/;"	p	class:CCTransitionScene	access:public	signature:()
clear	cocoa/CCAutoreleasePool.cpp	/^void CCAutoreleasePool::clear()$/;"	f	class:CCAutoreleasePool	signature:()
clear	cocoa/CCAutoreleasePool.h	/^    void clear();$/;"	p	class:CCAutoreleasePool	access:public	signature:()
clear	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::clear()$/;"	f	class:CCDrawNode	signature:()
clear	draw_nodes/CCDrawNode.h	/^    void clear();$/;"	p	class:CCDrawNode	access:public	signature:()
clear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::clear(float r, float g, float b, float a)$/;"	f	class:CCRenderTexture	signature:(float r, float g, float b, float a)
clear	misc_nodes/CCRenderTexture.h	/^    void clear(float r, float g, float b, float a);$/;"	p	class:CCRenderTexture	access:public	signature:(float r, float g, float b, float a)
clearDepth	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::clearDepth(float depthValue)$/;"	f	class:CCRenderTexture	signature:(float depthValue)
clearDepth	misc_nodes/CCRenderTexture.h	/^    void clearDepth(float depthValue);$/;"	p	class:CCRenderTexture	access:public	signature:(float depthValue)
clearStencil	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::clearStencil(int stencilValue)$/;"	f	class:CCRenderTexture	signature:(int stencilValue)
clearStencil	misc_nodes/CCRenderTexture.h	/^    void clearStencil(int stencilValue);$/;"	p	class:CCRenderTexture	access:public	signature:(int stencilValue)
close_file_func	support/zip_support/ioapi.h	/^typedef int      (ZCALLBACK *close_file_func)     OF((voidpf opaque, voidpf stream));$/;"	t	namespace:cocos2d
cocos2d	support/TransformUtils.cpp	/^namespace cocos2d {$/;"	n	file:
cocos2d	support/TransformUtils.h	/^namespace   cocos2d {$/;"	n
cocos2d	support/base64.cpp	/^namespace cocos2d {$/;"	n	file:
cocos2d	support/base64.h	/^namespace cocos2d {$/;"	n
cocos2d	support/ccUtils.cpp	/^namespace cocos2d {$/;"	n	file:
cocos2d	support/ccUtils.h	/^namespace cocos2d {$/;"	n
cocos2d	support/data_support/utlist.h	/^namespace   cocos2d {$/;"	n
cocos2d	support/image_support/TGAlib.cpp	/^namespace cocos2d {$/;"	n	file:
cocos2d	support/image_support/TGAlib.h	/^namespace cocos2d {$/;"	n
cocos2d	support/zip_support/ZipUtils.h	/^namespace cocos2d$/;"	n
cocos2d	support/zip_support/ioapi.cpp	/^namespace cocos2d {$/;"	n	file:
cocos2d	support/zip_support/ioapi.h	/^namespace cocos2d {$/;"	n
cocos2d	support/zip_support/unzip.cpp	/^namespace cocos2d {$/;"	n	file:
cocos2d	support/zip_support/unzip.h	/^namespace cocos2d {$/;"	n
cocos2d::CCZHeader	support/zip_support/ZipUtils.h	/^    struct CCZHeader {$/;"	s	namespace:cocos2d
cocos2d::CCZHeader::compression_type	support/zip_support/ZipUtils.h	/^        unsigned short            compression_type;    \/\/ should 0$/;"	m	struct:cocos2d::CCZHeader	access:public
cocos2d::CCZHeader::len	support/zip_support/ZipUtils.h	/^        unsigned int            len;                \/\/ size of the uncompressed file$/;"	m	struct:cocos2d::CCZHeader	access:public
cocos2d::CCZHeader::reserved	support/zip_support/ZipUtils.h	/^        unsigned int             reserved;            \/\/ Reserved for users.$/;"	m	struct:cocos2d::CCZHeader	access:public
cocos2d::CCZHeader::sig	support/zip_support/ZipUtils.h	/^        unsigned char            sig[4];                \/\/ signature. Should be 'CCZ!' 4 bytes$/;"	m	struct:cocos2d::CCZHeader	access:public
cocos2d::CCZHeader::version	support/zip_support/ZipUtils.h	/^        unsigned short            version;            \/\/ should be 2 (although version type==1 is also supported)$/;"	m	struct:cocos2d::CCZHeader	access:public
cocos2d::CCZ_COMPRESSION_BZIP2	support/zip_support/ZipUtils.h	/^        CCZ_COMPRESSION_BZIP2,                \/\/ bzip2 format (not supported yet)$/;"	e	enum:cocos2d::__anon45
cocos2d::CCZ_COMPRESSION_GZIP	support/zip_support/ZipUtils.h	/^        CCZ_COMPRESSION_GZIP,                \/\/ gzip format (not supported yet)$/;"	e	enum:cocos2d::__anon45
cocos2d::CCZ_COMPRESSION_NONE	support/zip_support/ZipUtils.h	/^        CCZ_COMPRESSION_NONE,                \/\/ plain (not supported yet)$/;"	e	enum:cocos2d::__anon45
cocos2d::CCZ_COMPRESSION_ZLIB	support/zip_support/ZipUtils.h	/^        CCZ_COMPRESSION_ZLIB,                \/\/ zlib format.$/;"	e	enum:cocos2d::__anon45
cocos2d::CGAffineToGL	support/TransformUtils.cpp	/^void CGAffineToGL(const CCAffineTransform *t, GLfloat *m)$/;"	f	namespace:cocos2d	signature:(const CCAffineTransform *t, GLfloat *m)
cocos2d::CGAffineToGL	support/TransformUtils.h	/^void CGAffineToGL(const CCAffineTransform *t, GLfloat *m);$/;"	p	namespace:cocos2d	signature:(const CCAffineTransform *t, GLfloat *m)
cocos2d::GLToCGAffine	support/TransformUtils.cpp	/^void GLToCGAffine(const GLfloat *m, CCAffineTransform *t)$/;"	f	namespace:cocos2d	signature:(const GLfloat *m, CCAffineTransform *t)
cocos2d::GLToCGAffine	support/TransformUtils.h	/^void GLToCGAffine(const GLfloat *m, CCAffineTransform *t);$/;"	p	namespace:cocos2d	signature:(const GLfloat *m, CCAffineTransform *t)
cocos2d::OF	support/zip_support/ioapi.h	/^typedef ZPOS64_T (ZCALLBACK *tell64_file_func)    OF((voidpf opaque, voidpf stream));$/;"	t	namespace:cocos2d
cocos2d::OF	support/zip_support/ioapi.h	/^typedef uLong    (ZCALLBACK *read_file_func)      OF((voidpf opaque, voidpf stream, void* buf, uLong size));$/;"	t	namespace:cocos2d
cocos2d::OF	support/zip_support/ioapi.h	/^typedef uLong    (ZCALLBACK *write_file_func)     OF((voidpf opaque, voidpf stream, const void* buf, uLong size));$/;"	t	namespace:cocos2d
cocos2d::OF	support/zip_support/ioapi.h	/^typedef voidpf   (ZCALLBACK *open64_file_func)    OF((voidpf opaque, const void* filename, int mode));$/;"	t	namespace:cocos2d
cocos2d::OF	support/zip_support/ioapi.h	/^typedef voidpf   (ZCALLBACK *open_file_func)      OF((voidpf opaque, const char* filename, int mode));$/;"	t	namespace:cocos2d
cocos2d::TGA_ERROR_COMPRESSED_FILE	support/image_support/TGAlib.h	/^    TGA_ERROR_COMPRESSED_FILE,$/;"	e	enum:cocos2d::__anon36
cocos2d::TGA_ERROR_FILE_OPEN	support/image_support/TGAlib.h	/^    TGA_ERROR_FILE_OPEN,$/;"	e	enum:cocos2d::__anon36
cocos2d::TGA_ERROR_INDEXED_COLOR	support/image_support/TGAlib.h	/^    TGA_ERROR_INDEXED_COLOR,$/;"	e	enum:cocos2d::__anon36
cocos2d::TGA_ERROR_MEMORY	support/image_support/TGAlib.h	/^    TGA_ERROR_MEMORY,$/;"	e	enum:cocos2d::__anon36
cocos2d::TGA_ERROR_READING_FILE	support/image_support/TGAlib.h	/^    TGA_ERROR_READING_FILE,$/;"	e	enum:cocos2d::__anon36
cocos2d::TGA_OK	support/image_support/TGAlib.h	/^    TGA_OK,$/;"	e	enum:cocos2d::__anon36
cocos2d::ZPOS64_T	support/zip_support/ioapi.h	/^typedef  64BIT_INT_CUSTOM_TYPE ZPOS64_T;$/;"	t	namespace:cocos2d
cocos2d::ZPOS64_T	support/zip_support/ioapi.h	/^typedef uint64_t ZPOS64_T;$/;"	t	namespace:cocos2d
cocos2d::ZipFile	support/zip_support/ZipUtils.h	/^    class ZipFile$/;"	c	namespace:cocos2d
cocos2d::ZipFile::ZipFile	support/zip_support/ZipUtils.h	/^        ZipFile(const std::string &zipFile, const std::string &filter = std::string());$/;"	p	class:cocos2d::ZipFile	access:public	signature:(const std::string &zipFile, const std::string &filter = std::string())
cocos2d::ZipFile::fileExists	support/zip_support/ZipUtils.h	/^        bool fileExists(const std::string &fileName) const;$/;"	p	class:cocos2d::ZipFile	access:public	signature:(const std::string &fileName) const
cocos2d::ZipFile::getFileData	support/zip_support/ZipUtils.h	/^        unsigned char *getFileData(const std::string &fileName, unsigned long *pSize);$/;"	p	class:cocos2d::ZipFile	access:public	signature:(const std::string &fileName, unsigned long *pSize)
cocos2d::ZipFile::m_data	support/zip_support/ZipUtils.h	/^        ZipFilePrivate *m_data;$/;"	m	class:cocos2d::ZipFile	access:private
cocos2d::ZipFile::setFilter	support/zip_support/ZipUtils.h	/^        bool setFilter(const std::string &filter);$/;"	p	class:cocos2d::ZipFile	access:public	signature:(const std::string &filter)
cocos2d::ZipFile::~ZipFile	support/zip_support/ZipUtils.h	/^        virtual ~ZipFile();$/;"	p	class:cocos2d::ZipFile	access:public	signature:()
cocos2d::ZipUtils	support/zip_support/ZipUtils.h	/^    class ZipUtils$/;"	c	namespace:cocos2d
cocos2d::ZipUtils::ccInflateCCZFile	support/zip_support/ZipUtils.h	/^        static int ccInflateCCZFile(const char *filename, unsigned char **out);$/;"	p	class:cocos2d::ZipUtils	access:public	signature:(const char *filename, unsigned char **out)
cocos2d::ZipUtils::ccInflateGZipFile	support/zip_support/ZipUtils.h	/^        static int ccInflateGZipFile(const char *filename, unsigned char **out);$/;"	p	class:cocos2d::ZipUtils	access:public	signature:(const char *filename, unsigned char **out)
cocos2d::ZipUtils::ccInflateMemory	support/zip_support/ZipUtils.h	/^        static int ccInflateMemory(unsigned char *in, unsigned int inLength, unsigned char **out);$/;"	p	class:cocos2d::ZipUtils	access:public	signature:(unsigned char *in, unsigned int inLength, unsigned char **out)
cocos2d::ZipUtils::ccInflateMemoryWithHint	support/zip_support/ZipUtils.h	/^        static int ccInflateMemoryWithHint(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int *outLength, $/;"	p	class:cocos2d::ZipUtils	access:private	signature:(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int *outLength, unsigned int outLenghtHint)
cocos2d::ZipUtils::ccInflateMemoryWithHint	support/zip_support/ZipUtils.h	/^        static int ccInflateMemoryWithHint(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int outLenghtHint);$/;"	p	class:cocos2d::ZipUtils	access:public	signature:(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int outLenghtHint)
cocos2d::__anon43::bstream	support/zip_support/unzip.cpp	/^    bz_stream bstream;          \/* bzLib stream structure for bziped *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::byte_before_the_zipfile	support/zip_support/unzip.cpp	/^    ZPOS64_T byte_before_the_zipfile;\/* byte before the zipfile, (>0 for sfx)*\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::compression_method	support/zip_support/unzip.cpp	/^    uLong compression_method;   \/* compression method (0==store) *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::crc32	support/zip_support/unzip.cpp	/^    uLong crc32;                \/* crc32 of all data uncompressed *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::crc32_wait	support/zip_support/unzip.cpp	/^    uLong crc32_wait;           \/* crc32 we must obtain after decompress all *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::filestream	support/zip_support/unzip.cpp	/^    voidpf filestream;        \/* io structure of the zipfile *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::offset_local_extrafield	support/zip_support/unzip.cpp	/^    ZPOS64_T offset_local_extrafield;\/* offset of the local extra field *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::pos_in_zipfile	support/zip_support/unzip.cpp	/^    ZPOS64_T pos_in_zipfile;       \/* position in byte on the zipfile, for fseek*\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::pos_local_extrafield	support/zip_support/unzip.cpp	/^    ZPOS64_T pos_local_extrafield;   \/* position in the local extra field in read*\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::raw	support/zip_support/unzip.cpp	/^    int   raw;$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::read_buffer	support/zip_support/unzip.cpp	/^    char  *read_buffer;         \/* internal buffer for compressed data *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::rest_read_compressed	support/zip_support/unzip.cpp	/^    ZPOS64_T rest_read_compressed; \/* number of byte to be decompressed *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::rest_read_uncompressed	support/zip_support/unzip.cpp	/^    ZPOS64_T rest_read_uncompressed;\/*number of byte to be obtained after decomp*\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::size_local_extrafield	support/zip_support/unzip.cpp	/^    uInt  size_local_extrafield;\/* size of the local extra field *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::stream	support/zip_support/unzip.cpp	/^    z_stream stream;            \/* zLib stream structure for inflate *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::stream_initialised	support/zip_support/unzip.cpp	/^    uLong stream_initialised;   \/* flag set if stream structure is initialized*\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::total_out_64	support/zip_support/unzip.cpp	/^    ZPOS64_T total_out_64;$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon43::z_filefunc	support/zip_support/unzip.cpp	/^    zlib_filefunc64_32_def z_filefunc;$/;"	m	struct:cocos2d::__anon43	file:	access:public
cocos2d::__anon44::byte_before_the_zipfile	support/zip_support/unzip.cpp	/^    ZPOS64_T byte_before_the_zipfile;\/* byte before the zipfile, (>0 for sfx)*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::central_pos	support/zip_support/unzip.cpp	/^    ZPOS64_T central_pos;          \/* position of the beginning of the central dir*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::cur_file_info	support/zip_support/unzip.cpp	/^    unz_file_info64 cur_file_info; \/* public info about the current file in zip*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::cur_file_info_internal	support/zip_support/unzip.cpp	/^    unz_file_info64_internal cur_file_info_internal; \/* private info about it*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::current_file_ok	support/zip_support/unzip.cpp	/^    ZPOS64_T current_file_ok;      \/* flag about the usability of the current file*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::encrypted	support/zip_support/unzip.cpp	/^    int encrypted;$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::filestream	support/zip_support/unzip.cpp	/^    voidpf filestream;        \/* io structure of the zipfile *\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::gi	support/zip_support/unzip.cpp	/^    unz_global_info64 gi;       \/* public global information *\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::is64bitOpenFunction	support/zip_support/unzip.cpp	/^    int is64bitOpenFunction;$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::isZip64	support/zip_support/unzip.cpp	/^    int isZip64;$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::keys	support/zip_support/unzip.cpp	/^    unsigned long keys[3];     \/* keys defining the pseudo-random sequence *\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::num_file	support/zip_support/unzip.cpp	/^    ZPOS64_T num_file;             \/* number of the current file in the zipfile*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::offset_central_dir	support/zip_support/unzip.cpp	/^    ZPOS64_T offset_central_dir;   \/* offset of start of central directory with$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::pcrc_32_tab	support/zip_support/unzip.cpp	/^    const unsigned long* pcrc_32_tab;$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::pfile_in_zip_read	support/zip_support/unzip.cpp	/^    file_in_zip64_read_info_s* pfile_in_zip_read; \/* structure about the current$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::pos_in_central_dir	support/zip_support/unzip.cpp	/^    ZPOS64_T pos_in_central_dir;   \/* pos of the current file in the central dir*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::size_central_dir	support/zip_support/unzip.cpp	/^    ZPOS64_T size_central_dir;     \/* size of the central directory  *\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::__anon44::z_filefunc	support/zip_support/unzip.cpp	/^    zlib_filefunc64_32_def z_filefunc;$/;"	m	struct:cocos2d::__anon44	file:	access:public
cocos2d::_base64Decode	support/base64.cpp	/^int _base64Decode( unsigned char *input, unsigned int input_len, unsigned char *output, unsigned int *output_len )$/;"	f	namespace:cocos2d	signature:( unsigned char *input, unsigned int input_len, unsigned char *output, unsigned int *output_len )
cocos2d::_base64Decode	support/base64.cpp	/^int _base64Decode( unsigned char *input, unsigned int input_len, unsigned char *output, unsigned int *output_len );$/;"	p	namespace:cocos2d	file:	signature:( unsigned char *input, unsigned int input_len, unsigned char *output, unsigned int *output_len )
cocos2d::alphabet	support/base64.cpp	/^unsigned char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	m	namespace:cocos2d	file:
cocos2d::base64Decode	support/base64.cpp	/^int base64Decode(unsigned char *in, unsigned int inLength, unsigned char **out)$/;"	f	namespace:cocos2d	signature:(unsigned char *in, unsigned int inLength, unsigned char **out)
cocos2d::base64Decode	support/base64.h	/^int base64Decode(unsigned char *in, unsigned int inLength, unsigned char **out);$/;"	p	namespace:cocos2d	signature:(unsigned char *in, unsigned int inLength, unsigned char **out)
cocos2d::call_zopen64	support/zip_support/ioapi.cpp	/^voidpf call_zopen64 (const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode)$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode)
cocos2d::call_zopen64	support/zip_support/ioapi.h	/^voidpf call_zopen64 OF((const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode));$/;"	p	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode)
cocos2d::call_zseek64	support/zip_support/ioapi.cpp	/^long call_zseek64 (const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin)$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin)
cocos2d::call_zseek64	support/zip_support/ioapi.h	/^long    call_zseek64 OF((const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin));$/;"	p	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin)
cocos2d::call_ztell64	support/zip_support/ioapi.cpp	/^ZPOS64_T call_ztell64 (const zlib_filefunc64_32_def* pfilefunc,voidpf filestream)$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pfilefunc,voidpf filestream)
cocos2d::call_ztell64	support/zip_support/ioapi.h	/^ZPOS64_T call_ztell64 OF((const zlib_filefunc64_32_def* pfilefunc,voidpf filestream));$/;"	p	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pfilefunc,voidpf filestream)
cocos2d::ccNextPOT	support/ccUtils.cpp	/^unsigned long ccNextPOT(unsigned long x)$/;"	f	namespace:cocos2d	signature:(unsigned long x)
cocos2d::ccNextPOT	support/ccUtils.h	/^unsigned long ccNextPOT( unsigned long value );$/;"	p	namespace:cocos2d	signature:( unsigned long value )
cocos2d::close_file_func	support/zip_support/ioapi.h	/^typedef int      (ZCALLBACK *close_file_func)     OF((voidpf opaque, voidpf stream));$/;"	t	namespace:cocos2d
cocos2d::fclose_file_func	support/zip_support/ioapi.cpp	/^static int     ZCALLBACK fclose_file_func OF((voidpf opaque, voidpf stream));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, voidpf stream)
cocos2d::fclose_file_func	support/zip_support/ioapi.cpp	/^static int ZCALLBACK fclose_file_func (voidpf opaque, voidpf stream)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream)
cocos2d::ferror_file_func	support/zip_support/ioapi.cpp	/^static int     ZCALLBACK ferror_file_func OF((voidpf opaque, voidpf stream));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, voidpf stream)
cocos2d::ferror_file_func	support/zip_support/ioapi.cpp	/^static int ZCALLBACK ferror_file_func (voidpf opaque, voidpf stream)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream)
cocos2d::file_in_zip64_read_info_s	support/zip_support/unzip.cpp	/^} file_in_zip64_read_info_s;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::__anon43	file:
cocos2d::fill_fopen64_filefunc	support/zip_support/ioapi.cpp	/^void fill_fopen64_filefunc (zlib_filefunc64_def*  pzlib_filefunc_def)$/;"	f	namespace:cocos2d	signature:(zlib_filefunc64_def* pzlib_filefunc_def)
cocos2d::fill_fopen64_filefunc	support/zip_support/ioapi.h	/^void fill_fopen64_filefunc OF((zlib_filefunc64_def* pzlib_filefunc_def));$/;"	p	namespace:cocos2d	signature:(zlib_filefunc64_def* pzlib_filefunc_def)
cocos2d::fill_fopen_filefunc	support/zip_support/ioapi.cpp	/^void fill_fopen_filefunc (zlib_filefunc_def* pzlib_filefunc_def)$/;"	f	namespace:cocos2d	signature:(zlib_filefunc_def* pzlib_filefunc_def)
cocos2d::fill_fopen_filefunc	support/zip_support/ioapi.h	/^void fill_fopen_filefunc OF((zlib_filefunc_def* pzlib_filefunc_def));$/;"	p	namespace:cocos2d	signature:(zlib_filefunc_def* pzlib_filefunc_def)
cocos2d::fill_zlib_filefunc64_32_def_from_filefunc32	support/zip_support/ioapi.cpp	/^void fill_zlib_filefunc64_32_def_from_filefunc32(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32)$/;"	f	namespace:cocos2d	signature:(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32)
cocos2d::fill_zlib_filefunc64_32_def_from_filefunc32	support/zip_support/ioapi.h	/^void    fill_zlib_filefunc64_32_def_from_filefunc32(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32);$/;"	p	namespace:cocos2d	signature:(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32)
cocos2d::fopen64_file_func	support/zip_support/ioapi.cpp	/^static voidpf ZCALLBACK fopen64_file_func (voidpf opaque, const void* filename, int mode)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, const void* filename, int mode)
cocos2d::fopen_file_func	support/zip_support/ioapi.cpp	/^static voidpf  ZCALLBACK fopen_file_func OF((voidpf opaque, const char* filename, int mode));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, const char* filename, int mode)
cocos2d::fopen_file_func	support/zip_support/ioapi.cpp	/^static voidpf ZCALLBACK fopen_file_func (voidpf opaque, const char* filename, int mode)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, const char* filename, int mode)
cocos2d::fread_file_func	support/zip_support/ioapi.cpp	/^static uLong   ZCALLBACK fread_file_func OF((voidpf opaque, voidpf stream, void* buf, uLong size));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, voidpf stream, void* buf, uLong size)
cocos2d::fread_file_func	support/zip_support/ioapi.cpp	/^static uLong ZCALLBACK fread_file_func (voidpf opaque, voidpf stream, void* buf, uLong size)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream, void* buf, uLong size)
cocos2d::fseek64_file_func	support/zip_support/ioapi.cpp	/^static long    ZCALLBACK fseek64_file_func OF((voidpf opaque, voidpf stream, ZPOS64_T offset, int origin));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, voidpf stream, ZPOS64_T offset, int origin)
cocos2d::fseek64_file_func	support/zip_support/ioapi.cpp	/^static long ZCALLBACK fseek64_file_func (voidpf  opaque, voidpf stream, ZPOS64_T offset, int origin)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream, ZPOS64_T offset, int origin)
cocos2d::fseek_file_func	support/zip_support/ioapi.cpp	/^static long ZCALLBACK fseek_file_func (voidpf  opaque, voidpf stream, uLong offset, int origin)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream, uLong offset, int origin)
cocos2d::ftell64_file_func	support/zip_support/ioapi.cpp	/^static ZPOS64_T ZCALLBACK ftell64_file_func (voidpf opaque, voidpf stream)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream)
cocos2d::ftell64_file_func	support/zip_support/ioapi.cpp	/^static ZPOS64_T ZCALLBACK ftell64_file_func OF((voidpf opaque, voidpf stream));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, voidpf stream)
cocos2d::ftell_file_func	support/zip_support/ioapi.cpp	/^static long ZCALLBACK ftell_file_func (voidpf opaque, voidpf stream)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream)
cocos2d::fwrite_file_func	support/zip_support/ioapi.cpp	/^static uLong   ZCALLBACK fwrite_file_func OF((voidpf opaque, voidpf stream, const void* buf,uLong size));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, voidpf stream, const void* buf,uLong size)
cocos2d::fwrite_file_func	support/zip_support/ioapi.cpp	/^static uLong ZCALLBACK fwrite_file_func (voidpf opaque, voidpf stream, const void* buf, uLong size)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream, const void* buf, uLong size)
cocos2d::sImageTGA	support/image_support/TGAlib.h	/^typedef struct sImageTGA {$/;"	s	namespace:cocos2d
cocos2d::sImageTGA::flipped	support/image_support/TGAlib.h	/^    int flipped;$/;"	m	struct:cocos2d::sImageTGA	access:public
cocos2d::sImageTGA::height	support/image_support/TGAlib.h	/^    signed short height;$/;"	m	struct:cocos2d::sImageTGA	access:public
cocos2d::sImageTGA::imageData	support/image_support/TGAlib.h	/^    unsigned char *imageData;$/;"	m	struct:cocos2d::sImageTGA	access:public
cocos2d::sImageTGA::pixelDepth	support/image_support/TGAlib.h	/^    unsigned char type, pixelDepth;$/;"	m	struct:cocos2d::sImageTGA	access:public
cocos2d::sImageTGA::status	support/image_support/TGAlib.h	/^    int status;$/;"	m	struct:cocos2d::sImageTGA	access:public
cocos2d::sImageTGA::type	support/image_support/TGAlib.h	/^    unsigned char type, pixelDepth;$/;"	m	struct:cocos2d::sImageTGA	access:public
cocos2d::sImageTGA::width	support/image_support/TGAlib.h	/^    signed short width;$/;"	m	struct:cocos2d::sImageTGA	access:public
cocos2d::seek64_file_func	support/zip_support/ioapi.h	/^typedef long     (ZCALLBACK *seek64_file_func)    OF((voidpf opaque, voidpf stream, ZPOS64_T offset, int origin));$/;"	t	namespace:cocos2d
cocos2d::seek_file_func	support/zip_support/ioapi.h	/^typedef long     (ZCALLBACK *seek_file_func)      OF((voidpf opaque, voidpf stream, uLong offset, int origin));$/;"	t	namespace:cocos2d
cocos2d::strcmpcasenosensitive_internal	support/zip_support/unzip.cpp	/^local int strcmpcasenosensitive_internal (const char* fileName1, const char* fileName2)$/;"	f	namespace:cocos2d	signature:(const char* fileName1, const char* fileName2)
cocos2d::tImageTGA	support/image_support/TGAlib.h	/^} tImageTGA;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::sImageTGA
cocos2d::tell_file_func	support/zip_support/ioapi.h	/^typedef long     (ZCALLBACK *tell_file_func)      OF((voidpf opaque, voidpf stream));$/;"	t	namespace:cocos2d
cocos2d::testerror_file_func	support/zip_support/ioapi.h	/^typedef int      (ZCALLBACK *testerror_file_func) OF((voidpf opaque, voidpf stream));$/;"	t	namespace:cocos2d
cocos2d::tgaDestroy	support/image_support/TGAlib.cpp	/^void tgaDestroy(tImageTGA *psInfo) {$/;"	f	namespace:cocos2d	signature:(tImageTGA *psInfo)
cocos2d::tgaDestroy	support/image_support/TGAlib.h	/^void tgaDestroy(tImageTGA *psInfo);$/;"	p	namespace:cocos2d	signature:(tImageTGA *psInfo)
cocos2d::tgaFlipImage	support/image_support/TGAlib.cpp	/^void tgaFlipImage( tImageTGA *info );$/;"	p	namespace:cocos2d	file:	signature:( tImageTGA *info )
cocos2d::tgaFlipImage	support/image_support/TGAlib.cpp	/^void tgaFlipImage( tImageTGA *psInfo )$/;"	f	namespace:cocos2d	signature:( tImageTGA *psInfo )
cocos2d::tgaLoad	support/image_support/TGAlib.cpp	/^tImageTGA * tgaLoad(const char *pszFilename)$/;"	f	namespace:cocos2d	signature:(const char *pszFilename)
cocos2d::tgaLoad	support/image_support/TGAlib.h	/^tImageTGA * tgaLoad(const char *pszFilename);$/;"	p	namespace:cocos2d	signature:(const char *pszFilename)
cocos2d::tgaLoadHeader	support/image_support/TGAlib.cpp	/^bool tgaLoadHeader(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo)$/;"	f	namespace:cocos2d	signature:(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo)
cocos2d::tgaLoadHeader	support/image_support/TGAlib.h	/^bool tgaLoadHeader(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo);$/;"	p	namespace:cocos2d	signature:(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo)
cocos2d::tgaLoadImageData	support/image_support/TGAlib.cpp	/^bool tgaLoadImageData(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo)$/;"	f	namespace:cocos2d	signature:(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo)
cocos2d::tgaLoadImageData	support/image_support/TGAlib.h	/^bool tgaLoadImageData(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo);$/;"	p	namespace:cocos2d	signature:(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo)
cocos2d::tgaLoadRLEImageData	support/image_support/TGAlib.cpp	/^static bool tgaLoadRLEImageData(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo)$/;"	f	namespace:cocos2d	signature:(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo)
cocos2d::tgaLoadRLEImageData	support/image_support/TGAlib.cpp	/^static bool tgaLoadRLEImageData(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo);$/;"	p	namespace:cocos2d	file:	signature:(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo)
cocos2d::tgaRGBtogreyscale	support/image_support/TGAlib.cpp	/^void tgaRGBtogreyscale(tImageTGA *psInfo) {$/;"	f	namespace:cocos2d	signature:(tImageTGA *psInfo)
cocos2d::tgaRGBtogreyscale	support/image_support/TGAlib.h	/^void tgaRGBtogreyscale(tImageTGA *psInfo);$/;"	p	namespace:cocos2d	signature:(tImageTGA *psInfo)
cocos2d::tm_unz	support/zip_support/unzip.h	/^} tm_unz;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::tm_unz_s
cocos2d::tm_unz_s	support/zip_support/unzip.h	/^typedef struct tm_unz_s$/;"	s	namespace:cocos2d
cocos2d::tm_unz_s::tm_hour	support/zip_support/unzip.h	/^    uInt tm_hour;           \/* hours since midnight - [0,23] *\/$/;"	m	struct:cocos2d::tm_unz_s	access:public
cocos2d::tm_unz_s::tm_mday	support/zip_support/unzip.h	/^    uInt tm_mday;           \/* day of the month - [1,31] *\/$/;"	m	struct:cocos2d::tm_unz_s	access:public
cocos2d::tm_unz_s::tm_min	support/zip_support/unzip.h	/^    uInt tm_min;            \/* minutes after the hour - [0,59] *\/$/;"	m	struct:cocos2d::tm_unz_s	access:public
cocos2d::tm_unz_s::tm_mon	support/zip_support/unzip.h	/^    uInt tm_mon;            \/* months since January - [0,11] *\/$/;"	m	struct:cocos2d::tm_unz_s	access:public
cocos2d::tm_unz_s::tm_sec	support/zip_support/unzip.h	/^    uInt tm_sec;            \/* seconds after the minute - [0,59] *\/$/;"	m	struct:cocos2d::tm_unz_s	access:public
cocos2d::tm_unz_s::tm_year	support/zip_support/unzip.h	/^    uInt tm_year;           \/* years - [1980..2044] *\/$/;"	m	struct:cocos2d::tm_unz_s	access:public
cocos2d::unz64_file_pos	support/zip_support/unzip.h	/^} unz64_file_pos;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz64_file_pos_s
cocos2d::unz64_file_pos_s	support/zip_support/unzip.h	/^typedef struct unz64_file_pos_s$/;"	s	namespace:cocos2d
cocos2d::unz64_file_pos_s::num_of_file	support/zip_support/unzip.h	/^    ZPOS64_T num_of_file;            \/* # of file *\/$/;"	m	struct:cocos2d::unz64_file_pos_s	access:public
cocos2d::unz64_file_pos_s::pos_in_zip_directory	support/zip_support/unzip.h	/^    ZPOS64_T pos_in_zip_directory;   \/* offset in zip file directory *\/$/;"	m	struct:cocos2d::unz64_file_pos_s	access:public
cocos2d::unz64_s	support/zip_support/unzip.cpp	/^} unz64_s;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::__anon44	file:
cocos2d::unz64local_CheckCurrentFileCoherencyHeader	support/zip_support/unzip.cpp	/^local int unz64local_CheckCurrentFileCoherencyHeader (unz64_s* s, uInt* piSizeVar,$/;"	f	namespace:cocos2d	signature:(unz64_s* s, uInt* piSizeVar, ZPOS64_T * poffset_local_extrafield, uInt * psize_local_extrafield)
cocos2d::unz64local_DosDateToTmuDate	support/zip_support/unzip.cpp	/^local void unz64local_DosDateToTmuDate (ZPOS64_T ulDosDate, tm_unz* ptm)$/;"	f	namespace:cocos2d	signature:(ZPOS64_T ulDosDate, tm_unz* ptm)
cocos2d::unz64local_GetCurrentFileInfoInternal	support/zip_support/unzip.cpp	/^local int unz64local_GetCurrentFileInfoInternal (unzFile file,$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_file_info64 *pfile_info, unz_file_info64_internal *pfile_info_internal, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)
cocos2d::unz64local_GetCurrentFileInfoInternal	support/zip_support/unzip.cpp	/^local int unz64local_GetCurrentFileInfoInternal OF((unzFile file,$/;"	p	namespace:cocos2d	file:	signature:(unzFile file, unz_file_info64 *pfile_info, unz_file_info64_internal *pfile_info_internal, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)
cocos2d::unz64local_SearchCentralDir	support/zip_support/unzip.cpp	/^local ZPOS64_T unz64local_SearchCentralDir OF((const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream));$/;"	p	namespace:cocos2d	file:	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
cocos2d::unz64local_SearchCentralDir	support/zip_support/unzip.cpp	/^local ZPOS64_T unz64local_SearchCentralDir(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
cocos2d::unz64local_SearchCentralDir64	support/zip_support/unzip.cpp	/^local ZPOS64_T unz64local_SearchCentralDir64 OF(($/;"	p	namespace:cocos2d	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
cocos2d::unz64local_SearchCentralDir64	support/zip_support/unzip.cpp	/^local ZPOS64_T unz64local_SearchCentralDir64(const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
cocos2d::unz64local_getByte	support/zip_support/unzip.cpp	/^local int unz64local_getByte OF(($/;"	p	namespace:cocos2d	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int *pi)
cocos2d::unz64local_getByte	support/zip_support/unzip.cpp	/^local int unz64local_getByte(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int *pi)$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int *pi)
cocos2d::unz64local_getLong	support/zip_support/unzip.cpp	/^local int unz64local_getLong (const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
cocos2d::unz64local_getLong	support/zip_support/unzip.cpp	/^local int unz64local_getLong OF(($/;"	p	namespace:cocos2d	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
cocos2d::unz64local_getLong64	support/zip_support/unzip.cpp	/^local int unz64local_getLong64 (const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX)
cocos2d::unz64local_getLong64	support/zip_support/unzip.cpp	/^local int unz64local_getLong64 OF(($/;"	p	namespace:cocos2d	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX)
cocos2d::unz64local_getShort	support/zip_support/unzip.cpp	/^local int unz64local_getShort (const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
cocos2d::unz64local_getShort	support/zip_support/unzip.cpp	/^local int unz64local_getShort OF(($/;"	p	namespace:cocos2d	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
cocos2d::unzClose	support/zip_support/unzip.cpp	/^int ZEXPORT unzClose (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzClose	support/zip_support/unzip.h	/^int CC_DLL unzClose OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzCloseCurrentFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzCloseCurrentFile (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzCloseCurrentFile	support/zip_support/unzip.h	/^int CC_DLL unzCloseCurrentFile OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzGetCurrentFileInfo	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetCurrentFileInfo (unzFile file,$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_file_info * pfile_info, char * szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char* szComment, uLong commentBufferSize)
cocos2d::unzGetCurrentFileInfo	support/zip_support/unzip.h	/^int CC_DLL unzGetCurrentFileInfo OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, unz_file_info *pfile_info, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)
cocos2d::unzGetCurrentFileInfo64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetCurrentFileInfo64 (unzFile file,$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_file_info64 * pfile_info, char * szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char* szComment, uLong commentBufferSize)
cocos2d::unzGetCurrentFileInfo64	support/zip_support/unzip.h	/^int CC_DLL unzGetCurrentFileInfo64 OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, unz_file_info64 *pfile_info, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)
cocos2d::unzGetCurrentFileZStreamPos64	support/zip_support/unzip.cpp	/^ZPOS64_T ZEXPORT unzGetCurrentFileZStreamPos64( unzFile file)$/;"	f	namespace:cocos2d	signature:( unzFile file)
cocos2d::unzGetCurrentFileZStreamPos64	support/zip_support/unzip.h	/^ZPOS64_T CC_DLL unzGetCurrentFileZStreamPos64 OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzGetFilePos	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetFilePos($/;"	f	namespace:cocos2d	signature:( unzFile file, unz_file_pos* file_pos)
cocos2d::unzGetFilePos	support/zip_support/unzip.h	/^int CC_DLL unzGetFilePos($/;"	p	namespace:cocos2d	signature:( unzFile file, unz_file_pos* file_pos)
cocos2d::unzGetFilePos64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetFilePos64(unzFile file, unz64_file_pos*  file_pos)$/;"	f	namespace:cocos2d	signature:(unzFile file, unz64_file_pos* file_pos)
cocos2d::unzGetFilePos64	support/zip_support/unzip.h	/^int CC_DLL unzGetFilePos64($/;"	p	namespace:cocos2d	signature:( unzFile file, unz64_file_pos* file_pos)
cocos2d::unzGetGlobalComment	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetGlobalComment (unzFile file, char * szComment, uLong uSizeBuf)$/;"	f	namespace:cocos2d	signature:(unzFile file, char * szComment, uLong uSizeBuf)
cocos2d::unzGetGlobalComment	support/zip_support/unzip.h	/^int CC_DLL unzGetGlobalComment OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, char *szComment, uLong uSizeBuf)
cocos2d::unzGetGlobalInfo	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetGlobalInfo (unzFile file, unz_global_info* pglobal_info32)$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_global_info* pglobal_info32)
cocos2d::unzGetGlobalInfo	support/zip_support/unzip.h	/^int CC_DLL unzGetGlobalInfo OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, unz_global_info *pglobal_info)
cocos2d::unzGetGlobalInfo64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetGlobalInfo64 (unzFile file, unz_global_info64* pglobal_info)$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_global_info64* pglobal_info)
cocos2d::unzGetGlobalInfo64	support/zip_support/unzip.h	/^int CC_DLL unzGetGlobalInfo64 OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, unz_global_info64 *pglobal_info)
cocos2d::unzGetLocalExtrafield	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetLocalExtrafield (unzFile file, voidp buf, unsigned len)$/;"	f	namespace:cocos2d	signature:(unzFile file, voidp buf, unsigned len)
cocos2d::unzGetLocalExtrafield	support/zip_support/unzip.h	/^int CC_DLL unzGetLocalExtrafield OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, voidp buf, unsigned len)
cocos2d::unzGetOffset	support/zip_support/unzip.cpp	/^uLong ZEXPORT unzGetOffset (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzGetOffset	support/zip_support/unzip.h	/^uLong CC_DLL unzGetOffset (unzFile file);$/;"	p	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzGetOffset64	support/zip_support/unzip.cpp	/^ZPOS64_T ZEXPORT unzGetOffset64(unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzGetOffset64	support/zip_support/unzip.h	/^ZPOS64_T CC_DLL unzGetOffset64 (unzFile file);$/;"	p	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzGoToFilePos	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToFilePos($/;"	f	namespace:cocos2d	signature:( unzFile file, unz_file_pos* file_pos)
cocos2d::unzGoToFilePos	support/zip_support/unzip.h	/^int CC_DLL unzGoToFilePos($/;"	p	namespace:cocos2d	signature:( unzFile file, unz_file_pos* file_pos)
cocos2d::unzGoToFilePos64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToFilePos64(unzFile file, const unz64_file_pos* file_pos)$/;"	f	namespace:cocos2d	signature:(unzFile file, const unz64_file_pos* file_pos)
cocos2d::unzGoToFilePos64	support/zip_support/unzip.h	/^int CC_DLL unzGoToFilePos64($/;"	p	namespace:cocos2d	signature:( unzFile file, const unz64_file_pos* file_pos)
cocos2d::unzGoToFirstFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToFirstFile (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzGoToFirstFile	support/zip_support/unzip.h	/^int CC_DLL unzGoToFirstFile OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzGoToFirstFile64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToFirstFile64 (unzFile file,$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_file_info64 *pfile_info, char *szFileName, uLong fileNameBufferSize)
cocos2d::unzGoToFirstFile64	support/zip_support/unzip.h	/^int CC_DLL unzGoToFirstFile64 OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, unz_file_info64 *pfile_info, char *szFileName, uLong fileNameBufferSize)
cocos2d::unzGoToNextFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToNextFile (unzFile  file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzGoToNextFile	support/zip_support/unzip.h	/^int CC_DLL unzGoToNextFile OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzGoToNextFile64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToNextFile64 (unzFile file,$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_file_info64 *pfile_info, char *szFileName, uLong fileNameBufferSize)
cocos2d::unzGoToNextFile64	support/zip_support/unzip.h	/^int CC_DLL unzGoToNextFile64 OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, unz_file_info64 *pfile_info, char *szFileName, uLong fileNameBufferSize)
cocos2d::unzLocateFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzLocateFile (unzFile file, const char *szFileName, int iCaseSensitivity)$/;"	f	namespace:cocos2d	signature:(unzFile file, const char *szFileName, int iCaseSensitivity)
cocos2d::unzLocateFile	support/zip_support/unzip.h	/^int CC_DLL unzLocateFile OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, const char *szFileName, int iCaseSensitivity)
cocos2d::unzOpen	support/zip_support/unzip.cpp	/^unzFile ZEXPORT unzOpen (const char *path)$/;"	f	namespace:cocos2d	signature:(const char *path)
cocos2d::unzOpen	support/zip_support/unzip.h	/^unzFile CC_DLL unzOpen OF((const char *path));$/;"	p	namespace:cocos2d	signature:(const char *path)
cocos2d::unzOpen2	support/zip_support/unzip.cpp	/^unzFile ZEXPORT unzOpen2 (const char *path,$/;"	f	namespace:cocos2d	signature:(const char *path, zlib_filefunc_def* pzlib_filefunc32_def)
cocos2d::unzOpen2	support/zip_support/unzip.h	/^unzFile CC_DLL unzOpen2 OF((const char *path,$/;"	p	namespace:cocos2d	signature:(const char *path, zlib_filefunc_def* pzlib_filefunc_def)
cocos2d::unzOpen2_64	support/zip_support/unzip.cpp	/^unzFile ZEXPORT unzOpen2_64 (const void *path,$/;"	f	namespace:cocos2d	signature:(const void *path, zlib_filefunc64_def* pzlib_filefunc_def)
cocos2d::unzOpen2_64	support/zip_support/unzip.h	/^unzFile CC_DLL unzOpen2_64 OF((const void *path,$/;"	p	namespace:cocos2d	signature:(const void *path, zlib_filefunc64_def* pzlib_filefunc_def)
cocos2d::unzOpen64	support/zip_support/unzip.cpp	/^unzFile ZEXPORT unzOpen64 (const void *path)$/;"	f	namespace:cocos2d	signature:(const void *path)
cocos2d::unzOpen64	support/zip_support/unzip.h	/^unzFile CC_DLL unzOpen64 OF((const void *path));$/;"	p	namespace:cocos2d	signature:(const void *path)
cocos2d::unzOpenCurrentFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzOpenCurrentFile (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzOpenCurrentFile	support/zip_support/unzip.h	/^int CC_DLL unzOpenCurrentFile OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzOpenCurrentFile2	support/zip_support/unzip.cpp	/^int ZEXPORT unzOpenCurrentFile2 (unzFile file, int* method, int* level, int raw)$/;"	f	namespace:cocos2d	signature:(unzFile file, int* method, int* level, int raw)
cocos2d::unzOpenCurrentFile2	support/zip_support/unzip.h	/^int CC_DLL unzOpenCurrentFile2 OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, int* method, int* level, int raw)
cocos2d::unzOpenCurrentFile3	support/zip_support/unzip.cpp	/^int ZEXPORT unzOpenCurrentFile3 (unzFile file, int* method,$/;"	f	namespace:cocos2d	signature:(unzFile file, int* method, int* level, int raw, const char* password)
cocos2d::unzOpenCurrentFile3	support/zip_support/unzip.h	/^int CC_DLL unzOpenCurrentFile3 OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, int* method, int* level, int raw, const char* password)
cocos2d::unzOpenCurrentFilePassword	support/zip_support/unzip.cpp	/^int ZEXPORT unzOpenCurrentFilePassword (unzFile file, const char*  password)$/;"	f	namespace:cocos2d	signature:(unzFile file, const char* password)
cocos2d::unzOpenCurrentFilePassword	support/zip_support/unzip.h	/^int CC_DLL unzOpenCurrentFilePassword OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, const char* password)
cocos2d::unzOpenInternal	support/zip_support/unzip.cpp	/^local unzFile unzOpenInternal (const void *path,$/;"	f	namespace:cocos2d	signature:(const void *path, zlib_filefunc64_32_def* pzlib_filefunc64_32_def, int is64bitOpenFunction)
cocos2d::unzReadCurrentFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzReadCurrentFile  (unzFile file, voidp buf, unsigned len)$/;"	f	namespace:cocos2d	signature:(unzFile file, voidp buf, unsigned len)
cocos2d::unzReadCurrentFile	support/zip_support/unzip.h	/^int CC_DLL unzReadCurrentFile OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, voidp buf, unsigned len)
cocos2d::unzSetOffset	support/zip_support/unzip.cpp	/^int ZEXPORT unzSetOffset (unzFile file, uLong pos)$/;"	f	namespace:cocos2d	signature:(unzFile file, uLong pos)
cocos2d::unzSetOffset	support/zip_support/unzip.h	/^int CC_DLL unzSetOffset (unzFile file, uLong pos);$/;"	p	namespace:cocos2d	signature:(unzFile file, uLong pos)
cocos2d::unzSetOffset64	support/zip_support/unzip.cpp	/^int ZEXPORT unzSetOffset64(unzFile file, ZPOS64_T pos)$/;"	f	namespace:cocos2d	signature:(unzFile file, ZPOS64_T pos)
cocos2d::unzSetOffset64	support/zip_support/unzip.h	/^int CC_DLL unzSetOffset64 (unzFile file, ZPOS64_T pos);$/;"	p	namespace:cocos2d	signature:(unzFile file, ZPOS64_T pos)
cocos2d::unzStringFileNameCompare	support/zip_support/unzip.cpp	/^int ZEXPORT unzStringFileNameCompare (const char*  fileName1,$/;"	f	namespace:cocos2d	signature:(const char* fileName1, const char* fileName2, int iCaseSensitivity)
cocos2d::unzStringFileNameCompare	support/zip_support/unzip.h	/^int CC_DLL unzStringFileNameCompare OF ((const char* fileName1,$/;"	p	namespace:cocos2d	signature:(const char* fileName1, const char* fileName2, int iCaseSensitivity)
cocos2d::unz_copyright	support/zip_support/unzip.cpp	/^const char unz_copyright[] =$/;"	m	namespace:cocos2d	file:
cocos2d::unz_file_info	support/zip_support/unzip.h	/^} unz_file_info;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_file_info_s
cocos2d::unz_file_info64	support/zip_support/unzip.h	/^} unz_file_info64;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_file_info64_s
cocos2d::unz_file_info64_internal	support/zip_support/unzip.cpp	/^} unz_file_info64_internal;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_file_info64_internal_s	file:
cocos2d::unz_file_info64_internal_s	support/zip_support/unzip.cpp	/^typedef struct unz_file_info64_internal_s$/;"	s	namespace:cocos2d	file:
cocos2d::unz_file_info64_internal_s::offset_curfile	support/zip_support/unzip.cpp	/^    ZPOS64_T offset_curfile;\/* relative offset of local header 8 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_internal_s	file:	access:public
cocos2d::unz_file_info64_s	support/zip_support/unzip.h	/^typedef struct unz_file_info64_s$/;"	s	namespace:cocos2d
cocos2d::unz_file_info64_s::compressed_size	support/zip_support/unzip.h	/^    ZPOS64_T compressed_size;   \/* compressed size                 8 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::compression_method	support/zip_support/unzip.h	/^    uLong compression_method;   \/* compression method              2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::crc	support/zip_support/unzip.h	/^    uLong crc;                  \/* crc-32                          4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::disk_num_start	support/zip_support/unzip.h	/^    uLong disk_num_start;       \/* disk number start               2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::dosDate	support/zip_support/unzip.h	/^    uLong dosDate;              \/* last mod file date in Dos fmt   4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::external_fa	support/zip_support/unzip.h	/^    uLong external_fa;          \/* external file attributes        4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::flag	support/zip_support/unzip.h	/^    uLong flag;                 \/* general purpose bit flag        2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::internal_fa	support/zip_support/unzip.h	/^    uLong internal_fa;          \/* internal file attributes        2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::size_file_comment	support/zip_support/unzip.h	/^    uLong size_file_comment;    \/* file comment length             2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::size_file_extra	support/zip_support/unzip.h	/^    uLong size_file_extra;      \/* extra field length              2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::size_filename	support/zip_support/unzip.h	/^    uLong size_filename;        \/* filename length                 2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::tmu_date	support/zip_support/unzip.h	/^    tm_unz tmu_date;$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::uncompressed_size	support/zip_support/unzip.h	/^    ZPOS64_T uncompressed_size; \/* uncompressed size               8 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::version	support/zip_support/unzip.h	/^    uLong version;              \/* version made by                 2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info64_s::version_needed	support/zip_support/unzip.h	/^    uLong version_needed;       \/* version needed to extract       2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
cocos2d::unz_file_info_s	support/zip_support/unzip.h	/^typedef struct unz_file_info_s$/;"	s	namespace:cocos2d
cocos2d::unz_file_info_s::compressed_size	support/zip_support/unzip.h	/^    uLong compressed_size;      \/* compressed size                 4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::compression_method	support/zip_support/unzip.h	/^    uLong compression_method;   \/* compression method              2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::crc	support/zip_support/unzip.h	/^    uLong crc;                  \/* crc-32                          4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::disk_num_start	support/zip_support/unzip.h	/^    uLong disk_num_start;       \/* disk number start               2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::dosDate	support/zip_support/unzip.h	/^    uLong dosDate;              \/* last mod file date in Dos fmt   4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::external_fa	support/zip_support/unzip.h	/^    uLong external_fa;          \/* external file attributes        4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::flag	support/zip_support/unzip.h	/^    uLong flag;                 \/* general purpose bit flag        2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::internal_fa	support/zip_support/unzip.h	/^    uLong internal_fa;          \/* internal file attributes        2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::size_file_comment	support/zip_support/unzip.h	/^    uLong size_file_comment;    \/* file comment length             2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::size_file_extra	support/zip_support/unzip.h	/^    uLong size_file_extra;      \/* extra field length              2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::size_filename	support/zip_support/unzip.h	/^    uLong size_filename;        \/* filename length                 2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::tmu_date	support/zip_support/unzip.h	/^    tm_unz tmu_date;$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::uncompressed_size	support/zip_support/unzip.h	/^    uLong uncompressed_size;    \/* uncompressed size               4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::version	support/zip_support/unzip.h	/^    uLong version;              \/* version made by                 2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_info_s::version_needed	support/zip_support/unzip.h	/^    uLong version_needed;       \/* version needed to extract       2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
cocos2d::unz_file_pos	support/zip_support/unzip.h	/^} unz_file_pos;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_file_pos_s
cocos2d::unz_file_pos_s	support/zip_support/unzip.h	/^typedef struct unz_file_pos_s$/;"	s	namespace:cocos2d
cocos2d::unz_file_pos_s::num_of_file	support/zip_support/unzip.h	/^    uLong num_of_file;            \/* # of file *\/$/;"	m	struct:cocos2d::unz_file_pos_s	access:public
cocos2d::unz_file_pos_s::pos_in_zip_directory	support/zip_support/unzip.h	/^    uLong pos_in_zip_directory;   \/* offset in zip file directory *\/$/;"	m	struct:cocos2d::unz_file_pos_s	access:public
cocos2d::unz_global_info	support/zip_support/unzip.h	/^} unz_global_info;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_global_info_s
cocos2d::unz_global_info64	support/zip_support/unzip.h	/^} unz_global_info64;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_global_info64_s
cocos2d::unz_global_info64_s	support/zip_support/unzip.h	/^typedef struct unz_global_info64_s$/;"	s	namespace:cocos2d
cocos2d::unz_global_info64_s::number_entry	support/zip_support/unzip.h	/^    ZPOS64_T number_entry;         \/* total number of entries in$/;"	m	struct:cocos2d::unz_global_info64_s	access:public
cocos2d::unz_global_info64_s::size_comment	support/zip_support/unzip.h	/^    uLong size_comment;         \/* size of the global comment of the zipfile *\/$/;"	m	struct:cocos2d::unz_global_info64_s	access:public
cocos2d::unz_global_info_s	support/zip_support/unzip.h	/^typedef struct unz_global_info_s$/;"	s	namespace:cocos2d
cocos2d::unz_global_info_s::number_entry	support/zip_support/unzip.h	/^    uLong number_entry;         \/* total number of entries in$/;"	m	struct:cocos2d::unz_global_info_s	access:public
cocos2d::unz_global_info_s::size_comment	support/zip_support/unzip.h	/^    uLong size_comment;         \/* size of the global comment of the zipfile *\/$/;"	m	struct:cocos2d::unz_global_info_s	access:public
cocos2d::unzeof	support/zip_support/unzip.cpp	/^int ZEXPORT unzeof (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
cocos2d::unzeof	support/zip_support/unzip.h	/^int CC_DLL unzeof OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
cocos2d::unztell	support/zip_support/unzip.cpp	/^z_off_t ZEXPORT unztell (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
cocos2d::unztell	support/zip_support/unzip.h	/^z_off_t CC_DLL unztell OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
cocos2d::unztell64	support/zip_support/unzip.cpp	/^ZPOS64_T ZEXPORT unztell64 (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
cocos2d::unztell64	support/zip_support/unzip.h	/^ZPOS64_T CC_DLL unztell64 OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
cocos2d::zlib_filefunc64_32_def	support/zip_support/ioapi.h	/^} zlib_filefunc64_32_def;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::zlib_filefunc64_32_def_s
cocos2d::zlib_filefunc64_32_def_s	support/zip_support/ioapi.h	/^typedef struct zlib_filefunc64_32_def_s$/;"	s	namespace:cocos2d
cocos2d::zlib_filefunc64_32_def_s::zfile_func64	support/zip_support/ioapi.h	/^    zlib_filefunc64_def zfile_func64;$/;"	m	struct:cocos2d::zlib_filefunc64_32_def_s	access:public
cocos2d::zlib_filefunc64_32_def_s::zopen32_file	support/zip_support/ioapi.h	/^    open_file_func      zopen32_file;$/;"	m	struct:cocos2d::zlib_filefunc64_32_def_s	access:public
cocos2d::zlib_filefunc64_32_def_s::zseek32_file	support/zip_support/ioapi.h	/^    seek_file_func      zseek32_file;$/;"	m	struct:cocos2d::zlib_filefunc64_32_def_s	access:public
cocos2d::zlib_filefunc64_32_def_s::ztell32_file	support/zip_support/ioapi.h	/^    tell_file_func      ztell32_file;$/;"	m	struct:cocos2d::zlib_filefunc64_32_def_s	access:public
cocos2d::zlib_filefunc64_def	support/zip_support/ioapi.h	/^} zlib_filefunc64_def;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::zlib_filefunc64_def_s
cocos2d::zlib_filefunc64_def_s	support/zip_support/ioapi.h	/^typedef struct zlib_filefunc64_def_s$/;"	s	namespace:cocos2d
cocos2d::zlib_filefunc64_def_s::opaque	support/zip_support/ioapi.h	/^    voidpf              opaque;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
cocos2d::zlib_filefunc64_def_s::zclose_file	support/zip_support/ioapi.h	/^    close_file_func     zclose_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
cocos2d::zlib_filefunc64_def_s::zerror_file	support/zip_support/ioapi.h	/^    testerror_file_func zerror_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
cocos2d::zlib_filefunc64_def_s::zopen64_file	support/zip_support/ioapi.h	/^    open64_file_func    zopen64_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
cocos2d::zlib_filefunc64_def_s::zread_file	support/zip_support/ioapi.h	/^    read_file_func      zread_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
cocos2d::zlib_filefunc64_def_s::zseek64_file	support/zip_support/ioapi.h	/^    seek64_file_func    zseek64_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
cocos2d::zlib_filefunc64_def_s::ztell64_file	support/zip_support/ioapi.h	/^    tell64_file_func    ztell64_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
cocos2d::zlib_filefunc64_def_s::zwrite_file	support/zip_support/ioapi.h	/^    write_file_func     zwrite_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
cocos2d::zlib_filefunc_def	support/zip_support/ioapi.h	/^} zlib_filefunc_def;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::zlib_filefunc_def_s
cocos2d::zlib_filefunc_def_s	support/zip_support/ioapi.h	/^typedef struct zlib_filefunc_def_s$/;"	s	namespace:cocos2d
cocos2d::zlib_filefunc_def_s::opaque	support/zip_support/ioapi.h	/^    voidpf              opaque;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
cocos2d::zlib_filefunc_def_s::zclose_file	support/zip_support/ioapi.h	/^    close_file_func     zclose_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
cocos2d::zlib_filefunc_def_s::zerror_file	support/zip_support/ioapi.h	/^    testerror_file_func zerror_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
cocos2d::zlib_filefunc_def_s::zopen_file	support/zip_support/ioapi.h	/^    open_file_func      zopen_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
cocos2d::zlib_filefunc_def_s::zread_file	support/zip_support/ioapi.h	/^    read_file_func      zread_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
cocos2d::zlib_filefunc_def_s::zseek_file	support/zip_support/ioapi.h	/^    seek_file_func      zseek_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
cocos2d::zlib_filefunc_def_s::ztell_file	support/zip_support/ioapi.h	/^    tell_file_func      ztell_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
cocos2d::zlib_filefunc_def_s::zwrite_file	support/zip_support/ioapi.h	/^    write_file_func     zwrite_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
cocos2dVersion	CCDirector.cpp	/^extern const char* cocos2dVersion(void);$/;"	p	file:	signature:(void)
cocos2dVersion	cocos2d.cpp	/^const char* cocos2dVersion()$/;"	f	signature:()
cocos2dVersion	include/cocos2d.h	/^CC_DLL const char* cocos2dVersion();$/;"	p	signature:()
cocos2dx_ccTypeInfo_h	include/ccTypeInfo.h	26;"	d
color	include/ccTypes.h	/^    ccColor4B    color;        \/\/ 4 bytes$/;"	m	struct:_ccPointSprite	access:public
color	particle_nodes/CCParticleSystem.h	/^    ccColor4F    color;$/;"	m	struct:sCCParticle	access:public
colorSpace	textures/CCTexturePVR.cpp	/^	uint32_t colorSpace;$/;"	m	struct:__anon56	file:	access:public
colors	include/ccTypes.h	/^    ccColor4B        colors;                \/\/ 4 bytes$/;"	m	struct:_ccV3F_C4B_T2F	access:public
colors	include/ccTypes.h	/^    ccColor4B        colors;$/;"	m	struct:_ccV2F_C4B_T2F	access:public
colors	include/ccTypes.h	/^    ccColor4F        colors;$/;"	m	struct:_ccV2F_C4F_T2F	access:public
compare	cocoa/CCString.cpp	/^int CCString::compare(const char * pStr) const$/;"	f	class:CCString	signature:(const char * pStr) const
compare	cocoa/CCString.h	/^    int compare(const char *) const;$/;"	p	class:CCString	access:public	signature:(const char *) const
compareInts	tilemap_parallax_nodes/CCTMXLayer.cpp	/^static inline int compareInts(const void * a, const void * b)$/;"	f	file:	signature:(const void * a, const void * b)
compare_selector	cocoa/CCObject.h	94;"	d
compileShader	shaders/CCGLProgram.cpp	/^bool CCGLProgram::compileShader(GLuint * shader, GLenum type, const GLchar* source)$/;"	f	class:CCGLProgram	signature:(GLuint * shader, GLenum type, const GLchar* source)
compileShader	shaders/CCGLProgram.h	/^    bool compileShader(GLuint * shader, GLenum type, const GLchar* source);$/;"	p	class:CCGLProgram	access:private	signature:(GLuint * shader, GLenum type, const GLchar* source)
compressed	textures/CCTexturePVR.h	/^	bool compressed;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
compressed_size	support/zip_support/unzip.h	/^    ZPOS64_T compressed_size;   \/* compressed size                 8 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
compressed_size	support/zip_support/unzip.h	/^    uLong compressed_size;      \/* compressed size                 4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
compression_method	support/zip_support/unzip.cpp	/^    uLong compression_method;   \/* compression method (0==store) *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
compression_method	support/zip_support/unzip.h	/^    uLong compression_method;   \/* compression method              2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
compression_method	support/zip_support/unzip.h	/^    uLong compression_method;   \/* compression method              2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
compression_type	support/zip_support/ZipUtils.h	/^        unsigned short            compression_type;    \/\/ should 0$/;"	m	struct:cocos2d::CCZHeader	access:public
computeImageFormatType	textures/CCTextureCache.cpp	/^static CCImage::EImageFormat computeImageFormatType(string& filename)$/;"	f	file:	signature:(string& filename)
containsObject	cocoa/CCArray.cpp	/^bool CCArray::containsObject(CCObject* object)$/;"	f	class:CCArray	signature:(CCObject* object)
containsObject	cocoa/CCArray.h	/^    bool containsObject(CCObject* object);$/;"	p	class:CCArray	access:public	signature:(CCObject* object)
containsObject	cocoa/CCSet.cpp	/^bool CCSet::containsObject(CCObject *pObject)$/;"	f	class:CCSet	signature:(CCObject *pObject)
containsObject	cocoa/CCSet.h	/^    bool containsObject(CCObject *pObject);$/;"	p	class:CCSet	access:public	signature:(CCObject *pObject)
containsPoint	cocoa/CCGeometry.cpp	/^bool CCRect::containsPoint(const CCPoint& point) const$/;"	f	class:CCRect	signature:(const CCPoint& point) const
containsPoint	cocoa/CCGeometry.h	/^    bool containsPoint(const CCPoint& point) const;$/;"	p	class:CCRect	access:public	signature:(const CCPoint& point) const
controlPoint_1	actions/CCActionInterval.h	/^    CCPoint controlPoint_1;$/;"	m	struct:_ccBezierConfig	access:public
controlPoint_2	actions/CCActionInterval.h	/^    CCPoint controlPoint_2;$/;"	m	struct:_ccBezierConfig	access:public
convertToGL	CCDirector.cpp	/^CCPoint CCDirector::convertToGL(const CCPoint& uiPoint)$/;"	f	class:CCDirector	signature:(const CCPoint& uiPoint)
convertToGL	CCDirector.h	/^    CCPoint convertToGL(const CCPoint& obPoint);$/;"	p	class:CCDirector	access:public	signature:(const CCPoint& obPoint)
convertToNodeSpace	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToNodeSpace(const CCPoint& worldPoint)$/;"	f	class:CCNode	signature:(const CCPoint& worldPoint)
convertToNodeSpace	base_nodes/CCNode.h	/^    CCPoint convertToNodeSpace(const CCPoint& worldPoint);$/;"	p	class:CCNode	access:public	signature:(const CCPoint& worldPoint)
convertToNodeSpaceAR	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToNodeSpaceAR(const CCPoint& worldPoint)$/;"	f	class:CCNode	signature:(const CCPoint& worldPoint)
convertToNodeSpaceAR	base_nodes/CCNode.h	/^    CCPoint convertToNodeSpaceAR(const CCPoint& worldPoint);$/;"	p	class:CCNode	access:public	signature:(const CCPoint& worldPoint)
convertToUI	CCDirector.cpp	/^CCPoint CCDirector::convertToUI(const CCPoint& glPoint)$/;"	f	class:CCDirector	signature:(const CCPoint& glPoint)
convertToUI	CCDirector.h	/^    CCPoint convertToUI(const CCPoint& obPoint);$/;"	p	class:CCDirector	access:public	signature:(const CCPoint& obPoint)
convertToWindowSpace	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToWindowSpace(const CCPoint& nodePoint)$/;"	f	class:CCNode	signature:(const CCPoint& nodePoint)
convertToWindowSpace	base_nodes/CCNode.h	/^    CCPoint convertToWindowSpace(const CCPoint& nodePoint);$/;"	p	class:CCNode	access:private	signature:(const CCPoint& nodePoint)
convertToWorldSpace	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToWorldSpace(const CCPoint& nodePoint)$/;"	f	class:CCNode	signature:(const CCPoint& nodePoint)
convertToWorldSpace	base_nodes/CCNode.h	/^    CCPoint convertToWorldSpace(const CCPoint& nodePoint);$/;"	p	class:CCNode	access:public	signature:(const CCPoint& nodePoint)
convertToWorldSpaceAR	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToWorldSpaceAR(const CCPoint& nodePoint)$/;"	f	class:CCNode	signature:(const CCPoint& nodePoint)
convertToWorldSpaceAR	base_nodes/CCNode.h	/^    CCPoint convertToWorldSpaceAR(const CCPoint& nodePoint);$/;"	p	class:CCNode	access:public	signature:(const CCPoint& nodePoint)
convertTouchToNodeSpace	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertTouchToNodeSpace(CCTouch *touch)$/;"	f	class:CCNode	signature:(CCTouch *touch)
convertTouchToNodeSpace	base_nodes/CCNode.h	/^    CCPoint convertTouchToNodeSpace(CCTouch * touch);$/;"	p	class:CCNode	access:public	signature:(CCTouch * touch)
convertTouchToNodeSpaceAR	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertTouchToNodeSpaceAR(CCTouch *touch)$/;"	f	class:CCNode	signature:(CCTouch *touch)
convertTouchToNodeSpaceAR	base_nodes/CCNode.h	/^    CCPoint convertTouchToNodeSpaceAR(CCTouch * touch);$/;"	p	class:CCNode	access:public	signature:(CCTouch * touch)
copy	cocoa/CCObject.cpp	/^CCObject* CCObject::copy()$/;"	f	class:CCObject	signature:()
copy	cocoa/CCObject.h	/^    CCObject* copy(void);$/;"	p	class:CCObject	access:public	signature:(void)
copy	cocoa/CCSet.cpp	/^CCSet* CCSet::copy(void)$/;"	f	class:CCSet	signature:(void)
copy	cocoa/CCSet.h	/^    CCSet* copy();$/;"	p	class:CCSet	access:public	signature:()
copyUTF16StringN	label_nodes/CCLabelBMFont.cpp	/^static unsigned short* copyUTF16StringN(unsigned short* str)$/;"	f	file:	signature:(unsigned short* str)
copyWithZone	actions/CCAction.cpp	/^CCObject *CCFollow::copyWithZone(CCZone *pZone)$/;"	f	class:CCFollow	signature:(CCZone *pZone)
copyWithZone	actions/CCAction.cpp	/^CCObject *CCSpeed::copyWithZone(CCZone *pZone)$/;"	f	class:CCSpeed	signature:(CCZone *pZone)
copyWithZone	actions/CCAction.cpp	/^CCObject* CCAction::copyWithZone(CCZone *pZone)$/;"	f	class:CCAction	signature:(CCZone *pZone)
copyWithZone	actions/CCAction.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCAction	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCAction.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCFollow	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCAction.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCSpeed	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionCamera.cpp	/^CCObject * CCOrbitCamera::copyWithZone(CCZone *pZone)$/;"	f	class:CCOrbitCamera	signature:(CCZone *pZone)
copyWithZone	actions/CCActionCamera.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCOrbitCamera	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo* CCCardinalSplineTo::copyWithZone(cocos2d::CCZone *pZone)$/;"	f	class:CCCardinalSplineTo	signature:(cocos2d::CCZone *pZone)
copyWithZone	actions/CCActionCatmullRom.cpp	/^CCObject* CCPointArray::copyWithZone(cocos2d::CCZone *zone)$/;"	f	class:CCPointArray	signature:(cocos2d::CCZone *zone)
copyWithZone	actions/CCActionCatmullRom.h	/^    virtual CCCardinalSplineTo* copyWithZone(CCZone* pZone);$/;"	p	class:CCCardinalSplineTo	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionCatmullRom.h	/^    virtual CCObject* copyWithZone(CCZone *zone);$/;"	p	class:CCPointArray	access:public	signature:(CCZone *zone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject *CCEaseElasticOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseElasticOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCActionEase::copyWithZone(CCZone *pZone)$/;"	f	class:CCActionEase	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBackIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBackIn	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBackInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBackInOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBackOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBackOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBounce::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBounce	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBounceIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBounceIn	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBounceInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBounceInOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBounceOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBounceOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseElastic::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseElastic	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseElasticIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseElasticIn	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseElasticInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseElasticInOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseExponentialIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseExponentialIn	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseExponentialInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseExponentialInOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseExponentialOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseExponentialOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseIn	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseInOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseRateAction::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseRateAction	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseSineIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseSineIn	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseSineInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseSineInOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseSineOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseSineOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCActionEase	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBackIn	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBackInOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBackOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBounce	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBounceIn	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBounceInOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseBounceOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseElastic	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseElasticIn	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseElasticInOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseElasticOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseExponentialIn	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseExponentialInOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseExponentialOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseIn	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseInOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseRateAction	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseSineIn	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseSineInOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionEase.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCEaseSineOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionGrid.cpp	/^CCObject* CCGridAction::copyWithZone(CCZone *pZone)$/;"	f	class:CCGridAction	signature:(CCZone *pZone)
copyWithZone	actions/CCActionGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCGridAction	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCFlipX3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCFlipX3D	signature:(CCZone *pZone)
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCFlipY3D::copyWithZone(CCZone* pZone)$/;"	f	class:CCFlipY3D	signature:(CCZone* pZone)
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCLens3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCLens3D	signature:(CCZone *pZone)
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCLiquid::copyWithZone(CCZone *pZone)$/;"	f	class:CCLiquid	signature:(CCZone *pZone)
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCRipple3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCRipple3D	signature:(CCZone *pZone)
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCShaky3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCShaky3D	signature:(CCZone *pZone)
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCTwirl::copyWithZone(CCZone *pZone)$/;"	f	class:CCTwirl	signature:(CCZone *pZone)
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCWaves3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCWaves3D	signature:(CCZone *pZone)
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCWaves::copyWithZone(CCZone *pZone)$/;"	f	class:CCWaves	signature:(CCZone *pZone)
copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCFlipX3D	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCFlipY3D	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCLens3D	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCLiquid	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCRipple3D	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCShaky3D	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCTwirl	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCWaves	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionGrid3D.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCWaves3D	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCActionInstant::copyWithZone(CCZone *pZone) {$/;"	f	class:CCActionInstant	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCCallFunc::copyWithZone(CCZone *pZone) {$/;"	f	class:CCCallFunc	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCCallFuncN::copyWithZone(CCZone* zone) {$/;"	f	class:CCCallFuncN	signature:(CCZone* zone)
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCCallFuncND::copyWithZone(CCZone* zone) {$/;"	f	class:CCCallFuncND	signature:(CCZone* zone)
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCCallFuncO::copyWithZone(CCZone* zone) {$/;"	f	class:CCCallFuncO	signature:(CCZone* zone)
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCFlipX::copyWithZone(CCZone *pZone) {$/;"	f	class:CCFlipX	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCPlace::copyWithZone(CCZone *pZone) {$/;"	f	class:CCPlace	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.cpp	/^CCObject* CCFlipY::copyWithZone(CCZone *pZone) {$/;"	f	class:CCFlipY	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.cpp	/^CCObject* CCHide::copyWithZone(CCZone *pZone) {$/;"	f	class:CCHide	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.cpp	/^CCObject* CCShow::copyWithZone(CCZone *pZone) {$/;"	f	class:CCShow	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.cpp	/^CCObject* CCToggleVisibility::copyWithZone(CCZone *pZone)$/;"	f	class:CCToggleVisibility	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.h	/^    CCObject * copyWithZone(CCZone *pZone);$/;"	p	class:CCCallFunc	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCActionInstant	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCCallFuncN	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCCallFuncND	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCCallFuncO	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCFlipX	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCFlipY	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCHide	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCPlace	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCShow	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInstant.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCToggleVisibility	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:ExtraAction	file:	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCActionInterval::copyWithZone(CCZone *pZone)$/;"	f	class:CCActionInterval	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCAnimate::copyWithZone(CCZone *pZone)$/;"	f	class:CCAnimate	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCBezierBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCBezierBy	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCBezierTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCBezierTo	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCBlink::copyWithZone(CCZone *pZone)$/;"	f	class:CCBlink	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCDelayTime::copyWithZone(CCZone *pZone)$/;"	f	class:CCDelayTime	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCFadeIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCFadeIn	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCFadeOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCFadeOut	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCFadeTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCFadeTo	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCJumpBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCJumpBy	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCJumpTo::copyWithZone(CCZone* pZone)$/;"	f	class:CCJumpTo	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCMoveBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCMoveBy	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCMoveTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCMoveTo	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCRepeat::copyWithZone(CCZone *pZone)$/;"	f	class:CCRepeat	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCRepeatForever::copyWithZone(CCZone *pZone)$/;"	f	class:CCRepeatForever	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCReverseTime::copyWithZone(CCZone *pZone)$/;"	f	class:CCReverseTime	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCRotateBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCRotateBy	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCRotateTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCRotateTo	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCScaleBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCScaleBy	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCScaleTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCScaleTo	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCSequence::copyWithZone(CCZone *pZone)$/;"	f	class:CCSequence	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCSkewTo::copyWithZone(CCZone* pZone)$/;"	f	class:CCSkewTo	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCSpawn::copyWithZone(CCZone *pZone)$/;"	f	class:CCSpawn	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCTargetedAction::copyWithZone(CCZone* pZone)$/;"	f	class:CCTargetedAction	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCTintBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCTintBy	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCTintTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCTintTo	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* ExtraAction::copyWithZone(CCZone* pZone)$/;"	f	class:ExtraAction	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCRepeatForever	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCActionInterval	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCAnimate	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCBezierBy	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCBezierTo	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCBlink	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCDelayTime	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCFadeIn	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCFadeOut	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCFadeTo	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCJumpBy	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCJumpTo	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCMoveBy	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCMoveTo	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCRepeat	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCReverseTime	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCRotateBy	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCRotateTo	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCScaleBy	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCScaleTo	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCSequence	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCSkewTo	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCSpawn	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCTargetedAction	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCTintBy	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionInterval.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCTintTo	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionProgressTimer.cpp	/^CCObject* CCProgressFromTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCProgressFromTo	signature:(CCZone *pZone)
copyWithZone	actions/CCActionProgressTimer.cpp	/^CCObject* CCProgressTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCProgressTo	signature:(CCZone *pZone)
copyWithZone	actions/CCActionProgressTimer.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCProgressFromTo	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionProgressTimer.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCProgressTo	access:public	signature:(CCZone *pZone)
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCJumpTiles3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCJumpTiles3D	signature:(CCZone *pZone)
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCShakyTiles3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCShakyTiles3D	signature:(CCZone *pZone)
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCShatteredTiles3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCShatteredTiles3D	signature:(CCZone *pZone)
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCShuffleTiles::copyWithZone(CCZone *pZone)$/;"	f	class:CCShuffleTiles	signature:(CCZone *pZone)
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCSplitCols::copyWithZone(CCZone *pZone)$/;"	f	class:CCSplitCols	signature:(CCZone *pZone)
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCSplitRows::copyWithZone(CCZone *pZone)$/;"	f	class:CCSplitRows	signature:(CCZone *pZone)
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCTurnOffTiles::copyWithZone(CCZone *pZone)$/;"	f	class:CCTurnOffTiles	signature:(CCZone *pZone)
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCWavesTiles3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCWavesTiles3D	signature:(CCZone *pZone)
copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCJumpTiles3D	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCShakyTiles3D	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCShatteredTiles3D	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCShuffleTiles	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCSplitCols	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCSplitRows	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCTurnOffTiles	access:public	signature:(CCZone* pZone)
copyWithZone	actions/CCActionTiledGrid.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCWavesTiles3D	access:public	signature:(CCZone* pZone)
copyWithZone	cocoa/CCArray.cpp	/^CCObject* CCArray::copyWithZone(CCZone* pZone)$/;"	f	class:CCArray	signature:(CCZone* pZone)
copyWithZone	cocoa/CCArray.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCArray	access:public	signature:(CCZone* pZone)
copyWithZone	cocoa/CCDictionary.cpp	/^CCObject* CCDictionary::copyWithZone(CCZone* pZone)$/;"	f	class:CCDictionary	signature:(CCZone* pZone)
copyWithZone	cocoa/CCDictionary.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCDictionary	access:public	signature:(CCZone* pZone)
copyWithZone	cocoa/CCObject.cpp	/^CCObject* CCCopying::copyWithZone(CCZone *pZone)$/;"	f	class:CCCopying	signature:(CCZone *pZone)
copyWithZone	cocoa/CCObject.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCCopying	access:public	signature:(CCZone* pZone)
copyWithZone	cocoa/CCString.cpp	/^CCObject* CCString::copyWithZone(CCZone* pZone)$/;"	f	class:CCString	signature:(CCZone* pZone)
copyWithZone	cocoa/CCString.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCString	access:public	signature:(CCZone* pZone)
copyWithZone	sprite_nodes/CCAnimation.cpp	/^CCObject* CCAnimation::copyWithZone(CCZone* pZone)$/;"	f	class:CCAnimation	signature:(CCZone* pZone)
copyWithZone	sprite_nodes/CCAnimation.cpp	/^CCObject* CCAnimationFrame::copyWithZone(CCZone* pZone)$/;"	f	class:CCAnimationFrame	signature:(CCZone* pZone)
copyWithZone	sprite_nodes/CCAnimation.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCAnimation	access:public	signature:(CCZone* pZone)
copyWithZone	sprite_nodes/CCAnimation.h	/^    virtual CCObject* copyWithZone(CCZone* pZone);$/;"	p	class:CCAnimationFrame	access:public	signature:(CCZone* pZone)
copyWithZone	sprite_nodes/CCSpriteFrame.cpp	/^CCObject* CCSpriteFrame::copyWithZone(CCZone *pZone)$/;"	f	class:CCSpriteFrame	signature:(CCZone *pZone)
copyWithZone	sprite_nodes/CCSpriteFrame.h	/^    virtual CCObject* copyWithZone(CCZone *pZone);$/;"	p	class:CCSpriteFrame	access:public	signature:(CCZone *pZone)
count	actions/CCActionCatmullRom.cpp	/^unsigned int CCPointArray::count()$/;"	f	class:CCPointArray	signature:()
count	actions/CCActionCatmullRom.h	/^    unsigned int count();$/;"	p	class:CCPointArray	access:public	signature:()
count	cocoa/CCArray.cpp	/^unsigned int CCArray::count()$/;"	f	class:CCArray	signature:()
count	cocoa/CCArray.h	/^    unsigned int count();$/;"	p	class:CCArray	access:public	signature:()
count	cocoa/CCDictionary.cpp	/^unsigned int CCDictionary::count()$/;"	f	class:CCDictionary	signature:()
count	cocoa/CCDictionary.h	/^    unsigned int count();$/;"	p	class:CCDictionary	access:public	signature:()
count	cocoa/CCSet.cpp	/^int CCSet::count(void)$/;"	f	class:CCSet	signature:(void)
count	cocoa/CCSet.h	/^    int count();$/;"	p	class:CCSet	access:public	signature:()
count	support/data_support/uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket	access:public
crc	support/zip_support/unzip.h	/^    uLong crc;                  \/* crc-32                          4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
crc	support/zip_support/unzip.h	/^    uLong crc;                  \/* crc-32                          4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
crc32	support/zip_support/unzip.cpp	/^    uLong crc32;                \/* crc32 of all data uncompressed *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
crc32_wait	support/zip_support/unzip.cpp	/^    uLong crc32_wait;           \/* crc32 we must obtain after decompress all *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
create	actions/CCAction.cpp	/^CCAction* CCAction::create()$/;"	f	class:CCAction	signature:()
create	actions/CCAction.cpp	/^CCFollow* CCFollow::create(CCNode *pFollowedNode, const CCRect& rect\/* = CCRectZero*\/)$/;"	f	class:CCFollow	signature:(CCNode *pFollowedNode, const CCRect& rect )
create	actions/CCAction.cpp	/^CCSpeed* CCSpeed::create(CCActionInterval* pAction, float fSpeed)$/;"	f	class:CCSpeed	signature:(CCActionInterval* pAction, float fSpeed)
create	actions/CCAction.h	/^    static CCAction* create();$/;"	p	class:CCAction	access:public	signature:()
create	actions/CCAction.h	/^    static CCFollow* create(CCNode *pFollowedNode, const CCRect& rect = CCRectZero);$/;"	p	class:CCFollow	access:public	signature:(CCNode *pFollowedNode, const CCRect& rect = CCRectZero)
create	actions/CCAction.h	/^    static CCSpeed* create(CCActionInterval* pAction, float fSpeed);$/;"	p	class:CCSpeed	access:public	signature:(CCActionInterval* pAction, float fSpeed)
create	actions/CCActionCamera.cpp	/^CCOrbitCamera * CCOrbitCamera::create(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)$/;"	f	class:CCOrbitCamera	signature:(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)
create	actions/CCActionCamera.h	/^    static CCOrbitCamera* create(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX);$/;"	p	class:CCOrbitCamera	access:public	signature:(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)
create	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineBy* CCCardinalSplineBy::create(float duration, cocos2d::CCPointArray *points, float tension)$/;"	f	class:CCCardinalSplineBy	signature:(float duration, cocos2d::CCPointArray *points, float tension)
create	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo* CCCardinalSplineTo::create(float duration, cocos2d::CCPointArray *points, float tension)$/;"	f	class:CCCardinalSplineTo	signature:(float duration, cocos2d::CCPointArray *points, float tension)
create	actions/CCActionCatmullRom.cpp	/^CCCatmullRomBy* CCCatmullRomBy::create(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomBy	signature:(float dt, cocos2d::CCPointArray *points)
create	actions/CCActionCatmullRom.cpp	/^CCCatmullRomTo* CCCatmullRomTo::create(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomTo	signature:(float dt, cocos2d::CCPointArray *points)
create	actions/CCActionCatmullRom.cpp	/^CCPointArray* CCPointArray::create(unsigned int capacity)$/;"	f	class:CCPointArray	signature:(unsigned int capacity)
create	actions/CCActionCatmullRom.h	/^    static CCCardinalSplineBy* create(float duration, CCPointArray* points, float tension);$/;"	p	class:CCCardinalSplineBy	access:public	signature:(float duration, CCPointArray* points, float tension)
create	actions/CCActionCatmullRom.h	/^    static CCCardinalSplineTo* create(float duration, CCPointArray* points, float tension);$/;"	p	class:CCCardinalSplineTo	access:public	signature:(float duration, CCPointArray* points, float tension)
create	actions/CCActionCatmullRom.h	/^    static CCCatmullRomBy* create(float dt, CCPointArray* points);$/;"	p	class:CCCatmullRomBy	access:public	signature:(float dt, CCPointArray* points)
create	actions/CCActionCatmullRom.h	/^    static CCCatmullRomTo* create(float dt, CCPointArray* points);$/;"	p	class:CCCatmullRomTo	access:public	signature:(float dt, CCPointArray* points)
create	actions/CCActionCatmullRom.h	/^    static CCPointArray* create(unsigned int capacity);$/;"	p	class:CCPointArray	access:public	signature:(unsigned int capacity)
create	actions/CCActionEase.cpp	/^CCActionEase* CCActionEase::create(CCActionInterval *pAction)$/;"	f	class:CCActionEase	signature:(CCActionInterval *pAction)
create	actions/CCActionEase.cpp	/^CCEaseBackIn* CCEaseBackIn::create(CCActionInterval *pAction)$/;"	f	class:CCEaseBackIn	signature:(CCActionInterval *pAction)
create	actions/CCActionEase.cpp	/^CCEaseBackInOut* CCEaseBackInOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBackInOut	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.cpp	/^CCEaseBackOut* CCEaseBackOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBackOut	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.cpp	/^CCEaseBounce* CCEaseBounce::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBounce	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.cpp	/^CCEaseBounceIn* CCEaseBounceIn::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBounceIn	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.cpp	/^CCEaseBounceInOut* CCEaseBounceInOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBounceInOut	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.cpp	/^CCEaseBounceOut* CCEaseBounceOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBounceOut	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.cpp	/^CCEaseElastic* CCEaseElastic::create(CCActionInterval *pAction)$/;"	f	class:CCEaseElastic	signature:(CCActionInterval *pAction)
create	actions/CCActionEase.cpp	/^CCEaseElastic* CCEaseElastic::create(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElastic	signature:(CCActionInterval *pAction, float fPeriod )
create	actions/CCActionEase.cpp	/^CCEaseElasticIn* CCEaseElasticIn::create(CCActionInterval *pAction)$/;"	f	class:CCEaseElasticIn	signature:(CCActionInterval *pAction)
create	actions/CCActionEase.cpp	/^CCEaseElasticIn* CCEaseElasticIn::create(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElasticIn	signature:(CCActionInterval *pAction, float fPeriod )
create	actions/CCActionEase.cpp	/^CCEaseElasticInOut* CCEaseElasticInOut::create(CCActionInterval *pAction)$/;"	f	class:CCEaseElasticInOut	signature:(CCActionInterval *pAction)
create	actions/CCActionEase.cpp	/^CCEaseElasticInOut* CCEaseElasticInOut::create(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElasticInOut	signature:(CCActionInterval *pAction, float fPeriod )
create	actions/CCActionEase.cpp	/^CCEaseElasticOut* CCEaseElasticOut::create(CCActionInterval *pAction)$/;"	f	class:CCEaseElasticOut	signature:(CCActionInterval *pAction)
create	actions/CCActionEase.cpp	/^CCEaseElasticOut* CCEaseElasticOut::create(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElasticOut	signature:(CCActionInterval *pAction, float fPeriod )
create	actions/CCActionEase.cpp	/^CCEaseExponentialIn* CCEaseExponentialIn::create(CCActionInterval* pAction)$/;"	f	class:CCEaseExponentialIn	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.cpp	/^CCEaseExponentialInOut* CCEaseExponentialInOut::create(CCActionInterval *pAction)$/;"	f	class:CCEaseExponentialInOut	signature:(CCActionInterval *pAction)
create	actions/CCActionEase.cpp	/^CCEaseExponentialOut* CCEaseExponentialOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseExponentialOut	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.cpp	/^CCEaseIn* CCEaseIn::create(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseIn	signature:(CCActionInterval *pAction, float fRate)
create	actions/CCActionEase.cpp	/^CCEaseInOut* CCEaseInOut::create(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseInOut	signature:(CCActionInterval *pAction, float fRate)
create	actions/CCActionEase.cpp	/^CCEaseOut* CCEaseOut::create(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseOut	signature:(CCActionInterval *pAction, float fRate)
create	actions/CCActionEase.cpp	/^CCEaseRateAction* CCEaseRateAction::create(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseRateAction	signature:(CCActionInterval *pAction, float fRate)
create	actions/CCActionEase.cpp	/^CCEaseSineIn* CCEaseSineIn::create(CCActionInterval* pAction)$/;"	f	class:CCEaseSineIn	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.cpp	/^CCEaseSineInOut* CCEaseSineInOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseSineInOut	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.cpp	/^CCEaseSineOut* CCEaseSineOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseSineOut	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCActionEase* create(CCActionInterval *pAction);$/;"	p	class:CCActionEase	access:public	signature:(CCActionInterval *pAction)
create	actions/CCActionEase.h	/^    static CCEaseBackIn* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBackIn	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCEaseBackInOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBackInOut	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCEaseBackOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBackOut	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCEaseBounce* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBounce	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCEaseBounceIn* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBounceIn	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCEaseBounceInOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBounceInOut	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCEaseBounceOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseBounceOut	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCEaseElastic* create(CCActionInterval *pAction);$/;"	p	class:CCEaseElastic	access:public	signature:(CCActionInterval *pAction)
create	actions/CCActionEase.h	/^    static CCEaseElastic* create(CCActionInterval *pAction, float fPeriod);$/;"	p	class:CCEaseElastic	access:public	signature:(CCActionInterval *pAction, float fPeriod)
create	actions/CCActionEase.h	/^    static CCEaseElasticIn* create(CCActionInterval *pAction);$/;"	p	class:CCEaseElasticIn	access:public	signature:(CCActionInterval *pAction)
create	actions/CCActionEase.h	/^    static CCEaseElasticIn* create(CCActionInterval *pAction, float fPeriod);$/;"	p	class:CCEaseElasticIn	access:public	signature:(CCActionInterval *pAction, float fPeriod)
create	actions/CCActionEase.h	/^    static CCEaseElasticInOut* create(CCActionInterval *pAction);$/;"	p	class:CCEaseElasticInOut	access:public	signature:(CCActionInterval *pAction)
create	actions/CCActionEase.h	/^    static CCEaseElasticInOut* create(CCActionInterval *pAction, float fPeriod);$/;"	p	class:CCEaseElasticInOut	access:public	signature:(CCActionInterval *pAction, float fPeriod)
create	actions/CCActionEase.h	/^    static CCEaseElasticOut* create(CCActionInterval *pAction);$/;"	p	class:CCEaseElasticOut	access:public	signature:(CCActionInterval *pAction)
create	actions/CCActionEase.h	/^    static CCEaseElasticOut* create(CCActionInterval *pAction, float fPeriod);$/;"	p	class:CCEaseElasticOut	access:public	signature:(CCActionInterval *pAction, float fPeriod)
create	actions/CCActionEase.h	/^    static CCEaseExponentialIn* create(CCActionInterval* pAction);$/;"	p	class:CCEaseExponentialIn	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCEaseExponentialInOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseExponentialInOut	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCEaseExponentialOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseExponentialOut	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCEaseIn* create(CCActionInterval* pAction, float fRate);$/;"	p	class:CCEaseIn	access:public	signature:(CCActionInterval* pAction, float fRate)
create	actions/CCActionEase.h	/^    static CCEaseInOut* create(CCActionInterval* pAction, float fRate);$/;"	p	class:CCEaseInOut	access:public	signature:(CCActionInterval* pAction, float fRate)
create	actions/CCActionEase.h	/^    static CCEaseOut* create(CCActionInterval* pAction, float fRate);$/;"	p	class:CCEaseOut	access:public	signature:(CCActionInterval* pAction, float fRate)
create	actions/CCActionEase.h	/^    static CCEaseRateAction* create(CCActionInterval* pAction, float fRate);$/;"	p	class:CCEaseRateAction	access:public	signature:(CCActionInterval* pAction, float fRate)
create	actions/CCActionEase.h	/^    static CCEaseSineIn* create(CCActionInterval* pAction);$/;"	p	class:CCEaseSineIn	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCEaseSineInOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseSineInOut	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionEase.h	/^    static CCEaseSineOut* create(CCActionInterval* pAction);$/;"	p	class:CCEaseSineOut	access:public	signature:(CCActionInterval* pAction)
create	actions/CCActionGrid.cpp	/^CCAccelAmplitude* CCAccelAmplitude::create(CCAction *pAction, float duration)$/;"	f	class:CCAccelAmplitude	signature:(CCAction *pAction, float duration)
create	actions/CCActionGrid.cpp	/^CCAccelDeccelAmplitude* CCAccelDeccelAmplitude::create(CCAction *pAction, float duration)$/;"	f	class:CCAccelDeccelAmplitude	signature:(CCAction *pAction, float duration)
create	actions/CCActionGrid.cpp	/^CCDeccelAmplitude* CCDeccelAmplitude::create(CCAction *pAction, float duration)$/;"	f	class:CCDeccelAmplitude	signature:(CCAction *pAction, float duration)
create	actions/CCActionGrid.cpp	/^CCGridAction* CCGridAction::create(float duration, const CCSize& gridSize)$/;"	f	class:CCGridAction	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionGrid.cpp	/^CCReuseGrid* CCReuseGrid::create(int times)$/;"	f	class:CCReuseGrid	signature:(int times)
create	actions/CCActionGrid.cpp	/^CCStopGrid* CCStopGrid::create(void)$/;"	f	class:CCStopGrid	signature:(void)
create	actions/CCActionGrid.cpp	/^CCTiledGrid3DAction* CCTiledGrid3DAction::create(float duration, const CCSize& gridSize)$/;"	f	class:CCTiledGrid3DAction	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionGrid.h	/^    static CCAccelAmplitude* create(CCAction *pAction, float duration);$/;"	p	class:CCAccelAmplitude	access:public	signature:(CCAction *pAction, float duration)
create	actions/CCActionGrid.h	/^    static CCAccelDeccelAmplitude* create(CCAction *pAction, float duration);$/;"	p	class:CCAccelDeccelAmplitude	access:public	signature:(CCAction *pAction, float duration)
create	actions/CCActionGrid.h	/^    static CCDeccelAmplitude* create(CCAction *pAction, float duration);$/;"	p	class:CCDeccelAmplitude	access:public	signature:(CCAction *pAction, float duration)
create	actions/CCActionGrid.h	/^    static CCGrid3DAction* create(float duration, const CCSize& gridSize);$/;"	p	class:CCGrid3DAction	access:public	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionGrid.h	/^    static CCGridAction* create(float duration, const CCSize& gridSize);$/;"	p	class:CCGridAction	access:public	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionGrid.h	/^    static CCReuseGrid* create(int times);$/;"	p	class:CCReuseGrid	access:public	signature:(int times)
create	actions/CCActionGrid.h	/^    static CCStopGrid* create(void);$/;"	p	class:CCStopGrid	access:public	signature:(void)
create	actions/CCActionGrid.h	/^    static CCTiledGrid3DAction* create(float duration, const CCSize& gridSize);$/;"	p	class:CCTiledGrid3DAction	access:public	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionGrid3D.cpp	/^CCFlipX3D* CCFlipX3D::create(float duration)$/;"	f	class:CCFlipX3D	signature:(float duration)
create	actions/CCActionGrid3D.cpp	/^CCFlipY3D* CCFlipY3D::create(float duration)$/;"	f	class:CCFlipY3D	signature:(float duration)
create	actions/CCActionGrid3D.cpp	/^CCLens3D* CCLens3D::create(float duration, const CCSize& gridSize, const CCPoint& position, float radius)$/;"	f	class:CCLens3D	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius)
create	actions/CCActionGrid3D.cpp	/^CCLiquid* CCLiquid::create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)$/;"	f	class:CCLiquid	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
create	actions/CCActionGrid3D.cpp	/^CCRipple3D* CCRipple3D::create(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude)$/;"	f	class:CCRipple3D	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude)
create	actions/CCActionGrid3D.cpp	/^CCShaky3D* CCShaky3D::create(float duration, const CCSize& gridSize, int range, bool shakeZ)$/;"	f	class:CCShaky3D	signature:(float duration, const CCSize& gridSize, int range, bool shakeZ)
create	actions/CCActionGrid3D.cpp	/^CCTwirl* CCTwirl::create(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude)$/;"	f	class:CCTwirl	signature:(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude)
create	actions/CCActionGrid3D.cpp	/^CCWaves* CCWaves::create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)$/;"	f	class:CCWaves	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)
create	actions/CCActionGrid3D.cpp	/^CCWaves3D* CCWaves3D::create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)$/;"	f	class:CCWaves3D	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
create	actions/CCActionGrid3D.h	/^    static CCFlipX3D* create(float duration);$/;"	p	class:CCFlipX3D	access:public	signature:(float duration)
create	actions/CCActionGrid3D.h	/^    static CCFlipY3D* create(float duration);$/;"	p	class:CCFlipY3D	access:public	signature:(float duration)
create	actions/CCActionGrid3D.h	/^    static CCLens3D* create(float duration, const CCSize& gridSize, const CCPoint& position, float radius);$/;"	p	class:CCLens3D	access:public	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius)
create	actions/CCActionGrid3D.h	/^    static CCLiquid* create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude);$/;"	p	class:CCLiquid	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
create	actions/CCActionGrid3D.h	/^    static CCRipple3D* create(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude);$/;"	p	class:CCRipple3D	access:public	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude)
create	actions/CCActionGrid3D.h	/^    static CCShaky3D* create(float duration, const CCSize& gridSize, int range, bool shakeZ);$/;"	p	class:CCShaky3D	access:public	signature:(float duration, const CCSize& gridSize, int range, bool shakeZ)
create	actions/CCActionGrid3D.h	/^    static CCTwirl* create(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude);$/;"	p	class:CCTwirl	access:public	signature:(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude)
create	actions/CCActionGrid3D.h	/^    static CCWaves* create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical);$/;"	p	class:CCWaves	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)
create	actions/CCActionGrid3D.h	/^    static CCWaves3D* create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude);$/;"	p	class:CCWaves3D	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
create	actions/CCActionInstant.cpp	/^CCCallFunc * CCCallFunc::create(CCObject* pSelectorTarget, SEL_CallFunc selector) $/;"	f	class:CCCallFunc	signature:(CCObject* pSelectorTarget, SEL_CallFunc selector)
create	actions/CCActionInstant.cpp	/^CCCallFunc * CCCallFunc::create(int nHandler)$/;"	f	class:CCCallFunc	signature:(int nHandler)
create	actions/CCActionInstant.cpp	/^CCCallFuncN * CCCallFuncN::create(CCObject* pSelectorTarget, SEL_CallFuncN selector)$/;"	f	class:CCCallFuncN	signature:(CCObject* pSelectorTarget, SEL_CallFuncN selector)
create	actions/CCActionInstant.cpp	/^CCCallFuncN * CCCallFuncN::create(int nHandler)$/;"	f	class:CCCallFuncN	signature:(int nHandler)
create	actions/CCActionInstant.cpp	/^CCCallFuncND * CCCallFuncND::create(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d)$/;"	f	class:CCCallFuncND	signature:(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d)
create	actions/CCActionInstant.cpp	/^CCCallFuncO * CCCallFuncO::create(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject)$/;"	f	class:CCCallFuncO	signature:(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject)
create	actions/CCActionInstant.cpp	/^CCFlipX *CCFlipX::create(bool x)$/;"	f	class:CCFlipX	signature:(bool x)
create	actions/CCActionInstant.cpp	/^CCFlipY * CCFlipY::create(bool y)$/;"	f	class:CCFlipY	signature:(bool y)
create	actions/CCActionInstant.cpp	/^CCHide * CCHide::create() $/;"	f	class:CCHide	signature:()
create	actions/CCActionInstant.cpp	/^CCPlace* CCPlace::create(const CCPoint& pos)$/;"	f	class:CCPlace	signature:(const CCPoint& pos)
create	actions/CCActionInstant.cpp	/^CCShow* CCShow::create() $/;"	f	class:CCShow	signature:()
create	actions/CCActionInstant.cpp	/^CCToggleVisibility * CCToggleVisibility::create()$/;"	f	class:CCToggleVisibility	signature:()
create	actions/CCActionInstant.h	/^	static CCCallFunc * create(int nHandler);$/;"	p	class:CCCallFunc	access:public	signature:(int nHandler)
create	actions/CCActionInstant.h	/^	static CCCallFuncN * create(int nHandler);$/;"	p	class:CCCallFuncN	access:public	signature:(int nHandler)
create	actions/CCActionInstant.h	/^    static CCCallFunc * create(CCObject* pSelectorTarget, SEL_CallFunc selector);$/;"	p	class:CCCallFunc	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFunc selector)
create	actions/CCActionInstant.h	/^    static CCCallFuncN * create(CCObject* pSelectorTarget, SEL_CallFuncN selector);$/;"	p	class:CCCallFuncN	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFuncN selector)
create	actions/CCActionInstant.h	/^    static CCCallFuncND * create(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d);$/;"	p	class:CCCallFuncND	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d)
create	actions/CCActionInstant.h	/^    static CCCallFuncO * create(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject);$/;"	p	class:CCCallFuncO	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject)
create	actions/CCActionInstant.h	/^    static CCFlipX * create(bool x);$/;"	p	class:CCFlipX	access:public	signature:(bool x)
create	actions/CCActionInstant.h	/^    static CCFlipY * create(bool y);$/;"	p	class:CCFlipY	access:public	signature:(bool y)
create	actions/CCActionInstant.h	/^    static CCHide * create();$/;"	p	class:CCHide	access:public	signature:()
create	actions/CCActionInstant.h	/^    static CCPlace * create(const CCPoint& pos);$/;"	p	class:CCPlace	access:public	signature:(const CCPoint& pos)
create	actions/CCActionInstant.h	/^    static CCShow * create();$/;"	p	class:CCShow	access:public	signature:()
create	actions/CCActionInstant.h	/^    static CCToggleVisibility * create();$/;"	p	class:CCToggleVisibility	access:public	signature:()
create	actions/CCActionInterval.cpp	/^    static ExtraAction* create();$/;"	p	class:ExtraAction	file:	access:public	signature:()
create	actions/CCActionInterval.cpp	/^CCActionInterval* CCActionInterval::create(float d)$/;"	f	class:CCActionInterval	signature:(float d)
create	actions/CCActionInterval.cpp	/^CCAnimate* CCAnimate::create(CCAnimation *pAnimation)$/;"	f	class:CCAnimate	signature:(CCAnimation *pAnimation)
create	actions/CCActionInterval.cpp	/^CCBezierBy* CCBezierBy::create(float t, const ccBezierConfig& c)$/;"	f	class:CCBezierBy	signature:(float t, const ccBezierConfig& c)
create	actions/CCActionInterval.cpp	/^CCBezierTo* CCBezierTo::create(float t, const ccBezierConfig& c)$/;"	f	class:CCBezierTo	signature:(float t, const ccBezierConfig& c)
create	actions/CCActionInterval.cpp	/^CCBlink* CCBlink::create(float duration, unsigned int uBlinks)$/;"	f	class:CCBlink	signature:(float duration, unsigned int uBlinks)
create	actions/CCActionInterval.cpp	/^CCDelayTime* CCDelayTime::create(float d)$/;"	f	class:CCDelayTime	signature:(float d)
create	actions/CCActionInterval.cpp	/^CCFadeIn* CCFadeIn::create(float d)$/;"	f	class:CCFadeIn	signature:(float d)
create	actions/CCActionInterval.cpp	/^CCFadeOut* CCFadeOut::create(float d)$/;"	f	class:CCFadeOut	signature:(float d)
create	actions/CCActionInterval.cpp	/^CCFadeTo* CCFadeTo::create(float duration, GLubyte opacity)$/;"	f	class:CCFadeTo	signature:(float duration, GLubyte opacity)
create	actions/CCActionInterval.cpp	/^CCJumpBy* CCJumpBy::create(float duration, const CCPoint& position, float height, unsigned int jumps)$/;"	f	class:CCJumpBy	signature:(float duration, const CCPoint& position, float height, unsigned int jumps)
create	actions/CCActionInterval.cpp	/^CCJumpTo* CCJumpTo::create(float duration, const CCPoint& position, float height, int jumps)$/;"	f	class:CCJumpTo	signature:(float duration, const CCPoint& position, float height, int jumps)
create	actions/CCActionInterval.cpp	/^CCMoveBy* CCMoveBy::create(float duration, const CCPoint& deltaPosition)$/;"	f	class:CCMoveBy	signature:(float duration, const CCPoint& deltaPosition)
create	actions/CCActionInterval.cpp	/^CCMoveTo* CCMoveTo::create(float duration, const CCPoint& position)$/;"	f	class:CCMoveTo	signature:(float duration, const CCPoint& position)
create	actions/CCActionInterval.cpp	/^CCRepeat* CCRepeat::create(CCFiniteTimeAction *pAction, unsigned int times)$/;"	f	class:CCRepeat	signature:(CCFiniteTimeAction *pAction, unsigned int times)
create	actions/CCActionInterval.cpp	/^CCRepeatForever *CCRepeatForever::create(CCActionInterval *pAction)$/;"	f	class:CCRepeatForever	signature:(CCActionInterval *pAction)
create	actions/CCActionInterval.cpp	/^CCReverseTime* CCReverseTime::create(CCFiniteTimeAction *pAction)$/;"	f	class:CCReverseTime	signature:(CCFiniteTimeAction *pAction)
create	actions/CCActionInterval.cpp	/^CCRotateBy* CCRotateBy::create(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateBy	signature:(float fDuration, float fDeltaAngle)
create	actions/CCActionInterval.cpp	/^CCRotateBy* CCRotateBy::create(float fDuration, float fDeltaAngleX, float fDeltaAngleY)$/;"	f	class:CCRotateBy	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
create	actions/CCActionInterval.cpp	/^CCRotateTo* CCRotateTo::create(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateTo	signature:(float fDuration, float fDeltaAngle)
create	actions/CCActionInterval.cpp	/^CCRotateTo* CCRotateTo::create(float fDuration, float fDeltaAngleX, float fDeltaAngleY)$/;"	f	class:CCRotateTo	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
create	actions/CCActionInterval.cpp	/^CCScaleBy* CCScaleBy::create(float duration, float s)$/;"	f	class:CCScaleBy	signature:(float duration, float s)
create	actions/CCActionInterval.cpp	/^CCScaleBy* CCScaleBy::create(float duration, float sx, float sy)$/;"	f	class:CCScaleBy	signature:(float duration, float sx, float sy)
create	actions/CCActionInterval.cpp	/^CCScaleTo* CCScaleTo::create(float duration, float s)$/;"	f	class:CCScaleTo	signature:(float duration, float s)
create	actions/CCActionInterval.cpp	/^CCScaleTo* CCScaleTo::create(float duration, float sx, float sy)$/;"	f	class:CCScaleTo	signature:(float duration, float sx, float sy)
create	actions/CCActionInterval.cpp	/^CCSequence* CCSequence::create(CCArray* arrayOfActions)$/;"	f	class:CCSequence	signature:(CCArray* arrayOfActions)
create	actions/CCActionInterval.cpp	/^CCSequence* CCSequence::create(CCFiniteTimeAction *pAction1, ...)$/;"	f	class:CCSequence	signature:(CCFiniteTimeAction *pAction1, ...)
create	actions/CCActionInterval.cpp	/^CCSkewBy* CCSkewBy::create(float t, float sx, float sy)$/;"	f	class:CCSkewBy	signature:(float t, float sx, float sy)
create	actions/CCActionInterval.cpp	/^CCSkewTo* CCSkewTo::create(float t, float sx, float sy)$/;"	f	class:CCSkewTo	signature:(float t, float sx, float sy)
create	actions/CCActionInterval.cpp	/^CCSpawn* CCSpawn::create(CCArray *arrayOfActions)$/;"	f	class:CCSpawn	signature:(CCArray *arrayOfActions)
create	actions/CCActionInterval.cpp	/^CCSpawn* CCSpawn::create(CCFiniteTimeAction *pAction1, ...)$/;"	f	class:CCSpawn	signature:(CCFiniteTimeAction *pAction1, ...)
create	actions/CCActionInterval.cpp	/^CCTargetedAction* CCTargetedAction::create(CCNode* pTarget, CCFiniteTimeAction* pAction)$/;"	f	class:CCTargetedAction	signature:(CCNode* pTarget, CCFiniteTimeAction* pAction)
create	actions/CCActionInterval.cpp	/^CCTintBy* CCTintBy::create(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)$/;"	f	class:CCTintBy	signature:(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)
create	actions/CCActionInterval.cpp	/^CCTintTo* CCTintTo::create(float duration, GLubyte red, GLubyte green, GLubyte blue)$/;"	f	class:CCTintTo	signature:(float duration, GLubyte red, GLubyte green, GLubyte blue)
create	actions/CCActionInterval.cpp	/^ExtraAction* ExtraAction::create()$/;"	f	class:ExtraAction	signature:()
create	actions/CCActionInterval.h	/^    static CCActionInterval* create(float d);$/;"	p	class:CCActionInterval	access:public	signature:(float d)
create	actions/CCActionInterval.h	/^    static CCAnimate* create(CCAnimation *pAnimation);$/;"	p	class:CCAnimate	access:public	signature:(CCAnimation *pAnimation)
create	actions/CCActionInterval.h	/^    static CCBezierBy* create(float t, const ccBezierConfig& c);$/;"	p	class:CCBezierBy	access:public	signature:(float t, const ccBezierConfig& c)
create	actions/CCActionInterval.h	/^    static CCBezierTo* create(float t, const ccBezierConfig& c);$/;"	p	class:CCBezierTo	access:public	signature:(float t, const ccBezierConfig& c)
create	actions/CCActionInterval.h	/^    static CCBlink* create(float duration, unsigned int uBlinks);$/;"	p	class:CCBlink	access:public	signature:(float duration, unsigned int uBlinks)
create	actions/CCActionInterval.h	/^    static CCDelayTime* create(float d);$/;"	p	class:CCDelayTime	access:public	signature:(float d)
create	actions/CCActionInterval.h	/^    static CCFadeIn* create(float d);$/;"	p	class:CCFadeIn	access:public	signature:(float d)
create	actions/CCActionInterval.h	/^    static CCFadeOut* create(float d);$/;"	p	class:CCFadeOut	access:public	signature:(float d)
create	actions/CCActionInterval.h	/^    static CCFadeTo* create(float duration, GLubyte opacity);$/;"	p	class:CCFadeTo	access:public	signature:(float duration, GLubyte opacity)
create	actions/CCActionInterval.h	/^    static CCJumpBy* create(float duration, const CCPoint& position, float height, unsigned int jumps);$/;"	p	class:CCJumpBy	access:public	signature:(float duration, const CCPoint& position, float height, unsigned int jumps)
create	actions/CCActionInterval.h	/^    static CCJumpTo* create(float duration, const CCPoint& position, float height, int jumps);$/;"	p	class:CCJumpTo	access:public	signature:(float duration, const CCPoint& position, float height, int jumps)
create	actions/CCActionInterval.h	/^    static CCMoveBy* create(float duration, const CCPoint& deltaPosition);$/;"	p	class:CCMoveBy	access:public	signature:(float duration, const CCPoint& deltaPosition)
create	actions/CCActionInterval.h	/^    static CCMoveTo* create(float duration, const CCPoint& position);$/;"	p	class:CCMoveTo	access:public	signature:(float duration, const CCPoint& position)
create	actions/CCActionInterval.h	/^    static CCRepeat* create(CCFiniteTimeAction *pAction, unsigned int times);$/;"	p	class:CCRepeat	access:public	signature:(CCFiniteTimeAction *pAction, unsigned int times)
create	actions/CCActionInterval.h	/^    static CCRepeatForever* create(CCActionInterval *pAction);$/;"	p	class:CCRepeatForever	access:public	signature:(CCActionInterval *pAction)
create	actions/CCActionInterval.h	/^    static CCReverseTime* create(CCFiniteTimeAction *pAction);$/;"	p	class:CCReverseTime	access:public	signature:(CCFiniteTimeAction *pAction)
create	actions/CCActionInterval.h	/^    static CCRotateBy* create(float fDuration, float fDeltaAngle);$/;"	p	class:CCRotateBy	access:public	signature:(float fDuration, float fDeltaAngle)
create	actions/CCActionInterval.h	/^    static CCRotateBy* create(float fDuration, float fDeltaAngleX, float fDeltaAngleY);$/;"	p	class:CCRotateBy	access:public	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
create	actions/CCActionInterval.h	/^    static CCRotateTo* create(float fDuration, float fDeltaAngle);$/;"	p	class:CCRotateTo	access:public	signature:(float fDuration, float fDeltaAngle)
create	actions/CCActionInterval.h	/^    static CCRotateTo* create(float fDuration, float fDeltaAngleX, float fDeltaAngleY);$/;"	p	class:CCRotateTo	access:public	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
create	actions/CCActionInterval.h	/^    static CCScaleBy* create(float duration, float s);$/;"	p	class:CCScaleBy	access:public	signature:(float duration, float s)
create	actions/CCActionInterval.h	/^    static CCScaleBy* create(float duration, float sx, float sy);$/;"	p	class:CCScaleBy	access:public	signature:(float duration, float sx, float sy)
create	actions/CCActionInterval.h	/^    static CCScaleTo* create(float duration, float s);$/;"	p	class:CCScaleTo	access:public	signature:(float duration, float s)
create	actions/CCActionInterval.h	/^    static CCScaleTo* create(float duration, float sx, float sy);$/;"	p	class:CCScaleTo	access:public	signature:(float duration, float sx, float sy)
create	actions/CCActionInterval.h	/^    static CCSequence* create(CCArray *arrayOfActions);$/;"	p	class:CCSequence	access:public	signature:(CCArray *arrayOfActions)
create	actions/CCActionInterval.h	/^    static CCSequence* create(CCFiniteTimeAction *pAction1, ...);$/;"	p	class:CCSequence	access:public	signature:(CCFiniteTimeAction *pAction1, ...)
create	actions/CCActionInterval.h	/^    static CCSkewBy* create(float t, float deltaSkewX, float deltaSkewY);$/;"	p	class:CCSkewBy	access:public	signature:(float t, float deltaSkewX, float deltaSkewY)
create	actions/CCActionInterval.h	/^    static CCSkewTo* create(float t, float sx, float sy);$/;"	p	class:CCSkewTo	access:public	signature:(float t, float sx, float sy)
create	actions/CCActionInterval.h	/^    static CCSpawn* create(CCArray *arrayOfActions);$/;"	p	class:CCSpawn	access:public	signature:(CCArray *arrayOfActions)
create	actions/CCActionInterval.h	/^    static CCSpawn* create(CCFiniteTimeAction *pAction1, ...);$/;"	p	class:CCSpawn	access:public	signature:(CCFiniteTimeAction *pAction1, ...)
create	actions/CCActionInterval.h	/^    static CCTargetedAction* create(CCNode* pTarget, CCFiniteTimeAction* pAction);$/;"	p	class:CCTargetedAction	access:public	signature:(CCNode* pTarget, CCFiniteTimeAction* pAction)
create	actions/CCActionInterval.h	/^    static CCTintBy* create(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue);$/;"	p	class:CCTintBy	access:public	signature:(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)
create	actions/CCActionInterval.h	/^    static CCTintTo* create(float duration, GLubyte red, GLubyte green, GLubyte blue);$/;"	p	class:CCTintTo	access:public	signature:(float duration, GLubyte red, GLubyte green, GLubyte blue)
create	actions/CCActionPageTurn3D.cpp	/^CCPageTurn3D* CCPageTurn3D::create(float duration, const CCSize& gridSize)$/;"	f	class:CCPageTurn3D	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionPageTurn3D.h	/^    static CCPageTurn3D* create(float duration, const CCSize& gridSize);$/;"	p	class:CCPageTurn3D	access:public	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionProgressTimer.cpp	/^CCProgressFromTo* CCProgressFromTo::create(float duration, float fFromPercentage, float fToPercentage)$/;"	f	class:CCProgressFromTo	signature:(float duration, float fFromPercentage, float fToPercentage)
create	actions/CCActionProgressTimer.cpp	/^CCProgressTo* CCProgressTo::create(float duration, float fPercent)$/;"	f	class:CCProgressTo	signature:(float duration, float fPercent)
create	actions/CCActionProgressTimer.h	/^    static CCProgressFromTo* create(float duration, float fFromPercentage, float fToPercentage);$/;"	p	class:CCProgressFromTo	access:public	signature:(float duration, float fFromPercentage, float fToPercentage)
create	actions/CCActionProgressTimer.h	/^    static CCProgressTo* create(float duration, float fPercent);$/;"	p	class:CCProgressTo	access:public	signature:(float duration, float fPercent)
create	actions/CCActionTiledGrid.cpp	/^CCFadeOutBLTiles* CCFadeOutBLTiles::create(float duration, const CCSize& gridSize)$/;"	f	class:CCFadeOutBLTiles	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionTiledGrid.cpp	/^CCFadeOutDownTiles* CCFadeOutDownTiles::create(float duration, const CCSize& gridSize)$/;"	f	class:CCFadeOutDownTiles	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionTiledGrid.cpp	/^CCFadeOutTRTiles* CCFadeOutTRTiles::create(float duration, const CCSize& gridSize)$/;"	f	class:CCFadeOutTRTiles	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionTiledGrid.cpp	/^CCFadeOutUpTiles* CCFadeOutUpTiles::create(float duration, const CCSize& gridSize)$/;"	f	class:CCFadeOutUpTiles	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionTiledGrid.cpp	/^CCJumpTiles3D* CCJumpTiles3D::create(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude)$/;"	f	class:CCJumpTiles3D	signature:(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude)
create	actions/CCActionTiledGrid.cpp	/^CCShakyTiles3D* CCShakyTiles3D::create(float duration, const CCSize& gridSize, int nRange, bool bShakeZ)$/;"	f	class:CCShakyTiles3D	signature:(float duration, const CCSize& gridSize, int nRange, bool bShakeZ)
create	actions/CCActionTiledGrid.cpp	/^CCShatteredTiles3D* CCShatteredTiles3D::create(float duration, const CCSize& gridSize, int nRange, bool bShatterZ)$/;"	f	class:CCShatteredTiles3D	signature:(float duration, const CCSize& gridSize, int nRange, bool bShatterZ)
create	actions/CCActionTiledGrid.cpp	/^CCShuffleTiles* CCShuffleTiles::create(float duration, const CCSize& gridSize, unsigned int seed)$/;"	f	class:CCShuffleTiles	signature:(float duration, const CCSize& gridSize, unsigned int seed)
create	actions/CCActionTiledGrid.cpp	/^CCSplitCols* CCSplitCols::create(float duration, unsigned int nCols)$/;"	f	class:CCSplitCols	signature:(float duration, unsigned int nCols)
create	actions/CCActionTiledGrid.cpp	/^CCSplitRows* CCSplitRows::create(float duration, unsigned int nRows)$/;"	f	class:CCSplitRows	signature:(float duration, unsigned int nRows)
create	actions/CCActionTiledGrid.cpp	/^CCTurnOffTiles* CCTurnOffTiles::create(float duration, const CCSize& gridSize)$/;"	f	class:CCTurnOffTiles	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionTiledGrid.cpp	/^CCTurnOffTiles* CCTurnOffTiles::create(float duration, const CCSize& gridSize, unsigned int seed)$/;"	f	class:CCTurnOffTiles	signature:(float duration, const CCSize& gridSize, unsigned int seed)
create	actions/CCActionTiledGrid.cpp	/^CCWavesTiles3D* CCWavesTiles3D::create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)$/;"	f	class:CCWavesTiles3D	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
create	actions/CCActionTiledGrid.h	/^    static CCFadeOutBLTiles* create(float duration, const CCSize& gridSize);$/;"	p	class:CCFadeOutBLTiles	access:public	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionTiledGrid.h	/^    static CCFadeOutDownTiles* create(float duration, const CCSize& gridSize);$/;"	p	class:CCFadeOutDownTiles	access:public	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionTiledGrid.h	/^    static CCFadeOutTRTiles* create(float duration, const CCSize& gridSize);$/;"	p	class:CCFadeOutTRTiles	access:public	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionTiledGrid.h	/^    static CCFadeOutUpTiles* create(float duration, const CCSize& gridSize);$/;"	p	class:CCFadeOutUpTiles	access:public	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionTiledGrid.h	/^    static CCJumpTiles3D* create(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude);$/;"	p	class:CCJumpTiles3D	access:public	signature:(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude)
create	actions/CCActionTiledGrid.h	/^    static CCShakyTiles3D* create(float duration, const CCSize& gridSize, int nRange, bool bShakeZ);$/;"	p	class:CCShakyTiles3D	access:public	signature:(float duration, const CCSize& gridSize, int nRange, bool bShakeZ)
create	actions/CCActionTiledGrid.h	/^    static CCShatteredTiles3D* create(float duration, const CCSize& gridSize, int nRange, bool bShatterZ);$/;"	p	class:CCShatteredTiles3D	access:public	signature:(float duration, const CCSize& gridSize, int nRange, bool bShatterZ)
create	actions/CCActionTiledGrid.h	/^    static CCShuffleTiles* create(float duration, const CCSize& gridSize, unsigned int seed);$/;"	p	class:CCShuffleTiles	access:public	signature:(float duration, const CCSize& gridSize, unsigned int seed)
create	actions/CCActionTiledGrid.h	/^    static CCSplitCols* create(float duration, unsigned int nCols);$/;"	p	class:CCSplitCols	access:public	signature:(float duration, unsigned int nCols)
create	actions/CCActionTiledGrid.h	/^    static CCSplitRows* create(float duration, unsigned int nRows);$/;"	p	class:CCSplitRows	access:public	signature:(float duration, unsigned int nRows)
create	actions/CCActionTiledGrid.h	/^    static CCTurnOffTiles* create(float duration, const CCSize& gridSize);$/;"	p	class:CCTurnOffTiles	access:public	signature:(float duration, const CCSize& gridSize)
create	actions/CCActionTiledGrid.h	/^    static CCTurnOffTiles* create(float duration, const CCSize& gridSize, unsigned int seed);$/;"	p	class:CCTurnOffTiles	access:public	signature:(float duration, const CCSize& gridSize, unsigned int seed)
create	actions/CCActionTiledGrid.h	/^    static CCWavesTiles3D* create(float duration, const CCSize& gridSize, unsigned int waves, float amplitude);$/;"	p	class:CCWavesTiles3D	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
create	actions/CCActionTween.cpp	/^CCActionTween* CCActionTween::create(float aDuration, const char* key, float from, float to)$/;"	f	class:CCActionTween	signature:(float aDuration, const char* key, float from, float to)
create	actions/CCActionTween.h	/^    static CCActionTween* create(float aDuration, const char* key, float from, float to);$/;"	p	class:CCActionTween	access:public	signature:(float aDuration, const char* key, float from, float to)
create	base_nodes/CCAtlasNode.cpp	/^CCAtlasNode * CCAtlasNode::create(const char *tile, unsigned int tileWidth, unsigned int tileHeight, $/;"	f	class:CCAtlasNode	signature:(const char *tile, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)
create	base_nodes/CCAtlasNode.h	/^	static CCAtlasNode * create(const char* tile,unsigned int tileWidth, unsigned int tileHeight, $/;"	p	class:CCAtlasNode	access:public	signature:(const char* tile,unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)
create	base_nodes/CCNode.cpp	/^CCNode * CCNode::create(void)$/;"	f	class:CCNode	signature:(void)
create	base_nodes/CCNode.h	/^    static CCNode * create(void);$/;"	p	class:CCNode	access:public	signature:(void)
create	cocoa/CCArray.cpp	/^CCArray* CCArray::create()$/;"	f	class:CCArray	signature:()
create	cocoa/CCArray.cpp	/^CCArray* CCArray::create(CCObject* pObject, ...)$/;"	f	class:CCArray	signature:(CCObject* pObject, ...)
create	cocoa/CCArray.h	/^    static CCArray* create();$/;"	p	class:CCArray	access:public	signature:()
create	cocoa/CCArray.h	/^    static CCArray* create(CCObject* pObject, ...);$/;"	p	class:CCArray	access:public	signature:(CCObject* pObject, ...)
create	cocoa/CCBool.h	/^    static CCBool* create(bool v)$/;"	f	class:CCBool	access:public	signature:(bool v)
create	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::create()$/;"	f	class:CCDictionary	signature:()
create	cocoa/CCDictionary.h	/^    static CCDictionary* create();$/;"	p	class:CCDictionary	access:public	signature:()
create	cocoa/CCDouble.h	/^    static CCDouble* create(double v)$/;"	f	class:CCDouble	access:public	signature:(double v)
create	cocoa/CCFloat.h	/^    static CCFloat* create(float v)$/;"	f	class:CCFloat	access:public	signature:(float v)
create	cocoa/CCInteger.h	/^    static CCInteger* create(int v)$/;"	f	class:CCInteger	access:public	signature:(int v)
create	cocoa/CCSet.cpp	/^CCSet * CCSet::create()$/;"	f	class:CCSet	signature:()
create	cocoa/CCSet.h	/^    static CCSet * create();$/;"	p	class:CCSet	access:public	signature:()
create	cocoa/CCString.cpp	/^CCString* CCString::create(const std::string& str)$/;"	f	class:CCString	signature:(const std::string& str)
create	cocoa/CCString.h	/^    static CCString* create(const std::string& str);$/;"	p	class:CCString	access:public	signature:(const std::string& str)
create	draw_nodes/CCDrawNode.cpp	/^CCDrawNode* CCDrawNode::create()$/;"	f	class:CCDrawNode	signature:()
create	draw_nodes/CCDrawNode.h	/^    static CCDrawNode* create();$/;"	p	class:CCDrawNode	access:public	signature:()
create	effects/CCGrid.cpp	/^CCGrid3D* CCGrid3D::create(const CCSize& gridSize)$/;"	f	class:CCGrid3D	signature:(const CCSize& gridSize)
create	effects/CCGrid.cpp	/^CCGrid3D* CCGrid3D::create(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)$/;"	f	class:CCGrid3D	signature:(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)
create	effects/CCGrid.cpp	/^CCGridBase* CCGridBase::create(const CCSize& gridSize)$/;"	f	class:CCGridBase	signature:(const CCSize& gridSize)
create	effects/CCGrid.cpp	/^CCGridBase* CCGridBase::create(const CCSize& gridSize, CCTexture2D *texture, bool flipped)$/;"	f	class:CCGridBase	signature:(const CCSize& gridSize, CCTexture2D *texture, bool flipped)
create	effects/CCGrid.cpp	/^CCTiledGrid3D* CCTiledGrid3D::create(const CCSize& gridSize)$/;"	f	class:CCTiledGrid3D	signature:(const CCSize& gridSize)
create	effects/CCGrid.cpp	/^CCTiledGrid3D* CCTiledGrid3D::create(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)$/;"	f	class:CCTiledGrid3D	signature:(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)
create	effects/CCGrid.h	/^    static CCGrid3D* create(const CCSize& gridSize);$/;"	p	class:CCGrid3D	access:public	signature:(const CCSize& gridSize)
create	effects/CCGrid.h	/^    static CCGrid3D* create(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped);$/;"	p	class:CCGrid3D	access:public	signature:(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)
create	effects/CCGrid.h	/^    static CCGridBase* create(const CCSize& gridSize);$/;"	p	class:CCGridBase	access:public	signature:(const CCSize& gridSize)
create	effects/CCGrid.h	/^    static CCGridBase* create(const CCSize& gridSize, CCTexture2D *texture, bool flipped);$/;"	p	class:CCGridBase	access:public	signature:(const CCSize& gridSize, CCTexture2D *texture, bool flipped)
create	effects/CCGrid.h	/^    static CCTiledGrid3D* create(const CCSize& gridSize);$/;"	p	class:CCTiledGrid3D	access:public	signature:(const CCSize& gridSize)
create	effects/CCGrid.h	/^    static CCTiledGrid3D* create(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped);$/;"	p	class:CCTiledGrid3D	access:public	signature:(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)
create	label_nodes/CCLabelAtlas.cpp	/^CCLabelAtlas* CCLabelAtlas::create(const char *string, const char *charMapFile, unsigned int itemWidth, int unsigned itemHeight, unsigned int startCharMap)$/;"	f	class:CCLabelAtlas	signature:(const char *string, const char *charMapFile, unsigned int itemWidth, int unsigned itemHeight, unsigned int startCharMap)
create	label_nodes/CCLabelAtlas.cpp	/^CCLabelAtlas* CCLabelAtlas::create(const char *string, const char *fntFile)$/;"	f	class:CCLabelAtlas	signature:(const char *string, const char *fntFile)
create	label_nodes/CCLabelAtlas.h	/^    static CCLabelAtlas * create(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap);$/;"	p	class:CCLabelAtlas	access:public	signature:(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)
create	label_nodes/CCLabelAtlas.h	/^    static CCLabelAtlas* create(const char *string, const char *fntFile);$/;"	p	class:CCLabelAtlas	access:public	signature:(const char *string, const char *fntFile)
create	label_nodes/CCLabelBMFont.cpp	/^CCBMFontConfiguration * CCBMFontConfiguration::create(const char *FNTfile)$/;"	f	class:CCBMFontConfiguration	signature:(const char *FNTfile)
create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::create()$/;"	f	class:CCLabelBMFont	signature:()
create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::create(const char *str, const char *fntFile)$/;"	f	class:CCLabelBMFont	signature:(const char *str, const char *fntFile)
create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::create(const char *str, const char *fntFile, float width)$/;"	f	class:CCLabelBMFont	signature:(const char *str, const char *fntFile, float width)
create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::create(const char *str, const char *fntFile, float width, CCTextAlignment alignment)$/;"	f	class:CCLabelBMFont	signature:(const char *str, const char *fntFile, float width, CCTextAlignment alignment)
create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont *CCLabelBMFont::create(const char *str, const char *fntFile, float width\/* = kCCLabelAutomaticWidth*\/, CCTextAlignment alignment\/* = kCCTextAlignmentLeft*\/, CCPoint imageOffset\/* = CCPointZero*\/)$/;"	f	class:CCLabelBMFont	signature:(const char *str, const char *fntFile, float width , CCTextAlignment alignment , CCPoint imageOffset )
create	label_nodes/CCLabelBMFont.h	/^	static CCLabelBMFont * create(const char *str, const char *fntFile);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *str, const char *fntFile)
create	label_nodes/CCLabelBMFont.h	/^	static CCLabelBMFont * create(const char *str, const char *fntFile, float width);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *str, const char *fntFile, float width)
create	label_nodes/CCLabelBMFont.h	/^	static CCLabelBMFont * create(const char *str, const char *fntFile, float width, CCTextAlignment alignment);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *str, const char *fntFile, float width, CCTextAlignment alignment)
create	label_nodes/CCLabelBMFont.h	/^    static CCBMFontConfiguration * create(const char *FNTfile);$/;"	p	class:CCBMFontConfiguration	access:public	signature:(const char *FNTfile)
create	label_nodes/CCLabelBMFont.h	/^    static CCLabelBMFont * create();$/;"	p	class:CCLabelBMFont	access:public	signature:()
create	label_nodes/CCLabelBMFont.h	/^    static CCLabelBMFont * create(const char *str, const char *fntFile, float width, CCTextAlignment alignment, CCPoint imageOffset);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *str, const char *fntFile, float width, CCTextAlignment alignment, CCPoint imageOffset)
create	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF * CCLabelTTF::create()$/;"	f	class:CCLabelTTF	signature:()
create	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF * CCLabelTTF::create(const char *string, const char *fontName, float fontSize)$/;"	f	class:CCLabelTTF	signature:(const char *string, const char *fontName, float fontSize)
create	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF * CCLabelTTF::create(const char *string, const char *fontName, float fontSize,$/;"	f	class:CCLabelTTF	signature:(const char *string, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment)
create	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF* CCLabelTTF::create(const char *string, const char *fontName, float fontSize,$/;"	f	class:CCLabelTTF	signature:(const char *string, const char *fontName, float fontSize, const CCSize &dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)
create	label_nodes/CCLabelTTF.h	/^    static CCLabelTTF * create();$/;"	p	class:CCLabelTTF	access:public	signature:()
create	label_nodes/CCLabelTTF.h	/^    static CCLabelTTF * create(const char *string, const char *fontName, float fontSize);$/;"	p	class:CCLabelTTF	access:public	signature:(const char *string, const char *fontName, float fontSize)
create	label_nodes/CCLabelTTF.h	/^    static CCLabelTTF * create(const char *string, const char *fontName, float fontSize,$/;"	p	class:CCLabelTTF	access:public	signature:(const char *string, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment)
create	label_nodes/CCLabelTTF.h	/^    static CCLabelTTF * create(const char *string, const char *fontName, float fontSize,$/;"	p	class:CCLabelTTF	access:public	signature:(const char *string, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayer *CCLayer::create()$/;"	f	class:CCLayer	signature:()
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor * CCLayerColor::create(const ccColor4B& color)$/;"	f	class:CCLayerColor	signature:(const ccColor4B& color)
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor * CCLayerColor::create(const ccColor4B& color, GLfloat width, GLfloat height)$/;"	f	class:CCLayerColor	signature:(const ccColor4B& color, GLfloat width, GLfloat height)
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor* CCLayerColor::create()$/;"	f	class:CCLayerColor	signature:()
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerGradient* CCLayerGradient::create()$/;"	f	class:CCLayerGradient	signature:()
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerGradient* CCLayerGradient::create(const ccColor4B& start, const ccColor4B& end)$/;"	f	class:CCLayerGradient	signature:(const ccColor4B& start, const ccColor4B& end)
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerGradient* CCLayerGradient::create(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)$/;"	f	class:CCLayerGradient	signature:(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex * CCLayerMultiplex::create(CCLayer * layer, ...)$/;"	f	class:CCLayerMultiplex	signature:(CCLayer * layer, ...)
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex* CCLayerMultiplex::create()$/;"	f	class:CCLayerMultiplex	signature:()
create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayer *create(void);$/;"	p	class:CCLayer	access:public	signature:(void)
create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerColor * create(const ccColor4B& color);$/;"	p	class:CCLayerColor	access:public	signature:(const ccColor4B& color)
create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerColor * create(const ccColor4B& color, GLfloat width, GLfloat height);$/;"	p	class:CCLayerColor	access:public	signature:(const ccColor4B& color, GLfloat width, GLfloat height)
create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerColor* create();$/;"	p	class:CCLayerColor	access:public	signature:()
create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerGradient* create();$/;"	p	class:CCLayerGradient	access:public	signature:()
create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerGradient* create(const ccColor4B& start, const ccColor4B& end);$/;"	p	class:CCLayerGradient	access:public	signature:(const ccColor4B& start, const ccColor4B& end)
create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerGradient* create(const ccColor4B& start, const ccColor4B& end, const CCPoint& v);$/;"	p	class:CCLayerGradient	access:public	signature:(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)
create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerMultiplex * create(CCLayer* layer, ... );$/;"	p	class:CCLayerMultiplex	access:public	signature:(CCLayer* layer, ... )
create	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerMultiplex* create();$/;"	p	class:CCLayerMultiplex	access:public	signature:()
create	layers_scenes_transitions_nodes/CCScene.cpp	/^CCScene *CCScene::create()$/;"	f	class:CCScene	signature:()
create	layers_scenes_transitions_nodes/CCScene.h	/^    static CCScene *create(void);$/;"	p	class:CCScene	access:public	signature:(void)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionCrossFade* CCTransitionCrossFade::create(float t, CCScene* scene)$/;"	f	class:CCTransitionCrossFade	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade * CCTransitionFade::create(float duration, CCScene *scene, const ccColor3B& color)$/;"	f	class:CCTransitionFade	signature:(float duration, CCScene *scene, const ccColor3B& color)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade* CCTransitionFade::create(float duration,CCScene* scene)$/;"	f	class:CCTransitionFade	signature:(float duration,CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeBL* CCTransitionFadeBL::create(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeBL	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeDown* CCTransitionFadeDown::create(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeDown	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeTR* CCTransitionFadeTR::create(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeTR	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeUp* CCTransitionFadeUp::create(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeUp	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular* CCTransitionFlipAngular::create(float t, CCScene* s)$/;"	f	class:CCTransitionFlipAngular	signature:(float t, CCScene* s)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular* CCTransitionFlipAngular::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionFlipAngular	signature:(float t, CCScene* s, tOrientation o)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX* CCTransitionFlipX::create(float t, CCScene* s)$/;"	f	class:CCTransitionFlipX	signature:(float t, CCScene* s)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX* CCTransitionFlipX::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionFlipX	signature:(float t, CCScene* s, tOrientation o)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY* CCTransitionFlipY::create(float t, CCScene* s)$/;"	f	class:CCTransitionFlipY	signature:(float t, CCScene* s)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY* CCTransitionFlipY::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionFlipY	signature:(float t, CCScene* s, tOrientation o)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionJumpZoom* CCTransitionJumpZoom::create(float t, CCScene* scene)$/;"	f	class:CCTransitionJumpZoom	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInB* CCTransitionMoveInB::create(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInB	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInL* CCTransitionMoveInL::create(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInL	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInR* CCTransitionMoveInR::create(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInR	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInT* CCTransitionMoveInT::create(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInT	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionRotoZoom* CCTransitionRotoZoom::create(float t, CCScene* scene)                   $/;"	f	class:CCTransitionRotoZoom	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionScene * CCTransitionScene::create(float t, CCScene *scene)$/;"	f	class:CCTransitionScene	signature:(float t, CCScene *scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSceneOriented * CCTransitionSceneOriented::create(float t, CCScene *scene, tOrientation orientation)$/;"	f	class:CCTransitionSceneOriented	signature:(float t, CCScene *scene, tOrientation orientation)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionShrinkGrow* CCTransitionShrinkGrow::create(float t, CCScene* scene)$/;"	f	class:CCTransitionShrinkGrow	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInB* CCTransitionSlideInB::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInB	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInL* CCTransitionSlideInL::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInL	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInR* CCTransitionSlideInR::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInR	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInT* CCTransitionSlideInT::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInT	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitCols* CCTransitionSplitCols::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSplitCols	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitRows* CCTransitionSplitRows::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSplitRows	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionTurnOffTiles* CCTransitionTurnOffTiles::create(float t, CCScene* scene)$/;"	f	class:CCTransitionTurnOffTiles	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular* CCTransitionZoomFlipAngular::create(float t, CCScene* s)$/;"	f	class:CCTransitionZoomFlipAngular	signature:(float t, CCScene* s)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular* CCTransitionZoomFlipAngular::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionZoomFlipAngular	signature:(float t, CCScene* s, tOrientation o)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX* CCTransitionZoomFlipX::create(float t, CCScene* s)$/;"	f	class:CCTransitionZoomFlipX	signature:(float t, CCScene* s)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX* CCTransitionZoomFlipX::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionZoomFlipX	signature:(float t, CCScene* s, tOrientation o)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY* CCTransitionZoomFlipY::create(float t, CCScene* s)$/;"	f	class:CCTransitionZoomFlipY	signature:(float t, CCScene* s)
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY* CCTransitionZoomFlipY::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionZoomFlipY	signature:(float t, CCScene* s, tOrientation o)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionCrossFade* create(float t, CCScene* scene);$/;"	p	class:CCTransitionCrossFade	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFade* create(float duration,CCScene* scene);$/;"	p	class:CCTransitionFade	access:public	signature:(float duration,CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFade* create(float duration,CCScene* scene, const ccColor3B& color);$/;"	p	class:CCTransitionFade	access:public	signature:(float duration,CCScene* scene, const ccColor3B& color)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFadeBL* create(float t, CCScene* scene);$/;"	p	class:CCTransitionFadeBL	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFadeDown* create(float t, CCScene* scene);$/;"	p	class:CCTransitionFadeDown	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFadeTR* create(float t, CCScene* scene);$/;"	p	class:CCTransitionFadeTR	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFadeUp* create(float t, CCScene* scene);$/;"	p	class:CCTransitionFadeUp	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFlipAngular* create(float t, CCScene* s);$/;"	p	class:CCTransitionFlipAngular	access:public	signature:(float t, CCScene* s)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFlipAngular* create(float t, CCScene* s, tOrientation o);$/;"	p	class:CCTransitionFlipAngular	access:public	signature:(float t, CCScene* s, tOrientation o)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFlipX* create(float t, CCScene* s);$/;"	p	class:CCTransitionFlipX	access:public	signature:(float t, CCScene* s)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFlipX* create(float t, CCScene* s, tOrientation o);$/;"	p	class:CCTransitionFlipX	access:public	signature:(float t, CCScene* s, tOrientation o)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFlipY* create(float t, CCScene* s);$/;"	p	class:CCTransitionFlipY	access:public	signature:(float t, CCScene* s)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionFlipY* create(float t, CCScene* s, tOrientation o);$/;"	p	class:CCTransitionFlipY	access:public	signature:(float t, CCScene* s, tOrientation o)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionJumpZoom* create(float t, CCScene* scene);$/;"	p	class:CCTransitionJumpZoom	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionMoveInB* create(float t, CCScene* scene);$/;"	p	class:CCTransitionMoveInB	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionMoveInL* create(float t, CCScene* scene);$/;"	p	class:CCTransitionMoveInL	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionMoveInR* create(float t, CCScene* scene);$/;"	p	class:CCTransitionMoveInR	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionMoveInT* create(float t, CCScene* scene);$/;"	p	class:CCTransitionMoveInT	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionRotoZoom* create(float t, CCScene* scene);$/;"	p	class:CCTransitionRotoZoom	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionScene * create(float t, CCScene *scene);$/;"	p	class:CCTransitionScene	access:public	signature:(float t, CCScene *scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSceneOriented * create(float t,CCScene* scene, tOrientation orientation);$/;"	p	class:CCTransitionSceneOriented	access:public	signature:(float t,CCScene* scene, tOrientation orientation)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionShrinkGrow* create(float t, CCScene* scene);$/;"	p	class:CCTransitionShrinkGrow	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSlideInB* create(float t, CCScene* scene);$/;"	p	class:CCTransitionSlideInB	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSlideInL* create(float t, CCScene* scene);$/;"	p	class:CCTransitionSlideInL	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSlideInR* create(float t, CCScene* scene);$/;"	p	class:CCTransitionSlideInR	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSlideInT* create(float t, CCScene* scene);$/;"	p	class:CCTransitionSlideInT	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSplitCols* create(float t, CCScene* scene);$/;"	p	class:CCTransitionSplitCols	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionSplitRows* create(float t, CCScene* scene);$/;"	p	class:CCTransitionSplitRows	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionTurnOffTiles* create(float t, CCScene* scene);$/;"	p	class:CCTransitionTurnOffTiles	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionZoomFlipAngular* create(float t, CCScene* s);$/;"	p	class:CCTransitionZoomFlipAngular	access:public	signature:(float t, CCScene* s)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionZoomFlipAngular* create(float t, CCScene* s, tOrientation o);$/;"	p	class:CCTransitionZoomFlipAngular	access:public	signature:(float t, CCScene* s, tOrientation o)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionZoomFlipX* create(float t, CCScene* s);$/;"	p	class:CCTransitionZoomFlipX	access:public	signature:(float t, CCScene* s)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionZoomFlipX* create(float t, CCScene* s, tOrientation o);$/;"	p	class:CCTransitionZoomFlipX	access:public	signature:(float t, CCScene* s, tOrientation o)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionZoomFlipY* create(float t, CCScene* s);$/;"	p	class:CCTransitionZoomFlipY	access:public	signature:(float t, CCScene* s)
create	layers_scenes_transitions_nodes/CCTransition.h	/^    static CCTransitionZoomFlipY* create(float t, CCScene* s, tOrientation o);$/;"	p	class:CCTransitionZoomFlipY	access:public	signature:(float t, CCScene* s, tOrientation o)
create	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCTransitionPageTurn * CCTransitionPageTurn::create(float t, CCScene *scene, bool backwards)$/;"	f	class:CCTransitionPageTurn	signature:(float t, CCScene *scene, bool backwards)
create	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    static CCTransitionPageTurn* create(float t,CCScene* scene,bool backwards);$/;"	p	class:CCTransitionPageTurn	access:public	signature:(float t,CCScene* scene,bool backwards)
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgress* CCTransitionProgress::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgress	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressHorizontal* CCTransitionProgressHorizontal::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressHorizontal	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressInOut* CCTransitionProgressInOut::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressInOut	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressOutIn* CCTransitionProgressOutIn::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressOutIn	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressRadialCCW* CCTransitionProgressRadialCCW::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressRadialCCW	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressRadialCW* CCTransitionProgressRadialCW::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressRadialCW	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressVertical* CCTransitionProgressVertical::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressVertical	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgress* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgress	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgressHorizontal* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgressHorizontal	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgressInOut* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgressInOut	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgressOutIn* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgressOutIn	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgressRadialCCW* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgressRadialCCW	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgressRadialCW* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgressRadialCW	access:public	signature:(float t, CCScene* scene)
create	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    static CCTransitionProgressVertical* create(float t, CCScene* scene);$/;"	p	class:CCTransitionProgressVertical	access:public	signature:(float t, CCScene* scene)
create	menu_nodes/CCMenu.cpp	/^CCMenu * CCMenu::create(CCMenuItem* item, ...)$/;"	f	class:CCMenu	signature:(CCMenuItem* item, ...)
create	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::create()$/;"	f	class:CCMenu	signature:()
create	menu_nodes/CCMenu.h	/^    static CCMenu* create();$/;"	p	class:CCMenu	access:public	signature:()
create	menu_nodes/CCMenu.h	/^    static CCMenu* create(CCMenuItem* item, ...);$/;"	p	class:CCMenu	access:public	signature:(CCMenuItem* item, ...)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItem* CCMenuItem::create()$/;"	f	class:CCMenuItem	signature:()
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItem* CCMenuItem::create(CCObject *rec, SEL_MenuHandler selector)$/;"	f	class:CCMenuItem	signature:(CCObject *rec, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemAtlasFont * CCMenuItemAtlasFont::create(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap)$/;"	f	class:CCMenuItemAtlasFont	signature:(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemAtlasFont * CCMenuItemAtlasFont::create(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemAtlasFont	signature:(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemFont * CCMenuItemFont::create(const char *value)$/;"	f	class:CCMenuItemFont	signature:(const char *value)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemFont * CCMenuItemFont::create(const char *value, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemFont	signature:(const char *value, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::create(const char *normalImage, const char *selectedImage)$/;"	f	class:CCMenuItemImage	signature:(const char *normalImage, const char *selectedImage)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::create(const char *normalImage, const char *selectedImage, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemImage	signature:(const char *normalImage, const char *selectedImage, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::create(const char *normalImage, const char *selectedImage, const char *disabledImage)$/;"	f	class:CCMenuItemImage	signature:(const char *normalImage, const char *selectedImage, const char *disabledImage)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::create(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemImage	signature:(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage* CCMenuItemImage::create()$/;"	f	class:CCMenuItemImage	signature:()
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemLabel * CCMenuItemLabel::create(CCNode*label, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemLabel	signature:(CCNode*label, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemLabel* CCMenuItemLabel::create(CCNode *label)$/;"	f	class:CCMenuItemLabel	signature:(CCNode *label)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemSprite * CCMenuItemSprite::create(CCNode *normalSprite, CCNode *selectedSprite, CCNode *disabledSprite, CCObject *target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemSprite	signature:(CCNode *normalSprite, CCNode *selectedSprite, CCNode *disabledSprite, CCObject *target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemSprite * CCMenuItemSprite::create(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite)$/;"	f	class:CCMenuItemSprite	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemSprite * CCMenuItemSprite::create(CCNode* normalSprite, CCNode* selectedSprite, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemSprite	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle * CCMenuItemToggle::create()$/;"	f	class:CCMenuItemToggle	signature:()
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle* CCMenuItemToggle::create(CCMenuItem *item)$/;"	f	class:CCMenuItemToggle	signature:(CCMenuItem *item)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItem* create();$/;"	p	class:CCMenuItem	access:public	signature:()
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItem* create(CCObject *rec, SEL_MenuHandler selector);$/;"	p	class:CCMenuItem	access:public	signature:(CCObject *rec, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemAtlasFont* create(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap);$/;"	p	class:CCMenuItemAtlasFont	access:public	signature:(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemAtlasFont* create(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemAtlasFont	access:public	signature:(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemFont * create(const char *value);$/;"	p	class:CCMenuItemFont	access:public	signature:(const char *value)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemFont * create(const char *value, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemFont	access:public	signature:(const char *value, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemImage* create();$/;"	p	class:CCMenuItemImage	access:public	signature:()
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemImage* create(const char *normalImage, const char *selectedImage);$/;"	p	class:CCMenuItemImage	access:public	signature:(const char *normalImage, const char *selectedImage)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemImage* create(const char *normalImage, const char *selectedImage, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemImage	access:public	signature:(const char *normalImage, const char *selectedImage, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemImage* create(const char *normalImage, const char *selectedImage, const char *disabledImage);$/;"	p	class:CCMenuItemImage	access:public	signature:(const char *normalImage, const char *selectedImage, const char *disabledImage)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemImage* create(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemImage	access:public	signature:(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemLabel * create(CCNode*label, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemLabel	access:public	signature:(CCNode*label, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemLabel* create(CCNode *label);$/;"	p	class:CCMenuItemLabel	access:public	signature:(CCNode *label)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemSprite * create(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite = NULL);$/;"	p	class:CCMenuItemSprite	access:public	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite = NULL)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemSprite * create(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemSprite	access:public	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemSprite * create(CCNode* normalSprite, CCNode* selectedSprite, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemSprite	access:public	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCObject* target, SEL_MenuHandler selector)
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemToggle* create();$/;"	p	class:CCMenuItemToggle	access:public	signature:()
create	menu_nodes/CCMenuItem.h	/^    static CCMenuItemToggle* create(CCMenuItem *item);$/;"	p	class:CCMenuItemToggle	access:public	signature:(CCMenuItem *item)
create	misc_nodes/CCClippingNode.cpp	/^CCClippingNode* CCClippingNode::create()$/;"	f	class:CCClippingNode	signature:()
create	misc_nodes/CCClippingNode.cpp	/^CCClippingNode* CCClippingNode::create(CCNode *pStencil)$/;"	f	class:CCClippingNode	signature:(CCNode *pStencil)
create	misc_nodes/CCClippingNode.h	/^    static CCClippingNode* create();$/;"	p	class:CCClippingNode	access:public	signature:()
create	misc_nodes/CCClippingNode.h	/^    static CCClippingNode* create(CCNode *pStencil);$/;"	p	class:CCClippingNode	access:public	signature:(CCNode *pStencil)
create	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak* CCMotionStreak::create(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)$/;"	f	class:CCMotionStreak	signature:(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)
create	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak* CCMotionStreak::create(float fade, float minSeg, float stroke, ccColor3B color, const char* path)$/;"	f	class:CCMotionStreak	signature:(float fade, float minSeg, float stroke, ccColor3B color, const char* path)
create	misc_nodes/CCMotionStreak.h	/^    static CCMotionStreak* create(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture);$/;"	p	class:CCMotionStreak	access:public	signature:(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)
create	misc_nodes/CCMotionStreak.h	/^    static CCMotionStreak* create(float fade, float minSeg, float stroke, ccColor3B color, const char* path);$/;"	p	class:CCMotionStreak	access:public	signature:(float fade, float minSeg, float stroke, ccColor3B color, const char* path)
create	misc_nodes/CCProgressTimer.cpp	/^CCProgressTimer* CCProgressTimer::create(CCSprite* sp)$/;"	f	class:CCProgressTimer	signature:(CCSprite* sp)
create	misc_nodes/CCProgressTimer.h	/^    static CCProgressTimer* create(CCSprite* sp);$/;"	p	class:CCProgressTimer	access:public	signature:(CCSprite* sp)
create	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture * CCRenderTexture::create(int w ,int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)$/;"	f	class:CCRenderTexture	signature:(int w ,int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)
create	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture * CCRenderTexture::create(int w, int h)$/;"	f	class:CCRenderTexture	signature:(int w, int h)
create	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture * CCRenderTexture::create(int w, int h, CCTexture2DPixelFormat eFormat)$/;"	f	class:CCRenderTexture	signature:(int w, int h, CCTexture2DPixelFormat eFormat)
create	misc_nodes/CCRenderTexture.h	/^    static CCRenderTexture * create(int w ,int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat);$/;"	p	class:CCRenderTexture	access:public	signature:(int w ,int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)
create	misc_nodes/CCRenderTexture.h	/^    static CCRenderTexture * create(int w, int h);$/;"	p	class:CCRenderTexture	access:public	signature:(int w, int h)
create	misc_nodes/CCRenderTexture.h	/^    static CCRenderTexture * create(int w, int h, CCTexture2DPixelFormat eFormat);$/;"	p	class:CCRenderTexture	access:public	signature:(int w, int h, CCTexture2DPixelFormat eFormat)
create	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode* CCParticleBatchNode::create(const char* imageFile, unsigned int capacity\/* = kCCParticleDefaultCapacity*\/)$/;"	f	class:CCParticleBatchNode	signature:(const char* imageFile, unsigned int capacity )
create	particle_nodes/CCParticleBatchNode.h	/^    static CCParticleBatchNode* create(const char* fileImage, unsigned int capacity = kCCParticleDefaultCapacity);$/;"	p	class:CCParticleBatchNode	access:public	signature:(const char* fileImage, unsigned int capacity = kCCParticleDefaultCapacity)
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleExplosion* CCParticleExplosion::create()$/;"	f	class:CCParticleExplosion	signature:()
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleFire* CCParticleFire::create()$/;"	f	class:CCParticleFire	signature:()
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleFireworks* CCParticleFireworks::create()$/;"	f	class:CCParticleFireworks	signature:()
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleFlower* CCParticleFlower::create()$/;"	f	class:CCParticleFlower	signature:()
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleGalaxy* CCParticleGalaxy::create()$/;"	f	class:CCParticleGalaxy	signature:()
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleMeteor * CCParticleMeteor::create()$/;"	f	class:CCParticleMeteor	signature:()
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleRain* CCParticleRain::create()$/;"	f	class:CCParticleRain	signature:()
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleSmoke* CCParticleSmoke::create()$/;"	f	class:CCParticleSmoke	signature:()
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleSnow* CCParticleSnow::create()$/;"	f	class:CCParticleSnow	signature:()
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleSpiral* CCParticleSpiral::create()$/;"	f	class:CCParticleSpiral	signature:()
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleSun* CCParticleSun::create()$/;"	f	class:CCParticleSun	signature:()
create	particle_nodes/CCParticleExamples.h	/^    static CCParticleExplosion* create();$/;"	p	class:CCParticleExplosion	access:public	signature:()
create	particle_nodes/CCParticleExamples.h	/^    static CCParticleFire* create();$/;"	p	class:CCParticleFire	access:public	signature:()
create	particle_nodes/CCParticleExamples.h	/^    static CCParticleFireworks* create();$/;"	p	class:CCParticleFireworks	access:public	signature:()
create	particle_nodes/CCParticleExamples.h	/^    static CCParticleFlower* create();$/;"	p	class:CCParticleFlower	access:public	signature:()
create	particle_nodes/CCParticleExamples.h	/^    static CCParticleGalaxy* create();$/;"	p	class:CCParticleGalaxy	access:public	signature:()
create	particle_nodes/CCParticleExamples.h	/^    static CCParticleMeteor * create();$/;"	p	class:CCParticleMeteor	access:public	signature:()
create	particle_nodes/CCParticleExamples.h	/^    static CCParticleRain* create();$/;"	p	class:CCParticleRain	access:public	signature:()
create	particle_nodes/CCParticleExamples.h	/^    static CCParticleSmoke* create();$/;"	p	class:CCParticleSmoke	access:public	signature:()
create	particle_nodes/CCParticleExamples.h	/^    static CCParticleSnow* create();$/;"	p	class:CCParticleSnow	access:public	signature:()
create	particle_nodes/CCParticleExamples.h	/^    static CCParticleSpiral* create();$/;"	p	class:CCParticleSpiral	access:public	signature:()
create	particle_nodes/CCParticleExamples.h	/^    static CCParticleSun* create();$/;"	p	class:CCParticleSun	access:public	signature:()
create	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem * CCParticleSystem::create(const char *plistFile)$/;"	f	class:CCParticleSystem	signature:(const char *plistFile)
create	particle_nodes/CCParticleSystem.h	/^    static CCParticleSystem * create(const char *plistFile);$/;"	p	class:CCParticleSystem	access:public	signature:(const char *plistFile)
create	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad * CCParticleSystemQuad::create() {$/;"	f	class:CCParticleSystemQuad	signature:()
create	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad * CCParticleSystemQuad::create(const char *plistFile)$/;"	f	class:CCParticleSystemQuad	signature:(const char *plistFile)
create	particle_nodes/CCParticleSystemQuad.h	/^    static CCParticleSystemQuad * create();$/;"	p	class:CCParticleSystemQuad	access:public	signature:()
create	particle_nodes/CCParticleSystemQuad.h	/^    static CCParticleSystemQuad * create(const char *plistFile);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(const char *plistFile)
create	script_support/CCScriptSupport.cpp	/^CCSchedulerScriptHandlerEntry* CCSchedulerScriptHandlerEntry::create(int nHandler, float fInterval, bool bPaused)$/;"	f	class:CCSchedulerScriptHandlerEntry	signature:(int nHandler, float fInterval, bool bPaused)
create	script_support/CCScriptSupport.cpp	/^CCScriptHandlerEntry* CCScriptHandlerEntry::create(int nHandler)$/;"	f	class:CCScriptHandlerEntry	signature:(int nHandler)
create	script_support/CCScriptSupport.cpp	/^CCTouchScriptHandlerEntry* CCTouchScriptHandlerEntry::create(int nHandler,$/;"	f	class:CCTouchScriptHandlerEntry	signature:(int nHandler, bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)
create	script_support/CCScriptSupport.h	/^    static CCSchedulerScriptHandlerEntry* create(int nHandler, float fInterval, bool bPaused);$/;"	p	class:CCSchedulerScriptHandlerEntry	access:public	signature:(int nHandler, float fInterval, bool bPaused)
create	script_support/CCScriptSupport.h	/^    static CCScriptHandlerEntry* create(int nHandler);$/;"	p	class:CCScriptHandlerEntry	access:public	signature:(int nHandler)
create	script_support/CCScriptSupport.h	/^    static CCTouchScriptHandlerEntry* create(int nHandler, bool bIsMultiTouches, int nPriority, bool bSwallowsTouches);$/;"	p	class:CCTouchScriptHandlerEntry	access:public	signature:(int nHandler, bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)
create	sprite_nodes/CCAnimation.cpp	/^CCAnimation* CCAnimation::create(CCArray* arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops)$/;"	f	class:CCAnimation	signature:(CCArray* arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops)
create	sprite_nodes/CCAnimation.cpp	/^CCAnimation* CCAnimation::create(void)$/;"	f	class:CCAnimation	signature:(void)
create	sprite_nodes/CCAnimation.h	/^    static CCAnimation* create(CCArray *arrayOfAnimationFrameNames, float delayPerUnit) {$/;"	f	class:CCAnimation	access:public	signature:(CCArray *arrayOfAnimationFrameNames, float delayPerUnit)
create	sprite_nodes/CCAnimation.h	/^    static CCAnimation* create(CCArray *arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops);$/;"	p	class:CCAnimation	access:public	signature:(CCArray *arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops)
create	sprite_nodes/CCAnimation.h	/^    static CCAnimation* create(void);$/;"	p	class:CCAnimation	access:public	signature:(void)
create	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::create()$/;"	f	class:CCSprite	signature:()
create	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::create(const char *pszFileName)$/;"	f	class:CCSprite	signature:(const char *pszFileName)
create	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::create(const char *pszFileName, const CCRect& rect)$/;"	f	class:CCSprite	signature:(const char *pszFileName, const CCRect& rect)
create	sprite_nodes/CCSprite.h	/^    static CCSprite* create();$/;"	p	class:CCSprite	access:public	signature:()
create	sprite_nodes/CCSprite.h	/^    static CCSprite* create(const char *pszFileName);$/;"	p	class:CCSprite	access:public	signature:(const char *pszFileName)
create	sprite_nodes/CCSprite.h	/^    static CCSprite* create(const char *pszFileName, const CCRect& rect);$/;"	p	class:CCSprite	access:public	signature:(const char *pszFileName, const CCRect& rect)
create	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode* CCSpriteBatchNode::create(const char *fileImage, unsigned int capacity\/* = kDefaultSpriteBatchCapacity*\/)$/;"	f	class:CCSpriteBatchNode	signature:(const char *fileImage, unsigned int capacity )
create	sprite_nodes/CCSpriteBatchNode.h	/^    static CCSpriteBatchNode* create(const char* fileImage) {$/;"	f	class:CCSpriteBatchNode	access:public	signature:(const char* fileImage)
create	sprite_nodes/CCSpriteBatchNode.h	/^    static CCSpriteBatchNode* create(const char* fileImage, unsigned int capacity);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(const char* fileImage, unsigned int capacity)
create	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::create(const char* filename, const CCRect& rect)$/;"	f	class:CCSpriteFrame	signature:(const char* filename, const CCRect& rect)
create	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::create(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame	signature:(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
create	sprite_nodes/CCSpriteFrame.h	/^    static CCSpriteFrame* create(const char* filename, const CCRect& rect);$/;"	p	class:CCSpriteFrame	access:public	signature:(const char* filename, const CCRect& rect)
create	sprite_nodes/CCSpriteFrame.h	/^    static CCSpriteFrame* create(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize);$/;"	p	class:CCSpriteFrame	access:public	signature:(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
create	textures/CCTextureAtlas.cpp	/^CCTextureAtlas * CCTextureAtlas::create(const char* file, unsigned int capacity)$/;"	f	class:CCTextureAtlas	signature:(const char* file, unsigned int capacity)
create	textures/CCTextureAtlas.h	/^    static CCTextureAtlas* create(const char* file , unsigned int capacity);$/;"	p	class:CCTextureAtlas	access:public	signature:(const char* file , unsigned int capacity)
create	textures/CCTexturePVR.h	/^    static CCTexturePVR* create(const char* path);$/;"	p	class:CCTexturePVR	access:public	signature:(const char* path)
create	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCParallaxNode * CCParallaxNode::create()$/;"	f	class:CCParallaxNode	signature:()
create	tilemap_parallax_nodes/CCParallaxNode.h	/^    static CCParallaxNode * create();$/;"	p	class:CCParallaxNode	access:public	signature:()
create	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXLayer * CCTMXLayer::create(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXLayer	signature:(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
create	tilemap_parallax_nodes/CCTMXLayer.h	/^    static CCTMXLayer * create(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo);$/;"	p	class:CCTMXLayer	access:public	signature:(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
create	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap * CCTMXTiledMap::create(const char *tmxFile)$/;"	f	class:CCTMXTiledMap	signature:(const char *tmxFile)
create	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    static CCTMXTiledMap* create(const char *tmxFile);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char *tmxFile)
create	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^CCTileMapAtlas * CCTileMapAtlas::create(const char *tile, const char *mapFile, int tileWidth, int tileHeight)$/;"	f	class:CCTileMapAtlas	signature:(const char *tile, const char *mapFile, int tileWidth, int tileHeight)
create	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    static CCTileMapAtlas * create(const char *tile, const char *mapFile, int tileWidth, int tileHeight);$/;"	p	class:CCTileMapAtlas	access:public	signature:(const char *tile, const char *mapFile, int tileWidth, int tileHeight)
createAndAddTimerWithName	support/CCProfiling.cpp	/^CCProfilingTimer* CCProfiler::createAndAddTimerWithName(const char* timerName)$/;"	f	class:CCProfiler	signature:(const char* timerName)
createAndAddTimerWithName	support/CCProfiling.h	/^    CCProfilingTimer* createAndAddTimerWithName(const char* timerName);$/;"	p	class:CCProfiler	access:public	signature:(const char* timerName)
createAutoreleasePool	platform/CCThread.cpp	/^void CCThread::createAutoreleasePool()$/;"	f	class:CCThread	signature:()
createAutoreleasePool	platform/CCThread.h	/^    void createAutoreleasePool();$/;"	p	class:CCThread	access:public	signature:()
createCCArrayWithContentsOfFile	platform/CCFileUtils.cpp	/^CCArray* CCFileUtils::createCCArrayWithContentsOfFile(const std::string& filename)$/;"	f	class:CCFileUtils	signature:(const std::string& filename)
createCCArrayWithContentsOfFile	platform/CCFileUtils.h	/^    virtual CCArray* createCCArrayWithContentsOfFile(const std::string& filename);$/;"	p	class:CCFileUtils	access:protected	signature:(const std::string& filename)
createCCDictionaryWithContentsOfFile	platform/CCFileUtils.cpp	/^CCDictionary* CCFileUtils::createCCDictionaryWithContentsOfFile(const std::string& filename)$/;"	f	class:CCFileUtils	signature:(const std::string& filename)
createCCDictionaryWithContentsOfFile	platform/CCFileUtils.h	/^    virtual CCDictionary* createCCDictionaryWithContentsOfFile(const std::string& filename);$/;"	p	class:CCFileUtils	access:protected	signature:(const std::string& filename)
createFontChars	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::createFontChars()$/;"	f	class:CCLabelBMFont	signature:()
createFontChars	label_nodes/CCLabelBMFont.h	/^    void createFontChars();$/;"	p	class:CCLabelBMFont	access:public	signature:()
createGLTexture	textures/CCTexturePVR.h	/^    bool createGLTexture();$/;"	p	class:CCTexturePVR	access:private	signature:()
createStatsLabel	CCDirector.cpp	/^void CCDirector::createStatsLabel()$/;"	f	class:CCDirector	signature:()
createStatsLabel	CCDirector.h	/^    void createStatsLabel();$/;"	p	class:CCDirector	access:protected	signature:()
createWithArray	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithArray(CCArray* otherArray)$/;"	f	class:CCArray	signature:(CCArray* otherArray)
createWithArray	cocoa/CCArray.h	/^    static CCArray* createWithArray(CCArray* otherArray);$/;"	p	class:CCArray	access:public	signature:(CCArray* otherArray)
createWithArray	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex* CCLayerMultiplex::createWithArray(CCArray* arrayOfLayers)$/;"	f	class:CCLayerMultiplex	signature:(CCArray* arrayOfLayers)
createWithArray	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerMultiplex* createWithArray(CCArray* arrayOfLayers);$/;"	p	class:CCLayerMultiplex	access:public	signature:(CCArray* arrayOfLayers)
createWithArray	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::createWithArray(CCArray* pArrayOfItems)$/;"	f	class:CCMenu	signature:(CCArray* pArrayOfItems)
createWithArray	menu_nodes/CCMenu.h	/^    static CCMenu* createWithArray(CCArray* pArrayOfItems);$/;"	p	class:CCMenu	access:public	signature:(CCArray* pArrayOfItems)
createWithCapacity	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithCapacity(unsigned int capacity)$/;"	f	class:CCArray	signature:(unsigned int capacity)
createWithCapacity	cocoa/CCArray.h	/^    static CCArray* createWithCapacity(unsigned int capacity);$/;"	p	class:CCArray	access:public	signature:(unsigned int capacity)
createWithContentsOfFile	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithContentsOfFile(const char* pFileName)$/;"	f	class:CCArray	signature:(const char* pFileName)
createWithContentsOfFile	cocoa/CCArray.h	/^    static CCArray* createWithContentsOfFile(const char* pFileName);$/;"	p	class:CCArray	access:public	signature:(const char* pFileName)
createWithContentsOfFile	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::createWithContentsOfFile(const char *pFileName)$/;"	f	class:CCDictionary	signature:(const char *pFileName)
createWithContentsOfFile	cocoa/CCDictionary.h	/^    static CCDictionary* createWithContentsOfFile(const char *pFileName);$/;"	p	class:CCDictionary	access:public	signature:(const char *pFileName)
createWithContentsOfFile	cocoa/CCString.cpp	/^CCString* CCString::createWithContentsOfFile(const char* pszFileName)$/;"	f	class:CCString	signature:(const char* pszFileName)
createWithContentsOfFile	cocoa/CCString.h	/^    static CCString* createWithContentsOfFile(const char* pszFileName);$/;"	p	class:CCString	access:public	signature:(const char* pszFileName)
createWithContentsOfFileThreadSafe	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithContentsOfFileThreadSafe(const char* pFileName)$/;"	f	class:CCArray	signature:(const char* pFileName)
createWithContentsOfFileThreadSafe	cocoa/CCArray.h	/^    static CCArray* createWithContentsOfFileThreadSafe(const char* pFileName);$/;"	p	class:CCArray	access:public	signature:(const char* pFileName)
createWithContentsOfFileThreadSafe	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::createWithContentsOfFileThreadSafe(const char *pFileName)$/;"	f	class:CCDictionary	signature:(const char *pFileName)
createWithContentsOfFileThreadSafe	cocoa/CCDictionary.h	/^    static CCDictionary* createWithContentsOfFileThreadSafe(const char *pFileName);$/;"	p	class:CCDictionary	access:public	signature:(const char *pFileName)
createWithData	cocoa/CCString.cpp	/^CCString* CCString::createWithData(const unsigned char* pData, unsigned long nLen)$/;"	f	class:CCString	signature:(const unsigned char* pData, unsigned long nLen)
createWithData	cocoa/CCString.h	/^    static CCString* createWithData(const unsigned char* pData, unsigned long nLen);$/;"	p	class:CCString	access:public	signature:(const unsigned char* pData, unsigned long nLen)
createWithDictionary	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::createWithDictionary(CCDictionary* srcDict)$/;"	f	class:CCDictionary	signature:(CCDictionary* srcDict)
createWithDictionary	cocoa/CCDictionary.h	/^    static CCDictionary* createWithDictionary(CCDictionary* srcDict);$/;"	p	class:CCDictionary	access:public	signature:(CCDictionary* srcDict)
createWithFormat	cocoa/CCString.cpp	/^CCString* CCString::createWithFormat(const char* format, ...)$/;"	f	class:CCString	signature:(const char* format, ...)
createWithFormat	cocoa/CCString.h	/^    static CCString* createWithFormat(const char* format, ...);$/;"	p	class:CCString	access:public	signature:(const char* format, ...)
createWithItem	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::createWithItem(CCMenuItem* item)$/;"	f	class:CCMenu	signature:(CCMenuItem* item)
createWithItem	menu_nodes/CCMenu.h	/^    static CCMenu* createWithItem(CCMenuItem* item);$/;"	p	class:CCMenu	access:public	signature:(CCMenuItem* item)
createWithItems	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::createWithItems(CCMenuItem* item, va_list args)$/;"	f	class:CCMenu	signature:(CCMenuItem* item, va_list args)
createWithItems	menu_nodes/CCMenu.h	/^    static CCMenu* createWithItems(CCMenuItem *firstItem, va_list args);$/;"	p	class:CCMenu	access:public	signature:(CCMenuItem *firstItem, va_list args)
createWithLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex * CCLayerMultiplex::createWithLayer(CCLayer* layer)$/;"	f	class:CCLayerMultiplex	signature:(CCLayer* layer)
createWithLayer	layers_scenes_transitions_nodes/CCLayer.h	/^    static CCLayerMultiplex * createWithLayer(CCLayer* layer);$/;"	p	class:CCLayerMultiplex	access:public	signature:(CCLayer* layer)
createWithObject	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithObject(CCObject* pObject)$/;"	f	class:CCArray	signature:(CCObject* pObject)
createWithObject	cocoa/CCArray.h	/^    static CCArray* createWithObject(CCObject* pObject);$/;"	p	class:CCArray	access:public	signature:(CCObject* pObject)
createWithSpriteFrame	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::createWithSpriteFrame(CCSpriteFrame *pSpriteFrame)$/;"	f	class:CCSprite	signature:(CCSpriteFrame *pSpriteFrame)
createWithSpriteFrame	sprite_nodes/CCSprite.h	/^    static CCSprite* createWithSpriteFrame(CCSpriteFrame *pSpriteFrame);$/;"	p	class:CCSprite	access:public	signature:(CCSpriteFrame *pSpriteFrame)
createWithSpriteFrameName	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::createWithSpriteFrameName(const char *pszSpriteFrameName)$/;"	f	class:CCSprite	signature:(const char *pszSpriteFrameName)
createWithSpriteFrameName	sprite_nodes/CCSprite.h	/^    static CCSprite* createWithSpriteFrameName(const char *pszSpriteFrameName);$/;"	p	class:CCSprite	access:public	signature:(const char *pszSpriteFrameName)
createWithSpriteFrames	sprite_nodes/CCAnimation.cpp	/^CCAnimation* CCAnimation::createWithSpriteFrames(CCArray *frames, float delay\/* = 0.0f*\/)$/;"	f	class:CCAnimation	signature:(CCArray *frames, float delay )
createWithSpriteFrames	sprite_nodes/CCAnimation.h	/^    static CCAnimation* createWithSpriteFrames(CCArray* arrayOfSpriteFrameNames, float delay = 0.0f);$/;"	p	class:CCAnimation	access:public	signature:(CCArray* arrayOfSpriteFrameNames, float delay = 0.0f)
createWithTarget	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle * CCMenuItemToggle::createWithTarget(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, ...)$/;"	f	class:CCMenuItemToggle	signature:(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, ...)
createWithTarget	menu_nodes/CCMenuItem.h	/^    static CCMenuItemToggle* createWithTarget(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, ...);  $/;"	p	class:CCMenuItemToggle	access:public	signature:(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, ...)
createWithTexture	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode* CCParticleBatchNode::createWithTexture(CCTexture2D *tex, unsigned int capacity\/* = kCCParticleDefaultCapacity*\/)$/;"	f	class:CCParticleBatchNode	signature:(CCTexture2D *tex, unsigned int capacity )
createWithTexture	particle_nodes/CCParticleBatchNode.h	/^    static CCParticleBatchNode* createWithTexture(CCTexture2D *tex, unsigned int capacity = kCCParticleDefaultCapacity);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCTexture2D *tex, unsigned int capacity = kCCParticleDefaultCapacity)
createWithTexture	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::createWithTexture(CCTexture2D *pTexture)$/;"	f	class:CCSprite	signature:(CCTexture2D *pTexture)
createWithTexture	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::createWithTexture(CCTexture2D *pTexture, const CCRect& rect)$/;"	f	class:CCSprite	signature:(CCTexture2D *pTexture, const CCRect& rect)
createWithTexture	sprite_nodes/CCSprite.h	/^    static CCSprite* createWithTexture(CCTexture2D *pTexture);$/;"	p	class:CCSprite	access:public	signature:(CCTexture2D *pTexture)
createWithTexture	sprite_nodes/CCSprite.h	/^    static CCSprite* createWithTexture(CCTexture2D *pTexture, const CCRect& rect);$/;"	p	class:CCSprite	access:public	signature:(CCTexture2D *pTexture, const CCRect& rect)
createWithTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode* CCSpriteBatchNode::createWithTexture(CCTexture2D* tex, unsigned int capacity\/* = kDefaultSpriteBatchCapacity*\/)$/;"	f	class:CCSpriteBatchNode	signature:(CCTexture2D* tex, unsigned int capacity )
createWithTexture	sprite_nodes/CCSpriteBatchNode.h	/^    static CCSpriteBatchNode* createWithTexture(CCTexture2D* tex) {$/;"	f	class:CCSpriteBatchNode	access:public	signature:(CCTexture2D* tex)
createWithTexture	sprite_nodes/CCSpriteBatchNode.h	/^    static CCSpriteBatchNode* createWithTexture(CCTexture2D* tex, unsigned int capacity);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCTexture2D* tex, unsigned int capacity)
createWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::createWithTexture(CCTexture2D *pobTexture, const CCRect& rect)$/;"	f	class:CCSpriteFrame	signature:(CCTexture2D *pobTexture, const CCRect& rect)
createWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::createWithTexture(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame	signature:(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
createWithTexture	sprite_nodes/CCSpriteFrame.h	/^    static CCSpriteFrame* createWithTexture(CCTexture2D* pobTexture, const CCRect& rect);$/;"	p	class:CCSpriteFrame	access:public	signature:(CCTexture2D* pobTexture, const CCRect& rect)
createWithTexture	sprite_nodes/CCSpriteFrame.h	/^    static CCSpriteFrame* createWithTexture(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize);$/;"	p	class:CCSpriteFrame	access:public	signature:(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
createWithTexture	textures/CCTextureAtlas.cpp	/^CCTextureAtlas * CCTextureAtlas::createWithTexture(CCTexture2D *texture, unsigned int capacity)$/;"	f	class:CCTextureAtlas	signature:(CCTexture2D *texture, unsigned int capacity)
createWithTexture	textures/CCTextureAtlas.h	/^    static CCTextureAtlas* createWithTexture(CCTexture2D *texture, unsigned int capacity);$/;"	p	class:CCTextureAtlas	access:public	signature:(CCTexture2D *texture, unsigned int capacity)
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleExplosion* CCParticleExplosion::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleExplosion	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleFire* CCParticleFire::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFire	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleFireworks* CCParticleFireworks::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFireworks	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleFlower* CCParticleFlower::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFlower	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleGalaxy* CCParticleGalaxy::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleGalaxy	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleMeteor* CCParticleMeteor::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleMeteor	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleRain* CCParticleRain::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleRain	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleSmoke* CCParticleSmoke::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSmoke	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleSnow* CCParticleSnow::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSnow	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleSpiral* CCParticleSpiral::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSpiral	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleSun* CCParticleSun::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSun	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleExplosion* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleExplosion	access:public	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleFire* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleFire	access:public	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleFireworks* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleFireworks	access:public	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleFlower* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleFlower	access:public	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleGalaxy* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleGalaxy	access:public	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleMeteor* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleMeteor	access:public	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleRain* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleRain	access:public	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleSmoke* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSmoke	access:public	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleSnow* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSnow	access:public	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleSpiral* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSpiral	access:public	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    static CCParticleSun* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSun	access:public	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem* CCParticleSystem::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSystem	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleSystem.h	/^    static CCParticleSystem* createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSystem	access:public	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad * CCParticleSystemQuad::createWithTotalParticles(unsigned int numberOfParticles) {$/;"	f	class:CCParticleSystemQuad	signature:(unsigned int numberOfParticles)
createWithTotalParticles	particle_nodes/CCParticleSystemQuad.h	/^    static CCParticleSystemQuad * createWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(unsigned int numberOfParticles)
createWithTwoActions	actions/CCActionInterval.cpp	/^CCSequence* CCSequence::createWithTwoActions(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)$/;"	f	class:CCSequence	signature:(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)
createWithTwoActions	actions/CCActionInterval.cpp	/^CCSpawn* CCSpawn::createWithTwoActions(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)$/;"	f	class:CCSpawn	signature:(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)
createWithTwoActions	actions/CCActionInterval.h	/^    static CCSequence* createWithTwoActions(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo);$/;"	p	class:CCSequence	access:public	signature:(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)
createWithTwoActions	actions/CCActionInterval.h	/^    static CCSpawn* createWithTwoActions(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2);$/;"	p	class:CCSpawn	access:public	signature:(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)
createWithVariableList	actions/CCActionInterval.cpp	/^CCSequence* CCSequence::createWithVariableList(CCFiniteTimeAction *pAction1, va_list args)$/;"	f	class:CCSequence	signature:(CCFiniteTimeAction *pAction1, va_list args)
createWithVariableList	actions/CCActionInterval.cpp	/^CCSpawn* CCSpawn::createWithVariableList(CCFiniteTimeAction *pAction1, va_list args)$/;"	f	class:CCSpawn	signature:(CCFiniteTimeAction *pAction1, va_list args)
createWithVariableList	actions/CCActionInterval.h	/^    static CCSequence* createWithVariableList(CCFiniteTimeAction *pAction1, va_list args);$/;"	p	class:CCSequence	access:public	signature:(CCFiniteTimeAction *pAction1, va_list args)
createWithVariableList	actions/CCActionInterval.h	/^    static CCSpawn* createWithVariableList(CCFiniteTimeAction *pAction1, va_list args);$/;"	p	class:CCSpawn	access:public	signature:(CCFiniteTimeAction *pAction1, va_list args)
createWithXML	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap* CCTMXTiledMap::createWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXTiledMap	signature:(const char* tmxString, const char* resourcePath)
createWithXML	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    static CCTMXTiledMap* createWithXML(const char* tmxString, const char* resourcePath);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char* tmxString, const char* resourcePath)
createXMLFile	support/user_default/CCUserDefault.cpp	/^bool CCUserDefault::createXMLFile()$/;"	f	class:CCUserDefault	signature:()
createXMLFile	support/user_default/CCUserDefault.h	/^    static bool createXMLFile();$/;"	p	class:CCUserDefault	access:private	signature:()
createXMLFile	support/user_default/CCUserDefaultAndroid.cpp	/^bool CCUserDefault::createXMLFile()$/;"	f	class:CCUserDefault	signature:()
cur_file_info	support/zip_support/unzip.cpp	/^    unz_file_info64 cur_file_info; \/* public info about the current file in zip*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
cur_file_info_internal	support/zip_support/unzip.cpp	/^    unz_file_info64_internal cur_file_info_internal; \/* private info about it*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
currentAction	actions/CCActionManager.cpp	/^    CCAction                    *currentAction;$/;"	m	struct:_hashElement	file:	access:public
currentActionSalvaged	actions/CCActionManager.cpp	/^    bool                        currentActionSalvaged;$/;"	m	struct:_hashElement	file:	access:public
currentTimer	CCScheduler.cpp	/^    CCTimer             *currentTimer;$/;"	m	struct:_hashSelectorEntry	file:	access:public
currentTimerSalvaged	CCScheduler.cpp	/^    bool                currentTimerSalvaged;$/;"	m	struct:_hashSelectorEntry	file:	access:public
current_file_ok	support/zip_support/unzip.cpp	/^    ZPOS64_T current_file_ok;      \/* flag about the usability of the current file*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
current_stack	kazmath/src/GL/matrix.c	/^km_mat4_stack* current_stack = NULL;$/;"	v
d	cocoa/CCAffineTransform.h	/^  float a, b, c, d;$/;"	m	struct:CCAffineTransform	access:public
d	kazmath/include/kazmath/plane.h	/^    kmScalar     a, b, c, d;$/;"	m	struct:kmPlane	access:public
data	cocoa/CCArray.h	/^    ccArray* data;$/;"	m	class:CCArray	access:public
data	platform/CCImageCommon_cpp.h	/^    unsigned char* data;$/;"	m	struct:__anon30	access:public
dataLength	textures/CCTexturePVR.cpp	/^    unsigned int dataLength;$/;"	m	struct:_PVRTexHeader	file:	access:public
defaultAlphaPixelFormat	textures/CCTexture2D.cpp	/^CCTexture2DPixelFormat CCTexture2D::defaultAlphaPixelFormat()$/;"	f	class:CCTexture2D	signature:()
defaultAlphaPixelFormat	textures/CCTexture2D.h	/^    static CCTexture2DPixelFormat defaultAlphaPixelFormat();$/;"	p	class:CCTexture2D	access:public	signature:()
degreesPerSecond	particle_nodes/CCParticleSystem.h	/^        float        degreesPerSecond;$/;"	m	struct:sCCParticle::__anon23	access:public
delay	include/ccTypes.h	/^    float delay;$/;"	m	struct:__anon8	access:public
deleteBackward	text_input_node/CCIMEDelegate.h	/^    virtual void deleteBackward() {}$/;"	f	class:CCIMEDelegate	access:protected	signature:()
deleteBackward	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::deleteBackward()$/;"	f	class:CCTextFieldTTF	signature:()
deleteBackward	text_input_node/CCTextFieldTTF.h	/^    virtual void deleteBackward();$/;"	p	class:CCTextFieldTTF	access:protected	signature:()
deleteHashElement	actions/CCActionManager.cpp	/^void CCActionManager::deleteHashElement(tHashElement *pElement)$/;"	f	class:CCActionManager	signature:(tHashElement *pElement)
deleteHashElement	actions/CCActionManager.h	/^    void deleteHashElement(struct _hashElement *pElement);$/;"	p	class:CCActionManager	access:protected	signature:(struct _hashElement *pElement)
delta	actions/CCActionTiledGrid.cpp	/^    CCSize    delta;$/;"	m	struct:Tile	file:	access:public
deltaColor	particle_nodes/CCParticleSystem.h	/^    ccColor4F    deltaColor;$/;"	m	struct:sCCParticle	access:public
deltaRadius	particle_nodes/CCParticleSystem.h	/^        float        deltaRadius;$/;"	m	struct:sCCParticle::__anon23	access:public
deltaRotation	particle_nodes/CCParticleSystem.h	/^    float        deltaRotation;$/;"	m	struct:sCCParticle	access:public
deltaSize	particle_nodes/CCParticleSystem.h	/^    float        deltaSize;$/;"	m	struct:sCCParticle	access:public
depth	textures/CCTexturePVR.cpp	/^	uint32_t depth;$/;"	m	struct:__anon56	file:	access:public
description	CCCamera.cpp	/^const char* CCCamera::description(void)$/;"	f	class:CCCamera	signature:(void)
description	CCCamera.h	/^    const char* description(void);$/;"	p	class:CCCamera	access:public	signature:(void)
description	actions/CCAction.cpp	/^const char* CCAction::description()$/;"	f	class:CCAction	signature:()
description	actions/CCAction.h	/^    const char* description();$/;"	p	class:CCAction	access:public	signature:()
description	base_nodes/CCNode.cpp	/^const char* CCNode::description()$/;"	f	class:CCNode	signature:()
description	base_nodes/CCNode.h	/^    const char* description(void);$/;"	p	class:CCNode	access:public	signature:(void)
description	label_nodes/CCLabelBMFont.cpp	/^const char* CCBMFontConfiguration::description(void)$/;"	f	class:CCBMFontConfiguration	signature:(void)
description	label_nodes/CCLabelBMFont.h	/^    const char * description();$/;"	p	class:CCBMFontConfiguration	access:public	signature:()
description	label_nodes/CCLabelTTF.cpp	/^const char* CCLabelTTF::description()$/;"	f	class:CCLabelTTF	signature:()
description	label_nodes/CCLabelTTF.h	/^    const char* description();    $/;"	p	class:CCLabelTTF	access:public	signature:()
description	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::description()$/;"	f	class:CCGLProgram	signature:()
description	shaders/CCGLProgram.h	/^    const char* description();$/;"	p	class:CCGLProgram	access:private	signature:()
description	support/CCProfiling.cpp	/^const char* CCProfilingTimer::description()$/;"	f	class:CCProfilingTimer	signature:()
description	support/CCProfiling.h	/^    const char* description(void);$/;"	p	class:CCProfilingTimer	access:public	signature:(void)
description	textures/CCTexture2D.cpp	/^const char* CCTexture2D::description(void)$/;"	f	class:CCTexture2D	signature:(void)
description	textures/CCTexture2D.h	/^    const char* description(void);$/;"	p	class:CCTexture2D	access:public	signature:(void)
description	textures/CCTextureAtlas.cpp	/^const char* CCTextureAtlas::description()$/;"	f	class:CCTextureAtlas	signature:()
description	textures/CCTextureAtlas.h	/^    const char* description();$/;"	p	class:CCTextureAtlas	access:public	signature:()
description	textures/CCTextureCache.cpp	/^const char* CCTextureCache::description()$/;"	f	class:CCTextureCache	signature:()
description	textures/CCTextureCache.h	/^    const char* description(void);$/;"	p	class:CCTextureCache	access:public	signature:(void)
detachChild	base_nodes/CCNode.cpp	/^void CCNode::detachChild(CCNode *child, bool doCleanup)$/;"	f	class:CCNode	signature:(CCNode *child, bool doCleanup)
detachChild	base_nodes/CCNode.h	/^    void detachChild(CCNode *child, bool doCleanup);$/;"	p	class:CCNode	access:private	signature:(CCNode *child, bool doCleanup)
detachDelegateWithIME	text_input_node/CCIMEDispatcher.cpp	/^bool CCIMEDispatcher::detachDelegateWithIME(CCIMEDelegate * pDelegate)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEDelegate * pDelegate)
detachDelegateWithIME	text_input_node/CCIMEDispatcher.h	/^    bool detachDelegateWithIME(CCIMEDelegate * pDelegate);$/;"	p	class:CCIMEDispatcher	access:protected	signature:(CCIMEDelegate * pDelegate)
detachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual bool detachWithIME();$/;"	p	class:CCIMEDelegate	access:public	signature:()
detachWithIME	text_input_node/CCIMEDispatcher.cpp	/^bool CCIMEDelegate::detachWithIME()$/;"	f	class:CCIMEDelegate	signature:()
detachWithIME	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::detachWithIME()$/;"	f	class:CCTextFieldTTF	signature:()
detachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool detachWithIME();$/;"	p	class:CCTextFieldTTF	access:public	signature:()
dictionaryWithContentsOfFile	platform/CCFileUtils.cpp	/^    CCDictionary* dictionaryWithContentsOfFile(const char *pFileName)$/;"	f	class:CCDictMaker	access:public	signature:(const char *pFileName)
didAccelerate	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::didAccelerate(CCAcceleration* pAccelerationValue)$/;"	f	class:CCLayer	signature:(CCAcceleration* pAccelerationValue)
didAccelerate	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void didAccelerate(CCAcceleration* pAccelerationValue);$/;"	p	class:CCLayer	access:public	signature:(CCAcceleration* pAccelerationValue)
didAccelerate	platform/CCAccelerometerDelegate.h	/^    virtual void didAccelerate(CCAcceleration* pAccelerationValue) {CC_UNUSED_PARAM(pAccelerationValue);}$/;"	f	class:CCAccelerometerDelegate	access:public	signature:(CCAcceleration* pAccelerationValue)
didAttachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual void didAttachWithIME() {}$/;"	f	class:CCIMEDelegate	access:protected	signature:()
didDetachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual void didDetachWithIME() {}$/;"	f	class:CCIMEDelegate	access:protected	signature:()
dir	kazmath/include/kazmath/ray2.h	/^    kmVec2 dir;$/;"	m	struct:kmRay2	access:public
dir	particle_nodes/CCParticleSystem.h	/^        CCPoint        dir;$/;"	m	struct:sCCParticle::__anon22	access:public
disableParticle	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::disableParticle(unsigned int particleIndex)$/;"	f	class:CCParticleBatchNode	signature:(unsigned int particleIndex)
disableParticle	particle_nodes/CCParticleBatchNode.h	/^    void disableParticle(unsigned int particleIndex);$/;"	p	class:CCParticleBatchNode	access:public	signature:(unsigned int particleIndex)
disk_num_start	support/zip_support/unzip.h	/^    uLong disk_num_start;       \/* disk number start               2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
disk_num_start	support/zip_support/unzip.h	/^    uLong disk_num_start;       \/* disk number start               2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
dispatchDeleteBackward	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchDeleteBackward()$/;"	f	class:CCIMEDispatcher	signature:()
dispatchDeleteBackward	text_input_node/CCIMEDispatcher.h	/^    void dispatchDeleteBackward();$/;"	p	class:CCIMEDispatcher	access:public	signature:()
dispatchInsertText	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchInsertText(const char * pText, int nLen)$/;"	f	class:CCIMEDispatcher	signature:(const char * pText, int nLen)
dispatchInsertText	text_input_node/CCIMEDispatcher.h	/^    void dispatchInsertText(const char * pText, int nLen);$/;"	p	class:CCIMEDispatcher	access:public	signature:(const char * pText, int nLen)
dispatchKeyboardDidHide	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchKeyboardDidHide(CCIMEKeyboardNotificationInfo& info)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEKeyboardNotificationInfo& info)
dispatchKeyboardDidHide	text_input_node/CCIMEDispatcher.h	/^    void dispatchKeyboardDidHide(CCIMEKeyboardNotificationInfo& info);$/;"	p	class:CCIMEDispatcher	access:public	signature:(CCIMEKeyboardNotificationInfo& info)
dispatchKeyboardDidShow	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchKeyboardDidShow(CCIMEKeyboardNotificationInfo& info)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEKeyboardNotificationInfo& info)
dispatchKeyboardDidShow	text_input_node/CCIMEDispatcher.h	/^    void dispatchKeyboardDidShow(CCIMEKeyboardNotificationInfo& info);$/;"	p	class:CCIMEDispatcher	access:public	signature:(CCIMEKeyboardNotificationInfo& info)
dispatchKeyboardWillHide	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchKeyboardWillHide(CCIMEKeyboardNotificationInfo& info)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEKeyboardNotificationInfo& info)
dispatchKeyboardWillHide	text_input_node/CCIMEDispatcher.h	/^    void dispatchKeyboardWillHide(CCIMEKeyboardNotificationInfo& info);$/;"	p	class:CCIMEDispatcher	access:public	signature:(CCIMEKeyboardNotificationInfo& info)
dispatchKeyboardWillShow	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchKeyboardWillShow(CCIMEKeyboardNotificationInfo& info)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEKeyboardNotificationInfo& info)
dispatchKeyboardWillShow	text_input_node/CCIMEDispatcher.h	/^    void dispatchKeyboardWillShow(CCIMEKeyboardNotificationInfo& info);$/;"	p	class:CCIMEDispatcher	access:public	signature:(CCIMEKeyboardNotificationInfo& info)
dispatchKeypadMSG	keypad_dispatcher/CCKeypadDispatcher.cpp	/^bool CCKeypadDispatcher::dispatchKeypadMSG(ccKeypadMSGType nMsgType)$/;"	f	class:CCKeypadDispatcher	signature:(ccKeypadMSGType nMsgType)
dispatchKeypadMSG	keypad_dispatcher/CCKeypadDispatcher.h	/^    bool dispatchKeypadMSG(ccKeypadMSGType nMsgType);$/;"	p	class:CCKeypadDispatcher	access:public	signature:(ccKeypadMSGType nMsgType)
displayFrame	sprite_nodes/CCSprite.cpp	/^CCSpriteFrame* CCSprite::displayFrame(void)$/;"	f	class:CCSprite	signature:(void)
displayFrame	sprite_nodes/CCSprite.h	/^    virtual CCSpriteFrame* displayFrame(void);$/;"	p	class:CCSprite	access:public	signature:(void)
displayTimers	support/CCProfiling.cpp	/^void CCProfiler::displayTimers()$/;"	f	class:CCProfiler	signature:()
displayTimers	support/CCProfiling.h	/^    void displayTimers(void);$/;"	p	class:CCProfiler	access:public	signature:(void)
dosDate	support/zip_support/unzip.h	/^    uLong dosDate;              \/* last mod file date in Dos fmt   4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
dosDate	support/zip_support/unzip.h	/^    uLong dosDate;              \/* last mod file date in Dos fmt   4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
doubleValue	cocoa/CCString.cpp	/^double CCString::doubleValue() const$/;"	f	class:CCString	signature:() const
doubleValue	cocoa/CCString.h	/^    double doubleValue() const;$/;"	p	class:CCString	access:public	signature:() const
draw	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::draw(void)$/;"	f	class:CCAtlasNode	signature:(void)
draw	base_nodes/CCAtlasNode.h	/^    virtual void draw(void);$/;"	p	class:CCAtlasNode	access:public	signature:(void)
draw	base_nodes/CCNode.cpp	/^ void CCNode::draw()$/;"	f	class:CCNode	signature:()
draw	base_nodes/CCNode.h	/^    virtual void draw(void);$/;"	p	class:CCNode	access:public	signature:(void)
draw	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::draw()$/;"	f	class:CCDrawNode	signature:()
draw	draw_nodes/CCDrawNode.h	/^    virtual void draw();$/;"	p	class:CCDrawNode	access:public	signature:()
draw	label_nodes/CCLabelAtlas.cpp	/^void CCLabelAtlas::draw()$/;"	f	class:CCLabelAtlas	signature:()
draw	label_nodes/CCLabelAtlas.h	/^    virtual void draw();$/;"	p	class:CCLabelAtlas	access:public	signature:()
draw	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::draw()$/;"	f	class:CCLabelBMFont	signature:()
draw	label_nodes/CCLabelBMFont.h	/^    virtual void draw();$/;"	p	class:CCLabelBMFont	access:public	signature:()
draw	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::draw()$/;"	f	class:CCLayerColor	signature:()
draw	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void draw();$/;"	p	class:CCLayerColor	access:public	signature:()
draw	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionCrossFade:: draw()$/;"	f	class:CCTransitionCrossFade	signature:()
draw	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::draw()$/;"	f	class:CCTransitionScene	signature:()
draw	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void draw();$/;"	p	class:CCTransitionCrossFade	access:public	signature:()
draw	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void draw();$/;"	p	class:CCTransitionScene	access:public	signature:()
draw	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::draw()$/;"	f	class:CCMotionStreak	signature:()
draw	misc_nodes/CCMotionStreak.h	/^    virtual void draw();$/;"	p	class:CCMotionStreak	access:public	signature:()
draw	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::draw(void)$/;"	f	class:CCProgressTimer	signature:(void)
draw	misc_nodes/CCProgressTimer.h	/^    virtual void draw(void);$/;"	p	class:CCProgressTimer	access:public	signature:(void)
draw	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::draw()$/;"	f	class:CCRenderTexture	signature:()
draw	misc_nodes/CCRenderTexture.h	/^    virtual void draw();$/;"	p	class:CCRenderTexture	access:public	signature:()
draw	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::draw(void)$/;"	f	class:CCParticleBatchNode	signature:(void)
draw	particle_nodes/CCParticleBatchNode.h	/^    virtual void draw(void);$/;"	p	class:CCParticleBatchNode	access:public	signature:(void)
draw	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::draw()$/;"	f	class:CCParticleSystemQuad	signature:()
draw	particle_nodes/CCParticleSystemQuad.h	/^    virtual void draw();$/;"	p	class:CCParticleSystemQuad	access:public	signature:()
draw	sprite_nodes/CCSprite.cpp	/^void CCSprite::draw(void)$/;"	f	class:CCSprite	signature:(void)
draw	sprite_nodes/CCSprite.h	/^    virtual void draw(void);$/;"	p	class:CCSprite	access:public	signature:(void)
draw	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::draw(void)$/;"	f	class:CCSpriteBatchNode	signature:(void)
draw	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void draw(void);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(void)
draw	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::draw()$/;"	f	class:CCTextFieldTTF	signature:()
draw	text_input_node/CCTextFieldTTF.h	/^    virtual void draw();$/;"	p	class:CCTextFieldTTF	access:protected	signature:()
drawAtPoint	textures/CCTexture2D.cpp	/^void CCTexture2D::drawAtPoint(const CCPoint& point)$/;"	f	class:CCTexture2D	signature:(const CCPoint& point)
drawAtPoint	textures/CCTexture2D.h	/^    void drawAtPoint(const CCPoint& point);$/;"	p	class:CCTexture2D	access:public	signature:(const CCPoint& point)
drawDot	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::drawDot(const CCPoint &pos, float radius, const ccColor4F &color)$/;"	f	class:CCDrawNode	signature:(const CCPoint &pos, float radius, const ccColor4F &color)
drawDot	draw_nodes/CCDrawNode.h	/^    void drawDot(const CCPoint &pos, float radius, const ccColor4F &color);$/;"	p	class:CCDrawNode	access:public	signature:(const CCPoint &pos, float radius, const ccColor4F &color)
drawInRect	textures/CCTexture2D.cpp	/^void CCTexture2D::drawInRect(const CCRect& rect)$/;"	f	class:CCTexture2D	signature:(const CCRect& rect)
drawInRect	textures/CCTexture2D.h	/^    void drawInRect(const CCRect& rect);$/;"	p	class:CCTexture2D	access:public	signature:(const CCRect& rect)
drawNumberOfQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::drawNumberOfQuads(unsigned int n)$/;"	f	class:CCTextureAtlas	signature:(unsigned int n)
drawNumberOfQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::drawNumberOfQuads(unsigned int n, unsigned int start)$/;"	f	class:CCTextureAtlas	signature:(unsigned int n, unsigned int start)
drawNumberOfQuads	textures/CCTextureAtlas.h	/^    void drawNumberOfQuads(unsigned int n);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int n)
drawNumberOfQuads	textures/CCTextureAtlas.h	/^    void drawNumberOfQuads(unsigned int n, unsigned int start);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int n, unsigned int start)
drawPolygon	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::drawPolygon(CCPoint *verts, unsigned int count, const ccColor4F &fillColor, float borderWidth, const ccColor4F &borderColor)$/;"	f	class:CCDrawNode	signature:(CCPoint *verts, unsigned int count, const ccColor4F &fillColor, float borderWidth, const ccColor4F &borderColor)
drawPolygon	draw_nodes/CCDrawNode.h	/^    void drawPolygon(CCPoint *verts, unsigned int count, const ccColor4F &fillColor, float borderWidth, const ccColor4F &borderColor);$/;"	p	class:CCDrawNode	access:public	signature:(CCPoint *verts, unsigned int count, const ccColor4F &fillColor, float borderWidth, const ccColor4F &borderColor)
drawQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::drawQuads()$/;"	f	class:CCTextureAtlas	signature:()
drawQuads	textures/CCTextureAtlas.h	/^    void drawQuads();$/;"	p	class:CCTextureAtlas	access:public	signature:()
drawScene	CCDirector.cpp	/^void CCDirector::drawScene(void)$/;"	f	class:CCDirector	signature:(void)
drawScene	CCDirector.h	/^    void drawScene(void);$/;"	p	class:CCDirector	access:public	signature:(void)
drawSegment	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::drawSegment(const CCPoint &from, const CCPoint &to, float radius, const ccColor4F &color)$/;"	f	class:CCDrawNode	signature:(const CCPoint &from, const CCPoint &to, float radius, const ccColor4F &color)
drawSegment	draw_nodes/CCDrawNode.h	/^    void drawSegment(const CCPoint &from, const CCPoint &to, float radius, const ccColor4F &color);$/;"	p	class:CCDrawNode	access:public	signature:(const CCPoint &from, const CCPoint &to, float radius, const ccColor4F &color)
dst	include/ccTypes.h	/^    GLenum dst;$/;"	m	struct:_ccBlendFunc	access:public
dumpCachedTextureInfo	textures/CCTextureCache.cpp	/^void CCTextureCache::dumpCachedTextureInfo()$/;"	f	class:CCTextureCache	signature:()
dumpCachedTextureInfo	textures/CCTextureCache.h	/^    void dumpCachedTextureInfo();$/;"	p	class:CCTextureCache	access:public	signature:()
duration	text_input_node/CCIMEDelegate.h	/^    float     duration;           \/\/ the soft keyboard animation duration$/;"	m	struct:__anon46	access:public
eImageFormat	misc_nodes/CCRenderTexture.h	/^typedef enum eImageFormat$/;"	g
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionFadeTR:: easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionFadeTR	signature:(CCActionInterval* action)
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionMoveInL::easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionMoveInL	signature:(CCActionInterval* action)
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionShrinkGrow:: easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionShrinkGrow	signature:(CCActionInterval* action)
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInL::easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionSlideInL	signature:(CCActionInterval* action)
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSplitCols::easeActionWithAction(CCActionInterval * action)$/;"	f	class:CCTransitionSplitCols	signature:(CCActionInterval * action)
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionTurnOffTiles:: easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionTurnOffTiles	signature:(CCActionInterval* action)
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval * easeActionWithAction(CCActionInterval * action) = 0;$/;"	p	class:CCTransitionEaseScene	access:public	signature:(CCActionInterval * action)
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval * easeActionWithAction(CCActionInterval * action);$/;"	p	class:CCTransitionSplitCols	access:public	signature:(CCActionInterval * action)
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval * easeActionWithAction(CCActionInterval * action);$/;"	p	class:CCTransitionTurnOffTiles	access:public	signature:(CCActionInterval * action)
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* easeActionWithAction(CCActionInterval * action);$/;"	p	class:CCTransitionFadeTR	access:public	signature:(CCActionInterval * action)
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* easeActionWithAction(CCActionInterval * action);$/;"	p	class:CCTransitionMoveInL	access:public	signature:(CCActionInterval * action)
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* easeActionWithAction(CCActionInterval * action);$/;"	p	class:CCTransitionShrinkGrow	access:public	signature:(CCActionInterval * action)
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual CCActionInterval* easeActionWithAction(CCActionInterval * action);$/;"	p	class:CCTransitionSlideInL	access:public	signature:(CCActionInterval * action)
encrypted	support/zip_support/unzip.cpp	/^    int encrypted;$/;"	m	struct:cocos2d::__anon44	file:	access:public
end	CCDirector.cpp	/^void CCDirector::end()$/;"	f	class:CCDirector	signature:()
end	CCDirector.h	/^    void end(void);$/;"	p	class:CCDirector	access:public	signature:(void)
end	cocoa/CCSet.cpp	/^CCSetIterator CCSet::end(void)$/;"	f	class:CCSet	signature:(void)
end	cocoa/CCSet.h	/^    CCSetIterator end();$/;"	p	class:CCSet	access:public	signature:()
end	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::end()$/;"	f	class:CCRenderTexture	signature:()
end	misc_nodes/CCRenderTexture.h	/^    void end();$/;"	p	class:CCRenderTexture	access:public	signature:()
end	platform/CCEGLViewProtocol.h	/^    virtual void    end() = 0;$/;"	p	class:CCEGLViewProtocol	access:public	signature:()
end	text_input_node/CCIMEDelegate.h	/^    CCRect  end;                \/\/ the soft keyboard rectangle when animation ends$/;"	m	struct:__anon46	access:public
endElement	platform/CCFileUtils.cpp	/^    void endElement(void *ctx, const char *name)$/;"	f	class:CCDictMaker	access:public	signature:(void *ctx, const char *name)
endElement	platform/CCSAXParser.cpp	/^void CCSAXParser::endElement(void *ctx, const CC_XML_CHAR *name)$/;"	f	class:CCSAXParser	signature:(void *ctx, const CC_XML_CHAR *name)
endElement	platform/CCSAXParser.h	/^    static void endElement(void *ctx, const CC_XML_CHAR *name);$/;"	p	class:CCSAXParser	access:public	signature:(void *ctx, const CC_XML_CHAR *name)
endElement	platform/CCSAXParser.h	/^    virtual void endElement(void *ctx, const char *name) = 0;$/;"	p	class:CCSAXDelegator	access:public	signature:(void *ctx, const char *name)
endElement	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::endElement(void *ctx, const char *name)$/;"	f	class:CCTMXMapInfo	signature:(void *ctx, const char *name)
endElement	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    void endElement(void *ctx, const char *name);$/;"	p	class:CCTMXMapInfo	access:public	signature:(void *ctx, const char *name)
endPosition	actions/CCActionInterval.h	/^    CCPoint endPosition;$/;"	m	struct:_ccBezierConfig	access:public
endRadius	particle_nodes/CCParticleSystem.h	/^        float endRadius;$/;"	m	struct:CCParticleSystem::__anon25	access:public
endRadiusVar	particle_nodes/CCParticleSystem.h	/^        float endRadiusVar;            $/;"	m	struct:CCParticleSystem::__anon25	access:public
endToLua	misc_nodes/CCRenderTexture.h	/^    inline void endToLua(){ end();};$/;"	f	class:CCRenderTexture	access:public	signature:()
ensureCapacity	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::ensureCapacity(unsigned int count)$/;"	f	class:CCDrawNode	signature:(unsigned int count)
ensureCapacity	draw_nodes/CCDrawNode.h	/^    void ensureCapacity(unsigned int count);$/;"	p	class:CCDrawNode	access:private	signature:(unsigned int count)
entities	support/tinyxml2/tinyxml2.cpp	/^static const Entity entities[NUM_ENTITIES] = {$/;"	m	namespace:tinyxml2	file:
entry	CCScheduler.cpp	/^    tListEntry          *entry;        \/\/ entry in the list$/;"	m	struct:_hashUpdateEntry	file:	access:public
equals	cocoa/CCGeometry.cpp	/^bool CCPoint::equals(const CCPoint& target) const$/;"	f	class:CCPoint	signature:(const CCPoint& target) const
equals	cocoa/CCGeometry.cpp	/^bool CCRect::equals(const CCRect& rect) const$/;"	f	class:CCRect	signature:(const CCRect& rect) const
equals	cocoa/CCGeometry.cpp	/^bool CCSize::equals(const CCSize& target) const$/;"	f	class:CCSize	signature:(const CCSize& target) const
equals	cocoa/CCGeometry.h	/^    bool equals(const CCPoint& target) const;$/;"	p	class:CCPoint	access:public	signature:(const CCPoint& target) const
equals	cocoa/CCGeometry.h	/^    bool equals(const CCRect& rect) const;   $/;"	p	class:CCRect	access:public	signature:(const CCRect& rect) const
equals	cocoa/CCGeometry.h	/^    bool equals(const CCSize& target) const;$/;"	p	class:CCSize	access:public	signature:(const CCSize& target) const
event_selector	cocoa/CCObject.h	93;"	d
exchangeObject	cocoa/CCArray.cpp	/^void CCArray::exchangeObject(CCObject* object1, CCObject* object2)$/;"	f	class:CCArray	signature:(CCObject* object1, CCObject* object2)
exchangeObject	cocoa/CCArray.h	/^    void exchangeObject(CCObject* object1, CCObject* object2);$/;"	p	class:CCArray	access:public	signature:(CCObject* object1, CCObject* object2)
exchangeObjectAtIndex	cocoa/CCArray.cpp	/^void CCArray::exchangeObjectAtIndex(unsigned int index1, unsigned int index2)$/;"	f	class:CCArray	signature:(unsigned int index1, unsigned int index2)
exchangeObjectAtIndex	cocoa/CCArray.h	/^    void exchangeObjectAtIndex(unsigned int index1, unsigned int index2);$/;"	p	class:CCArray	access:public	signature:(unsigned int index1, unsigned int index2)
excuteScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^int CCLayer::excuteScriptTouchHandler(int nEventType, CCSet *pTouches)$/;"	f	class:CCLayer	signature:(int nEventType, CCSet *pTouches)
excuteScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^int CCLayer::excuteScriptTouchHandler(int nEventType, CCTouch *pTouch)$/;"	f	class:CCLayer	signature:(int nEventType, CCTouch *pTouch)
excuteScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    int  excuteScriptTouchHandler(int nEventType, CCSet *pTouches);$/;"	p	class:CCLayer	access:private	signature:(int nEventType, CCSet *pTouches)
excuteScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    int  excuteScriptTouchHandler(int nEventType, CCTouch *pTouch);$/;"	p	class:CCLayer	access:private	signature:(int nEventType, CCTouch *pTouch)
execute	actions/CCActionInstant.cpp	/^void CCCallFunc::execute() {$/;"	f	class:CCCallFunc	signature:()
execute	actions/CCActionInstant.cpp	/^void CCCallFuncN::execute() {$/;"	f	class:CCCallFuncN	signature:()
execute	actions/CCActionInstant.cpp	/^void CCCallFuncND::execute() {$/;"	f	class:CCCallFuncND	signature:()
execute	actions/CCActionInstant.cpp	/^void CCCallFuncO::execute() {$/;"	f	class:CCCallFuncO	signature:()
execute	actions/CCActionInstant.h	/^    virtual void execute();$/;"	p	class:CCCallFunc	access:public	signature:()
execute	actions/CCActionInstant.h	/^    virtual void execute();$/;"	p	class:CCCallFuncN	access:public	signature:()
execute	actions/CCActionInstant.h	/^    virtual void execute();$/;"	p	class:CCCallFuncND	access:public	signature:()
execute	actions/CCActionInstant.h	/^    virtual void execute();$/;"	p	class:CCCallFuncO	access:public	signature:()
executeAccelerometerEvent	script_support/CCScriptSupport.h	/^    virtual int executeAccelerometerEvent(CCLayer* pLayer, CCAcceleration* pAccelerationValue) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCLayer* pLayer, CCAcceleration* pAccelerationValue)
executeAssert	script_support/CCScriptSupport.h	/^    virtual bool executeAssert(bool cond, const char *msg = NULL) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(bool cond, const char *msg = NULL)
executeCallFuncActionEvent	script_support/CCScriptSupport.h	/^    virtual int executeCallFuncActionEvent(CCCallFunc* pAction, CCObject* pTarget = NULL) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCCallFunc* pAction, CCObject* pTarget = NULL)
executeEvent	script_support/CCScriptSupport.h	/^    virtual int executeEvent(int nHandler, const char* pEventName, CCObject* pEventSource = NULL, const char* pEventSourceClassName = NULL) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(int nHandler, const char* pEventName, CCObject* pEventSource = NULL, const char* pEventSourceClassName = NULL)
executeGlobalFunction	script_support/CCScriptSupport.h	/^    virtual int executeGlobalFunction(const char* functionName) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(const char* functionName)
executeLayerKeypadEvent	script_support/CCScriptSupport.h	/^    virtual int executeLayerKeypadEvent(CCLayer* pLayer, int eventType) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCLayer* pLayer, int eventType)
executeLayerTouchEvent	script_support/CCScriptSupport.h	/^    virtual int executeLayerTouchEvent(CCLayer* pLayer, int eventType, CCTouch *pTouch) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCLayer* pLayer, int eventType, CCTouch *pTouch)
executeLayerTouchesEvent	script_support/CCScriptSupport.h	/^    virtual int executeLayerTouchesEvent(CCLayer* pLayer, int eventType, CCSet *pTouches) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCLayer* pLayer, int eventType, CCSet *pTouches)
executeMenuItemEvent	script_support/CCScriptSupport.h	/^    virtual int executeMenuItemEvent(CCMenuItem* pMenuItem) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCMenuItem* pMenuItem)
executeNodeEvent	script_support/CCScriptSupport.h	/^    virtual int executeNodeEvent(CCNode* pNode, int nAction) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCNode* pNode, int nAction)
executeNotificationEvent	script_support/CCScriptSupport.h	/^    virtual int executeNotificationEvent(CCNotificationCenter* pNotificationCenter, const char* pszName) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCNotificationCenter* pNotificationCenter, const char* pszName)
executeSchedule	script_support/CCScriptSupport.h	/^    virtual int executeSchedule(int nHandler, float dt, CCNode* pNode = NULL) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(int nHandler, float dt, CCNode* pNode = NULL)
executeScriptFile	script_support/CCScriptSupport.h	/^    virtual int executeScriptFile(const char* filename) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(const char* filename)
executeString	script_support/CCScriptSupport.h	/^    virtual int executeString(const char* codes) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(const char* codes)
expand_mult	support/data_support/uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket	access:public
external_fa	support/zip_support/unzip.h	/^    uLong external_fa;          \/* external file attributes        4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
external_fa	support/zip_support/unzip.h	/^    uLong external_fa;          \/* external file attributes        4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
fastRemoveObject	cocoa/CCArray.cpp	/^void CCArray::fastRemoveObject(CCObject* object)$/;"	f	class:CCArray	signature:(CCObject* object)
fastRemoveObject	cocoa/CCArray.h	/^    void fastRemoveObject(CCObject* object);$/;"	p	class:CCArray	access:public	signature:(CCObject* object)
fastRemoveObjectAtIndex	cocoa/CCArray.cpp	/^void CCArray::fastRemoveObjectAtIndex(unsigned int index)$/;"	f	class:CCArray	signature:(unsigned int index)
fastRemoveObjectAtIndex	cocoa/CCArray.h	/^    void fastRemoveObjectAtIndex(unsigned int index);$/;"	p	class:CCArray	access:public	signature:(unsigned int index)
fclose_file_func	support/zip_support/ioapi.cpp	/^static int     ZCALLBACK fclose_file_func OF((voidpf opaque, voidpf stream));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, voidpf stream)
fclose_file_func	support/zip_support/ioapi.cpp	/^static int ZCALLBACK fclose_file_func (voidpf opaque, voidpf stream)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream)
ferror_file_func	support/zip_support/ioapi.cpp	/^static int     ZCALLBACK ferror_file_func OF((voidpf opaque, voidpf stream));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, voidpf stream)
ferror_file_func	support/zip_support/ioapi.cpp	/^static int ZCALLBACK ferror_file_func (voidpf opaque, voidpf stream)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream)
fileExists	support/zip_support/ZipUtils.cpp	/^bool ZipFile::fileExists(const std::string &fileName) const$/;"	f	class:ZipFile	signature:(const std::string &fileName) const
fileExists	support/zip_support/ZipUtils.h	/^        bool fileExists(const std::string &fileName) const;$/;"	p	class:cocos2d::ZipFile	access:public	signature:(const std::string &fileName) const
fileList	support/zip_support/ZipUtils.cpp	/^    FileListContainer fileList;$/;"	m	class:ZipFilePrivate	file:	access:public
file_in_zip64_read_info_s	support/zip_support/unzip.cpp	/^} file_in_zip64_read_info_s;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::__anon43	file:
filename	textures/CCTextureCache.cpp	/^    std::string            filename;$/;"	m	struct:_AsyncStruct	file:	access:public
filestream	support/zip_support/unzip.cpp	/^    voidpf filestream;        \/* io structure of the zipfile *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
filestream	support/zip_support/unzip.cpp	/^    voidpf filestream;        \/* io structure of the zipfile *\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
fillWithEmptyQuadsFromIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::fillWithEmptyQuadsFromIndex(unsigned int index, unsigned int amount)$/;"	f	class:CCTextureAtlas	signature:(unsigned int index, unsigned int amount)
fillWithEmptyQuadsFromIndex	textures/CCTextureAtlas.h	/^    void fillWithEmptyQuadsFromIndex(unsigned int index, unsigned int amount);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int index, unsigned int amount)
fill_fopen64_filefunc	support/zip_support/ioapi.cpp	/^void fill_fopen64_filefunc (zlib_filefunc64_def*  pzlib_filefunc_def)$/;"	f	namespace:cocos2d	signature:(zlib_filefunc64_def* pzlib_filefunc_def)
fill_fopen64_filefunc	support/zip_support/ioapi.h	/^void fill_fopen64_filefunc OF((zlib_filefunc64_def* pzlib_filefunc_def));$/;"	p	namespace:cocos2d	signature:(zlib_filefunc64_def* pzlib_filefunc_def)
fill_fopen_filefunc	support/zip_support/ioapi.cpp	/^void fill_fopen_filefunc (zlib_filefunc_def* pzlib_filefunc_def)$/;"	f	namespace:cocos2d	signature:(zlib_filefunc_def* pzlib_filefunc_def)
fill_fopen_filefunc	support/zip_support/ioapi.h	/^void fill_fopen_filefunc OF((zlib_filefunc_def* pzlib_filefunc_def));$/;"	p	namespace:cocos2d	signature:(zlib_filefunc_def* pzlib_filefunc_def)
fill_zlib_filefunc64_32_def_from_filefunc32	support/zip_support/ioapi.cpp	/^void fill_zlib_filefunc64_32_def_from_filefunc32(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32)$/;"	f	namespace:cocos2d	signature:(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32)
fill_zlib_filefunc64_32_def_from_filefunc32	support/zip_support/ioapi.h	/^void    fill_zlib_filefunc64_32_def_from_filefunc32(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32);$/;"	p	namespace:cocos2d	signature:(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32)
finalize	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::finalize()$/;"	f	class:CCPoolManager	signature:()
finalize	cocoa/CCAutoreleasePool.h	/^    void finalize();$/;"	p	class:CCPoolManager	access:public	signature:()
findDelegate	text_input_node/CCIMEDispatcher.cpp	/^    DelegateIter findDelegate(CCIMEDelegate* pDelegate)$/;"	f	class:CCIMEDispatcher::Impl	access:public	signature:(CCIMEDelegate* pDelegate)
findHandler	touch_dispatcher/CCTouchDispatcher.cpp	/^CCTouchHandler* CCTouchDispatcher::findHandler(CCArray* pArray, CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher	signature:(CCArray* pArray, CCTouchDelegate *pDelegate)
findHandler	touch_dispatcher/CCTouchDispatcher.cpp	/^CCTouchHandler* CCTouchDispatcher::findHandler(CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher	signature:(CCTouchDelegate *pDelegate)
findHandler	touch_dispatcher/CCTouchDispatcher.h	/^    CCTouchHandler* findHandler(CCArray* pArray, CCTouchDelegate *pDelegate);$/;"	p	class:CCTouchDispatcher	access:protected	signature:(CCArray* pArray, CCTouchDelegate *pDelegate)
findHandler	touch_dispatcher/CCTouchDispatcher.h	/^    CCTouchHandler* findHandler(CCTouchDelegate *pDelegate);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCTouchDelegate *pDelegate)
findVolotileTexture	textures/CCTextureCache.cpp	/^VolatileTexture* VolatileTexture::findVolotileTexture(CCTexture2D *tt)$/;"	f	class:VolatileTexture	signature:(CCTexture2D *tt)
findVolotileTexture	textures/CCTextureCache.h	/^    static VolatileTexture* findVolotileTexture(CCTexture2D *tt);$/;"	p	class:VolatileTexture	access:private	signature:(CCTexture2D *tt)
finish	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::finish()$/;"	f	class:CCTransitionScene	signature:()
finish	layers_scenes_transitions_nodes/CCTransition.h	/^    void finish(void);$/;"	p	class:CCTransitionScene	access:public	signature:(void)
flag	support/zip_support/unzip.h	/^    uLong flag;                 \/* general purpose bit flag        2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
flag	support/zip_support/unzip.h	/^    uLong flag;                 \/* general purpose bit flag        2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
flags	textures/CCTexturePVR.cpp	/^	uint32_t flags;$/;"	m	struct:__anon56	file:	access:public
flags	textures/CCTexturePVR.cpp	/^    unsigned int flags;$/;"	m	struct:_PVRTexHeader	file:	access:public
flipped	support/image_support/TGAlib.h	/^    int flipped;$/;"	m	struct:cocos2d::sImageTGA	access:public
floatValue	cocoa/CCString.cpp	/^float CCString::floatValue() const$/;"	f	class:CCString	signature:() const
floatValue	cocoa/CCString.h	/^    float floatValue() const;$/;"	p	class:CCString	access:public	signature:() const
flush	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::flush()$/;"	f	class:CCUserDefault	signature:()
flush	support/user_default/CCUserDefault.h	/^    void    flush();$/;"	p	class:CCUserDefault	access:public	signature:()
flush	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::flush()$/;"	f	class:CCUserDefault	signature:()
fontDef	label_nodes/CCLabelBMFont.h	/^	ccBMFontDef		fontDef;	\/\/ font definition$/;"	m	struct:_FontDefHashElement	access:public
fontName	menu_nodes/CCMenuItem.cpp	/^const char * CCMenuItemFont::fontName()$/;"	f	class:CCMenuItemFont	signature:()
fontName	menu_nodes/CCMenuItem.h	/^    static const char *fontName();$/;"	p	class:CCMenuItemFont	access:public	signature:()
fontNameObj	menu_nodes/CCMenuItem.cpp	/^const char* CCMenuItemFont::fontNameObj()$/;"	f	class:CCMenuItemFont	signature:()
fontNameObj	menu_nodes/CCMenuItem.h	/^    const char* fontNameObj();$/;"	p	class:CCMenuItemFont	access:public	signature:()
fontSize	menu_nodes/CCMenuItem.cpp	/^unsigned int CCMenuItemFont::fontSize()$/;"	f	class:CCMenuItemFont	signature:()
fontSize	menu_nodes/CCMenuItem.h	/^    static unsigned int fontSize();$/;"	p	class:CCMenuItemFont	access:public	signature:()
fontSizeObj	menu_nodes/CCMenuItem.cpp	/^unsigned int CCMenuItemFont::fontSizeObj()$/;"	f	class:CCMenuItemFont	signature:()
fontSizeObj	menu_nodes/CCMenuItem.h	/^    unsigned int fontSizeObj();$/;"	p	class:CCMenuItemFont	access:public	signature:()
fopen64	support/zip_support/ioapi.h	52;"	d
fopen64_file_func	support/zip_support/ioapi.cpp	/^static voidpf ZCALLBACK fopen64_file_func (voidpf opaque, const void* filename, int mode)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, const void* filename, int mode)
fopen_file_func	support/zip_support/ioapi.cpp	/^static voidpf  ZCALLBACK fopen_file_func OF((voidpf opaque, const char* filename, int mode));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, const char* filename, int mode)
fopen_file_func	support/zip_support/ioapi.cpp	/^static voidpf ZCALLBACK fopen_file_func (voidpf opaque, const char* filename, int mode)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, const char* filename, int mode)
forceAddDelegate	keypad_dispatcher/CCKeypadDispatcher.cpp	/^void CCKeypadDispatcher::forceAddDelegate(CCKeypadDelegate* pDelegate)$/;"	f	class:CCKeypadDispatcher	signature:(CCKeypadDelegate* pDelegate)
forceAddDelegate	keypad_dispatcher/CCKeypadDispatcher.h	/^    void forceAddDelegate(CCKeypadDelegate* pDelegate);$/;"	p	class:CCKeypadDispatcher	access:public	signature:(CCKeypadDelegate* pDelegate)
forceAddHandler	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::forceAddHandler(CCTouchHandler *pHandler, CCArray *pArray)$/;"	f	class:CCTouchDispatcher	signature:(CCTouchHandler *pHandler, CCArray *pArray)
forceAddHandler	touch_dispatcher/CCTouchDispatcher.h	/^    void forceAddHandler(CCTouchHandler *pHandler, CCArray* pArray);$/;"	p	class:CCTouchDispatcher	access:protected	signature:(CCTouchHandler *pHandler, CCArray* pArray)
forceRemoveAllDelegates	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::forceRemoveAllDelegates(void)$/;"	f	class:CCTouchDispatcher	signature:(void)
forceRemoveAllDelegates	touch_dispatcher/CCTouchDispatcher.h	/^    void forceRemoveAllDelegates(void);$/;"	p	class:CCTouchDispatcher	access:protected	signature:(void)
forceRemoveDelegate	keypad_dispatcher/CCKeypadDispatcher.cpp	/^void CCKeypadDispatcher::forceRemoveDelegate(CCKeypadDelegate* pDelegate)$/;"	f	class:CCKeypadDispatcher	signature:(CCKeypadDelegate* pDelegate)
forceRemoveDelegate	keypad_dispatcher/CCKeypadDispatcher.h	/^    void forceRemoveDelegate(CCKeypadDelegate* pDelegate);$/;"	p	class:CCKeypadDispatcher	access:public	signature:(CCKeypadDelegate* pDelegate)
forceRemoveDelegate	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::forceRemoveDelegate(CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher	signature:(CCTouchDelegate *pDelegate)
forceRemoveDelegate	touch_dispatcher/CCTouchDispatcher.h	/^    void forceRemoveDelegate(CCTouchDelegate *pDelegate);$/;"	p	class:CCTouchDispatcher	access:protected	signature:(CCTouchDelegate *pDelegate)
format	textures/CCTexturePVR.h	/^	GLenum format;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
formatWithTMXFile	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXMapInfo * CCTMXMapInfo::formatWithTMXFile(const char *tmxFile)$/;"	f	class:CCTMXMapInfo	signature:(const char *tmxFile)
formatWithTMXFile	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    static CCTMXMapInfo * formatWithTMXFile(const char *tmxFile);$/;"	p	class:CCTMXMapInfo	access:public	signature:(const char *tmxFile)
formatWithXML	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXMapInfo * CCTMXMapInfo::formatWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXMapInfo	signature:(const char* tmxString, const char* resourcePath)
formatWithXML	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    static CCTMXMapInfo * formatWithXML(const char* tmxString, const char* resourcePath);$/;"	p	class:CCTMXMapInfo	access:public	signature:(const char* tmxString, const char* resourcePath)
fragmentShaderLog	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::fragmentShaderLog()$/;"	f	class:CCGLProgram	signature:()
fragmentShaderLog	shaders/CCGLProgram.h	/^    const char* fragmentShaderLog();$/;"	p	class:CCGLProgram	access:public	signature:()
fread_file_func	support/zip_support/ioapi.cpp	/^static uLong   ZCALLBACK fread_file_func OF((voidpf opaque, voidpf stream, void* buf, uLong size));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, voidpf stream, void* buf, uLong size)
fread_file_func	support/zip_support/ioapi.cpp	/^static uLong ZCALLBACK fread_file_func (voidpf opaque, voidpf stream, void* buf, uLong size)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream, void* buf, uLong size)
fseek64_file_func	support/zip_support/ioapi.cpp	/^static long    ZCALLBACK fseek64_file_func OF((voidpf opaque, voidpf stream, ZPOS64_T offset, int origin));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, voidpf stream, ZPOS64_T offset, int origin)
fseek64_file_func	support/zip_support/ioapi.cpp	/^static long ZCALLBACK fseek64_file_func (voidpf  opaque, voidpf stream, ZPOS64_T offset, int origin)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream, ZPOS64_T offset, int origin)
fseek_file_func	support/zip_support/ioapi.cpp	/^static long ZCALLBACK fseek_file_func (voidpf  opaque, voidpf stream, uLong offset, int origin)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream, uLong offset, int origin)
fseeko64	support/zip_support/ioapi.h	54;"	d
ftell64_file_func	support/zip_support/ioapi.cpp	/^static ZPOS64_T ZCALLBACK ftell64_file_func (voidpf opaque, voidpf stream)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream)
ftell64_file_func	support/zip_support/ioapi.cpp	/^static ZPOS64_T ZCALLBACK ftell64_file_func OF((voidpf opaque, voidpf stream));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, voidpf stream)
ftell_file_func	support/zip_support/ioapi.cpp	/^static long ZCALLBACK ftell_file_func (voidpf opaque, voidpf stream)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream)
ftello64	support/zip_support/ioapi.h	53;"	d
fullPathForFilename	platform/CCFileUtils.cpp	/^std::string CCFileUtils::fullPathForFilename(const char* pszFileName)$/;"	f	class:CCFileUtils	signature:(const char* pszFileName)
fullPathForFilename	platform/CCFileUtils.h	/^    virtual std::string fullPathForFilename(const char* pszFileName);$/;"	p	class:CCFileUtils	access:public	signature:(const char* pszFileName)
fullPathFromRelativeFile	platform/CCFileUtils.cpp	/^const char* CCFileUtils::fullPathFromRelativeFile(const char *pszFilename, const char *pszRelativeFile)$/;"	f	class:CCFileUtils	signature:(const char *pszFilename, const char *pszRelativeFile)
fullPathFromRelativeFile	platform/CCFileUtils.h	/^    virtual const char* fullPathFromRelativeFile(const char *pszFilename, const char *pszRelativeFile);$/;"	p	class:CCFileUtils	access:public	signature:(const char *pszFilename, const char *pszRelativeFile)
fwrite_file_func	support/zip_support/ioapi.cpp	/^static uLong   ZCALLBACK fwrite_file_func OF((voidpf opaque, voidpf stream, const void* buf,uLong size));$/;"	p	namespace:cocos2d	file:	signature:(voidpf opaque, voidpf stream, const void* buf,uLong size)
fwrite_file_func	support/zip_support/ioapi.cpp	/^static uLong ZCALLBACK fwrite_file_func (voidpf opaque, voidpf stream, const void* buf, uLong size)$/;"	f	namespace:cocos2d	signature:(voidpf opaque, voidpf stream, const void* buf, uLong size)
g	include/ccTypes.h	/^    GLfloat g;$/;"	m	struct:_ccColor4F	access:public
g	include/ccTypes.h	/^    GLubyte g;$/;"	m	struct:_ccColor3B	access:public
g	include/ccTypes.h	/^    GLubyte g;$/;"	m	struct:_ccColor4B	access:public
gPVRTexIdentifier	textures/CCTexturePVR.cpp	/^static char gPVRTexIdentifier[5] = "PVR!";$/;"	v	file:
g_defaultAlphaPixelFormat	textures/CCTexture2D.cpp	/^static CCTexture2DPixelFormat g_defaultAlphaPixelFormat = kCCTexture2DPixelFormat_Default;$/;"	v	file:
g_sSharedProfiler	support/CCProfiling.cpp	/^static CCProfiler* g_sSharedProfiler = NULL;$/;"	v	file:
g_sStencilBits	misc_nodes/CCClippingNode.cpp	/^static GLint g_sStencilBits = -1;$/;"	v	file:
g_sharedTextureCache	textures/CCTextureCache.cpp	/^static CCTextureCache *g_sharedTextureCache = NULL;$/;"	v	file:
g_uNumberOfDraws	CCDirector.cpp	/^unsigned int g_uNumberOfDraws = 0;$/;"	v
g_utf8_skip	support/ccUTF8.cpp	/^static const char *const g_utf8_skip = utf8_skip_data;$/;"	v	file:
gaussj	kazmath/src/mat4.c	/^int gaussj(kmMat4 *a, kmMat4 *b)$/;"	f	signature:(kmMat4 *a, kmMat4 *b)
generateMipmap	textures/CCTexture2D.cpp	/^void CCTexture2D::generateMipmap()$/;"	f	class:CCTexture2D	signature:()
generateMipmap	textures/CCTexture2D.h	/^    void generateMipmap();$/;"	p	class:CCTexture2D	access:public	signature:()
get	kazmath/src/mat4.c	/^float get(const kmMat4 * pIn, int row, int col)$/;"	f	signature:(const kmMat4 * pIn, int row, int col)
get16bits	support/data_support/uthash.h	442;"	d
get16bits	support/data_support/uthash.h	445;"	d
get16bits	support/data_support/uthash.h	449;"	d
getAccelerometer	CCDirector.cpp	/^CCAccelerometer* CCDirector::getAccelerometer()$/;"	f	class:CCDirector	signature:()
getActionByTag	actions/CCActionManager.cpp	/^CCAction* CCActionManager::getActionByTag(unsigned int tag, CCObject *pTarget)$/;"	f	class:CCActionManager	signature:(unsigned int tag, CCObject *pTarget)
getActionByTag	actions/CCActionManager.h	/^    CCAction* getActionByTag(unsigned int tag, CCObject *pTarget);$/;"	p	class:CCActionManager	access:public	signature:(unsigned int tag, CCObject *pTarget)
getActionByTag	base_nodes/CCNode.cpp	/^CCAction * CCNode::getActionByTag(int tag)$/;"	f	class:CCNode	signature:(int tag)
getActionByTag	base_nodes/CCNode.h	/^    CCAction* getActionByTag(int tag);$/;"	p	class:CCNode	access:public	signature:(int tag)
getActionManager	CCDirector.cpp	/^CCActionManager* CCDirector::getActionManager()$/;"	f	class:CCDirector	signature:()
getActionManager	base_nodes/CCNode.cpp	/^CCActionManager* CCNode::getActionManager()$/;"	f	class:CCNode	signature:()
getActionManager	base_nodes/CCNode.h	/^    virtual CCActionManager* getActionManager();$/;"	p	class:CCNode	access:public	signature:()
getAlphaThreshold	misc_nodes/CCClippingNode.cpp	/^GLfloat CCClippingNode::getAlphaThreshold() const$/;"	f	class:CCClippingNode	signature:() const
getAlphaThreshold	misc_nodes/CCClippingNode.h	/^    GLfloat getAlphaThreshold() const;$/;"	p	class:CCClippingNode	access:public	signature:() const
getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCLiquid	access:public	signature:(void)
getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCRipple3D	access:public	signature:(void)
getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCTwirl	access:public	signature:(void)
getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCWaves	access:public	signature:(void)
getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCWaves3D	access:public	signature:(void)
getAmplitude	actions/CCActionTiledGrid.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCJumpTiles3D	access:public	signature:(void)
getAmplitude	actions/CCActionTiledGrid.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCWavesTiles3D	access:public	signature:(void)
getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCLiquid	access:public	signature:(void)
getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCRipple3D	access:public	signature:(void)
getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCTwirl	access:public	signature:(void)
getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCWaves	access:public	signature:(void)
getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCWaves3D	access:public	signature:(void)
getAmplitudeRate	actions/CCActionInterval.cpp	/^float CCActionInterval::getAmplitudeRate(void)$/;"	f	class:CCActionInterval	signature:(void)
getAmplitudeRate	actions/CCActionInterval.h	/^    float getAmplitudeRate(void);$/;"	p	class:CCActionInterval	access:public	signature:(void)
getAmplitudeRate	actions/CCActionTiledGrid.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCJumpTiles3D	access:public	signature:(void)
getAmplitudeRate	actions/CCActionTiledGrid.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCWavesTiles3D	access:public	signature:(void)
getAnchorPoint	base_nodes/CCNode.cpp	/^const CCPoint& CCNode::getAnchorPoint()$/;"	f	class:CCNode	signature:()
getAnchorPoint	base_nodes/CCNode.h	/^    virtual const CCPoint& getAnchorPoint();$/;"	p	class:CCNode	access:public	signature:()
getAnchorPointInPoints	base_nodes/CCNode.cpp	/^const CCPoint& CCNode::getAnchorPointInPoints()$/;"	f	class:CCNode	signature:()
getAnchorPointInPoints	base_nodes/CCNode.h	/^    virtual const CCPoint& getAnchorPointInPoints();$/;"	p	class:CCNode	access:public	signature:()
getAngle	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getAngle()$/;"	f	class:CCParticleSystem	signature:()
getAngleVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getAngleVar()$/;"	f	class:CCParticleSystem	signature:()
getAnimationInterval	CCDirector.h	/^    inline double getAnimationInterval(void) { return m_dAnimationInterval; }$/;"	f	class:CCDirector	access:public	signature:(void)
getAtlasIndex	sprite_nodes/CCSprite.h	/^    inline unsigned int getAtlasIndex(void) { return m_uAtlasIndex; }$/;"	f	class:CCSprite	access:public	signature:(void)
getAtlasName	label_nodes/CCLabelBMFont.h	/^    inline const char* getAtlasName(){ return m_sAtlasName.c_str(); }$/;"	f	class:CCBMFontConfiguration	access:public	signature:()
getAverageTime	support/CCProfiling.h	/^    inline double getAverageTime(void) { return m_dAverageTime; }$/;"	f	class:CCProfilingTimer	access:public	signature:(void)
getBatchNode	particle_nodes/CCParticleSystem.cpp	/^CCParticleBatchNode* CCParticleSystem::getBatchNode(void)$/;"	f	class:CCParticleSystem	signature:(void)
getBatchNode	sprite_nodes/CCSprite.cpp	/^CCSpriteBatchNode* CCSprite::getBatchNode(void)$/;"	f	class:CCSprite	signature:(void)
getBatchNode	sprite_nodes/CCSprite.h	/^    virtual CCSpriteBatchNode* getBatchNode(void);$/;"	p	class:CCSprite	access:public	signature:(void)
getBlendFunc	base_nodes/CCAtlasNode.cpp	/^ccBlendFunc CCAtlasNode::getBlendFunc()$/;"	f	class:CCAtlasNode	signature:()
getBlendFunc	draw_nodes/CCDrawNode.cpp	/^ccBlendFunc CCDrawNode::getBlendFunc() const$/;"	f	class:CCDrawNode	signature:() const
getBlendFunc	draw_nodes/CCDrawNode.h	/^    ccBlendFunc getBlendFunc() const;$/;"	p	class:CCDrawNode	access:public	signature:() const
getBlendFunc	include/CCProtocols.h	/^    virtual ccBlendFunc getBlendFunc(void) = 0;$/;"	p	class:CCBlendProtocol	access:public	signature:(void)
getBlendFunc	layers_scenes_transitions_nodes/CCLayer.cpp	/^ccBlendFunc CCLayerColor::getBlendFunc()$/;"	f	class:CCLayerColor	signature:()
getBlendFunc	misc_nodes/CCMotionStreak.cpp	/^ccBlendFunc CCMotionStreak::getBlendFunc(void)$/;"	f	class:CCMotionStreak	signature:(void)
getBlendFunc	misc_nodes/CCMotionStreak.h	/^    virtual ccBlendFunc getBlendFunc(void);$/;"	p	class:CCMotionStreak	access:public	signature:(void)
getBlendFunc	particle_nodes/CCParticleBatchNode.cpp	/^ccBlendFunc CCParticleBatchNode::getBlendFunc(void)$/;"	f	class:CCParticleBatchNode	signature:(void)
getBlendFunc	particle_nodes/CCParticleBatchNode.h	/^    virtual ccBlendFunc getBlendFunc(void);$/;"	p	class:CCParticleBatchNode	access:public	signature:(void)
getBlendFunc	particle_nodes/CCParticleSystem.cpp	/^ccBlendFunc CCParticleSystem::getBlendFunc()$/;"	f	class:CCParticleSystem	signature:()
getBlendFunc	sprite_nodes/CCSprite.h	/^    inline ccBlendFunc getBlendFunc(void) { return m_sBlendFunc; }$/;"	f	class:CCSprite	access:public	signature:(void)
getBlendFunc	sprite_nodes/CCSpriteBatchNode.cpp	/^ccBlendFunc CCSpriteBatchNode::getBlendFunc(void)$/;"	f	class:CCSpriteBatchNode	signature:(void)
getBlendFunc	sprite_nodes/CCSpriteBatchNode.h	/^    virtual ccBlendFunc getBlendFunc(void);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(void)
getBoolForKey	support/user_default/CCUserDefault.cpp	/^ bool CCUserDefault::getBoolForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
getBoolForKey	support/user_default/CCUserDefault.cpp	/^bool CCUserDefault::getBoolForKey(const char* pKey, bool defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, bool defaultValue)
getBoolForKey	support/user_default/CCUserDefault.h	/^    bool    getBoolForKey(const char* pKey);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey)
getBoolForKey	support/user_default/CCUserDefault.h	/^    bool    getBoolForKey(const char* pKey, bool defaultValue);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, bool defaultValue)
getBoolForKey	support/user_default/CCUserDefaultAndroid.cpp	/^ bool CCUserDefault::getBoolForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
getBoolForKey	support/user_default/CCUserDefaultAndroid.cpp	/^bool CCUserDefault::getBoolForKey(const char* pKey, bool defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, bool defaultValue)
getCString	cocoa/CCString.cpp	/^const char* CCString::getCString() const$/;"	f	class:CCString	signature:() const
getCString	cocoa/CCString.h	/^    const char* getCString() const;$/;"	p	class:CCString	access:public	signature:() const
getCamera	base_nodes/CCNode.cpp	/^CCCamera* CCNode::getCamera()$/;"	f	class:CCNode	signature:()
getCamera	base_nodes/CCNode.h	/^    virtual CCCamera* getCamera();$/;"	p	class:CCNode	access:public	signature:()
getCapacity	textures/CCTextureAtlas.cpp	/^unsigned int CCTextureAtlas::getCapacity()$/;"	f	class:CCTextureAtlas	signature:()
getCenterXYZ	CCCamera.cpp	/^void CCCamera::getCenterXYZ(float *pCenterX, float *pCenterY, float *pCenterZ)$/;"	f	class:CCCamera	signature:(float *pCenterX, float *pCenterY, float *pCenterZ)
getCenterXYZ	CCCamera.h	/^    void getCenterXYZ(float *pCenterX, float *pCenterY, float *pCenterZ);$/;"	p	class:CCCamera	access:public	signature:(float *pCenterX, float *pCenterY, float *pCenterZ)
getCharacterSet	label_nodes/CCLabelBMFont.cpp	/^std::set<unsigned int>* CCBMFontConfiguration::getCharacterSet() const$/;"	f	class:CCBMFontConfiguration	signature:() const
getCharacterSet	label_nodes/CCLabelBMFont.h	/^    std::set<unsigned int>* getCharacterSet() const;$/;"	p	class:CCBMFontConfiguration	access:public	signature:() const
getChildByTag	base_nodes/CCNode.cpp	/^CCNode* CCNode::getChildByTag(int aTag)$/;"	f	class:CCNode	signature:(int aTag)
getChildByTag	base_nodes/CCNode.h	/^    CCNode * getChildByTag(int tag);$/;"	p	class:CCNode	access:public	signature:(int tag)
getChildren	base_nodes/CCNode.cpp	/^CCArray* CCNode::getChildren()$/;"	f	class:CCNode	signature:()
getChildren	base_nodes/CCNode.h	/^    virtual CCArray* getChildren();$/;"	p	class:CCNode	access:public	signature:()
getChildrenCount	base_nodes/CCNode.cpp	/^unsigned int CCNode::getChildrenCount(void)$/;"	f	class:CCNode	signature:(void)
getChildrenCount	base_nodes/CCNode.h	/^    unsigned int getChildrenCount(void);$/;"	p	class:CCNode	access:public	signature:(void)
getClaimedTouches	touch_dispatcher/CCTouchHandler.cpp	/^CCSet* CCTargetedTouchHandler::getClaimedTouches(void)$/;"	f	class:CCTargetedTouchHandler	signature:(void)
getClaimedTouches	touch_dispatcher/CCTouchHandler.h	/^    CCSet* getClaimedTouches(void);$/;"	p	class:CCTargetedTouchHandler	access:public	signature:(void)
getClassTypeInfo	CCDirector.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCDirector	access:public	signature:()
getClassTypeInfo	actions/CCActionInstant.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCCallFuncN	access:public	signature:()
getClassTypeInfo	actions/CCActionInstant.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCCallFuncND	access:public	signature:()
getClassTypeInfo	actions/CCActionInstant.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCCallFuncO	access:public	signature:()
getClassTypeInfo	include/ccTypeInfo.h	/^	virtual long getClassTypeInfo() = 0;$/;"	p	class:TypeInfo	access:public	signature:()
getClassTypeInfo	platform/CCFileUtils.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCFileUtils	access:public	signature:()
getClearColor	misc_nodes/CCRenderTexture.cpp	/^const ccColor4F& CCRenderTexture::getClearColor() const$/;"	f	class:CCRenderTexture	signature:() const
getClearColor	misc_nodes/CCRenderTexture.h	/^    const ccColor4F& getClearColor() const;$/;"	p	class:CCRenderTexture	access:public	signature:() const
getClearDepth	misc_nodes/CCRenderTexture.cpp	/^float CCRenderTexture::getClearDepth() const$/;"	f	class:CCRenderTexture	signature:() const
getClearDepth	misc_nodes/CCRenderTexture.h	/^    float getClearDepth() const;$/;"	p	class:CCRenderTexture	access:public	signature:() const
getClearFlags	misc_nodes/CCRenderTexture.cpp	/^unsigned int CCRenderTexture::getClearFlags() const$/;"	f	class:CCRenderTexture	signature:() const
getClearFlags	misc_nodes/CCRenderTexture.h	/^    unsigned int getClearFlags() const;$/;"	p	class:CCRenderTexture	access:public	signature:() const
getClearStencil	misc_nodes/CCRenderTexture.cpp	/^int CCRenderTexture::getClearStencil() const$/;"	f	class:CCRenderTexture	signature:() const
getClearStencil	misc_nodes/CCRenderTexture.h	/^    int getClearStencil() const;$/;"	p	class:CCRenderTexture	access:public	signature:() const
getColor	base_nodes/CCAtlasNode.cpp	/^const ccColor3B& CCAtlasNode::getColor()$/;"	f	class:CCAtlasNode	signature:()
getColor	base_nodes/CCAtlasNode.h	/^    virtual const ccColor3B& getColor(void);$/;"	p	class:CCAtlasNode	access:public	signature:(void)
getColor	base_nodes/CCNode.cpp	/^const ccColor3B& CCNodeRGBA::getColor(void)$/;"	f	class:CCNodeRGBA	signature:(void)
getColor	base_nodes/CCNode.h	/^    virtual const ccColor3B& getColor(void);$/;"	p	class:CCNodeRGBA	access:public	signature:(void)
getColor	include/CCProtocols.h	/^    virtual const ccColor3B& getColor(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
getColor	label_nodes/CCLabelBMFont.cpp	/^const ccColor3B& CCLabelBMFont::getColor()$/;"	f	class:CCLabelBMFont	signature:()
getColor	label_nodes/CCLabelBMFont.h	/^    virtual const ccColor3B& getColor(void);$/;"	p	class:CCLabelBMFont	access:public	signature:(void)
getColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^const ccColor3B& CCLayerRGBA::getColor()$/;"	f	class:CCLayerRGBA	signature:()
getColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual const ccColor3B& getColor();$/;"	p	class:CCLayerRGBA	access:public	signature:()
getColorSpaceHolder	text_input_node/CCTextFieldTTF.cpp	/^const ccColor3B& CCTextFieldTTF::getColorSpaceHolder()$/;"	f	class:CCTextFieldTTF	signature:()
getColorSpaceHolder	text_input_node/CCTextFieldTTF.h	/^    virtual const ccColor3B& getColorSpaceHolder();$/;"	p	class:CCTextFieldTTF	access:public	signature:()
getContentScaleFactor	CCDirector.cpp	/^float CCDirector::getContentScaleFactor(void)$/;"	f	class:CCDirector	signature:(void)
getContentScaleFactor	CCDirector.h	/^    float getContentScaleFactor(void);$/;"	p	class:CCDirector	access:public	signature:(void)
getContentSize	base_nodes/CCNode.cpp	/^const CCSize& CCNode::getContentSize()$/;"	f	class:CCNode	signature:()
getContentSize	base_nodes/CCNode.h	/^    virtual const CCSize& getContentSize();$/;"	p	class:CCNode	access:public	signature:()
getContentSize	textures/CCTexture2D.cpp	/^CCSize CCTexture2D::getContentSize()$/;"	f	class:CCTexture2D	signature:()
getContentSizeInPixels	textures/CCTexture2D.cpp	/^const CCSize& CCTexture2D::getContentSizeInPixels()$/;"	f	class:CCTexture2D	signature:()
getContentSizeInPixels	textures/CCTexture2D.h	/^    const CCSize& getContentSizeInPixels();$/;"	p	class:CCTexture2D	access:public	signature:()
getContentText	text_input_node/CCIMEDelegate.h	/^    virtual const char * getContentText() { return 0; }$/;"	f	class:CCIMEDelegate	access:protected	signature:()
getContentText	text_input_node/CCIMEDispatcher.cpp	/^const char * CCIMEDispatcher::getContentText()$/;"	f	class:CCIMEDispatcher	signature:()
getContentText	text_input_node/CCIMEDispatcher.h	/^    const char * getContentText();$/;"	p	class:CCIMEDispatcher	access:public	signature:()
getContentText	text_input_node/CCTextFieldTTF.cpp	/^const char * CCTextFieldTTF::getContentText()$/;"	f	class:CCTextFieldTTF	signature:()
getContentText	text_input_node/CCTextFieldTTF.h	/^    virtual const char * getContentText();$/;"	p	class:CCTextFieldTTF	access:protected	signature:()
getControlPointAtIndex	actions/CCActionCatmullRom.cpp	/^CCPoint CCPointArray::getControlPointAtIndex(unsigned int index)$/;"	f	class:CCPointArray	signature:(unsigned int index)
getControlPointAtIndex	actions/CCActionCatmullRom.h	/^    CCPoint getControlPointAtIndex(unsigned int index);$/;"	p	class:CCPointArray	access:public	signature:(unsigned int index)
getControlPoints	actions/CCActionCatmullRom.cpp	/^const std::vector<CCPoint*>* CCPointArray::getControlPoints()$/;"	f	class:CCPointArray	signature:()
getControlPoints	actions/CCActionCatmullRom.h	/^    const std::vector<CCPoint*>* getControlPoints();$/;"	p	class:CCPointArray	access:public	signature:()
getCurReleasePool	cocoa/CCAutoreleasePool.cpp	/^CCAutoreleasePool* CCPoolManager::getCurReleasePool()$/;"	f	class:CCPoolManager	signature:()
getCurReleasePool	cocoa/CCAutoreleasePool.h	/^    CCAutoreleasePool* getCurReleasePool();$/;"	p	class:CCPoolManager	access:private	signature:()
getCurrentIndex	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::getCurrentIndex(unsigned int* oldIndex, unsigned int* newIndex, CCNode* child, int z)$/;"	f	class:CCParticleBatchNode	signature:(unsigned int* oldIndex, unsigned int* newIndex, CCNode* child, int z)
getCurrentIndex	particle_nodes/CCParticleBatchNode.h	/^    void getCurrentIndex(unsigned int* oldIndex, unsigned int* newIndex, CCNode* child, int z);$/;"	p	class:CCParticleBatchNode	access:private	signature:(unsigned int* oldIndex, unsigned int* newIndex, CCNode* child, int z)
getCurrentLanguage	platform/CCApplicationProtocol.h	/^    virtual ccLanguageType getCurrentLanguage() = 0;$/;"	p	class:CCApplicationProtocol	access:public	signature:()
getCurrentString	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    inline const char* getCurrentString(){ return m_sCurrentString.c_str(); }$/;"	f	class:CCTMXMapInfo	access:public	signature:()
getDPI	platform/CCDevice.h	/^    static int getDPI();$/;"	p	class:CCDevice	access:public	signature:()
getData	platform/CCImage.h	/^    unsigned char *   getData()               { return m_pData; }$/;"	f	class:CCImage	access:public	signature:()
getDataLen	platform/CCImage.h	/^    int         getDataLen()            { return m_nWidth * m_nHeight; }$/;"	f	class:CCImage	access:public	signature:()
getDefaultTexture	particle_nodes/CCParticleExamples.cpp	/^static CCTexture2D* getDefaultTexture()$/;"	f	file:	signature:()
getDelegate	CCDirector.cpp	/^CCDirectorDelegate* CCDirector::getDelegate() const$/;"	f	class:CCDirector	signature:() const
getDelegate	CCDirector.h	/^    CCDirectorDelegate* getDelegate() const;$/;"	p	class:CCDirector	access:public	signature:() const
getDelegate	keypad_dispatcher/CCKeypadDelegate.cpp	/^CCKeypadDelegate* CCKeypadHandler::getDelegate()$/;"	f	class:CCKeypadHandler	signature:()
getDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^    CCKeypadDelegate* getDelegate();$/;"	p	class:CCKeypadHandler	access:public	signature:()
getDelegate	touch_dispatcher/CCTouchHandler.cpp	/^CCTouchDelegate* CCTouchHandler::getDelegate(void)$/;"	f	class:CCTouchHandler	signature:(void)
getDelegate	touch_dispatcher/CCTouchHandler.h	/^    CCTouchDelegate* getDelegate();$/;"	p	class:CCTouchHandler	access:public	signature:()
getDelta	actions/CCActionTiledGrid.cpp	/^CCSize CCShuffleTiles::getDelta(const CCSize& pos)$/;"	f	class:CCShuffleTiles	signature:(const CCSize& pos)
getDelta	actions/CCActionTiledGrid.h	/^    CCSize getDelta(const CCSize& pos);$/;"	p	class:CCShuffleTiles	access:public	signature:(const CCSize& pos)
getDelta	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getDelta() const$/;"	f	class:CCTouch	signature:() const
getDelta	touch_dispatcher/CCTouch.h	/^    CCPoint getDelta() const;$/;"	p	class:CCTouch	access:public	signature:() const
getDeltaTime	CCDirector.cpp	/^float CCDirector::getDeltaTime()$/;"	f	class:CCDirector	signature:()
getDescendants	sprite_nodes/CCSpriteBatchNode.h	/^    inline CCArray* getDescendants(void) { return m_pobDescendants; }$/;"	f	class:CCSpriteBatchNode	access:public	signature:(void)
getDesignResolutionSize	platform/CCEGLViewProtocol.cpp	/^const CCSize& CCEGLViewProtocol::getDesignResolutionSize() const $/;"	f	class:CCEGLViewProtocol	signature:() const
getDesignResolutionSize	platform/CCEGLViewProtocol.h	/^    virtual const CCSize&  getDesignResolutionSize() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
getDimensions	label_nodes/CCLabelTTF.cpp	/^CCSize CCLabelTTF::getDimensions()$/;"	f	class:CCLabelTTF	signature:()
getDimensions	label_nodes/CCLabelTTF.h	/^    CCSize getDimensions();$/;"	p	class:CCLabelTTF	access:public	signature:()
getDisabledColor	menu_nodes/CCMenuItem.cpp	/^const ccColor3B& CCMenuItemLabel::getDisabledColor()$/;"	f	class:CCMenuItemLabel	signature:()
getDisabledImage	menu_nodes/CCMenuItem.cpp	/^CCNode * CCMenuItemSprite::getDisabledImage()$/;"	f	class:CCMenuItemSprite	signature:()
getDisplayedColor	base_nodes/CCNode.cpp	/^const ccColor3B& CCNodeRGBA::getDisplayedColor()$/;"	f	class:CCNodeRGBA	signature:()
getDisplayedColor	base_nodes/CCNode.h	/^    virtual const ccColor3B& getDisplayedColor();$/;"	p	class:CCNodeRGBA	access:public	signature:()
getDisplayedColor	include/CCProtocols.h	/^    virtual const ccColor3B& getDisplayedColor(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
getDisplayedColor	label_nodes/CCLabelBMFont.cpp	/^const ccColor3B& CCLabelBMFont::getDisplayedColor()$/;"	f	class:CCLabelBMFont	signature:()
getDisplayedColor	label_nodes/CCLabelBMFont.h	/^    virtual const ccColor3B& getDisplayedColor();$/;"	p	class:CCLabelBMFont	access:public	signature:()
getDisplayedColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^const ccColor3B& CCLayerRGBA::getDisplayedColor()$/;"	f	class:CCLayerRGBA	signature:()
getDisplayedColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual const ccColor3B& getDisplayedColor();$/;"	p	class:CCLayerRGBA	access:public	signature:()
getDisplayedOpacity	base_nodes/CCNode.cpp	/^GLubyte CCNodeRGBA::getDisplayedOpacity(void)$/;"	f	class:CCNodeRGBA	signature:(void)
getDisplayedOpacity	base_nodes/CCNode.h	/^    virtual GLubyte getDisplayedOpacity();$/;"	p	class:CCNodeRGBA	access:public	signature:()
getDisplayedOpacity	include/CCProtocols.h	/^    virtual GLubyte getDisplayedOpacity(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
getDisplayedOpacity	label_nodes/CCLabelBMFont.cpp	/^GLubyte CCLabelBMFont::getDisplayedOpacity(void)$/;"	f	class:CCLabelBMFont	signature:(void)
getDisplayedOpacity	label_nodes/CCLabelBMFont.h	/^    virtual GLubyte getDisplayedOpacity();$/;"	p	class:CCLabelBMFont	access:public	signature:()
getDisplayedOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^GLubyte CCLayerRGBA::getDisplayedOpacity()$/;"	f	class:CCLayerRGBA	signature:()
getDisplayedOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual GLubyte getDisplayedOpacity();$/;"	p	class:CCLayerRGBA	access:public	signature:()
getDoubleForKey	support/user_default/CCUserDefault.cpp	/^double  CCUserDefault::getDoubleForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
getDoubleForKey	support/user_default/CCUserDefault.cpp	/^double CCUserDefault::getDoubleForKey(const char* pKey, double defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, double defaultValue)
getDoubleForKey	support/user_default/CCUserDefault.h	/^    double  getDoubleForKey(const char* pKey);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey)
getDoubleForKey	support/user_default/CCUserDefault.h	/^    double  getDoubleForKey(const char* pKey, double defaultValue);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, double defaultValue)
getDoubleForKey	support/user_default/CCUserDefaultAndroid.cpp	/^double  CCUserDefault::getDoubleForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
getDoubleForKey	support/user_default/CCUserDefaultAndroid.cpp	/^double CCUserDefault::getDoubleForKey(const char* pKey, double defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, double defaultValue)
getDuration	actions/CCAction.h	/^    inline float getDuration(void) { return m_fDuration; }$/;"	f	class:CCFiniteTimeAction	access:public	signature:(void)
getDuration	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getDuration()$/;"	f	class:CCParticleSystem	signature:()
getDuration	sprite_nodes/CCAnimation.cpp	/^float CCAnimation::getDuration(void)$/;"	f	class:CCAnimation	signature:(void)
getElapsed	actions/CCActionInterval.h	/^    inline float getElapsed(void) { return m_elapsed; }$/;"	f	class:CCActionInterval	access:public	signature:(void)
getEmissionRate	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEmissionRate()$/;"	f	class:CCParticleSystem	signature:()
getEmitterMode	particle_nodes/CCParticleSystem.cpp	/^int CCParticleSystem::getEmitterMode()$/;"	f	class:CCParticleSystem	signature:()
getEnabledSelectors	touch_dispatcher/CCTouchHandler.cpp	/^int CCTouchHandler::getEnabledSelectors(void)$/;"	f	class:CCTouchHandler	signature:(void)
getEnabledSelectors	touch_dispatcher/CCTouchHandler.h	/^    int getEnabledSelectors(void);$/;"	p	class:CCTouchHandler	access:public	signature:(void)
getEndColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^const ccColor3B& CCLayerGradient::getEndColor()$/;"	f	class:CCLayerGradient	signature:()
getEndColor	particle_nodes/CCParticleSystem.cpp	/^const ccColor4F& CCParticleSystem::getEndColor()$/;"	f	class:CCParticleSystem	signature:()
getEndColorVar	particle_nodes/CCParticleSystem.cpp	/^const ccColor4F& CCParticleSystem::getEndColorVar()$/;"	f	class:CCParticleSystem	signature:()
getEndOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^GLubyte CCLayerGradient::getEndOpacity()$/;"	f	class:CCLayerGradient	signature:()
getEndRadius	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndRadius()$/;"	f	class:CCParticleSystem	signature:()
getEndRadius	particle_nodes/CCParticleSystem.h	/^    virtual float getEndRadius();$/;"	p	class:CCParticleSystem	access:public	signature:()
getEndRadiusVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndRadiusVar()$/;"	f	class:CCParticleSystem	signature:()
getEndRadiusVar	particle_nodes/CCParticleSystem.h	/^    virtual float getEndRadiusVar();$/;"	p	class:CCParticleSystem	access:public	signature:()
getEndSize	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndSize()$/;"	f	class:CCParticleSystem	signature:()
getEndSizeVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndSizeVar()$/;"	f	class:CCParticleSystem	signature:()
getEndSpin	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndSpin()$/;"	f	class:CCParticleSystem	signature:()
getEndSpinVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndSpinVar()$/;"	f	class:CCParticleSystem	signature:()
getEntryId	script_support/CCScriptSupport.h	/^    int getEntryId(void) {$/;"	f	class:CCScriptHandlerEntry	access:public	signature:(void)
getEyeXYZ	CCCamera.cpp	/^void CCCamera::getEyeXYZ(float *pEyeX, float *pEyeY, float *pEyeZ)$/;"	f	class:CCCamera	signature:(float *pEyeX, float *pEyeY, float *pEyeZ)
getEyeXYZ	CCCamera.h	/^    void getEyeXYZ(float *pEyeX, float *pEyeY, float *pEyeZ);$/;"	p	class:CCCamera	access:public	signature:(float *pEyeX, float *pEyeY, float *pEyeZ)
getFPSImageData	CCDirector.cpp	/^void CCDirector::getFPSImageData(unsigned char** datapointer, unsigned int* length)$/;"	f	class:CCDirector	signature:(unsigned char** datapointer, unsigned int* length)
getFPSImageData	CCDirector.h	/^    void getFPSImageData(unsigned char** datapointer, unsigned int* length);$/;"	p	class:CCDirector	access:protected	signature:(unsigned char** datapointer, unsigned int* length)
getFileData	platform/CCFileUtils.cpp	/^unsigned char* CCFileUtils::getFileData(const char* pszFileName, const char* pszMode, unsigned long * pSize)$/;"	f	class:CCFileUtils	signature:(const char* pszFileName, const char* pszMode, unsigned long * pSize)
getFileData	platform/CCFileUtils.h	/^    virtual unsigned char* getFileData(const char* pszFileName, const char* pszMode, unsigned long * pSize);$/;"	p	class:CCFileUtils	access:public	signature:(const char* pszFileName, const char* pszMode, unsigned long * pSize)
getFileData	support/zip_support/ZipUtils.cpp	/^unsigned char *ZipFile::getFileData(const std::string &fileName, unsigned long *pSize)$/;"	f	class:ZipFile	signature:(const std::string &fileName, unsigned long *pSize)
getFileData	support/zip_support/ZipUtils.h	/^        unsigned char *getFileData(const std::string &fileName, unsigned long *pSize);$/;"	p	class:cocos2d::ZipFile	access:public	signature:(const std::string &fileName, unsigned long *pSize)
getFileDataFromZip	platform/CCFileUtils.cpp	/^unsigned char* CCFileUtils::getFileDataFromZip(const char* pszZipFilePath, const char* pszFileName, unsigned long * pSize)$/;"	f	class:CCFileUtils	signature:(const char* pszZipFilePath, const char* pszFileName, unsigned long * pSize)
getFileDataFromZip	platform/CCFileUtils.h	/^    virtual unsigned char* getFileDataFromZip(const char* pszZipFilePath, const char* pszFileName, unsigned long * pSize);$/;"	p	class:CCFileUtils	access:public	signature:(const char* pszZipFilePath, const char* pszFileName, unsigned long * pSize)
getFloatForKey	support/user_default/CCUserDefault.cpp	/^float CCUserDefault::getFloatForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
getFloatForKey	support/user_default/CCUserDefault.cpp	/^float CCUserDefault::getFloatForKey(const char* pKey, float defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, float defaultValue)
getFloatForKey	support/user_default/CCUserDefault.h	/^    float    getFloatForKey(const char* pKey);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey)
getFloatForKey	support/user_default/CCUserDefault.h	/^    float    getFloatForKey(const char* pKey, float defaultValue);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, float defaultValue)
getFloatForKey	support/user_default/CCUserDefaultAndroid.cpp	/^float CCUserDefault::getFloatForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
getFloatForKey	support/user_default/CCUserDefaultAndroid.cpp	/^float CCUserDefault::getFloatForKey(const char* pKey, float defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, float defaultValue)
getFntFile	label_nodes/CCLabelBMFont.cpp	/^const char* CCLabelBMFont::getFntFile()$/;"	f	class:CCLabelBMFont	signature:()
getFntFile	label_nodes/CCLabelBMFont.h	/^    const char* getFntFile();$/;"	p	class:CCLabelBMFont	access:public	signature:()
getFontName	label_nodes/CCLabelTTF.cpp	/^const char* CCLabelTTF::getFontName()$/;"	f	class:CCLabelTTF	signature:()
getFontName	label_nodes/CCLabelTTF.h	/^    const char* getFontName();$/;"	p	class:CCLabelTTF	access:public	signature:()
getFontSize	label_nodes/CCLabelTTF.cpp	/^float CCLabelTTF::getFontSize()$/;"	f	class:CCLabelTTF	signature:()
getFontSize	label_nodes/CCLabelTTF.h	/^    float getFontSize();$/;"	p	class:CCLabelTTF	access:public	signature:()
getFormat	textures/CCTexturePVR.h	/^    inline CCTexture2DPixelFormat getFormat() { return m_eFormat; }$/;"	f	class:CCTexturePVR	access:public	signature:()
getFrameSize	platform/CCEGLViewProtocol.cpp	/^const CCSize& CCEGLViewProtocol::getFrameSize() const$/;"	f	class:CCEGLViewProtocol	signature:() const
getFrameSize	platform/CCEGLViewProtocol.h	/^    virtual const CCSize& getFrameSize() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
getFullPathForDirectoryAndFilename	platform/CCFileUtils.cpp	/^std::string CCFileUtils::getFullPathForDirectoryAndFilename(const std::string& strDirectory, const std::string& strFilename)$/;"	f	class:CCFileUtils	signature:(const std::string& strDirectory, const std::string& strFilename)
getFullPathForDirectoryAndFilename	platform/CCFileUtils.h	/^    virtual std::string getFullPathForDirectoryAndFilename(const std::string& strDirectory, const std::string& strFilename);$/;"	p	class:CCFileUtils	access:protected	signature:(const std::string& strDirectory, const std::string& strFilename)
getGLServerState	base_nodes/CCNode.cpp	/^ccGLServerState CCNode::getGLServerState()$/;"	f	class:CCNode	signature:()
getGLServerState	base_nodes/CCNode.h	/^    virtual ccGLServerState getGLServerState();$/;"	p	class:CCNode	access:public	signature:()
getGravity	particle_nodes/CCParticleSystem.cpp	/^const CCPoint& CCParticleSystem::getGravity()$/;"	f	class:CCParticleSystem	signature:()
getGravity	particle_nodes/CCParticleSystem.h	/^    virtual const CCPoint& getGravity();$/;"	p	class:CCParticleSystem	access:public	signature:()
getGrid	actions/CCActionGrid.cpp	/^CCGridBase* CCGrid3DAction::getGrid(void)$/;"	f	class:CCGrid3DAction	signature:(void)
getGrid	actions/CCActionGrid.cpp	/^CCGridBase* CCGridAction::getGrid(void)$/;"	f	class:CCGridAction	signature:(void)
getGrid	actions/CCActionGrid.cpp	/^CCGridBase* CCTiledGrid3DAction::getGrid(void)$/;"	f	class:CCTiledGrid3DAction	signature:(void)
getGrid	actions/CCActionGrid.h	/^    virtual CCGridBase* getGrid(void);$/;"	p	class:CCGrid3DAction	access:public	signature:(void)
getGrid	actions/CCActionGrid.h	/^    virtual CCGridBase* getGrid(void);$/;"	p	class:CCGridAction	access:public	signature:(void)
getGrid	actions/CCActionGrid.h	/^    virtual CCGridBase* getGrid(void);$/;"	p	class:CCTiledGrid3DAction	access:public	signature:(void)
getGrid	base_nodes/CCNode.cpp	/^CCGridBase* CCNode::getGrid()$/;"	f	class:CCNode	signature:()
getGrid	base_nodes/CCNode.h	/^    virtual CCGridBase* getGrid();$/;"	p	class:CCNode	access:public	signature:()
getGridSize	effects/CCGrid.h	/^    inline const CCSize& getGridSize(void) { return m_sGridSize; }$/;"	f	class:CCGridBase	access:public	signature:(void)
getGroupName	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    inline const char* getGroupName(){ return m_sGroupName.c_str(); }$/;"	f	class:CCTMXObjectGroup	access:public	signature:()
getHandler	script_support/CCScriptSupport.h	/^    int getHandler(void) {$/;"	f	class:CCScriptHandlerEntry	access:public	signature:(void)
getHashCodeByString	include/ccTypeInfo.h	/^static inline unsigned int getHashCodeByString(const char *key)$/;"	f	signature:(const char *key)
getHeight	textures/CCTexturePVR.h	/^    inline unsigned int getHeight() { return m_uHeight; }$/;"	f	class:CCTexturePVR	access:public	signature:()
getHorizontalAlignment	label_nodes/CCLabelTTF.cpp	/^CCTextAlignment CCLabelTTF::getHorizontalAlignment()$/;"	f	class:CCLabelTTF	signature:()
getHorizontalAlignment	label_nodes/CCLabelTTF.h	/^    CCTextAlignment getHorizontalAlignment();$/;"	p	class:CCLabelTTF	access:public	signature:()
getID	touch_dispatcher/CCTouch.h	/^    int getID() const$/;"	f	class:CCTouch	access:public	signature:() const
getInnerAction	actions/CCAction.h	/^    inline CCActionInterval* getInnerAction()$/;"	f	class:CCSpeed	access:public	signature:()
getInnerAction	actions/CCActionEase.cpp	/^CCActionInterval* CCActionEase::getInnerAction()$/;"	f	class:CCActionEase	signature:()
getInnerAction	actions/CCActionEase.h	/^    virtual CCActionInterval* getInnerAction();$/;"	p	class:CCActionEase	access:public	signature:()
getInnerAction	actions/CCActionInterval.h	/^    inline CCActionInterval* getInnerAction()$/;"	f	class:CCRepeatForever	access:public	signature:()
getInnerAction	actions/CCActionInterval.h	/^    inline CCFiniteTimeAction* getInnerAction()$/;"	f	class:CCRepeat	access:public	signature:()
getIntKey	cocoa/CCDictionary.h	/^    inline intptr_t getIntKey() const$/;"	f	class:CCDictElement	access:public	signature:() const
getIntegerForKey	support/user_default/CCUserDefault.cpp	/^int CCUserDefault::getIntegerForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
getIntegerForKey	support/user_default/CCUserDefault.cpp	/^int CCUserDefault::getIntegerForKey(const char* pKey, int defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, int defaultValue)
getIntegerForKey	support/user_default/CCUserDefault.h	/^    int     getIntegerForKey(const char* pKey);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey)
getIntegerForKey	support/user_default/CCUserDefault.h	/^    int     getIntegerForKey(const char* pKey, int defaultValue);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, int defaultValue)
getIntegerForKey	support/user_default/CCUserDefaultAndroid.cpp	/^int CCUserDefault::getIntegerForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
getIntegerForKey	support/user_default/CCUserDefaultAndroid.cpp	/^int CCUserDefault::getIntegerForKey(const char* pKey, int defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, int defaultValue)
getInterval	CCScheduler.cpp	/^float CCTimer::getInterval() const$/;"	f	class:CCTimer	signature:() const
getInterval	CCScheduler.h	/^    float getInterval(void) const;$/;"	p	class:CCTimer	access:public	signature:(void) const
getKeypadDispatcher	CCDirector.cpp	/^CCKeypadDispatcher* CCDirector::getKeypadDispatcher()$/;"	f	class:CCDirector	signature:()
getLabel	menu_nodes/CCMenuItem.cpp	/^CCNode *CCMenuItemLabel::getLabel()$/;"	f	class:CCMenuItemLabel	signature:()
getLayerName	tilemap_parallax_nodes/CCTMXLayer.h	/^    inline const char* getLayerName(){ return m_sLayerName.c_str(); }$/;"	f	class:CCTMXLayer	access:public	signature:()
getLayers	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCArray* CCTMXMapInfo::getLayers()$/;"	f	class:CCTMXMapInfo	signature:()
getLensEffect	actions/CCActionGrid3D.h	/^    inline float getLensEffect(void) { return m_fLensEffect; }$/;"	f	class:CCLens3D	access:public	signature:(void)
getLetterPosXLeft	label_nodes/CCLabelBMFont.cpp	/^float CCLabelBMFont::getLetterPosXLeft( CCSprite* sp )$/;"	f	class:CCLabelBMFont	signature:( CCSprite* sp )
getLetterPosXLeft	label_nodes/CCLabelBMFont.h	/^    float getLetterPosXLeft( CCSprite* characterSprite );$/;"	p	class:CCLabelBMFont	access:private	signature:( CCSprite* characterSprite )
getLetterPosXRight	label_nodes/CCLabelBMFont.cpp	/^float CCLabelBMFont::getLetterPosXRight( CCSprite* sp )$/;"	f	class:CCLabelBMFont	signature:( CCSprite* sp )
getLetterPosXRight	label_nodes/CCLabelBMFont.h	/^    float getLetterPosXRight( CCSprite* characterSprite );$/;"	p	class:CCLabelBMFont	access:private	signature:( CCSprite* characterSprite )
getLife	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getLife()$/;"	f	class:CCParticleSystem	signature:()
getLifeVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getLifeVar()$/;"	f	class:CCParticleSystem	signature:()
getLocation	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getLocation() const$/;"	f	class:CCTouch	signature:() const
getLocation	touch_dispatcher/CCTouch.h	/^    CCPoint getLocation() const;$/;"	p	class:CCTouch	access:public	signature:() const
getLocationInView	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getLocationInView() const $/;"	f	class:CCTouch	signature:() const
getLocationInView	touch_dispatcher/CCTouch.h	/^    CCPoint getLocationInView() const;$/;"	p	class:CCTouch	access:public	signature:() const
getMaxModelviewStackDepth	CCConfiguration.h	/^    inline int getMaxModelviewStackDepth(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
getMaxS	textures/CCTexture2D.cpp	/^GLfloat CCTexture2D::getMaxS()$/;"	f	class:CCTexture2D	signature:()
getMaxT	textures/CCTexture2D.cpp	/^GLfloat CCTexture2D::getMaxT()$/;"	f	class:CCTexture2D	signature:()
getMaxTextureSize	CCConfiguration.h	/^    inline int getMaxTextureSize(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
getMaxTextureUnits	CCConfiguration.h	/^    inline int getMaxTextureUnits(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
getMaxX	cocoa/CCGeometry.cpp	/^float CCRect::getMaxX() const$/;"	f	class:CCRect	signature:() const
getMaxX	cocoa/CCGeometry.h	/^    float getMaxX() const; \/\/\/ return the rightmost x-value of current rect$/;"	p	class:CCRect	access:public	signature:() const
getMaxY	cocoa/CCGeometry.cpp	/^float CCRect::getMaxY() const$/;"	f	class:CCRect	signature:() const
getMaxY	cocoa/CCGeometry.h	/^    float getMaxY() const; \/\/\/ return the topmost y-value of current rect$/;"	p	class:CCRect	access:public	signature:() const
getMidX	cocoa/CCGeometry.cpp	/^float CCRect::getMidX() const$/;"	f	class:CCRect	signature:() const
getMidX	cocoa/CCGeometry.h	/^    float getMidX() const; \/\/\/ return the midpoint x-value of current rect$/;"	p	class:CCRect	access:public	signature:() const
getMidY	cocoa/CCGeometry.cpp	/^float CCRect::getMidY() const$/;"	f	class:CCRect	signature:() const
getMidY	cocoa/CCGeometry.h	/^    float getMidY() const; \/\/\/ return the midpoint y-value of current rect$/;"	p	class:CCRect	access:public	signature:() const
getMidpoint	misc_nodes/CCProgressTimer.cpp	/^CCPoint CCProgressTimer::getMidpoint(void)$/;"	f	class:CCProgressTimer	signature:(void)
getMinX	cocoa/CCGeometry.cpp	/^float CCRect::getMinX() const$/;"	f	class:CCRect	signature:() const
getMinX	cocoa/CCGeometry.h	/^    float getMinX() const; \/\/\/ return the leftmost x-value of current rect$/;"	p	class:CCRect	access:public	signature:() const
getMinY	cocoa/CCGeometry.cpp	/^float CCRect::getMinY() const$/;"	f	class:CCRect	signature:() const
getMinY	cocoa/CCGeometry.h	/^    float getMinY() const; \/\/\/ return the bottommost y-value of current rect$/;"	p	class:CCRect	access:public	signature:() const
getName	support/CCNotificationCenter.cpp	/^char *CCNotificationObserver::getName()$/;"	f	class:CCNotificationObserver	signature:()
getName	textures/CCTexture2D.cpp	/^GLuint CCTexture2D::getName()$/;"	f	class:CCTexture2D	signature:()
getName	textures/CCTexturePVR.h	/^    inline unsigned int getName() { return m_uName; }$/;"	f	class:CCTexturePVR	access:public	signature:()
getNewFilename	platform/CCFileUtils.cpp	/^std::string CCFileUtils::getNewFilename(const char* pszFileName)$/;"	f	class:CCFileUtils	signature:(const char* pszFileName)
getNewFilename	platform/CCFileUtils.h	/^    virtual std::string getNewFilename(const char* pszFileName);$/;"	p	class:CCFileUtils	access:protected	signature:(const char* pszFileName)
getNormalImage	menu_nodes/CCMenuItem.cpp	/^CCNode * CCMenuItemSprite::getNormalImage()$/;"	f	class:CCMenuItemSprite	signature:()
getNotificationNode	CCDirector.cpp	/^CCNode* CCDirector::getNotificationNode() $/;"	f	class:CCDirector	signature:()
getNotificationNode	CCDirector.h	/^    CCNode* getNotificationNode();$/;"	p	class:CCDirector	access:public	signature:()
getNumberOfMipmaps	textures/CCTexturePVR.h	/^    inline unsigned int getNumberOfMipmaps() { return m_uNumberOfMipmaps; }$/;"	f	class:CCTexturePVR	access:public	signature:()
getObject	actions/CCActionInstant.h	/^    inline CCObject* getObject()$/;"	f	class:CCCallFuncO	access:public	signature:()
getObject	cocoa/CCDictionary.h	/^    inline CCObject* getObject() const { return m_pObject; }$/;"	f	class:CCDictElement	access:public	signature:() const
getObject	support/CCNotificationCenter.cpp	/^CCObject *CCNotificationObserver::getObject()$/;"	f	class:CCNotificationObserver	signature:()
getObjectGroups	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCArray* CCTMXTiledMap::getObjectGroups()$/;"	f	class:CCTMXTiledMap	signature:()
getObjectGroups	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCArray* CCTMXMapInfo::getObjectGroups()$/;"	f	class:CCTMXMapInfo	signature:()
getObjects	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCArray* CCTMXObjectGroup::getObjects()$/;"	f	class:CCTMXObjectGroup	signature:()
getOffset	sprite_nodes/CCSpriteFrame.cpp	/^const CCPoint& CCSpriteFrame::getOffset(void)$/;"	f	class:CCSpriteFrame	signature:(void)
getOffset	sprite_nodes/CCSpriteFrame.h	/^    const CCPoint& getOffset(void);$/;"	p	class:CCSpriteFrame	access:public	signature:(void)
getOffsetInPixels	sprite_nodes/CCSpriteFrame.cpp	/^const CCPoint& CCSpriteFrame::getOffsetInPixels(void)$/;"	f	class:CCSpriteFrame	signature:(void)
getOffsetInPixels	sprite_nodes/CCSpriteFrame.h	/^    const CCPoint& getOffsetInPixels(void);$/;"	p	class:CCSpriteFrame	access:public	signature:(void)
getOffsetPosition	sprite_nodes/CCSprite.h	/^    inline const CCPoint& getOffsetPosition(void) { return m_obOffsetPosition; }$/;"	f	class:CCSprite	access:public	signature:(void)
getOpacity	base_nodes/CCNode.cpp	/^GLubyte CCNodeRGBA::getOpacity(void)$/;"	f	class:CCNodeRGBA	signature:(void)
getOpacity	base_nodes/CCNode.h	/^    virtual GLubyte getOpacity();$/;"	p	class:CCNodeRGBA	access:public	signature:()
getOpacity	include/CCProtocols.h	/^    virtual GLubyte getOpacity(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
getOpacity	label_nodes/CCLabelBMFont.cpp	/^GLubyte CCLabelBMFont::getOpacity(void)$/;"	f	class:CCLabelBMFont	signature:(void)
getOpacity	label_nodes/CCLabelBMFont.h	/^    virtual void setOpacityModifyRGB(bool isOpacityModifyRGB); virtual GLubyte getOpacity();$/;"	p	class:CCLabelBMFont	access:public	signature:()
getOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^GLubyte CCLayerRGBA::getOpacity()$/;"	f	class:CCLayerRGBA	signature:()
getOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual GLubyte getOpacity();$/;"	p	class:CCLayerRGBA	access:public	signature:()
getOpacity	misc_nodes/CCMotionStreak.cpp	/^GLubyte CCMotionStreak::getOpacity(void)$/;"	f	class:CCMotionStreak	signature:(void)
getOpacity	misc_nodes/CCMotionStreak.h	/^    virtual GLubyte getOpacity(void);$/;"	p	class:CCMotionStreak	access:public	signature:(void)
getOpacityModifyRGB	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::getOpacityModifyRGB()$/;"	f	class:CCParticleSystem	signature:()
getOpenGLView	CCDirector.h	/^    inline CCEGLView* getOpenGLView(void) { return m_pobOpenGLView; }$/;"	f	class:CCDirector	access:public	signature:(void)
getOrderOfArrival	base_nodes/CCNode.cpp	/^unsigned int CCNode::getOrderOfArrival()$/;"	f	class:CCNode	signature:()
getOrderOfArrival	base_nodes/CCNode.h	/^    virtual unsigned int getOrderOfArrival();$/;"	p	class:CCNode	access:public	signature:()
getOriginalSize	sprite_nodes/CCSpriteFrame.h	/^    inline const CCSize& getOriginalSize(void) { return m_obOriginalSize; }$/;"	f	class:CCSpriteFrame	access:public	signature:(void)
getOriginalSizeInPixels	sprite_nodes/CCSpriteFrame.h	/^    inline const CCSize& getOriginalSizeInPixels(void) { return m_obOriginalSizeInPixels; }$/;"	f	class:CCSpriteFrame	access:public	signature:(void)
getOriginalTarget	actions/CCAction.h	/^    inline CCNode* getOriginalTarget(void) { return m_pOriginalTarget; } $/;"	f	class:CCAction	access:public	signature:(void)
getParent	base_nodes/CCNode.cpp	/^CCNode * CCNode::getParent()$/;"	f	class:CCNode	signature:()
getParent	base_nodes/CCNode.h	/^    virtual CCNode* getParent();$/;"	p	class:CCNode	access:public	signature:()
getParticleCount	particle_nodes/CCParticleSystem.cpp	/^unsigned int CCParticleSystem::getParticleCount()$/;"	f	class:CCParticleSystem	signature:()
getPathForFilename	platform/CCFileUtils.cpp	/^std::string CCFileUtils::getPathForFilename(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath)$/;"	f	class:CCFileUtils	signature:(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath)
getPathForFilename	platform/CCFileUtils.h	/^    virtual std::string getPathForFilename(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath);$/;"	p	class:CCFileUtils	access:protected	signature:(const std::string& filename, const std::string& resolutionDirectory, const std::string& searchPath)
getPercentage	misc_nodes/CCProgressTimer.h	/^    inline float getPercentage(void) {return m_fPercentage; }$/;"	f	class:CCProgressTimer	access:public	signature:(void)
getPeriod	actions/CCActionEase.h	/^    inline float getPeriod(void) { return m_fPeriod; }$/;"	f	class:CCEaseElastic	access:public	signature:(void)
getPixelFormat	textures/CCTexture2D.cpp	/^CCTexture2DPixelFormat CCTexture2D::getPixelFormat()$/;"	f	class:CCTexture2D	signature:()
getPixelsHigh	textures/CCTexture2D.cpp	/^unsigned int CCTexture2D::getPixelsHigh()$/;"	f	class:CCTexture2D	signature:()
getPixelsWide	textures/CCTexture2D.cpp	/^unsigned int CCTexture2D::getPixelsWide()$/;"	f	class:CCTexture2D	signature:()
getPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^const char * CCTextFieldTTF::getPlaceHolder(void)$/;"	f	class:CCTextFieldTTF	signature:(void)
getPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    virtual const char * getPlaceHolder(void);$/;"	p	class:CCTextFieldTTF	access:public	signature:(void)
getPoints	actions/CCActionCatmullRom.h	/^    inline CCPointArray* getPoints() { return m_pPoints; }$/;"	f	class:CCCardinalSplineTo	access:public	signature:()
getPosVar	particle_nodes/CCParticleSystem.cpp	/^const CCPoint& CCParticleSystem::getPosVar()$/;"	f	class:CCParticleSystem	signature:()
getPosition	actions/CCActionGrid3D.h	/^    inline const CCPoint& getPosition(void) { return m_position; }$/;"	f	class:CCLens3D	access:public	signature:(void)
getPosition	actions/CCActionGrid3D.h	/^    inline const CCPoint& getPosition(void) { return m_position; }$/;"	f	class:CCRipple3D	access:public	signature:(void)
getPosition	actions/CCActionGrid3D.h	/^    inline const CCPoint& getPosition(void) { return m_position; }$/;"	f	class:CCTwirl	access:public	signature:(void)
getPosition	base_nodes/CCNode.cpp	/^const CCPoint& CCNode::getPosition()$/;"	f	class:CCNode	signature:()
getPosition	base_nodes/CCNode.cpp	/^void CCNode::getPosition(float* x, float* y)$/;"	f	class:CCNode	signature:(float* x, float* y)
getPosition	base_nodes/CCNode.h	/^    virtual const CCPoint& getPosition();$/;"	p	class:CCNode	access:public	signature:()
getPosition	base_nodes/CCNode.h	/^    void getPosition(float* x, float* y);$/;"	p	class:CCNode	access:public	signature:(float* x, float* y)
getPositionType	particle_nodes/CCParticleSystem.cpp	/^tCCPositionType CCParticleSystem::getPositionType()$/;"	f	class:CCParticleSystem	signature:()
getPositionX	base_nodes/CCNode.cpp	/^float CCNode::getPositionX(void)$/;"	f	class:CCNode	signature:(void)
getPositionX	base_nodes/CCNode.h	/^    float getPositionX(void);$/;"	p	class:CCNode	access:public	signature:(void)
getPositionY	base_nodes/CCNode.cpp	/^float CCNode::getPositionY(void)$/;"	f	class:CCNode	signature:(void)
getPositionY	base_nodes/CCNode.h	/^    float getPositionY(void);$/;"	p	class:CCNode	access:public	signature:(void)
getPreviousLocation	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getPreviousLocation() const$/;"	f	class:CCTouch	signature:() const
getPreviousLocation	touch_dispatcher/CCTouch.h	/^    CCPoint getPreviousLocation() const;$/;"	p	class:CCTouch	access:public	signature:() const
getPreviousLocationInView	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getPreviousLocationInView() const $/;"	f	class:CCTouch	signature:() const
getPreviousLocationInView	touch_dispatcher/CCTouch.h	/^    CCPoint getPreviousLocationInView() const;$/;"	p	class:CCTouch	access:public	signature:() const
getPriority	script_support/CCScriptSupport.h	/^    int getPriority(void) {$/;"	f	class:CCTouchScriptHandlerEntry	access:public	signature:(void)
getPriority	touch_dispatcher/CCTouchHandler.cpp	/^int CCTouchHandler::getPriority(void)$/;"	f	class:CCTouchHandler	signature:(void)
getPriority	touch_dispatcher/CCTouchHandler.h	/^    int getPriority(void);$/;"	p	class:CCTouchHandler	access:public	signature:(void)
getProgram	shaders/CCGLProgram.h	/^    inline const GLuint getProgram() { return m_uProgram; }$/;"	f	class:CCGLProgram	access:public	signature:()
getProjection	CCDirector.h	/^    inline ccDirectorProjection getProjection(void) { return m_eProjection; }$/;"	f	class:CCDirector	access:public	signature:(void)
getProperties	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCDictionary * CCTMXLayer::getProperties()$/;"	f	class:CCTMXLayer	signature:()
getProperties	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCDictionary* CCTMXObjectGroup::getProperties()$/;"	f	class:CCTMXObjectGroup	signature:()
getProperties	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCDictionary * CCTMXTiledMap::getProperties()$/;"	f	class:CCTMXTiledMap	signature:()
getProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCDictionary * CCTMXLayerInfo::getProperties()$/;"	f	class:CCTMXLayerInfo	signature:()
getProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCDictionary * CCTMXMapInfo::getProperties()$/;"	f	class:CCTMXMapInfo	signature:()
getQuad	sprite_nodes/CCSprite.h	/^    inline ccV3F_C4B_T2F_Quad getQuad(void) { return m_sQuad; }$/;"	f	class:CCSprite	access:public	signature:(void)
getQuads	textures/CCTextureAtlas.cpp	/^ccV3F_C4B_T2F_Quad* CCTextureAtlas::getQuads()$/;"	f	class:CCTextureAtlas	signature:()
getQuadsToDraw	base_nodes/CCAtlasNode.cpp	/^unsigned int CCAtlasNode::getQuadsToDraw()$/;"	f	class:CCAtlasNode	signature:()
getRadialAccel	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getRadialAccel()$/;"	f	class:CCParticleSystem	signature:()
getRadialAccel	particle_nodes/CCParticleSystem.h	/^    virtual float getRadialAccel();$/;"	p	class:CCParticleSystem	access:public	signature:()
getRadialAccelVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getRadialAccelVar()$/;"	f	class:CCParticleSystem	signature:()
getRadialAccelVar	particle_nodes/CCParticleSystem.h	/^    virtual float getRadialAccelVar();$/;"	p	class:CCParticleSystem	access:public	signature:()
getRate	actions/CCActionEase.h	/^    inline float getRate(void) { return m_fRate; }$/;"	f	class:CCEaseRateAction	access:public	signature:(void)
getRate	actions/CCActionGrid.h	/^    inline float getRate(void) { return m_fRate; }$/;"	f	class:CCAccelAmplitude	access:public	signature:(void)
getRate	actions/CCActionGrid.h	/^    inline float getRate(void) { return m_fRate; }$/;"	f	class:CCAccelDeccelAmplitude	access:public	signature:(void)
getRate	actions/CCActionGrid.h	/^    inline float getRate(void) { return m_fRate; }$/;"	f	class:CCDeccelAmplitude	access:public	signature:(void)
getRect	sprite_nodes/CCSpriteFrame.h	/^    inline const CCRect& getRect(void) { return m_obRect; }$/;"	f	class:CCSpriteFrame	access:public	signature:(void)
getRectInPixels	sprite_nodes/CCSpriteFrame.h	/^    inline const CCRect& getRectInPixels(void) { return m_obRectInPixels; }$/;"	f	class:CCSpriteFrame	access:public	signature:(void)
getReuseGrid	effects/CCGrid.h	/^    inline int getReuseGrid(void) { return m_nReuseGrid; }$/;"	f	class:CCGridBase	access:public	signature:(void)
getRotatePerSecond	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getRotatePerSecond()$/;"	f	class:CCParticleSystem	signature:()
getRotatePerSecond	particle_nodes/CCParticleSystem.h	/^    virtual float getRotatePerSecond();$/;"	p	class:CCParticleSystem	access:public	signature:()
getRotatePerSecondVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getRotatePerSecondVar()$/;"	f	class:CCParticleSystem	signature:()
getRotatePerSecondVar	particle_nodes/CCParticleSystem.h	/^    virtual float getRotatePerSecondVar();$/;"	p	class:CCParticleSystem	access:public	signature:()
getRotation	base_nodes/CCNode.cpp	/^float CCNode::getRotation()$/;"	f	class:CCNode	signature:()
getRotation	base_nodes/CCNode.h	/^    virtual float getRotation();$/;"	p	class:CCNode	access:public	signature:()
getRotationIsDir	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::getRotationIsDir()$/;"	f	class:CCParticleSystem	signature:()
getRotationIsDir	particle_nodes/CCParticleSystem.h	/^    virtual bool getRotationIsDir();$/;"	p	class:CCParticleSystem	access:public	signature:()
getRotationX	base_nodes/CCNode.cpp	/^float CCNode::getRotationX()$/;"	f	class:CCNode	signature:()
getRotationX	base_nodes/CCNode.h	/^    virtual float getRotationX();$/;"	p	class:CCNode	access:public	signature:()
getRotationY	base_nodes/CCNode.cpp	/^float CCNode::getRotationY()$/;"	f	class:CCNode	signature:()
getRotationY	base_nodes/CCNode.h	/^    virtual float getRotationY();$/;"	p	class:CCNode	access:public	signature:()
getRunningScene	CCDirector.h	/^    inline CCScene* getRunningScene(void) { return m_pRunningScene; }$/;"	f	class:CCDirector	access:public	signature:(void)
getScale	base_nodes/CCNode.cpp	/^float CCNode::getScale(void)$/;"	f	class:CCNode	signature:(void)
getScale	base_nodes/CCNode.h	/^    virtual float getScale();$/;"	p	class:CCNode	access:public	signature:()
getScaleX	base_nodes/CCNode.cpp	/^float CCNode::getScaleX()$/;"	f	class:CCNode	signature:()
getScaleX	base_nodes/CCNode.h	/^    virtual float getScaleX();$/;"	p	class:CCNode	access:public	signature:()
getScaleX	platform/CCEGLViewProtocol.cpp	/^float CCEGLViewProtocol::getScaleX() const$/;"	f	class:CCEGLViewProtocol	signature:() const
getScaleX	platform/CCEGLViewProtocol.h	/^    float getScaleX() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
getScaleY	base_nodes/CCNode.cpp	/^float CCNode::getScaleY()$/;"	f	class:CCNode	signature:()
getScaleY	base_nodes/CCNode.h	/^    virtual float getScaleY();$/;"	p	class:CCNode	access:public	signature:()
getScaleY	platform/CCEGLViewProtocol.cpp	/^float CCEGLViewProtocol::getScaleY() const$/;"	f	class:CCEGLViewProtocol	signature:() const
getScaleY	platform/CCEGLViewProtocol.h	/^    float getScaleY() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
getScheduler	CCDirector.cpp	/^CCScheduler* CCDirector::getScheduler()$/;"	f	class:CCDirector	signature:()
getScheduler	base_nodes/CCNode.cpp	/^CCScheduler* CCNode::getScheduler()$/;"	f	class:CCNode	signature:()
getScheduler	base_nodes/CCNode.h	/^    virtual CCScheduler* getScheduler();$/;"	p	class:CCNode	access:public	signature:()
getScriptAccelerateHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    inline CCScriptHandlerEntry* getScriptAccelerateHandlerEntry() { return m_pScriptAccelerateHandlerEntry; };$/;"	f	class:CCLayer	access:public	signature:()
getScriptEngine	script_support/CCScriptSupport.h	/^    CCScriptEngineProtocol* getScriptEngine(void) {$/;"	f	class:CCScriptEngineManager	access:public	signature:(void)
getScriptHandler	CCScheduler.h	/^    inline int getScriptHandler() { return m_nScriptHandler; };$/;"	f	class:CCTimer	access:public	signature:()
getScriptHandler	actions/CCActionInstant.h	/^    inline int getScriptHandler() { return m_nScriptHandler; };$/;"	f	class:CCCallFunc	access:public	signature:()
getScriptHandler	base_nodes/CCNode.h	/^    inline int getScriptHandler() { return m_nScriptHandler; };$/;"	f	class:CCNode	access:public	signature:()
getScriptHandler	support/CCNotificationCenter.h	/^    inline int getScriptHandler() { return m_scriptHandler; };$/;"	f	class:CCNotificationCenter	access:public	signature:()
getScriptKeypadHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    inline CCScriptHandlerEntry* getScriptKeypadHandlerEntry() { return m_pScriptKeypadHandlerEntry; };$/;"	f	class:CCLayer	access:public	signature:()
getScriptTapHandler	menu_nodes/CCMenuItem.h	/^    int getScriptTapHandler() { return m_nScriptTapHandler; };$/;"	f	class:CCMenuItem	access:public	signature:()
getScriptTouchHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    inline CCTouchScriptHandlerEntry* getScriptTouchHandlerEntry() { return m_pScriptTouchHandlerEntry; };$/;"	f	class:CCLayer	access:public	signature:()
getScriptType	script_support/CCScriptSupport.h	/^    virtual ccScriptType getScriptType() { return kScriptTypeNone; };$/;"	f	class:CCScriptEngineProtocol	access:public	signature:()
getSearchPaths	platform/CCFileUtils.cpp	/^const std::vector<std::string>& CCFileUtils::getSearchPaths()$/;"	f	class:CCFileUtils	signature:()
getSearchPaths	platform/CCFileUtils.h	/^    virtual const std::vector<std::string>& getSearchPaths();$/;"	p	class:CCFileUtils	access:public	signature:()
getSearchResolutionsOrder	platform/CCFileUtils.cpp	/^const std::vector<std::string>& CCFileUtils::getSearchResolutionsOrder()$/;"	f	class:CCFileUtils	signature:()
getSearchResolutionsOrder	platform/CCFileUtils.h	/^    virtual const std::vector<std::string>& getSearchResolutionsOrder();$/;"	p	class:CCFileUtils	access:public	signature:()
getSecondsPerFrame	CCDirector.h	/^    inline float getSecondsPerFrame() { return m_fSecondsPerFrame; }$/;"	f	class:CCDirector	access:public	signature:()
getSelectedImage	menu_nodes/CCMenuItem.cpp	/^CCNode * CCMenuItemSprite::getSelectedImage()$/;"	f	class:CCMenuItemSprite	signature:()
getSelectedIndex	menu_nodes/CCMenuItem.cpp	/^unsigned int CCMenuItemToggle::getSelectedIndex()$/;"	f	class:CCMenuItemToggle	signature:()
getSelector	CCScheduler.cpp	/^SEL_SCHEDULE CCTimer::getSelector() const$/;"	f	class:CCTimer	signature:() const
getSelector	CCScheduler.h	/^    SEL_SCHEDULE getSelector() const;$/;"	p	class:CCTimer	access:public	signature:() const
getSelector	support/CCNotificationCenter.cpp	/^SEL_CallFuncO CCNotificationObserver::getSelector()$/;"	f	class:CCNotificationObserver	signature:()
getSetOfTouchesEndOrCancel	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::getSetOfTouchesEndOrCancel(CCSet& set, int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol	signature:(CCSet& set, int num, int ids[], float xs[], float ys[])
getSetOfTouchesEndOrCancel	platform/CCEGLViewProtocol.h	/^    void getSetOfTouchesEndOrCancel(CCSet& set, int num, int ids[], float xs[], float ys[]);$/;"	p	class:CCEGLViewProtocol	access:private	signature:(CCSet& set, int num, int ids[], float xs[], float ys[])
getShaderProgram	base_nodes/CCNode.cpp	/^CCGLProgram* CCNode::getShaderProgram()$/;"	f	class:CCNode	signature:()
getShaderProgram	base_nodes/CCNode.h	/^    virtual CCGLProgram* getShaderProgram();$/;"	p	class:CCNode	access:public	signature:()
getShaderProgram	textures/CCTexture2D.cpp	/^CCGLProgram* CCTexture2D::getShaderProgram(void)$/;"	f	class:CCTexture2D	signature:(void)
getSkewX	base_nodes/CCNode.cpp	/^float CCNode::getSkewX()$/;"	f	class:CCNode	signature:()
getSkewX	base_nodes/CCNode.h	/^    virtual float getSkewX();$/;"	p	class:CCNode	access:public	signature:()
getSkewY	base_nodes/CCNode.cpp	/^float CCNode::getSkewY()$/;"	f	class:CCNode	signature:()
getSkewY	base_nodes/CCNode.h	/^    virtual float getSkewY();$/;"	p	class:CCNode	access:public	signature:()
getSourcePosition	particle_nodes/CCParticleSystem.cpp	/^const CCPoint& CCParticleSystem::getSourcePosition()$/;"	f	class:CCParticleSystem	signature:()
getSpeed	actions/CCAction.h	/^    inline float getSpeed(void) { return m_fSpeed; }$/;"	f	class:CCSpeed	access:public	signature:(void)
getSpeed	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getSpeed()$/;"	f	class:CCParticleSystem	signature:()
getSpeed	particle_nodes/CCParticleSystem.h	/^    virtual float getSpeed();$/;"	p	class:CCParticleSystem	access:public	signature:()
getSpeedVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getSpeedVar()$/;"	f	class:CCParticleSystem	signature:()
getSpeedVar	particle_nodes/CCParticleSystem.h	/^    virtual float getSpeedVar();$/;"	p	class:CCParticleSystem	access:public	signature:()
getSprite	misc_nodes/CCProgressTimer.h	/^    inline CCSprite* getSprite(void) { return m_pSprite; }$/;"	f	class:CCProgressTimer	access:public	signature:(void)
getSprite	misc_nodes/CCRenderTexture.cpp	/^CCSprite * CCRenderTexture::getSprite()$/;"	f	class:CCRenderTexture	signature:()
getStartColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^const ccColor3B& CCLayerGradient::getStartColor()$/;"	f	class:CCLayerGradient	signature:()
getStartColor	particle_nodes/CCParticleSystem.cpp	/^const ccColor4F& CCParticleSystem::getStartColor()$/;"	f	class:CCParticleSystem	signature:()
getStartColorVar	particle_nodes/CCParticleSystem.cpp	/^const ccColor4F& CCParticleSystem::getStartColorVar()$/;"	f	class:CCParticleSystem	signature:()
getStartLocation	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getStartLocation() const$/;"	f	class:CCTouch	signature:() const
getStartLocation	touch_dispatcher/CCTouch.h	/^    CCPoint getStartLocation() const;$/;"	p	class:CCTouch	access:public	signature:() const
getStartLocationInView	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getStartLocationInView() const $/;"	f	class:CCTouch	signature:() const
getStartLocationInView	touch_dispatcher/CCTouch.h	/^    CCPoint getStartLocationInView() const;$/;"	p	class:CCTouch	access:public	signature:() const
getStartOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^GLubyte CCLayerGradient::getStartOpacity()$/;"	f	class:CCLayerGradient	signature:()
getStartRadius	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartRadius()$/;"	f	class:CCParticleSystem	signature:()
getStartRadius	particle_nodes/CCParticleSystem.h	/^    virtual float getStartRadius();$/;"	p	class:CCParticleSystem	access:public	signature:()
getStartRadiusVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartRadiusVar()$/;"	f	class:CCParticleSystem	signature:()
getStartRadiusVar	particle_nodes/CCParticleSystem.h	/^    virtual float getStartRadiusVar();$/;"	p	class:CCParticleSystem	access:public	signature:()
getStartSize	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartSize()$/;"	f	class:CCParticleSystem	signature:()
getStartSizeVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartSizeVar()$/;"	f	class:CCParticleSystem	signature:()
getStartSpin	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartSpin()$/;"	f	class:CCParticleSystem	signature:()
getStartSpinVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartSpinVar()$/;"	f	class:CCParticleSystem	signature:()
getStartTime	support/CCProfiling.h	/^    inline struct cc_timeval * getStartTime(void) { return &m_sStartTime; };$/;"	f	class:CCProfilingTimer	access:public	signature:(void)
getStencil	misc_nodes/CCClippingNode.cpp	/^CCNode* CCClippingNode::getStencil() const$/;"	f	class:CCClippingNode	signature:() const
getStencil	misc_nodes/CCClippingNode.h	/^    CCNode* getStencil() const;$/;"	p	class:CCClippingNode	access:public	signature:() const
getStep	effects/CCGrid.h	/^    inline const CCPoint& getStep(void) { return m_obStep; }$/;"	f	class:CCGridBase	access:public	signature:(void)
getStrKey	cocoa/CCDictionary.h	/^    inline const char* getStrKey() const$/;"	f	class:CCDictElement	access:public	signature:() const
getString	include/CCProtocols.h	/^    virtual const char* getString(void) = 0;$/;"	p	class:CCLabelProtocol	access:public	signature:(void)
getString	label_nodes/CCLabelAtlas.cpp	/^const char* CCLabelAtlas::getString(void)$/;"	f	class:CCLabelAtlas	signature:(void)
getString	label_nodes/CCLabelAtlas.h	/^    virtual const char* getString(void);$/;"	p	class:CCLabelAtlas	access:public	signature:(void)
getString	label_nodes/CCLabelBMFont.cpp	/^const char* CCLabelBMFont::getString(void)$/;"	f	class:CCLabelBMFont	signature:(void)
getString	label_nodes/CCLabelBMFont.h	/^    virtual const char* getString(void);$/;"	p	class:CCLabelBMFont	access:public	signature:(void)
getString	label_nodes/CCLabelTTF.cpp	/^const char* CCLabelTTF::getString(void)$/;"	f	class:CCLabelTTF	signature:(void)
getString	label_nodes/CCLabelTTF.h	/^    virtual const char* getString(void);$/;"	p	class:CCLabelTTF	access:public	signature:(void)
getString	text_input_node/CCTextFieldTTF.cpp	/^const char* CCTextFieldTTF::getString(void)$/;"	f	class:CCTextFieldTTF	signature:(void)
getString	text_input_node/CCTextFieldTTF.h	/^    virtual const char* getString(void);$/;"	p	class:CCTextFieldTTF	access:public	signature:(void)
getStringForKey	support/user_default/CCUserDefault.cpp	/^std::string CCUserDefault::getStringForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
getStringForKey	support/user_default/CCUserDefault.cpp	/^string CCUserDefault::getStringForKey(const char* pKey, const std::string & defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, const std::string & defaultValue)
getStringForKey	support/user_default/CCUserDefault.h	/^    std::string getStringForKey(const char* pKey);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey)
getStringForKey	support/user_default/CCUserDefault.h	/^    std::string getStringForKey(const char* pKey, const std::string & defaultValue);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, const std::string & defaultValue)
getStringForKey	support/user_default/CCUserDefaultAndroid.cpp	/^std::string CCUserDefault::getStringForKey(const char* pKey)$/;"	f	class:CCUserDefault	signature:(const char* pKey)
getStringForKey	support/user_default/CCUserDefaultAndroid.cpp	/^string CCUserDefault::getStringForKey(const char* pKey, const std::string & defaultValue)$/;"	f	class:CCUserDefault	signature:(const char* pKey, const std::string & defaultValue)
getSubItems	menu_nodes/CCMenuItem.cpp	/^CCArray* CCMenuItemToggle::getSubItems()$/;"	f	class:CCMenuItemToggle	signature:()
getSwallowsTouches	script_support/CCScriptSupport.h	/^    bool getSwallowsTouches(void) {$/;"	f	class:CCTouchScriptHandlerEntry	access:public	signature:(void)
getTGAInfo	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^struct sImageTGA * CCTileMapAtlas::getTGAInfo()$/;"	f	class:CCTileMapAtlas	signature:()
getTMXFileName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    inline const char* getTMXFileName(){ return m_sTMXFileName.c_str(); }$/;"	f	class:CCTMXMapInfo	access:public	signature:()
getTag	actions/CCAction.h	/^    inline int getTag(void) { return m_nTag; }$/;"	f	class:CCAction	access:public	signature:(void)
getTag	base_nodes/CCNode.cpp	/^int CCNode::getTag()$/;"	f	class:CCNode	signature:()
getTag	base_nodes/CCNode.h	/^    virtual int getTag();$/;"	p	class:CCNode	access:public	signature:()
getTangentialAccel	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getTangentialAccel()$/;"	f	class:CCParticleSystem	signature:()
getTangentialAccel	particle_nodes/CCParticleSystem.h	/^    virtual float getTangentialAccel();$/;"	p	class:CCParticleSystem	access:public	signature:()
getTangentialAccelVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getTangentialAccelVar()$/;"	f	class:CCParticleSystem	signature:()
getTangentialAccelVar	particle_nodes/CCParticleSystem.h	/^    virtual float getTangentialAccelVar();$/;"	p	class:CCParticleSystem	access:public	signature:()
getTarget	actions/CCAction.h	/^    inline CCNode* getTarget(void) { return m_pTarget; }$/;"	f	class:CCAction	access:public	signature:(void)
getTarget	support/CCNotificationCenter.cpp	/^CCObject *CCNotificationObserver::getTarget()$/;"	f	class:CCNotificationObserver	signature:()
getTargetCallback	actions/CCActionInstant.h	/^    inline CCObject* getTargetCallback()$/;"	f	class:CCCallFunc	access:public	signature:()
getTargetPlatform	platform/CCApplicationProtocol.h	/^    virtual TargetPlatform getTargetPlatform() = 0;$/;"	p	class:CCApplicationProtocol	access:public	signature:()
getTexture	base_nodes/CCAtlasNode.cpp	/^CCTexture2D * CCAtlasNode::getTexture()$/;"	f	class:CCAtlasNode	signature:()
getTexture	base_nodes/CCAtlasNode.h	/^    virtual CCTexture2D* getTexture(void);$/;"	p	class:CCAtlasNode	access:public	signature:(void)
getTexture	include/CCProtocols.h	/^    virtual CCTexture2D* getTexture(void) = 0;$/;"	p	class:CCTextureProtocol	access:public	signature:(void)
getTexture	misc_nodes/CCMotionStreak.cpp	/^CCTexture2D* CCMotionStreak::getTexture(void)$/;"	f	class:CCMotionStreak	signature:(void)
getTexture	misc_nodes/CCMotionStreak.h	/^    virtual CCTexture2D* getTexture(void);$/;"	p	class:CCMotionStreak	access:public	signature:(void)
getTexture	particle_nodes/CCParticleBatchNode.cpp	/^CCTexture2D* CCParticleBatchNode::getTexture(void)$/;"	f	class:CCParticleBatchNode	signature:(void)
getTexture	particle_nodes/CCParticleBatchNode.h	/^    virtual CCTexture2D* getTexture(void);$/;"	p	class:CCParticleBatchNode	access:public	signature:(void)
getTexture	particle_nodes/CCParticleSystem.cpp	/^CCTexture2D * CCParticleSystem::getTexture()$/;"	f	class:CCParticleSystem	signature:()
getTexture	sprite_nodes/CCSprite.cpp	/^CCTexture2D* CCSprite::getTexture(void)$/;"	f	class:CCSprite	signature:(void)
getTexture	sprite_nodes/CCSprite.h	/^    virtual CCTexture2D* getTexture(void);$/;"	p	class:CCSprite	access:public	signature:(void)
getTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^CCTexture2D* CCSpriteBatchNode::getTexture(void)$/;"	f	class:CCSpriteBatchNode	signature:(void)
getTexture	sprite_nodes/CCSpriteBatchNode.h	/^    virtual CCTexture2D* getTexture(void);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(void)
getTexture	sprite_nodes/CCSpriteFrame.cpp	/^CCTexture2D* CCSpriteFrame::getTexture(void)$/;"	f	class:CCSpriteFrame	signature:(void)
getTexture	sprite_nodes/CCSpriteFrame.h	/^    CCTexture2D* getTexture(void);$/;"	p	class:CCSpriteFrame	access:public	signature:(void)
getTexture	textures/CCTextureAtlas.cpp	/^CCTexture2D* CCTextureAtlas::getTexture()$/;"	f	class:CCTextureAtlas	signature:()
getTextureAtlas	base_nodes/CCAtlasNode.cpp	/^CCTextureAtlas * CCAtlasNode::getTextureAtlas()$/;"	f	class:CCAtlasNode	signature:()
getTextureAtlas	sprite_nodes/CCSprite.h	/^    inline CCTextureAtlas* getTextureAtlas(void) { return m_pobTextureAtlas; }$/;"	f	class:CCSprite	access:public	signature:(void)
getTextureAtlas	sprite_nodes/CCSpriteBatchNode.h	/^    inline CCTextureAtlas* getTextureAtlas(void) { return m_pobTextureAtlas; }$/;"	f	class:CCSpriteBatchNode	access:public	signature:(void)
getTextureRect	sprite_nodes/CCSprite.h	/^    inline const CCRect& getTextureRect(void) { return m_obRect; }$/;"	f	class:CCSprite	access:public	signature:(void)
getTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCDictionary* CCTMXMapInfo::getTileProperties()$/;"	f	class:CCTMXMapInfo	signature:()
getTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCDictionary* getTileProperties();$/;"	p	class:CCTMXMapInfo	access:public	signature:()
getTileSet	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXTilesetInfo * CCTMXLayer::getTileSet()$/;"	f	class:CCTMXLayer	signature:()
getTilesets	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCArray* CCTMXMapInfo::getTilesets()$/;"	f	class:CCTMXMapInfo	signature:()
getTimeScale	CCScheduler.h	/^    inline float getTimeScale(void) { return m_fTimeScale; }$/;"	f	class:CCScheduler	access:public	signature:(void)
getTimer	script_support/CCScriptSupport.h	/^    cocos2d::CCTimer* getTimer(void) {$/;"	f	class:CCSchedulerScriptHandlerEntry	access:public	signature:(void)
getTotalFrames	CCDirector.h	/^    inline unsigned int getTotalFrames(void) { return m_uTotalFrames; }$/;"	f	class:CCDirector	access:public	signature:(void)
getTotalParticles	particle_nodes/CCParticleSystem.cpp	/^unsigned int CCParticleSystem::getTotalParticles()$/;"	f	class:CCParticleSystem	signature:()
getTotalQuads	textures/CCTextureAtlas.cpp	/^unsigned int CCTextureAtlas::getTotalQuads()$/;"	f	class:CCTextureAtlas	signature:()
getTouchDispatcher	CCDirector.cpp	/^CCTouchDispatcher* CCDirector::getTouchDispatcher()$/;"	f	class:CCDirector	signature:()
getTouchMode	layers_scenes_transitions_nodes/CCLayer.cpp	/^int CCLayer::getTouchMode()$/;"	f	class:CCLayer	signature:()
getTouchMode	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual int getTouchMode();$/;"	p	class:CCLayer	access:public	signature:()
getTouchPriority	layers_scenes_transitions_nodes/CCLayer.cpp	/^int CCLayer::getTouchPriority()$/;"	f	class:CCLayer	signature:()
getTouchPriority	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual int getTouchPriority();$/;"	p	class:CCLayer	access:public	signature:()
getType	misc_nodes/CCProgressTimer.h	/^    inline CCProgressTimerType getType(void) { return m_eType; }$/;"	f	class:CCProgressTimer	access:public	signature:(void)
getUnUsedIndex	platform/CCEGLViewProtocol.cpp	/^static int getUnUsedIndex()$/;"	f	file:	signature:()
getUniformLocationForName	shaders/CCGLProgram.cpp	/^GLint CCGLProgram::getUniformLocationForName(const char* name)$/;"	f	class:CCGLProgram	signature:(const char* name)
getUniformLocationForName	shaders/CCGLProgram.h	/^    GLint getUniformLocationForName(const char* name);$/;"	p	class:CCGLProgram	access:public	signature:(const char* name)
getUpXYZ	CCCamera.cpp	/^void CCCamera::getUpXYZ(float *pUpX, float *pUpY, float *pUpZ)$/;"	f	class:CCCamera	signature:(float *pUpX, float *pUpY, float *pUpZ)
getUpXYZ	CCCamera.h	/^    void getUpXYZ(float *pUpX, float *pUpY, float *pUpZ);$/;"	p	class:CCCamera	access:public	signature:(float *pUpX, float *pUpY, float *pUpZ)
getUserData	base_nodes/CCNode.cpp	/^void * CCNode::getUserData()$/;"	f	class:CCNode	signature:()
getUserData	base_nodes/CCNode.h	/^    virtual void* getUserData();$/;"	p	class:CCNode	access:public	signature:()
getUserObject	base_nodes/CCNode.cpp	/^CCObject* CCNode::getUserObject()$/;"	f	class:CCNode	signature:()
getUserObject	base_nodes/CCNode.h	/^    virtual CCObject* getUserObject();$/;"	p	class:CCNode	access:public	signature:()
getValue	cocoa/CCBool.h	/^    bool getValue() const {return m_bValue;}$/;"	f	class:CCBool	access:public	signature:() const
getValue	cocoa/CCDouble.h	/^    double getValue() const {return m_dValue;}$/;"	f	class:CCDouble	access:public	signature:() const
getValue	cocoa/CCFloat.h	/^    float getValue() const {return m_fValue;}$/;"	f	class:CCFloat	access:public	signature:() const
getValue	cocoa/CCInteger.h	/^    int getValue() const {return m_nValue;}$/;"	f	class:CCInteger	access:public	signature:() const
getVector	layers_scenes_transitions_nodes/CCLayer.cpp	/^const CCPoint& CCLayerGradient::getVector()$/;"	f	class:CCLayerGradient	signature:()
getVertexZ	base_nodes/CCNode.cpp	/^float CCNode::getVertexZ()$/;"	f	class:CCNode	signature:()
getVertexZ	base_nodes/CCNode.h	/^    virtual float getVertexZ();$/;"	p	class:CCNode	access:public	signature:()
getVerticalAlignment	label_nodes/CCLabelTTF.cpp	/^CCVerticalTextAlignment CCLabelTTF::getVerticalAlignment()$/;"	f	class:CCLabelTTF	signature:()
getVerticalAlignment	label_nodes/CCLabelTTF.h	/^    CCVerticalTextAlignment getVerticalAlignment();$/;"	p	class:CCLabelTTF	access:public	signature:()
getViewName	platform/CCEGLViewProtocol.cpp	/^const char* CCEGLViewProtocol::getViewName()$/;"	f	class:CCEGLViewProtocol	signature:()
getViewName	platform/CCEGLViewProtocol.h	/^    const char* getViewName();$/;"	p	class:CCEGLViewProtocol	access:public	signature:()
getViewPortRect	platform/CCEGLViewProtocol.cpp	/^const CCRect& CCEGLViewProtocol::getViewPortRect() const$/;"	f	class:CCEGLViewProtocol	signature:() const
getViewPortRect	platform/CCEGLViewProtocol.h	/^    const CCRect& getViewPortRect() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
getVisibleOrigin	CCDirector.cpp	/^CCPoint CCDirector::getVisibleOrigin()$/;"	f	class:CCDirector	signature:()
getVisibleOrigin	CCDirector.h	/^    CCPoint getVisibleOrigin();$/;"	p	class:CCDirector	access:public	signature:()
getVisibleOrigin	platform/CCEGLViewProtocol.cpp	/^CCPoint CCEGLViewProtocol::getVisibleOrigin() const$/;"	f	class:CCEGLViewProtocol	signature:() const
getVisibleOrigin	platform/CCEGLViewProtocol.h	/^    virtual CCPoint getVisibleOrigin() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
getVisibleSize	CCDirector.cpp	/^CCSize CCDirector::getVisibleSize()$/;"	f	class:CCDirector	signature:()
getVisibleSize	CCDirector.h	/^    CCSize getVisibleSize();$/;"	p	class:CCDirector	access:public	signature:()
getVisibleSize	platform/CCEGLViewProtocol.cpp	/^CCSize  CCEGLViewProtocol::getVisibleSize() const$/;"	f	class:CCEGLViewProtocol	signature:() const
getVisibleSize	platform/CCEGLViewProtocol.h	/^    virtual CCSize getVisibleSize() const;$/;"	p	class:CCEGLViewProtocol	access:public	signature:() const
getWidth	textures/CCTexturePVR.h	/^    inline unsigned int getWidth() { return m_uWidth; }$/;"	f	class:CCTexturePVR	access:public	signature:()
getWinSize	CCDirector.cpp	/^CCSize CCDirector::getWinSize(void)$/;"	f	class:CCDirector	signature:(void)
getWinSize	CCDirector.h	/^    CCSize getWinSize(void);$/;"	p	class:CCDirector	access:public	signature:(void)
getWinSizeInPixels	CCDirector.cpp	/^CCSize CCDirector::getWinSizeInPixels()$/;"	f	class:CCDirector	signature:()
getWinSizeInPixels	CCDirector.h	/^    CCSize getWinSizeInPixels(void);$/;"	p	class:CCDirector	access:public	signature:(void)
getWritablePath	platform/CCFileUtils.h	/^    virtual std::string getWritablePath() = 0;$/;"	p	class:CCFileUtils	access:public	signature:()
getXMLFilePath	support/user_default/CCUserDefault.cpp	/^const string& CCUserDefault::getXMLFilePath()$/;"	f	class:CCUserDefault	signature:()
getXMLFilePath	support/user_default/CCUserDefault.h	/^    const static std::string& getXMLFilePath();$/;"	p	class:CCUserDefault	access:public	signature:()
getXMLFilePath	support/user_default/CCUserDefaultAndroid.cpp	/^const string& CCUserDefault::getXMLFilePath()$/;"	f	class:CCUserDefault	signature:()
getXMLNodeForKey	support/user_default/CCUserDefault.cpp	/^static tinyxml2::XMLElement* getXMLNodeForKey(const char* pKey, tinyxml2::XMLElement** rootNode, tinyxml2::XMLDocument **doc)$/;"	f	file:	signature:(const char* pKey, tinyxml2::XMLElement** rootNode, tinyxml2::XMLDocument **doc)
getZEye	CCCamera.cpp	/^float CCCamera::getZEye(void)$/;"	f	class:CCCamera	signature:(void)
getZEye	CCCamera.h	/^    static float getZEye();$/;"	p	class:CCCamera	access:public	signature:()
getZEye	CCDirector.cpp	/^float CCDirector::getZEye(void)$/;"	f	class:CCDirector	signature:(void)
getZEye	CCDirector.h	/^    float getZEye(void);$/;"	p	class:CCDirector	access:public	signature:(void)
getZOrder	base_nodes/CCNode.cpp	/^int CCNode::getZOrder()$/;"	f	class:CCNode	signature:()
getZOrder	base_nodes/CCNode.h	/^    virtual int getZOrder();$/;"	p	class:CCNode	access:public	signature:()
gettimeofdayCocos2d	platform/platform.cpp	/^int CCTime::gettimeofdayCocos2d(struct cc_timeval *tp, void *tzp)$/;"	f	class:CCTime	signature:(struct cc_timeval *tp, void *tzp)
gettimeofdayCocos2d	platform/platform.h	/^    static int gettimeofdayCocos2d(struct cc_timeval *tp, void *tzp);$/;"	p	class:CCTime	access:public	signature:(struct cc_timeval *tp, void *tzp)
gi	support/zip_support/unzip.cpp	/^    unz_global_info64 gi;       \/* public global information *\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
grab	effects/CCGrabber.cpp	/^void CCGrabber::grab(CCTexture2D *pTexture)$/;"	f	class:CCGrabber	signature:(CCTexture2D *pTexture)
grab	effects/CCGrabber.h	/^    void grab(CCTexture2D *pTexture);$/;"	p	class:CCGrabber	access:public	signature:(CCTexture2D *pTexture)
gravity	particle_nodes/CCParticleSystem.h	/^        CCPoint gravity;$/;"	m	struct:CCParticleSystem::__anon24	access:public
handleTouchesBegin	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::handleTouchesBegin(int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol	signature:(int num, int ids[], float xs[], float ys[])
handleTouchesBegin	platform/CCEGLViewProtocol.h	/^    virtual void handleTouchesBegin(int num, int ids[], float xs[], float ys[]);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(int num, int ids[], float xs[], float ys[])
handleTouchesCancel	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::handleTouchesCancel(int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol	signature:(int num, int ids[], float xs[], float ys[])
handleTouchesCancel	platform/CCEGLViewProtocol.h	/^    virtual void handleTouchesCancel(int num, int ids[], float xs[], float ys[]);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(int num, int ids[], float xs[], float ys[])
handleTouchesEnd	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::handleTouchesEnd(int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol	signature:(int num, int ids[], float xs[], float ys[])
handleTouchesEnd	platform/CCEGLViewProtocol.h	/^    virtual void handleTouchesEnd(int num, int ids[], float xs[], float ys[]);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(int num, int ids[], float xs[], float ys[])
handleTouchesMove	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::handleTouchesMove(int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol	signature:(int num, int ids[], float xs[], float ys[])
handleTouchesMove	platform/CCEGLViewProtocol.h	/^    virtual void handleTouchesMove(int num, int ids[], float xs[], float ys[]);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(int num, int ids[], float xs[], float ys[])
handlerWithDelegate	keypad_dispatcher/CCKeypadDelegate.cpp	/^CCKeypadHandler* CCKeypadHandler::handlerWithDelegate(CCKeypadDelegate *pDelegate)$/;"	f	class:CCKeypadHandler	signature:(CCKeypadDelegate *pDelegate)
handlerWithDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^    static CCKeypadHandler* handlerWithDelegate(CCKeypadDelegate *pDelegate);$/;"	p	class:CCKeypadHandler	access:public	signature:(CCKeypadDelegate *pDelegate)
handlerWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^CCStandardTouchHandler* CCStandardTouchHandler::handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCStandardTouchHandler	signature:(CCTouchDelegate *pDelegate, int nPriority)
handlerWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^CCTargetedTouchHandler* CCTargetedTouchHandler::handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)$/;"	f	class:CCTargetedTouchHandler	signature:(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)
handlerWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^CCTouchHandler* CCTouchHandler::handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCTouchHandler	signature:(CCTouchDelegate *pDelegate, int nPriority)
handlerWithDelegate	touch_dispatcher/CCTouchHandler.h	/^    static CCStandardTouchHandler* handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority);$/;"	p	class:CCStandardTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority)
handlerWithDelegate	touch_dispatcher/CCTouchHandler.h	/^    static CCTargetedTouchHandler* handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow);$/;"	p	class:CCTargetedTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)
handlerWithDelegate	touch_dispatcher/CCTouchHandler.h	/^    static CCTouchHandler* handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority);$/;"	p	class:CCTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority)
hasAlpha	platform/CCImage.h	/^    bool hasAlpha()                     { return m_bHasAlpha; }$/;"	f	class:CCImage	access:public	signature:()
hasAlpha	textures/CCTexturePVR.h	/^    inline bool hasAlpha() { return m_bHasAlpha; }$/;"	f	class:CCTexturePVR	access:public	signature:()
hasMipmaps	textures/CCTexture2D.cpp	/^bool CCTexture2D::hasMipmaps()$/;"	f	class:CCTexture2D	signature:()
hasMipmaps	textures/CCTexture2D.h	/^    bool hasMipmaps();$/;"	p	class:CCTexture2D	access:public	signature:()
hasPremultipliedAlpha	textures/CCTexture2D.cpp	/^bool CCTexture2D::hasPremultipliedAlpha()$/;"	f	class:CCTexture2D	signature:()
hasPremultipliedAlpha	textures/CCTexture2D.h	/^    bool hasPremultipliedAlpha();$/;"	p	class:CCTexture2D	access:public	signature:()
hasPremultipliedAlpha	textures/CCTexturePVR.h	/^    inline bool hasPremultipliedAlpha() { return m_bHasPremultipliedAlpha; }$/;"	f	class:CCTexturePVR	access:public	signature:()
hashv	support/data_support/uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle	access:public
headerLength	textures/CCTexturePVR.cpp	/^    unsigned int headerLength;$/;"	m	struct:_PVRTexHeader	file:	access:public
height	cocoa/CCGeometry.h	/^    float height;$/;"	m	class:CCSize	access:public
height	support/image_support/TGAlib.h	/^    signed short height;$/;"	m	struct:cocos2d::sImageTGA	access:public
height	textures/CCTexturePVR.cpp	/^	uint32_t height;$/;"	m	struct:__anon56	file:	access:public
height	textures/CCTexturePVR.cpp	/^    unsigned int height;$/;"	m	struct:_PVRTexHeader	file:	access:public
hh	CCScheduler.cpp	/^    UT_hash_handle      hh;$/;"	m	struct:_hashSelectorEntry	file:	access:public
hh	CCScheduler.cpp	/^    UT_hash_handle      hh;$/;"	m	struct:_hashUpdateEntry	file:	access:public
hh	actions/CCActionManager.cpp	/^    UT_hash_handle                hh;$/;"	m	struct:_hashElement	file:	access:public
hh	cocoa/CCDictionary.h	/^    UT_hash_handle hh;      \/\/ makes this class hashable$/;"	m	class:CCDictElement	access:public
hh	label_nodes/CCLabelBMFont.h	/^	UT_hash_handle	hh;$/;"	m	struct:_FontDefHashElement	access:public
hh	label_nodes/CCLabelBMFont.h	/^	UT_hash_handle	hh;$/;"	m	struct:_KerningHashElement	access:public
hh	shaders/CCGLProgram.cpp	/^    UT_hash_handle  hh;          \/\/ hash entry$/;"	m	struct:_hashUniformEntry	file:	access:public
hh_head	support/data_support/uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle	access:public
hh_next	support/data_support/uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle	access:public
hh_prev	support/data_support/uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle	access:public
hho	support/data_support/uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table	access:public
hideOutShowIn	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::hideOutShowIn()$/;"	f	class:CCTransitionScene	signature:()
hideOutShowIn	layers_scenes_transitions_nodes/CCTransition.h	/^    void hideOutShowIn(void);$/;"	p	class:CCTransitionScene	access:public	signature:(void)
highestAtlasIndexInChild	sprite_nodes/CCSpriteBatchNode.cpp	/^unsigned int CCSpriteBatchNode::highestAtlasIndexInChild(CCSprite *pSprite)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *pSprite)
highestAtlasIndexInChild	sprite_nodes/CCSpriteBatchNode.h	/^    unsigned int highestAtlasIndexInChild(CCSprite *sprite);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite *sprite)
ideal_chain_maxlen	support/data_support/uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table	access:public
ignoreAnchorPointForPosition	base_nodes/CCNode.cpp	/^void CCNode::ignoreAnchorPointForPosition(bool newValue)$/;"	f	class:CCNode	signature:(bool newValue)
ignoreAnchorPointForPosition	base_nodes/CCNode.h	/^    virtual void ignoreAnchorPointForPosition(bool ignore);$/;"	p	class:CCNode	access:public	signature:(bool ignore)
ignoreAnchorPointForPosition	sprite_nodes/CCSprite.cpp	/^void CCSprite::ignoreAnchorPointForPosition(bool value)$/;"	f	class:CCSprite	signature:(bool value)
ignoreAnchorPointForPosition	sprite_nodes/CCSprite.h	/^    virtual void ignoreAnchorPointForPosition(bool value);$/;"	p	class:CCSprite	access:public	signature:(bool value)
image	textures/CCTextureCache.cpp	/^    CCImage        *image;$/;"	m	struct:_ImageInfo	file:	access:public
imageData	support/image_support/TGAlib.h	/^    unsigned char *imageData;$/;"	m	struct:cocos2d::sImageTGA	access:public
imageType	textures/CCTextureCache.cpp	/^    CCImage::EImageFormat imageType;$/;"	m	struct:_ImageInfo	file:	access:public
increaseAtlasCapacity	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::increaseAtlasCapacity(void)$/;"	f	class:CCSpriteBatchNode	signature:(void)
increaseAtlasCapacity	sprite_nodes/CCSpriteBatchNode.h	/^    void increaseAtlasCapacity();$/;"	p	class:CCSpriteBatchNode	access:public	signature:()
increaseAtlasCapacityTo	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::increaseAtlasCapacityTo(unsigned int quantity)$/;"	f	class:CCParticleBatchNode	signature:(unsigned int quantity)
increaseAtlasCapacityTo	particle_nodes/CCParticleBatchNode.h	/^    void increaseAtlasCapacityTo(unsigned int quantity);$/;"	p	class:CCParticleBatchNode	access:private	signature:(unsigned int quantity)
increaseTotalQuadsWith	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::increaseTotalQuadsWith(unsigned int amount)$/;"	f	class:CCTextureAtlas	signature:(unsigned int amount)
increaseTotalQuadsWith	textures/CCTextureAtlas.h	/^    void increaseTotalQuadsWith(unsigned int amount);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int amount)
indexOfObject	cocoa/CCArray.cpp	/^unsigned int CCArray::indexOfObject(CCObject* object)$/;"	f	class:CCArray	signature:(CCObject* object)
indexOfObject	cocoa/CCArray.h	/^    unsigned int indexOfObject(CCObject* object);$/;"	p	class:CCArray	access:public	signature:(CCObject* object)
ineff_expands	support/data_support/uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	access:public
init	CCCamera.cpp	/^void CCCamera::init(void)$/;"	f	class:CCCamera	signature:(void)
init	CCCamera.h	/^    void init(void);$/;"	p	class:CCCamera	access:public	signature:(void)
init	CCConfiguration.cpp	/^bool CCConfiguration::init(void)$/;"	f	class:CCConfiguration	signature:(void)
init	CCConfiguration.h	/^    bool init(void);$/;"	p	class:CCConfiguration	access:public	signature:(void)
init	CCDirector.cpp	/^bool CCDirector::init(void)$/;"	f	class:CCDirector	signature:(void)
init	CCDirector.h	/^    virtual bool init(void);$/;"	p	class:CCDirector	access:public	signature:(void)
init	base_nodes/CCNode.cpp	/^bool CCNode::init()$/;"	f	class:CCNode	signature:()
init	base_nodes/CCNode.cpp	/^bool CCNodeRGBA::init()$/;"	f	class:CCNodeRGBA	signature:()
init	base_nodes/CCNode.h	/^    virtual bool init();$/;"	p	class:CCNode	access:public	signature:()
init	base_nodes/CCNode.h	/^    virtual bool init();$/;"	p	class:CCNodeRGBA	access:public	signature:()
init	cocoa/CCArray.cpp	/^bool CCArray::init()$/;"	f	class:CCArray	signature:()
init	cocoa/CCArray.h	/^    bool init();$/;"	p	class:CCArray	access:public	signature:()
init	draw_nodes/CCDrawNode.cpp	/^bool CCDrawNode::init()$/;"	f	class:CCDrawNode	signature:()
init	draw_nodes/CCDrawNode.h	/^    virtual bool init();$/;"	p	class:CCDrawNode	access:public	signature:()
init	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::init()$/;"	f	class:CCLabelBMFont	signature:()
init	label_nodes/CCLabelBMFont.h	/^    bool init();$/;"	p	class:CCLabelBMFont	access:public	signature:()
init	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::init()$/;"	f	class:CCLabelTTF	signature:()
init	label_nodes/CCLabelTTF.h	/^    bool init();$/;"	p	class:CCLabelTTF	access:public	signature:()
init	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::init()$/;"	f	class:CCLayer	signature:()
init	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerColor::init()$/;"	f	class:CCLayerColor	signature:()
init	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerGradient::init()$/;"	f	class:CCLayerGradient	signature:()
init	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerRGBA::init()$/;"	f	class:CCLayerRGBA	signature:()
init	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool init();$/;"	p	class:CCLayer	access:public	signature:()
init	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool init();$/;"	p	class:CCLayerColor	access:public	signature:()
init	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool init();$/;"	p	class:CCLayerGradient	access:public	signature:()
init	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool init();$/;"	p	class:CCLayerRGBA	access:public	signature:()
init	layers_scenes_transitions_nodes/CCScene.cpp	/^bool CCScene::init()$/;"	f	class:CCScene	signature:()
init	layers_scenes_transitions_nodes/CCScene.h	/^    bool init();$/;"	p	class:CCScene	access:public	signature:()
init	menu_nodes/CCMenu.cpp	/^bool CCMenu::init()$/;"	f	class:CCMenu	signature:()
init	menu_nodes/CCMenu.h	/^    bool init();$/;"	p	class:CCMenu	access:public	signature:()
init	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemImage::init(void)$/;"	f	class:CCMenuItemImage	signature:(void)
init	menu_nodes/CCMenuItem.h	/^    bool init();$/;"	p	class:CCMenuItemImage	access:public	signature:()
init	misc_nodes/CCClippingNode.cpp	/^bool CCClippingNode::init()$/;"	f	class:CCClippingNode	signature:()
init	misc_nodes/CCClippingNode.cpp	/^bool CCClippingNode::init(CCNode *pStencil)$/;"	f	class:CCClippingNode	signature:(CCNode *pStencil)
init	misc_nodes/CCClippingNode.h	/^    virtual bool init();$/;"	p	class:CCClippingNode	access:public	signature:()
init	misc_nodes/CCClippingNode.h	/^    virtual bool init(CCNode *pStencil);$/;"	p	class:CCClippingNode	access:public	signature:(CCNode *pStencil)
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(1000); }$/;"	f	class:CCParticleRain	access:public	signature:()
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(150); }$/;"	f	class:CCParticleMeteor	access:public	signature:()
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(1500); }$/;"	f	class:CCParticleFireworks	access:public	signature:()
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(200); }$/;"	f	class:CCParticleGalaxy	access:public	signature:()
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(200); }$/;"	f	class:CCParticleSmoke	access:public	signature:()
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(250); }$/;"	f	class:CCParticleFire	access:public	signature:()
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(250); }$/;"	f	class:CCParticleFlower	access:public	signature:()
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(350); }$/;"	f	class:CCParticleSun	access:public	signature:()
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(500); }$/;"	f	class:CCParticleSpiral	access:public	signature:()
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(700); }$/;"	f	class:CCParticleExplosion	access:public	signature:()
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(700); }$/;"	f	class:CCParticleSnow	access:public	signature:()
init	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::init()$/;"	f	class:CCParticleSystem	signature:()
init	particle_nodes/CCParticleSystem.h	/^    bool init();$/;"	p	class:CCParticleSystem	access:public	signature:()
init	platform/CCFileUtils.cpp	/^bool CCFileUtils::init()$/;"	f	class:CCFileUtils	signature:()
init	platform/CCFileUtils.h	/^    virtual bool init();$/;"	p	class:CCFileUtils	access:protected	signature:()
init	platform/CCSAXParser.cpp	/^bool CCSAXParser::init(const char *pszEncoding)$/;"	f	class:CCSAXParser	signature:(const char *pszEncoding)
init	platform/CCSAXParser.h	/^    bool init(const char *pszEncoding);$/;"	p	class:CCSAXParser	access:public	signature:(const char *pszEncoding)
init	script_support/CCScriptSupport.cpp	/^bool CCSchedulerScriptHandlerEntry::init(float fInterval, bool bPaused)$/;"	f	class:CCSchedulerScriptHandlerEntry	signature:(float fInterval, bool bPaused)
init	script_support/CCScriptSupport.cpp	/^bool CCTouchScriptHandlerEntry::init(bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)$/;"	f	class:CCTouchScriptHandlerEntry	signature:(bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)
init	script_support/CCScriptSupport.h	/^    bool init(bool bIsMultiTouches, int nPriority, bool bSwallowsTouches);$/;"	p	class:CCTouchScriptHandlerEntry	access:private	signature:(bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)
init	script_support/CCScriptSupport.h	/^    bool init(float fInterval, bool bPaused);$/;"	p	class:CCSchedulerScriptHandlerEntry	access:private	signature:(float fInterval, bool bPaused)
init	shaders/CCShaderCache.cpp	/^bool CCShaderCache::init()$/;"	f	class:CCShaderCache	signature:()
init	shaders/CCShaderCache.h	/^    bool init();$/;"	p	class:CCShaderCache	access:private	signature:()
init	sprite_nodes/CCAnimation.cpp	/^bool CCAnimation::init()$/;"	f	class:CCAnimation	signature:()
init	sprite_nodes/CCAnimation.h	/^    bool init();$/;"	p	class:CCAnimation	access:public	signature:()
init	sprite_nodes/CCAnimationCache.cpp	/^bool CCAnimationCache::init()$/;"	f	class:CCAnimationCache	signature:()
init	sprite_nodes/CCAnimationCache.h	/^    bool init(void);$/;"	p	class:CCAnimationCache	access:public	signature:(void)
init	sprite_nodes/CCSprite.cpp	/^bool CCSprite::init(void)$/;"	f	class:CCSprite	signature:(void)
init	sprite_nodes/CCSprite.h	/^    virtual bool init(void);$/;"	p	class:CCSprite	access:public	signature:(void)
init	sprite_nodes/CCSpriteBatchNode.cpp	/^bool CCSpriteBatchNode::init()$/;"	f	class:CCSpriteBatchNode	signature:()
init	sprite_nodes/CCSpriteBatchNode.h	/^    bool init();$/;"	p	class:CCSpriteBatchNode	access:public	signature:()
init	sprite_nodes/CCSpriteFrameCache.cpp	/^bool CCSpriteFrameCache::init(void)$/;"	f	class:CCSpriteFrameCache	signature:(void)
init	sprite_nodes/CCSpriteFrameCache.h	/^    bool init(void);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(void)
init	support/CCProfiling.cpp	/^bool CCProfiler::init()$/;"	f	class:CCProfiler	signature:()
init	support/CCProfiling.h	/^    bool init(void);$/;"	p	class:CCProfiler	access:public	signature:(void)
init	text_input_node/CCIMEDispatcher.cpp	/^    void init()$/;"	f	class:CCIMEDispatcher::Impl	access:public	signature:()
init	touch_dispatcher/CCTouchDispatcher.cpp	/^bool CCTouchDispatcher::init(void)$/;"	f	class:CCTouchDispatcher	signature:(void)
init	touch_dispatcher/CCTouchDispatcher.h	/^    bool init(void);$/;"	p	class:CCTouchDispatcher	access:public	signature:(void)
initIndices	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::initIndices()$/;"	f	class:CCParticleSystemQuad	signature:()
initIndices	particle_nodes/CCParticleSystemQuad.h	/^    void initIndices();$/;"	p	class:CCParticleSystemQuad	access:public	signature:()
initParticle	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::initParticle(tCCParticle* particle)$/;"	f	class:CCParticleSystem	signature:(tCCParticle* particle)
initParticle	particle_nodes/CCParticleSystem.h	/^    void initParticle(tCCParticle* particle);$/;"	p	class:CCParticleSystem	access:public	signature:(tCCParticle* particle)
initPremultipliedATextureWithImage	textures/CCTexture2D.cpp	/^bool CCTexture2D::initPremultipliedATextureWithImage(CCImage *image, unsigned int width, unsigned int height)$/;"	f	class:CCTexture2D	signature:(CCImage *image, unsigned int width, unsigned int height)
initPremultipliedATextureWithImage	textures/CCTexture2D.h	/^    bool initPremultipliedATextureWithImage(CCImage * image, unsigned int pixelsWide, unsigned int pixelsHigh);$/;"	p	class:CCTexture2D	access:private	signature:(CCImage * image, unsigned int pixelsWide, unsigned int pixelsHigh)
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInB::initScenes()$/;"	f	class:CCTransitionMoveInB	signature:()
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInL::initScenes()$/;"	f	class:CCTransitionMoveInL	signature:()
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInR::initScenes()$/;"	f	class:CCTransitionMoveInR	signature:()
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInT::initScenes()$/;"	f	class:CCTransitionMoveInT	signature:()
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInB:: initScenes()$/;"	f	class:CCTransitionSlideInB	signature:()
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInL:: initScenes()$/;"	f	class:CCTransitionSlideInL	signature:()
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInR::initScenes()$/;"	f	class:CCTransitionSlideInR	signature:()
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInT::initScenes()$/;"	f	class:CCTransitionSlideInT	signature:()
initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes();$/;"	p	class:CCTransitionMoveInB	access:public	signature:()
initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes();$/;"	p	class:CCTransitionMoveInR	access:public	signature:()
initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes();$/;"	p	class:CCTransitionMoveInT	access:public	signature:()
initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes(void);$/;"	p	class:CCTransitionMoveInL	access:public	signature:(void)
initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes(void);$/;"	p	class:CCTransitionSlideInB	access:public	signature:(void)
initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes(void);$/;"	p	class:CCTransitionSlideInL	access:public	signature:(void)
initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes(void);$/;"	p	class:CCTransitionSlideInR	access:public	signature:(void)
initScenes	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void initScenes(void);$/;"	p	class:CCTransitionSlideInT	access:public	signature:(void)
initTexCoordsWithRect	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::initTexCoordsWithRect(const CCRect& pointRect)$/;"	f	class:CCParticleSystemQuad	signature:(const CCRect& pointRect)
initTexCoordsWithRect	particle_nodes/CCParticleSystemQuad.h	/^    void initTexCoordsWithRect(const CCRect& rect);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(const CCRect& rect)
initWithAction	actions/CCAction.cpp	/^bool CCSpeed::initWithAction(CCActionInterval *pAction, float fSpeed)$/;"	f	class:CCSpeed	signature:(CCActionInterval *pAction, float fSpeed)
initWithAction	actions/CCAction.h	/^    bool initWithAction(CCActionInterval *pAction, float fSpeed);$/;"	p	class:CCSpeed	access:public	signature:(CCActionInterval *pAction, float fSpeed)
initWithAction	actions/CCActionEase.cpp	/^bool CCActionEase::initWithAction(CCActionInterval *pAction)$/;"	f	class:CCActionEase	signature:(CCActionInterval *pAction)
initWithAction	actions/CCActionEase.cpp	/^bool CCEaseElastic::initWithAction(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElastic	signature:(CCActionInterval *pAction, float fPeriod )
initWithAction	actions/CCActionEase.cpp	/^bool CCEaseRateAction::initWithAction(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseRateAction	signature:(CCActionInterval *pAction, float fRate)
initWithAction	actions/CCActionEase.h	/^    bool initWithAction(CCActionInterval *pAction);$/;"	p	class:CCActionEase	access:public	signature:(CCActionInterval *pAction)
initWithAction	actions/CCActionEase.h	/^    bool initWithAction(CCActionInterval *pAction, float fPeriod = 0.3f);$/;"	p	class:CCEaseElastic	access:public	signature:(CCActionInterval *pAction, float fPeriod = 0.3f)
initWithAction	actions/CCActionEase.h	/^    bool initWithAction(CCActionInterval *pAction, float fRate);$/;"	p	class:CCEaseRateAction	access:public	signature:(CCActionInterval *pAction, float fRate)
initWithAction	actions/CCActionGrid.cpp	/^bool CCAccelAmplitude::initWithAction(CCAction *pAction, float duration)$/;"	f	class:CCAccelAmplitude	signature:(CCAction *pAction, float duration)
initWithAction	actions/CCActionGrid.cpp	/^bool CCAccelDeccelAmplitude::initWithAction(CCAction *pAction, float duration)$/;"	f	class:CCAccelDeccelAmplitude	signature:(CCAction *pAction, float duration)
initWithAction	actions/CCActionGrid.cpp	/^bool CCDeccelAmplitude::initWithAction(CCAction *pAction, float duration)$/;"	f	class:CCDeccelAmplitude	signature:(CCAction *pAction, float duration)
initWithAction	actions/CCActionGrid.h	/^    bool initWithAction(CCAction *pAction, float duration);$/;"	p	class:CCAccelAmplitude	access:public	signature:(CCAction *pAction, float duration)
initWithAction	actions/CCActionGrid.h	/^    bool initWithAction(CCAction *pAction, float duration);$/;"	p	class:CCAccelDeccelAmplitude	access:public	signature:(CCAction *pAction, float duration)
initWithAction	actions/CCActionGrid.h	/^    bool initWithAction(CCAction *pAction, float duration);$/;"	p	class:CCDeccelAmplitude	access:public	signature:(CCAction *pAction, float duration)
initWithAction	actions/CCActionInterval.cpp	/^bool CCRepeat::initWithAction(CCFiniteTimeAction *pAction, unsigned int times)$/;"	f	class:CCRepeat	signature:(CCFiniteTimeAction *pAction, unsigned int times)
initWithAction	actions/CCActionInterval.cpp	/^bool CCRepeatForever::initWithAction(CCActionInterval *pAction)$/;"	f	class:CCRepeatForever	signature:(CCActionInterval *pAction)
initWithAction	actions/CCActionInterval.cpp	/^bool CCReverseTime::initWithAction(CCFiniteTimeAction *pAction)$/;"	f	class:CCReverseTime	signature:(CCFiniteTimeAction *pAction)
initWithAction	actions/CCActionInterval.h	/^    bool initWithAction(CCActionInterval *pAction);$/;"	p	class:CCRepeatForever	access:public	signature:(CCActionInterval *pAction)
initWithAction	actions/CCActionInterval.h	/^    bool initWithAction(CCFiniteTimeAction *pAction);$/;"	p	class:CCReverseTime	access:public	signature:(CCFiniteTimeAction *pAction)
initWithAction	actions/CCActionInterval.h	/^    bool initWithAction(CCFiniteTimeAction *pAction, unsigned int times);$/;"	p	class:CCRepeat	access:public	signature:(CCFiniteTimeAction *pAction, unsigned int times)
initWithAnimation	actions/CCActionInterval.cpp	/^bool CCAnimate::initWithAnimation(CCAnimation *pAnimation)$/;"	f	class:CCAnimate	signature:(CCAnimation *pAnimation)
initWithAnimation	actions/CCActionInterval.h	/^    bool initWithAnimation(CCAnimation *pAnimation);$/;"	p	class:CCAnimate	access:public	signature:(CCAnimation *pAnimation)
initWithAnimationFrames	sprite_nodes/CCAnimation.cpp	/^bool CCAnimation::initWithAnimationFrames(CCArray* arrayOfAnimationFrames, float delayPerUnit, unsigned int loops)$/;"	f	class:CCAnimation	signature:(CCArray* arrayOfAnimationFrames, float delayPerUnit, unsigned int loops)
initWithAnimationFrames	sprite_nodes/CCAnimation.h	/^    bool initWithAnimationFrames(CCArray* arrayOfAnimationFrames, float delayPerUnit, unsigned int loops);$/;"	p	class:CCAnimation	access:public	signature:(CCArray* arrayOfAnimationFrames, float delayPerUnit, unsigned int loops)
initWithArray	cocoa/CCArray.cpp	/^bool CCArray::initWithArray(CCArray* otherArray)$/;"	f	class:CCArray	signature:(CCArray* otherArray)
initWithArray	cocoa/CCArray.h	/^    bool initWithArray(CCArray* otherArray);$/;"	p	class:CCArray	access:public	signature:(CCArray* otherArray)
initWithArray	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerMultiplex::initWithArray(CCArray* arrayOfLayers)$/;"	f	class:CCLayerMultiplex	signature:(CCArray* arrayOfLayers)
initWithArray	layers_scenes_transitions_nodes/CCLayer.h	/^    bool initWithArray(CCArray* arrayOfLayers);$/;"	p	class:CCLayerMultiplex	access:public	signature:(CCArray* arrayOfLayers)
initWithArray	menu_nodes/CCMenu.cpp	/^bool CCMenu::initWithArray(CCArray* pArrayOfItems)$/;"	f	class:CCMenu	signature:(CCArray* pArrayOfItems)
initWithArray	menu_nodes/CCMenu.h	/^    bool initWithArray(CCArray* pArrayOfItems);$/;"	p	class:CCMenu	access:public	signature:(CCArray* pArrayOfItems)
initWithCCPoint	tilemap_parallax_nodes/CCParallaxNode.cpp	/^    bool initWithCCPoint(CCPoint ratio, CCPoint offset)$/;"	f	class:CCPointObject	file:	access:private	signature:(CCPoint ratio, CCPoint offset)
initWithCapacity	actions/CCActionCatmullRom.cpp	/^bool CCPointArray::initWithCapacity(unsigned int capacity)$/;"	f	class:CCPointArray	signature:(unsigned int capacity)
initWithCapacity	actions/CCActionCatmullRom.h	/^    bool initWithCapacity(unsigned int capacity);$/;"	p	class:CCPointArray	access:public	signature:(unsigned int capacity)
initWithCapacity	cocoa/CCArray.cpp	/^bool CCArray::initWithCapacity(unsigned int capacity)$/;"	f	class:CCArray	signature:(unsigned int capacity)
initWithCapacity	cocoa/CCArray.h	/^    bool initWithCapacity(unsigned int capacity);$/;"	p	class:CCArray	access:public	signature:(unsigned int capacity)
initWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerColor::initWithColor(const ccColor4B& color)$/;"	f	class:CCLayerColor	signature:(const ccColor4B& color)
initWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerColor::initWithColor(const ccColor4B& color, GLfloat w, GLfloat h)$/;"	f	class:CCLayerColor	signature:(const ccColor4B& color, GLfloat w, GLfloat h)
initWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerGradient::initWithColor(const ccColor4B& start, const ccColor4B& end)$/;"	f	class:CCLayerGradient	signature:(const ccColor4B& start, const ccColor4B& end)
initWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerGradient::initWithColor(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)$/;"	f	class:CCLayerGradient	signature:(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)
initWithColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool initWithColor(const ccColor4B& color);$/;"	p	class:CCLayerColor	access:public	signature:(const ccColor4B& color)
initWithColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool initWithColor(const ccColor4B& color, GLfloat width, GLfloat height);$/;"	p	class:CCLayerColor	access:public	signature:(const ccColor4B& color, GLfloat width, GLfloat height)
initWithColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool initWithColor(const ccColor4B& start, const ccColor4B& end);$/;"	p	class:CCLayerGradient	access:public	signature:(const ccColor4B& start, const ccColor4B& end)
initWithColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool initWithColor(const ccColor4B& start, const ccColor4B& end, const CCPoint& v);$/;"	p	class:CCLayerGradient	access:public	signature:(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)
initWithContentsOfFile	textures/CCTexturePVR.h	/^    bool initWithContentsOfFile(const char* path);$/;"	p	class:CCTexturePVR	access:public	signature:(const char* path)
initWithData	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithData(const void *data, CCTexture2DPixelFormat pixelFormat, unsigned int pixelsWide, unsigned int pixelsHigh, const CCSize& contentSize)$/;"	f	class:CCTexture2D	signature:(const void *data, CCTexture2DPixelFormat pixelFormat, unsigned int pixelsWide, unsigned int pixelsHigh, const CCSize& contentSize)
initWithData	textures/CCTexture2D.h	/^    bool initWithData(const void* data, CCTexture2DPixelFormat pixelFormat, unsigned int pixelsWide, unsigned int pixelsHigh, const CCSize& contentSize);$/;"	p	class:CCTexture2D	access:public	signature:(const void* data, CCTexture2DPixelFormat pixelFormat, unsigned int pixelsWide, unsigned int pixelsHigh, const CCSize& contentSize)
initWithDelegate	keypad_dispatcher/CCKeypadDelegate.cpp	/^bool CCKeypadHandler::initWithDelegate(CCKeypadDelegate *pDelegate)$/;"	f	class:CCKeypadHandler	signature:(CCKeypadDelegate *pDelegate)
initWithDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^    virtual bool initWithDelegate(CCKeypadDelegate *pDelegate);$/;"	p	class:CCKeypadHandler	access:public	signature:(CCKeypadDelegate *pDelegate)
initWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^bool CCStandardTouchHandler::initWithDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCStandardTouchHandler	signature:(CCTouchDelegate *pDelegate, int nPriority)
initWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^bool CCTargetedTouchHandler::initWithDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)$/;"	f	class:CCTargetedTouchHandler	signature:(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)
initWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^bool CCTouchHandler::initWithDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCTouchHandler	signature:(CCTouchDelegate *pDelegate, int nPriority)
initWithDelegate	touch_dispatcher/CCTouchHandler.h	/^    bool initWithDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow);$/;"	p	class:CCTargetedTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)
initWithDelegate	touch_dispatcher/CCTouchHandler.h	/^    virtual bool initWithDelegate(CCTouchDelegate *pDelegate, int nPriority);$/;"	p	class:CCStandardTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority)
initWithDelegate	touch_dispatcher/CCTouchHandler.h	/^    virtual bool initWithDelegate(CCTouchDelegate *pDelegate, int nPriority);$/;"	p	class:CCTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate, int nPriority)
initWithDictionary	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::initWithDictionary(CCDictionary *dictionary)$/;"	f	class:CCParticleSystem	signature:(CCDictionary *dictionary)
initWithDictionary	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::initWithDictionary(CCDictionary *dictionary, const char *dirname)$/;"	f	class:CCParticleSystem	signature:(CCDictionary *dictionary, const char *dirname)
initWithDictionary	particle_nodes/CCParticleSystem.h	/^    bool initWithDictionary(CCDictionary *dictionary);$/;"	p	class:CCParticleSystem	access:public	signature:(CCDictionary *dictionary)
initWithDictionary	particle_nodes/CCParticleSystem.h	/^    bool initWithDictionary(CCDictionary *dictionary, const char *dirname);$/;"	p	class:CCParticleSystem	access:public	signature:(CCDictionary *dictionary, const char *dirname)
initWithDuration	actions/CCActionCamera.cpp	/^bool CCOrbitCamera::initWithDuration(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)$/;"	f	class:CCOrbitCamera	signature:(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)
initWithDuration	actions/CCActionCamera.h	/^    bool initWithDuration(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX);$/;"	p	class:CCOrbitCamera	access:public	signature:(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)
initWithDuration	actions/CCActionCatmullRom.cpp	/^bool CCCardinalSplineTo::initWithDuration(float duration, cocos2d::CCPointArray *points, float tension)$/;"	f	class:CCCardinalSplineTo	signature:(float duration, cocos2d::CCPointArray *points, float tension)
initWithDuration	actions/CCActionCatmullRom.cpp	/^bool CCCatmullRomBy::initWithDuration(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomBy	signature:(float dt, cocos2d::CCPointArray *points)
initWithDuration	actions/CCActionCatmullRom.cpp	/^bool CCCatmullRomTo::initWithDuration(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomTo	signature:(float dt, cocos2d::CCPointArray *points)
initWithDuration	actions/CCActionCatmullRom.h	/^    bool initWithDuration(float dt, CCPointArray* points);$/;"	p	class:CCCatmullRomBy	access:public	signature:(float dt, CCPointArray* points)
initWithDuration	actions/CCActionCatmullRom.h	/^    bool initWithDuration(float dt, CCPointArray* points);$/;"	p	class:CCCatmullRomTo	access:public	signature:(float dt, CCPointArray* points)
initWithDuration	actions/CCActionCatmullRom.h	/^    bool initWithDuration(float duration, CCPointArray* points, float tension);$/;"	p	class:CCCardinalSplineTo	access:public	signature:(float duration, CCPointArray* points, float tension)
initWithDuration	actions/CCActionGrid.cpp	/^bool CCGridAction::initWithDuration(float duration, const CCSize& gridSize)$/;"	f	class:CCGridAction	signature:(float duration, const CCSize& gridSize)
initWithDuration	actions/CCActionGrid.h	/^    virtual bool initWithDuration(float duration, const CCSize& gridSize);$/;"	p	class:CCGridAction	access:public	signature:(float duration, const CCSize& gridSize)
initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCFlipX3D::initWithDuration(float duration)$/;"	f	class:CCFlipX3D	signature:(float duration)
initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCLens3D::initWithDuration(float duration, const CCSize& gridSize, const CCPoint& position, float radius)$/;"	f	class:CCLens3D	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius)
initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCLiquid::initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)$/;"	f	class:CCLiquid	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCRipple3D::initWithDuration(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude)$/;"	f	class:CCRipple3D	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude)
initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCShaky3D::initWithDuration(float duration, const CCSize& gridSize, int range, bool shakeZ)$/;"	f	class:CCShaky3D	signature:(float duration, const CCSize& gridSize, int range, bool shakeZ)
initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCTwirl::initWithDuration(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude)$/;"	f	class:CCTwirl	signature:(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude)
initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCWaves3D::initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)$/;"	f	class:CCWaves3D	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCWaves::initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)$/;"	f	class:CCWaves	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)
initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude);$/;"	p	class:CCTwirl	access:public	signature:(float duration, const CCSize& gridSize, CCPoint position, unsigned int twirls, float amplitude)
initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, const CCPoint& position, float radius);$/;"	p	class:CCLens3D	access:public	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius)
initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude);$/;"	p	class:CCRipple3D	access:public	signature:(float duration, const CCSize& gridSize, const CCPoint& position, float radius, unsigned int waves, float amplitude)
initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, int range, bool shakeZ);$/;"	p	class:CCShaky3D	access:public	signature:(float duration, const CCSize& gridSize, int range, bool shakeZ)
initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude);$/;"	p	class:CCLiquid	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude);$/;"	p	class:CCWaves3D	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
initWithDuration	actions/CCActionGrid3D.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical);$/;"	p	class:CCWaves	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude, bool horizontal, bool vertical)
initWithDuration	actions/CCActionGrid3D.h	/^    virtual bool initWithDuration(float duration);$/;"	p	class:CCFlipX3D	access:public	signature:(float duration)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCActionInterval::initWithDuration(float d)$/;"	f	class:CCActionInterval	signature:(float d)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCBezierBy::initWithDuration(float t, const ccBezierConfig& c)$/;"	f	class:CCBezierBy	signature:(float t, const ccBezierConfig& c)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCBezierTo::initWithDuration(float t, const ccBezierConfig &c)$/;"	f	class:CCBezierTo	signature:(float t, const ccBezierConfig &c)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCBlink::initWithDuration(float duration, unsigned int uBlinks)$/;"	f	class:CCBlink	signature:(float duration, unsigned int uBlinks)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCFadeTo::initWithDuration(float duration, GLubyte opacity)$/;"	f	class:CCFadeTo	signature:(float duration, GLubyte opacity)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCJumpBy::initWithDuration(float duration, const CCPoint& position, float height, unsigned int jumps)$/;"	f	class:CCJumpBy	signature:(float duration, const CCPoint& position, float height, unsigned int jumps)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCMoveBy::initWithDuration(float duration, const CCPoint& deltaPosition)$/;"	f	class:CCMoveBy	signature:(float duration, const CCPoint& deltaPosition)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCMoveTo::initWithDuration(float duration, const CCPoint& position)$/;"	f	class:CCMoveTo	signature:(float duration, const CCPoint& position)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCRotateBy::initWithDuration(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateBy	signature:(float fDuration, float fDeltaAngle)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCRotateBy::initWithDuration(float fDuration, float fDeltaAngleX, float fDeltaAngleY)$/;"	f	class:CCRotateBy	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCRotateTo::initWithDuration(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateTo	signature:(float fDuration, float fDeltaAngle)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCRotateTo::initWithDuration(float fDuration, float fDeltaAngleX, float fDeltaAngleY)$/;"	f	class:CCRotateTo	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCScaleTo::initWithDuration(float duration, float s)$/;"	f	class:CCScaleTo	signature:(float duration, float s)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCScaleTo::initWithDuration(float duration, float sx, float sy)$/;"	f	class:CCScaleTo	signature:(float duration, float sx, float sy)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCSkewBy::initWithDuration(float t, float deltaSkewX, float deltaSkewY)$/;"	f	class:CCSkewBy	signature:(float t, float deltaSkewX, float deltaSkewY)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCSkewTo::initWithDuration(float t, float sx, float sy)$/;"	f	class:CCSkewTo	signature:(float t, float sx, float sy)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCTintBy::initWithDuration(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)$/;"	f	class:CCTintBy	signature:(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)
initWithDuration	actions/CCActionInterval.cpp	/^bool CCTintTo::initWithDuration(float duration, GLubyte red, GLubyte green, GLubyte blue)$/;"	f	class:CCTintTo	signature:(float duration, GLubyte red, GLubyte green, GLubyte blue)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float d);$/;"	p	class:CCActionInterval	access:public	signature:(float d)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue);$/;"	p	class:CCTintBy	access:public	signature:(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, GLubyte opacity);$/;"	p	class:CCFadeTo	access:public	signature:(float duration, GLubyte opacity)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, GLubyte red, GLubyte green, GLubyte blue);$/;"	p	class:CCTintTo	access:public	signature:(float duration, GLubyte red, GLubyte green, GLubyte blue)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, const CCPoint& deltaPosition);$/;"	p	class:CCMoveBy	access:public	signature:(float duration, const CCPoint& deltaPosition)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, const CCPoint& position);$/;"	p	class:CCMoveTo	access:public	signature:(float duration, const CCPoint& position)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, const CCPoint& position, float height, unsigned int jumps);$/;"	p	class:CCJumpBy	access:public	signature:(float duration, const CCPoint& position, float height, unsigned int jumps)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, float s);$/;"	p	class:CCScaleTo	access:public	signature:(float duration, float s)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, float sx, float sy);$/;"	p	class:CCScaleTo	access:public	signature:(float duration, float sx, float sy)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float duration, unsigned int uBlinks);$/;"	p	class:CCBlink	access:public	signature:(float duration, unsigned int uBlinks)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float fDuration, float fDeltaAngle);$/;"	p	class:CCRotateBy	access:public	signature:(float fDuration, float fDeltaAngle)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float fDuration, float fDeltaAngle);$/;"	p	class:CCRotateTo	access:public	signature:(float fDuration, float fDeltaAngle)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float fDuration, float fDeltaAngleX, float fDeltaAngleY);$/;"	p	class:CCRotateBy	access:public	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float t, const ccBezierConfig &c);$/;"	p	class:CCBezierTo	access:public	signature:(float t, const ccBezierConfig &c)
initWithDuration	actions/CCActionInterval.h	/^    bool initWithDuration(float t, const ccBezierConfig& c);$/;"	p	class:CCBezierBy	access:public	signature:(float t, const ccBezierConfig& c)
initWithDuration	actions/CCActionInterval.h	/^    virtual bool initWithDuration(float fDuration, float fDeltaAngleX, float fDeltaAngleY);$/;"	p	class:CCRotateTo	access:public	signature:(float fDuration, float fDeltaAngleX, float fDeltaAngleY)
initWithDuration	actions/CCActionInterval.h	/^    virtual bool initWithDuration(float t, float sx, float sy);$/;"	p	class:CCSkewBy	access:public	signature:(float t, float sx, float sy)
initWithDuration	actions/CCActionInterval.h	/^    virtual bool initWithDuration(float t, float sx, float sy);$/;"	p	class:CCSkewTo	access:public	signature:(float t, float sx, float sy)
initWithDuration	actions/CCActionProgressTimer.cpp	/^bool CCProgressFromTo::initWithDuration(float duration, float fFromPercentage, float fToPercentage)$/;"	f	class:CCProgressFromTo	signature:(float duration, float fFromPercentage, float fToPercentage)
initWithDuration	actions/CCActionProgressTimer.cpp	/^bool CCProgressTo::initWithDuration(float duration, float fPercent)$/;"	f	class:CCProgressTo	signature:(float duration, float fPercent)
initWithDuration	actions/CCActionProgressTimer.h	/^    bool initWithDuration(float duration, float fFromPercentage, float fToPercentage);$/;"	p	class:CCProgressFromTo	access:public	signature:(float duration, float fFromPercentage, float fToPercentage)
initWithDuration	actions/CCActionProgressTimer.h	/^    bool initWithDuration(float duration, float fPercent);$/;"	p	class:CCProgressTo	access:public	signature:(float duration, float fPercent)
initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCJumpTiles3D::initWithDuration(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude)$/;"	f	class:CCJumpTiles3D	signature:(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude)
initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCShakyTiles3D::initWithDuration(float duration, const CCSize& gridSize, int nRange, bool bShakeZ)$/;"	f	class:CCShakyTiles3D	signature:(float duration, const CCSize& gridSize, int nRange, bool bShakeZ)
initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCShatteredTiles3D::initWithDuration(float duration, const CCSize& gridSize, int nRange, bool bShatterZ)$/;"	f	class:CCShatteredTiles3D	signature:(float duration, const CCSize& gridSize, int nRange, bool bShatterZ)
initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCShuffleTiles::initWithDuration(float duration, const CCSize& gridSize, unsigned int seed)$/;"	f	class:CCShuffleTiles	signature:(float duration, const CCSize& gridSize, unsigned int seed)
initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCSplitCols::initWithDuration(float duration, unsigned int nCols)$/;"	f	class:CCSplitCols	signature:(float duration, unsigned int nCols)
initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCSplitRows::initWithDuration(float duration, unsigned int nRows)$/;"	f	class:CCSplitRows	signature:(float duration, unsigned int nRows)
initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCTurnOffTiles::initWithDuration(float duration, const CCSize& gridSize, unsigned int seed)$/;"	f	class:CCTurnOffTiles	signature:(float duration, const CCSize& gridSize, unsigned int seed)
initWithDuration	actions/CCActionTiledGrid.cpp	/^bool CCWavesTiles3D::initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)$/;"	f	class:CCWavesTiles3D	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
initWithDuration	actions/CCActionTiledGrid.h	/^    bool initWithDuration(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude);$/;"	p	class:CCJumpTiles3D	access:public	signature:(float duration, const CCSize& gridSize, unsigned int numberOfJumps, float amplitude)
initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, const CCSize& gridSize, int nRange, bool bShakeZ);$/;"	p	class:CCShakyTiles3D	access:public	signature:(float duration, const CCSize& gridSize, int nRange, bool bShakeZ)
initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, const CCSize& gridSize, int nRange, bool bShatterZ);$/;"	p	class:CCShatteredTiles3D	access:public	signature:(float duration, const CCSize& gridSize, int nRange, bool bShatterZ)
initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, const CCSize& gridSize, unsigned int seed);$/;"	p	class:CCShuffleTiles	access:public	signature:(float duration, const CCSize& gridSize, unsigned int seed)
initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, const CCSize& gridSize, unsigned int seed);$/;"	p	class:CCTurnOffTiles	access:public	signature:(float duration, const CCSize& gridSize, unsigned int seed)
initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, const CCSize& gridSize, unsigned int waves, float amplitude);$/;"	p	class:CCWavesTiles3D	access:public	signature:(float duration, const CCSize& gridSize, unsigned int waves, float amplitude)
initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, unsigned int nCols);$/;"	p	class:CCSplitCols	access:public	signature:(float duration, unsigned int nCols)
initWithDuration	actions/CCActionTiledGrid.h	/^    virtual bool initWithDuration(float duration, unsigned int nRows);$/;"	p	class:CCSplitRows	access:public	signature:(float duration, unsigned int nRows)
initWithDuration	actions/CCActionTween.cpp	/^bool CCActionTween::initWithDuration(float aDuration, const char* key, float from, float to)$/;"	f	class:CCActionTween	signature:(float aDuration, const char* key, float from, float to)
initWithDuration	actions/CCActionTween.h	/^    bool initWithDuration(float aDuration, const char* key, float from, float to);$/;"	p	class:CCActionTween	access:public	signature:(float aDuration, const char* key, float from, float to)
initWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^bool CCTransitionFade::initWithDuration(float duration, CCScene *scene, const ccColor3B& color)$/;"	f	class:CCTransitionFade	signature:(float duration, CCScene *scene, const ccColor3B& color)
initWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^bool CCTransitionFade::initWithDuration(float t, CCScene *scene)$/;"	f	class:CCTransitionFade	signature:(float t, CCScene *scene)
initWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^bool CCTransitionScene::initWithDuration(float t, CCScene *scene)$/;"	f	class:CCTransitionScene	signature:(float t, CCScene *scene)
initWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^bool CCTransitionSceneOriented::initWithDuration(float t, CCScene *scene, tOrientation orientation)$/;"	f	class:CCTransitionSceneOriented	signature:(float t, CCScene *scene, tOrientation orientation)
initWithDuration	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual bool initWithDuration(float t, CCScene*scene ,const ccColor3B& color);$/;"	p	class:CCTransitionFade	access:public	signature:(float t, CCScene*scene ,const ccColor3B& color)
initWithDuration	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual bool initWithDuration(float t,CCScene* scene); $/;"	p	class:CCTransitionFade	access:public	signature:(float t,CCScene* scene)
initWithDuration	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual bool initWithDuration(float t,CCScene* scene);$/;"	p	class:CCTransitionScene	access:public	signature:(float t,CCScene* scene)
initWithDuration	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual bool initWithDuration(float t,CCScene* scene,tOrientation orientation);$/;"	p	class:CCTransitionSceneOriented	access:public	signature:(float t,CCScene* scene,tOrientation orientation)
initWithDuration	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^bool CCTransitionPageTurn::initWithDuration(float t, CCScene *scene, bool backwards)$/;"	f	class:CCTransitionPageTurn	signature:(float t, CCScene *scene, bool backwards)
initWithDuration	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    virtual bool initWithDuration(float t,CCScene* scene,bool backwards);$/;"	p	class:CCTransitionPageTurn	access:public	signature:(float t,CCScene* scene,bool backwards)
initWithFNTfile	label_nodes/CCLabelBMFont.cpp	/^bool CCBMFontConfiguration::initWithFNTfile(const char *FNTfile)$/;"	f	class:CCBMFontConfiguration	signature:(const char *FNTfile)
initWithFNTfile	label_nodes/CCLabelBMFont.h	/^    bool initWithFNTfile(const char *FNTfile);$/;"	p	class:CCBMFontConfiguration	access:public	signature:(const char *FNTfile)
initWithFade	misc_nodes/CCMotionStreak.cpp	/^bool CCMotionStreak::initWithFade(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)$/;"	f	class:CCMotionStreak	signature:(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)
initWithFade	misc_nodes/CCMotionStreak.cpp	/^bool CCMotionStreak::initWithFade(float fade, float minSeg, float stroke, ccColor3B color, const char* path)$/;"	f	class:CCMotionStreak	signature:(float fade, float minSeg, float stroke, ccColor3B color, const char* path)
initWithFade	misc_nodes/CCMotionStreak.h	/^    bool initWithFade(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture);$/;"	p	class:CCMotionStreak	access:public	signature:(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)
initWithFade	misc_nodes/CCMotionStreak.h	/^    bool initWithFade(float fade, float minSeg, float stroke, ccColor3B color, const char* path);$/;"	p	class:CCMotionStreak	access:public	signature:(float fade, float minSeg, float stroke, ccColor3B color, const char* path)
initWithFile	particle_nodes/CCParticleBatchNode.cpp	/^bool CCParticleBatchNode::initWithFile(const char* fileImage, unsigned int capacity)$/;"	f	class:CCParticleBatchNode	signature:(const char* fileImage, unsigned int capacity)
initWithFile	particle_nodes/CCParticleBatchNode.h	/^    bool initWithFile(const char* fileImage, unsigned int capacity);$/;"	p	class:CCParticleBatchNode	access:public	signature:(const char* fileImage, unsigned int capacity)
initWithFile	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::initWithFile(const char *plistFile)$/;"	f	class:CCParticleSystem	signature:(const char *plistFile)
initWithFile	particle_nodes/CCParticleSystem.h	/^    bool initWithFile(const char *plistFile);$/;"	p	class:CCParticleSystem	access:public	signature:(const char *plistFile)
initWithFile	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithFile(const char *pszFilename)$/;"	f	class:CCSprite	signature:(const char *pszFilename)
initWithFile	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithFile(const char *pszFilename, const CCRect& rect)$/;"	f	class:CCSprite	signature:(const char *pszFilename, const CCRect& rect)
initWithFile	sprite_nodes/CCSprite.h	/^    virtual bool initWithFile(const char *pszFilename);$/;"	p	class:CCSprite	access:public	signature:(const char *pszFilename)
initWithFile	sprite_nodes/CCSprite.h	/^    virtual bool initWithFile(const char *pszFilename, const CCRect& rect);$/;"	p	class:CCSprite	access:public	signature:(const char *pszFilename, const CCRect& rect)
initWithFile	sprite_nodes/CCSpriteBatchNode.cpp	/^bool CCSpriteBatchNode::initWithFile(const char* fileImage, unsigned int capacity)$/;"	f	class:CCSpriteBatchNode	signature:(const char* fileImage, unsigned int capacity)
initWithFile	sprite_nodes/CCSpriteBatchNode.h	/^    bool initWithFile(const char* fileImage, unsigned int capacity);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(const char* fileImage, unsigned int capacity)
initWithFile	textures/CCTextureAtlas.cpp	/^bool CCTextureAtlas::initWithFile(const char * file, unsigned int capacity)$/;"	f	class:CCTextureAtlas	signature:(const char * file, unsigned int capacity)
initWithFile	textures/CCTextureAtlas.h	/^    bool initWithFile(const char* file, unsigned int capacity);$/;"	p	class:CCTextureAtlas	access:public	signature:(const char* file, unsigned int capacity)
initWithFlipX	actions/CCActionInstant.cpp	/^bool CCFlipX::initWithFlipX(bool x) {$/;"	f	class:CCFlipX	signature:(bool x)
initWithFlipX	actions/CCActionInstant.h	/^    bool initWithFlipX(bool x);$/;"	p	class:CCFlipX	access:public	signature:(bool x)
initWithFlipY	actions/CCActionInstant.cpp	/^bool CCFlipY::initWithFlipY(bool y) {$/;"	f	class:CCFlipY	signature:(bool y)
initWithFlipY	actions/CCActionInstant.h	/^    bool initWithFlipY(bool y);$/;"	p	class:CCFlipY	access:public	signature:(bool y)
initWithFormat	cocoa/CCString.cpp	/^bool CCString::initWithFormat(const char* format, ...)$/;"	f	class:CCString	signature:(const char* format, ...)
initWithFormat	cocoa/CCString.h	/^    bool initWithFormat(const char* format, ...);$/;"	p	class:CCString	access:public	signature:(const char* format, ...)
initWithFormatAndValist	cocoa/CCString.cpp	/^bool CCString::initWithFormatAndValist(const char* format, va_list ap)$/;"	f	class:CCString	signature:(const char* format, va_list ap)
initWithFormatAndValist	cocoa/CCString.h	/^    bool initWithFormatAndValist(const char* format, va_list ap);$/;"	p	class:CCString	access:private	signature:(const char* format, va_list ap)
initWithImage	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithImage(CCImage *uiImage)$/;"	f	class:CCTexture2D	signature:(CCImage *uiImage)
initWithImage	textures/CCTexture2D.h	/^    bool initWithImage(CCImage * uiImage);$/;"	p	class:CCTexture2D	access:public	signature:(CCImage * uiImage)
initWithImageData	platform/CCImage.h	/^    bool initWithImageData(void * pData, $/;"	p	class:CCImage	access:public	signature:(void * pData, int nDataLen, EImageFormat eFmt = kFmtUnKnown, int nWidth = 0, int nHeight = 0, int nBitsPerComponent = 8)
initWithImageData	platform/CCImageCommon_cpp.h	/^bool CCImage::initWithImageData(void * pData, $/;"	f	class:CCImage	signature:(void * pData, int nDataLen, EImageFormat eFmt , int nWidth , int nHeight , int nBitsPerComponent )
initWithImageFile	platform/CCImage.h	/^    bool initWithImageFile(const char * strPath, EImageFormat imageType = kFmtPng);$/;"	p	class:CCImage	access:public	signature:(const char * strPath, EImageFormat imageType = kFmtPng)
initWithImageFile	platform/CCImageCommon_cpp.h	/^bool CCImage::initWithImageFile(const char * strPath, EImageFormat eImgFmt\/* = eFmtPng*\/)$/;"	f	class:CCImage	signature:(const char * strPath, EImageFormat eImgFmt )
initWithImageFileThreadSafe	platform/CCImage.h	/^    bool initWithImageFileThreadSafe(const char *fullpath, EImageFormat imageType = kFmtPng);$/;"	p	class:CCImage	access:public	signature:(const char *fullpath, EImageFormat imageType = kFmtPng)
initWithImageFileThreadSafe	platform/CCImageCommon_cpp.h	/^bool CCImage::initWithImageFileThreadSafe(const char *fullpath, EImageFormat imageType)$/;"	f	class:CCImage	signature:(const char *fullpath, EImageFormat imageType)
initWithItem	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemToggle::initWithItem(CCMenuItem *item)$/;"	f	class:CCMenuItemToggle	signature:(CCMenuItem *item)
initWithItem	menu_nodes/CCMenuItem.h	/^    bool initWithItem(CCMenuItem *item);$/;"	p	class:CCMenuItemToggle	access:public	signature:(CCMenuItem *item)
initWithLabel	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemLabel::initWithLabel(CCNode* label, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemLabel	signature:(CCNode* label, CCObject* target, SEL_MenuHandler selector)
initWithLabel	menu_nodes/CCMenuItem.h	/^    bool initWithLabel(CCNode* label, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemLabel	access:public	signature:(CCNode* label, CCObject* target, SEL_MenuHandler selector)
initWithLayers	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerMultiplex::initWithLayers(CCLayer *layer, va_list params)$/;"	f	class:CCLayerMultiplex	signature:(CCLayer *layer, va_list params)
initWithLayers	layers_scenes_transitions_nodes/CCLayer.h	/^    bool initWithLayers(CCLayer* layer, va_list params);$/;"	p	class:CCLayerMultiplex	access:public	signature:(CCLayer* layer, va_list params)
initWithName	support/CCProfiling.cpp	/^bool CCProfilingTimer::initWithName(const char* timerName)$/;"	f	class:CCProfilingTimer	signature:(const char* timerName)
initWithName	support/CCProfiling.h	/^    bool initWithName(const char* timerName);$/;"	p	class:CCProfilingTimer	access:public	signature:(const char* timerName)
initWithNormalImage	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemImage::initWithNormalImage(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemImage	signature:(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)
initWithNormalImage	menu_nodes/CCMenuItem.h	/^    bool initWithNormalImage(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemImage	access:public	signature:(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)
initWithNormalSprite	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemSprite::initWithNormalSprite(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemSprite	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector)
initWithNormalSprite	menu_nodes/CCMenuItem.h	/^    bool initWithNormalSprite(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemSprite	access:public	signature:(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector)
initWithObject	cocoa/CCArray.cpp	/^bool CCArray::initWithObject(CCObject* pObject)$/;"	f	class:CCArray	signature:(CCObject* pObject)
initWithObject	cocoa/CCArray.h	/^    bool initWithObject(CCObject* pObject);$/;"	p	class:CCArray	access:public	signature:(CCObject* pObject)
initWithObjects	cocoa/CCArray.cpp	/^bool CCArray::initWithObjects(CCObject* pObject, ...)$/;"	f	class:CCArray	signature:(CCObject* pObject, ...)
initWithObjects	cocoa/CCArray.h	/^    bool initWithObjects(CCObject* pObject, ...);$/;"	p	class:CCArray	access:public	signature:(CCObject* pObject, ...)
initWithPVRFile	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithPVRFile(const char* file)$/;"	f	class:CCTexture2D	signature:(const char* file)
initWithPVRFile	textures/CCTexture2D.h	/^    bool initWithPVRFile(const char* file);$/;"	p	class:CCTexture2D	access:public	signature:(const char* file)
initWithPVRTCData	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithPVRTCData(const void *data, int level, int bpp, bool hasAlpha, int length, CCTexture2DPixelFormat pixelFormat)$/;"	f	class:CCTexture2D	signature:(const void *data, int level, int bpp, bool hasAlpha, int length, CCTexture2DPixelFormat pixelFormat)
initWithPVRTCData	textures/CCTexture2D.h	/^    bool initWithPVRTCData(const void *data, int level, int bpp, bool hasAlpha, int length, CCTexture2DPixelFormat pixelFormat);$/;"	p	class:CCTexture2D	access:public	signature:(const void *data, int level, int bpp, bool hasAlpha, int length, CCTexture2DPixelFormat pixelFormat)
initWithPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::initWithPlaceHolder(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)$/;"	f	class:CCTextFieldTTF	signature:(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)
initWithPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::initWithPlaceHolder(const char *placeholder, const char *fontName, float fontSize)$/;"	f	class:CCTextFieldTTF	signature:(const char *placeholder, const char *fontName, float fontSize)
initWithPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    bool initWithPlaceHolder(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)
initWithPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    bool initWithPlaceHolder(const char *placeholder, const char *fontName, float fontSize);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const char *placeholder, const char *fontName, float fontSize)
initWithPosition	actions/CCActionInstant.cpp	/^bool CCPlace::initWithPosition(const CCPoint& pos) {$/;"	f	class:CCPlace	signature:(const CCPoint& pos)
initWithPosition	actions/CCActionInstant.h	/^    bool initWithPosition(const CCPoint& pos);$/;"	p	class:CCPlace	access:public	signature:(const CCPoint& pos)
initWithScriptHandler	CCScheduler.cpp	/^bool CCTimer::initWithScriptHandler(int nHandler, float fSeconds)$/;"	f	class:CCTimer	signature:(int nHandler, float fSeconds)
initWithScriptHandler	CCScheduler.h	/^    bool initWithScriptHandler(int nHandler, float fSeconds);$/;"	p	class:CCTimer	access:public	signature:(int nHandler, float fSeconds)
initWithSize	actions/CCActionGrid3D.cpp	/^bool CCFlipX3D::initWithSize(const CCSize& gridSize, float duration)$/;"	f	class:CCFlipX3D	signature:(const CCSize& gridSize, float duration)
initWithSize	actions/CCActionGrid3D.h	/^    virtual bool initWithSize(const CCSize& gridSize, float duration);$/;"	p	class:CCFlipX3D	access:public	signature:(const CCSize& gridSize, float duration)
initWithSize	effects/CCGrid.cpp	/^bool CCGridBase::initWithSize(const CCSize& gridSize)$/;"	f	class:CCGridBase	signature:(const CCSize& gridSize)
initWithSize	effects/CCGrid.cpp	/^bool CCGridBase::initWithSize(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)$/;"	f	class:CCGridBase	signature:(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)
initWithSize	effects/CCGrid.h	/^    bool initWithSize(const CCSize& gridSize);$/;"	p	class:CCGridBase	access:public	signature:(const CCSize& gridSize)
initWithSize	effects/CCGrid.h	/^    bool initWithSize(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped);$/;"	p	class:CCGridBase	access:public	signature:(const CCSize& gridSize, CCTexture2D *pTexture, bool bFlipped)
initWithSprite	misc_nodes/CCProgressTimer.cpp	/^bool CCProgressTimer::initWithSprite(CCSprite* sp)$/;"	f	class:CCProgressTimer	signature:(CCSprite* sp)
initWithSprite	misc_nodes/CCProgressTimer.h	/^    bool initWithSprite(CCSprite* sp);$/;"	p	class:CCProgressTimer	access:public	signature:(CCSprite* sp)
initWithSpriteFrame	sprite_nodes/CCAnimation.cpp	/^bool CCAnimationFrame::initWithSpriteFrame(CCSpriteFrame* spriteFrame, float delayUnits, CCDictionary* userInfo)$/;"	f	class:CCAnimationFrame	signature:(CCSpriteFrame* spriteFrame, float delayUnits, CCDictionary* userInfo)
initWithSpriteFrame	sprite_nodes/CCAnimation.h	/^    bool initWithSpriteFrame(CCSpriteFrame* spriteFrame, float delayUnits, CCDictionary* userInfo);$/;"	p	class:CCAnimationFrame	access:public	signature:(CCSpriteFrame* spriteFrame, float delayUnits, CCDictionary* userInfo)
initWithSpriteFrame	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithSpriteFrame(CCSpriteFrame *pSpriteFrame)$/;"	f	class:CCSprite	signature:(CCSpriteFrame *pSpriteFrame)
initWithSpriteFrame	sprite_nodes/CCSprite.h	/^    virtual bool initWithSpriteFrame(CCSpriteFrame *pSpriteFrame);$/;"	p	class:CCSprite	access:public	signature:(CCSpriteFrame *pSpriteFrame)
initWithSpriteFrameName	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithSpriteFrameName(const char *pszSpriteFrameName)$/;"	f	class:CCSprite	signature:(const char *pszSpriteFrameName)
initWithSpriteFrameName	sprite_nodes/CCSprite.h	/^    virtual bool initWithSpriteFrameName(const char *pszSpriteFrameName);$/;"	p	class:CCSprite	access:public	signature:(const char *pszSpriteFrameName)
initWithSpriteFrames	sprite_nodes/CCAnimation.cpp	/^bool CCAnimation::initWithSpriteFrames(CCArray *pFrames, float delay\/* = 0.0f*\/)$/;"	f	class:CCAnimation	signature:(CCArray *pFrames, float delay )
initWithSpriteFrames	sprite_nodes/CCAnimation.h	/^    bool initWithSpriteFrames(CCArray *pFrames, float delay = 0.0f);$/;"	p	class:CCAnimation	access:public	signature:(CCArray *pFrames, float delay = 0.0f)
initWithString	label_nodes/CCLabelAtlas.cpp	/^bool CCLabelAtlas::initWithString(const char *string, CCTexture2D* texture, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)$/;"	f	class:CCLabelAtlas	signature:(const char *string, CCTexture2D* texture, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)
initWithString	label_nodes/CCLabelAtlas.cpp	/^bool CCLabelAtlas::initWithString(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)$/;"	f	class:CCLabelAtlas	signature:(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)
initWithString	label_nodes/CCLabelAtlas.cpp	/^bool CCLabelAtlas::initWithString(const char *theString, const char *fntFile)$/;"	f	class:CCLabelAtlas	signature:(const char *theString, const char *fntFile)
initWithString	label_nodes/CCLabelAtlas.h	/^    bool initWithString(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap);$/;"	p	class:CCLabelAtlas	access:public	signature:(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)
initWithString	label_nodes/CCLabelAtlas.h	/^    bool initWithString(const char *string, const char *fntFile);$/;"	p	class:CCLabelAtlas	access:public	signature:(const char *string, const char *fntFile)
initWithString	label_nodes/CCLabelAtlas.h	/^    bool initWithString(const char* string, CCTexture2D* texture, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap);$/;"	p	class:CCLabelAtlas	access:public	signature:(const char* string, CCTexture2D* texture, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)
initWithString	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::initWithString(const char *theString, const char *fntFile, float width\/* = kCCLabelAutomaticWidth*\/, CCTextAlignment alignment\/* = kCCTextAlignmentLeft*\/, CCPoint imageOffset\/* = CCPointZero*\/)$/;"	f	class:CCLabelBMFont	signature:(const char *theString, const char *fntFile, float width , CCTextAlignment alignment , CCPoint imageOffset )
initWithString	label_nodes/CCLabelBMFont.h	/^    bool initWithString(const char *str, const char *fntFile, float width = kCCLabelAutomaticWidth, CCTextAlignment alignment = kCCTextAlignmentLeft, CCPoint imageOffset = CCPointZero);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *str, const char *fntFile, float width = kCCLabelAutomaticWidth, CCTextAlignment alignment = kCCTextAlignmentLeft, CCPoint imageOffset = CCPointZero)
initWithString	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::initWithString(const char *label, const char *fontName, float fontSize)$/;"	f	class:CCLabelTTF	signature:(const char *label, const char *fontName, float fontSize)
initWithString	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::initWithString(const char *label, const char *fontName, float fontSize, $/;"	f	class:CCLabelTTF	signature:(const char *label, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment alignment)
initWithString	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::initWithString(const char *string, const char *fontName, float fontSize,$/;"	f	class:CCLabelTTF	signature:(const char *string, const char *fontName, float fontSize, const cocos2d::CCSize &dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)
initWithString	label_nodes/CCLabelTTF.h	/^    bool initWithString(const char *string, const char *fontName, float fontSize);$/;"	p	class:CCLabelTTF	access:public	signature:(const char *string, const char *fontName, float fontSize)
initWithString	label_nodes/CCLabelTTF.h	/^    bool initWithString(const char *string, const char *fontName, float fontSize,$/;"	p	class:CCLabelTTF	access:public	signature:(const char *string, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment)
initWithString	label_nodes/CCLabelTTF.h	/^    bool initWithString(const char *string, const char *fontName, float fontSize,$/;"	p	class:CCLabelTTF	access:public	signature:(const char *string, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)
initWithString	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemAtlasFont::initWithString(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemAtlasFont	signature:(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)
initWithString	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemFont::initWithString(const char *value, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemFont	signature:(const char *value, CCObject* target, SEL_MenuHandler selector)
initWithString	menu_nodes/CCMenuItem.h	/^    bool initWithString(const char *value, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemFont	access:public	signature:(const char *value, CCObject* target, SEL_MenuHandler selector)
initWithString	menu_nodes/CCMenuItem.h	/^    bool initWithString(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector);$/;"	p	class:CCMenuItemAtlasFont	access:public	signature:(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)
initWithString	platform/CCImage.h	/^    bool initWithString($/;"	p	class:CCImage	access:public	signature:( const char * pText, int nWidth = 0, int nHeight = 0, ETextAlign eAlignMask = kAlignCenter, const char * pFontName = 0, int nSize = 0)
initWithString	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithString(const char *text, const char *fontName, float fontSize)$/;"	f	class:CCTexture2D	signature:(const char *text, const char *fontName, float fontSize)
initWithString	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithString(const char *text, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)$/;"	f	class:CCTexture2D	signature:(const char *text, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)
initWithString	textures/CCTexture2D.h	/^    bool initWithString(const char *text,  const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment);$/;"	p	class:CCTexture2D	access:public	signature:(const char *text, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)
initWithString	textures/CCTexture2D.h	/^    bool initWithString(const char *text, const char *fontName, float fontSize);$/;"	p	class:CCTexture2D	access:public	signature:(const char *text, const char *fontName, float fontSize)
initWithTMXFile	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^bool CCTMXTiledMap::initWithTMXFile(const char *tmxFile)$/;"	f	class:CCTMXTiledMap	signature:(const char *tmxFile)
initWithTMXFile	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    bool initWithTMXFile(const char *tmxFile);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char *tmxFile)
initWithTMXFile	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^bool CCTMXMapInfo::initWithTMXFile(const char *tmxFile)$/;"	f	class:CCTMXMapInfo	signature:(const char *tmxFile)
initWithTMXFile	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool initWithTMXFile(const char *tmxFile);$/;"	p	class:CCTMXMapInfo	access:public	signature:(const char *tmxFile)
initWithTarget	CCScheduler.cpp	/^bool CCTimer::initWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector)$/;"	f	class:CCTimer	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector)
initWithTarget	CCScheduler.cpp	/^bool CCTimer::initWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds, unsigned int nRepeat, float fDelay)$/;"	f	class:CCTimer	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds, unsigned int nRepeat, float fDelay)
initWithTarget	CCScheduler.h	/^    bool initWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector);$/;"	p	class:CCTimer	access:public	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector)
initWithTarget	CCScheduler.h	/^    bool initWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds, unsigned int nRepeat, float fDelay);$/;"	p	class:CCTimer	access:public	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds, unsigned int nRepeat, float fDelay)
initWithTarget	actions/CCAction.cpp	/^bool CCFollow::initWithTarget(CCNode *pFollowedNode, const CCRect& rect\/* = CCRectZero*\/)$/;"	f	class:CCFollow	signature:(CCNode *pFollowedNode, const CCRect& rect )
initWithTarget	actions/CCAction.h	/^    bool initWithTarget(CCNode *pFollowedNode, const CCRect& rect = CCRectZero);$/;"	p	class:CCFollow	access:public	signature:(CCNode *pFollowedNode, const CCRect& rect = CCRectZero)
initWithTarget	actions/CCActionInstant.cpp	/^bool CCCallFunc::initWithTarget(CCObject* pSelectorTarget) {$/;"	f	class:CCCallFunc	signature:(CCObject* pSelectorTarget)
initWithTarget	actions/CCActionInstant.cpp	/^bool CCCallFuncN::initWithTarget(CCObject* pSelectorTarget,$/;"	f	class:CCCallFuncN	signature:(CCObject* pSelectorTarget, SEL_CallFuncN selector)
initWithTarget	actions/CCActionInstant.cpp	/^bool CCCallFuncND::initWithTarget(CCObject* pSelectorTarget,$/;"	f	class:CCCallFuncND	signature:(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d)
initWithTarget	actions/CCActionInstant.cpp	/^bool CCCallFuncO::initWithTarget(CCObject* pSelectorTarget,$/;"	f	class:CCCallFuncO	signature:(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject)
initWithTarget	actions/CCActionInstant.h	/^    virtual bool initWithTarget(CCObject* pSelectorTarget);$/;"	p	class:CCCallFunc	access:public	signature:(CCObject* pSelectorTarget)
initWithTarget	actions/CCActionInstant.h	/^    virtual bool initWithTarget(CCObject* pSelectorTarget, SEL_CallFuncN selector);$/;"	p	class:CCCallFuncN	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFuncN selector)
initWithTarget	actions/CCActionInstant.h	/^    virtual bool initWithTarget(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d);$/;"	p	class:CCCallFuncND	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d)
initWithTarget	actions/CCActionInstant.h	/^    virtual bool initWithTarget(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject);$/;"	p	class:CCCallFuncO	access:public	signature:(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject)
initWithTarget	actions/CCActionInterval.cpp	/^bool CCTargetedAction::initWithTarget(CCNode* pTarget, CCFiniteTimeAction* pAction)$/;"	f	class:CCTargetedAction	signature:(CCNode* pTarget, CCFiniteTimeAction* pAction)
initWithTarget	actions/CCActionInterval.h	/^    bool initWithTarget(CCNode* pTarget, CCFiniteTimeAction* pAction);$/;"	p	class:CCTargetedAction	access:public	signature:(CCNode* pTarget, CCFiniteTimeAction* pAction)
initWithTarget	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItem::initWithTarget(CCObject *rec, SEL_MenuHandler selector)$/;"	f	class:CCMenuItem	signature:(CCObject *rec, SEL_MenuHandler selector)
initWithTarget	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemToggle::initWithTarget(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, va_list args)$/;"	f	class:CCMenuItemToggle	signature:(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, va_list args)
initWithTarget	menu_nodes/CCMenuItem.h	/^    bool initWithTarget(CCObject *rec, SEL_MenuHandler selector);$/;"	p	class:CCMenuItem	access:public	signature:(CCObject *rec, SEL_MenuHandler selector)
initWithTarget	menu_nodes/CCMenuItem.h	/^    bool initWithTarget(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, va_list args);$/;"	p	class:CCMenuItemToggle	access:public	signature:(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, va_list args)
initWithTexture	base_nodes/CCAtlasNode.cpp	/^bool CCAtlasNode::initWithTexture(CCTexture2D* texture, unsigned int tileWidth, unsigned int tileHeight, $/;"	f	class:CCAtlasNode	signature:(CCTexture2D* texture, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)
initWithTexture	base_nodes/CCAtlasNode.h	/^    bool initWithTexture(CCTexture2D* texture, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender);$/;"	p	class:CCAtlasNode	access:public	signature:(CCTexture2D* texture, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)
initWithTexture	particle_nodes/CCParticleBatchNode.cpp	/^bool CCParticleBatchNode::initWithTexture(CCTexture2D *tex, unsigned int capacity)$/;"	f	class:CCParticleBatchNode	signature:(CCTexture2D *tex, unsigned int capacity)
initWithTexture	particle_nodes/CCParticleBatchNode.h	/^    bool initWithTexture(CCTexture2D *tex, unsigned int capacity);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCTexture2D *tex, unsigned int capacity)
initWithTexture	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithTexture(CCTexture2D *pTexture)$/;"	f	class:CCSprite	signature:(CCTexture2D *pTexture)
initWithTexture	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithTexture(CCTexture2D *pTexture, const CCRect& rect)$/;"	f	class:CCSprite	signature:(CCTexture2D *pTexture, const CCRect& rect)
initWithTexture	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithTexture(CCTexture2D *pTexture, const CCRect& rect, bool rotated)$/;"	f	class:CCSprite	signature:(CCTexture2D *pTexture, const CCRect& rect, bool rotated)
initWithTexture	sprite_nodes/CCSprite.h	/^    virtual bool initWithTexture(CCTexture2D *pTexture);$/;"	p	class:CCSprite	access:public	signature:(CCTexture2D *pTexture)
initWithTexture	sprite_nodes/CCSprite.h	/^    virtual bool initWithTexture(CCTexture2D *pTexture, const CCRect& rect);$/;"	p	class:CCSprite	access:public	signature:(CCTexture2D *pTexture, const CCRect& rect)
initWithTexture	sprite_nodes/CCSprite.h	/^    virtual bool initWithTexture(CCTexture2D *pTexture, const CCRect& rect, bool rotated);$/;"	p	class:CCSprite	access:public	signature:(CCTexture2D *pTexture, const CCRect& rect, bool rotated)
initWithTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^bool CCSpriteBatchNode::initWithTexture(CCTexture2D *tex, unsigned int capacity)$/;"	f	class:CCSpriteBatchNode	signature:(CCTexture2D *tex, unsigned int capacity)
initWithTexture	sprite_nodes/CCSpriteBatchNode.h	/^    bool initWithTexture(CCTexture2D *tex, unsigned int capacity);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCTexture2D *tex, unsigned int capacity)
initWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^bool CCSpriteFrame::initWithTexture(CCTexture2D* pobTexture, const CCRect& rect)$/;"	f	class:CCSpriteFrame	signature:(CCTexture2D* pobTexture, const CCRect& rect)
initWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^bool CCSpriteFrame::initWithTexture(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame	signature:(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
initWithTexture	sprite_nodes/CCSpriteFrame.h	/^    bool initWithTexture(CCTexture2D* pobTexture, const CCRect& rect);$/;"	p	class:CCSpriteFrame	access:public	signature:(CCTexture2D* pobTexture, const CCRect& rect)
initWithTexture	sprite_nodes/CCSpriteFrame.h	/^    bool initWithTexture(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize);$/;"	p	class:CCSpriteFrame	access:public	signature:(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
initWithTexture	textures/CCTextureAtlas.cpp	/^bool CCTextureAtlas::initWithTexture(CCTexture2D *texture, unsigned int capacity)$/;"	f	class:CCTextureAtlas	signature:(CCTexture2D *texture, unsigned int capacity)
initWithTexture	textures/CCTextureAtlas.h	/^    bool initWithTexture(CCTexture2D *texture, unsigned int capacity);$/;"	p	class:CCTextureAtlas	access:public	signature:(CCTexture2D *texture, unsigned int capacity)
initWithTextureFilename	sprite_nodes/CCSpriteFrame.cpp	/^bool CCSpriteFrame::initWithTextureFilename(const char* filename, const CCRect& rect)$/;"	f	class:CCSpriteFrame	signature:(const char* filename, const CCRect& rect)
initWithTextureFilename	sprite_nodes/CCSpriteFrame.cpp	/^bool CCSpriteFrame::initWithTextureFilename(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame	signature:(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
initWithTextureFilename	sprite_nodes/CCSpriteFrame.h	/^    bool initWithTextureFilename(const char* filename, const CCRect& rect);$/;"	p	class:CCSpriteFrame	access:public	signature:(const char* filename, const CCRect& rect)
initWithTextureFilename	sprite_nodes/CCSpriteFrame.h	/^    bool initWithTextureFilename(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize);$/;"	p	class:CCSpriteFrame	access:public	signature:(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)
initWithTileFile	base_nodes/CCAtlasNode.cpp	/^bool CCAtlasNode::initWithTileFile(const char *tile, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)$/;"	f	class:CCAtlasNode	signature:(const char *tile, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)
initWithTileFile	base_nodes/CCAtlasNode.h	/^    bool initWithTileFile(const char* tile, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender);$/;"	p	class:CCAtlasNode	access:public	signature:(const char* tile, unsigned int tileWidth, unsigned int tileHeight, unsigned int itemsToRender)
initWithTileFile	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^bool CCTileMapAtlas::initWithTileFile(const char *tile, const char *mapFile, int tileWidth, int tileHeight)$/;"	f	class:CCTileMapAtlas	signature:(const char *tile, const char *mapFile, int tileWidth, int tileHeight)
initWithTileFile	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    bool initWithTileFile(const char *tile, const char *mapFile, int tileWidth, int tileHeight);$/;"	p	class:CCTileMapAtlas	access:public	signature:(const char *tile, const char *mapFile, int tileWidth, int tileHeight)
initWithTilesetInfo	tilemap_parallax_nodes/CCTMXLayer.cpp	/^bool CCTMXLayer::initWithTilesetInfo(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXLayer	signature:(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
initWithTilesetInfo	tilemap_parallax_nodes/CCTMXLayer.h	/^    bool initWithTilesetInfo(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo);$/;"	p	class:CCTMXLayer	access:public	signature:(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
initWithTimes	actions/CCActionGrid.cpp	/^bool CCReuseGrid::initWithTimes(int times)$/;"	f	class:CCReuseGrid	signature:(int times)
initWithTimes	actions/CCActionGrid.h	/^    bool initWithTimes(int times);$/;"	p	class:CCReuseGrid	access:public	signature:(int times)
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleExplosion::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleExplosion	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleFire::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFire	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleFireworks::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFireworks	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleFlower::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFlower	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleGalaxy::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleGalaxy	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleMeteor::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleMeteor	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleRain::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleRain	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleSmoke::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSmoke	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleSnow::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSnow	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleSpiral::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSpiral	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleSun::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSun	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleExplosion	access:public	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleFire	access:public	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleFireworks	access:public	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleFlower	access:public	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleGalaxy	access:public	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleMeteor	access:public	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleRain	access:public	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSmoke	access:public	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSnow	access:public	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSpiral	access:public	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleExamples.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSun	access:public	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSystem	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleSystem.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSystem	access:public	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleSystemQuad.cpp	/^bool CCParticleSystemQuad::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSystemQuad	signature:(unsigned int numberOfParticles)
initWithTotalParticles	particle_nodes/CCParticleSystemQuad.h	/^    virtual bool initWithTotalParticles(unsigned int numberOfParticles);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(unsigned int numberOfParticles)
initWithTwoActions	actions/CCActionInterval.cpp	/^bool CCSequence::initWithTwoActions(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)$/;"	f	class:CCSequence	signature:(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)
initWithTwoActions	actions/CCActionInterval.cpp	/^bool CCSpawn:: initWithTwoActions(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)$/;"	f	class:CCSpawn	signature:(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)
initWithTwoActions	actions/CCActionInterval.h	/^    bool initWithTwoActions(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2);$/;"	p	class:CCSpawn	access:public	signature:(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)
initWithTwoActions	actions/CCActionInterval.h	/^    bool initWithTwoActions(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo);$/;"	p	class:CCSequence	access:public	signature:(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)
initWithVertexShaderByteArray	shaders/CCGLProgram.cpp	/^bool CCGLProgram::initWithVertexShaderByteArray(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)$/;"	f	class:CCGLProgram	signature:(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)
initWithVertexShaderByteArray	shaders/CCGLProgram.h	/^    bool initWithVertexShaderByteArray(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray);$/;"	p	class:CCGLProgram	access:public	signature:(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)
initWithVertexShaderFilename	shaders/CCGLProgram.cpp	/^bool CCGLProgram::initWithVertexShaderFilename(const char* vShaderFilename, const char* fShaderFilename)$/;"	f	class:CCGLProgram	signature:(const char* vShaderFilename, const char* fShaderFilename)
initWithVertexShaderFilename	shaders/CCGLProgram.h	/^    bool initWithVertexShaderFilename(const char* vShaderFilename, const char* fShaderFilename);$/;"	p	class:CCGLProgram	access:public	signature:(const char* vShaderFilename, const char* fShaderFilename)
initWithWidthAndHeight	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::initWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat)$/;"	f	class:CCRenderTexture	signature:(int w, int h, CCTexture2DPixelFormat eFormat)
initWithWidthAndHeight	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::initWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)$/;"	f	class:CCRenderTexture	signature:(int w, int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)
initWithWidthAndHeight	misc_nodes/CCRenderTexture.h	/^    bool initWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat);$/;"	p	class:CCRenderTexture	access:public	signature:(int w, int h, CCTexture2DPixelFormat eFormat)
initWithWidthAndHeight	misc_nodes/CCRenderTexture.h	/^    bool initWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat);$/;"	p	class:CCRenderTexture	access:public	signature:(int w, int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)
initWithXML	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^bool CCTMXTiledMap::initWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXTiledMap	signature:(const char* tmxString, const char* resourcePath)
initWithXML	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    bool initWithXML(const char* tmxString, const char* resourcePath);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char* tmxString, const char* resourcePath)
initWithXML	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^bool CCTMXMapInfo::initWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXMapInfo	signature:(const char* tmxString, const char* resourcePath)
initWithXML	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool initWithXML(const char* tmxString, const char* resourcePath);$/;"	p	class:CCTMXMapInfo	access:public	signature:(const char* tmxString, const char* resourcePath)
initXMLFilePath	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::initXMLFilePath()$/;"	f	class:CCUserDefault	signature:()
initXMLFilePath	support/user_default/CCUserDefault.h	/^    static void initXMLFilePath();$/;"	p	class:CCUserDefault	access:private	signature:()
initXMLFilePath	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::initXMLFilePath()$/;"	f	class:CCUserDefault	signature:()
initialized	kazmath/src/GL/matrix.c	/^static unsigned char initialized = 0;$/;"	v	file:
insertChild	base_nodes/CCNode.cpp	/^void CCNode::insertChild(CCNode* child, int z)$/;"	f	class:CCNode	signature:(CCNode* child, int z)
insertChild	base_nodes/CCNode.h	/^    void insertChild(CCNode* child, int z);$/;"	p	class:CCNode	access:private	signature:(CCNode* child, int z)
insertChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::insertChild(CCParticleSystem* pSystem, unsigned int index)$/;"	f	class:CCParticleBatchNode	signature:(CCParticleSystem* pSystem, unsigned int index)
insertChild	particle_nodes/CCParticleBatchNode.h	/^    void insertChild(CCParticleSystem* pSystem, unsigned int index);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCParticleSystem* pSystem, unsigned int index)
insertChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::insertChild(CCSprite *pSprite, unsigned int uIndex)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *pSprite, unsigned int uIndex)
insertChild	sprite_nodes/CCSpriteBatchNode.h	/^    void insertChild(CCSprite *child, unsigned int index);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite *child, unsigned int index)
insertControlPoint	actions/CCActionCatmullRom.cpp	/^void CCPointArray::insertControlPoint(CCPoint &controlPoint, unsigned int index)$/;"	f	class:CCPointArray	signature:(CCPoint &controlPoint, unsigned int index)
insertControlPoint	actions/CCActionCatmullRom.h	/^    void insertControlPoint(CCPoint &controlPoint, unsigned int index);$/;"	p	class:CCPointArray	access:public	signature:(CCPoint &controlPoint, unsigned int index)
insertObject	cocoa/CCArray.cpp	/^void CCArray::insertObject(CCObject* object, unsigned int index)$/;"	f	class:CCArray	signature:(CCObject* object, unsigned int index)
insertObject	cocoa/CCArray.h	/^    void insertObject(CCObject* object, unsigned int index);$/;"	p	class:CCArray	access:public	signature:(CCObject* object, unsigned int index)
insertQuad	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::insertQuad(ccV3F_C4B_T2F_Quad *quad, unsigned int index)$/;"	f	class:CCTextureAtlas	signature:(ccV3F_C4B_T2F_Quad *quad, unsigned int index)
insertQuad	textures/CCTextureAtlas.h	/^    void insertQuad(ccV3F_C4B_T2F_Quad* quad, unsigned int index);$/;"	p	class:CCTextureAtlas	access:public	signature:(ccV3F_C4B_T2F_Quad* quad, unsigned int index)
insertQuadFromIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::insertQuadFromIndex(unsigned int oldIndex, unsigned int newIndex)$/;"	f	class:CCTextureAtlas	signature:(unsigned int oldIndex, unsigned int newIndex)
insertQuadFromIndex	textures/CCTextureAtlas.h	/^    void insertQuadFromIndex(unsigned int fromIndex, unsigned int newIndex);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int fromIndex, unsigned int newIndex)
insertQuadFromSprite	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::insertQuadFromSprite(CCSprite *sprite, unsigned int index)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *sprite, unsigned int index)
insertQuadFromSprite	sprite_nodes/CCSpriteBatchNode.h	/^    void insertQuadFromSprite(CCSprite *sprite, unsigned int index);$/;"	p	class:CCSpriteBatchNode	access:protected	signature:(CCSprite *sprite, unsigned int index)
insertQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::insertQuads(ccV3F_C4B_T2F_Quad* quads, unsigned int index, unsigned int amount)$/;"	f	class:CCTextureAtlas	signature:(ccV3F_C4B_T2F_Quad* quads, unsigned int index, unsigned int amount)
insertQuads	textures/CCTextureAtlas.h	/^    void insertQuads(ccV3F_C4B_T2F_Quad* quads, unsigned int index, unsigned int amount);$/;"	p	class:CCTextureAtlas	access:public	signature:(ccV3F_C4B_T2F_Quad* quads, unsigned int index, unsigned int amount)
insertText	text_input_node/CCIMEDelegate.h	/^    virtual void insertText(const char * text, int len) {CC_UNUSED_PARAM(text);CC_UNUSED_PARAM(len);}$/;"	f	class:CCIMEDelegate	access:protected	signature:(const char * text, int len)
insertText	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::insertText(const char * text, int len)$/;"	f	class:CCTextFieldTTF	signature:(const char * text, int len)
insertText	text_input_node/CCTextFieldTTF.h	/^    virtual void insertText(const char * text, int len);$/;"	p	class:CCTextFieldTTF	access:protected	signature:(const char * text, int len)
insertTileForGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite * CCTMXLayer::insertTileForGID(unsigned int gid, const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(unsigned int gid, const CCPoint& pos)
insertTileForGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite* insertTileForGID(unsigned int gid, const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(unsigned int gid, const CCPoint& pos)
intValue	cocoa/CCString.cpp	/^int CCString::intValue() const$/;"	f	class:CCString	signature:() const
intValue	cocoa/CCString.h	/^    int intValue() const;$/;"	p	class:CCString	access:public	signature:() const
internalFormat	textures/CCTexturePVR.h	/^	GLenum internalFormat;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
internalInit	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::internalInit(const char* tmxFileName, const char* resourcePath)$/;"	f	class:CCTMXMapInfo	signature:(const char* tmxFileName, const char* resourcePath)
internalInit	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    void internalInit(const char* tmxFileName, const char* resourcePath);$/;"	p	class:CCTMXMapInfo	access:private	signature:(const char* tmxFileName, const char* resourcePath)
internal_fa	support/zip_support/unzip.h	/^    uLong internal_fa;          \/* internal file attributes        2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
internal_fa	support/zip_support/unzip.h	/^    uLong internal_fa;          \/* internal file attributes        2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
intersectsRect	cocoa/CCGeometry.cpp	/^bool CCRect::intersectsRect(const CCRect& rect) const$/;"	f	class:CCRect	signature:(const CCRect& rect) const
intersectsRect	cocoa/CCGeometry.h	/^    bool intersectsRect(const CCRect& rect) const;$/;"	p	class:CCRect	access:public	signature:(const CCRect& rect) const
is64bitOpenFunction	support/zip_support/unzip.cpp	/^    int is64bitOpenFunction;$/;"	m	struct:cocos2d::__anon44	file:	access:public
isAbsolutePath	platform/CCFileUtils.cpp	/^bool CCFileUtils::isAbsolutePath(const std::string& strPath)$/;"	f	class:CCFileUtils	signature:(const std::string& strPath)
isAbsolutePath	platform/CCFileUtils.h	/^    virtual bool isAbsolutePath(const std::string& strPath);$/;"	p	class:CCFileUtils	access:public	signature:(const std::string& strPath)
isAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::isAccelerometerEnabled()$/;"	f	class:CCLayer	signature:()
isAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isAccelerometerEnabled();$/;"	p	class:CCLayer	access:public	signature:()
isActive	effects/CCGrid.h	/^    inline bool isActive(void) { return m_bActive; }$/;"	f	class:CCGridBase	access:public	signature:(void)
isActive	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::isActive()$/;"	f	class:CCParticleSystem	signature:()
isActive	particle_nodes/CCParticleSystem.h	/^    virtual bool isActive();$/;"	p	class:CCParticleSystem	access:public	signature:()
isAutoDraw	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::isAutoDraw() const$/;"	f	class:CCRenderTexture	signature:() const
isAutoDraw	misc_nodes/CCRenderTexture.h	/^    bool isAutoDraw() const;$/;"	p	class:CCRenderTexture	access:public	signature:() const
isAutoRemoveOnFinish	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::isAutoRemoveOnFinish()$/;"	f	class:CCParticleSystem	signature:()
isAutoRemoveOnFinish	particle_nodes/CCParticleSystem.h	/^    virtual bool isAutoRemoveOnFinish();$/;"	p	class:CCParticleSystem	access:public	signature:()
isBlendAdditive	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::isBlendAdditive()$/;"	f	class:CCParticleSystem	signature:()
isBlendAdditive	particle_nodes/CCParticleSystem.h	/^    virtual bool isBlendAdditive();$/;"	p	class:CCParticleSystem	access:public	signature:()
isBoundarySet	actions/CCAction.h	/^    inline bool isBoundarySet(void) { return m_bBoundarySet; }$/;"	f	class:CCFollow	access:public	signature:(void)
isCascadeColorEnabled	base_nodes/CCNode.cpp	/^bool CCNodeRGBA::isCascadeColorEnabled(void)$/;"	f	class:CCNodeRGBA	signature:(void)
isCascadeColorEnabled	base_nodes/CCNode.h	/^    virtual bool isCascadeColorEnabled();$/;"	p	class:CCNodeRGBA	access:public	signature:()
isCascadeColorEnabled	include/CCProtocols.h	/^    virtual bool isCascadeColorEnabled(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
isCascadeColorEnabled	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::isCascadeColorEnabled()$/;"	f	class:CCLabelBMFont	signature:()
isCascadeColorEnabled	label_nodes/CCLabelBMFont.h	/^    virtual bool isCascadeColorEnabled();$/;"	p	class:CCLabelBMFont	access:public	signature:()
isCascadeColorEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerRGBA::isCascadeColorEnabled()$/;"	f	class:CCLayerRGBA	signature:()
isCascadeColorEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isCascadeColorEnabled();$/;"	p	class:CCLayerRGBA	access:public	signature:()
isCascadeOpacityEnabled	base_nodes/CCNode.cpp	/^bool CCNodeRGBA::isCascadeOpacityEnabled(void)$/;"	f	class:CCNodeRGBA	signature:(void)
isCascadeOpacityEnabled	base_nodes/CCNode.h	/^    virtual bool isCascadeOpacityEnabled();$/;"	p	class:CCNodeRGBA	access:public	signature:()
isCascadeOpacityEnabled	include/CCProtocols.h	/^    virtual bool isCascadeOpacityEnabled(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
isCascadeOpacityEnabled	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::isCascadeOpacityEnabled()$/;"	f	class:CCLabelBMFont	signature:()
isCascadeOpacityEnabled	label_nodes/CCLabelBMFont.h	/^    virtual bool isCascadeOpacityEnabled();$/;"	p	class:CCLabelBMFont	access:public	signature:()
isCascadeOpacityEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerRGBA::isCascadeOpacityEnabled()$/;"	f	class:CCLayerRGBA	signature:()
isCascadeOpacityEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isCascadeOpacityEnabled();$/;"	p	class:CCLayerRGBA	access:public	signature:()
isCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerGradient::isCompressedInterpolation()$/;"	f	class:CCLayerGradient	signature:()
isCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isCompressedInterpolation();$/;"	p	class:CCLayerGradient	access:public	signature:()
isDirty	CCCamera.h	/^    inline bool isDirty(void) { return m_bDirty; }$/;"	f	class:CCCamera	access:public	signature:(void)
isDirty	sprite_nodes/CCSprite.h	/^    inline virtual bool isDirty(void) { return m_bDirty; }$/;"	f	class:CCSprite	access:public	signature:(void)
isDispatchEvents	touch_dispatcher/CCTouchDispatcher.cpp	/^bool CCTouchDispatcher::isDispatchEvents(void)$/;"	f	class:CCTouchDispatcher	signature:(void)
isDispatchEvents	touch_dispatcher/CCTouchDispatcher.h	/^    bool isDispatchEvents(void);$/;"	p	class:CCTouchDispatcher	access:public	signature:(void)
isDisplayStats	CCDirector.h	/^    inline bool isDisplayStats(void) { return m_bDisplayStats; }$/;"	f	class:CCDirector	access:public	signature:(void)
isDone	actions/CCAction.cpp	/^bool CCAction::isDone()$/;"	f	class:CCAction	signature:()
isDone	actions/CCAction.cpp	/^bool CCFollow::isDone()$/;"	f	class:CCFollow	signature:()
isDone	actions/CCAction.cpp	/^bool CCSpeed::isDone()$/;"	f	class:CCSpeed	signature:()
isDone	actions/CCAction.h	/^    virtual bool isDone(void);$/;"	p	class:CCAction	access:public	signature:(void)
isDone	actions/CCAction.h	/^    virtual bool isDone(void);$/;"	p	class:CCFollow	access:public	signature:(void)
isDone	actions/CCAction.h	/^    virtual bool isDone(void);$/;"	p	class:CCSpeed	access:public	signature:(void)
isDone	actions/CCActionInstant.cpp	/^bool CCActionInstant::isDone() {$/;"	f	class:CCActionInstant	signature:()
isDone	actions/CCActionInstant.h	/^    virtual bool isDone(void);$/;"	p	class:CCActionInstant	access:public	signature:(void)
isDone	actions/CCActionInterval.cpp	/^bool CCActionInterval::isDone(void)$/;"	f	class:CCActionInterval	signature:(void)
isDone	actions/CCActionInterval.cpp	/^bool CCRepeat::isDone(void)$/;"	f	class:CCRepeat	signature:(void)
isDone	actions/CCActionInterval.cpp	/^bool CCRepeatForever::isDone()$/;"	f	class:CCRepeatForever	signature:()
isDone	actions/CCActionInterval.h	/^    virtual bool isDone(void);$/;"	p	class:CCActionInterval	access:public	signature:(void)
isDone	actions/CCActionInterval.h	/^    virtual bool isDone(void);$/;"	p	class:CCRepeat	access:public	signature:(void)
isDone	actions/CCActionInterval.h	/^    virtual bool isDone(void);$/;"	p	class:CCRepeatForever	access:public	signature:(void)
isEnabled	menu_nodes/CCMenu.h	/^    virtual bool isEnabled() { return m_bEnabled; }$/;"	f	class:CCMenu	access:public	signature:()
isEnabled	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItem::isEnabled()$/;"	f	class:CCMenuItem	signature:()
isEnabled	menu_nodes/CCMenuItem.h	/^    virtual bool isEnabled();$/;"	p	class:CCMenuItem	access:public	signature:()
isEqual	cocoa/CCObject.cpp	/^bool CCObject::isEqual(const CCObject *pObject)$/;"	f	class:CCObject	signature:(const CCObject *pObject)
isEqual	cocoa/CCObject.h	/^    virtual bool isEqual(const CCObject* pObject);$/;"	p	class:CCObject	access:public	signature:(const CCObject* pObject)
isEqual	cocoa/CCString.cpp	/^bool CCString::isEqual(const CCObject* pObject)$/;"	f	class:CCString	signature:(const CCObject* pObject)
isEqual	cocoa/CCString.h	/^    virtual bool isEqual(const CCObject* pObject);$/;"	p	class:CCString	access:public	signature:(const CCObject* pObject)
isEqualToArray	cocoa/CCArray.cpp	/^bool CCArray::isEqualToArray(CCArray* otherArray)$/;"	f	class:CCArray	signature:(CCArray* otherArray)
isEqualToArray	cocoa/CCArray.h	/^    bool isEqualToArray(CCArray* pOtherArray);$/;"	p	class:CCArray	access:public	signature:(CCArray* pOtherArray)
isFastMode	misc_nodes/CCMotionStreak.h	/^    inline bool isFastMode() { return m_bFastMode; }$/;"	f	class:CCMotionStreak	access:public	signature:()
isFileExist	platform/CCFileUtils.h	/^    virtual bool isFileExist(const std::string& strFilePath) = 0;$/;"	p	class:CCFileUtils	access:public	signature:(const std::string& strFilePath)
isFlipX	sprite_nodes/CCSprite.cpp	/^bool CCSprite::isFlipX(void)$/;"	f	class:CCSprite	signature:(void)
isFlipX	sprite_nodes/CCSprite.h	/^    bool isFlipX(void);$/;"	p	class:CCSprite	access:public	signature:(void)
isFlipY	sprite_nodes/CCSprite.cpp	/^bool CCSprite::isFlipY(void)$/;"	f	class:CCSprite	signature:(void)
isFlipY	sprite_nodes/CCSprite.h	/^    bool isFlipY(void);$/;"	p	class:CCSprite	access:public	signature:(void)
isForcePremultipliedAlpha	textures/CCTexturePVR.h	/^    inline bool isForcePremultipliedAlpha() { return m_bForcePremultipliedAlpha; }$/;"	f	class:CCTexturePVR	access:public	signature:()
isFrameDisplayed	sprite_nodes/CCSprite.cpp	/^bool CCSprite::isFrameDisplayed(CCSpriteFrame *pFrame)$/;"	f	class:CCSprite	signature:(CCSpriteFrame *pFrame)
isFrameDisplayed	sprite_nodes/CCSprite.h	/^    virtual bool isFrameDisplayed(CCSpriteFrame *pFrame);$/;"	p	class:CCSprite	access:public	signature:(CCSpriteFrame *pFrame)
isFull	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::isFull()$/;"	f	class:CCParticleSystem	signature:()
isFull	particle_nodes/CCParticleSystem.h	/^    bool isFull();$/;"	p	class:CCParticleSystem	access:public	signature:()
isIgnoreAnchorPointForPosition	base_nodes/CCNode.cpp	/^bool CCNode::isIgnoreAnchorPointForPosition()$/;"	f	class:CCNode	signature:()
isIgnoreAnchorPointForPosition	base_nodes/CCNode.h	/^    virtual bool isIgnoreAnchorPointForPosition();$/;"	p	class:CCNode	access:public	signature:()
isInverted	misc_nodes/CCClippingNode.cpp	/^bool CCClippingNode::isInverted() const$/;"	f	class:CCClippingNode	signature:() const
isInverted	misc_nodes/CCClippingNode.h	/^    bool isInverted() const;$/;"	p	class:CCClippingNode	access:public	signature:() const
isKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::isKeypadEnabled()$/;"	f	class:CCLayer	signature:()
isKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isKeypadEnabled();$/;"	p	class:CCLayer	access:public	signature:()
isMarkedForDeletion	script_support/CCScriptSupport.h	/^    bool isMarkedForDeletion(void) {$/;"	f	class:CCSchedulerScriptHandlerEntry	access:public	signature:(void)
isMultiTouches	script_support/CCScriptSupport.h	/^    bool isMultiTouches(void) {$/;"	f	class:CCTouchScriptHandlerEntry	access:public	signature:(void)
isNextDeltaTimeZero	CCDirector.h	/^    inline bool isNextDeltaTimeZero(void) { return m_bNextDeltaTimeZero; }$/;"	f	class:CCDirector	access:public	signature:(void)
isOpacityModifyRGB	base_nodes/CCAtlasNode.cpp	/^bool CCAtlasNode::isOpacityModifyRGB()$/;"	f	class:CCAtlasNode	signature:()
isOpacityModifyRGB	base_nodes/CCAtlasNode.h	/^    virtual bool isOpacityModifyRGB();$/;"	p	class:CCAtlasNode	access:public	signature:()
isOpacityModifyRGB	base_nodes/CCNode.h	/^    virtual bool isOpacityModifyRGB() { return false; };$/;"	f	class:CCNodeRGBA	access:public	signature:()
isOpacityModifyRGB	include/CCProtocols.h	/^    virtual bool isOpacityModifyRGB(void) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(void)
isOpacityModifyRGB	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::isOpacityModifyRGB()$/;"	f	class:CCLabelBMFont	signature:()
isOpacityModifyRGB	label_nodes/CCLabelBMFont.h	/^    virtual bool isOpacityModifyRGB();$/;"	p	class:CCLabelBMFont	access:public	signature:()
isOpacityModifyRGB	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isOpacityModifyRGB() { return false; }$/;"	f	class:CCLayerRGBA	access:public	signature:()
isOpacityModifyRGB	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCLayerColor	access:public	signature:(void)
isOpacityModifyRGB	menu_nodes/CCMenu.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCMenu	access:public	signature:(void)
isOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCMenuItem	access:public	signature:(void)
isOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCMenuItemSprite	access:public	signature:(void)
isOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCMenuItemToggle	access:public	signature:(void)
isOpacityModifyRGB	misc_nodes/CCMotionStreak.cpp	/^bool CCMotionStreak::isOpacityModifyRGB(void)$/;"	f	class:CCMotionStreak	signature:(void)
isOpacityModifyRGB	misc_nodes/CCMotionStreak.h	/^    virtual bool isOpacityModifyRGB(void);$/;"	p	class:CCMotionStreak	access:public	signature:(void)
isOpacityModifyRGB	misc_nodes/CCProgressTimer.cpp	/^bool CCProgressTimer::isOpacityModifyRGB(void)$/;"	f	class:CCProgressTimer	signature:(void)
isOpacityModifyRGB	misc_nodes/CCProgressTimer.h	/^    virtual bool isOpacityModifyRGB(void);$/;"	p	class:CCProgressTimer	access:public	signature:(void)
isOpacityModifyRGB	sprite_nodes/CCSprite.cpp	/^bool CCSprite::isOpacityModifyRGB(void)$/;"	f	class:CCSprite	signature:(void)
isOpacityModifyRGB	sprite_nodes/CCSprite.h	/^    virtual bool isOpacityModifyRGB(void);$/;"	p	class:CCSprite	access:public	signature:(void)
isOpenGLReady	platform/CCEGLViewProtocol.h	/^    virtual bool    isOpenGLReady() = 0;$/;"	p	class:CCEGLViewProtocol	access:public	signature:()
isPaused	CCDirector.h	/^    inline bool isPaused(void) { return m_bPaused; }$/;"	f	class:CCDirector	access:public	signature:(void)
isPaused	script_support/CCScriptSupport.h	/^    bool isPaused(void) {$/;"	f	class:CCSchedulerScriptHandlerEntry	access:public	signature:(void)
isPopupNotify	platform/CCFileUtils.cpp	/^bool CCFileUtils::isPopupNotify()$/;"	f	class:CCFileUtils	signature:()
isPopupNotify	platform/CCFileUtils.h	/^    virtual bool isPopupNotify();$/;"	p	class:CCFileUtils	access:public	signature:()
isPremultipliedAlpha	platform/CCImage.h	/^    bool isPremultipliedAlpha()         { return m_bPreMulti; }$/;"	f	class:CCImage	access:public	signature:()
isReloading	textures/CCTextureCache.cpp	/^bool VolatileTexture::isReloading = false;$/;"	m	class:VolatileTexture	file:
isReloading	textures/CCTextureCache.h	/^    static bool isReloading;$/;"	m	class:VolatileTexture	access:public
isRetainName	textures/CCTexturePVR.h	/^    inline bool isRetainName() { return m_bRetainName; }$/;"	f	class:CCTexturePVR	access:public	signature:()
isReverseDirection	misc_nodes/CCProgressTimer.h	/^    inline bool isReverseDirection() { return m_bReverseDirection; };$/;"	f	class:CCProgressTimer	access:public	signature:()
isRotated	sprite_nodes/CCSpriteFrame.h	/^    inline bool isRotated(void) { return m_bRotated; }$/;"	f	class:CCSpriteFrame	access:public	signature:(void)
isRunning	base_nodes/CCNode.cpp	/^bool CCNode::isRunning()$/;"	f	class:CCNode	signature:()
isRunning	base_nodes/CCNode.h	/^    virtual bool isRunning();$/;"	p	class:CCNode	access:public	signature:()
isScheduled	base_nodes/CCNode.h	/^    bool isScheduled(SEL_SCHEDULE selector);$/;"	p	class:CCNode	access:public	signature:(SEL_SCHEDULE selector)
isSelected	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItem::isSelected()$/;"	f	class:CCMenuItem	signature:()
isSelected	menu_nodes/CCMenuItem.h	/^    virtual bool isSelected();$/;"	p	class:CCMenuItem	access:public	signature:()
isSendCleanupToScene	CCDirector.h	/^    inline bool isSendCleanupToScene(void) { return m_bSendCleanupToScene; }$/;"	f	class:CCDirector	access:public	signature:(void)
isSingleReference	cocoa/CCObject.cpp	/^bool CCObject::isSingleReference(void)$/;"	f	class:CCObject	signature:(void)
isSingleReference	cocoa/CCObject.h	/^    bool isSingleReference(void);$/;"	p	class:CCObject	access:public	signature:(void)
isStartingPositionInitialized	misc_nodes/CCMotionStreak.h	/^    inline bool isStartingPositionInitialized() { return m_bStartingPositionInitialized; }$/;"	f	class:CCMotionStreak	access:public	signature:()
isSwallowsTouches	touch_dispatcher/CCTouchHandler.cpp	/^bool CCTargetedTouchHandler::isSwallowsTouches(void)$/;"	f	class:CCTargetedTouchHandler	signature:(void)
isSwallowsTouches	touch_dispatcher/CCTouchHandler.h	/^    bool isSwallowsTouches(void);$/;"	p	class:CCTargetedTouchHandler	access:public	signature:(void)
isTargetPaused	CCScheduler.cpp	/^bool CCScheduler::isTargetPaused(CCObject *pTarget)$/;"	f	class:CCScheduler	signature:(CCObject *pTarget)
isTargetPaused	CCScheduler.h	/^    bool isTargetPaused(CCObject *pTarget);$/;"	p	class:CCScheduler	access:public	signature:(CCObject *pTarget)
isTextureFlipped	effects/CCGrid.h	/^    inline bool isTextureFlipped(void) { return m_bIsTextureFlipped; }$/;"	f	class:CCGridBase	access:public	signature:(void)
isTextureRectRotated	sprite_nodes/CCSprite.h	/^    inline bool isTextureRectRotated(void) { return m_bRectRotated; }$/;"	f	class:CCSprite	access:public	signature:(void)
isTouchEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::isTouchEnabled()$/;"	f	class:CCLayer	signature:()
isTouchEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isTouchEnabled();$/;"	p	class:CCLayer	access:public	signature:()
isVisible	base_nodes/CCNode.cpp	/^bool CCNode::isVisible()$/;"	f	class:CCNode	signature:()
isVisible	base_nodes/CCNode.h	/^    virtual bool isVisible();$/;"	p	class:CCNode	access:public	signature:()
isXMLFileExist	support/user_default/CCUserDefault.cpp	/^bool CCUserDefault::isXMLFileExist()$/;"	f	class:CCUserDefault	signature:()
isXMLFileExist	support/user_default/CCUserDefault.h	/^    static bool isXMLFileExist();$/;"	p	class:CCUserDefault	access:private	signature:()
isXMLFileExist	support/user_default/CCUserDefaultAndroid.cpp	/^bool CCUserDefault::isXMLFileExist()$/;"	f	class:CCUserDefault	signature:()
isZip64	support/zip_support/unzip.cpp	/^    int isZip64;$/;"	m	struct:cocos2d::__anon44	file:	access:public
isspace_unicode	support/ccUTF8.cpp	/^bool isspace_unicode(unsigned short ch)$/;"	f	signature:(unsigned short ch)
isspace_unicode	support/ccUTF8.h	/^CC_DLL bool isspace_unicode(unsigned short ch);$/;"	p	signature:(unsigned short ch)
itemForTouch	menu_nodes/CCMenu.cpp	/^CCMenuItem* CCMenu::itemForTouch(CCTouch *touch)$/;"	f	class:CCMenu	signature:(CCTouch *touch)
itemForTouch	menu_nodes/CCMenu.h	/^    CCMenuItem* itemForTouch(CCTouch * touch);$/;"	p	class:CCMenu	access:protected	signature:(CCTouch * touch)
item_count	kazmath/include/kazmath/GL/mat4stack.h	/^    int item_count; \/\/The number of items$/;"	m	struct:km_mat4_stack	access:public
kAlignBottom	platform/CCImage.h	/^        kAlignBottom        = 0x23, \/\/\/< Horizontal center and vertical bottom.$/;"	e	enum:CCImage::__anon29
kAlignBottomLeft	platform/CCImage.h	/^        kAlignBottomLeft    = 0x21, \/\/\/< Horizontal left and vertical bottom.$/;"	e	enum:CCImage::__anon29
kAlignBottomRight	platform/CCImage.h	/^        kAlignBottomRight   = 0x22, \/\/\/< Horizontal right and vertical bottom.$/;"	e	enum:CCImage::__anon29
kAlignCenter	platform/CCImage.h	/^        kAlignCenter        = 0x33, \/\/\/< Horizontal center and vertical center.$/;"	e	enum:CCImage::__anon29
kAlignLeft	platform/CCImage.h	/^        kAlignLeft          = 0x31, \/\/\/< Horizontal left and vertical center.$/;"	e	enum:CCImage::__anon29
kAlignRight	platform/CCImage.h	/^        kAlignRight         = 0x32, \/\/\/< Horizontal right and vertical center.$/;"	e	enum:CCImage::__anon29
kAlignTop	platform/CCImage.h	/^        kAlignTop           = 0x13, \/\/\/< Horizontal center and vertical top.$/;"	e	enum:CCImage::__anon29
kAlignTopLeft	platform/CCImage.h	/^        kAlignTopLeft       = 0x11, \/\/\/< Horizontal left and vertical top.$/;"	e	enum:CCImage::__anon29
kAlignTopRight	platform/CCImage.h	/^        kAlignTopRight      = 0x12, \/\/\/< Horizontal right and vertical top.$/;"	e	enum:CCImage::__anon29
kCCActionTagInvalid	actions/CCAction.h	/^    kCCActionTagInvalid = -1,$/;"	e	enum:__anon1
kCCAttributeNameColor	shaders/CCGLProgram.h	85;"	d
kCCAttributeNamePosition	shaders/CCGLProgram.h	86;"	d
kCCAttributeNameTexCoord	shaders/CCGLProgram.h	87;"	d
kCCBlendFuncDisable	include/ccTypes.h	/^static const ccBlendFunc kCCBlendFuncDisable = {GL_ONE, GL_ZERO};$/;"	v
kCCDictInt	cocoa/CCDictionary.h	/^        kCCDictInt$/;"	e	enum:CCDictionary::CCDictType
kCCDictStr	cocoa/CCDictionary.h	/^        kCCDictStr,$/;"	e	enum:CCDictionary::CCDictType
kCCDictUnknown	cocoa/CCDictionary.h	/^        kCCDictUnknown = 0,$/;"	e	enum:CCDictionary::CCDictType
kCCDirectorProjection2D	CCDirector.h	/^    kCCDirectorProjection2D,$/;"	e	enum:__anon5
kCCDirectorProjection3D	CCDirector.h	/^    kCCDirectorProjection3D,$/;"	e	enum:__anon5
kCCDirectorProjectionCustom	CCDirector.h	/^    kCCDirectorProjectionCustom,$/;"	e	enum:__anon5
kCCDirectorProjectionDefault	CCDirector.h	/^    kCCDirectorProjectionDefault = kCCDirectorProjection3D,$/;"	e	enum:__anon5
kCCFlipedAll	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    kCCFlipedAll                    = (kCCTMXTileHorizontalFlag|kCCTMXTileVerticalFlag|kCCTMXTileDiagonalFlag),$/;"	e	enum:ccTMXTileFlags_
kCCFlippedMask	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    kCCFlippedMask                    = ~(kCCFlipedAll)$/;"	e	enum:ccTMXTileFlags_
kCCImageFormatJPEG	misc_nodes/CCRenderTexture.h	/^    kCCImageFormatJPEG      = 0,$/;"	e	enum:eImageFormat
kCCImageFormatPNG	misc_nodes/CCRenderTexture.h	/^    kCCImageFormatPNG       = 1,$/;"	e	enum:eImageFormat
kCCItemSize	menu_nodes/CCMenuItem.h	40;"	d
kCCLabelAutomaticWidth	label_nodes/CCLabelBMFont.h	/^    kCCLabelAutomaticWidth = -1,$/;"	e	enum:__anon10
kCCMaxActiveTexture	shaders/ccGLStateCache.cpp	46;"	d	file:
kCCMenuHandlerPriority	menu_nodes/CCMenu.h	/^    kCCMenuHandlerPriority = -128,$/;"	e	enum:__anon16
kCCMenuStateTrackingTouch	menu_nodes/CCMenu.h	/^    kCCMenuStateTrackingTouch$/;"	e	enum:__anon15
kCCMenuStateWaiting	menu_nodes/CCMenu.h	/^    kCCMenuStateWaiting,$/;"	e	enum:__anon15
kCCNodeOnCleanup	base_nodes/CCNode.h	/^    kCCNodeOnCleanup$/;"	e	enum:__anon4
kCCNodeOnEnter	base_nodes/CCNode.h	/^    kCCNodeOnEnter,$/;"	e	enum:__anon4
kCCNodeOnEnterTransitionDidFinish	base_nodes/CCNode.h	/^    kCCNodeOnEnterTransitionDidFinish,$/;"	e	enum:__anon4
kCCNodeOnExit	base_nodes/CCNode.h	/^    kCCNodeOnExit,$/;"	e	enum:__anon4
kCCNodeOnExitTransitionDidStart	base_nodes/CCNode.h	/^    kCCNodeOnExitTransitionDidStart,$/;"	e	enum:__anon4
kCCNodeTagInvalid	base_nodes/CCNode.h	/^    kCCNodeTagInvalid = -1,$/;"	e	enum:__anon3
kCCParticleDefaultCapacity	particle_nodes/CCParticleBatchNode.h	46;"	d
kCCParticleDurationInfinity	particle_nodes/CCParticleSystem.h	/^    kCCParticleDurationInfinity = -1,$/;"	e	enum:__anon18
kCCParticleModeGravity	particle_nodes/CCParticleSystem.h	/^    kCCParticleModeGravity,$/;"	e	enum:__anon19
kCCParticleModeRadius	particle_nodes/CCParticleSystem.h	/^    kCCParticleModeRadius,    $/;"	e	enum:__anon19
kCCParticleStartRadiusEqualToEndRadius	particle_nodes/CCParticleSystem.h	/^    kCCParticleStartRadiusEqualToEndRadius = -1,$/;"	e	enum:__anon18
kCCParticleStartSizeEqualToEndSize	particle_nodes/CCParticleSystem.h	/^    kCCParticleStartSizeEqualToEndSize = -1,$/;"	e	enum:__anon18
kCCPointEpsilon	support/CCPointExtension.cpp	33;"	d	file:
kCCPositionTypeFree	particle_nodes/CCParticleSystem.h	/^    kCCPositionTypeFree,$/;"	e	enum:__anon20
kCCPositionTypeGrouped	particle_nodes/CCParticleSystem.h	/^    kCCPositionTypeGrouped,$/;"	e	enum:__anon20
kCCPositionTypeRelative	particle_nodes/CCParticleSystem.h	/^    kCCPositionTypeRelative,$/;"	e	enum:__anon20
kCCPriorityNonSystemMin	CCScheduler.h	44;"	d
kCCPrioritySystem	CCScheduler.h	41;"	d
kCCProfilerCategoryBatchSprite	support/CCProfiling.cpp	/^bool kCCProfilerCategoryBatchSprite = false;$/;"	v
kCCProfilerCategoryParticles	support/CCProfiling.cpp	/^bool kCCProfilerCategoryParticles = false;$/;"	v
kCCProgressTextureCoords	misc_nodes/CCProgressTimer.cpp	/^const char kCCProgressTextureCoords = 0x4b;$/;"	v
kCCProgressTimerTypeBar	misc_nodes/CCProgressTimer.h	/^    kCCProgressTimerTypeBar,$/;"	e	enum:__anon17
kCCProgressTimerTypeRadial	misc_nodes/CCProgressTimer.h	/^    kCCProgressTimerTypeRadial,$/;"	e	enum:__anon17
kCCRepeatForever	include/ccMacros.h	81;"	d
kCCSceneRadial	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^    kCCSceneRadial = 0xc001,$/;"	e	enum:__anon13	file:
kCCShaderType_MAX	shaders/CCShaderCache.cpp	/^    kCCShaderType_MAX,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionColor	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionColor,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionLengthTexureColor	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionLengthTexureColor,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionTexture	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionTexture,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionTextureA8Color	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionTextureA8Color,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionTextureColor	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionTextureColor,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionTextureColorAlphaTest	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionTextureColorAlphaTest,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionTexture_uColor	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionTexture_uColor,$/;"	e	enum:__anon35	file:
kCCShaderType_Position_uColor	shaders/CCShaderCache.cpp	/^    kCCShaderType_Position_uColor,$/;"	e	enum:__anon35	file:
kCCShader_PositionColor	shaders/CCGLProgram.h	66;"	d
kCCShader_PositionLengthTexureColor	shaders/CCGLProgram.h	71;"	d
kCCShader_PositionTexture	shaders/CCGLProgram.h	67;"	d
kCCShader_PositionTextureA8Color	shaders/CCGLProgram.h	69;"	d
kCCShader_PositionTextureColor	shaders/CCGLProgram.h	64;"	d
kCCShader_PositionTextureColorAlphaTest	shaders/CCGLProgram.h	65;"	d
kCCShader_PositionTexture_uColor	shaders/CCGLProgram.h	68;"	d
kCCShader_Position_uColor	shaders/CCGLProgram.h	70;"	d
kCCTMXTileDiagonalFlag	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    kCCTMXTileDiagonalFlag            = 0x20000000,$/;"	e	enum:ccTMXTileFlags_
kCCTMXTileHorizontalFlag	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    kCCTMXTileHorizontalFlag        = 0x80000000,$/;"	e	enum:ccTMXTileFlags_
kCCTMXTileVerticalFlag	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    kCCTMXTileVerticalFlag            = 0x40000000,$/;"	e	enum:ccTMXTileFlags_
kCCTextAlignmentCenter	include/ccTypes.h	/^    kCCTextAlignmentCenter,$/;"	e	enum:__anon7
kCCTextAlignmentLeft	include/ccTypes.h	/^    kCCTextAlignmentLeft,$/;"	e	enum:__anon7
kCCTextAlignmentRight	include/ccTypes.h	/^    kCCTextAlignmentRight,$/;"	e	enum:__anon7
kCCTexture2DPixelFormat_A8	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_A8,$/;"	e	enum:__anon47
kCCTexture2DPixelFormat_AI88	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_AI88,$/;"	e	enum:__anon47
kCCTexture2DPixelFormat_Default	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_Default = kCCTexture2DPixelFormat_RGBA8888,$/;"	e	enum:__anon47
kCCTexture2DPixelFormat_I8	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_I8,$/;"	e	enum:__anon47
kCCTexture2DPixelFormat_PVRTC2	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_PVRTC2,$/;"	e	enum:__anon47
kCCTexture2DPixelFormat_PVRTC4	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_PVRTC4,$/;"	e	enum:__anon47
kCCTexture2DPixelFormat_RGB565	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_RGB565,$/;"	e	enum:__anon47
kCCTexture2DPixelFormat_RGB5A1	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_RGB5A1,    $/;"	e	enum:__anon47
kCCTexture2DPixelFormat_RGB888	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_RGB888,$/;"	e	enum:__anon47
kCCTexture2DPixelFormat_RGBA4444	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_RGBA4444,$/;"	e	enum:__anon47
kCCTexture2DPixelFormat_RGBA8888	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_RGBA8888,$/;"	e	enum:__anon47
kCCTouchesAllAtOnce	layers_scenes_transitions_nodes/CCLayer.h	/^	kCCTouchesAllAtOnce,$/;"	e	enum:__anon11
kCCTouchesOneByOne	layers_scenes_transitions_nodes/CCLayer.h	/^	kCCTouchesOneByOne,$/;"	e	enum:__anon11
kCCTransitionOrientationDownOver	layers_scenes_transitions_nodes/CCTransition.h	/^	kCCTransitionOrientationDownOver = 1,$/;"	e	enum:__anon12
kCCTransitionOrientationLeftOver	layers_scenes_transitions_nodes/CCTransition.h	/^	kCCTransitionOrientationLeftOver = 0,$/;"	e	enum:__anon12
kCCTransitionOrientationRightOver	layers_scenes_transitions_nodes/CCTransition.h	/^	kCCTransitionOrientationRightOver = 1,$/;"	e	enum:__anon12
kCCTransitionOrientationUpOver	layers_scenes_transitions_nodes/CCTransition.h	/^	kCCTransitionOrientationUpOver = 0,$/;"	e	enum:__anon12
kCCUniformAlphaTestValue	shaders/CCGLProgram.h	82;"	d
kCCUniformCosTime	shaders/CCGLProgram.h	/^	kCCUniformCosTime,$/;"	e	enum:__anon32
kCCUniformCosTime_s	shaders/CCGLProgram.h	79;"	d
kCCUniformMVMatrix	shaders/CCGLProgram.h	/^	kCCUniformMVMatrix,$/;"	e	enum:__anon32
kCCUniformMVMatrix_s	shaders/CCGLProgram.h	75;"	d
kCCUniformMVPMatrix	shaders/CCGLProgram.h	/^	kCCUniformMVPMatrix,$/;"	e	enum:__anon32
kCCUniformMVPMatrix_s	shaders/CCGLProgram.h	76;"	d
kCCUniformPMatrix	shaders/CCGLProgram.h	/^	kCCUniformPMatrix,$/;"	e	enum:__anon32
kCCUniformPMatrix_s	shaders/CCGLProgram.h	74;"	d
kCCUniformRandom01	shaders/CCGLProgram.h	/^	kCCUniformRandom01,$/;"	e	enum:__anon32
kCCUniformRandom01_s	shaders/CCGLProgram.h	80;"	d
kCCUniformSampler	shaders/CCGLProgram.h	/^	kCCUniformSampler,$/;"	e	enum:__anon32
kCCUniformSampler_s	shaders/CCGLProgram.h	81;"	d
kCCUniformSinTime	shaders/CCGLProgram.h	/^	kCCUniformSinTime,$/;"	e	enum:__anon32
kCCUniformSinTime_s	shaders/CCGLProgram.h	78;"	d
kCCUniformTime	shaders/CCGLProgram.h	/^	kCCUniformTime,$/;"	e	enum:__anon32
kCCUniformTime_s	shaders/CCGLProgram.h	77;"	d
kCCUniform_MAX	shaders/CCGLProgram.h	/^	kCCUniform_MAX,$/;"	e	enum:__anon32
kCCVertexAttribFlag_Color	shaders/ccGLStateCache.h	/^    kCCVertexAttribFlag_Color       = 1 << 1,$/;"	e	enum:__anon33
kCCVertexAttribFlag_None	shaders/ccGLStateCache.h	/^    kCCVertexAttribFlag_None        = 0,$/;"	e	enum:__anon33
kCCVertexAttribFlag_PosColorTex	shaders/ccGLStateCache.h	/^    kCCVertexAttribFlag_PosColorTex = ( kCCVertexAttribFlag_Position | kCCVertexAttribFlag_Color | kCCVertexAttribFlag_TexCoords ),$/;"	e	enum:__anon33
kCCVertexAttribFlag_Position	shaders/ccGLStateCache.h	/^    kCCVertexAttribFlag_Position    = 1 << 0,$/;"	e	enum:__anon33
kCCVertexAttribFlag_TexCoords	shaders/ccGLStateCache.h	/^    kCCVertexAttribFlag_TexCoords   = 1 << 2,$/;"	e	enum:__anon33
kCCVertexAttrib_Color	shaders/CCGLProgram.h	/^    kCCVertexAttrib_Color,$/;"	e	enum:__anon31
kCCVertexAttrib_MAX	shaders/CCGLProgram.h	/^    kCCVertexAttrib_MAX,$/;"	e	enum:__anon31
kCCVertexAttrib_Position	shaders/CCGLProgram.h	/^    kCCVertexAttrib_Position,$/;"	e	enum:__anon31
kCCVertexAttrib_TexCoords	shaders/CCGLProgram.h	/^    kCCVertexAttrib_TexCoords,$/;"	e	enum:__anon31
kCCVerticalTextAlignmentBottom	include/ccTypes.h	/^    kCCVerticalTextAlignmentBottom,$/;"	e	enum:__anon6
kCCVerticalTextAlignmentCenter	include/ccTypes.h	/^    kCCVerticalTextAlignmentCenter,$/;"	e	enum:__anon6
kCCVerticalTextAlignmentTop	include/ccTypes.h	/^    kCCVerticalTextAlignmentTop,$/;"	e	enum:__anon6
kCurrentItem	menu_nodes/CCMenuItem.cpp	/^const unsigned int    kCurrentItem = 0xc0c05001;$/;"	v
kDefaultFPS	CCDirector.cpp	81;"	d	file:
kDefaultPadding	menu_nodes/CCMenu.cpp	/^    kDefaultPadding =  5,$/;"	e	enum:__anon14	file:
kDefaultSpriteBatchCapacity	sprite_nodes/CCSpriteBatchNode.h	44;"	d
kDisableTag	menu_nodes/CCMenuItem.cpp	/^const unsigned int    kDisableTag = 0x3;$/;"	v
kFmtJpg	platform/CCImage.h	/^        kFmtJpg = 0,$/;"	e	enum:CCImage::__anon28
kFmtPng	platform/CCImage.h	/^        kFmtPng,$/;"	e	enum:CCImage::__anon28
kFmtRawData	platform/CCImage.h	/^        kFmtRawData,$/;"	e	enum:CCImage::__anon28
kFmtTiff	platform/CCImage.h	/^        kFmtTiff,$/;"	e	enum:CCImage::__anon28
kFmtUnKnown	platform/CCImage.h	/^        kFmtUnKnown$/;"	e	enum:CCImage::__anon28
kFmtWebp	platform/CCImage.h	/^        kFmtWebp,$/;"	e	enum:CCImage::__anon28
kImage	textures/CCTextureCache.h	/^    kImage,$/;"	e	enum:VolatileTexture::__anon48
kImageData	textures/CCTextureCache.h	/^    kImageData,$/;"	e	enum:VolatileTexture::__anon48
kImageFile	textures/CCTextureCache.h	/^    kImageFile,$/;"	e	enum:VolatileTexture::__anon48
kInvalid	textures/CCTextureCache.h	/^    kInvalid = 0,$/;"	e	enum:VolatileTexture::__anon48
kLanguageArabic	platform/CCCommon.h	/^    kLanguageArabic$/;"	e	enum:LanguageType
kLanguageChinese	platform/CCCommon.h	/^    kLanguageChinese,$/;"	e	enum:LanguageType
kLanguageEnglish	platform/CCCommon.h	/^    kLanguageEnglish = 0,$/;"	e	enum:LanguageType
kLanguageFrench	platform/CCCommon.h	/^    kLanguageFrench,$/;"	e	enum:LanguageType
kLanguageGerman	platform/CCCommon.h	/^    kLanguageGerman,$/;"	e	enum:LanguageType
kLanguageHungarian	platform/CCCommon.h	/^    kLanguageHungarian,$/;"	e	enum:LanguageType
kLanguageItalian	platform/CCCommon.h	/^    kLanguageItalian,$/;"	e	enum:LanguageType
kLanguageJapanese	platform/CCCommon.h	/^    kLanguageJapanese,$/;"	e	enum:LanguageType
kLanguageKorean	platform/CCCommon.h	/^    kLanguageKorean,$/;"	e	enum:LanguageType
kLanguagePortuguese	platform/CCCommon.h	/^    kLanguagePortuguese,$/;"	e	enum:LanguageType
kLanguageRussian	platform/CCCommon.h	/^    kLanguageRussian,$/;"	e	enum:LanguageType
kLanguageSpanish	platform/CCCommon.h	/^    kLanguageSpanish,$/;"	e	enum:LanguageType
kMaxLogLen	platform/CCCommon.h	/^static const int kMaxLogLen = 16*1024;$/;"	v
kMaxStringLen	cocoa/CCString.cpp	9;"	d	file:
kNormalTag	menu_nodes/CCMenuItem.cpp	/^const unsigned int    kNormalTag = 0x1;$/;"	v
kPVR2TextureFlagAlpha	textures/CCTexturePVR.cpp	/^    kPVR2TextureFlagAlpha          = (1<<15),       \/\/ v2.1 is there transparency info in the texture$/;"	e	enum:__anon53	file:
kPVR2TextureFlagBumpmap	textures/CCTexturePVR.cpp	/^    kPVR2TextureFlagBumpmap        = (1<<10),       \/\/ has normals encoded for a bump map$/;"	e	enum:__anon53	file:
kPVR2TextureFlagCubemap	textures/CCTexturePVR.cpp	/^    kPVR2TextureFlagCubemap        = (1<<12),       \/\/ is a cubemap\/skybox$/;"	e	enum:__anon53	file:
kPVR2TextureFlagFalseMipCol	textures/CCTexturePVR.cpp	/^    kPVR2TextureFlagFalseMipCol    = (1<<13),       \/\/ are there false colored MIP levels$/;"	e	enum:__anon53	file:
kPVR2TextureFlagMipmap	textures/CCTexturePVR.cpp	/^    kPVR2TextureFlagMipmap         = (1<<8),        \/\/ has mip map levels$/;"	e	enum:__anon53	file:
kPVR2TextureFlagTiling	textures/CCTexturePVR.cpp	/^    kPVR2TextureFlagTiling         = (1<<11),       \/\/ is bordered for tiled pvr$/;"	e	enum:__anon53	file:
kPVR2TextureFlagTwiddle	textures/CCTexturePVR.cpp	/^    kPVR2TextureFlagTwiddle        = (1<<9),        \/\/ is twiddled$/;"	e	enum:__anon53	file:
kPVR2TextureFlagVerticalFlip	textures/CCTexturePVR.cpp	/^    kPVR2TextureFlagVerticalFlip   = (1<<16),       \/\/ v2.1 is the texture vertically flipped$/;"	e	enum:__anon53	file:
kPVR2TextureFlagVolume	textures/CCTexturePVR.cpp	/^    kPVR2TextureFlagVolume         = (1<<14),       \/\/ is this a volume texture$/;"	e	enum:__anon53	file:
kPVR2TexturePixelFormat_AI_88	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_AI_88,$/;"	e	enum:__anon55	file:
kPVR2TexturePixelFormat_A_8	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_A_8,$/;"	e	enum:__anon55	file:
kPVR2TexturePixelFormat_BGRA_8888	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_BGRA_8888,$/;"	e	enum:__anon55	file:
kPVR2TexturePixelFormat_I_8	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_I_8,$/;"	e	enum:__anon55	file:
kPVR2TexturePixelFormat_PVRTC_2BPP_RGBA	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_PVRTC_2BPP_RGBA,$/;"	e	enum:__anon55	file:
kPVR2TexturePixelFormat_PVRTC_4BPP_RGBA	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_PVRTC_4BPP_RGBA,$/;"	e	enum:__anon55	file:
kPVR2TexturePixelFormat_RGBA_4444	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_RGBA_4444= 0x10,$/;"	e	enum:__anon55	file:
kPVR2TexturePixelFormat_RGBA_5551	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_RGBA_5551,$/;"	e	enum:__anon55	file:
kPVR2TexturePixelFormat_RGBA_8888	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_RGBA_8888,$/;"	e	enum:__anon55	file:
kPVR2TexturePixelFormat_RGB_555	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_RGB_555,				\/\/ unsupported$/;"	e	enum:__anon55	file:
kPVR2TexturePixelFormat_RGB_565	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_RGB_565,$/;"	e	enum:__anon55	file:
kPVR2TexturePixelFormat_RGB_888	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_RGB_888,$/;"	e	enum:__anon55	file:
kPVR3TextureFlagPremultipliedAlpha	textures/CCTexturePVR.cpp	/^	kPVR3TextureFlagPremultipliedAlpha	= (1<<1)	\/\/ has premultiplied alpha$/;"	e	enum:__anon54	file:
kPVR3TexturePixelFormat_A_8	textures/CCTexturePVR.cpp	134;"	d	file:
kPVR3TexturePixelFormat_BGRA_8888	textures/CCTexturePVR.cpp	128;"	d	file:
kPVR3TexturePixelFormat_LA_88	textures/CCTexturePVR.cpp	136;"	d	file:
kPVR3TexturePixelFormat_L_8	textures/CCTexturePVR.cpp	135;"	d	file:
kPVR3TexturePixelFormat_PVRTC_2BPP_RGB	textures/CCTexturePVR.cpp	122;"	d	file:
kPVR3TexturePixelFormat_PVRTC_2BPP_RGBA	textures/CCTexturePVR.cpp	123;"	d	file:
kPVR3TexturePixelFormat_PVRTC_4BPP_RGB	textures/CCTexturePVR.cpp	124;"	d	file:
kPVR3TexturePixelFormat_PVRTC_4BPP_RGBA	textures/CCTexturePVR.cpp	125;"	d	file:
kPVR3TexturePixelFormat_RGBA_4444	textures/CCTexturePVR.cpp	130;"	d	file:
kPVR3TexturePixelFormat_RGBA_5551	textures/CCTexturePVR.cpp	131;"	d	file:
kPVR3TexturePixelFormat_RGBA_8888	textures/CCTexturePVR.cpp	129;"	d	file:
kPVR3TexturePixelFormat_RGB_565	textures/CCTexturePVR.cpp	132;"	d	file:
kPVR3TexturePixelFormat_RGB_888	textures/CCTexturePVR.cpp	133;"	d	file:
kParticleDurationInfinity	particle_nodes/CCParticleSystem.h	/^    kParticleDurationInfinity = kCCParticleDurationInfinity,$/;"	e	enum:__anon18
kParticleStartSizeEqualToEndSize	particle_nodes/CCParticleSystem.h	/^    kParticleStartSizeEqualToEndSize = kCCParticleStartSizeEqualToEndSize,$/;"	e	enum:__anon18
kPositionTypeFree	particle_nodes/CCParticleSystem.h	/^    kPositionTypeFree = kCCPositionTypeFree,$/;"	e	enum:__anon21
kPositionTypeGrouped	particle_nodes/CCParticleSystem.h	/^    kPositionTypeGrouped = kCCPositionTypeGrouped,$/;"	e	enum:__anon21
kProgressTextureCoordsCount	misc_nodes/CCProgressTimer.cpp	43;"	d	file:
kProgressTimerCast	actions/CCActionProgressTimer.cpp	31;"	d	file:
kQuadSize	particle_nodes/CCParticleSystemQuad.cpp	477;"	d	file:
kQuadSize	sprite_nodes/CCSprite.cpp	571;"	d	file:
kQuadSize	textures/CCTextureAtlas.cpp	250;"	d	file:
kResolutionExactFit	platform/CCEGLViewProtocol.h	/^    kResolutionExactFit,$/;"	e	enum:ResolutionPolicy
kResolutionNoBorder	platform/CCEGLViewProtocol.h	/^    kResolutionNoBorder,$/;"	e	enum:ResolutionPolicy
kResolutionShowAll	platform/CCEGLViewProtocol.h	/^    kResolutionShowAll,$/;"	e	enum:ResolutionPolicy
kResolutionUnKnown	platform/CCEGLViewProtocol.h	/^    kResolutionUnKnown,$/;"	e	enum:ResolutionPolicy
kSceneFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^const unsigned int kSceneFade = 0xFADEFADE;$/;"	v
kScriptTypeJavascript	script_support/CCScriptSupport.h	/^    kScriptTypeJavascript$/;"	e	enum:ccScriptType
kScriptTypeLua	script_support/CCScriptSupport.h	/^    kScriptTypeLua,$/;"	e	enum:ccScriptType
kScriptTypeNone	script_support/CCScriptSupport.h	/^    kScriptTypeNone = 0,$/;"	e	enum:ccScriptType
kSelectedTag	menu_nodes/CCMenuItem.cpp	/^const unsigned int    kSelectedTag = 0x2;$/;"	v
kString	textures/CCTextureCache.h	/^    kString,$/;"	e	enum:VolatileTexture::__anon48
kTargetAndroid	platform/CCApplicationProtocol.h	/^    kTargetAndroid,$/;"	e	enum:TargetPlatform
kTargetBlackBerry	platform/CCApplicationProtocol.h	/^    kTargetBlackBerry,$/;"	e	enum:TargetPlatform
kTargetIpad	platform/CCApplicationProtocol.h	/^    kTargetIpad,$/;"	e	enum:TargetPlatform
kTargetIphone	platform/CCApplicationProtocol.h	/^    kTargetIphone,$/;"	e	enum:TargetPlatform
kTargetLinux	platform/CCApplicationProtocol.h	/^    kTargetLinux,$/;"	e	enum:TargetPlatform
kTargetMacOS	platform/CCApplicationProtocol.h	/^    kTargetMacOS,$/;"	e	enum:TargetPlatform
kTargetNaCl	platform/CCApplicationProtocol.h	/^    kTargetNaCl,$/;"	e	enum:TargetPlatform
kTargetWindows	platform/CCApplicationProtocol.h	/^    kTargetWindows,$/;"	e	enum:TargetPlatform
kTexture2DPixelFormat_A8	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_A8 = kCCTexture2DPixelFormat_A8,$/;"	e	enum:__anon47
kTexture2DPixelFormat_Default	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_Default = kCCTexture2DPixelFormat_Default$/;"	e	enum:__anon47
kTexture2DPixelFormat_RGB565	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_RGB565 = kCCTexture2DPixelFormat_RGB565,$/;"	e	enum:__anon47
kTexture2DPixelFormat_RGB5A1	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_RGB5A1 = kCCTexture2DPixelFormat_RGB5A1,$/;"	e	enum:__anon47
kTexture2DPixelFormat_RGB888	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_RGB888 = kCCTexture2DPixelFormat_RGB888,$/;"	e	enum:__anon47
kTexture2DPixelFormat_RGBA4444	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_RGBA4444 = kCCTexture2DPixelFormat_RGBA4444,$/;"	e	enum:__anon47
kTexture2DPixelFormat_RGBA8888	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_RGBA8888 = kCCTexture2DPixelFormat_RGBA8888,$/;"	e	enum:__anon47
kTypeBackClicked	keypad_dispatcher/CCKeypadDispatcher.h	/^    kTypeBackClicked = 1,$/;"	e	enum:__anon9
kTypeMenuClicked	keypad_dispatcher/CCKeypadDispatcher.h	/^    kTypeMenuClicked,$/;"	e	enum:__anon9
kZoomActionTag	menu_nodes/CCMenuItem.cpp	/^const unsigned int    kZoomActionTag = 0xc0c05002;$/;"	v
keepData	textures/CCTexture2D.cpp	/^void* CCTexture2D::keepData(void *data, unsigned int length)$/;"	f	class:CCTexture2D	signature:(void *data, unsigned int length)
keepData	textures/CCTexture2D.h	/^    void* keepData(void *data, unsigned int length);$/;"	p	class:CCTexture2D	access:public	signature:(void *data, unsigned int length)
kerningAmountForFirst	label_nodes/CCLabelBMFont.cpp	/^int CCLabelBMFont::kerningAmountForFirst(unsigned short first, unsigned short second)$/;"	f	class:CCLabelBMFont	signature:(unsigned short first, unsigned short second)
kerningAmountForFirst	label_nodes/CCLabelBMFont.h	/^    int kerningAmountForFirst(unsigned short first, unsigned short second);$/;"	p	class:CCLabelBMFont	access:private	signature:(unsigned short first, unsigned short second)
key	label_nodes/CCLabelBMFont.h	/^	int				key;		\/\/ key for the hash. 16-bit for 1st element, 16-bit for 2nd element$/;"	m	struct:_KerningHashElement	access:public
key	label_nodes/CCLabelBMFont.h	/^	unsigned int	key;		\/\/ key. Font Unicode value$/;"	m	struct:_FontDefHashElement	access:public
key	support/data_support/uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle	access:public
keyBackClicked	keypad_dispatcher/CCKeypadDelegate.h	/^    virtual void keyBackClicked() {}$/;"	f	class:CCKeypadDelegate	access:public	signature:()
keyBackClicked	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::keyBackClicked(void)$/;"	f	class:CCLayer	signature:(void)
keyBackClicked	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void keyBackClicked(void);$/;"	p	class:CCLayer	access:public	signature:(void)
keyMenuClicked	keypad_dispatcher/CCKeypadDelegate.h	/^    virtual void keyMenuClicked() {};$/;"	f	class:CCKeypadDelegate	access:public	signature:()
keyMenuClicked	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::keyMenuClicked(void)$/;"	f	class:CCLayer	signature:(void)
keyMenuClicked	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void keyMenuClicked(void);$/;"	p	class:CCLayer	access:public	signature:(void)
keyboardDidHide	text_input_node/CCIMEDelegate.h	/^    virtual void keyboardDidHide(CCIMEKeyboardNotificationInfo& info)    {CC_UNUSED_PARAM(info);}$/;"	f	class:CCIMEDelegate	access:protected	signature:(CCIMEKeyboardNotificationInfo& info)
keyboardDidShow	text_input_node/CCIMEDelegate.h	/^    virtual void keyboardDidShow(CCIMEKeyboardNotificationInfo& info)    {CC_UNUSED_PARAM(info);}$/;"	f	class:CCIMEDelegate	access:protected	signature:(CCIMEKeyboardNotificationInfo& info)
keyboardWillHide	text_input_node/CCIMEDelegate.h	/^    virtual void keyboardWillHide(CCIMEKeyboardNotificationInfo& info)   {CC_UNUSED_PARAM(info);}$/;"	f	class:CCIMEDelegate	access:protected	signature:(CCIMEKeyboardNotificationInfo& info)
keyboardWillShow	text_input_node/CCIMEDelegate.h	/^    virtual void keyboardWillShow(CCIMEKeyboardNotificationInfo& info)   {CC_UNUSED_PARAM(info);}$/;"	f	class:CCIMEDelegate	access:protected	signature:(CCIMEKeyboardNotificationInfo& info)
keylen	support/data_support/uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle	access:public
keys	support/zip_support/unzip.cpp	/^    unsigned long keys[3];     \/* keys defining the pseudo-random sequence *\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
kmAABB	kazmath/include/kazmath/aabb.h	/^typedef struct kmAABB {$/;"	s
kmAABB	kazmath/include/kazmath/aabb.h	/^} kmAABB;$/;"	t	typeref:struct:kmAABB
kmAABB::max	kazmath/include/kazmath/aabb.h	/^    kmVec3 max; \/** The min corner of the box *\/$/;"	m	struct:kmAABB	access:public
kmAABB::min	kazmath/include/kazmath/aabb.h	/^    kmVec3 min; \/** The max corner of the box *\/$/;"	m	struct:kmAABB	access:public
kmAABBAssign	kazmath/include/kazmath/aabb.h	/^CC_DLL kmAABB* const kmAABBAssign(kmAABB* pOut, const kmAABB* pIn);$/;"	p	signature:(kmAABB* pOut, const kmAABB* pIn)
kmAABBAssign	kazmath/src/aabb.c	/^kmAABB* const kmAABBAssign(kmAABB* pOut, const kmAABB* pIn)$/;"	f	signature:(kmAABB* pOut, const kmAABB* pIn)
kmAABBContainsPoint	kazmath/include/kazmath/aabb.h	/^CC_DLL const int kmAABBContainsPoint(const kmVec3* pPoint, const kmAABB* pBox);$/;"	p	signature:(const kmVec3* pPoint, const kmAABB* pBox)
kmAABBContainsPoint	kazmath/src/aabb.c	/^const int kmAABBContainsPoint(const kmVec3* pPoint, const kmAABB* pBox)$/;"	f	signature:(const kmVec3* pPoint, const kmAABB* pBox)
kmAABBScale	kazmath/include/kazmath/aabb.h	/^CC_DLL kmAABB* const kmAABBScale(kmAABB* pOut, const kmAABB* pIn, kmScalar s);$/;"	p	signature:(kmAABB* pOut, const kmAABB* pIn, kmScalar s)
kmAABBScale	kazmath/src/aabb.c	/^kmAABB* const kmAABBScale(kmAABB* pOut, const kmAABB* pIn, kmScalar s)$/;"	f	signature:(kmAABB* pOut, const kmAABB* pIn, kmScalar s)
kmAlmostEqual	kazmath/include/kazmath/utility.h	/^CC_DLL kmBool kmAlmostEqual(kmScalar lhs, kmScalar rhs);$/;"	p	signature:(kmScalar lhs, kmScalar rhs)
kmAlmostEqual	kazmath/src/utility.c	/^kmBool kmAlmostEqual(kmScalar lhs, kmScalar rhs) {$/;"	f	signature:(kmScalar lhs, kmScalar rhs)
kmBool	kazmath/include/kazmath/utility.h	37;"	d
kmDegreesToRadians	kazmath/include/kazmath/utility.h	/^CC_DLL kmScalar kmDegreesToRadians(kmScalar degrees);$/;"	p	signature:(kmScalar degrees)
kmDegreesToRadians	kazmath/src/utility.c	/^kmScalar kmDegreesToRadians(kmScalar degrees) {$/;"	f	signature:(kmScalar degrees)
kmEnum	kazmath/include/kazmath/utility.h	41;"	d
kmEpsilon	kazmath/include/kazmath/utility.h	55;"	d
kmGLEnum	kazmath/include/kazmath/GL/matrix.h	/^typedef unsigned int kmGLEnum;$/;"	t
kmGLFreeAll	kazmath/include/kazmath/GL/matrix.h	/^void CC_DLL kmGLFreeAll(void);$/;"	p	signature:(void)
kmGLFreeAll	kazmath/src/GL/matrix.c	/^void kmGLFreeAll()$/;"	f
kmGLGetMatrix	kazmath/include/kazmath/GL/matrix.h	/^void CC_DLL kmGLGetMatrix(kmGLEnum mode, kmMat4* pOut);$/;"	p	signature:(kmGLEnum mode, kmMat4* pOut)
kmGLGetMatrix	kazmath/src/GL/matrix.c	/^void kmGLGetMatrix(kmGLEnum mode, kmMat4* pOut)$/;"	f	signature:(kmGLEnum mode, kmMat4* pOut)
kmGLLoadIdentity	kazmath/include/kazmath/GL/matrix.h	/^void CC_DLL kmGLLoadIdentity(void);$/;"	p	signature:(void)
kmGLLoadIdentity	kazmath/src/GL/matrix.c	/^void kmGLLoadIdentity()$/;"	f
kmGLLoadMatrix	kazmath/include/kazmath/GL/matrix.h	/^void CC_DLL kmGLLoadMatrix(const kmMat4* pIn);$/;"	p	signature:(const kmMat4* pIn)
kmGLLoadMatrix	kazmath/src/GL/matrix.c	/^void kmGLLoadMatrix(const kmMat4* pIn)$/;"	f	signature:(const kmMat4* pIn)
kmGLMatrixMode	kazmath/include/kazmath/GL/matrix.h	/^void CC_DLL kmGLMatrixMode(kmGLEnum mode);$/;"	p	signature:(kmGLEnum mode)
kmGLMatrixMode	kazmath/src/GL/matrix.c	/^void kmGLMatrixMode(kmGLEnum mode)$/;"	f	signature:(kmGLEnum mode)
kmGLMultMatrix	kazmath/include/kazmath/GL/matrix.h	/^void CC_DLL kmGLMultMatrix(const kmMat4* pIn);$/;"	p	signature:(const kmMat4* pIn)
kmGLMultMatrix	kazmath/src/GL/matrix.c	/^void kmGLMultMatrix(const kmMat4* pIn)$/;"	f	signature:(const kmMat4* pIn)
kmGLPopMatrix	kazmath/include/kazmath/GL/matrix.h	/^void CC_DLL kmGLPopMatrix(void);$/;"	p	signature:(void)
kmGLPopMatrix	kazmath/src/GL/matrix.c	/^void kmGLPopMatrix(void)$/;"	f	signature:(void)
kmGLPushMatrix	kazmath/include/kazmath/GL/matrix.h	/^void CC_DLL kmGLPushMatrix(void);$/;"	p	signature:(void)
kmGLPushMatrix	kazmath/src/GL/matrix.c	/^void kmGLPushMatrix(void)$/;"	f	signature:(void)
kmGLRotatef	kazmath/include/kazmath/GL/matrix.h	/^void CC_DLL kmGLRotatef(float angle, float x, float y, float z);$/;"	p	signature:(float angle, float x, float y, float z)
kmGLRotatef	kazmath/src/GL/matrix.c	/^void kmGLRotatef(float angle, float x, float y, float z)$/;"	f	signature:(float angle, float x, float y, float z)
kmGLScalef	kazmath/include/kazmath/GL/matrix.h	/^void CC_DLL kmGLScalef(float x, float y, float z);$/;"	p	signature:(float x, float y, float z)
kmGLScalef	kazmath/src/GL/matrix.c	/^void kmGLScalef(float x, float y, float z)$/;"	f	signature:(float x, float y, float z)
kmGLTranslatef	kazmath/include/kazmath/GL/matrix.h	/^void CC_DLL kmGLTranslatef(float x, float y, float z);$/;"	p	signature:(float x, float y, float z)
kmGLTranslatef	kazmath/src/GL/matrix.c	/^void kmGLTranslatef(float x, float y, float z)$/;"	f	signature:(float x, float y, float z)
kmMat3	kazmath/include/kazmath/mat3.h	/^typedef struct kmMat3{$/;"	s
kmMat3	kazmath/include/kazmath/mat3.h	/^} kmMat3;$/;"	t	typeref:struct:kmMat3
kmMat3::mat	kazmath/include/kazmath/mat3.h	/^    kmScalar mat[9];$/;"	m	struct:kmMat3	access:public
kmMat3Adjugate	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3Adjugate(kmMat3* pOut, const kmMat3* pIn);$/;"	p	signature:(kmMat3* pOut, const kmMat3* pIn)
kmMat3Adjugate	kazmath/src/mat3.c	/^kmMat3* const kmMat3Adjugate(kmMat3* pOut, const kmMat3* pIn)$/;"	f	signature:(kmMat3* pOut, const kmMat3* pIn)
kmMat3AreEqual	kazmath/include/kazmath/mat3.h	/^CC_DLL const int  kmMat3AreEqual(const kmMat3* pM1, const kmMat3* pM2);$/;"	p	signature:(const kmMat3* pM1, const kmMat3* pM2)
kmMat3AreEqual	kazmath/src/mat3.c	/^const int kmMat3AreEqual(const kmMat3* pMat1, const kmMat3* pMat2)$/;"	f	signature:(const kmMat3* pMat1, const kmMat3* pMat2)
kmMat3Assign	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3Assign(kmMat3* pOut, const kmMat3* pIn);$/;"	p	signature:(kmMat3* pOut, const kmMat3* pIn)
kmMat3Assign	kazmath/src/mat3.c	/^kmMat3* const kmMat3Assign(kmMat3* pOut, const kmMat3* pIn)$/;"	f	signature:(kmMat3* pOut, const kmMat3* pIn)
kmMat3Determinant	kazmath/include/kazmath/mat3.h	/^CC_DLL const kmScalar kmMat3Determinant(const kmMat3* pIn);$/;"	p	signature:(const kmMat3* pIn)
kmMat3Determinant	kazmath/src/mat3.c	/^const kmScalar kmMat3Determinant(const kmMat3* pIn)$/;"	f	signature:(const kmMat3* pIn)
kmMat3Fill	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3Fill(kmMat3* pOut, const kmScalar* pMat);$/;"	p	signature:(kmMat3* pOut, const kmScalar* pMat)
kmMat3Fill	kazmath/src/mat3.c	/^kmMat3* const kmMat3Fill(kmMat3* pOut, const kmScalar* pMat)$/;"	f	signature:(kmMat3* pOut, const kmScalar* pMat)
kmMat3Identity	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3Identity(kmMat3* pOut);$/;"	p	signature:(kmMat3* pOut)
kmMat3Identity	kazmath/src/mat3.c	/^kmMat3* const kmMat3Identity(kmMat3* pOut)$/;"	f	signature:(kmMat3* pOut)
kmMat3Inverse	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3Inverse(kmMat3* pOut, const kmScalar pDeterminate, const kmMat3* pM);$/;"	p	signature:(kmMat3* pOut, const kmScalar pDeterminate, const kmMat3* pM)
kmMat3Inverse	kazmath/src/mat3.c	/^kmMat3* const kmMat3Inverse(kmMat3* pOut, const kmScalar pDeterminate, const kmMat3* pM)$/;"	f	signature:(kmMat3* pOut, const kmScalar pDeterminate, const kmMat3* pM)
kmMat3IsIdentity	kazmath/include/kazmath/mat3.h	/^CC_DLL const int  kmMat3IsIdentity(const kmMat3* pIn);$/;"	p	signature:(const kmMat3* pIn)
kmMat3IsIdentity	kazmath/src/mat3.c	/^const int kmMat3IsIdentity(const kmMat3* pIn)$/;"	f	signature:(const kmMat3* pIn)
kmMat3Multiply	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3Multiply(kmMat3* pOut, const kmMat3* pM1, const kmMat3* pM2);$/;"	p	signature:(kmMat3* pOut, const kmMat3* pM1, const kmMat3* pM2)
kmMat3Multiply	kazmath/src/mat3.c	/^kmMat3* const kmMat3Multiply(kmMat3* pOut, const kmMat3* pM1, const kmMat3* pM2)$/;"	f	signature:(kmMat3* pOut, const kmMat3* pM1, const kmMat3* pM2)
kmMat3Rotation	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3Rotation(kmMat3* pOut, const kmScalar radians);$/;"	p	signature:(kmMat3* pOut, const kmScalar radians)
kmMat3Rotation	kazmath/src/mat3.c	/^kmMat3* const kmMat3Rotation(kmMat3* pOut, const float radians)$/;"	f	signature:(kmMat3* pOut, const float radians)
kmMat3RotationAxisAngle	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3RotationAxisAngle(kmMat3* pOut, const struct kmVec3* axis, kmScalar radians);$/;"	p	signature:(kmMat3* pOut, const struct kmVec3* axis, kmScalar radians)
kmMat3RotationAxisAngle	kazmath/src/mat3.c	/^kmMat3* const kmMat3RotationAxisAngle(kmMat3* pOut, const struct kmVec3* axis, kmScalar radians)$/;"	f	signature:(kmMat3* pOut, const struct kmVec3* axis, kmScalar radians)
kmMat3RotationQuaternion	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3RotationQuaternion(kmMat3* pOut, const struct kmQuaternion* pIn);$/;"	p	signature:(kmMat3* pOut, const struct kmQuaternion* pIn)
kmMat3RotationQuaternion	kazmath/src/mat3.c	/^kmMat3* const kmMat3RotationQuaternion(kmMat3* pOut, const kmQuaternion* pIn)$/;"	f	signature:(kmMat3* pOut, const kmQuaternion* pIn)
kmMat3RotationToAxisAngle	kazmath/include/kazmath/mat3.h	/^CC_DLL struct kmVec3* const kmMat3RotationToAxisAngle(struct kmVec3* pAxis, kmScalar* radians, const kmMat3* pIn);$/;"	p	signature:(struct kmVec3* pAxis, kmScalar* radians, const kmMat3* pIn)
kmMat3RotationToAxisAngle	kazmath/src/mat3.c	/^kmVec3* const kmMat3RotationToAxisAngle(kmVec3* pAxis, kmScalar* radians, const kmMat3* pIn)$/;"	f	signature:(kmVec3* pAxis, kmScalar* radians, const kmMat3* pIn)
kmMat3RotationX	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3RotationX(kmMat3* pOut, const kmScalar radians);$/;"	p	signature:(kmMat3* pOut, const kmScalar radians)
kmMat3RotationX	kazmath/src/mat3.c	/^kmMat3* const kmMat3RotationX(kmMat3* pOut, const float radians)$/;"	f	signature:(kmMat3* pOut, const float radians)
kmMat3RotationY	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3RotationY(kmMat3* pOut, const kmScalar radians);$/;"	p	signature:(kmMat3* pOut, const kmScalar radians)
kmMat3RotationY	kazmath/src/mat3.c	/^kmMat3* const kmMat3RotationY(kmMat3* pOut, const float radians)$/;"	f	signature:(kmMat3* pOut, const float radians)
kmMat3RotationZ	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3RotationZ(kmMat3* pOut, const kmScalar radians);$/;"	p	signature:(kmMat3* pOut, const kmScalar radians)
kmMat3RotationZ	kazmath/src/mat3.c	/^kmMat3* const kmMat3RotationZ(kmMat3* pOut, const float radians)$/;"	f	signature:(kmMat3* pOut, const float radians)
kmMat3ScalarMultiply	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3ScalarMultiply(kmMat3* pOut, const kmMat3* pM, const kmScalar pFactor);$/;"	p	signature:(kmMat3* pOut, const kmMat3* pM, const kmScalar pFactor)
kmMat3ScalarMultiply	kazmath/src/mat3.c	/^kmMat3* const kmMat3ScalarMultiply(kmMat3* pOut, const kmMat3* pM, const kmScalar pFactor)$/;"	f	signature:(kmMat3* pOut, const kmMat3* pM, const kmScalar pFactor)
kmMat3Scaling	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3Scaling(kmMat3* pOut, const kmScalar x, const kmScalar y);$/;"	p	signature:(kmMat3* pOut, const kmScalar x, const kmScalar y)
kmMat3Scaling	kazmath/src/mat3.c	/^kmMat3* const kmMat3Scaling(kmMat3* pOut, const kmScalar x, const kmScalar y)$/;"	f	signature:(kmMat3* pOut, const kmScalar x, const kmScalar y)
kmMat3Translation	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3Translation(kmMat3* pOut, const kmScalar x, const kmScalar y);$/;"	p	signature:(kmMat3* pOut, const kmScalar x, const kmScalar y)
kmMat3Translation	kazmath/src/mat3.c	/^kmMat3* const kmMat3Translation(kmMat3* pOut, const kmScalar x, const kmScalar y)$/;"	f	signature:(kmMat3* pOut, const kmScalar x, const kmScalar y)
kmMat3Transpose	kazmath/include/kazmath/mat3.h	/^CC_DLL kmMat3* const kmMat3Transpose(kmMat3* pOut, const kmMat3* pIn);$/;"	p	signature:(kmMat3* pOut, const kmMat3* pIn)
kmMat3Transpose	kazmath/src/mat3.c	/^kmMat3* const kmMat3Transpose(kmMat3* pOut, const kmMat3* pIn)$/;"	f	signature:(kmMat3* pOut, const kmMat3* pIn)
kmMat4	kazmath/include/kazmath/mat4.h	/^typedef struct kmMat4 {$/;"	s
kmMat4	kazmath/include/kazmath/mat4.h	/^} kmMat4;$/;"	t	typeref:struct:kmMat4
kmMat4::mat	kazmath/include/kazmath/mat4.h	/^    kmScalar mat[16];$/;"	m	struct:kmMat4	access:public
kmMat4AreEqual	kazmath/include/kazmath/mat4.h	/^CC_DLL const int kmMat4AreEqual(const kmMat4* pM1, const kmMat4* pM2);$/;"	p	signature:(const kmMat4* pM1, const kmMat4* pM2)
kmMat4AreEqual	kazmath/src/mat4.c	/^const int kmMat4AreEqual(const kmMat4* pMat1, const kmMat4* pMat2)$/;"	f	signature:(const kmMat4* pMat1, const kmMat4* pMat2)
kmMat4Assign	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4Assign(kmMat4* pOut, const kmMat4* pIn);$/;"	p	signature:(kmMat4* pOut, const kmMat4* pIn)
kmMat4Assign	kazmath/src/mat4.c	/^kmMat4* const kmMat4Assign(kmMat4* pOut, const kmMat4* pIn)$/;"	f	signature:(kmMat4* pOut, const kmMat4* pIn)
kmMat4ExtractPlane	kazmath/include/kazmath/mat4.h	/^CC_DLL struct kmPlane* const kmMat4ExtractPlane(struct kmPlane* pOut, const kmMat4* pIn, const kmEnum plane);$/;"	p	signature:(struct kmPlane* pOut, const kmMat4* pIn, const kmEnum plane)
kmMat4ExtractPlane	kazmath/src/mat4.c	/^kmPlane* const kmMat4ExtractPlane(kmPlane* pOut, const kmMat4* pIn, const kmEnum plane)$/;"	f	signature:(kmPlane* pOut, const kmMat4* pIn, const kmEnum plane)
kmMat4ExtractRotation	kazmath/include/kazmath/mat4.h	/^CC_DLL struct kmMat3* const kmMat4ExtractRotation(struct kmMat3* pOut, const kmMat4* pIn);$/;"	p	signature:(struct kmMat3* pOut, const kmMat4* pIn)
kmMat4ExtractRotation	kazmath/src/mat4.c	/^kmMat3* const kmMat4ExtractRotation(kmMat3* pOut, const kmMat4* pIn)$/;"	f	signature:(kmMat3* pOut, const kmMat4* pIn)
kmMat4Fill	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4Fill(kmMat4* pOut, const kmScalar* pMat);$/;"	p	signature:(kmMat4* pOut, const kmScalar* pMat)
kmMat4Fill	kazmath/src/mat4.c	/^kmMat4* const kmMat4Fill(kmMat4* pOut, const kmScalar* pMat)$/;"	f	signature:(kmMat4* pOut, const kmScalar* pMat)
kmMat4GetForwardVec3	kazmath/include/kazmath/mat4.h	/^CC_DLL struct kmVec3* const kmMat4GetForwardVec3(struct kmVec3* pOut, const kmMat4* pIn);$/;"	p	signature:(struct kmVec3* pOut, const kmMat4* pIn)
kmMat4GetForwardVec3	kazmath/src/mat4.c	/^kmVec3* const kmMat4GetForwardVec3(kmVec3* pOut, const kmMat4* pIn)$/;"	f	signature:(kmVec3* pOut, const kmMat4* pIn)
kmMat4GetRightVec3	kazmath/include/kazmath/mat4.h	/^CC_DLL struct kmVec3* const kmMat4GetRightVec3(struct kmVec3* pOut, const kmMat4* pIn);$/;"	p	signature:(struct kmVec3* pOut, const kmMat4* pIn)
kmMat4GetRightVec3	kazmath/src/mat4.c	/^kmVec3* const kmMat4GetRightVec3(kmVec3* pOut, const kmMat4* pIn)$/;"	f	signature:(kmVec3* pOut, const kmMat4* pIn)
kmMat4GetUpVec3	kazmath/include/kazmath/mat4.h	/^CC_DLL struct kmVec3* const kmMat4GetUpVec3(struct kmVec3* pOut, const kmMat4* pIn);$/;"	p	signature:(struct kmVec3* pOut, const kmMat4* pIn)
kmMat4GetUpVec3	kazmath/src/mat4.c	/^kmVec3* const kmMat4GetUpVec3(kmVec3* pOut, const kmMat4* pIn)$/;"	f	signature:(kmVec3* pOut, const kmMat4* pIn)
kmMat4Identity	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4Identity(kmMat4* pOut);$/;"	p	signature:(kmMat4* pOut)
kmMat4Identity	kazmath/src/mat4.c	/^kmMat4* const kmMat4Identity(kmMat4* pOut)$/;"	f	signature:(kmMat4* pOut)
kmMat4Inverse	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4Inverse(kmMat4* pOut, const kmMat4* pM);$/;"	p	signature:(kmMat4* pOut, const kmMat4* pM)
kmMat4Inverse	kazmath/src/mat4.c	/^kmMat4* const kmMat4Inverse(kmMat4* pOut, const kmMat4* pM)$/;"	f	signature:(kmMat4* pOut, const kmMat4* pM)
kmMat4IsIdentity	kazmath/include/kazmath/mat4.h	/^CC_DLL const int kmMat4IsIdentity(const kmMat4* pIn);$/;"	p	signature:(const kmMat4* pIn)
kmMat4IsIdentity	kazmath/src/mat4.c	/^const int  kmMat4IsIdentity(const kmMat4* pIn)$/;"	f	signature:(const kmMat4* pIn)
kmMat4LookAt	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4LookAt(kmMat4* pOut, const struct kmVec3* pEye, const struct kmVec3* pCenter, const struct kmVec3* pUp);$/;"	p	signature:(kmMat4* pOut, const struct kmVec3* pEye, const struct kmVec3* pCenter, const struct kmVec3* pUp)
kmMat4LookAt	kazmath/src/mat4.c	/^kmMat4* const kmMat4LookAt(kmMat4* pOut, const kmVec3* pEye,$/;"	f	signature:(kmMat4* pOut, const kmVec3* pEye, const kmVec3* pCenter, const kmVec3* pUp)
kmMat4Multiply	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4Multiply(kmMat4* pOut, const kmMat4* pM1, const kmMat4* pM2);$/;"	p	signature:(kmMat4* pOut, const kmMat4* pM1, const kmMat4* pM2)
kmMat4Multiply	kazmath/src/mat4.c	/^kmMat4* const kmMat4Multiply(kmMat4* pOut, const kmMat4* pM1, const kmMat4* pM2)$/;"	f	signature:(kmMat4* pOut, const kmMat4* pM1, const kmMat4* pM2)
kmMat4OrthographicProjection	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4OrthographicProjection(kmMat4* pOut, kmScalar left, kmScalar right, kmScalar bottom, kmScalar top, kmScalar nearVal, kmScalar farVal);$/;"	p	signature:(kmMat4* pOut, kmScalar left, kmScalar right, kmScalar bottom, kmScalar top, kmScalar nearVal, kmScalar farVal)
kmMat4OrthographicProjection	kazmath/src/mat4.c	/^kmMat4* const kmMat4OrthographicProjection(kmMat4* pOut, kmScalar left,$/;"	f	signature:(kmMat4* pOut, kmScalar left, kmScalar right, kmScalar bottom, kmScalar top, kmScalar nearVal, kmScalar farVal)
kmMat4PerspectiveProjection	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4PerspectiveProjection(kmMat4* pOut, kmScalar fovY, kmScalar aspect, kmScalar zNear, kmScalar zFar);$/;"	p	signature:(kmMat4* pOut, kmScalar fovY, kmScalar aspect, kmScalar zNear, kmScalar zFar)
kmMat4PerspectiveProjection	kazmath/src/mat4.c	/^kmMat4* const kmMat4PerspectiveProjection(kmMat4* pOut, kmScalar fovY,$/;"	f	signature:(kmMat4* pOut, kmScalar fovY, kmScalar aspect, kmScalar zNear, kmScalar zFar)
kmMat4RotationAxisAngle	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4RotationAxisAngle(kmMat4* pOut, const struct kmVec3* axis, kmScalar radians);$/;"	p	signature:(kmMat4* pOut, const struct kmVec3* axis, kmScalar radians)
kmMat4RotationAxisAngle	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationAxisAngle(kmMat4* pOut, const kmVec3* axis, kmScalar radians)$/;"	f	signature:(kmMat4* pOut, const kmVec3* axis, kmScalar radians)
kmMat4RotationPitchYawRoll	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4RotationPitchYawRoll(kmMat4* pOut, const kmScalar pitch, const kmScalar yaw, const kmScalar roll);$/;"	p	signature:(kmMat4* pOut, const kmScalar pitch, const kmScalar yaw, const kmScalar roll)
kmMat4RotationPitchYawRoll	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationPitchYawRoll(kmMat4* pOut, const kmScalar pitch, const kmScalar yaw, const kmScalar roll)$/;"	f	signature:(kmMat4* pOut, const kmScalar pitch, const kmScalar yaw, const kmScalar roll)
kmMat4RotationQuaternion	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4RotationQuaternion(kmMat4* pOut, const struct kmQuaternion* pQ);$/;"	p	signature:(kmMat4* pOut, const struct kmQuaternion* pQ)
kmMat4RotationQuaternion	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationQuaternion(kmMat4* pOut, const kmQuaternion* pQ)$/;"	f	signature:(kmMat4* pOut, const kmQuaternion* pQ)
kmMat4RotationToAxisAngle	kazmath/include/kazmath/mat4.h	/^CC_DLL struct kmVec3* const kmMat4RotationToAxisAngle(struct kmVec3* pAxis, kmScalar* radians, const kmMat4* pIn);$/;"	p	signature:(struct kmVec3* pAxis, kmScalar* radians, const kmMat4* pIn)
kmMat4RotationToAxisAngle	kazmath/src/mat4.c	/^kmVec3* const kmMat4RotationToAxisAngle(kmVec3* pAxis, kmScalar* radians, const kmMat4* pIn)$/;"	f	signature:(kmVec3* pAxis, kmScalar* radians, const kmMat4* pIn)
kmMat4RotationTranslation	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4RotationTranslation(kmMat4* pOut, const struct kmMat3* rotation, const struct kmVec3* translation);$/;"	p	signature:(kmMat4* pOut, const struct kmMat3* rotation, const struct kmVec3* translation)
kmMat4RotationTranslation	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationTranslation(kmMat4* pOut, const kmMat3* rotation, const kmVec3* translation)$/;"	f	signature:(kmMat4* pOut, const kmMat3* rotation, const kmVec3* translation)
kmMat4RotationX	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4RotationX(kmMat4* pOut, const kmScalar radians);$/;"	p	signature:(kmMat4* pOut, const kmScalar radians)
kmMat4RotationX	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationX(kmMat4* pOut, const float radians)$/;"	f	signature:(kmMat4* pOut, const float radians)
kmMat4RotationY	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4RotationY(kmMat4* pOut, const kmScalar radians);$/;"	p	signature:(kmMat4* pOut, const kmScalar radians)
kmMat4RotationY	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationY(kmMat4* pOut, const float radians)$/;"	f	signature:(kmMat4* pOut, const float radians)
kmMat4RotationZ	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4RotationZ(kmMat4* pOut, const kmScalar radians);$/;"	p	signature:(kmMat4* pOut, const kmScalar radians)
kmMat4RotationZ	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationZ(kmMat4* pOut, const float radians)$/;"	f	signature:(kmMat4* pOut, const float radians)
kmMat4Scaling	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4Scaling(kmMat4* pOut, const kmScalar x, const kmScalar y, const kmScalar z);$/;"	p	signature:(kmMat4* pOut, const kmScalar x, const kmScalar y, const kmScalar z)
kmMat4Scaling	kazmath/src/mat4.c	/^kmMat4* const kmMat4Scaling(kmMat4* pOut, const kmScalar x, const kmScalar y,$/;"	f	signature:(kmMat4* pOut, const kmScalar x, const kmScalar y, const kmScalar z)
kmMat4Translation	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4Translation(kmMat4* pOut, const kmScalar x, const kmScalar y, const kmScalar z);$/;"	p	signature:(kmMat4* pOut, const kmScalar x, const kmScalar y, const kmScalar z)
kmMat4Translation	kazmath/src/mat4.c	/^kmMat4* const kmMat4Translation(kmMat4* pOut, const kmScalar x,$/;"	f	signature:(kmMat4* pOut, const kmScalar x, const kmScalar y, const kmScalar z)
kmMat4Transpose	kazmath/include/kazmath/mat4.h	/^CC_DLL kmMat4* const kmMat4Transpose(kmMat4* pOut, const kmMat4* pIn);$/;"	p	signature:(kmMat4* pOut, const kmMat4* pIn)
kmMat4Transpose	kazmath/src/mat4.c	/^kmMat4* const kmMat4Transpose(kmMat4* pOut, const kmMat4* pIn)$/;"	f	signature:(kmMat4* pOut, const kmMat4* pIn)
kmMax	kazmath/include/kazmath/utility.h	/^CC_DLL kmScalar kmMax(kmScalar lhs, kmScalar rhs);$/;"	p	signature:(kmScalar lhs, kmScalar rhs)
kmMax	kazmath/src/utility.c	/^kmScalar kmMax(kmScalar lhs, kmScalar rhs) {$/;"	f	signature:(kmScalar lhs, kmScalar rhs)
kmMin	kazmath/include/kazmath/utility.h	/^CC_DLL kmScalar kmMin(kmScalar lhs, kmScalar rhs);$/;"	p	signature:(kmScalar lhs, kmScalar rhs)
kmMin	kazmath/src/utility.c	/^kmScalar kmMin(kmScalar lhs, kmScalar rhs) {$/;"	f	signature:(kmScalar lhs, kmScalar rhs)
kmPI	kazmath/include/kazmath/utility.h	52;"	d
kmPIOver180	kazmath/include/kazmath/utility.h	53;"	d
kmPIUnder180	kazmath/include/kazmath/utility.h	54;"	d
kmPlane	kazmath/include/kazmath/plane.h	/^typedef struct kmPlane {$/;"	s
kmPlane	kazmath/include/kazmath/plane.h	/^} kmPlane;$/;"	t	typeref:struct:kmPlane
kmPlane::a	kazmath/include/kazmath/plane.h	/^    kmScalar     a, b, c, d;$/;"	m	struct:kmPlane	access:public
kmPlane::b	kazmath/include/kazmath/plane.h	/^    kmScalar     a, b, c, d;$/;"	m	struct:kmPlane	access:public
kmPlane::c	kazmath/include/kazmath/plane.h	/^    kmScalar     a, b, c, d;$/;"	m	struct:kmPlane	access:public
kmPlane::d	kazmath/include/kazmath/plane.h	/^    kmScalar     a, b, c, d;$/;"	m	struct:kmPlane	access:public
kmPlaneClassifyPoint	kazmath/include/kazmath/plane.h	/^CC_DLL const POINT_CLASSIFICATION kmPlaneClassifyPoint(const kmPlane* pIn, const kmVec3* pP); \/** Classifies a point against a plane *\/$/;"	p	signature:(const kmPlane* pIn, const kmVec3* pP)
kmPlaneClassifyPoint	kazmath/src/plane.c	/^const POINT_CLASSIFICATION kmPlaneClassifyPoint(const kmPlane* pIn, const kmVec3* pP)$/;"	f	signature:(const kmPlane* pIn, const kmVec3* pP)
kmPlaneDot	kazmath/include/kazmath/plane.h	/^CC_DLL const kmScalar kmPlaneDot(const kmPlane* pP, const struct kmVec4* pV);$/;"	p	signature:(const kmPlane* pP, const struct kmVec4* pV)
kmPlaneDot	kazmath/src/plane.c	/^const kmScalar kmPlaneDot(const kmPlane* pP, const kmVec4* pV)$/;"	f	signature:(const kmPlane* pP, const kmVec4* pV)
kmPlaneDotCoord	kazmath/include/kazmath/plane.h	/^CC_DLL const kmScalar kmPlaneDotCoord(const kmPlane* pP, const struct kmVec3* pV);$/;"	p	signature:(const kmPlane* pP, const struct kmVec3* pV)
kmPlaneDotCoord	kazmath/src/plane.c	/^const kmScalar kmPlaneDotCoord(const kmPlane* pP, const kmVec3* pV)$/;"	f	signature:(const kmPlane* pP, const kmVec3* pV)
kmPlaneDotNormal	kazmath/include/kazmath/plane.h	/^CC_DLL const kmScalar kmPlaneDotNormal(const kmPlane* pP, const struct kmVec3* pV);$/;"	p	signature:(const kmPlane* pP, const struct kmVec3* pV)
kmPlaneDotNormal	kazmath/src/plane.c	/^const kmScalar kmPlaneDotNormal(const kmPlane* pP, const kmVec3* pV)$/;"	f	signature:(const kmPlane* pP, const kmVec3* pV)
kmPlaneFromPointNormal	kazmath/include/kazmath/plane.h	/^CC_DLL kmPlane* const kmPlaneFromPointNormal(kmPlane* pOut, const struct kmVec3* pPoint, const struct kmVec3* pNormal);$/;"	p	signature:(kmPlane* pOut, const struct kmVec3* pPoint, const struct kmVec3* pNormal)
kmPlaneFromPointNormal	kazmath/src/plane.c	/^kmPlane* const kmPlaneFromPointNormal(kmPlane* pOut, const kmVec3* pPoint, const kmVec3* pNormal)$/;"	f	signature:(kmPlane* pOut, const kmVec3* pPoint, const kmVec3* pNormal)
kmPlaneFromPoints	kazmath/include/kazmath/plane.h	/^CC_DLL kmPlane* const kmPlaneFromPoints(kmPlane* pOut, const struct kmVec3* p1, const struct kmVec3* p2, const struct kmVec3* p3);$/;"	p	signature:(kmPlane* pOut, const struct kmVec3* p1, const struct kmVec3* p2, const struct kmVec3* p3)
kmPlaneFromPoints	kazmath/src/plane.c	/^kmPlane* const kmPlaneFromPoints(kmPlane* pOut, const kmVec3* p1, const kmVec3* p2, const kmVec3* p3)$/;"	f	signature:(kmPlane* pOut, const kmVec3* p1, const kmVec3* p2, const kmVec3* p3)
kmPlaneIntersectLine	kazmath/include/kazmath/plane.h	/^CC_DLL kmVec3*  const kmPlaneIntersectLine(struct kmVec3* pOut, const kmPlane* pP, const struct kmVec3* pV1, const struct kmVec3* pV2);$/;"	p	signature:(struct kmVec3* pOut, const kmPlane* pP, const struct kmVec3* pV1, const struct kmVec3* pV2)
kmPlaneIntersectLine	kazmath/src/plane.c	/^kmVec3* const kmPlaneIntersectLine(kmVec3* pOut, const kmPlane* pP, const kmVec3* pV1, const kmVec3* pV2)$/;"	f	signature:(kmVec3* pOut, const kmPlane* pP, const kmVec3* pV1, const kmVec3* pV2)
kmPlaneNormalize	kazmath/include/kazmath/plane.h	/^CC_DLL kmPlane* const kmPlaneNormalize(kmPlane* pOut, const kmPlane* pP);$/;"	p	signature:(kmPlane* pOut, const kmPlane* pP)
kmPlaneNormalize	kazmath/src/plane.c	/^kmPlane* const kmPlaneNormalize(kmPlane* pOut, const kmPlane* pP)$/;"	f	signature:(kmPlane* pOut, const kmPlane* pP)
kmPlaneScale	kazmath/include/kazmath/plane.h	/^CC_DLL kmPlane* const kmPlaneScale(kmPlane* pOut, const kmPlane* pP, kmScalar s);$/;"	p	signature:(kmPlane* pOut, const kmPlane* pP, kmScalar s)
kmPlaneScale	kazmath/src/plane.c	/^kmPlane* const kmPlaneScale(kmPlane* pOut, const kmPlane* pP, kmScalar s)$/;"	f	signature:(kmPlane* pOut, const kmPlane* pP, kmScalar s)
kmQuaternion	kazmath/include/kazmath/quaternion.h	/^typedef struct kmQuaternion {$/;"	s
kmQuaternion	kazmath/include/kazmath/quaternion.h	/^} kmQuaternion;$/;"	t	typeref:struct:kmQuaternion
kmQuaternion::w	kazmath/include/kazmath/quaternion.h	/^    kmScalar w;$/;"	m	struct:kmQuaternion	access:public
kmQuaternion::x	kazmath/include/kazmath/quaternion.h	/^    kmScalar x;$/;"	m	struct:kmQuaternion	access:public
kmQuaternion::y	kazmath/include/kazmath/quaternion.h	/^    kmScalar y;$/;"	m	struct:kmQuaternion	access:public
kmQuaternion::z	kazmath/include/kazmath/quaternion.h	/^    kmScalar z;$/;"	m	struct:kmQuaternion	access:public
kmQuaternionAdd	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionAdd(kmQuaternion* pOut, const kmQuaternion* pQ1, const kmQuaternion* pQ2);$/;"	p	signature:(kmQuaternion* pOut, const kmQuaternion* pQ1, const kmQuaternion* pQ2)
kmQuaternionAdd	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionAdd(kmQuaternion* pOut, const kmQuaternion* pQ1, const kmQuaternion* pQ2)$/;"	f	signature:(kmQuaternion* pOut, const kmQuaternion* pQ1, const kmQuaternion* pQ2)
kmQuaternionAssign	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionAssign(kmQuaternion* pOut, const kmQuaternion* pIn);$/;"	p	signature:(kmQuaternion* pOut, const kmQuaternion* pIn)
kmQuaternionAssign	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionAssign(kmQuaternion* pOut, const kmQuaternion* pIn)$/;"	f	signature:(kmQuaternion* pOut, const kmQuaternion* pIn)
kmQuaternionConjugate	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* const kmQuaternionConjugate(kmQuaternion* pOut, const kmQuaternion* pIn); \/\/\/< Returns pOut, sets pOut to the conjugate of pIn$/;"	p	signature:(kmQuaternion* pOut, const kmQuaternion* pIn)
kmQuaternionConjugate	kazmath/src/quaternion.c	/^kmQuaternion* const kmQuaternionConjugate(kmQuaternion* pOut, const kmQuaternion* pIn)$/;"	f	signature:(kmQuaternion* pOut, const kmQuaternion* pIn)
kmQuaternionDot	kazmath/include/kazmath/quaternion.h	/^CC_DLL const kmScalar     kmQuaternionDot(const kmQuaternion* q1, const kmQuaternion* q2); \/\/\/< Returns the dot product of the 2 quaternions$/;"	p	signature:(const kmQuaternion* q1, const kmQuaternion* q2)
kmQuaternionDot	kazmath/src/quaternion.c	/^const kmScalar kmQuaternionDot(const kmQuaternion* q1, const kmQuaternion* q2)$/;"	f	signature:(const kmQuaternion* q1, const kmQuaternion* q2)
kmQuaternionExp	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionExp(kmQuaternion* pOut, const kmQuaternion* pIn); \/\/\/< Returns the exponential of the quaternion$/;"	p	signature:(kmQuaternion* pOut, const kmQuaternion* pIn)
kmQuaternionExp	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionExp(kmQuaternion* pOut, const kmQuaternion* pIn)$/;"	f	signature:(kmQuaternion* pOut, const kmQuaternion* pIn)
kmQuaternionIdentity	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionIdentity(kmQuaternion* pOut);$/;"	p	signature:(kmQuaternion* pOut)
kmQuaternionIdentity	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionIdentity(kmQuaternion* pOut)$/;"	f	signature:(kmQuaternion* pOut)
kmQuaternionInverse	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionInverse(kmQuaternion* pOut,$/;"	p	signature:(kmQuaternion* pOut, const kmQuaternion* pIn)
kmQuaternionInverse	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionInverse(kmQuaternion* pOut,$/;"	f	signature:(kmQuaternion* pOut, const kmQuaternion* pIn)
kmQuaternionIsIdentity	kazmath/include/kazmath/quaternion.h	/^CC_DLL int kmQuaternionIsIdentity(const kmQuaternion* pIn);$/;"	p	signature:(const kmQuaternion* pIn)
kmQuaternionIsIdentity	kazmath/src/quaternion.c	/^int kmQuaternionIsIdentity(const kmQuaternion* pIn)$/;"	f	signature:(const kmQuaternion* pIn)
kmQuaternionLength	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmScalar kmQuaternionLength(const kmQuaternion* pIn);$/;"	p	signature:(const kmQuaternion* pIn)
kmQuaternionLength	kazmath/src/quaternion.c	/^kmScalar kmQuaternionLength(const kmQuaternion* pIn)$/;"	f	signature:(const kmQuaternion* pIn)
kmQuaternionLengthSq	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmScalar kmQuaternionLengthSq(const kmQuaternion* pIn);$/;"	p	signature:(const kmQuaternion* pIn)
kmQuaternionLengthSq	kazmath/src/quaternion.c	/^kmScalar kmQuaternionLengthSq(const kmQuaternion* pIn)$/;"	f	signature:(const kmQuaternion* pIn)
kmQuaternionLn	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionLn(kmQuaternion* pOut, const kmQuaternion* pIn);$/;"	p	signature:(kmQuaternion* pOut, const kmQuaternion* pIn)
kmQuaternionLn	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionLn(kmQuaternion* pOut,$/;"	f	signature:(kmQuaternion* pOut, const kmQuaternion* pIn)
kmQuaternionMultiply	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionMultiply(kmQuaternion* pOut, const kmQuaternion* q1, const kmQuaternion* q2);$/;"	p	signature:(kmQuaternion* pOut, const kmQuaternion* q1, const kmQuaternion* q2)
kmQuaternionMultiply	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionMultiply(kmQuaternion* pOut,$/;"	f	signature:(kmQuaternion* pOut, const kmQuaternion* q1, const kmQuaternion* q2)
kmQuaternionMultiplyVec3	kazmath/include/kazmath/quaternion.h	/^CC_DLL struct kmVec3* kmQuaternionMultiplyVec3(struct kmVec3* pOut, const kmQuaternion* q, const struct kmVec3* v);$/;"	p	signature:(struct kmVec3* pOut, const kmQuaternion* q, const struct kmVec3* v)
kmQuaternionMultiplyVec3	kazmath/src/quaternion.c	/^kmVec3* kmQuaternionMultiplyVec3(kmVec3* pOut, const kmQuaternion* q, const kmVec3* v) {$/;"	f	signature:(kmVec3* pOut, const kmQuaternion* q, const kmVec3* v)
kmQuaternionNormalize	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionNormalize(kmQuaternion* pOut, const kmQuaternion* pIn);$/;"	p	signature:(kmQuaternion* pOut, const kmQuaternion* pIn)
kmQuaternionNormalize	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionNormalize(kmQuaternion* pOut,$/;"	f	signature:(kmQuaternion* pOut, const kmQuaternion* pIn)
kmQuaternionRotationAxis	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionRotationAxis(kmQuaternion* pOut, const struct kmVec3* pV, kmScalar angle);$/;"	p	signature:(kmQuaternion* pOut, const struct kmVec3* pV, kmScalar angle)
kmQuaternionRotationAxis	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionRotationAxis(kmQuaternion* pOut,$/;"	f	signature:(kmQuaternion* pOut, const kmVec3* pV, kmScalar angle)
kmQuaternionRotationBetweenVec3	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionRotationBetweenVec3(kmQuaternion* pOut, const struct kmVec3* vec1, const struct kmVec3* vec2, const struct kmVec3* fallback);$/;"	p	signature:(kmQuaternion* pOut, const struct kmVec3* vec1, const struct kmVec3* vec2, const struct kmVec3* fallback)
kmQuaternionRotationBetweenVec3	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionRotationBetweenVec3(kmQuaternion* pOut, const kmVec3* vec1, const kmVec3* vec2, const kmVec3* fallback) {$/;"	f	signature:(kmQuaternion* pOut, const kmVec3* vec1, const kmVec3* vec2, const kmVec3* fallback)
kmQuaternionRotationMatrix	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionRotationMatrix(kmQuaternion* pOut, const struct kmMat3* pIn);$/;"	p	signature:(kmQuaternion* pOut, const struct kmMat3* pIn)
kmQuaternionRotationMatrix	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionRotationMatrix(kmQuaternion* pOut,$/;"	f	signature:(kmQuaternion* pOut, const kmMat3* pIn)
kmQuaternionRotationYawPitchRoll	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionRotationYawPitchRoll(kmQuaternion* pOut, kmScalar yaw, kmScalar pitch, kmScalar roll);$/;"	p	signature:(kmQuaternion* pOut, kmScalar yaw, kmScalar pitch, kmScalar roll)
kmQuaternionRotationYawPitchRoll	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionRotationYawPitchRoll(kmQuaternion* pOut,$/;"	f	signature:(kmQuaternion* pOut, kmScalar yaw, kmScalar pitch, kmScalar roll)
kmQuaternionScale	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionScale(kmQuaternion* pOut, const kmQuaternion* pIn, kmScalar s);$/;"	p	signature:(kmQuaternion* pOut, const kmQuaternion* pIn, kmScalar s)
kmQuaternionScale	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionScale(kmQuaternion* pOut,$/;"	f	signature:(kmQuaternion* pOut, const kmQuaternion* pIn, kmScalar s)
kmQuaternionSlerp	kazmath/include/kazmath/quaternion.h	/^CC_DLL kmQuaternion* kmQuaternionSlerp(kmQuaternion* pOut, const kmQuaternion* q1, const kmQuaternion* q2, kmScalar t);$/;"	p	signature:(kmQuaternion* pOut, const kmQuaternion* q1, const kmQuaternion* q2, kmScalar t)
kmQuaternionSlerp	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionSlerp(kmQuaternion* pOut,$/;"	f	signature:(kmQuaternion* pOut, const kmQuaternion* q1, const kmQuaternion* q2, kmScalar t)
kmQuaternionToAxisAngle	kazmath/include/kazmath/quaternion.h	/^CC_DLL void kmQuaternionToAxisAngle(const kmQuaternion* pIn, struct kmVec3* pVector, kmScalar* pAngle);$/;"	p	signature:(const kmQuaternion* pIn, struct kmVec3* pVector, kmScalar* pAngle)
kmQuaternionToAxisAngle	kazmath/src/quaternion.c	/^void kmQuaternionToAxisAngle(const kmQuaternion* pIn,$/;"	f	signature:(const kmQuaternion* pIn, kmVec3* pAxis, kmScalar* pAngle)
kmRadiansToDegrees	kazmath/include/kazmath/utility.h	/^CC_DLL kmScalar kmRadiansToDegrees(kmScalar radians);$/;"	p	signature:(kmScalar radians)
kmRadiansToDegrees	kazmath/src/utility.c	/^kmScalar kmRadiansToDegrees(kmScalar radians) {$/;"	f	signature:(kmScalar radians)
kmRay2	kazmath/include/kazmath/ray2.h	/^typedef struct kmRay2 {$/;"	s
kmRay2	kazmath/include/kazmath/ray2.h	/^} kmRay2;$/;"	t	typeref:struct:kmRay2
kmRay2::dir	kazmath/include/kazmath/ray2.h	/^    kmVec2 dir;$/;"	m	struct:kmRay2	access:public
kmRay2::start	kazmath/include/kazmath/ray2.h	/^    kmVec2 start;$/;"	m	struct:kmRay2	access:public
kmRay2Fill	kazmath/include/kazmath/ray2.h	/^CC_DLL void kmRay2Fill(kmRay2* ray, kmScalar px, kmScalar py, kmScalar vx, kmScalar vy);$/;"	p	signature:(kmRay2* ray, kmScalar px, kmScalar py, kmScalar vx, kmScalar vy)
kmRay2Fill	kazmath/src/ray2.c	/^void kmRay2Fill(kmRay2* ray, kmScalar px, kmScalar py, kmScalar vx, kmScalar vy) {$/;"	f	signature:(kmRay2* ray, kmScalar px, kmScalar py, kmScalar vx, kmScalar vy)
kmRay2IntersectCircle	kazmath/include/kazmath/ray2.h	/^CC_DLL kmBool kmRay2IntersectCircle(const kmRay2* ray, const kmVec2 centre, const kmScalar radius, kmVec2* intersection);$/;"	p	signature:(const kmRay2* ray, const kmVec2 centre, const kmScalar radius, kmVec2* intersection)
kmRay2IntersectCircle	kazmath/src/ray2.c	/^kmBool kmRay2IntersectCircle(const kmRay2* ray, const kmVec2 centre, const kmScalar radius, kmVec2* intersection) {$/;"	f	signature:(const kmRay2* ray, const kmVec2 centre, const kmScalar radius, kmVec2* intersection)
kmRay2IntersectLineSegment	kazmath/include/kazmath/ray2.h	/^CC_DLL kmBool kmRay2IntersectLineSegment(const kmRay2* ray, const kmVec2* p1, const kmVec2* p2, kmVec2* intersection);$/;"	p	signature:(const kmRay2* ray, const kmVec2* p1, const kmVec2* p2, kmVec2* intersection)
kmRay2IntersectLineSegment	kazmath/src/ray2.c	/^kmBool kmRay2IntersectLineSegment(const kmRay2* ray, const kmVec2* p1, const kmVec2* p2, kmVec2* intersection) {$/;"	f	signature:(const kmRay2* ray, const kmVec2* p1, const kmVec2* p2, kmVec2* intersection)
kmRay2IntersectTriangle	kazmath/include/kazmath/ray2.h	/^CC_DLL kmBool kmRay2IntersectTriangle(const kmRay2* ray, const kmVec2* p1, const kmVec2* p2, const kmVec2* p3, kmVec2* intersection, kmVec2* normal_out);$/;"	p	signature:(const kmRay2* ray, const kmVec2* p1, const kmVec2* p2, const kmVec2* p3, kmVec2* intersection, kmVec2* normal_out)
kmRay2IntersectTriangle	kazmath/src/ray2.c	/^kmBool kmRay2IntersectTriangle(const kmRay2* ray, const kmVec2* p1, const kmVec2* p2, const kmVec2* p3, kmVec2* intersection, kmVec2* normal_out) {$/;"	f	signature:(const kmRay2* ray, const kmVec2* p1, const kmVec2* p2, const kmVec2* p3, kmVec2* intersection, kmVec2* normal_out)
kmSQR	kazmath/include/kazmath/utility.h	/^CC_DLL kmScalar kmSQR(kmScalar s);$/;"	p	signature:(kmScalar s)
kmSQR	kazmath/src/utility.c	/^kmScalar kmSQR(kmScalar s) {$/;"	f	signature:(kmScalar s)
kmScalar	kazmath/include/kazmath/utility.h	33;"	d
kmScalar	kazmath/include/kazmath/vec2.h	34;"	d
kmScalar	kazmath/include/kazmath/vec3.h	33;"	d
kmVec2	kazmath/include/kazmath/vec2.h	/^typedef struct kmVec2 {$/;"	s
kmVec2	kazmath/include/kazmath/vec2.h	/^} kmVec2;$/;"	t	typeref:struct:kmVec2
kmVec2::x	kazmath/include/kazmath/vec2.h	/^    kmScalar x;$/;"	m	struct:kmVec2	access:public
kmVec2::y	kazmath/include/kazmath/vec2.h	/^    kmScalar y;$/;"	m	struct:kmVec2	access:public
kmVec2Add	kazmath/include/kazmath/vec2.h	/^CC_DLL kmVec2* kmVec2Add(kmVec2* pOut, const kmVec2* pV1, const kmVec2* pV2); \/\/\/< Adds 2 vectors and returns the result$/;"	p	signature:(kmVec2* pOut, const kmVec2* pV1, const kmVec2* pV2)
kmVec2Add	kazmath/src/vec2.c	/^kmVec2* kmVec2Add(kmVec2* pOut, const kmVec2* pV1, const kmVec2* pV2)$/;"	f	signature:(kmVec2* pOut, const kmVec2* pV1, const kmVec2* pV2)
kmVec2AreEqual	kazmath/include/kazmath/vec2.h	/^CC_DLL int kmVec2AreEqual(const kmVec2* p1, const kmVec2* p2); \/\/\/< Returns 1 if both vectors are equal$/;"	p	signature:(const kmVec2* p1, const kmVec2* p2)
kmVec2AreEqual	kazmath/src/vec2.c	/^int kmVec2AreEqual(const kmVec2* p1, const kmVec2* p2)$/;"	f	signature:(const kmVec2* p1, const kmVec2* p2)
kmVec2Dot	kazmath/include/kazmath/vec2.h	/^CC_DLL kmScalar kmVec2Dot(const kmVec2* pV1, const kmVec2* pV2); \/** Returns the Dot product which is the cosine of the angle between the two vectors multiplied by their lengths *\/$/;"	p	signature:(const kmVec2* pV1, const kmVec2* pV2)
kmVec2Dot	kazmath/src/vec2.c	/^kmScalar kmVec2Dot(const kmVec2* pV1, const kmVec2* pV2)$/;"	f	signature:(const kmVec2* pV1, const kmVec2* pV2)
kmVec2Fill	kazmath/include/kazmath/vec2.h	/^CC_DLL kmVec2* kmVec2Fill(kmVec2* pOut, kmScalar x, kmScalar y);$/;"	p	signature:(kmVec2* pOut, kmScalar x, kmScalar y)
kmVec2Fill	kazmath/src/vec2.c	/^kmVec2* kmVec2Fill(kmVec2* pOut, kmScalar x, kmScalar y)$/;"	f	signature:(kmVec2* pOut, kmScalar x, kmScalar y)
kmVec2Length	kazmath/include/kazmath/vec2.h	/^CC_DLL kmScalar kmVec2Length(const kmVec2* pIn); \/\/\/< Returns the length of the vector$/;"	p	signature:(const kmVec2* pIn)
kmVec2Length	kazmath/src/vec2.c	/^kmScalar kmVec2Length(const kmVec2* pIn)$/;"	f	signature:(const kmVec2* pIn)
kmVec2LengthSq	kazmath/include/kazmath/vec2.h	/^CC_DLL kmScalar kmVec2LengthSq(const kmVec2* pIn); \/\/\/< Returns the square of the length of the vector$/;"	p	signature:(const kmVec2* pIn)
kmVec2LengthSq	kazmath/src/vec2.c	/^kmScalar kmVec2LengthSq(const kmVec2* pIn)$/;"	f	signature:(const kmVec2* pIn)
kmVec2Normalize	kazmath/include/kazmath/vec2.h	/^CC_DLL kmVec2* kmVec2Normalize(kmVec2* pOut, const kmVec2* pIn); \/\/\/< Returns the vector passed in set to unit length$/;"	p	signature:(kmVec2* pOut, const kmVec2* pIn)
kmVec2Normalize	kazmath/src/vec2.c	/^kmVec2* kmVec2Normalize(kmVec2* pOut, const kmVec2* pIn)$/;"	f	signature:(kmVec2* pOut, const kmVec2* pIn)
kmVec2Scale	kazmath/include/kazmath/vec2.h	/^CC_DLL kmVec2* kmVec2Scale(kmVec2* pOut, const kmVec2* pIn, const kmScalar s); \/\/\/< Scales a vector to length s$/;"	p	signature:(kmVec2* pOut, const kmVec2* pIn, const kmScalar s)
kmVec2Scale	kazmath/src/vec2.c	/^kmVec2* kmVec2Scale(kmVec2* pOut, const kmVec2* pIn, const kmScalar s)$/;"	f	signature:(kmVec2* pOut, const kmVec2* pIn, const kmScalar s)
kmVec2Subtract	kazmath/include/kazmath/vec2.h	/^CC_DLL kmVec2* kmVec2Subtract(kmVec2* pOut, const kmVec2* pV1, const kmVec2* pV2); \/\/\/< Subtracts 2 vectors and returns the result$/;"	p	signature:(kmVec2* pOut, const kmVec2* pV1, const kmVec2* pV2)
kmVec2Subtract	kazmath/src/vec2.c	/^kmVec2* kmVec2Subtract(kmVec2* pOut, const kmVec2* pV1, const kmVec2* pV2)$/;"	f	signature:(kmVec2* pOut, const kmVec2* pV1, const kmVec2* pV2)
kmVec2Transform	kazmath/include/kazmath/vec2.h	/^CC_DLL kmVec2* kmVec2Transform(kmVec2* pOut, const kmVec2* pV1, const struct kmMat3* pM); \/** Transform the Vector *\/$/;"	p	signature:(kmVec2* pOut, const kmVec2* pV1, const struct kmMat3* pM)
kmVec2Transform	kazmath/src/vec2.c	/^kmVec2* kmVec2Transform(kmVec2* pOut, const kmVec2* pV, const kmMat3* pM)$/;"	f	signature:(kmVec2* pOut, const kmVec2* pV, const kmMat3* pM)
kmVec2TransformCoord	kazmath/include/kazmath/vec2.h	/^CC_DLL kmVec2* kmVec2TransformCoord(kmVec2* pOut, const kmVec2* pV, const struct kmMat3* pM); \/\/\/<Transforms a 2D vector by a given matrix, projecting the result back into w = 1.$/;"	p	signature:(kmVec2* pOut, const kmVec2* pV, const struct kmMat3* pM)
kmVec2TransformCoord	kazmath/src/vec2.c	/^kmVec2* kmVec2TransformCoord(kmVec2* pOut, const kmVec2* pV, const kmMat3* pM)$/;"	f	signature:(kmVec2* pOut, const kmVec2* pV, const kmMat3* pM)
kmVec3	kazmath/include/kazmath/vec3.h	/^typedef struct kmVec3 {$/;"	s
kmVec3	kazmath/include/kazmath/vec3.h	/^} kmVec3;$/;"	t	typeref:struct:kmVec3
kmVec3::x	kazmath/include/kazmath/vec3.h	/^    kmScalar x;$/;"	m	struct:kmVec3	access:public
kmVec3::y	kazmath/include/kazmath/vec3.h	/^    kmScalar y;$/;"	m	struct:kmVec3	access:public
kmVec3::z	kazmath/include/kazmath/vec3.h	/^    kmScalar z;$/;"	m	struct:kmVec3	access:public
kmVec3Add	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3Add(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2); \/** Adds 2 vectors and returns the result *\/$/;"	p	signature:(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2)
kmVec3Add	kazmath/src/vec3.c	/^kmVec3* kmVec3Add(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2)$/;"	f	signature:(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2)
kmVec3AreEqual	kazmath/include/kazmath/vec3.h	/^CC_DLL int kmVec3AreEqual(const kmVec3* p1, const kmVec3* p2);$/;"	p	signature:(const kmVec3* p1, const kmVec3* p2)
kmVec3AreEqual	kazmath/src/vec3.c	/^int kmVec3AreEqual(const kmVec3* p1, const kmVec3* p2)$/;"	f	signature:(const kmVec3* p1, const kmVec3* p2)
kmVec3Assign	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3Assign(kmVec3* pOut, const kmVec3* pIn);$/;"	p	signature:(kmVec3* pOut, const kmVec3* pIn)
kmVec3Assign	kazmath/src/vec3.c	/^kmVec3* kmVec3Assign(kmVec3* pOut, const kmVec3* pIn) {$/;"	f	signature:(kmVec3* pOut, const kmVec3* pIn)
kmVec3Cross	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3Cross(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2); \/** Returns a vector perpendicular to 2 other vectors *\/$/;"	p	signature:(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2)
kmVec3Cross	kazmath/src/vec3.c	/^kmVec3* kmVec3Cross(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2)$/;"	f	signature:(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2)
kmVec3Dot	kazmath/include/kazmath/vec3.h	/^CC_DLL kmScalar kmVec3Dot(const kmVec3* pV1, const kmVec3* pV2); \/** Returns the cosine of the angle between 2 vectors *\/$/;"	p	signature:(const kmVec3* pV1, const kmVec3* pV2)
kmVec3Dot	kazmath/src/vec3.c	/^kmScalar kmVec3Dot(const kmVec3* pV1, const kmVec3* pV2)$/;"	f	signature:(const kmVec3* pV1, const kmVec3* pV2)
kmVec3Fill	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3Fill(kmVec3* pOut, kmScalar x, kmScalar y, kmScalar z);$/;"	p	signature:(kmVec3* pOut, kmScalar x, kmScalar y, kmScalar z)
kmVec3Fill	kazmath/src/vec3.c	/^kmVec3* kmVec3Fill(kmVec3* pOut, kmScalar x, kmScalar y, kmScalar z)$/;"	f	signature:(kmVec3* pOut, kmScalar x, kmScalar y, kmScalar z)
kmVec3InverseTransform	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3InverseTransform(kmVec3* pOut, const kmVec3* pV, const struct kmMat4* pM);$/;"	p	signature:(kmVec3* pOut, const kmVec3* pV, const struct kmMat4* pM)
kmVec3InverseTransform	kazmath/src/vec3.c	/^kmVec3* kmVec3InverseTransform(kmVec3* pOut, const kmVec3* pVect, const kmMat4* pM)$/;"	f	signature:(kmVec3* pOut, const kmVec3* pVect, const kmMat4* pM)
kmVec3InverseTransformNormal	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3InverseTransformNormal(kmVec3* pOut, const kmVec3* pVect, const struct kmMat4* pM);$/;"	p	signature:(kmVec3* pOut, const kmVec3* pVect, const struct kmMat4* pM)
kmVec3InverseTransformNormal	kazmath/src/vec3.c	/^kmVec3* kmVec3InverseTransformNormal(kmVec3* pOut, const kmVec3* pVect, const kmMat4* pM)$/;"	f	signature:(kmVec3* pOut, const kmVec3* pVect, const kmMat4* pM)
kmVec3Length	kazmath/include/kazmath/vec3.h	/^CC_DLL kmScalar kmVec3Length(const kmVec3* pIn); \/** Returns the length of the vector *\/$/;"	p	signature:(const kmVec3* pIn)
kmVec3Length	kazmath/src/vec3.c	/^kmScalar kmVec3Length(const kmVec3* pIn)$/;"	f	signature:(const kmVec3* pIn)
kmVec3LengthSq	kazmath/include/kazmath/vec3.h	/^CC_DLL kmScalar kmVec3LengthSq(const kmVec3* pIn); \/** Returns the square of the length of the vector *\/$/;"	p	signature:(const kmVec3* pIn)
kmVec3LengthSq	kazmath/src/vec3.c	/^kmScalar kmVec3LengthSq(const kmVec3* pIn)$/;"	f	signature:(const kmVec3* pIn)
kmVec3Normalize	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3Normalize(kmVec3* pOut, const kmVec3* pIn); \/** Returns the vector passed in set to unit length *\/$/;"	p	signature:(kmVec3* pOut, const kmVec3* pIn)
kmVec3Normalize	kazmath/src/vec3.c	/^kmVec3* kmVec3Normalize(kmVec3* pOut, const kmVec3* pIn)$/;"	f	signature:(kmVec3* pOut, const kmVec3* pIn)
kmVec3Scale	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3Scale(kmVec3* pOut, const kmVec3* pIn, const kmScalar s); \/** Scales a vector to length s *\/$/;"	p	signature:(kmVec3* pOut, const kmVec3* pIn, const kmScalar s)
kmVec3Scale	kazmath/src/vec3.c	/^kmVec3* kmVec3Scale(kmVec3* pOut, const kmVec3* pIn, const kmScalar s)$/;"	f	signature:(kmVec3* pOut, const kmVec3* pIn, const kmScalar s)
kmVec3Subtract	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3Subtract(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2); \/** Subtracts 2 vectors and returns the result *\/$/;"	p	signature:(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2)
kmVec3Subtract	kazmath/src/vec3.c	/^kmVec3* kmVec3Subtract(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2)$/;"	f	signature:(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2)
kmVec3Transform	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3Transform(kmVec3* pOut, const kmVec3* pV1, const struct kmMat4* pM); \/** Transforms a vector (assuming w=1) by a given matrix *\/$/;"	p	signature:(kmVec3* pOut, const kmVec3* pV1, const struct kmMat4* pM)
kmVec3Transform	kazmath/src/vec3.c	/^kmVec3* kmVec3Transform(kmVec3* pOut, const kmVec3* pV, const kmMat4* pM)$/;"	f	signature:(kmVec3* pOut, const kmVec3* pV, const kmMat4* pM)
kmVec3TransformCoord	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3TransformCoord(kmVec3* pOut, const kmVec3* pV, const struct kmMat4* pM); \/**Transforms a 3D vector by a given matrix, projecting the result back into w = 1. *\/$/;"	p	signature:(kmVec3* pOut, const kmVec3* pV, const struct kmMat4* pM)
kmVec3TransformCoord	kazmath/src/vec3.c	/^kmVec3* kmVec3TransformCoord(kmVec3* pOut, const kmVec3* pV, const kmMat4* pM)$/;"	f	signature:(kmVec3* pOut, const kmVec3* pV, const kmMat4* pM)
kmVec3TransformNormal	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3TransformNormal(kmVec3* pOut, const kmVec3* pV, const struct kmMat4* pM);\/**Transforms a 3D normal by a given matrix *\/$/;"	p	signature:(kmVec3* pOut, const kmVec3* pV, const struct kmMat4* pM)
kmVec3TransformNormal	kazmath/src/vec3.c	/^kmVec3* kmVec3TransformNormal(kmVec3* pOut, const kmVec3* pV, const kmMat4* pM)$/;"	f	signature:(kmVec3* pOut, const kmVec3* pV, const kmMat4* pM)
kmVec3Zero	kazmath/include/kazmath/vec3.h	/^CC_DLL kmVec3* kmVec3Zero(kmVec3* pOut);$/;"	p	signature:(kmVec3* pOut)
kmVec3Zero	kazmath/src/vec3.c	/^kmVec3* kmVec3Zero(kmVec3* pOut) {$/;"	f	signature:(kmVec3* pOut)
kmVec4	kazmath/include/kazmath/vec4.h	/^typedef struct kmVec4 {$/;"	s
kmVec4	kazmath/include/kazmath/vec4.h	/^} kmVec4;$/;"	t	typeref:struct:kmVec4
kmVec4::w	kazmath/include/kazmath/vec4.h	/^    kmScalar w;$/;"	m	struct:kmVec4	access:public
kmVec4::x	kazmath/include/kazmath/vec4.h	/^    kmScalar x;$/;"	m	struct:kmVec4	access:public
kmVec4::y	kazmath/include/kazmath/vec4.h	/^    kmScalar y;$/;"	m	struct:kmVec4	access:public
kmVec4::z	kazmath/include/kazmath/vec4.h	/^    kmScalar z;$/;"	m	struct:kmVec4	access:public
kmVec4Add	kazmath/include/kazmath/vec4.h	/^CC_DLL kmVec4* kmVec4Add(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2);$/;"	p	signature:(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2)
kmVec4Add	kazmath/src/vec4.c	/^kmVec4* kmVec4Add(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2) {$/;"	f	signature:(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2)
kmVec4AreEqual	kazmath/include/kazmath/vec4.h	/^CC_DLL int     kmVec4AreEqual(const kmVec4* p1, const kmVec4* p2);$/;"	p	signature:(const kmVec4* p1, const kmVec4* p2)
kmVec4AreEqual	kazmath/src/vec4.c	/^int kmVec4AreEqual(const kmVec4* p1, const kmVec4* p2) {$/;"	f	signature:(const kmVec4* p1, const kmVec4* p2)
kmVec4Assign	kazmath/include/kazmath/vec4.h	/^CC_DLL kmVec4* kmVec4Assign(kmVec4* pOut, const kmVec4* pIn);$/;"	p	signature:(kmVec4* pOut, const kmVec4* pIn)
kmVec4Assign	kazmath/src/vec4.c	/^kmVec4* kmVec4Assign(kmVec4* pOut, const kmVec4* pIn) {$/;"	f	signature:(kmVec4* pOut, const kmVec4* pIn)
kmVec4Dot	kazmath/include/kazmath/vec4.h	/^CC_DLL kmScalar kmVec4Dot(const kmVec4* pV1, const kmVec4* pV2);$/;"	p	signature:(const kmVec4* pV1, const kmVec4* pV2)
kmVec4Dot	kazmath/src/vec4.c	/^kmScalar kmVec4Dot(const kmVec4* pV1, const kmVec4* pV2) {$/;"	f	signature:(const kmVec4* pV1, const kmVec4* pV2)
kmVec4Fill	kazmath/include/kazmath/vec4.h	/^CC_DLL kmVec4* kmVec4Fill(kmVec4* pOut, kmScalar x, kmScalar y, kmScalar z, kmScalar w);$/;"	p	signature:(kmVec4* pOut, kmScalar x, kmScalar y, kmScalar z, kmScalar w)
kmVec4Fill	kazmath/src/vec4.c	/^kmVec4* kmVec4Fill(kmVec4* pOut, kmScalar x, kmScalar y, kmScalar z, kmScalar w)$/;"	f	signature:(kmVec4* pOut, kmScalar x, kmScalar y, kmScalar z, kmScalar w)
kmVec4Length	kazmath/include/kazmath/vec4.h	/^CC_DLL kmScalar kmVec4Length(const kmVec4* pIn);$/;"	p	signature:(const kmVec4* pIn)
kmVec4Length	kazmath/src/vec4.c	/^kmScalar kmVec4Length(const kmVec4* pIn) {$/;"	f	signature:(const kmVec4* pIn)
kmVec4LengthSq	kazmath/include/kazmath/vec4.h	/^CC_DLL kmScalar kmVec4LengthSq(const kmVec4* pIn);$/;"	p	signature:(const kmVec4* pIn)
kmVec4LengthSq	kazmath/src/vec4.c	/^kmScalar kmVec4LengthSq(const kmVec4* pIn) {$/;"	f	signature:(const kmVec4* pIn)
kmVec4Lerp	kazmath/include/kazmath/vec4.h	/^CC_DLL kmVec4* kmVec4Lerp(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2, kmScalar t);$/;"	p	signature:(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2, kmScalar t)
kmVec4Lerp	kazmath/src/vec4.c	/^kmVec4* kmVec4Lerp(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2, kmScalar t) {$/;"	f	signature:(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2, kmScalar t)
kmVec4Normalize	kazmath/include/kazmath/vec4.h	/^CC_DLL kmVec4* kmVec4Normalize(kmVec4* pOut, const kmVec4* pIn);$/;"	p	signature:(kmVec4* pOut, const kmVec4* pIn)
kmVec4Normalize	kazmath/src/vec4.c	/^kmVec4* kmVec4Normalize(kmVec4* pOut, const kmVec4* pIn) {$/;"	f	signature:(kmVec4* pOut, const kmVec4* pIn)
kmVec4Scale	kazmath/include/kazmath/vec4.h	/^CC_DLL kmVec4* kmVec4Scale(kmVec4* pOut, const kmVec4* pIn, const kmScalar s); \/\/\/< Scales a vector to length s$/;"	p	signature:(kmVec4* pOut, const kmVec4* pIn, const kmScalar s)
kmVec4Scale	kazmath/src/vec4.c	/^kmVec4* kmVec4Scale(kmVec4* pOut, const kmVec4* pIn, const kmScalar s) {$/;"	f	signature:(kmVec4* pOut, const kmVec4* pIn, const kmScalar s)
kmVec4Subtract	kazmath/include/kazmath/vec4.h	/^CC_DLL kmVec4* kmVec4Subtract(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2);$/;"	p	signature:(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2)
kmVec4Subtract	kazmath/src/vec4.c	/^kmVec4* kmVec4Subtract(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2) {$/;"	f	signature:(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2)
kmVec4Transform	kazmath/include/kazmath/vec4.h	/^CC_DLL kmVec4* kmVec4Transform(kmVec4* pOut, const kmVec4* pV, const struct kmMat4* pM);$/;"	p	signature:(kmVec4* pOut, const kmVec4* pV, const struct kmMat4* pM)
kmVec4Transform	kazmath/src/vec4.c	/^kmVec4* kmVec4Transform(kmVec4* pOut, const kmVec4* pV, const kmMat4* pM) {$/;"	f	signature:(kmVec4* pOut, const kmVec4* pV, const kmMat4* pM)
kmVec4TransformArray	kazmath/include/kazmath/vec4.h	/^CC_DLL kmVec4* kmVec4TransformArray(kmVec4* pOut, unsigned int outStride,$/;"	p	signature:(kmVec4* pOut, unsigned int outStride, const kmVec4* pV, unsigned int vStride, const struct kmMat4* pM, unsigned int count)
kmVec4TransformArray	kazmath/src/vec4.c	/^kmVec4* kmVec4TransformArray(kmVec4* pOut, unsigned int outStride,$/;"	f	signature:(kmVec4* pOut, unsigned int outStride, const kmVec4* pV, unsigned int vStride, const kmMat4* pM, unsigned int count)
km_mat4_stack	kazmath/include/kazmath/GL/mat4stack.h	/^typedef struct km_mat4_stack {$/;"	s
km_mat4_stack	kazmath/include/kazmath/GL/mat4stack.h	/^} km_mat4_stack;$/;"	t	typeref:struct:km_mat4_stack
km_mat4_stack::capacity	kazmath/include/kazmath/GL/mat4stack.h	/^    int capacity; \/\/The total item capacity$/;"	m	struct:km_mat4_stack	access:public
km_mat4_stack::item_count	kazmath/include/kazmath/GL/mat4stack.h	/^    int item_count; \/\/The number of items$/;"	m	struct:km_mat4_stack	access:public
km_mat4_stack::stack	kazmath/include/kazmath/GL/mat4stack.h	/^    kmMat4* stack;$/;"	m	struct:km_mat4_stack	access:public
km_mat4_stack::top	kazmath/include/kazmath/GL/mat4stack.h	/^    kmMat4* top;$/;"	m	struct:km_mat4_stack	access:public
km_mat4_stack_initialize	kazmath/include/kazmath/GL/mat4stack.h	/^void km_mat4_stack_initialize(km_mat4_stack* stack);$/;"	p	signature:(km_mat4_stack* stack)
km_mat4_stack_initialize	kazmath/src/GL/mat4stack.c	/^void km_mat4_stack_initialize(km_mat4_stack* stack) {$/;"	f	signature:(km_mat4_stack* stack)
km_mat4_stack_pop	kazmath/include/kazmath/GL/mat4stack.h	/^void km_mat4_stack_pop(km_mat4_stack* stack, kmMat4* pOut);$/;"	p	signature:(km_mat4_stack* stack, kmMat4* pOut)
km_mat4_stack_pop	kazmath/src/GL/mat4stack.c	/^void km_mat4_stack_pop(km_mat4_stack* stack, kmMat4* pOut)$/;"	f	signature:(km_mat4_stack* stack, kmMat4* pOut)
km_mat4_stack_push	kazmath/include/kazmath/GL/mat4stack.h	/^void km_mat4_stack_push(km_mat4_stack* stack, const kmMat4* item);$/;"	p	signature:(km_mat4_stack* stack, const kmMat4* item)
km_mat4_stack_push	kazmath/src/GL/mat4stack.c	/^void km_mat4_stack_push(km_mat4_stack* stack, const kmMat4* item)$/;"	f	signature:(km_mat4_stack* stack, const kmMat4* item)
km_mat4_stack_release	kazmath/include/kazmath/GL/mat4stack.h	/^void km_mat4_stack_release(km_mat4_stack* stack);$/;"	p	signature:(km_mat4_stack* stack)
km_mat4_stack_release	kazmath/src/GL/mat4stack.c	/^void km_mat4_stack_release(km_mat4_stack* stack) {$/;"	f	signature:(km_mat4_stack* stack)
lastObject	cocoa/CCArray.cpp	/^CCObject* CCArray::lastObject()$/;"	f	class:CCArray	signature:()
lastObject	cocoa/CCArray.h	/^    CCObject* lastObject();$/;"	p	class:CCArray	access:public	signature:()
layerNamed	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXLayer * CCTMXTiledMap::layerNamed(const char *layerName)$/;"	f	class:CCTMXTiledMap	signature:(const char *layerName)
layerNamed	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXLayer* layerNamed(const char *layerName);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char *layerName)
lazyInitialize	kazmath/src/GL/matrix.c	/^void lazyInitialize()$/;"	f
lazy_init	draw_nodes/CCDrawingPrimitives.cpp	/^static void lazy_init( void )$/;"	f	file:	signature:( void )
left	label_nodes/CCLabelBMFont.h	/^    int    left;$/;"	m	struct:_BMFontPadding	access:public
len	support/zip_support/ZipUtils.h	/^        unsigned int            len;                \/\/ size of the uncompressed file$/;"	m	struct:cocos2d::CCZHeader	access:public
len	textures/CCTexturePVR.h	/^    unsigned int len;$/;"	m	struct:CCPVRMipmap	access:public
length	cocoa/CCString.cpp	/^unsigned int CCString::length() const$/;"	f	class:CCString	signature:() const
length	cocoa/CCString.h	/^    unsigned int length() const;$/;"	p	class:CCString	access:public	signature:() const
length	support/tinyxml2/tinyxml2.cpp	/^    int length;$/;"	m	struct:tinyxml2::Entity	file:	access:public
less	touch_dispatcher/CCTouchDispatcher.cpp	/^static int less(const CCObject* p1, const CCObject* p2)$/;"	f	file:	signature:(const CCObject* p1, const CCObject* p2)
link	shaders/CCGLProgram.cpp	/^bool CCGLProgram::link()$/;"	f	class:CCGLProgram	signature:()
link	shaders/CCGLProgram.h	/^    bool link();$/;"	p	class:CCGLProgram	access:public	signature:()
list	CCScheduler.cpp	/^    tListEntry          **list;        \/\/ Which list does it belong to ?$/;"	m	struct:_hashUpdateEntry	file:	access:public
listenBackToForeground	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::listenBackToForeground(CCObject *obj)$/;"	f	class:CCParticleSystemQuad	signature:(CCObject *obj)
listenBackToForeground	particle_nodes/CCParticleSystemQuad.h	/^    void listenBackToForeground(CCObject *obj);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(CCObject *obj)
listenBackToForeground	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::listenBackToForeground(CCObject *obj)$/;"	f	class:CCTextureAtlas	signature:(CCObject *obj)
listenBackToForeground	textures/CCTextureAtlas.h	/^    void listenBackToForeground(CCObject *obj);$/;"	p	class:CCTextureAtlas	access:public	signature:(CCObject *obj)
listenToBackground	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::listenToBackground(cocos2d::CCObject *obj)$/;"	f	class:CCRenderTexture	signature:(cocos2d::CCObject *obj)
listenToBackground	misc_nodes/CCRenderTexture.h	/^    void listenToBackground(CCObject *obj);$/;"	p	class:CCRenderTexture	access:public	signature:(CCObject *obj)
listenToForeground	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::listenToForeground(cocos2d::CCObject *obj)$/;"	f	class:CCRenderTexture	signature:(cocos2d::CCObject *obj)
listenToForeground	misc_nodes/CCRenderTexture.h	/^    void listenToForeground(CCObject *obj);$/;"	p	class:CCRenderTexture	access:public	signature:(CCObject *obj)
loadDefaultShader	shaders/CCShaderCache.cpp	/^void CCShaderCache::loadDefaultShader(CCGLProgram *p, int type)$/;"	f	class:CCShaderCache	signature:(CCGLProgram *p, int type)
loadDefaultShader	shaders/CCShaderCache.h	/^    void loadDefaultShader(CCGLProgram *program, int type);$/;"	p	class:CCShaderCache	access:private	signature:(CCGLProgram *program, int type)
loadDefaultShaders	shaders/CCShaderCache.cpp	/^void CCShaderCache::loadDefaultShaders()$/;"	f	class:CCShaderCache	signature:()
loadDefaultShaders	shaders/CCShaderCache.h	/^    void loadDefaultShaders();$/;"	p	class:CCShaderCache	access:public	signature:()
loadFilenameLookupDictionaryFromFile	platform/CCFileUtils.cpp	/^void CCFileUtils::loadFilenameLookupDictionaryFromFile(const char* filename)$/;"	f	class:CCFileUtils	signature:(const char* filename)
loadFilenameLookupDictionaryFromFile	platform/CCFileUtils.h	/^    virtual void loadFilenameLookupDictionaryFromFile(const char* filename);$/;"	p	class:CCFileUtils	access:public	signature:(const char* filename)
loadImage	textures/CCTextureCache.cpp	/^static void* loadImage(void* data)$/;"	f	file:	signature:(void* data)
loadTGAfile	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::loadTGAfile(const char *file)$/;"	f	class:CCTileMapAtlas	signature:(const char *file)
loadTGAfile	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    void loadTGAfile(const char *file);$/;"	p	class:CCTileMapAtlas	access:private	signature:(const char *file)
local	support/zip_support/unzip.cpp	92;"	d	file:
locate	CCCamera.cpp	/^void CCCamera::locate(void)$/;"	f	class:CCCamera	signature:(void)
locate	CCCamera.h	/^    void locate(void);$/;"	p	class:CCCamera	access:public	signature:(void)
location	shaders/CCGLProgram.cpp	/^    unsigned int    location;    \/\/ Key$/;"	m	struct:_hashUniformEntry	file:	access:public
log2_num_buckets	support/data_support/uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	access:public
logForOpenGLObject	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::logForOpenGLObject(GLuint object, GLInfoFunction infoFunc, GLLogFunction logFunc)$/;"	f	class:CCGLProgram	signature:(GLuint object, GLInfoFunction infoFunc, GLLogFunction logFunc)
logForOpenGLObject	shaders/CCGLProgram.h	/^    const char* logForOpenGLObject(GLuint object, GLInfoFunction infoFunc, GLLogFunction logFunc);$/;"	p	class:CCGLProgram	access:private	signature:(GLuint object, GLInfoFunction infoFunc, GLLogFunction logFunc)
lowestAtlasIndexInChild	sprite_nodes/CCSpriteBatchNode.cpp	/^unsigned int CCSpriteBatchNode::lowestAtlasIndexInChild(CCSprite *pSprite)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *pSprite)
lowestAtlasIndexInChild	sprite_nodes/CCSpriteBatchNode.h	/^    unsigned int lowestAtlasIndexInChild(CCSprite *sprite);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite *sprite)
lua_State	script_support/CCScriptSupport.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
m_ColorSpaceHolder	text_input_node/CCTextFieldTTF.h	/^    ccColor3B m_ColorSpaceHolder;$/;"	m	class:CCTextFieldTTF	access:protected
m_DelegateList	text_input_node/CCIMEDispatcher.cpp	/^    DelegateList    m_DelegateList;$/;"	m	class:CCIMEDispatcher::Impl	file:	access:public
m_DelegateWithIme	text_input_node/CCIMEDispatcher.cpp	/^    CCIMEDelegate*  m_DelegateWithIme;$/;"	m	class:CCIMEDispatcher::Impl	file:	access:public
m_FBO	effects/CCGrabber.h	/^    GLuint m_FBO;$/;"	m	class:CCGrabber	access:protected
m_FmtImage	textures/CCTextureCache.h	/^    CCImage::EImageFormat m_FmtImage;$/;"	m	class:VolatileTexture	access:protected
m_NameStr	support/CCProfiling.h	/^    std::string m_NameStr;$/;"	m	class:CCProfilingTimer	access:public
m_PixelFormat	textures/CCTextureCache.h	/^    CCTexture2DPixelFormat m_PixelFormat;$/;"	m	class:VolatileTexture	access:protected
m_TextureSize	textures/CCTextureCache.h	/^    CCSize m_TextureSize;$/;"	m	class:VolatileTexture	access:protected
m_accumulatedDiff	actions/CCActionCatmullRom.h	/^    CCPoint	m_accumulatedDiff;$/;"	m	class:CCCardinalSplineTo	access:protected
m_alignment	textures/CCTextureCache.h	/^    CCTextAlignment m_alignment;$/;"	m	class:VolatileTexture	access:protected
m_asMipmaps	textures/CCTexturePVR.h	/^    struct CCPVRMipmap m_asMipmaps[CC_PVRMIPMAP_MAX];   \/\/ pointer to mipmap images    $/;"	m	class:CCTexturePVR	typeref:struct:CCTexturePVR::CCPVRMipmap	access:protected
m_bAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    bool m_bAccelerometerEnabled;$/;"	m	class:CCLayer	access:protected
m_bActionInstant	actions/CCActionInterval.h	/^    bool m_bActionInstant;$/;"	m	class:CCRepeat	access:protected
m_bActive	effects/CCGrid.h	/^    bool m_bActive;$/;"	m	class:CCGridBase	access:protected
m_bAdditionalTransformDirty	base_nodes/CCNode.h	/^    bool m_bAdditionalTransformDirty;   \/\/\/< The flag to check whether the additional transform is dirty$/;"	m	class:CCNode	access:protected
m_bAutoDraw	misc_nodes/CCRenderTexture.h	/^    bool         m_bAutoDraw;$/;"	m	class:CCRenderTexture	access:protected
m_bBack	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    bool    m_bBack;$/;"	m	class:CCTransitionPageTurn	access:protected
m_bBoundaryFullyCovered	actions/CCAction.h	/^    bool m_bBoundaryFullyCovered;$/;"	m	class:CCFollow	access:protected
m_bBoundarySet	actions/CCAction.h	/^    bool m_bBoundarySet;$/;"	m	class:CCFollow	access:protected
m_bCascadeColorEnabled	label_nodes/CCLabelBMFont.h	/^    bool m_bCascadeColorEnabled;$/;"	m	class:CCLabelBMFont	access:protected
m_bCascadeOpacityEnabled	label_nodes/CCLabelBMFont.h	/^    bool m_bCascadeOpacityEnabled;$/;"	m	class:CCLabelBMFont	access:protected
m_bCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.h	/^    bool m_bCompressedInterpolation;$/;"	m	class:CCLayerGradient	access:protected
m_bConcave	actions/CCActionGrid3D.h	/^    bool m_bConcave;$/;"	m	class:CCLens3D	access:protected
m_bCurrentTargetSalvaged	CCScheduler.h	/^    bool m_bCurrentTargetSalvaged;$/;"	m	class:CCScheduler	access:protected
m_bCurrentTargetSalvaged	actions/CCActionManager.h	/^    bool            m_bCurrentTargetSalvaged;$/;"	m	class:CCActionManager	access:protected
m_bDirty	CCCamera.h	/^    bool m_bDirty;$/;"	m	class:CCCamera	access:protected
m_bDirty	actions/CCActionGrid3D.h	/^    bool    m_bDirty;$/;"	m	class:CCLens3D	access:protected
m_bDirty	draw_nodes/CCDrawNode.h	/^    bool            m_bDirty;$/;"	m	class:CCDrawNode	access:protected
m_bDirty	sprite_nodes/CCSprite.h	/^    bool                m_bDirty;               \/\/\/ Whether the sprite needs to be updated$/;"	m	class:CCSprite	access:protected
m_bDirty	textures/CCTextureAtlas.h	/^    bool                m_bDirty; \/\/indicates whether or not the array buffer of the VBO needs to be updated$/;"	m	class:CCTextureAtlas	access:protected
m_bDispatchEvents	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bDispatchEvents;$/;"	m	class:CCTouchDispatcher	access:protected
m_bDisplayStats	CCDirector.h	/^    bool m_bDisplayStats;$/;"	m	class:CCDirector	access:protected
m_bEnabled	menu_nodes/CCMenu.h	/^    bool m_bEnabled;$/;"	m	class:CCMenu	access:private
m_bEnabled	menu_nodes/CCMenuItem.h	/^    bool m_bEnabled;$/;"	m	class:CCMenuItem	access:protected
m_bFastMode	misc_nodes/CCMotionStreak.h	/^    bool m_bFastMode;$/;"	m	class:CCMotionStreak	access:protected
m_bFirstTick	actions/CCActionInterval.h	/^    bool   m_bFirstTick;$/;"	m	class:CCActionInterval	access:protected
m_bFlipX	actions/CCActionInstant.h	/^    bool    m_bFlipX;$/;"	m	class:CCFlipX	access:protected
m_bFlipX	sprite_nodes/CCSprite.h	/^    bool m_bFlipX;                              \/\/\/ Whether the sprite is flipped horizaontally or not.$/;"	m	class:CCSprite	access:protected
m_bFlipY	actions/CCActionInstant.h	/^    bool    m_bFlipY;$/;"	m	class:CCFlipY	access:protected
m_bFlipY	sprite_nodes/CCSprite.h	/^    bool m_bFlipY;                              \/\/\/ Whether the sprite is flipped vertically or not.$/;"	m	class:CCSprite	access:protected
m_bForcePremultipliedAlpha	textures/CCTexturePVR.h	/^    bool m_bForcePremultipliedAlpha;$/;"	m	class:CCTexturePVR	access:protected
m_bHasAlpha	platform/CCImage.h	/^    bool m_bHasAlpha;$/;"	m	class:CCImage	access:protected
m_bHasAlpha	textures/CCTexturePVR.h	/^    bool m_bHasAlpha;$/;"	m	class:CCTexturePVR	access:protected
m_bHasChildren	sprite_nodes/CCSprite.h	/^    bool                m_bHasChildren;         \/\/\/ Whether the sprite contains children$/;"	m	class:CCSprite	access:protected
m_bHasMipmaps	textures/CCTexture2D.h	/^    bool m_bHasMipmaps;$/;"	m	class:CCTexture2D	access:private
m_bHasPremultipliedAlpha	textures/CCTexture2D.h	/^    bool m_bHasPremultipliedAlpha;$/;"	m	class:CCTexture2D	access:private
m_bHasPremultipliedAlpha	textures/CCTexturePVR.h	/^    bool m_bHasPremultipliedAlpha;$/;"	m	class:CCTexturePVR	access:protected
m_bHorizontal	actions/CCActionGrid3D.h	/^    bool m_bHorizontal;$/;"	m	class:CCWaves	access:protected
m_bIgnoreAnchorPointForPosition	base_nodes/CCNode.h	/^    bool m_bIgnoreAnchorPointForPosition; \/\/\/< true if the Anchor Point will be (0,0) when you position the CCNode, false otherwise.$/;"	m	class:CCNode	access:protected
m_bInvalid	CCDirector.h	/^    bool m_bInvalid;$/;"	m	class:CCDisplayLinkDirector	access:protected
m_bInverseDirty	base_nodes/CCNode.h	/^    bool m_bInverseDirty;               \/\/\/< transform dirty flag$/;"	m	class:CCNode	access:protected
m_bInverted	misc_nodes/CCClippingNode.h	/^    bool    m_bInverted;$/;"	m	class:CCClippingNode	access:protected
m_bIsActive	particle_nodes/CCParticleSystem.h	/^    bool m_bIsActive;$/;"	m	class:CCParticleSystem	access:protected
m_bIsAutoRemoveOnFinish	particle_nodes/CCParticleSystem.h	/^    bool m_bIsAutoRemoveOnFinish;$/;"	m	class:CCParticleSystem	access:protected
m_bIsBlendAdditive	particle_nodes/CCParticleSystem.h	/^    bool m_bIsBlendAdditive;$/;"	m	class:CCParticleSystem	access:public
m_bIsInSceneOnTop	layers_scenes_transitions_nodes/CCTransition.h	/^    bool    m_bIsInSceneOnTop;$/;"	m	class:CCTransitionScene	access:protected
m_bIsMultiTouches	script_support/CCScriptSupport.h	/^    bool    m_bIsMultiTouches;$/;"	m	class:CCTouchScriptHandlerEntry	access:private
m_bIsOpacityModifyRGB	base_nodes/CCAtlasNode.h	/^    bool m_bIsOpacityModifyRGB;$/;"	m	class:CCAtlasNode	access:protected
m_bIsOpacityModifyRGB	label_nodes/CCLabelBMFont.h	/^    bool        m_bIsOpacityModifyRGB;$/;"	m	class:CCLabelBMFont	access:protected
m_bIsSendCleanupToScene	layers_scenes_transitions_nodes/CCTransition.h	/^    bool    m_bIsSendCleanupToScene;$/;"	m	class:CCTransitionScene	access:protected
m_bIsTextureFlipped	effects/CCGrid.h	/^    bool m_bIsTextureFlipped;$/;"	m	class:CCGridBase	access:protected
m_bKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    bool m_bKeypadEnabled;$/;"	m	class:CCLayer	access:protected
m_bLandscape	CCDirector.h	/^    bool m_bLandscape;$/;"	m	class:CCDirector	access:protected
m_bLineBreakWithoutSpaces	label_nodes/CCLabelBMFont.h	/^    bool m_bLineBreakWithoutSpaces;$/;"	m	class:CCLabelBMFont	access:protected
m_bLocked	keypad_dispatcher/CCKeypadDispatcher.h	/^    bool m_bLocked;$/;"	m	class:CCKeypadDispatcher	access:protected
m_bLocked	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bLocked;$/;"	m	class:CCTouchDispatcher	access:protected
m_bMarkedForDeletion	script_support/CCScriptSupport.h	/^    bool                m_bMarkedForDeletion;$/;"	m	class:CCSchedulerScriptHandlerEntry	access:private
m_bNextDeltaTimeZero	CCDirector.h	/^    bool m_bNextDeltaTimeZero;$/;"	m	class:CCDirector	access:protected
m_bOnce	actions/CCActionTiledGrid.h	/^    bool m_bOnce;$/;"	m	class:CCShatteredTiles3D	access:protected
m_bOpacityModifyRGB	sprite_nodes/CCSprite.h	/^    bool m_bOpacityModifyRGB;$/;"	m	class:CCSprite	access:protected
m_bOriginalState	actions/CCActionInterval.h	/^    bool m_bOriginalState;$/;"	m	class:CCBlink	access:protected
m_bOwnTiles	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool                m_bOwnTiles;$/;"	m	class:CCTMXLayerInfo	access:public
m_bPVRHaveAlphaPremultiplied	textures/CCTexture2D.h	/^    bool m_bPVRHaveAlphaPremultiplied;$/;"	m	class:CCTexture2D	access:private
m_bPaused	CCDirector.h	/^    bool m_bPaused;$/;"	m	class:CCDirector	access:protected
m_bPaused	script_support/CCScriptSupport.h	/^    bool                m_bPaused;$/;"	m	class:CCSchedulerScriptHandlerEntry	access:private
m_bPreMulti	platform/CCImage.h	/^    bool m_bPreMulti;$/;"	m	class:CCImage	access:protected
m_bPurgeDirecotorInNextLoop	CCDirector.h	/^    bool m_bPurgeDirecotorInNextLoop; \/\/ this flag will be set to true in end()$/;"	m	class:CCDirector	access:protected
m_bRectRotated	sprite_nodes/CCSprite.h	/^    bool   m_bRectRotated;                      \/\/\/ Whether the texture is rotated$/;"	m	class:CCSprite	access:protected
m_bRecursiveDirty	sprite_nodes/CCSprite.h	/^    bool                m_bRecursiveDirty;      \/\/\/ Whether all of the sprite's children needs to be updated$/;"	m	class:CCSprite	access:protected
m_bReorderChildDirty	base_nodes/CCNode.h	/^    bool m_bReorderChildDirty;          \/\/\/< children order dirty flag$/;"	m	class:CCNode	access:protected
m_bRetainName	textures/CCTexturePVR.h	/^    bool m_bRetainName;$/;"	m	class:CCTexturePVR	access:protected
m_bReverseDirection	misc_nodes/CCProgressTimer.h	/^    bool m_bReverseDirection;$/;"	m	class:CCProgressTimer	access:protected
m_bRotated	sprite_nodes/CCSpriteFrame.h	/^    bool   m_bRotated;$/;"	m	class:CCSpriteFrame	access:protected
m_bRunForever	CCScheduler.h	/^    bool m_bRunForever;$/;"	m	class:CCTimer	access:protected
m_bRunning	base_nodes/CCNode.h	/^    bool m_bRunning;                    \/\/\/< is running$/;"	m	class:CCNode	access:protected
m_bSelected	menu_nodes/CCMenuItem.h	/^    bool m_bSelected;$/;"	m	class:CCMenuItem	access:protected
m_bSendCleanupToScene	CCDirector.h	/^    bool    m_bSendCleanupToScene;$/;"	m	class:CCDirector	access:protected
m_bShakeZ	actions/CCActionGrid3D.h	/^    bool m_bShakeZ;$/;"	m	class:CCShaky3D	access:protected
m_bShakeZ	actions/CCActionTiledGrid.h	/^    bool m_bShakeZ;$/;"	m	class:CCShakyTiles3D	access:protected
m_bShatterZ	actions/CCActionTiledGrid.h	/^    bool m_bShatterZ;$/;"	m	class:CCShatteredTiles3D	access:protected
m_bShouldBeHidden	sprite_nodes/CCSprite.h	/^    bool                m_bShouldBeHidden;      \/\/\/ should not be drawn because one of the ancestors is not visible$/;"	m	class:CCSprite	access:protected
m_bStartingPositionInitialized	misc_nodes/CCMotionStreak.h	/^    bool m_bStartingPositionInitialized;$/;"	m	class:CCMotionStreak	access:protected
m_bSupportsBGRA8888	CCConfiguration.h	/^    bool            m_bSupportsBGRA8888;$/;"	m	class:CCConfiguration	access:protected
m_bSupportsDiscardFramebuffer	CCConfiguration.h	/^    bool            m_bSupportsDiscardFramebuffer;$/;"	m	class:CCConfiguration	access:protected
m_bSupportsNPOT	CCConfiguration.h	/^    bool            m_bSupportsNPOT;$/;"	m	class:CCConfiguration	access:protected
m_bSupportsPVRTC	CCConfiguration.h	/^    bool            m_bSupportsPVRTC;$/;"	m	class:CCConfiguration	access:protected
m_bSupportsShareableVAO	CCConfiguration.h	/^    bool            m_bSupportsShareableVAO;$/;"	m	class:CCConfiguration	access:protected
m_bSwallowsTouches	script_support/CCScriptSupport.h	/^    bool    m_bSwallowsTouches;$/;"	m	class:CCTouchScriptHandlerEntry	access:private
m_bSwallowsTouches	touch_dispatcher/CCTouchHandler.h	/^    bool m_bSwallowsTouches;$/;"	m	class:CCTargetedTouchHandler	access:protected
m_bToAdd	keypad_dispatcher/CCKeypadDispatcher.h	/^    bool m_bToAdd;$/;"	m	class:CCKeypadDispatcher	access:protected
m_bToAdd	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bToAdd;$/;"	m	class:CCTouchDispatcher	access:protected
m_bToQuit	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bToQuit;$/;"	m	class:CCTouchDispatcher	access:protected
m_bToRemove	keypad_dispatcher/CCKeypadDispatcher.h	/^    bool m_bToRemove;$/;"	m	class:CCKeypadDispatcher	access:protected
m_bToRemove	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bToRemove;$/;"	m	class:CCTouchDispatcher	access:protected
m_bTouchEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    bool m_bTouchEnabled;$/;"	m	class:CCLayer	access:protected
m_bTransformDirty	base_nodes/CCNode.h	/^    bool m_bTransformDirty;             \/\/\/< transform dirty flag$/;"	m	class:CCNode	access:protected
m_bTransformSystemDirty	particle_nodes/CCParticleSystem.h	/^    bool m_bTransformSystemDirty;$/;"	m	class:CCParticleSystem	access:protected
m_bUpdateHashLocked	CCScheduler.h	/^    bool m_bUpdateHashLocked;$/;"	m	class:CCScheduler	access:protected
m_bUseAutomaticVertexZ	tilemap_parallax_nodes/CCTMXLayer.h	/^    bool                m_bUseAutomaticVertexZ;$/;"	m	class:CCTMXLayer	access:protected
m_bUseDelay	CCScheduler.h	/^    bool m_bUseDelay;$/;"	m	class:CCTimer	access:protected
m_bUsesTime	shaders/CCGLProgram.h	/^    bool              m_bUsesTime;$/;"	m	class:CCGLProgram	access:private
m_bValue	cocoa/CCBool.h	/^    bool m_bValue;$/;"	m	class:CCBool	access:private
m_bVertical	actions/CCActionGrid3D.h	/^    bool m_bVertical;$/;"	m	class:CCWaves	access:protected
m_bVisible	base_nodes/CCNode.h	/^    bool m_bVisible;                    \/\/\/< is this node visible$/;"	m	class:CCNode	access:protected
m_bVisible	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool                m_bVisible;$/;"	m	class:CCTMXLayerInfo	access:public
m_blendFunc	sprite_nodes/CCSpriteBatchNode.h	/^    ccBlendFunc m_blendFunc;$/;"	m	class:CCSpriteBatchNode	access:protected
m_cDisplayedOpacity	label_nodes/CCLabelBMFont.h	/^    GLubyte m_cDisplayedOpacity;$/;"	m	class:CCLabelBMFont	access:protected
m_cOpacity	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned char        m_cOpacity;$/;"	m	class:CCTMXLayer	access:protected
m_cOpacity	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned char       m_cOpacity;$/;"	m	class:CCTMXLayerInfo	access:public
m_cRealOpacity	label_nodes/CCLabelBMFont.h	/^    GLubyte m_cRealOpacity;$/;"	m	class:CCLabelBMFont	access:protected
m_ccsaxParserImp	platform/CCSAXParser.cpp	/^	CCSAXParser *m_ccsaxParserImp;$/;"	m	class:XmlSaxHander	file:	access:private
m_dAnimationInterval	CCDirector.h	/^    double m_dAnimationInterval;$/;"	m	class:CCDirector	access:protected
m_dAverageTime	support/CCProfiling.h	/^    double m_dAverageTime;$/;"	m	class:CCProfilingTimer	access:public
m_dOldAnimationInterval	CCDirector.h	/^    double m_dOldAnimationInterval;$/;"	m	class:CCDirector	access:protected
m_dValue	cocoa/CCDouble.h	/^    double m_dValue;$/;"	m	class:CCDouble	access:private
m_data	support/zip_support/ZipUtils.h	/^        ZipFilePrivate *m_data;$/;"	m	class:cocos2d::ZipFile	access:private
m_delta	actions/CCActionInterval.h	/^    CCPoint         m_delta;$/;"	m	class:CCJumpBy	access:protected
m_deltaB	actions/CCActionInterval.h	/^    GLshort m_deltaB;$/;"	m	class:CCTintBy	access:protected
m_deltaG	actions/CCActionInterval.h	/^    GLshort m_deltaG;$/;"	m	class:CCTintBy	access:protected
m_deltaR	actions/CCActionInterval.h	/^    GLshort m_deltaR;$/;"	m	class:CCTintBy	access:protected
m_directorProjection	effects/CCGrid.h	/^    ccDirectorProjection m_directorProjection;$/;"	m	class:CCGridBase	access:protected
m_eCashedImageType	textures/CCTextureCache.h	/^    ccCachedImageType m_eCashedImageType;$/;"	m	class:VolatileTexture	access:protected
m_eDictType	cocoa/CCDictionary.h	/^    CCDictType m_eDictType;$/;"	m	class:CCDictionary	access:private
m_eFormat	textures/CCTexturePVR.h	/^    CCTexture2DPixelFormat m_eFormat;$/;"	m	class:CCTexturePVR	access:protected
m_eGLServerState	base_nodes/CCNode.h	/^    ccGLServerState m_eGLServerState;   \/\/\/< OpenGL servier side state$/;"	m	class:CCNode	access:protected
m_eOrientation	layers_scenes_transitions_nodes/CCTransition.h	/^    tOrientation m_eOrientation;$/;"	m	class:CCTransitionSceneOriented	access:protected
m_ePixelFormat	misc_nodes/CCRenderTexture.h	/^    GLenum       m_ePixelFormat;$/;"	m	class:CCRenderTexture	access:protected
m_eProjection	CCDirector.h	/^    ccDirectorProjection m_eProjection;$/;"	m	class:CCDirector	access:protected
m_eResolutionPolicy	platform/CCEGLViewProtocol.h	/^    ResolutionPolicy m_eResolutionPolicy;$/;"	m	class:CCEGLViewProtocol	access:protected
m_eResultType	platform/CCFileUtils.cpp	/^    CCSAXResult m_eResultType;$/;"	m	class:CCDictMaker	file:	access:public
m_eScriptType	base_nodes/CCNode.h	/^    ccScriptType m_eScriptType;         \/\/\/< type of script binding, lua or javascript$/;"	m	class:CCNode	access:protected
m_eState	menu_nodes/CCMenu.h	/^    tCCMenuState m_eState;$/;"	m	class:CCMenu	access:protected
m_eTouchMode	layers_scenes_transitions_nodes/CCLayer.h	/^    ccTouchesMode m_eTouchMode;$/;"	m	class:CCLayer	access:private
m_eType	misc_nodes/CCProgressTimer.h	/^    CCProgressTimerType m_eType;$/;"	m	class:CCProgressTimer	access:protected
m_elapsed	actions/CCActionInterval.h	/^    float m_elapsed;$/;"	m	class:CCActionInterval	access:protected
m_endPosition	actions/CCActionInterval.h	/^    CCPoint m_endPosition;$/;"	m	class:CCMoveTo	access:protected
m_fAccumDt	CCDirector.h	/^    float m_fAccumDt;$/;"	m	class:CCDirector	access:protected
m_fAlphaThreshold	misc_nodes/CCClippingNode.h	/^    GLfloat m_fAlphaThreshold;$/;"	m	class:CCClippingNode	access:protected
m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCLiquid	access:protected
m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCRipple3D	access:protected
m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCTwirl	access:protected
m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCWaves	access:protected
m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCWaves3D	access:protected
m_fAmplitude	actions/CCActionTiledGrid.h	/^    float m_fAmplitude;$/;"	m	class:CCJumpTiles3D	access:protected
m_fAmplitude	actions/CCActionTiledGrid.h	/^    float m_fAmplitude;$/;"	m	class:CCWavesTiles3D	access:protected
m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCLiquid	access:protected
m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCRipple3D	access:protected
m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCTwirl	access:protected
m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCWaves	access:protected
m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCWaves3D	access:protected
m_fAmplitudeRate	actions/CCActionTiledGrid.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCJumpTiles3D	access:protected
m_fAmplitudeRate	actions/CCActionTiledGrid.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCWavesTiles3D	access:protected
m_fAngleX	actions/CCActionCamera.h	/^    float m_fAngleX;$/;"	m	class:CCOrbitCamera	access:protected
m_fAngleX	actions/CCActionInterval.h	/^    float m_fAngleX;$/;"	m	class:CCRotateBy	access:protected
m_fAngleY	actions/CCActionInterval.h	/^    float m_fAngleY;$/;"	m	class:CCRotateBy	access:protected
m_fAngleZ	actions/CCActionCamera.h	/^    float m_fAngleZ;$/;"	m	class:CCOrbitCamera	access:protected
m_fBottomBoundary	actions/CCAction.h	/^    float m_fBottomBoundary;$/;"	m	class:CCFollow	access:protected
m_fCenterX	CCCamera.h	/^    float m_fCenterX;$/;"	m	class:CCCamera	access:protected
m_fCenterXOrig	actions/CCActionCamera.h	/^    float m_fCenterXOrig;$/;"	m	class:CCActionCamera	access:protected
m_fCenterY	CCCamera.h	/^    float m_fCenterY;$/;"	m	class:CCCamera	access:protected
m_fCenterYOrig	actions/CCActionCamera.h	/^    float m_fCenterYOrig;$/;"	m	class:CCActionCamera	access:protected
m_fCenterZ	CCCamera.h	/^    float m_fCenterZ;$/;"	m	class:CCCamera	access:protected
m_fCenterZOrig	actions/CCActionCamera.h	/^    float m_fCenterZOrig;$/;"	m	class:CCActionCamera	access:protected
m_fClearDepth	misc_nodes/CCRenderTexture.h	/^    GLclampf     m_fClearDepth;$/;"	m	class:CCRenderTexture	access:protected
m_fContentScaleFactor	CCDirector.h	/^    float    m_fContentScaleFactor;$/;"	m	class:CCDirector	access:protected
m_fContentScaleFactor	tilemap_parallax_nodes/CCTMXLayer.h	/^    float               m_fContentScaleFactor;            $/;"	m	class:CCTMXLayer	access:protected
m_fDelay	CCScheduler.h	/^    float m_fDelay;$/;"	m	class:CCTimer	access:protected
m_fDelta	actions/CCActionTween.h	/^    float            m_fDelta;$/;"	m	class:CCActionTween	access:public
m_fDeltaAngleX	actions/CCActionCamera.h	/^    float m_fDeltaAngleX;$/;"	m	class:CCOrbitCamera	access:protected
m_fDeltaAngleZ	actions/CCActionCamera.h	/^    float m_fDeltaAngleZ;$/;"	m	class:CCOrbitCamera	access:protected
m_fDeltaRadius	actions/CCActionCamera.h	/^    float m_fDeltaRadius;$/;"	m	class:CCOrbitCamera	access:protected
m_fDeltaT	actions/CCActionCatmullRom.h	/^    float m_fDeltaT;$/;"	m	class:CCCardinalSplineTo	access:protected
m_fDeltaX	actions/CCActionInterval.h	/^    float m_fDeltaX;$/;"	m	class:CCScaleTo	access:protected
m_fDeltaX	actions/CCActionInterval.h	/^    float m_fDeltaX;$/;"	m	class:CCSkewTo	access:protected
m_fDeltaY	actions/CCActionInterval.h	/^    float m_fDeltaY;$/;"	m	class:CCScaleTo	access:protected
m_fDeltaY	actions/CCActionInterval.h	/^    float m_fDeltaY;$/;"	m	class:CCSkewTo	access:protected
m_fDiffAngleX	actions/CCActionInterval.h	/^    float m_fDiffAngleX;$/;"	m	class:CCRotateTo	access:protected
m_fDiffAngleY	actions/CCActionInterval.h	/^    float m_fDiffAngleY;$/;"	m	class:CCRotateTo	access:protected
m_fDstAngleX	actions/CCActionInterval.h	/^    float m_fDstAngleX;$/;"	m	class:CCRotateTo	access:protected
m_fDstAngleY	actions/CCActionInterval.h	/^    float m_fDstAngleY;$/;"	m	class:CCRotateTo	access:protected
m_fDuration	actions/CCAction.h	/^    float m_fDuration;$/;"	m	class:CCFiniteTimeAction	access:protected
m_fDuration	layers_scenes_transitions_nodes/CCTransition.h	/^    float    m_fDuration;$/;"	m	class:CCTransitionScene	access:protected
m_fElapsed	CCScheduler.h	/^    float m_fElapsed;$/;"	m	class:CCTimer	access:protected
m_fElapsed	particle_nodes/CCParticleSystem.h	/^    float m_fElapsed;$/;"	m	class:CCParticleSystem	access:protected
m_fEmitCounter	particle_nodes/CCParticleSystem.h	/^    float m_fEmitCounter;$/;"	m	class:CCParticleSystem	access:protected
m_fEndScaleX	actions/CCActionInterval.h	/^    float m_fEndScaleX;$/;"	m	class:CCScaleTo	access:protected
m_fEndScaleY	actions/CCActionInterval.h	/^    float m_fEndScaleY;$/;"	m	class:CCScaleTo	access:protected
m_fEndSkewX	actions/CCActionInterval.h	/^    float m_fEndSkewX;$/;"	m	class:CCSkewTo	access:protected
m_fEndSkewY	actions/CCActionInterval.h	/^    float m_fEndSkewY;$/;"	m	class:CCSkewTo	access:protected
m_fEyeX	CCCamera.h	/^    float m_fEyeX;$/;"	m	class:CCCamera	access:protected
m_fEyeXOrig	actions/CCActionCamera.h	/^    float m_fEyeXOrig;$/;"	m	class:CCActionCamera	access:protected
m_fEyeY	CCCamera.h	/^    float m_fEyeY;$/;"	m	class:CCCamera	access:protected
m_fEyeYOrig	actions/CCActionCamera.h	/^    float m_fEyeYOrig;$/;"	m	class:CCActionCamera	access:protected
m_fEyeZ	CCCamera.h	/^    float m_fEyeZ;$/;"	m	class:CCCamera	access:protected
m_fEyeZOrig	actions/CCActionCamera.h	/^    float m_fEyeZOrig;$/;"	m	class:CCActionCamera	access:protected
m_fFadeDelta	misc_nodes/CCMotionStreak.h	/^    float m_fFadeDelta;$/;"	m	class:CCMotionStreak	access:private
m_fFontSize	label_nodes/CCLabelTTF.h	/^    float m_fFontSize;$/;"	m	class:CCLabelTTF	access:protected
m_fFontSize	textures/CCTextureCache.h	/^    float           m_fFontSize;$/;"	m	class:VolatileTexture	access:protected
m_fFrameRate	CCDirector.h	/^    float m_fFrameRate;$/;"	m	class:CCDirector	access:protected
m_fFrom	actions/CCActionProgressTimer.h	/^    float m_fFrom;$/;"	m	class:CCProgressFromTo	access:protected
m_fFrom	actions/CCActionProgressTimer.h	/^    float m_fFrom;$/;"	m	class:CCProgressTo	access:protected
m_fFrom	actions/CCActionTween.h	/^    float            m_fFrom, m_fTo;$/;"	m	class:CCActionTween	access:public
m_fFrom	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    float m_fFrom;$/;"	m	class:CCTransitionProgress	access:protected
m_fInterval	CCScheduler.h	/^    float m_fInterval;$/;"	m	class:CCTimer	access:protected
m_fLeftBoundary	actions/CCAction.h	/^    float m_fLeftBoundary;$/;"	m	class:CCFollow	access:protected
m_fLensEffect	actions/CCActionGrid3D.h	/^    float m_fLensEffect;$/;"	m	class:CCLens3D	access:protected
m_fMinSeg	misc_nodes/CCMotionStreak.h	/^    float m_fMinSeg;$/;"	m	class:CCMotionStreak	access:private
m_fNextDt	actions/CCActionInterval.h	/^    float m_fNextDt;$/;"	m	class:CCRepeat	access:protected
m_fOriginalScale	menu_nodes/CCMenuItem.h	/^    float        m_fOriginalScale;$/;"	m	class:CCMenuItemLabel	access:protected
m_fPercentage	misc_nodes/CCProgressTimer.h	/^    float m_fPercentage;$/;"	m	class:CCProgressTimer	access:protected
m_fPeriod	actions/CCActionEase.h	/^    float m_fPeriod;$/;"	m	class:CCEaseElastic	access:protected
m_fRadDeltaX	actions/CCActionCamera.h	/^    float m_fRadDeltaX;$/;"	m	class:CCOrbitCamera	access:protected
m_fRadDeltaZ	actions/CCActionCamera.h	/^    float m_fRadDeltaZ;$/;"	m	class:CCOrbitCamera	access:protected
m_fRadX	actions/CCActionCamera.h	/^    float m_fRadX;$/;"	m	class:CCOrbitCamera	access:protected
m_fRadZ	actions/CCActionCamera.h	/^    float m_fRadZ;$/;"	m	class:CCOrbitCamera	access:protected
m_fRadius	actions/CCActionCamera.h	/^    float m_fRadius;$/;"	m	class:CCOrbitCamera	access:protected
m_fRadius	actions/CCActionGrid3D.h	/^    float m_fRadius;$/;"	m	class:CCLens3D	access:protected
m_fRadius	actions/CCActionGrid3D.h	/^    float m_fRadius;$/;"	m	class:CCRipple3D	access:protected
m_fRate	actions/CCActionEase.h	/^    float m_fRate;$/;"	m	class:CCEaseRateAction	access:protected
m_fRate	actions/CCActionGrid.h	/^    float m_fRate;$/;"	m	class:CCAccelAmplitude	access:protected
m_fRate	actions/CCActionGrid.h	/^    float m_fRate;$/;"	m	class:CCAccelDeccelAmplitude	access:protected
m_fRate	actions/CCActionGrid.h	/^    float m_fRate;$/;"	m	class:CCDeccelAmplitude	access:protected
m_fRightBoundary	actions/CCAction.h	/^    float m_fRightBoundary;$/;"	m	class:CCFollow	access:protected
m_fRotationX	base_nodes/CCNode.h	/^    float m_fRotationX;                 \/\/\/< rotation angle on x-axis$/;"	m	class:CCNode	access:protected
m_fRotationY	base_nodes/CCNode.h	/^    float m_fRotationY;                 \/\/\/< rotation angle on y-axis$/;"	m	class:CCNode	access:protected
m_fScaleX	actions/CCActionInterval.h	/^    float m_fScaleX;$/;"	m	class:CCScaleTo	access:protected
m_fScaleX	base_nodes/CCNode.h	/^    float m_fScaleX;                    \/\/\/< scaling factor on x-axis$/;"	m	class:CCNode	access:protected
m_fScaleX	platform/CCEGLViewProtocol.h	/^    float  m_fScaleX;$/;"	m	class:CCEGLViewProtocol	access:protected
m_fScaleY	actions/CCActionInterval.h	/^    float m_fScaleY;$/;"	m	class:CCScaleTo	access:protected
m_fScaleY	base_nodes/CCNode.h	/^    float m_fScaleY;                    \/\/\/< scaling factor on y-axis$/;"	m	class:CCNode	access:protected
m_fScaleY	platform/CCEGLViewProtocol.h	/^    float  m_fScaleY;$/;"	m	class:CCEGLViewProtocol	access:protected
m_fSecondsPerFrame	CCDirector.h	/^    float m_fSecondsPerFrame;$/;"	m	class:CCDirector	access:protected
m_fSkewX	actions/CCActionInterval.h	/^    float m_fSkewX;$/;"	m	class:CCSkewTo	access:protected
m_fSkewX	base_nodes/CCNode.h	/^    float m_fSkewX;                     \/\/\/< skew angle on x-axis$/;"	m	class:CCNode	access:protected
m_fSkewY	actions/CCActionInterval.h	/^    float m_fSkewY;$/;"	m	class:CCSkewTo	access:protected
m_fSkewY	base_nodes/CCNode.h	/^    float m_fSkewY;                     \/\/\/< skew angle on y-axis$/;"	m	class:CCNode	access:protected
m_fSpeed	actions/CCAction.h	/^    float m_fSpeed;$/;"	m	class:CCSpeed	access:protected
m_fStartAngleX	actions/CCActionInterval.h	/^    float m_fStartAngleX;$/;"	m	class:CCRotateBy	access:protected
m_fStartAngleX	actions/CCActionInterval.h	/^    float m_fStartAngleX;$/;"	m	class:CCRotateTo	access:protected
m_fStartAngleY	actions/CCActionInterval.h	/^    float m_fStartAngleY;$/;"	m	class:CCRotateBy	access:protected
m_fStartAngleY	actions/CCActionInterval.h	/^    float m_fStartAngleY;$/;"	m	class:CCRotateTo	access:protected
m_fStartScaleX	actions/CCActionInterval.h	/^    float m_fStartScaleX;$/;"	m	class:CCScaleTo	access:protected
m_fStartScaleY	actions/CCActionInterval.h	/^    float m_fStartScaleY;$/;"	m	class:CCScaleTo	access:protected
m_fStartSkewX	actions/CCActionInterval.h	/^    float m_fStartSkewX;$/;"	m	class:CCSkewTo	access:protected
m_fStartSkewY	actions/CCActionInterval.h	/^    float m_fStartSkewY;$/;"	m	class:CCSkewTo	access:protected
m_fStroke	misc_nodes/CCMotionStreak.h	/^    float m_fStroke;$/;"	m	class:CCMotionStreak	access:private
m_fTension	actions/CCActionCatmullRom.h	/^    float m_fTension;$/;"	m	class:CCCardinalSplineTo	access:protected
m_fTimeScale	CCScheduler.h	/^    float m_fTimeScale;$/;"	m	class:CCScheduler	access:protected
m_fTo	actions/CCActionProgressTimer.h	/^    float m_fTo;$/;"	m	class:CCProgressFromTo	access:protected
m_fTo	actions/CCActionProgressTimer.h	/^    float m_fTo;$/;"	m	class:CCProgressTo	access:protected
m_fTo	actions/CCActionTween.h	/^    float            m_fFrom, m_fTo;$/;"	m	class:CCActionTween	access:public
m_fTo	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    float m_fTo;$/;"	m	class:CCTransitionProgress	access:protected
m_fTopBoundary	actions/CCAction.h	/^    float m_fTopBoundary;$/;"	m	class:CCFollow	access:protected
m_fUpX	CCCamera.h	/^    float m_fUpX;$/;"	m	class:CCCamera	access:protected
m_fUpXOrig	actions/CCActionCamera.h	/^    float m_fUpXOrig;$/;"	m	class:CCActionCamera	access:protected
m_fUpY	CCCamera.h	/^    float m_fUpY;$/;"	m	class:CCCamera	access:protected
m_fUpYOrig	actions/CCActionCamera.h	/^    float m_fUpYOrig;$/;"	m	class:CCActionCamera	access:protected
m_fUpZ	CCCamera.h	/^    float m_fUpZ;$/;"	m	class:CCCamera	access:protected
m_fUpZOrig	actions/CCActionCamera.h	/^    float m_fUpZOrig;$/;"	m	class:CCActionCamera	access:protected
m_fValue	cocoa/CCFloat.h	/^    float m_fValue;$/;"	m	class:CCFloat	access:private
m_fVertexZ	base_nodes/CCNode.h	/^    float m_fVertexZ;                   \/\/\/< OpenGL real Z vertex$/;"	m	class:CCNode	access:protected
m_fWidth	label_nodes/CCLabelBMFont.h	/^    float m_fWidth;$/;"	m	class:CCLabelBMFont	access:protected
m_from	actions/CCActionInterval.h	/^    ccColor3B m_from;$/;"	m	class:CCTintTo	access:protected
m_fromB	actions/CCActionInterval.h	/^    GLshort m_fromB;$/;"	m	class:CCTintBy	access:protected
m_fromG	actions/CCActionInterval.h	/^    GLshort m_fromG;$/;"	m	class:CCTintBy	access:protected
m_fromOpacity	actions/CCActionInterval.h	/^    GLubyte m_fromOpacity;$/;"	m	class:CCFadeTo	access:protected
m_fromR	actions/CCActionInterval.h	/^    GLshort m_fromR;$/;"	m	class:CCTintBy	access:protected
m_fullPathCache	platform/CCFileUtils.h	/^    std::map<std::string, std::string> m_fullPathCache;$/;"	m	class:CCFileUtils	access:protected
m_hAlignment	label_nodes/CCLabelTTF.h	/^    CCTextAlignment         m_hAlignment;$/;"	m	class:CCLabelTTF	access:protected
m_height	actions/CCActionInterval.h	/^    float           m_height;$/;"	m	class:CCJumpBy	access:protected
m_iKey	cocoa/CCDictionary.h	/^    intptr_t  m_iKey;       \/\/ hash key of integer type$/;"	m	class:CCDictElement	access:private
m_last	actions/CCActionInterval.h	/^    int m_last;$/;"	m	class:CCSequence	access:protected
m_lookupMatrix	CCCamera.h	/^    kmMat4    m_lookupMatrix;$/;"	m	class:CCCamera	access:protected
m_nBufferCount	draw_nodes/CCDrawNode.h	/^    GLsizei         m_nBufferCount;$/;"	m	class:CCDrawNode	access:protected
m_nClearStencil	misc_nodes/CCRenderTexture.h	/^    GLint        m_nClearStencil;$/;"	m	class:CCRenderTexture	access:protected
m_nCols	actions/CCActionTiledGrid.h	/^    unsigned int m_nCols;$/;"	m	class:CCSplitCols	access:protected
m_nCommonHeight	label_nodes/CCLabelBMFont.h	/^    int m_nCommonHeight;$/;"	m	class:CCBMFontConfiguration	access:public
m_nEnabledLayer	layers_scenes_transitions_nodes/CCLayer.h	/^    unsigned int m_nEnabledLayer;$/;"	m	class:CCLayerMultiplex	access:protected
m_nEnabledSelectors	touch_dispatcher/CCTouchHandler.h	/^    int m_nEnabledSelectors;$/;"	m	class:CCTouchHandler	access:protected
m_nEntryId	script_support/CCScriptSupport.h	/^    int m_nEntryId;$/;"	m	class:CCScriptHandlerEntry	access:protected
m_nHandler	script_support/CCScriptSupport.h	/^    int m_nHandler;$/;"	m	class:CCScriptHandlerEntry	access:protected
m_nId	touch_dispatcher/CCTouch.h	/^    int m_nId;$/;"	m	class:CCTouch	access:private
m_nItemsToRender	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    int m_nItemsToRender;$/;"	m	class:CCTileMapAtlas	access:protected
m_nJumps	actions/CCActionInterval.h	/^    unsigned int    m_nJumps;$/;"	m	class:CCJumpBy	access:protected
m_nJumps	actions/CCActionTiledGrid.h	/^    unsigned int m_nJumps;$/;"	m	class:CCJumpTiles3D	access:protected
m_nLuaID	cocoa/CCObject.h	/^    int                 m_nLuaID;$/;"	m	class:CCObject	access:public
m_nMaxModelviewStackDepth	CCConfiguration.h	/^    GLint           m_nMaxModelviewStackDepth;$/;"	m	class:CCConfiguration	access:protected
m_nMaxSamplesAllowed	CCConfiguration.h	/^    GLint           m_nMaxSamplesAllowed;$/;"	m	class:CCConfiguration	access:protected
m_nMaxTextureSize	CCConfiguration.h	/^    GLint           m_nMaxTextureSize;$/;"	m	class:CCConfiguration	access:protected
m_nMaxTextureUnits	CCConfiguration.h	/^    GLint           m_nMaxTextureUnits;$/;"	m	class:CCConfiguration	access:protected
m_nNextFrame	actions/CCActionInterval.h	/^    int                m_nNextFrame;$/;"	m	class:CCAnimate	access:protected
m_nOldFBO	misc_nodes/CCRenderTexture.h	/^    GLint        m_nOldFBO;$/;"	m	class:CCRenderTexture	access:protected
m_nPriority	script_support/CCScriptSupport.h	/^    int     m_nPriority;$/;"	m	class:CCTouchScriptHandlerEntry	access:private
m_nPriority	touch_dispatcher/CCTouchHandler.h	/^    int m_nPriority;$/;"	m	class:CCTouchHandler	access:protected
m_nRandrange	actions/CCActionGrid3D.h	/^    int m_nRandrange;$/;"	m	class:CCShaky3D	access:protected
m_nRandrange	actions/CCActionTiledGrid.h	/^    int m_nRandrange;$/;"	m	class:CCShakyTiles3D	access:protected
m_nRandrange	actions/CCActionTiledGrid.h	/^    int m_nRandrange;$/;"	m	class:CCShatteredTiles3D	access:protected
m_nReuseGrid	effects/CCGrid.h	/^    int  m_nReuseGrid;$/;"	m	class:CCGridBase	access:protected
m_nRows	actions/CCActionTiledGrid.h	/^    unsigned int m_nRows;$/;"	m	class:CCSplitRows	access:protected
m_nScriptHandler	CCScheduler.h	/^    int m_nScriptHandler;$/;"	m	class:CCTimer	access:protected
m_nScriptHandler	actions/CCActionInstant.h	/^	int m_nScriptHandler;$/;"	m	class:CCCallFunc	access:protected
m_nScriptHandler	base_nodes/CCNode.h	/^    int m_nScriptHandler;               \/\/\/< script handler for onEnter() & onExit(), used in Javascript binding and Lua binding.$/;"	m	class:CCNode	access:protected
m_nScriptTapHandler	menu_nodes/CCMenuItem.h	/^    int             m_nScriptTapHandler;$/;"	m	class:CCMenuItem	access:protected
m_nSeed	actions/CCActionTiledGrid.h	/^    unsigned int    m_nSeed;$/;"	m	class:CCTurnOffTiles	access:protected
m_nSeed	actions/CCActionTiledGrid.h	/^    unsigned int m_nSeed;$/;"	m	class:CCShuffleTiles	access:protected
m_nTag	actions/CCAction.h	/^    int     m_nTag;$/;"	m	class:CCAction	access:protected
m_nTag	base_nodes/CCNode.h	/^    int m_nTag;                         \/\/\/< a tag. Can be any number you assigned just to identify this node$/;"	m	class:CCNode	access:protected
m_nTilesCount	actions/CCActionTiledGrid.h	/^    unsigned int    m_nTilesCount;$/;"	m	class:CCTurnOffTiles	access:protected
m_nTilesCount	actions/CCActionTiledGrid.h	/^    unsigned int m_nTilesCount;$/;"	m	class:CCShuffleTiles	access:protected
m_nTimes	actions/CCActionGrid.h	/^    int m_nTimes;$/;"	m	class:CCReuseGrid	access:protected
m_nTimes	actions/CCActionInterval.h	/^    unsigned int m_nTimes;$/;"	m	class:CCBlink	access:protected
m_nTouchPriority	layers_scenes_transitions_nodes/CCLayer.h	/^    int m_nTouchPriority;$/;"	m	class:CCLayer	access:private
m_nTwirls	actions/CCActionGrid3D.h	/^    unsigned int m_nTwirls;$/;"	m	class:CCTwirl	access:protected
m_nUniformColor	base_nodes/CCAtlasNode.h	/^    GLint    m_nUniformColor;$/;"	m	class:CCAtlasNode	access:protected
m_nUpdateScriptHandler	base_nodes/CCNode.h	/^    int m_nUpdateScriptHandler;         \/\/\/< script handler for update() callback per frame, which is invoked from lua & javascript.$/;"	m	class:CCNode	access:protected
m_nValue	cocoa/CCInteger.h	/^    int m_nValue;$/;"	m	class:CCInteger	access:private
m_nVertexDataCount	misc_nodes/CCProgressTimer.h	/^    int m_nVertexDataCount;$/;"	m	class:CCProgressTimer	access:protected
m_nVertexZvalue	tilemap_parallax_nodes/CCTMXLayer.h	/^    int                    m_nVertexZvalue;$/;"	m	class:CCTMXLayer	access:protected
m_nWaves	actions/CCActionGrid3D.h	/^    unsigned int m_nWaves;$/;"	m	class:CCLiquid	access:protected
m_nWaves	actions/CCActionGrid3D.h	/^    unsigned int m_nWaves;$/;"	m	class:CCRipple3D	access:protected
m_nWaves	actions/CCActionGrid3D.h	/^    unsigned int m_nWaves;$/;"	m	class:CCWaves	access:protected
m_nWaves	actions/CCActionGrid3D.h	/^    unsigned int m_nWaves;$/;"	m	class:CCWaves3D	access:protected
m_nWaves	actions/CCActionTiledGrid.h	/^    unsigned int m_nWaves;$/;"	m	class:CCWavesTiles3D	access:protected
m_nZOrder	base_nodes/CCNode.h	/^    int m_nZOrder;                      \/\/\/< z-order value that affects the draw order$/;"	m	class:CCNode	access:protected
m_obAnchorPoint	base_nodes/CCNode.h	/^    CCPoint m_obAnchorPoint;            \/\/\/< anchor point normalized (NOT in points)$/;"	m	class:CCNode	access:protected
m_obAnchorPointInPoints	base_nodes/CCNode.h	/^    CCPoint m_obAnchorPointInPoints;    \/\/\/< anchor point in points$/;"	m	class:CCNode	access:protected
m_obContentSize	base_nodes/CCNode.h	/^    CCSize m_obContentSize;             \/\/\/< untransformed size of the node$/;"	m	class:CCNode	access:protected
m_obDesignResolutionSize	platform/CCEGLViewProtocol.h	/^    CCSize m_obDesignResolutionSize;$/;"	m	class:CCEGLViewProtocol	access:protected
m_obFullScreenSize	actions/CCAction.h	/^    CCPoint m_obFullScreenSize;$/;"	m	class:CCFollow	access:protected
m_obHalfScreenSize	actions/CCAction.h	/^    CCPoint m_obHalfScreenSize;$/;"	m	class:CCFollow	access:protected
m_obOffset	sprite_nodes/CCSpriteFrame.h	/^    CCPoint m_obOffset;$/;"	m	class:CCSpriteFrame	access:protected
m_obOffsetInPixels	sprite_nodes/CCSpriteFrame.h	/^    CCPoint m_obOffsetInPixels;$/;"	m	class:CCSpriteFrame	access:protected
m_obOffsetPosition	sprite_nodes/CCSprite.h	/^    CCPoint m_obOffsetPosition;$/;"	m	class:CCSprite	access:protected
m_obOriginalSize	sprite_nodes/CCSpriteFrame.h	/^    CCSize m_obOriginalSize;$/;"	m	class:CCSpriteFrame	access:protected
m_obOriginalSizeInPixels	sprite_nodes/CCSpriteFrame.h	/^    CCSize m_obOriginalSizeInPixels;$/;"	m	class:CCSpriteFrame	access:protected
m_obPosition	base_nodes/CCNode.h	/^    CCPoint m_obPosition;               \/\/\/< position of the node$/;"	m	class:CCNode	access:protected
m_obRect	sprite_nodes/CCSprite.h	/^    CCRect m_obRect;                            \/\/\/ Retangle of CCTexture2D$/;"	m	class:CCSprite	access:protected
m_obRect	sprite_nodes/CCSpriteFrame.h	/^    CCRect m_obRect;$/;"	m	class:CCSpriteFrame	access:protected
m_obRectInPixels	sprite_nodes/CCSpriteFrame.h	/^    CCRect m_obRectInPixels;$/;"	m	class:CCSpriteFrame	access:protected
m_obScreenSize	platform/CCEGLViewProtocol.h	/^    CCSize m_obScreenSize;$/;"	m	class:CCEGLViewProtocol	access:protected
m_obStep	effects/CCGrid.h	/^    CCPoint m_obStep;$/;"	m	class:CCGridBase	access:protected
m_obUnflippedOffsetPositionFromCenter	sprite_nodes/CCSprite.h	/^    CCPoint m_obUnflippedOffsetPositionFromCenter;$/;"	m	class:CCSprite	access:protected
m_obViewPortRect	platform/CCEGLViewProtocol.h	/^    CCRect m_obViewPortRect;$/;"	m	class:CCEGLViewProtocol	access:protected
m_obWinSizeInPoints	CCDirector.h	/^    CCSize    m_obWinSizeInPoints;$/;"	m	class:CCDirector	access:protected
m_observers	support/CCNotificationCenter.h	/^    CCArray *m_observers;$/;"	m	class:CCNotificationCenter	access:private
m_oldClearColor	effects/CCGrabber.h	/^    GLfloat    m_oldClearColor[4];$/;"	m	class:CCGrabber	access:protected
m_oldFBO	effects/CCGrabber.h	/^    GLint m_oldFBO;$/;"	m	class:CCGrabber	access:protected
m_pAction	actions/CCActionInterval.h	/^    CCFiniteTimeAction* m_pAction;$/;"	m	class:CCTargetedAction	access:private
m_pActionManager	base_nodes/CCNode.h	/^    CCActionManager *m_pActionManager;  \/\/\/< a pointer to ActionManager singleton, which is used to handle all the actions$/;"	m	class:CCNode	access:protected
m_pActions	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pActions[2];$/;"	m	class:CCSequence	access:protected
m_pActiveTimers	support/CCProfiling.h	/^    CCDictionary* m_pActiveTimers;$/;"	m	class:CCProfiler	access:public
m_pAlignment	label_nodes/CCLabelBMFont.h	/^    CCTextAlignment m_pAlignment;$/;"	m	class:CCLabelBMFont	access:protected
m_pAnimations	sprite_nodes/CCAnimationCache.h	/^    CCDictionary* m_pAnimations;$/;"	m	class:CCAnimationCache	access:private
m_pArray	platform/CCFileUtils.cpp	/^    CCArray* m_pArray;$/;"	m	class:CCDictMaker	file:	access:public
m_pAtlasIndexArray	tilemap_parallax_nodes/CCTMXLayer.h	/^    ccCArray            *m_pAtlasIndexArray;$/;"	m	class:CCTMXLayer	access:protected
m_pAutoreasePool	platform/CCThread.h	/^    void *m_pAutoreasePool;$/;"	m	class:CCThread	access:private
m_pBuffer	draw_nodes/CCDrawNode.h	/^    ccV2F_C4B_T2F   *m_pBuffer;$/;"	m	class:CCDrawNode	access:protected
m_pBuffersVBO	particle_nodes/CCParticleSystemQuad.h	/^    GLuint                m_pBuffersVBO[2]; \/\/0: vertex  1: indices$/;"	m	class:CCParticleSystemQuad	access:protected
m_pBuffersVBO	textures/CCTextureAtlas.h	/^    GLuint              m_pBuffersVBO[2]; \/\/0: vertex  1: indices$/;"	m	class:CCTextureAtlas	access:protected
m_pCallFunc	actions/CCActionInstant.h	/^        SEL_CallFunc    m_pCallFunc;$/;"	m	union:CCCallFunc::__anon2	access:public
m_pCallFuncN	actions/CCActionInstant.h	/^        SEL_CallFuncN    m_pCallFuncN;$/;"	m	union:CCCallFunc::__anon2	access:public
m_pCallFuncND	actions/CCActionInstant.h	/^        SEL_CallFuncND    m_pCallFuncND;$/;"	m	union:CCCallFunc::__anon2	access:public
m_pCallFuncO	actions/CCActionInstant.h	/^        SEL_CallFuncO   m_pCallFuncO;$/;"	m	union:CCCallFunc::__anon2	access:public
m_pCamera	base_nodes/CCNode.h	/^    CCCamera *m_pCamera;                \/\/\/< a camera$/;"	m	class:CCNode	access:protected
m_pCharacterSet	label_nodes/CCLabelBMFont.h	/^    std::set<unsigned int> *m_pCharacterSet;$/;"	m	class:CCBMFontConfiguration	access:public
m_pChildren	base_nodes/CCNode.h	/^    CCArray *m_pChildren;               \/\/\/< array of children nodes$/;"	m	class:CCNode	access:protected
m_pClaimedTouches	touch_dispatcher/CCTouchHandler.h	/^    CCSet *m_pClaimedTouches;$/;"	m	class:CCTargetedTouchHandler	access:protected
m_pColorPointer	misc_nodes/CCMotionStreak.h	/^    GLubyte* m_pColorPointer;$/;"	m	class:CCMotionStreak	access:private
m_pConfiguration	label_nodes/CCLabelBMFont.h	/^    CCBMFontConfiguration *m_pConfiguration;$/;"	m	class:CCLabelBMFont	access:protected
m_pControlPoints	actions/CCActionCatmullRom.h	/^    std::vector<CCPoint*> *m_pControlPoints;$/;"	m	class:CCPointArray	access:private
m_pCopyObject	cocoa/CCZone.h	/^    CCObject *m_pCopyObject;$/;"	m	class:CCZone	access:public
m_pCurDict	platform/CCFileUtils.cpp	/^    CCDictionary *m_pCurDict;$/;"	m	class:CCDictMaker	file:	access:public
m_pCurReleasePool	cocoa/CCAutoreleasePool.h	/^    CCAutoreleasePool*                    m_pCurReleasePool;$/;"	m	class:CCPoolManager	access:private
m_pCurrentTarget	CCScheduler.h	/^    struct _hashSelectorEntry *m_pCurrentTarget;$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_hashSelectorEntry	access:protected
m_pCurrentTarget	actions/CCActionManager.h	/^    struct _hashElement    *m_pCurrentTarget;$/;"	m	class:CCActionManager	typeref:struct:CCActionManager::_hashElement	access:protected
m_pData	actions/CCActionInstant.h	/^    void            *m_pData;$/;"	m	class:CCCallFuncND	access:protected
m_pData	platform/CCImage.h	/^    unsigned char *m_pData;$/;"	m	class:CCImage	access:protected
m_pDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^    CCKeypadDelegate* m_pDelegate;$/;"	m	class:CCKeypadHandler	access:protected
m_pDelegate	platform/CCEGLViewProtocol.h	/^    EGLTouchDelegate* m_pDelegate;$/;"	m	class:CCEGLViewProtocol	access:protected
m_pDelegate	touch_dispatcher/CCTouchHandler.h	/^    CCTouchDelegate *m_pDelegate;$/;"	m	class:CCTouchHandler	access:protected
m_pDelegates	keypad_dispatcher/CCKeypadDispatcher.h	/^    CCArray* m_pDelegates;$/;"	m	class:CCKeypadDispatcher	access:protected
m_pDelegator	platform/CCSAXParser.h	/^    CCSAXDelegator*    m_pDelegator;$/;"	m	class:CCSAXParser	access:private
m_pDrawsLabel	CCDirector.h	/^    CCLabelTTF *m_pDrawsLabel;$/;"	m	class:CCDirector	access:protected
m_pElements	cocoa/CCDictionary.h	/^    CCDictElement* m_pElements;$/;"	m	class:CCDictionary	access:public
m_pFPSLabel	CCDirector.h	/^    CCLabelTTF *m_pFPSLabel;$/;"	m	class:CCDirector	access:protected
m_pFilenameLookupDict	platform/CCFileUtils.h	/^    CCDictionary* m_pFilenameLookupDict;$/;"	m	class:CCFileUtils	access:protected
m_pFontDefDictionary	label_nodes/CCLabelBMFont.h	/^    tCCFontDefHashElement *m_pFontDefDictionary;$/;"	m	class:CCBMFontConfiguration	access:public
m_pFontName	label_nodes/CCLabelTTF.h	/^    std::string * m_pFontName;$/;"	m	class:CCLabelTTF	access:protected
m_pGlExtensions	CCConfiguration.h	/^    char *          m_pGlExtensions;$/;"	m	class:CCConfiguration	access:protected
m_pGrabber	effects/CCGrid.h	/^    CCGrabber *m_pGrabber;$/;"	m	class:CCGridBase	access:protected
m_pGrid	base_nodes/CCNode.h	/^    CCGridBase *m_pGrid;                \/\/\/< a grid$/;"	m	class:CCNode	access:protected
m_pHandlersToAdd	keypad_dispatcher/CCKeypadDispatcher.h	/^    struct _ccCArray *m_pHandlersToAdd;$/;"	m	class:CCKeypadDispatcher	typeref:struct:CCKeypadDispatcher::_ccCArray	access:protected
m_pHandlersToAdd	touch_dispatcher/CCTouchDispatcher.h	/^     CCArray* m_pHandlersToAdd;$/;"	m	class:CCTouchDispatcher	access:protected
m_pHandlersToRemove	keypad_dispatcher/CCKeypadDispatcher.h	/^    struct _ccCArray *m_pHandlersToRemove;$/;"	m	class:CCKeypadDispatcher	typeref:struct:CCKeypadDispatcher::_ccCArray	access:protected
m_pHandlersToRemove	touch_dispatcher/CCTouchDispatcher.h	/^    struct _ccCArray *m_pHandlersToRemove;$/;"	m	class:CCTouchDispatcher	typeref:struct:CCTouchDispatcher::_ccCArray	access:protected
m_pHashForTimers	CCScheduler.h	/^    struct _hashSelectorEntry *m_pHashForTimers;$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_hashSelectorEntry	access:protected
m_pHashForUniforms	shaders/CCGLProgram.h	/^    struct _hashUniformEntry* m_pHashForUniforms;$/;"	m	class:CCGLProgram	typeref:struct:CCGLProgram::_hashUniformEntry	access:private
m_pHashForUpdates	CCScheduler.h	/^    struct _hashUpdateEntry *m_pHashForUpdates; \/\/ hash used to fetch quickly the list entries for pause,delete,etc$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_hashUpdateEntry	access:protected
m_pImpl	text_input_node/CCIMEDispatcher.h	/^    Impl * m_pImpl;$/;"	m	class:CCIMEDispatcher	access:private
m_pInScene	layers_scenes_transitions_nodes/CCTransition.h	/^    CCScene    * m_pInScene;$/;"	m	class:CCTransitionScene	access:protected
m_pIndices	effects/CCGrid.h	/^    GLushort *m_pIndices;$/;"	m	class:CCGrid3D	access:protected
m_pIndices	effects/CCGrid.h	/^    GLushort *m_pIndices;$/;"	m	class:CCTiledGrid3D	access:protected
m_pIndices	particle_nodes/CCParticleSystemQuad.h	/^    GLushort            *m_pIndices;    \/\/ indices$/;"	m	class:CCParticleSystemQuad	access:protected
m_pIndices	textures/CCTextureAtlas.h	/^    GLushort*           m_pIndices;$/;"	m	class:CCTextureAtlas	access:protected
m_pInner	actions/CCActionEase.h	/^    CCActionInterval *m_pInner;$/;"	m	class:CCActionEase	access:protected
m_pInnerAction	actions/CCAction.h	/^    CCActionInterval *m_pInnerAction;$/;"	m	class:CCSpeed	access:protected
m_pInnerAction	actions/CCActionInterval.h	/^    CCActionInterval *m_pInnerAction;$/;"	m	class:CCRepeatForever	access:protected
m_pInnerAction	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pInnerAction;$/;"	m	class:CCRepeat	access:protected
m_pInputText	text_input_node/CCTextFieldTTF.h	/^    std::string * m_pInputText;$/;"	m	class:CCTextFieldTTF	access:protected
m_pKerningDictionary	label_nodes/CCLabelBMFont.h	/^    tCCKerningHashElement *m_pKerningDictionary;$/;"	m	class:CCBMFontConfiguration	access:public
m_pLastUpdate	CCDirector.h	/^    struct cc_timeval *m_pLastUpdate;$/;"	m	class:CCDirector	typeref:struct:CCDirector::cc_timeval	access:protected
m_pLayers	layers_scenes_transitions_nodes/CCLayer.h	/^    CCArray*     m_pLayers;$/;"	m	class:CCLayerMultiplex	access:protected
m_pLens	text_input_node/CCTextFieldTTF.h	/^    LengthStack * m_pLens;$/;"	m	class:CCTextFieldTTF	access:private
m_pListener	menu_nodes/CCMenuItem.h	/^    CCObject*       m_pListener;$/;"	m	class:CCMenuItem	access:protected
m_pLoadedFileNames	sprite_nodes/CCSpriteFrameCache.h	/^    std::set<std::string>*  m_pLoadedFileNames;$/;"	m	class:CCSpriteFrameCache	access:protected
m_pManagedObjectArray	cocoa/CCAutoreleasePool.h	/^    CCArray*    m_pManagedObjectArray;    $/;"	m	class:CCAutoreleasePool	access:private
m_pNextScene	CCDirector.h	/^    CCScene *m_pNextScene;$/;"	m	class:CCDirector	access:protected
m_pNotificationNode	CCDirector.h	/^    CCNode *m_pNotificationNode;$/;"	m	class:CCDirector	access:protected
m_pObject	actions/CCActionInstant.h	/^    CCObject* m_pObject;$/;"	m	class:CCCallFuncO	access:protected
m_pObject	cocoa/CCDictionary.h	/^    CCObject* m_pObject;    \/\/ hash value$/;"	m	class:CCDictElement	access:private
m_pOne	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pOne;$/;"	m	class:CCSpawn	access:protected
m_pOrigFrame	actions/CCActionInterval.h	/^    CCSpriteFrame*  m_pOrigFrame;$/;"	m	class:CCAnimate	access:protected
m_pOriginalTarget	actions/CCAction.h	/^    CCNode    *m_pOriginalTarget;$/;"	m	class:CCAction	access:protected
m_pOriginalVertices	effects/CCGrid.h	/^    GLvoid *m_pOriginalVertices;$/;"	m	class:CCGrid3D	access:protected
m_pOriginalVertices	effects/CCGrid.h	/^    GLvoid *m_pOriginalVertices;$/;"	m	class:CCTiledGrid3D	access:protected
m_pOther	actions/CCActionGrid.h	/^    CCActionInterval *m_pOther;$/;"	m	class:CCAccelAmplitude	access:protected
m_pOther	actions/CCActionGrid.h	/^    CCActionInterval *m_pOther;$/;"	m	class:CCAccelDeccelAmplitude	access:protected
m_pOther	actions/CCActionGrid.h	/^    CCActionInterval *m_pOther;$/;"	m	class:CCDeccelAmplitude	access:protected
m_pOther	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pOther;$/;"	m	class:CCReverseTime	access:protected
m_pOutScene	layers_scenes_transitions_nodes/CCTransition.h	/^    CCScene    * m_pOutScene;$/;"	m	class:CCTransitionScene	access:protected
m_pParent	base_nodes/CCNode.h	/^    CCNode *m_pParent;                  \/\/\/< weak reference to parent node$/;"	m	class:CCNode	access:protected
m_pParticles	particle_nodes/CCParticleSystem.h	/^    tCCParticle *m_pParticles;$/;"	m	class:CCParticleSystem	access:protected
m_pPixelFormatInfo	textures/CCTexturePVR.h	/^   const ccPVRTexturePixelFormatInfo *m_pPixelFormatInfo;$/;"	m	class:CCTexturePVR	access:protected
m_pPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    std::string * m_pPlaceHolder;$/;"	m	class:CCTextFieldTTF	access:protected
m_pPointState	misc_nodes/CCMotionStreak.h	/^    float* m_pPointState;$/;"	m	class:CCMotionStreak	access:private
m_pPointVertexes	misc_nodes/CCMotionStreak.h	/^    CCPoint* m_pPointVertexes;$/;"	m	class:CCMotionStreak	access:private
m_pPoints	actions/CCActionCatmullRom.h	/^    CCPointArray *m_pPoints;$/;"	m	class:CCCardinalSplineTo	access:protected
m_pPosToAtlasIndex	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    CCDictionary* m_pPosToAtlasIndex;$/;"	m	class:CCTileMapAtlas	access:protected
m_pPrograms	shaders/CCShaderCache.h	/^    CCDictionary* m_pPrograms;$/;"	m	class:CCShaderCache	access:private
m_pProjectionDelegate	CCDirector.h	/^    CCDirectorDelegate *m_pProjectionDelegate;$/;"	m	class:CCDirector	access:protected
m_pQuads	particle_nodes/CCParticleSystemQuad.h	/^    ccV3F_C4B_T2F_Quad    *m_pQuads;        \/\/ quads to be rendered$/;"	m	class:CCParticleSystemQuad	access:protected
m_pReleasePoolStack	cocoa/CCAutoreleasePool.h	/^    CCArray*    m_pReleasePoolStack;    $/;"	m	class:CCPoolManager	access:private
m_pReusedChar	label_nodes/CCLabelBMFont.h	/^    CCSprite *m_pReusedChar;$/;"	m	class:CCLabelBMFont	access:protected
m_pReusedTile	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite            *m_pReusedTile;$/;"	m	class:CCTMXLayer	access:protected
m_pRootArray	platform/CCFileUtils.cpp	/^    CCArray* m_pRootArray;$/;"	m	class:CCDictMaker	file:	access:public
m_pRootDict	platform/CCFileUtils.cpp	/^    CCDictionary *m_pRootDict;$/;"	m	class:CCDictMaker	file:	access:public
m_pRunningScene	CCDirector.h	/^    CCScene *m_pRunningScene;$/;"	m	class:CCDirector	access:protected
m_pSPFLabel	CCDirector.h	/^    CCLabelTTF *m_pSPFLabel;$/;"	m	class:CCDirector	access:protected
m_pSceneToBeModified	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    CCScene* m_pSceneToBeModified;$/;"	m	class:CCTransitionProgress	access:protected
m_pScheduler	base_nodes/CCNode.h	/^    CCScheduler *m_pScheduler;          \/\/\/< scheduler used to schedule timers and updates$/;"	m	class:CCNode	access:protected
m_pScriptAccelerateHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    CCScriptHandlerEntry* m_pScriptAccelerateHandlerEntry;$/;"	m	class:CCLayer	access:private
m_pScriptEngine	script_support/CCScriptSupport.h	/^    CCScriptEngineProtocol *m_pScriptEngine;$/;"	m	class:CCScriptEngineManager	access:private
m_pScriptHandlerEntries	CCScheduler.h	/^    CCArray* m_pScriptHandlerEntries;$/;"	m	class:CCScheduler	access:protected
m_pScriptKeypadHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    CCScriptHandlerEntry* m_pScriptKeypadHandlerEntry;$/;"	m	class:CCLayer	access:private
m_pScriptTouchHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    CCTouchScriptHandlerEntry* m_pScriptTouchHandlerEntry;$/;"	m	class:CCLayer	access:private
m_pSelectedItem	menu_nodes/CCMenu.h	/^    CCMenuItem *m_pSelectedItem;$/;"	m	class:CCMenu	access:protected
m_pSelectorTarget	actions/CCActionInstant.h	/^    CCObject*   m_pSelectorTarget;$/;"	m	class:CCCallFunc	access:protected
m_pSet	cocoa/CCSet.h	/^    std::set<CCObject *> *m_pSet;$/;"	m	class:CCSet	access:private
m_pShaderProgram	base_nodes/CCNode.h	/^    CCGLProgram *m_pShaderProgram;      \/\/\/< OpenGL shader$/;"	m	class:CCNode	access:protected
m_pShaderProgram	effects/CCGrid.h	/^    CCGLProgram* m_pShaderProgram;$/;"	m	class:CCGridBase	access:protected
m_pSplitTimes	actions/CCActionInterval.h	/^    std::vector<float>* m_pSplitTimes;$/;"	m	class:CCAnimate	access:protected
m_pSprite	misc_nodes/CCProgressTimer.h	/^    CCSprite *m_pSprite;$/;"	m	class:CCProgressTimer	access:protected
m_pSpriteFrames	sprite_nodes/CCSpriteFrameCache.h	/^    CCDictionary* m_pSpriteFrames;$/;"	m	class:CCSpriteFrameCache	access:protected
m_pSpriteFramesAliases	sprite_nodes/CCSpriteFrameCache.h	/^    CCDictionary* m_pSpriteFramesAliases;$/;"	m	class:CCSpriteFrameCache	access:protected
m_pSquareColors	layers_scenes_transitions_nodes/CCLayer.h	/^    ccColor4F  m_pSquareColors[4];$/;"	m	class:CCLayerColor	access:protected
m_pSquareVertices	layers_scenes_transitions_nodes/CCLayer.h	/^    ccVertex2F m_pSquareVertices[4];$/;"	m	class:CCLayerColor	access:protected
m_pStandardHandlers	touch_dispatcher/CCTouchDispatcher.h	/^     CCArray* m_pStandardHandlers;$/;"	m	class:CCTouchDispatcher	access:protected
m_pStencil	misc_nodes/CCClippingNode.h	/^    CCNode* m_pStencil;$/;"	m	class:CCClippingNode	access:protected
m_pTarget	CCScheduler.h	/^    CCObject *m_pTarget;$/;"	m	class:CCTimer	access:protected
m_pTarget	actions/CCAction.h	/^    CCNode    *m_pTarget;$/;"	m	class:CCAction	access:protected
m_pTargetedHandlers	touch_dispatcher/CCTouchDispatcher.h	/^     CCArray* m_pTargetedHandlers;$/;"	m	class:CCTouchDispatcher	access:protected
m_pTargets	actions/CCActionManager.h	/^    struct _hashElement    *m_pTargets;$/;"	m	class:CCActionManager	typeref:struct:CCActionManager::_hashElement	access:protected
m_pTexCoordinates	effects/CCGrid.h	/^    GLvoid *m_pTexCoordinates;$/;"	m	class:CCGrid3D	access:protected
m_pTexCoordinates	effects/CCGrid.h	/^    GLvoid *m_pTexCoordinates;$/;"	m	class:CCTiledGrid3D	access:protected
m_pTexCoords	misc_nodes/CCMotionStreak.h	/^    ccTex2F* m_pTexCoords;$/;"	m	class:CCMotionStreak	access:private
m_pTexture	effects/CCGrid.h	/^    CCTexture2D *m_pTexture;$/;"	m	class:CCGridBase	access:protected
m_pTexture	misc_nodes/CCMotionStreak.h	/^    CCTexture2D* m_pTexture;$/;"	m	class:CCMotionStreak	access:private
m_pTexture	misc_nodes/CCRenderTexture.h	/^    CCTexture2D* m_pTexture;$/;"	m	class:CCRenderTexture	access:protected
m_pTextureCopy	misc_nodes/CCRenderTexture.h	/^    CCTexture2D* m_pTextureCopy;    \/\/ a copy of m_pTexture$/;"	m	class:CCRenderTexture	access:protected
m_pTextureData	textures/CCTextureCache.h	/^    void *m_pTextureData;$/;"	m	class:VolatileTexture	access:protected
m_pTextures	textures/CCTextureCache.h	/^    CCDictionary* m_pTextures;$/;"	m	class:CCTextureCache	access:protected
m_pTileProperties	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCDictionary* m_pTileProperties;$/;"	m	class:CCTMXTiledMap	access:protected
m_pTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCDictionary* m_pTileProperties;$/;"	m	class:CCTMXMapInfo	access:protected
m_pTiles	actions/CCActionTiledGrid.h	/^    Tile* m_pTiles;$/;"	m	class:CCShuffleTiles	access:protected
m_pTiles	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int        *m_pTiles;$/;"	m	class:CCTMXLayerInfo	access:public
m_pTilesOrder	actions/CCActionTiledGrid.h	/^    unsigned int*   m_pTilesOrder;$/;"	m	class:CCTurnOffTiles	access:protected
m_pTilesOrder	actions/CCActionTiledGrid.h	/^    unsigned int* m_pTilesOrder;$/;"	m	class:CCShuffleTiles	access:protected
m_pTimer	script_support/CCScriptSupport.h	/^    cocos2d::CCTimer*   m_pTimer;$/;"	m	class:CCSchedulerScriptHandlerEntry	access:private
m_pTwo	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pTwo;$/;"	m	class:CCSpawn	access:protected
m_pUITextureImage	misc_nodes/CCRenderTexture.h	/^    CCImage*     m_pUITextureImage;$/;"	m	class:CCRenderTexture	access:protected
m_pUpdates0List	CCScheduler.h	/^    struct _listEntry *m_pUpdates0List;            \/\/ list priority == 0$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_listEntry	access:protected
m_pUpdatesNegList	CCScheduler.h	/^    struct _listEntry *m_pUpdatesNegList;        \/\/ list of priority < 0$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_listEntry	access:protected
m_pUpdatesPosList	CCScheduler.h	/^    struct _listEntry *m_pUpdatesPosList;        \/\/ list priority > 0$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_listEntry	access:protected
m_pUserData	base_nodes/CCNode.h	/^    void *m_pUserData;                  \/\/\/< A user assingned void pointer, Can be point to any cpp object$/;"	m	class:CCNode	access:protected
m_pUserObject	base_nodes/CCNode.h	/^    CCObject *m_pUserObject;            \/\/\/< A user assigned CCObject$/;"	m	class:CCNode	access:protected
m_pVertexData	misc_nodes/CCProgressTimer.h	/^    ccV2F_C4B_T2F *m_pVertexData;$/;"	m	class:CCProgressTimer	access:protected
m_pVertices	effects/CCGrid.h	/^    GLvoid *m_pVertices;$/;"	m	class:CCGrid3D	access:protected
m_pVertices	effects/CCGrid.h	/^    GLvoid *m_pVertices;$/;"	m	class:CCTiledGrid3D	access:protected
m_pVertices	misc_nodes/CCMotionStreak.h	/^    ccVertex2F* m_pVertices;$/;"	m	class:CCMotionStreak	access:private
m_pfnSelector	CCScheduler.h	/^    SEL_SCHEDULE m_pfnSelector;$/;"	m	class:CCTimer	access:protected
m_pfnSelector	menu_nodes/CCMenuItem.h	/^    SEL_MenuHandler    m_pfnSelector;$/;"	m	class:CCMenuItem	access:protected
m_pobBatchNode	sprite_nodes/CCSprite.h	/^    CCSpriteBatchNode*  m_pobBatchNode;         \/\/\/ Used batch node (weak reference)$/;"	m	class:CCSprite	access:protected
m_pobDescendants	sprite_nodes/CCSpriteBatchNode.h	/^    CCArray* m_pobDescendants;$/;"	m	class:CCSpriteBatchNode	access:protected
m_pobFollowedNode	actions/CCAction.h	/^    CCNode *m_pobFollowedNode;$/;"	m	class:CCFollow	access:protected
m_pobOpenGLView	CCDirector.h	/^    CCEGLView    *m_pobOpenGLView;$/;"	m	class:CCDirector	access:protected
m_pobScenesStack	CCDirector.h	/^    CCArray* m_pobScenesStack;$/;"	m	class:CCDirector	access:protected
m_pobTexture	sprite_nodes/CCSprite.h	/^    CCTexture2D*       m_pobTexture;            \/\/\/ CCTexture2D object that is used to render the sprite$/;"	m	class:CCSprite	access:protected
m_pobTexture	sprite_nodes/CCSpriteFrame.h	/^    CCTexture2D *m_pobTexture;$/;"	m	class:CCSpriteFrame	access:protected
m_pobTextureAtlas	sprite_nodes/CCSprite.h	/^    CCTextureAtlas*     m_pobTextureAtlas;      \/\/\/ CCSpriteBatchNode texture atlas (weak reference)$/;"	m	class:CCSprite	access:protected
m_pobTextureAtlas	sprite_nodes/CCSpriteBatchNode.h	/^    CCTextureAtlas *m_pobTextureAtlas;$/;"	m	class:CCSpriteBatchNode	access:protected
m_point	touch_dispatcher/CCTouch.h	/^    CCPoint m_point;$/;"	m	class:CCTouch	access:private
m_position	actions/CCActionGrid3D.h	/^    CCPoint m_position;$/;"	m	class:CCLens3D	access:protected
m_position	actions/CCActionGrid3D.h	/^    CCPoint m_position;$/;"	m	class:CCRipple3D	access:protected
m_position	actions/CCActionGrid3D.h	/^    CCPoint m_position;$/;"	m	class:CCTwirl	access:protected
m_positionDelta	actions/CCActionInterval.h	/^    CCPoint m_positionDelta;$/;"	m	class:CCMoveBy	access:protected
m_prevPoint	touch_dispatcher/CCTouch.h	/^    CCPoint m_prevPoint;$/;"	m	class:CCTouch	access:private
m_previousPos	actions/CCActionInterval.h	/^    CCPoint         m_previousPos;$/;"	m	class:CCJumpBy	access:protected
m_previousPosition	actions/CCActionCatmullRom.h	/^    CCPoint	m_previousPosition;$/;"	m	class:CCCardinalSplineTo	access:protected
m_previousPosition	actions/CCActionInterval.h	/^    CCPoint m_previousPosition;$/;"	m	class:CCBezierBy	access:protected
m_previousPosition	actions/CCActionInterval.h	/^    CCPoint m_previousPosition;$/;"	m	class:CCMoveBy	access:protected
m_pszFPS	CCDirector.h	/^    char *m_pszFPS;$/;"	m	class:CCDirector	access:protected
m_sAdditionalTransform	base_nodes/CCNode.h	/^    CCAffineTransform m_sAdditionalTransform; \/\/\/< transform$/;"	m	class:CCNode	access:protected
m_sAtlasName	label_nodes/CCLabelBMFont.h	/^    std::string m_sAtlasName;$/;"	m	class:CCBMFontConfiguration	access:public
m_sBlendFunc	draw_nodes/CCDrawNode.h	/^    ccBlendFunc     m_sBlendFunc;$/;"	m	class:CCDrawNode	access:protected
m_sBlendFunc	sprite_nodes/CCSprite.h	/^    ccBlendFunc        m_sBlendFunc;            \/\/\/ It's required for CCTextureProtocol inheritance$/;"	m	class:CCSprite	access:protected
m_sClearColor	misc_nodes/CCRenderTexture.h	/^    ccColor4F    m_sClearColor;$/;"	m	class:CCRenderTexture	access:protected
m_sConfig	actions/CCActionInterval.h	/^    ccBezierConfig m_sConfig;$/;"	m	class:CCBezierBy	access:protected
m_sCurKey	platform/CCFileUtils.cpp	/^    std::string m_sCurKey;   \/\/\/< parsed key$/;"	m	class:CCDictMaker	file:	access:public
m_sCurValue	platform/CCFileUtils.cpp	/^    std::string m_sCurValue; \/\/ parsed value$/;"	m	class:CCDictMaker	file:	access:public
m_sCurrentString	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string m_sCurrentString;$/;"	m	class:CCTMXMapInfo	access:protected
m_sFilePath	support/user_default/CCUserDefault.cpp	/^string CCUserDefault::m_sFilePath = string("");$/;"	m	class:CCUserDefault	file:
m_sFilePath	support/user_default/CCUserDefault.h	/^    static std::string m_sFilePath;$/;"	m	class:CCUserDefault	access:private
m_sFilePath	support/user_default/CCUserDefaultAndroid.cpp	/^string CCUserDefault::m_sFilePath = string("");$/;"	m	class:CCUserDefault	file:
m_sFntFile	label_nodes/CCLabelBMFont.h	/^    std::string m_sFntFile;$/;"	m	class:CCLabelBMFont	access:protected
m_sGridSize	actions/CCActionGrid.h	/^    CCSize m_sGridSize;$/;"	m	class:CCGridAction	access:protected
m_sGridSize	effects/CCGrid.h	/^    CCSize m_sGridSize;$/;"	m	class:CCGridBase	access:protected
m_sGroupName	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    std::string m_sGroupName;$/;"	m	class:CCTMXObjectGroup	access:protected
m_sHandlerHelperData	touch_dispatcher/CCTouchDispatcher.h	/^    struct ccTouchHandlerHelperData m_sHandlerHelperData[ccTouchMax];$/;"	m	class:CCTouchDispatcher	typeref:struct:CCTouchDispatcher::ccTouchHandlerHelperData	access:protected
m_sInitialString	label_nodes/CCLabelBMFont.h	/^    unsigned short* m_sInitialString;$/;"	m	class:CCLabelBMFont	access:protected
m_sInitialStringUTF8	label_nodes/CCLabelBMFont.h	/^    std::string m_sInitialStringUTF8;$/;"	m	class:CCLabelBMFont	access:protected
m_sInverse	base_nodes/CCNode.h	/^    CCAffineTransform m_sInverse;       \/\/\/< transform$/;"	m	class:CCNode	access:protected
m_sLayerName	tilemap_parallax_nodes/CCTMXLayer.h	/^    std::string m_sLayerName;$/;"	m	class:CCTMXLayer	access:protected
m_sName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string         m_sName;$/;"	m	class:CCTMXLayerInfo	access:public
m_sName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string     m_sName;$/;"	m	class:CCTMXTilesetInfo	access:public
m_sPlistFile	particle_nodes/CCParticleSystem.h	/^    std::string m_sPlistFile;$/;"	m	class:CCParticleSystem	access:protected
m_sQuad	sprite_nodes/CCSprite.h	/^    ccV3F_C4B_T2F_Quad m_sQuad;$/;"	m	class:CCSprite	access:protected
m_sResources	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string m_sResources;$/;"	m	class:CCTMXMapInfo	access:protected
m_sSourceImage	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string     m_sSourceImage;$/;"	m	class:CCTMXTilesetInfo	access:public
m_sStartTime	support/CCProfiling.h	/^    struct cc_timeval m_sStartTime;$/;"	m	class:CCProfilingTimer	typeref:struct:CCProfilingTimer::cc_timeval	access:public
m_sString	cocoa/CCString.h	/^    std::string m_sString;$/;"	m	class:CCString	access:public
m_sString	label_nodes/CCLabelAtlas.h	/^    std::string m_sString;$/;"	m	class:CCLabelAtlas	access:protected
m_sString	label_nodes/CCLabelBMFont.h	/^    unsigned short* m_sString;$/;"	m	class:CCLabelBMFont	access:protected
m_sTMXFileName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string m_sTMXFileName;$/;"	m	class:CCTMXMapInfo	access:protected
m_sToConfig	actions/CCActionInterval.h	/^    ccBezierConfig m_sToConfig;$/;"	m	class:CCBezierTo	access:protected
m_sTransform	base_nodes/CCNode.h	/^    CCAffineTransform m_sTransform;     \/\/\/< transform$/;"	m	class:CCNode	access:protected
m_sbIsFilePathInitialized	support/user_default/CCUserDefault.cpp	/^bool CCUserDefault::m_sbIsFilePathInitialized = false;$/;"	m	class:CCUserDefault	file:
m_sbIsFilePathInitialized	support/user_default/CCUserDefault.h	/^    static bool m_sbIsFilePathInitialized;$/;"	m	class:CCUserDefault	access:private
m_sbIsFilePathInitialized	support/user_default/CCUserDefaultAndroid.cpp	/^bool CCUserDefault::m_sbIsFilePathInitialized = false;$/;"	m	class:CCUserDefault	file:
m_scriptHandler	support/CCNotificationCenter.h	/^    int     m_scriptHandler;$/;"	m	class:CCNotificationCenter	access:private
m_searchPathArray	platform/CCFileUtils.h	/^    std::vector<std::string> m_searchPathArray;$/;"	m	class:CCFileUtils	access:protected
m_searchResolutionsOrderArray	platform/CCFileUtils.h	/^    std::vector<std::string> m_searchResolutionsOrderArray;$/;"	m	class:CCFileUtils	access:protected
m_size	textures/CCTextureCache.h	/^    CCSize          m_size;$/;"	m	class:VolatileTexture	access:protected
m_spUserDefault	support/user_default/CCUserDefault.cpp	/^CCUserDefault* CCUserDefault::m_spUserDefault = 0;$/;"	m	class:CCUserDefault	file:
m_spUserDefault	support/user_default/CCUserDefault.h	/^    static CCUserDefault* m_spUserDefault;$/;"	m	class:CCUserDefault	access:private
m_split	actions/CCActionInterval.h	/^    float m_split;$/;"	m	class:CCSequence	access:protected
m_startPoint	touch_dispatcher/CCTouch.h	/^    CCPoint m_startPoint;$/;"	m	class:CCTouch	access:private
m_startPointCaptured	touch_dispatcher/CCTouch.h	/^    bool m_startPointCaptured;$/;"	m	class:CCTouch	access:private
m_startPosition	actions/CCActionCatmullRom.h	/^    CCPoint m_startPosition;$/;"	m	class:CCCardinalSplineBy	access:protected
m_startPosition	actions/CCActionInterval.h	/^    CCPoint         m_startPosition;$/;"	m	class:CCJumpBy	access:protected
m_startPosition	actions/CCActionInterval.h	/^    CCPoint m_startPosition;$/;"	m	class:CCBezierBy	access:protected
m_startPosition	actions/CCActionInterval.h	/^    CCPoint m_startPosition;$/;"	m	class:CCMoveBy	access:protected
m_strDefaultResRootPath	platform/CCFileUtils.h	/^    std::string m_strDefaultResRootPath;$/;"	m	class:CCFileUtils	access:protected
m_strFileName	textures/CCTextureCache.h	/^    std::string m_strFileName;$/;"	m	class:VolatileTexture	access:protected
m_strFontName	menu_nodes/CCMenuItem.h	/^    std::string m_strFontName;$/;"	m	class:CCMenuItemFont	access:protected
m_strFontName	textures/CCTextureCache.h	/^    std::string     m_strFontName;$/;"	m	class:VolatileTexture	access:protected
m_strKey	actions/CCActionTween.h	/^    std::string        m_strKey;$/;"	m	class:CCActionTween	access:public
m_strText	textures/CCTextureCache.h	/^    std::string     m_strText;$/;"	m	class:VolatileTexture	access:protected
m_strTextureFilename	sprite_nodes/CCSpriteFrame.h	/^    std::string  m_strTextureFilename;$/;"	m	class:CCSpriteFrame	access:protected
m_string	label_nodes/CCLabelTTF.h	/^    std::string m_string;$/;"	m	class:CCLabelTTF	access:protected
m_szKey	cocoa/CCDictionary.h	/^    char      m_szKey[MAX_KEY_LEN];     \/\/ hash key of string type$/;"	m	class:CCDictElement	access:private
m_szViewName	platform/CCEGLViewProtocol.h	/^    char   m_szViewName[50];$/;"	m	class:CCEGLViewProtocol	access:protected
m_tArrayStack	platform/CCFileUtils.cpp	/^    std::stack<CCArray*> m_tArrayStack;$/;"	m	class:CCDictMaker	file:	access:public
m_tBlendFunc	misc_nodes/CCMotionStreak.h	/^    ccBlendFunc m_tBlendFunc;$/;"	m	class:CCMotionStreak	access:private
m_tBlendFunc	particle_nodes/CCParticleBatchNode.h	/^    ccBlendFunc m_tBlendFunc;$/;"	m	class:CCParticleBatchNode	access:private
m_tColor	layers_scenes_transitions_nodes/CCTransition.h	/^    ccColor4B    m_tColor;$/;"	m	class:CCTransitionFade	access:protected
m_tColorBackup	menu_nodes/CCMenuItem.h	/^    ccColor3B    m_tColorBackup;$/;"	m	class:CCMenuItemLabel	access:protected
m_tColorUnmodified	base_nodes/CCAtlasNode.h	/^    ccColor3B    m_tColorUnmodified;$/;"	m	class:CCAtlasNode	access:protected
m_tDictStack	platform/CCFileUtils.cpp	/^    std::stack<CCDictionary*> m_tDictStack;$/;"	m	class:CCDictMaker	file:	access:public
m_tDimensions	label_nodes/CCLabelTTF.h	/^    CCSize m_tDimensions;$/;"	m	class:CCLabelTTF	access:protected
m_tDisplayedColor	label_nodes/CCLabelBMFont.h	/^    ccColor3B m_tDisplayedColor;$/;"	m	class:CCLabelBMFont	access:protected
m_tImageOffset	label_nodes/CCLabelBMFont.h	/^    CCPoint    m_tImageOffset;$/;"	m	class:CCLabelBMFont	access:protected
m_tImageSize	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCSize          m_tImageSize;$/;"	m	class:CCTMXTilesetInfo	access:public
m_tLastPosition	tilemap_parallax_nodes/CCParallaxNode.h	/^    CCPoint    m_tLastPosition;$/;"	m	class:CCParallaxNode	access:protected
m_tLayerSize	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCSize              m_tLayerSize;$/;"	m	class:CCTMXLayerInfo	access:public
m_tOffset	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCPoint             m_tOffset;$/;"	m	class:CCTMXLayerInfo	access:public
m_tPadding	label_nodes/CCLabelBMFont.h	/^    ccBMFontPadding    m_tPadding;$/;"	m	class:CCBMFontConfiguration	access:public
m_tPosition	actions/CCActionInstant.h	/^    CCPoint m_tPosition;$/;"	m	class:CCPlace	access:protected
m_tPositionR	misc_nodes/CCMotionStreak.h	/^    CCPoint m_tPositionR;$/;"	m	class:CCMotionStreak	access:private
m_tRealColor	label_nodes/CCLabelBMFont.h	/^    ccColor3B m_tRealColor;$/;"	m	class:CCLabelBMFont	access:protected
m_tState	platform/CCFileUtils.cpp	/^    CCSAXState m_tState;$/;"	m	class:CCDictMaker	file:	access:public
m_tStateStack	platform/CCFileUtils.cpp	/^    std::stack<CCSAXState>  m_tStateStack;$/;"	m	class:CCDictMaker	file:	access:public
m_tTileSize	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCSize          m_tTileSize;$/;"	m	class:CCTMXTilesetInfo	access:public
m_texParams	textures/CCTextureCache.h	/^    ccTexParams     m_texParams;$/;"	m	class:VolatileTexture	access:protected
m_to	actions/CCActionInterval.h	/^    ccColor3B m_to;$/;"	m	class:CCTintTo	access:protected
m_toOpacity	actions/CCActionInterval.h	/^    GLubyte m_toOpacity;$/;"	m	class:CCFadeTo	access:protected
m_transformToBatch	sprite_nodes/CCSprite.h	/^    CCAffineTransform   m_transformToBatch;$/;"	m	class:CCSprite	access:protected
m_type	touch_dispatcher/CCTouchDispatcher.h	/^    int  m_type;$/;"	m	struct:ccTouchHandlerHelperData	access:public
m_uAllocatedParticles	particle_nodes/CCParticleSystem.h	/^    unsigned int m_uAllocatedParticles;$/;"	m	class:CCParticleSystem	access:protected
m_uAtlasIndex	sprite_nodes/CCSprite.h	/^    unsigned int        m_uAtlasIndex;          \/\/\/ Absolute (real) Index on the SpriteSheet$/;"	m	class:CCSprite	access:protected
m_uAutoReleaseCount	cocoa/CCObject.h	/^    unsigned int        m_uAutoReleaseCount;$/;"	m	class:CCObject	access:protected
m_uBufferCapacity	draw_nodes/CCDrawNode.h	/^    unsigned int    m_uBufferCapacity;$/;"	m	class:CCDrawNode	access:protected
m_uClearFlags	misc_nodes/CCRenderTexture.h	/^    GLbitfield   m_uClearFlags;$/;"	m	class:CCRenderTexture	access:protected
m_uCurrentFirstGID	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int m_uCurrentFirstGID;$/;"	m	class:CCTMXMapInfo	access:protected
m_uDepthRenderBufffer	misc_nodes/CCRenderTexture.h	/^    GLuint       m_uDepthRenderBufffer;$/;"	m	class:CCRenderTexture	access:protected
m_uExecutedLoops	actions/CCActionInterval.h	/^       unsigned int    m_uExecutedLoops;$/;"	m	class:CCAnimate	access:protected
m_uFBO	misc_nodes/CCRenderTexture.h	/^    GLuint       m_uFBO;$/;"	m	class:CCRenderTexture	access:protected
m_uFirstGid	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int    m_uFirstGid;$/;"	m	class:CCTMXTilesetInfo	access:public
m_uFontSize	menu_nodes/CCMenuItem.h	/^    unsigned int m_uFontSize;$/;"	m	class:CCMenuItemFont	access:protected
m_uFragShader	shaders/CCGLProgram.h	/^    GLuint            m_uFragShader;$/;"	m	class:CCGLProgram	access:private
m_uFrames	CCDirector.h	/^    unsigned int m_uFrames;$/;"	m	class:CCDirector	access:protected
m_uHeight	textures/CCTexturePVR.h	/^    unsigned int m_uWidth, m_uHeight;$/;"	m	class:CCTexturePVR	access:protected
m_uID	cocoa/CCObject.h	/^    unsigned int        m_uID;$/;"	m	class:CCObject	access:public
m_uItemHeight	base_nodes/CCAtlasNode.h	/^    unsigned int    m_uItemHeight;$/;"	m	class:CCAtlasNode	access:protected
m_uItemWidth	base_nodes/CCAtlasNode.h	/^    unsigned int    m_uItemWidth;$/;"	m	class:CCAtlasNode	access:protected
m_uItemsPerColumn	base_nodes/CCAtlasNode.h	/^    unsigned int m_uItemsPerColumn;$/;"	m	class:CCAtlasNode	access:protected
m_uItemsPerRow	base_nodes/CCAtlasNode.h	/^    unsigned int m_uItemsPerRow;$/;"	m	class:CCAtlasNode	access:protected
m_uMapStartChar	label_nodes/CCLabelAtlas.h	/^    unsigned int m_uMapStartChar;$/;"	m	class:CCLabelAtlas	access:protected
m_uMargin	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int    m_uMargin;$/;"	m	class:CCTMXTilesetInfo	access:public
m_uMaxGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int        m_uMaxGID;$/;"	m	class:CCTMXLayer	access:protected
m_uMaxGID	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int        m_uMaxGID;$/;"	m	class:CCTMXLayerInfo	access:public
m_uMaxPoints	misc_nodes/CCMotionStreak.h	/^    unsigned int m_uMaxPoints;$/;"	m	class:CCMotionStreak	access:private
m_uMinGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int        m_uMinGID;$/;"	m	class:CCTMXLayer	access:protected
m_uMinGID	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int        m_uMinGID;$/;"	m	class:CCTMXLayerInfo	access:public
m_uName	textures/CCTexturePVR.h	/^    GLuint m_uName;$/;"	m	class:CCTexturePVR	access:protected
m_uNuPoints	misc_nodes/CCMotionStreak.h	/^    unsigned int m_uNuPoints;$/;"	m	class:CCMotionStreak	access:private
m_uNumberOfMipmaps	textures/CCTexturePVR.h	/^    unsigned int m_uNumberOfMipmaps;                    \/\/ number of mipmap used$/;"	m	class:CCTexturePVR	access:protected
m_uOrderOfArrival	base_nodes/CCNode.h	/^    unsigned int m_uOrderOfArrival;     \/\/\/< used to preserve sequence while sorting children with the same zOrder$/;"	m	class:CCNode	access:protected
m_uParticleIdx	particle_nodes/CCParticleSystem.h	/^    unsigned int m_uParticleIdx;$/;"	m	class:CCParticleSystem	access:protected
m_uPreviousNuPoints	misc_nodes/CCMotionStreak.h	/^    unsigned int m_uPreviousNuPoints;$/;"	m	class:CCMotionStreak	access:private
m_uProgram	shaders/CCGLProgram.h	/^    GLuint            m_uProgram;$/;"	m	class:CCGLProgram	access:private
m_uReference	cocoa/CCObject.h	/^    unsigned int        m_uReference;$/;"	m	class:CCObject	access:protected
m_uRepeat	CCScheduler.h	/^    unsigned int m_uRepeat; \/\/0 = once, 1 is 2 x executed$/;"	m	class:CCTimer	access:protected
m_uSpacing	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int    m_uSpacing;$/;"	m	class:CCTMXTilesetInfo	access:public
m_uTimes	actions/CCActionInterval.h	/^    unsigned int m_uTimes;$/;"	m	class:CCRepeat	access:protected
m_uTimesExecuted	CCScheduler.h	/^    unsigned int m_uTimesExecuted;$/;"	m	class:CCTimer	access:protected
m_uTotal	actions/CCActionInterval.h	/^    unsigned int m_uTotal;$/;"	m	class:CCRepeat	access:protected
m_uTotalFrames	CCDirector.h	/^    unsigned int m_uTotalFrames;$/;"	m	class:CCDirector	access:protected
m_uUniforms	shaders/CCGLProgram.h	/^    GLint             m_uUniforms[kCCUniform_MAX];$/;"	m	class:CCGLProgram	access:private
m_uVAOname	particle_nodes/CCParticleSystemQuad.h	/^    GLuint                m_uVAOname;$/;"	m	class:CCParticleSystemQuad	access:protected
m_uVAOname	textures/CCTextureAtlas.h	/^    GLuint              m_uVAOname;$/;"	m	class:CCTextureAtlas	access:protected
m_uVao	draw_nodes/CCDrawNode.h	/^    GLuint      m_uVao;$/;"	m	class:CCDrawNode	access:protected
m_uVbo	draw_nodes/CCDrawNode.h	/^    GLuint      m_uVbo;$/;"	m	class:CCDrawNode	access:protected
m_uVertShader	shaders/CCGLProgram.h	/^    GLuint            m_uVertShader;$/;"	m	class:CCGLProgram	access:private
m_uWidth	textures/CCTexturePVR.h	/^    unsigned int m_uWidth, m_uHeight;$/;"	m	class:CCTexturePVR	access:protected
m_vAlignment	label_nodes/CCLabelTTF.h	/^    CCVerticalTextAlignment m_vAlignment;$/;"	m	class:CCLabelTTF	access:protected
m_vAlignment	textures/CCTextureCache.h	/^    CCVerticalTextAlignment m_vAlignment;$/;"	m	class:VolatileTexture	access:protected
m_winSize	actions/CCActionTiledGrid.h	/^    CCSize m_winSize;$/;"	m	class:CCSplitCols	access:protected
m_winSize	actions/CCActionTiledGrid.h	/^    CCSize m_winSize;$/;"	m	class:CCSplitRows	access:protected
magFilter	textures/CCTexture2D.h	/^    GLuint    magFilter;$/;"	m	struct:_ccTexParams	access:public
mainLoop	CCDirector.cpp	/^void CCDisplayLinkDirector::mainLoop(void)$/;"	f	class:CCDisplayLinkDirector	signature:(void)
mainLoop	CCDirector.h	/^    virtual void mainLoop(void) = 0;$/;"	p	class:CCDirector	access:public	signature:(void)
mainLoop	CCDirector.h	/^    virtual void mainLoop(void);$/;"	p	class:CCDisplayLinkDirector	access:public	signature:(void)
mapBuffers	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::mapBuffers()$/;"	f	class:CCTextureAtlas	signature:()
mapBuffers	textures/CCTextureAtlas.h	/^    void mapBuffers();$/;"	p	class:CCTextureAtlas	access:private	signature:()
markedForDeletion	CCScheduler.cpp	/^    bool                markedForDeletion; \/\/ selector will no longer be called and entry will be removed at end of the next tick$/;"	m	struct:_listEntry	file:	access:public
markedForDeletion	script_support/CCScriptSupport.h	/^    void markedForDeletion(void) {$/;"	f	class:CCSchedulerScriptHandlerEntry	access:public	signature:(void)
mat	kazmath/include/kazmath/mat3.h	/^    kmScalar mat[9];$/;"	m	struct:kmMat3	access:public
mat	kazmath/include/kazmath/mat4.h	/^    kmScalar mat[16];$/;"	m	struct:kmMat4	access:public
max	kazmath/include/kazmath/aabb.h	/^    kmVec3 max; \/** The min corner of the box *\/$/;"	m	struct:kmAABB	access:public
max	support/data_support/ccCArray.h	/^	unsigned int num, max;$/;"	m	struct:_ccArray	access:public
max	support/data_support/ccCArray.h	/^    unsigned int num, max;$/;"	m	struct:_ccCArray	access:public
maxTime	support/CCProfiling.h	/^    double            maxTime;$/;"	m	class:CCProfilingTimer	access:public
mem	support/tinyxml2/tinyxml2.h	/^        char    mem[SIZE];$/;"	m	union:tinyxml2::MemPoolT::Chunk	access:public
menu_selector	cocoa/CCObject.h	92;"	d
metadataLength	textures/CCTexturePVR.cpp	/^	uint32_t metadataLength;$/;"	m	struct:__anon56	file:	access:public
min	kazmath/include/kazmath/aabb.h	/^    kmVec3 min; \/** The max corner of the box *\/$/;"	m	struct:kmAABB	access:public
minFilter	textures/CCTexture2D.h	/^    GLuint    minFilter;$/;"	m	struct:_ccTexParams	access:public
minTime	support/CCProfiling.h	/^    double            minTime;$/;"	m	class:CCProfilingTimer	access:public
modeA	particle_nodes/CCParticleSystem.h	/^    } modeA;$/;"	m	class:CCParticleSystem	typeref:struct:CCParticleSystem::__anon24	access:protected
modeA	particle_nodes/CCParticleSystem.h	/^    } modeA;$/;"	m	struct:sCCParticle	typeref:struct:sCCParticle::__anon22	access:public
modeB	particle_nodes/CCParticleSystem.h	/^    } modeB;$/;"	m	class:CCParticleSystem	typeref:struct:CCParticleSystem::__anon25	access:protected
modeB	particle_nodes/CCParticleSystem.h	/^    } modeB;$/;"	m	struct:sCCParticle	typeref:struct:sCCParticle::__anon23	access:public
modelview_matrix_stack	kazmath/src/GL/matrix.c	/^km_mat4_stack modelview_matrix_stack;$/;"	v
moveQuadsFromIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::moveQuadsFromIndex(unsigned int index, unsigned int newIndex)$/;"	f	class:CCTextureAtlas	signature:(unsigned int index, unsigned int newIndex)
moveQuadsFromIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::moveQuadsFromIndex(unsigned int oldIndex, unsigned int amount, unsigned int newIndex)$/;"	f	class:CCTextureAtlas	signature:(unsigned int oldIndex, unsigned int amount, unsigned int newIndex)
moveQuadsFromIndex	textures/CCTextureAtlas.h	/^    void moveQuadsFromIndex(unsigned int index, unsigned int newIndex);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int index, unsigned int newIndex)
moveQuadsFromIndex	textures/CCTextureAtlas.h	/^    void moveQuadsFromIndex(unsigned int oldIndex, unsigned int amount, unsigned int newIndex);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int oldIndex, unsigned int amount, unsigned int newIndex)
mutableCopy	cocoa/CCSet.cpp	/^CCSet* CCSet::mutableCopy(void)$/;"	f	class:CCSet	signature:(void)
mutableCopy	cocoa/CCSet.h	/^    CCSet* mutableCopy();$/;"	p	class:CCSet	access:public	signature:()
my_error_exit	platform/CCImageCommon_cpp.h	/^my_error_exit (j_common_ptr cinfo)$/;"	f	signature:(j_common_ptr cinfo)
my_error_mgr	platform/CCImageCommon_cpp.h	/^struct my_error_mgr {$/;"	s
my_error_mgr::pub	platform/CCImageCommon_cpp.h	/^  struct jpeg_error_mgr pub;	\/* "public" fields *\/$/;"	m	struct:my_error_mgr	typeref:struct:my_error_mgr::jpeg_error_mgr	access:public
my_error_mgr::setjmp_buffer	platform/CCImageCommon_cpp.h	/^  jmp_buf setjmp_buffer;	\/* for return to caller *\/$/;"	m	struct:my_error_mgr	access:public
my_error_ptr	platform/CCImageCommon_cpp.h	/^typedef struct my_error_mgr * my_error_ptr;$/;"	t	typeref:struct:my_error_mgr
need_quit	textures/CCTextureCache.cpp	/^static bool need_quit = false;$/;"	v	file:
newCCImage	misc_nodes/CCRenderTexture.cpp	/^CCImage* CCRenderTexture::newCCImage(bool flipImage)$/;"	f	class:CCRenderTexture	signature:(bool flipImage)
newCCImage	misc_nodes/CCRenderTexture.h	/^    CCImage* newCCImage(bool flipImage = true);$/;"	p	class:CCRenderTexture	access:public	signature:(bool flipImage = true)
next	CCScheduler.cpp	/^    struct _listEntry   *prev, *next;$/;"	m	struct:_listEntry	typeref:struct:_listEntry::	file:	access:public
next	support/data_support/uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle	access:public
next	support/tinyxml2/tinyxml2.h	/^        Chunk*  next;$/;"	m	union:tinyxml2::MemPoolT::Chunk	access:public
nodeToParentTransform	base_nodes/CCNode.cpp	/^CCAffineTransform CCNode::nodeToParentTransform(void)$/;"	f	class:CCNode	signature:(void)
nodeToParentTransform	base_nodes/CCNode.h	/^    virtual CCAffineTransform nodeToParentTransform(void);$/;"	p	class:CCNode	access:public	signature:(void)
nodeToWorldTransform	base_nodes/CCNode.cpp	/^CCAffineTransform CCNode::nodeToWorldTransform()$/;"	f	class:CCNode	signature:()
nodeToWorldTransform	base_nodes/CCNode.h	/^    virtual CCAffineTransform nodeToWorldTransform(void);$/;"	p	class:CCNode	access:public	signature:(void)
noexpand	support/data_support/uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	access:public
nonideal_items	support/data_support/uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table	access:public
num	support/data_support/ccCArray.h	/^	unsigned int num, max;$/;"	m	struct:_ccArray	access:public
num	support/data_support/ccCArray.h	/^    unsigned int num, max;$/;"	m	struct:_ccCArray	access:public
numMipmaps	textures/CCTexturePVR.cpp	/^    unsigned int numMipmaps;$/;"	m	struct:_PVRTexHeader	file:	access:public
numSurfs	textures/CCTexturePVR.cpp	/^    unsigned int numSurfs;$/;"	m	struct:_PVRTexHeader	file:	access:public
num_buckets	support/data_support/uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	access:public
num_file	support/zip_support/unzip.cpp	/^    ZPOS64_T num_file;             \/* number of the current file in the zipfile*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
num_items	support/data_support/uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table	access:public
num_of_file	support/zip_support/unzip.h	/^    ZPOS64_T num_of_file;            \/* # of file *\/$/;"	m	struct:cocos2d::unz64_file_pos_s	access:public
num_of_file	support/zip_support/unzip.h	/^    uLong num_of_file;            \/* # of file *\/$/;"	m	struct:cocos2d::unz_file_pos_s	access:public
numberOfCalls	support/CCProfiling.h	/^    unsigned int    numberOfCalls;$/;"	m	class:CCProfilingTimer	access:public
numberOfFaces	textures/CCTexturePVR.cpp	/^	uint32_t numberOfFaces;$/;"	m	struct:__anon56	file:	access:public
numberOfMipmaps	textures/CCTexturePVR.cpp	/^	uint32_t numberOfMipmaps;$/;"	m	struct:__anon56	file:	access:public
numberOfRunningActions	base_nodes/CCNode.cpp	/^unsigned int CCNode::numberOfRunningActions()$/;"	f	class:CCNode	signature:()
numberOfRunningActions	base_nodes/CCNode.h	/^    unsigned int numberOfRunningActions(void);$/;"	p	class:CCNode	access:public	signature:(void)
numberOfRunningActionsInTarget	actions/CCActionManager.cpp	/^unsigned int CCActionManager::numberOfRunningActionsInTarget(CCObject *pTarget)$/;"	f	class:CCActionManager	signature:(CCObject *pTarget)
numberOfRunningActionsInTarget	actions/CCActionManager.h	/^    unsigned int numberOfRunningActionsInTarget(CCObject *pTarget);$/;"	p	class:CCActionManager	access:public	signature:(CCObject *pTarget)
numberOfSurfaces	textures/CCTexturePVR.cpp	/^	uint32_t numberOfSurfaces;$/;"	m	struct:__anon56	file:	access:public
number_entry	support/zip_support/unzip.h	/^    ZPOS64_T number_entry;         \/* total number of entries in$/;"	m	struct:cocos2d::unz_global_info64_s	access:public
number_entry	support/zip_support/unzip.h	/^    uLong number_entry;         \/* total number of entries in$/;"	m	struct:cocos2d::unz_global_info_s	access:public
objectAtIndex	cocoa/CCArray.cpp	/^CCObject* CCArray::objectAtIndex(unsigned int index)$/;"	f	class:CCArray	signature:(unsigned int index)
objectAtIndex	cocoa/CCArray.h	/^    CCObject* objectAtIndex(unsigned int index);$/;"	p	class:CCArray	access:public	signature:(unsigned int index)
objectForKey	cocoa/CCDictionary.cpp	/^CCObject* CCDictionary::objectForKey(const std::string& key)$/;"	f	class:CCDictionary	signature:(const std::string& key)
objectForKey	cocoa/CCDictionary.cpp	/^CCObject* CCDictionary::objectForKey(int key)$/;"	f	class:CCDictionary	signature:(int key)
objectForKey	cocoa/CCDictionary.h	/^    CCObject* objectForKey(const std::string& key);$/;"	p	class:CCDictionary	access:public	signature:(const std::string& key)
objectForKey	cocoa/CCDictionary.h	/^    CCObject* objectForKey(int key);$/;"	p	class:CCDictionary	access:public	signature:(int key)
objectGroupNamed	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXObjectGroup * CCTMXTiledMap::objectGroupNamed(const char *groupName)$/;"	f	class:CCTMXTiledMap	signature:(const char *groupName)
objectGroupNamed	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXObjectGroup* objectGroupNamed(const char *groupName);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char *groupName)
objectNamed	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCDictionary* CCTMXObjectGroup::objectNamed(const char *objectName)$/;"	f	class:CCTMXObjectGroup	signature:(const char *objectName)
objectNamed	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    CCDictionary* objectNamed(const char *objectName);$/;"	p	class:CCTMXObjectGroup	access:public	signature:(const char *objectName)
observerExisted	support/CCNotificationCenter.cpp	/^bool CCNotificationCenter::observerExisted(CCObject *target,const char *name)$/;"	f	class:CCNotificationCenter	signature:(CCObject *target,const char *name)
observerExisted	support/CCNotificationCenter.h	/^    bool observerExisted(CCObject *target,const char *name);$/;"	p	class:CCNotificationCenter	access:private	signature:(CCObject *target,const char *name)
offset	platform/CCImageCommon_cpp.h	/^    int offset;$/;"	m	struct:__anon30	access:public
offset_central_dir	support/zip_support/unzip.cpp	/^    ZPOS64_T offset_central_dir;   \/* offset of start of central directory with$/;"	m	struct:cocos2d::__anon44	file:	access:public
offset_curfile	support/zip_support/unzip.cpp	/^    ZPOS64_T offset_curfile;\/* relative offset of local header 8 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_internal_s	file:	access:public
offset_local_extrafield	support/zip_support/unzip.cpp	/^    ZPOS64_T offset_local_extrafield;\/* offset of the local extra field *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
onDraw	text_input_node/CCTextFieldTTF.h	/^    virtual bool onDraw(CCTextFieldTTF * sender)$/;"	f	class:CCTextFieldDelegate	access:public	signature:(CCTextFieldTTF * sender)
onEnter	base_nodes/CCNode.cpp	/^void CCNode::onEnter()$/;"	f	class:CCNode	signature:()
onEnter	base_nodes/CCNode.h	/^    virtual void onEnter();$/;"	p	class:CCNode	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::onEnter()$/;"	f	class:CCLayer	signature:()
onEnter	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void onEnter();$/;"	p	class:CCLayer	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionCrossFade::onEnter()$/;"	f	class:CCTransitionCrossFade	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFade :: onEnter()$/;"	f	class:CCTransitionFade	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFadeTR::onEnter()$/;"	f	class:CCTransitionFadeTR	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFlipAngular::onEnter()$/;"	f	class:CCTransitionFlipAngular	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFlipX::onEnter()$/;"	f	class:CCTransitionFlipX	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFlipY::onEnter()$/;"	f	class:CCTransitionFlipY	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionJumpZoom::onEnter()$/;"	f	class:CCTransitionJumpZoom	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInL::onEnter()$/;"	f	class:CCTransitionMoveInL	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionRotoZoom:: onEnter()$/;"	f	class:CCTransitionRotoZoom	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::onEnter()$/;"	f	class:CCTransitionScene	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionShrinkGrow::onEnter()$/;"	f	class:CCTransitionShrinkGrow	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInL::onEnter()$/;"	f	class:CCTransitionSlideInL	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSplitCols::onEnter()$/;"	f	class:CCTransitionSplitCols	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionTurnOffTiles::onEnter()$/;"	f	class:CCTransitionTurnOffTiles	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionZoomFlipAngular::onEnter()$/;"	f	class:CCTransitionZoomFlipAngular	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionZoomFlipX::onEnter()$/;"	f	class:CCTransitionZoomFlipX	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionZoomFlipY::onEnter()$/;"	f	class:CCTransitionZoomFlipY	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionCrossFade	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionFade	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionFadeTR	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionFlipAngular	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionFlipX	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionFlipY	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionJumpZoom	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionMoveInL	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionRotoZoom	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionScene	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionShrinkGrow	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionSlideInL	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionSplitCols	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionTurnOffTiles	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionZoomFlipAngular	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionZoomFlipX	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionZoomFlipY	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^void CCTransitionPageTurn::onEnter()$/;"	f	class:CCTransitionPageTurn	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionPageTurn	access:public	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgress::onEnter()$/;"	f	class:CCTransitionProgress	signature:()
onEnter	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual void onEnter();$/;"	p	class:CCTransitionProgress	access:public	signature:()
onEnter	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::onEnter()$/;"	f	class:CCClippingNode	signature:()
onEnter	misc_nodes/CCClippingNode.h	/^    virtual void onEnter();$/;"	p	class:CCClippingNode	access:public	signature:()
onEnterTransitionDidFinish	base_nodes/CCNode.cpp	/^void CCNode::onEnterTransitionDidFinish()$/;"	f	class:CCNode	signature:()
onEnterTransitionDidFinish	base_nodes/CCNode.h	/^    virtual void onEnterTransitionDidFinish();$/;"	p	class:CCNode	access:public	signature:()
onEnterTransitionDidFinish	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::onEnterTransitionDidFinish()$/;"	f	class:CCLayer	signature:()
onEnterTransitionDidFinish	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void onEnterTransitionDidFinish();$/;"	p	class:CCLayer	access:public	signature:()
onEnterTransitionDidFinish	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::onEnterTransitionDidFinish()$/;"	f	class:CCClippingNode	signature:()
onEnterTransitionDidFinish	misc_nodes/CCClippingNode.h	/^    virtual void onEnterTransitionDidFinish();$/;"	p	class:CCClippingNode	access:public	signature:()
onExit	base_nodes/CCNode.cpp	/^void CCNode::onExit()$/;"	f	class:CCNode	signature:()
onExit	base_nodes/CCNode.h	/^    virtual void onExit();$/;"	p	class:CCNode	access:public	signature:()
onExit	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::onExit()$/;"	f	class:CCLayer	signature:()
onExit	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void onExit();$/;"	p	class:CCLayer	access:public	signature:()
onExit	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionCrossFade::onExit()$/;"	f	class:CCTransitionCrossFade	signature:()
onExit	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFade::onExit()$/;"	f	class:CCTransitionFade	signature:()
onExit	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::onExit()$/;"	f	class:CCTransitionScene	signature:()
onExit	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onExit();$/;"	p	class:CCTransitionCrossFade	access:public	signature:()
onExit	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onExit();$/;"	p	class:CCTransitionFade	access:public	signature:()
onExit	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void onExit();$/;"	p	class:CCTransitionScene	access:public	signature:()
onExit	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgress::onExit()$/;"	f	class:CCTransitionProgress	signature:()
onExit	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual void onExit();$/;"	p	class:CCTransitionProgress	access:public	signature:()
onExit	menu_nodes/CCMenu.cpp	/^void CCMenu::onExit()$/;"	f	class:CCMenu	signature:()
onExit	menu_nodes/CCMenu.h	/^    virtual void onExit();$/;"	p	class:CCMenu	access:public	signature:()
onExit	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::onExit()$/;"	f	class:CCClippingNode	signature:()
onExit	misc_nodes/CCClippingNode.h	/^    virtual void onExit();$/;"	p	class:CCClippingNode	access:public	signature:()
onExitTransitionDidStart	base_nodes/CCNode.cpp	/^void CCNode::onExitTransitionDidStart()$/;"	f	class:CCNode	signature:()
onExitTransitionDidStart	base_nodes/CCNode.h	/^    virtual void onExitTransitionDidStart();$/;"	p	class:CCNode	access:public	signature:()
onExitTransitionDidStart	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::onExitTransitionDidStart()$/;"	f	class:CCClippingNode	signature:()
onExitTransitionDidStart	misc_nodes/CCClippingNode.h	/^    virtual void onExitTransitionDidStart();$/;"	p	class:CCClippingNode	access:public	signature:()
onTextFieldAttachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool onTextFieldAttachWithIME(CCTextFieldTTF * sender)$/;"	f	class:CCTextFieldDelegate	access:public	signature:(CCTextFieldTTF * sender)
onTextFieldDeleteBackward	text_input_node/CCTextFieldTTF.h	/^    virtual bool onTextFieldDeleteBackward(CCTextFieldTTF * sender, const char * delText, int nLen)$/;"	f	class:CCTextFieldDelegate	access:public	signature:(CCTextFieldTTF * sender, const char * delText, int nLen)
onTextFieldDetachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool onTextFieldDetachWithIME(CCTextFieldTTF * sender)$/;"	f	class:CCTextFieldDelegate	access:public	signature:(CCTextFieldTTF * sender)
onTextFieldInsertText	text_input_node/CCTextFieldTTF.h	/^    virtual bool onTextFieldInsertText(CCTextFieldTTF * sender, const char * text, int nLen)$/;"	f	class:CCTextFieldDelegate	access:public	signature:(CCTextFieldTTF * sender, const char * text, int nLen)
opaque	support/zip_support/ioapi.h	/^    voidpf              opaque;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
opaque	support/zip_support/ioapi.h	/^    voidpf              opaque;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
operator ()	cocoa/CCString.h	/^        bool operator() (CCString * a, CCString * b) const {$/;"	f	struct:CCStringCompare	access:public	signature:(CCString * a, CCString * b) const
operator =	cocoa/CCGeometry.cpp	/^CCPoint& CCPoint::operator= (const CCPoint& other)$/;"	f	class:CCPoint	signature:(const CCPoint& other)
operator =	cocoa/CCGeometry.cpp	/^CCRect& CCRect::operator= (const CCRect& other)$/;"	f	class:CCRect	signature:(const CCRect& other)
operator =	cocoa/CCGeometry.cpp	/^CCSize& CCSize::operator= (const CCSize& other)$/;"	f	class:CCSize	signature:(const CCSize& other)
operator =	cocoa/CCGeometry.h	/^    CCPoint& operator= (const CCPoint& other);$/;"	p	class:CCPoint	access:public	signature:(const CCPoint& other)
operator =	cocoa/CCGeometry.h	/^    CCRect& operator= (const CCRect& other); $/;"	p	class:CCRect	access:public	signature:(const CCRect& other)
operator =	cocoa/CCGeometry.h	/^    CCSize& operator= (const CCSize& other);$/;"	p	class:CCSize	access:public	signature:(const CCSize& other)
operator =	cocoa/CCString.cpp	/^CCString& CCString::operator= (const CCString& other)$/;"	f	class:CCString	signature:(const CCString& other)
operator =	cocoa/CCString.h	/^    CCString& operator= (const CCString& other);$/;"	p	class:CCString	access:public	signature:(const CCString& other)
operator =	platform/CCImage.h	/^    CCImage & operator=(const CCImage&);$/;"	p	class:CCImage	access:private	signature:(const CCImage&)
operator =	support/tinyxml2/tinyxml2.h	/^    XMLComment& operator=( const XMLComment& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( const XMLComment& )
operator =	support/tinyxml2/tinyxml2.h	/^    XMLConstHandle& operator=( const XMLConstHandle& ref )							{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
operator =	support/tinyxml2/tinyxml2.h	/^    XMLDeclaration& operator=( const XMLDeclaration& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( const XMLDeclaration& )
operator =	support/tinyxml2/tinyxml2.h	/^    XMLHandle& operator=( const XMLHandle& ref )							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
operator =	support/tinyxml2/tinyxml2.h	/^    XMLNode& operator=( const XMLNode& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( const XMLNode& )
operator =	support/tinyxml2/tinyxml2.h	/^    XMLText& operator=( const XMLText& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLText	access:protected	signature:( const XMLText& )
operator =	support/tinyxml2/tinyxml2.h	/^    XMLUnknown& operator=( const XMLUnknown& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( const XMLUnknown& )
operator =	support/tinyxml2/tinyxml2.h	/^    void operator=( const XMLAttribute& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
operator =	support/tinyxml2/tinyxml2.h	/^    void operator=( const XMLDocument& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
operator =	support/tinyxml2/tinyxml2.h	/^    void operator=( const XMLElement& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
operator []	support/tinyxml2/tinyxml2.h	/^    T& operator[](int i)				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:(int i)
operator []	support/tinyxml2/tinyxml2.h	/^    const T& operator[](int i) const	{$/;"	f	class:tinyxml2::DynArray	access:public	signature:(int i) const
origin	cocoa/CCGeometry.h	/^    CCPoint origin;$/;"	m	class:CCRect	access:public
originalTile	actions/CCActionGrid.cpp	/^ccQuad3 CCTiledGrid3DAction::originalTile(const CCPoint& pos)$/;"	f	class:CCTiledGrid3DAction	signature:(const CCPoint& pos)
originalTile	actions/CCActionGrid.h	/^    ccQuad3 originalTile(const CCPoint& position);$/;"	p	class:CCTiledGrid3DAction	access:public	signature:(const CCPoint& position)
originalTile	effects/CCGrid.cpp	/^ccQuad3 CCTiledGrid3D::originalTile(const CCPoint& pos)$/;"	f	class:CCTiledGrid3D	signature:(const CCPoint& pos)
originalTile	effects/CCGrid.h	/^    ccQuad3 originalTile(const CCPoint& pos);$/;"	p	class:CCTiledGrid3D	access:public	signature:(const CCPoint& pos)
originalVertex	actions/CCActionGrid.cpp	/^ccVertex3F CCGrid3DAction::originalVertex(const CCPoint& position)$/;"	f	class:CCGrid3DAction	signature:(const CCPoint& position)
originalVertex	actions/CCActionGrid.h	/^    ccVertex3F originalVertex(const CCPoint& position);$/;"	p	class:CCGrid3DAction	access:public	signature:(const CCPoint& position)
originalVertex	effects/CCGrid.cpp	/^ccVertex3F CCGrid3D::originalVertex(const CCPoint& pos)$/;"	f	class:CCGrid3D	signature:(const CCPoint& pos)
originalVertex	effects/CCGrid.h	/^    ccVertex3F originalVertex(const CCPoint& pos);$/;"	p	class:CCGrid3D	access:public	signature:(const CCPoint& pos)
pSharedSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.cpp	/^static CCSpriteFrameCache *pSharedSpriteFrameCache = NULL;$/;"	v	file:
parentToNodeTransform	base_nodes/CCNode.cpp	/^CCAffineTransform CCNode::parentToNodeTransform(void)$/;"	f	class:CCNode	signature:(void)
parentToNodeTransform	base_nodes/CCNode.h	/^    virtual CCAffineTransform parentToNodeTransform(void);$/;"	p	class:CCNode	access:public	signature:(void)
parse	platform/CCSAXParser.cpp	/^bool CCSAXParser::parse(const char *pszFile)$/;"	f	class:CCSAXParser	signature:(const char *pszFile)
parse	platform/CCSAXParser.cpp	/^bool CCSAXParser::parse(const char* pXMLData, unsigned int uDataLength)$/;"	f	class:CCSAXParser	signature:(const char* pXMLData, unsigned int uDataLength)
parse	platform/CCSAXParser.h	/^    bool parse(const char *pszFile);$/;"	p	class:CCSAXParser	access:public	signature:(const char *pszFile)
parse	platform/CCSAXParser.h	/^    bool parse(const char* pXMLData, unsigned int uDataLength);$/;"	p	class:CCSAXParser	access:public	signature:(const char* pXMLData, unsigned int uDataLength)
parseCharacterDefinition	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseCharacterDefinition(std::string line, ccBMFontDef *characterDefinition)$/;"	f	class:CCBMFontConfiguration	signature:(std::string line, ccBMFontDef *characterDefinition)
parseCharacterDefinition	label_nodes/CCLabelBMFont.h	/^    void parseCharacterDefinition(std::string line, ccBMFontDef *characterDefinition);$/;"	p	class:CCBMFontConfiguration	access:private	signature:(std::string line, ccBMFontDef *characterDefinition)
parseCommonArguments	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseCommonArguments(std::string line)$/;"	f	class:CCBMFontConfiguration	signature:(std::string line)
parseCommonArguments	label_nodes/CCLabelBMFont.h	/^    void parseCommonArguments(std::string line);$/;"	p	class:CCBMFontConfiguration	access:private	signature:(std::string line)
parseConfigFile	label_nodes/CCLabelBMFont.cpp	/^std::set<unsigned int>* CCBMFontConfiguration::parseConfigFile(const char *controlFile)$/;"	f	class:CCBMFontConfiguration	signature:(const char *controlFile)
parseConfigFile	label_nodes/CCLabelBMFont.h	/^    std::set<unsigned int>* parseConfigFile(const char *controlFile);$/;"	p	class:CCBMFontConfiguration	access:private	signature:(const char *controlFile)
parseImageFileName	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseImageFileName(std::string line, const char *fntFile)$/;"	f	class:CCBMFontConfiguration	signature:(std::string line, const char *fntFile)
parseImageFileName	label_nodes/CCLabelBMFont.h	/^    void parseImageFileName(std::string line, const char *fntFile);$/;"	p	class:CCBMFontConfiguration	access:private	signature:(std::string line, const char *fntFile)
parseInfoArguments	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseInfoArguments(std::string line)$/;"	f	class:CCBMFontConfiguration	signature:(std::string line)
parseInfoArguments	label_nodes/CCLabelBMFont.h	/^    void parseInfoArguments(std::string line);$/;"	p	class:CCBMFontConfiguration	access:private	signature:(std::string line)
parseInternalProperties	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::parseInternalProperties()$/;"	f	class:CCTMXLayer	signature:()
parseInternalProperties	tilemap_parallax_nodes/CCTMXLayer.h	/^    void parseInternalProperties();$/;"	p	class:CCTMXLayer	access:private	signature:()
parseKerningEntry	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseKerningEntry(std::string line)$/;"	f	class:CCBMFontConfiguration	signature:(std::string line)
parseKerningEntry	label_nodes/CCLabelBMFont.h	/^    void parseKerningEntry(std::string line);$/;"	p	class:CCBMFontConfiguration	access:private	signature:(std::string line)
parseLayer	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXLayer * CCTMXTiledMap::parseLayer(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXTiledMap	signature:(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
parseLayer	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXLayer * parseLayer(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
parseVersion1	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::parseVersion1(CCDictionary* animations)$/;"	f	class:CCAnimationCache	signature:(CCDictionary* animations)
parseVersion1	sprite_nodes/CCAnimationCache.h	/^    void parseVersion1(CCDictionary* animations);$/;"	p	class:CCAnimationCache	access:private	signature:(CCDictionary* animations)
parseVersion2	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::parseVersion2(CCDictionary* animations)$/;"	f	class:CCAnimationCache	signature:(CCDictionary* animations)
parseVersion2	sprite_nodes/CCAnimationCache.h	/^    void parseVersion2(CCDictionary* animations);$/;"	p	class:CCAnimationCache	access:private	signature:(CCDictionary* animations)
parseXMLFile	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^bool CCTMXMapInfo::parseXMLFile(const char *xmlFilename)$/;"	f	class:CCTMXMapInfo	signature:(const char *xmlFilename)
parseXMLFile	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool parseXMLFile(const char *xmlFilename);$/;"	p	class:CCTMXMapInfo	access:public	signature:(const char *xmlFilename)
parseXMLString	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^bool CCTMXMapInfo::parseXMLString(const char *xmlString)$/;"	f	class:CCTMXMapInfo	signature:(const char *xmlString)
parseXMLString	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool parseXMLString(const char *xmlString);$/;"	p	class:CCTMXMapInfo	access:public	signature:(const char *xmlString)
pattern	support/tinyxml2/tinyxml2.cpp	/^    const char* pattern;$/;"	m	struct:tinyxml2::Entity	file:	access:public
pause	CCDirector.cpp	/^void CCDirector::pause(void)$/;"	f	class:CCDirector	signature:(void)
pause	CCDirector.h	/^    void pause(void);$/;"	p	class:CCDirector	access:public	signature:(void)
pauseAllRunningActions	actions/CCActionManager.cpp	/^CCSet* CCActionManager::pauseAllRunningActions()$/;"	f	class:CCActionManager	signature:()
pauseAllRunningActions	actions/CCActionManager.h	/^    CCSet* pauseAllRunningActions();$/;"	p	class:CCActionManager	access:public	signature:()
pauseAllTargets	CCScheduler.cpp	/^CCSet* CCScheduler::pauseAllTargets()$/;"	f	class:CCScheduler	signature:()
pauseAllTargets	CCScheduler.h	/^    CCSet* pauseAllTargets();$/;"	p	class:CCScheduler	access:public	signature:()
pauseAllTargetsWithMinPriority	CCScheduler.cpp	/^CCSet* CCScheduler::pauseAllTargetsWithMinPriority(int nMinPriority)$/;"	f	class:CCScheduler	signature:(int nMinPriority)
pauseAllTargetsWithMinPriority	CCScheduler.h	/^    CCSet* pauseAllTargetsWithMinPriority(int nMinPriority);$/;"	p	class:CCScheduler	access:public	signature:(int nMinPriority)
pauseSchedulerAndActions	base_nodes/CCNode.cpp	/^void CCNode::pauseSchedulerAndActions()$/;"	f	class:CCNode	signature:()
pauseSchedulerAndActions	base_nodes/CCNode.h	/^    void pauseSchedulerAndActions(void);$/;"	p	class:CCNode	access:public	signature:(void)
pauseTarget	CCScheduler.cpp	/^void CCScheduler::pauseTarget(CCObject *pTarget)$/;"	f	class:CCScheduler	signature:(CCObject *pTarget)
pauseTarget	CCScheduler.h	/^    void pauseTarget(CCObject *pTarget);$/;"	p	class:CCScheduler	access:public	signature:(CCObject *pTarget)
pauseTarget	actions/CCActionManager.cpp	/^void CCActionManager::pauseTarget(CCObject *pTarget)$/;"	f	class:CCActionManager	signature:(CCObject *pTarget)
pauseTarget	actions/CCActionManager.h	/^    void pauseTarget(CCObject *pTarget);$/;"	p	class:CCActionManager	access:public	signature:(CCObject *pTarget)
paused	CCScheduler.cpp	/^    bool                paused;$/;"	m	struct:_hashSelectorEntry	file:	access:public
paused	CCScheduler.cpp	/^    bool                paused;$/;"	m	struct:_listEntry	file:	access:public
paused	actions/CCActionManager.cpp	/^    bool                        paused;$/;"	m	struct:_hashElement	file:	access:public
pcrc_32_tab	support/zip_support/unzip.cpp	/^    const unsigned long* pcrc_32_tab;$/;"	m	struct:cocos2d::__anon44	file:	access:public
performSelector	support/CCNotificationCenter.cpp	/^void CCNotificationObserver::performSelector(CCObject *obj)$/;"	f	class:CCNotificationObserver	signature:(CCObject *obj)
performSelector	support/CCNotificationCenter.h	/^    void performSelector(CCObject *obj);$/;"	p	class:CCNotificationObserver	access:public	signature:(CCObject *obj)
pfile_in_zip_read	support/zip_support/unzip.cpp	/^    file_in_zip64_read_info_s* pfile_in_zip_read; \/* structure about the current$/;"	m	struct:cocos2d::__anon44	file:	access:public
pixelDepth	support/image_support/TGAlib.h	/^    unsigned char type, pixelDepth;$/;"	m	struct:cocos2d::sImageTGA	access:public
pixelFormat	textures/CCTexturePVR.cpp	/^	uint64_t pixelFormat;$/;"	m	struct:__anon56	file:	access:public
pixelFormat	textures/CCTexturePVR.cpp	/^	uint64_t pixelFormat;$/;"	m	struct:_pixel_formathash	file:	access:public
pixelFormatInfo	textures/CCTexturePVR.cpp	/^	const ccPVRTexturePixelFormatInfo * pixelFormatInfo;$/;"	m	struct:_pixel_formathash	file:	access:public
placeTile	actions/CCActionTiledGrid.cpp	/^void CCShuffleTiles::placeTile(const CCPoint& pos, Tile *t)$/;"	f	class:CCShuffleTiles	signature:(const CCPoint& pos, Tile *t)
placeTile	actions/CCActionTiledGrid.h	/^    void placeTile(const CCPoint& pos, Tile *t);$/;"	p	class:CCShuffleTiles	access:public	signature:(const CCPoint& pos, Tile *t)
pngReadCallback	platform/CCImageCommon_cpp.h	/^static void pngReadCallback(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f	signature:(png_structp png_ptr, png_bytep data, png_size_t length)
pointWithCCPoint	tilemap_parallax_nodes/CCParallaxNode.cpp	/^    static CCPointObject * pointWithCCPoint(CCPoint ratio, CCPoint offset)$/;"	f	class:CCPointObject	file:	access:private	signature:(CCPoint ratio, CCPoint offset)
pop	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::pop()$/;"	f	class:CCPoolManager	signature:()
pop	cocoa/CCAutoreleasePool.h	/^    void pop();$/;"	p	class:CCPoolManager	access:public	signature:()
popScene	CCDirector.cpp	/^void CCDirector::popScene(void)$/;"	f	class:CCDirector	signature:(void)
popScene	CCDirector.h	/^    void popScene(void);$/;"	p	class:CCDirector	access:public	signature:(void)
popToRootScene	CCDirector.cpp	/^void CCDirector::popToRootScene(void)$/;"	f	class:CCDirector	signature:(void)
popToRootScene	CCDirector.h	/^    void popToRootScene(void);$/;"	p	class:CCDirector	access:public	signature:(void)
pos	include/ccTypes.h	/^    ccVertex2F    pos;        \/\/ 8 bytes$/;"	m	struct:_ccPointSprite	access:public
pos	particle_nodes/CCParticleSystem.h	/^    CCPoint     pos;$/;"	m	struct:sCCParticle	access:public
pos	support/zip_support/ZipUtils.cpp	/^    unz_file_pos pos;$/;"	m	struct:ZipEntryInfo	file:	access:public
pos_in_central_dir	support/zip_support/unzip.cpp	/^    ZPOS64_T pos_in_central_dir;   \/* pos of the current file in the central dir*\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
pos_in_zip_directory	support/zip_support/unzip.h	/^    ZPOS64_T pos_in_zip_directory;   \/* offset in zip file directory *\/$/;"	m	struct:cocos2d::unz64_file_pos_s	access:public
pos_in_zip_directory	support/zip_support/unzip.h	/^    uLong pos_in_zip_directory;   \/* offset in zip file directory *\/$/;"	m	struct:cocos2d::unz_file_pos_s	access:public
pos_in_zipfile	support/zip_support/unzip.cpp	/^    ZPOS64_T pos_in_zipfile;       \/* position in byte on the zipfile, for fseek*\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
pos_local_extrafield	support/zip_support/unzip.cpp	/^    ZPOS64_T pos_local_extrafield;   \/* position in the local extra field in read*\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
position	actions/CCActionTiledGrid.cpp	/^    CCPoint    position;$/;"	m	struct:Tile	file:	access:public
positionAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::positionAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
positionAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCPoint positionAt(const CCPoint& tileCoordinate);$/;"	p	class:CCTMXLayer	access:public	signature:(const CCPoint& tileCoordinate)
positionForHexAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::positionForHexAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
positionForHexAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCPoint positionForHexAt(const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(const CCPoint& pos)
positionForIsoAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::positionForIsoAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
positionForIsoAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCPoint positionForIsoAt(const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(const CCPoint& pos)
positionForOrthoAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::positionForOrthoAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
positionForOrthoAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCPoint positionForOrthoAt(const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(const CCPoint& pos)
postNotification	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::postNotification(const char *name)$/;"	f	class:CCNotificationCenter	signature:(const char *name)
postNotification	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::postNotification(const char *name, CCObject *object)$/;"	f	class:CCNotificationCenter	signature:(const char *name, CCObject *object)
postNotification	support/CCNotificationCenter.h	/^    void postNotification(const char *name);$/;"	p	class:CCNotificationCenter	access:public	signature:(const char *name)
postNotification	support/CCNotificationCenter.h	/^    void postNotification(const char *name, CCObject *object);$/;"	p	class:CCNotificationCenter	access:public	signature:(const char *name, CCObject *object)
postStep	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::postStep()$/;"	f	class:CCParticleSystem	signature:()
postStep	particle_nodes/CCParticleSystem.h	/^    virtual void postStep();$/;"	p	class:CCParticleSystem	access:public	signature:()
postStep	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::postStep()$/;"	f	class:CCParticleSystemQuad	signature:()
postStep	particle_nodes/CCParticleSystemQuad.h	/^    virtual void postStep();$/;"	p	class:CCParticleSystemQuad	access:public	signature:()
prev	CCScheduler.cpp	/^    struct _listEntry   *prev, *next;$/;"	m	struct:_listEntry	typeref:struct:_listEntry::_listEntry	file:	access:public
prev	support/data_support/uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle	access:public
priority	CCScheduler.cpp	/^    int                 priority;$/;"	m	struct:_listEntry	file:	access:public
priorityIn	CCScheduler.cpp	/^void CCScheduler::priorityIn(tListEntry **ppList, CCObject *pTarget, int nPriority, bool bPaused)$/;"	f	class:CCScheduler	signature:(tListEntry **ppList, CCObject *pTarget, int nPriority, bool bPaused)
priorityIn	CCScheduler.h	/^    void priorityIn(struct _listEntry **ppList, CCObject *pTarget, int nPriority, bool bPaused);$/;"	p	class:CCScheduler	access:private	signature:(struct _listEntry **ppList, CCObject *pTarget, int nPriority, bool bPaused)
programForKey	shaders/CCShaderCache.cpp	/^CCGLProgram* CCShaderCache::programForKey(const char* key)$/;"	f	class:CCShaderCache	signature:(const char* key)
programForKey	shaders/CCShaderCache.h	/^    CCGLProgram * programForKey(const char* key);$/;"	p	class:CCShaderCache	access:public	signature:(const char* key)
programLog	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::programLog()$/;"	f	class:CCGLProgram	signature:()
programLog	shaders/CCGLProgram.h	/^    const char* programLog();$/;"	p	class:CCGLProgram	access:public	signature:()
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgress::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgress	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressHorizontal::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressHorizontal	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressInOut::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressInOut	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressOutIn::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressOutIn	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressRadialCCW::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressRadialCCW	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressRadialCW::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressRadialCW	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressVertical::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressVertical	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgress	access:protected	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgressHorizontal	access:protected	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgressInOut	access:protected	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgressOutIn	access:protected	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgressRadialCCW	access:protected	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgressRadialCW	access:protected	signature:(CCRenderTexture* texture)
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual CCProgressTimer* progressTimerNodeWithRenderTexture(CCRenderTexture* texture);$/;"	p	class:CCTransitionProgressVertical	access:protected	signature:(CCRenderTexture* texture)
projection_matrix_stack	kazmath/src/GL/matrix.c	/^km_mat4_stack projection_matrix_stack;$/;"	v
propertiesForGID	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCDictionary* CCTMXTiledMap::propertiesForGID(int GID)$/;"	f	class:CCTMXTiledMap	signature:(int GID)
propertiesForGID	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCDictionary* propertiesForGID(int GID);$/;"	p	class:CCTMXTiledMap	access:public	signature:(int GID)
propertyNamed	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCString* CCTMXLayer::propertyNamed(const char *propertyName)$/;"	f	class:CCTMXLayer	signature:(const char *propertyName)
propertyNamed	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCString *propertyNamed(const char *propertyName);$/;"	p	class:CCTMXLayer	access:public	signature:(const char *propertyName)
propertyNamed	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCString* CCTMXObjectGroup::propertyNamed(const char* propertyName)$/;"	f	class:CCTMXObjectGroup	signature:(const char* propertyName)
propertyNamed	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    CCString *propertyNamed(const char* propertyName);$/;"	p	class:CCTMXObjectGroup	access:public	signature:(const char* propertyName)
propertyNamed	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCString* CCTMXTiledMap::propertyNamed(const char *propertyName)$/;"	f	class:CCTMXTiledMap	signature:(const char *propertyName)
propertyNamed	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCString *propertyNamed(const char *propertyName);$/;"	p	class:CCTMXTiledMap	access:public	signature:(const char *propertyName)
pub	platform/CCImageCommon_cpp.h	/^  struct jpeg_error_mgr pub;	\/* "public" fields *\/$/;"	m	struct:my_error_mgr	typeref:struct:my_error_mgr::jpeg_error_mgr	access:public
purgeCachedData	CCDirector.cpp	/^void CCDirector::purgeCachedData(void)$/;"	f	class:CCDirector	signature:(void)
purgeCachedData	CCDirector.h	/^    void purgeCachedData(void);$/;"	p	class:CCDirector	access:public	signature:(void)
purgeCachedData	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::purgeCachedData()$/;"	f	class:CCLabelBMFont	signature:()
purgeCachedData	label_nodes/CCLabelBMFont.h	/^    static void purgeCachedData();$/;"	p	class:CCLabelBMFont	access:public	signature:()
purgeCachedEntries	platform/CCFileUtils.cpp	/^void CCFileUtils::purgeCachedEntries()$/;"	f	class:CCFileUtils	signature:()
purgeCachedEntries	platform/CCFileUtils.h	/^    virtual void purgeCachedEntries();$/;"	p	class:CCFileUtils	access:public	signature:()
purgeConfiguration	CCConfiguration.cpp	/^void CCConfiguration::purgeConfiguration(void)$/;"	f	class:CCConfiguration	signature:(void)
purgeConfiguration	CCConfiguration.h	/^    static void purgeConfiguration(void);$/;"	p	class:CCConfiguration	access:public	signature:(void)
purgeDirector	CCDirector.cpp	/^void CCDirector::purgeDirector()$/;"	f	class:CCDirector	signature:()
purgeDirector	CCDirector.h	/^    void purgeDirector();$/;"	p	class:CCDirector	access:protected	signature:()
purgeFileUtils	platform/CCFileUtils.cpp	/^void CCFileUtils::purgeFileUtils()$/;"	f	class:CCFileUtils	signature:()
purgeFileUtils	platform/CCFileUtils.h	/^    static void purgeFileUtils();$/;"	p	class:CCFileUtils	access:public	signature:()
purgeFontDefDictionary	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::purgeFontDefDictionary()$/;"	f	class:CCBMFontConfiguration	signature:()
purgeFontDefDictionary	label_nodes/CCLabelBMFont.h	/^    void purgeFontDefDictionary();$/;"	p	class:CCBMFontConfiguration	access:private	signature:()
purgeKerningDictionary	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::purgeKerningDictionary()$/;"	f	class:CCBMFontConfiguration	signature:()
purgeKerningDictionary	label_nodes/CCLabelBMFont.h	/^    void purgeKerningDictionary();$/;"	p	class:CCBMFontConfiguration	access:private	signature:()
purgeNotificationCenter	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::purgeNotificationCenter(void)$/;"	f	class:CCNotificationCenter	signature:(void)
purgeNotificationCenter	support/CCNotificationCenter.h	/^    static void purgeNotificationCenter(void);$/;"	p	class:CCNotificationCenter	access:public	signature:(void)
purgePoolManager	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::purgePoolManager()$/;"	f	class:CCPoolManager	signature:()
purgePoolManager	cocoa/CCAutoreleasePool.h	/^    static void purgePoolManager();$/;"	p	class:CCPoolManager	access:public	signature:()
purgeSharedAnimationCache	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::purgeSharedAnimationCache(void)$/;"	f	class:CCAnimationCache	signature:(void)
purgeSharedAnimationCache	sprite_nodes/CCAnimationCache.h	/^    static void purgeSharedAnimationCache(void);$/;"	p	class:CCAnimationCache	access:public	signature:(void)
purgeSharedManager	script_support/CCScriptSupport.cpp	/^void CCScriptEngineManager::purgeSharedManager(void)$/;"	f	class:CCScriptEngineManager	signature:(void)
purgeSharedManager	script_support/CCScriptSupport.h	/^    static void purgeSharedManager(void);$/;"	p	class:CCScriptEngineManager	access:public	signature:(void)
purgeSharedShaderCache	shaders/CCShaderCache.cpp	/^void CCShaderCache::purgeSharedShaderCache()$/;"	f	class:CCShaderCache	signature:()
purgeSharedShaderCache	shaders/CCShaderCache.h	/^    static void purgeSharedShaderCache();$/;"	p	class:CCShaderCache	access:public	signature:()
purgeSharedSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::purgeSharedSpriteFrameCache(void)$/;"	f	class:CCSpriteFrameCache	signature:(void)
purgeSharedSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.h	/^    static void purgeSharedSpriteFrameCache(void);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(void)
purgeSharedTextureCache	textures/CCTextureCache.cpp	/^void CCTextureCache::purgeSharedTextureCache()$/;"	f	class:CCTextureCache	signature:()
purgeSharedTextureCache	textures/CCTextureCache.h	/^    static void purgeSharedTextureCache();$/;"	p	class:CCTextureCache	access:public	signature:()
purgeSharedUserDefault	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::purgeSharedUserDefault()$/;"	f	class:CCUserDefault	signature:()
purgeSharedUserDefault	support/user_default/CCUserDefault.h	/^    static void purgeSharedUserDefault();$/;"	p	class:CCUserDefault	access:public	signature:()
purgeSharedUserDefault	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::purgeSharedUserDefault()$/;"	f	class:CCUserDefault	signature:()
push	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::push()$/;"	f	class:CCPoolManager	signature:()
push	cocoa/CCAutoreleasePool.h	/^    void push();$/;"	p	class:CCPoolManager	access:public	signature:()
pushScene	CCDirector.cpp	/^void CCDirector::pushScene(CCScene *pScene)$/;"	f	class:CCDirector	signature:(CCScene *pScene)
pushScene	CCDirector.h	/^    void pushScene(CCScene *pScene);$/;"	p	class:CCDirector	access:public	signature:(CCScene *pScene)
pvrTag	textures/CCTexturePVR.cpp	/^    unsigned int pvrTag;$/;"	m	struct:_PVRTexHeader	file:	access:public
r	include/ccTypes.h	/^    GLfloat r;$/;"	m	struct:_ccColor4F	access:public
r	include/ccTypes.h	/^    GLubyte r;$/;"	m	struct:_ccColor3B	access:public
r	include/ccTypes.h	/^    GLubyte r;$/;"	m	struct:_ccColor4B	access:public
radialAccel	particle_nodes/CCParticleSystem.h	/^        float        radialAccel;$/;"	m	struct:sCCParticle::__anon22	access:public
radialAccel	particle_nodes/CCParticleSystem.h	/^        float radialAccel;$/;"	m	struct:CCParticleSystem::__anon24	access:public
radialAccelVar	particle_nodes/CCParticleSystem.h	/^        float radialAccelVar;$/;"	m	struct:CCParticleSystem::__anon24	access:public
radius	particle_nodes/CCParticleSystem.h	/^        float        radius;$/;"	m	struct:sCCParticle::__anon23	access:public
randomObject	cocoa/CCArray.cpp	/^CCObject* CCArray::randomObject()$/;"	f	class:CCArray	signature:()
randomObject	cocoa/CCArray.h	/^    CCObject* randomObject();$/;"	p	class:CCArray	access:public	signature:()
randomObject	cocoa/CCDictionary.cpp	/^CCObject* CCDictionary::randomObject()$/;"	f	class:CCDictionary	signature:()
randomObject	cocoa/CCDictionary.h	/^    CCObject* randomObject();$/;"	p	class:CCDictionary	access:public	signature:()
raw	support/zip_support/unzip.cpp	/^    int   raw;$/;"	m	struct:cocos2d::__anon43	file:	access:public
read_buffer	support/zip_support/unzip.cpp	/^    char  *read_buffer;         \/* internal buffer for compressed data *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
rearrangeHandlers	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::rearrangeHandlers(CCArray *pArray)$/;"	f	class:CCTouchDispatcher	signature:(CCArray *pArray)
rearrangeHandlers	touch_dispatcher/CCTouchDispatcher.h	/^    void rearrangeHandlers(CCArray* pArray);$/;"	p	class:CCTouchDispatcher	access:protected	signature:(CCArray* pArray)
rebuildIndexInOrder	sprite_nodes/CCSpriteBatchNode.cpp	/^unsigned int CCSpriteBatchNode::rebuildIndexInOrder(CCSprite *pobParent, unsigned int uIndex)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *pobParent, unsigned int uIndex)
rebuildIndexInOrder	sprite_nodes/CCSpriteBatchNode.h	/^    unsigned int rebuildIndexInOrder(CCSprite *parent, unsigned int index);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite *parent, unsigned int index)
recreateLabel	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::recreateLabel()$/;"	f	class:CCMenuItemFont	signature:()
recreateLabel	menu_nodes/CCMenuItem.h	/^    void recreateLabel();$/;"	p	class:CCMenuItemFont	access:protected	signature:()
rect	label_nodes/CCLabelBMFont.h	/^    CCRect rect;$/;"	m	struct:_BMFontDef	access:public
rect	menu_nodes/CCMenuItem.cpp	/^CCRect CCMenuItem::rect()$/;"	f	class:CCMenuItem	signature:()
rect	menu_nodes/CCMenuItem.h	/^    CCRect rect();$/;"	p	class:CCMenuItem	access:public	signature:()
rectForGID	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCRect CCTMXTilesetInfo::rectForGID(unsigned int gid)$/;"	f	class:CCTMXTilesetInfo	signature:(unsigned int gid)
rectForGID	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCRect rectForGID(unsigned int gid);$/;"	p	class:CCTMXTilesetInfo	access:public	signature:(unsigned int gid)
reduceMemoryFootprint	cocoa/CCArray.cpp	/^void CCArray::reduceMemoryFootprint()$/;"	f	class:CCArray	signature:()
reduceMemoryFootprint	cocoa/CCArray.h	/^    void reduceMemoryFootprint();$/;"	p	class:CCArray	access:public	signature:()
registerScriptAccelerateHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::registerScriptAccelerateHandler(int nHandler)$/;"	f	class:CCLayer	signature:(int nHandler)
registerScriptAccelerateHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    void registerScriptAccelerateHandler(int nHandler);$/;"	p	class:CCLayer	access:public	signature:(int nHandler)
registerScriptHandler	base_nodes/CCNode.cpp	/^void CCNode::registerScriptHandler(int nHandler)$/;"	f	class:CCNode	signature:(int nHandler)
registerScriptHandler	base_nodes/CCNode.h	/^    virtual void registerScriptHandler(int handler);$/;"	p	class:CCNode	access:public	signature:(int handler)
registerScriptKeypadHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::registerScriptKeypadHandler(int nHandler)$/;"	f	class:CCLayer	signature:(int nHandler)
registerScriptKeypadHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    void registerScriptKeypadHandler(int nHandler);$/;"	p	class:CCLayer	access:public	signature:(int nHandler)
registerScriptObserver	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::registerScriptObserver(int handler)$/;"	f	class:CCNotificationCenter	signature:(int handler)
registerScriptObserver	support/CCNotificationCenter.h	/^    void registerScriptObserver(int handler);$/;"	p	class:CCNotificationCenter	access:public	signature:(int handler)
registerScriptTapHandler	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::registerScriptTapHandler(int nHandler)$/;"	f	class:CCMenuItem	signature:(int nHandler)
registerScriptTapHandler	menu_nodes/CCMenuItem.h	/^    virtual void registerScriptTapHandler(int nHandler);$/;"	p	class:CCMenuItem	access:public	signature:(int nHandler)
registerScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::registerScriptTouchHandler(int nHandler, bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)$/;"	f	class:CCLayer	signature:(int nHandler, bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)
registerScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void registerScriptTouchHandler(int nHandler, bool bIsMultiTouches = false, int nPriority = INT_MIN, bool bSwallowsTouches = false);$/;"	p	class:CCLayer	access:public	signature:(int nHandler, bool bIsMultiTouches = false, int nPriority = INT_MIN, bool bSwallowsTouches = false)
registerWithTouchDispatcher	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::registerWithTouchDispatcher()$/;"	f	class:CCLayer	signature:()
registerWithTouchDispatcher	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void registerWithTouchDispatcher(void);$/;"	p	class:CCLayer	access:public	signature:(void)
registerWithTouchDispatcher	menu_nodes/CCMenu.cpp	/^void CCMenu::registerWithTouchDispatcher()$/;"	f	class:CCMenu	signature:()
registerWithTouchDispatcher	menu_nodes/CCMenu.h	/^    virtual void registerWithTouchDispatcher();$/;"	p	class:CCMenu	access:public	signature:()
release	cocoa/CCObject.cpp	/^void CCObject::release(void)$/;"	f	class:CCObject	signature:(void)
release	cocoa/CCObject.h	/^    void release(void);$/;"	p	class:CCObject	access:public	signature:(void)
releaseAllTimers	support/CCProfiling.cpp	/^void CCProfiler::releaseAllTimers()$/;"	f	class:CCProfiler	signature:()
releaseAllTimers	support/CCProfiling.h	/^    void releaseAllTimers();$/;"	p	class:CCProfiler	access:public	signature:()
releaseData	textures/CCTexture2D.cpp	/^void CCTexture2D::releaseData(void *data)$/;"	f	class:CCTexture2D	signature:(void *data)
releaseData	textures/CCTexture2D.h	/^    void releaseData(void *data);$/;"	p	class:CCTexture2D	access:public	signature:(void *data)
releaseMap	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::releaseMap()$/;"	f	class:CCTMXLayer	signature:()
releaseMap	tilemap_parallax_nodes/CCTMXLayer.h	/^    void releaseMap();$/;"	p	class:CCTMXLayer	access:public	signature:()
releaseMap	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::releaseMap()$/;"	f	class:CCTileMapAtlas	signature:()
releaseMap	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    void releaseMap();$/;"	p	class:CCTileMapAtlas	access:public	signature:()
releaseTimer	support/CCProfiling.cpp	/^void CCProfiler::releaseTimer(const char* timerName)$/;"	f	class:CCProfiler	signature:(const char* timerName)
releaseTimer	support/CCProfiling.h	/^    void releaseTimer(const char* timerName);$/;"	p	class:CCProfiler	access:public	signature:(const char* timerName)
reloadAllTextures	textures/CCTextureCache.cpp	/^void CCTextureCache::reloadAllTextures()$/;"	f	class:CCTextureCache	signature:()
reloadAllTextures	textures/CCTextureCache.cpp	/^void VolatileTexture::reloadAllTextures()$/;"	f	class:VolatileTexture	signature:()
reloadAllTextures	textures/CCTextureCache.h	/^    static void reloadAllTextures();$/;"	p	class:CCTextureCache	access:public	signature:()
reloadAllTextures	textures/CCTextureCache.h	/^    static void reloadAllTextures();$/;"	p	class:VolatileTexture	access:public	signature:()
reloadDefaultShaders	shaders/CCShaderCache.cpp	/^void CCShaderCache::reloadDefaultShaders()$/;"	f	class:CCShaderCache	signature:()
reloadDefaultShaders	shaders/CCShaderCache.h	/^    void reloadDefaultShaders();$/;"	p	class:CCShaderCache	access:public	signature:()
removeAction	actions/CCActionManager.cpp	/^void CCActionManager::removeAction(CCAction *pAction)$/;"	f	class:CCActionManager	signature:(CCAction *pAction)
removeAction	actions/CCActionManager.h	/^    void removeAction(CCAction *pAction);$/;"	p	class:CCActionManager	access:public	signature:(CCAction *pAction)
removeActionAtIndex	actions/CCActionManager.cpp	/^void CCActionManager::removeActionAtIndex(unsigned int uIndex, tHashElement *pElement)$/;"	f	class:CCActionManager	signature:(unsigned int uIndex, tHashElement *pElement)
removeActionAtIndex	actions/CCActionManager.h	/^    void removeActionAtIndex(unsigned int uIndex, struct _hashElement *pElement);$/;"	p	class:CCActionManager	access:protected	signature:(unsigned int uIndex, struct _hashElement *pElement)
removeActionByTag	actions/CCActionManager.cpp	/^void CCActionManager::removeActionByTag(unsigned int tag, CCObject *pTarget)$/;"	f	class:CCActionManager	signature:(unsigned int tag, CCObject *pTarget)
removeActionByTag	actions/CCActionManager.h	/^    void removeActionByTag(unsigned int tag, CCObject *pTarget);$/;"	p	class:CCActionManager	access:public	signature:(unsigned int tag, CCObject *pTarget)
removeAllActions	actions/CCActionManager.cpp	/^void CCActionManager::removeAllActions(void)$/;"	f	class:CCActionManager	signature:(void)
removeAllActions	actions/CCActionManager.h	/^    void removeAllActions(void);$/;"	p	class:CCActionManager	access:public	signature:(void)
removeAllActionsFromTarget	actions/CCActionManager.cpp	/^void CCActionManager::removeAllActionsFromTarget(CCObject *pTarget)$/;"	f	class:CCActionManager	signature:(CCObject *pTarget)
removeAllActionsFromTarget	actions/CCActionManager.h	/^    void removeAllActionsFromTarget(CCObject *pTarget);$/;"	p	class:CCActionManager	access:public	signature:(CCObject *pTarget)
removeAllChildren	base_nodes/CCNode.cpp	/^void CCNode::removeAllChildren()$/;"	f	class:CCNode	signature:()
removeAllChildren	base_nodes/CCNode.h	/^    virtual void removeAllChildren();$/;"	p	class:CCNode	access:public	signature:()
removeAllChildrenWithCleanup	base_nodes/CCNode.cpp	/^void CCNode::removeAllChildrenWithCleanup(bool cleanup)$/;"	f	class:CCNode	signature:(bool cleanup)
removeAllChildrenWithCleanup	base_nodes/CCNode.h	/^    virtual void removeAllChildrenWithCleanup(bool cleanup);$/;"	p	class:CCNode	access:public	signature:(bool cleanup)
removeAllChildrenWithCleanup	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::removeAllChildrenWithCleanup(bool doCleanup)$/;"	f	class:CCParticleBatchNode	signature:(bool doCleanup)
removeAllChildrenWithCleanup	particle_nodes/CCParticleBatchNode.h	/^    void removeAllChildrenWithCleanup(bool doCleanup);$/;"	p	class:CCParticleBatchNode	access:public	signature:(bool doCleanup)
removeAllChildrenWithCleanup	sprite_nodes/CCSprite.cpp	/^void CCSprite::removeAllChildrenWithCleanup(bool bCleanup)$/;"	f	class:CCSprite	signature:(bool bCleanup)
removeAllChildrenWithCleanup	sprite_nodes/CCSprite.h	/^    virtual void removeAllChildrenWithCleanup(bool bCleanup);$/;"	p	class:CCSprite	access:public	signature:(bool bCleanup)
removeAllChildrenWithCleanup	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::removeAllChildrenWithCleanup(bool bCleanup)$/;"	f	class:CCSpriteBatchNode	signature:(bool bCleanup)
removeAllChildrenWithCleanup	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void removeAllChildrenWithCleanup(bool cleanup);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(bool cleanup)
removeAllChildrenWithCleanup	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::removeAllChildrenWithCleanup(bool cleanup)$/;"	f	class:CCParallaxNode	signature:(bool cleanup)
removeAllChildrenWithCleanup	tilemap_parallax_nodes/CCParallaxNode.h	/^    virtual void removeAllChildrenWithCleanup(bool cleanup);$/;"	p	class:CCParallaxNode	access:public	signature:(bool cleanup)
removeAllDelegates	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::removeAllDelegates(void)$/;"	f	class:CCTouchDispatcher	signature:(void)
removeAllDelegates	touch_dispatcher/CCTouchDispatcher.h	/^    void removeAllDelegates(void);$/;"	p	class:CCTouchDispatcher	access:public	signature:(void)
removeAllObjects	cocoa/CCArray.cpp	/^void CCArray::removeAllObjects()$/;"	f	class:CCArray	signature:()
removeAllObjects	cocoa/CCArray.h	/^    void removeAllObjects();$/;"	p	class:CCArray	access:public	signature:()
removeAllObjects	cocoa/CCDictionary.cpp	/^void CCDictionary::removeAllObjects()$/;"	f	class:CCDictionary	signature:()
removeAllObjects	cocoa/CCDictionary.h	/^    void removeAllObjects();$/;"	p	class:CCDictionary	access:public	signature:()
removeAllObjects	cocoa/CCSet.cpp	/^void CCSet::removeAllObjects()$/;"	f	class:CCSet	signature:()
removeAllObjects	cocoa/CCSet.h	/^    void removeAllObjects();$/;"	p	class:CCSet	access:public	signature:()
removeAllObservers	support/CCNotificationCenter.cpp	/^int CCNotificationCenter::removeAllObservers(CCObject *target)$/;"	f	class:CCNotificationCenter	signature:(CCObject *target)
removeAllObservers	support/CCNotificationCenter.h	/^    int removeAllObservers(CCObject *target);$/;"	p	class:CCNotificationCenter	access:public	signature:(CCObject *target)
removeAllQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::removeAllQuads()$/;"	f	class:CCTextureAtlas	signature:()
removeAllQuads	textures/CCTextureAtlas.h	/^    void removeAllQuads();$/;"	p	class:CCTextureAtlas	access:public	signature:()
removeAllTextures	textures/CCTextureCache.cpp	/^void CCTextureCache::removeAllTextures()$/;"	f	class:CCTextureCache	signature:()
removeAllTextures	textures/CCTextureCache.h	/^    void removeAllTextures();$/;"	p	class:CCTextureCache	access:public	signature:()
removeAnimationByName	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::removeAnimationByName(const char* name)$/;"	f	class:CCAnimationCache	signature:(const char* name)
removeAnimationByName	sprite_nodes/CCAnimationCache.h	/^    void removeAnimationByName(const char* name);$/;"	p	class:CCAnimationCache	access:public	signature:(const char* name)
removeChild	base_nodes/CCNode.cpp	/^void CCNode::removeChild(CCNode* child)$/;"	f	class:CCNode	signature:(CCNode* child)
removeChild	base_nodes/CCNode.cpp	/^void CCNode::removeChild(CCNode* child, bool cleanup)$/;"	f	class:CCNode	signature:(CCNode* child, bool cleanup)
removeChild	base_nodes/CCNode.h	/^    virtual void removeChild(CCNode* child);$/;"	p	class:CCNode	access:public	signature:(CCNode* child)
removeChild	base_nodes/CCNode.h	/^    virtual void removeChild(CCNode* child, bool cleanup);$/;"	p	class:CCNode	access:public	signature:(CCNode* child, bool cleanup)
removeChild	menu_nodes/CCMenu.cpp	/^void CCMenu::removeChild(CCNode* child, bool cleanup)$/;"	f	class:CCMenu	signature:(CCNode* child, bool cleanup)
removeChild	menu_nodes/CCMenu.h	/^    virtual void removeChild(CCNode* child, bool cleanup);$/;"	p	class:CCMenu	access:public	signature:(CCNode* child, bool cleanup)
removeChild	particle_nodes/CCParticleBatchNode.cpp	/^void  CCParticleBatchNode::removeChild(CCNode* child, bool cleanup)$/;"	f	class:CCParticleBatchNode	signature:(CCNode* child, bool cleanup)
removeChild	particle_nodes/CCParticleBatchNode.h	/^    virtual void removeChild(CCNode* child, bool cleanup);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCNode* child, bool cleanup)
removeChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::removeChild(CCNode *pChild, bool bCleanup)$/;"	f	class:CCSprite	signature:(CCNode *pChild, bool bCleanup)
removeChild	sprite_nodes/CCSprite.h	/^    virtual void removeChild(CCNode* pChild, bool bCleanup);$/;"	p	class:CCSprite	access:public	signature:(CCNode* pChild, bool bCleanup)
removeChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::removeChild(CCNode *child, bool cleanup)$/;"	f	class:CCSpriteBatchNode	signature:(CCNode *child, bool cleanup)
removeChild	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void removeChild(CCNode* child, bool cleanup);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCNode* child, bool cleanup)
removeChild	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::removeChild(CCNode* child, bool cleanup)$/;"	f	class:CCParallaxNode	signature:(CCNode* child, bool cleanup)
removeChild	tilemap_parallax_nodes/CCParallaxNode.h	/^    virtual void removeChild(CCNode* child, bool cleanup);$/;"	p	class:CCParallaxNode	access:public	signature:(CCNode* child, bool cleanup)
removeChild	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::removeChild(CCNode* node, bool cleanup)$/;"	f	class:CCTMXLayer	signature:(CCNode* node, bool cleanup)
removeChild	tilemap_parallax_nodes/CCTMXLayer.h	/^    void removeChild(CCNode* child, bool cleanup);$/;"	p	class:CCTMXLayer	access:public	signature:(CCNode* child, bool cleanup)
removeChildAtIndex	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::removeChildAtIndex(unsigned int index, bool doCleanup)$/;"	f	class:CCParticleBatchNode	signature:(unsigned int index, bool doCleanup)
removeChildAtIndex	particle_nodes/CCParticleBatchNode.h	/^    void removeChildAtIndex(unsigned int index, bool doCleanup);$/;"	p	class:CCParticleBatchNode	access:public	signature:(unsigned int index, bool doCleanup)
removeChildAtIndex	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::removeChildAtIndex(unsigned int uIndex, bool bDoCleanup)$/;"	f	class:CCSpriteBatchNode	signature:(unsigned int uIndex, bool bDoCleanup)
removeChildAtIndex	sprite_nodes/CCSpriteBatchNode.h	/^    void removeChildAtIndex(unsigned int index, bool doCleanup);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(unsigned int index, bool doCleanup)
removeChildByTag	base_nodes/CCNode.cpp	/^void CCNode::removeChildByTag(int tag)$/;"	f	class:CCNode	signature:(int tag)
removeChildByTag	base_nodes/CCNode.cpp	/^void CCNode::removeChildByTag(int tag, bool cleanup)$/;"	f	class:CCNode	signature:(int tag, bool cleanup)
removeChildByTag	base_nodes/CCNode.h	/^    virtual void removeChildByTag(int tag);$/;"	p	class:CCNode	access:public	signature:(int tag)
removeChildByTag	base_nodes/CCNode.h	/^    virtual void removeChildByTag(int tag, bool cleanup);$/;"	p	class:CCNode	access:public	signature:(int tag, bool cleanup)
removeControlPointAtIndex	actions/CCActionCatmullRom.cpp	/^void CCPointArray::removeControlPointAtIndex(unsigned int index)$/;"	f	class:CCPointArray	signature:(unsigned int index)
removeControlPointAtIndex	actions/CCActionCatmullRom.h	/^    void removeControlPointAtIndex(unsigned int index);$/;"	p	class:CCPointArray	access:public	signature:(unsigned int index)
removeDelegate	keypad_dispatcher/CCKeypadDispatcher.cpp	/^void CCKeypadDispatcher::removeDelegate(CCKeypadDelegate* pDelegate)$/;"	f	class:CCKeypadDispatcher	signature:(CCKeypadDelegate* pDelegate)
removeDelegate	keypad_dispatcher/CCKeypadDispatcher.h	/^    void removeDelegate(CCKeypadDelegate* pDelegate);$/;"	p	class:CCKeypadDispatcher	access:public	signature:(CCKeypadDelegate* pDelegate)
removeDelegate	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::removeDelegate(CCIMEDelegate* pDelegate)$/;"	f	class:CCIMEDispatcher	signature:(CCIMEDelegate* pDelegate)
removeDelegate	text_input_node/CCIMEDispatcher.h	/^    void removeDelegate(CCIMEDelegate * pDelegate);$/;"	p	class:CCIMEDispatcher	access:protected	signature:(CCIMEDelegate * pDelegate)
removeDelegate	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::removeDelegate(CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher	signature:(CCTouchDelegate *pDelegate)
removeDelegate	touch_dispatcher/CCTouchDispatcher.h	/^    void removeDelegate(CCTouchDelegate *pDelegate);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCTouchDelegate *pDelegate)
removeFromParent	base_nodes/CCNode.cpp	/^void CCNode::removeFromParent()$/;"	f	class:CCNode	signature:()
removeFromParent	base_nodes/CCNode.h	/^    virtual void removeFromParent();$/;"	p	class:CCNode	access:public	signature:()
removeFromParentAndCleanup	base_nodes/CCNode.cpp	/^void CCNode::removeFromParentAndCleanup(bool cleanup)$/;"	f	class:CCNode	signature:(bool cleanup)
removeFromParentAndCleanup	base_nodes/CCNode.h	/^    virtual void removeFromParentAndCleanup(bool cleanup);$/;"	p	class:CCNode	access:public	signature:(bool cleanup)
removeHashElement	CCScheduler.cpp	/^void CCScheduler::removeHashElement(_hashSelectorEntry *pElement)$/;"	f	class:CCScheduler	signature:(_hashSelectorEntry *pElement)
removeHashElement	CCScheduler.h	/^    void removeHashElement(struct _hashSelectorEntry *pElement);$/;"	p	class:CCScheduler	access:private	signature:(struct _hashSelectorEntry *pElement)
removeLastObject	cocoa/CCArray.cpp	/^void CCArray::removeLastObject(bool bReleaseObj)$/;"	f	class:CCArray	signature:(bool bReleaseObj)
removeLastObject	cocoa/CCArray.h	/^    void removeLastObject(bool bReleaseObj = true);$/;"	p	class:CCArray	access:public	signature:(bool bReleaseObj = true)
removeObject	cocoa/CCArray.cpp	/^void CCArray::removeObject(CCObject* object, bool bReleaseObj\/* = true*\/)$/;"	f	class:CCArray	signature:(CCObject* object, bool bReleaseObj )
removeObject	cocoa/CCArray.h	/^    void removeObject(CCObject* object, bool bReleaseObj = true);$/;"	p	class:CCArray	access:public	signature:(CCObject* object, bool bReleaseObj = true)
removeObject	cocoa/CCAutoreleasePool.cpp	/^void CCAutoreleasePool::removeObject(CCObject* pObject)$/;"	f	class:CCAutoreleasePool	signature:(CCObject* pObject)
removeObject	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::removeObject(CCObject* pObject)$/;"	f	class:CCPoolManager	signature:(CCObject* pObject)
removeObject	cocoa/CCAutoreleasePool.h	/^    void removeObject(CCObject *pObject);$/;"	p	class:CCAutoreleasePool	access:public	signature:(CCObject *pObject)
removeObject	cocoa/CCAutoreleasePool.h	/^    void removeObject(CCObject* pObject);$/;"	p	class:CCPoolManager	access:public	signature:(CCObject* pObject)
removeObject	cocoa/CCSet.cpp	/^void CCSet::removeObject(CCObject *pObject)$/;"	f	class:CCSet	signature:(CCObject *pObject)
removeObject	cocoa/CCSet.h	/^    void removeObject(CCObject *pObject);$/;"	p	class:CCSet	access:public	signature:(CCObject *pObject)
removeObjectAtIndex	cocoa/CCArray.cpp	/^void CCArray::removeObjectAtIndex(unsigned int index, bool bReleaseObj)$/;"	f	class:CCArray	signature:(unsigned int index, bool bReleaseObj)
removeObjectAtIndex	cocoa/CCArray.h	/^    void removeObjectAtIndex(unsigned int index, bool bReleaseObj = true);$/;"	p	class:CCArray	access:public	signature:(unsigned int index, bool bReleaseObj = true)
removeObjectForElememt	cocoa/CCDictionary.cpp	/^void CCDictionary::removeObjectForElememt(CCDictElement* pElement)$/;"	f	class:CCDictionary	signature:(CCDictElement* pElement)
removeObjectForElememt	cocoa/CCDictionary.h	/^    void removeObjectForElememt(CCDictElement* pElement);$/;"	p	class:CCDictionary	access:public	signature:(CCDictElement* pElement)
removeObjectForKey	cocoa/CCDictionary.cpp	/^void CCDictionary::removeObjectForKey(const std::string& key)$/;"	f	class:CCDictionary	signature:(const std::string& key)
removeObjectForKey	cocoa/CCDictionary.cpp	/^void CCDictionary::removeObjectForKey(int key)$/;"	f	class:CCDictionary	signature:(int key)
removeObjectForKey	cocoa/CCDictionary.h	/^    void removeObjectForKey(const std::string& key);$/;"	p	class:CCDictionary	access:public	signature:(const std::string& key)
removeObjectForKey	cocoa/CCDictionary.h	/^    void removeObjectForKey(int key);$/;"	p	class:CCDictionary	access:public	signature:(int key)
removeObjectsForKeys	cocoa/CCDictionary.cpp	/^void CCDictionary::removeObjectsForKeys(CCArray* pKeyArray)$/;"	f	class:CCDictionary	signature:(CCArray* pKeyArray)
removeObjectsForKeys	cocoa/CCDictionary.h	/^    void removeObjectsForKeys(CCArray* pKeyArray);$/;"	p	class:CCDictionary	access:public	signature:(CCArray* pKeyArray)
removeObjectsInArray	cocoa/CCArray.cpp	/^void CCArray::removeObjectsInArray(CCArray* otherArray)$/;"	f	class:CCArray	signature:(CCArray* otherArray)
removeObjectsInArray	cocoa/CCArray.h	/^    void removeObjectsInArray(CCArray* otherArray);$/;"	p	class:CCArray	access:public	signature:(CCArray* otherArray)
removeObserver	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::removeObserver(CCObject *target,const char *name)$/;"	f	class:CCNotificationCenter	signature:(CCObject *target,const char *name)
removeObserver	support/CCNotificationCenter.h	/^    void removeObserver(CCObject *target,const char *name);$/;"	p	class:CCNotificationCenter	access:public	signature:(CCObject *target,const char *name)
removeQuadAtIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::removeQuadAtIndex(unsigned int index)$/;"	f	class:CCTextureAtlas	signature:(unsigned int index)
removeQuadAtIndex	textures/CCTextureAtlas.h	/^    void removeQuadAtIndex(unsigned int index);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int index)
removeQuadsAtIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::removeQuadsAtIndex(unsigned int index, unsigned int amount)$/;"	f	class:CCTextureAtlas	signature:(unsigned int index, unsigned int amount)
removeQuadsAtIndex	textures/CCTextureAtlas.h	/^    void removeQuadsAtIndex(unsigned int index, unsigned int amount);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int index, unsigned int amount)
removeScriptEngine	script_support/CCScriptSupport.cpp	/^void CCScriptEngineManager::removeScriptEngine(void)$/;"	f	class:CCScriptEngineManager	signature:(void)
removeScriptEngine	script_support/CCScriptSupport.h	/^    void removeScriptEngine(void);$/;"	p	class:CCScriptEngineManager	access:public	signature:(void)
removeScriptHandler	script_support/CCScriptSupport.h	/^    virtual void removeScriptHandler(int nHandler) {};$/;"	f	class:CCScriptEngineProtocol	access:public	signature:(int nHandler)
removeScriptObjectByCCObject	script_support/CCScriptSupport.h	/^    virtual void removeScriptObjectByCCObject(CCObject* pObj) = 0;$/;"	p	class:CCScriptEngineProtocol	access:public	signature:(CCObject* pObj)
removeSpriteFrameByName	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFrameByName(const char *pszName)$/;"	f	class:CCSpriteFrameCache	signature:(const char *pszName)
removeSpriteFrameByName	sprite_nodes/CCSpriteFrameCache.h	/^    void removeSpriteFrameByName(const char *pszName);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(const char *pszName)
removeSpriteFrames	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFrames(void)$/;"	f	class:CCSpriteFrameCache	signature:(void)
removeSpriteFrames	sprite_nodes/CCSpriteFrameCache.h	/^    void removeSpriteFrames(void);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(void)
removeSpriteFramesFromDictionary	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFramesFromDictionary(CCDictionary* dictionary)$/;"	f	class:CCSpriteFrameCache	signature:(CCDictionary* dictionary)
removeSpriteFramesFromDictionary	sprite_nodes/CCSpriteFrameCache.h	/^    void removeSpriteFramesFromDictionary(CCDictionary* dictionary);$/;"	p	class:CCSpriteFrameCache	access:private	signature:(CCDictionary* dictionary)
removeSpriteFramesFromFile	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFramesFromFile(const char* plist)$/;"	f	class:CCSpriteFrameCache	signature:(const char* plist)
removeSpriteFramesFromFile	sprite_nodes/CCSpriteFrameCache.h	/^    void removeSpriteFramesFromFile(const char* plist);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(const char* plist)
removeSpriteFramesFromTexture	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFramesFromTexture(CCTexture2D* texture)$/;"	f	class:CCSpriteFrameCache	signature:(CCTexture2D* texture)
removeSpriteFramesFromTexture	sprite_nodes/CCSpriteFrameCache.h	/^    void removeSpriteFramesFromTexture(CCTexture2D* texture);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(CCTexture2D* texture)
removeSpriteFromAtlas	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::removeSpriteFromAtlas(CCSprite *pobSprite)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *pobSprite)
removeSpriteFromAtlas	sprite_nodes/CCSpriteBatchNode.h	/^    void removeSpriteFromAtlas(CCSprite *sprite);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCSprite *sprite)
removeTexture	textures/CCTextureCache.cpp	/^void CCTextureCache::removeTexture(CCTexture2D* texture)$/;"	f	class:CCTextureCache	signature:(CCTexture2D* texture)
removeTexture	textures/CCTextureCache.cpp	/^void VolatileTexture::removeTexture(CCTexture2D *t) $/;"	f	class:VolatileTexture	signature:(CCTexture2D *t)
removeTexture	textures/CCTextureCache.h	/^    static void removeTexture(CCTexture2D *t);$/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *t)
removeTexture	textures/CCTextureCache.h	/^    void removeTexture(CCTexture2D* texture);$/;"	p	class:CCTextureCache	access:public	signature:(CCTexture2D* texture)
removeTextureForKey	textures/CCTextureCache.cpp	/^void CCTextureCache::removeTextureForKey(const char *textureKeyName)$/;"	f	class:CCTextureCache	signature:(const char *textureKeyName)
removeTextureForKey	textures/CCTextureCache.h	/^    void removeTextureForKey(const char *textureKeyName);$/;"	p	class:CCTextureCache	access:public	signature:(const char *textureKeyName)
removeTileAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::removeTileAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
removeTileAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    void removeTileAt(const CCPoint& tileCoordinate);$/;"	p	class:CCTMXLayer	access:public	signature:(const CCPoint& tileCoordinate)
removeUnusedSpriteFrames	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeUnusedSpriteFrames(void)$/;"	f	class:CCSpriteFrameCache	signature:(void)
removeUnusedSpriteFrames	sprite_nodes/CCSpriteFrameCache.h	/^    void removeUnusedSpriteFrames(void);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(void)
removeUnusedTextures	textures/CCTextureCache.cpp	/^void CCTextureCache::removeUnusedTextures()$/;"	f	class:CCTextureCache	signature:()
removeUnusedTextures	textures/CCTextureCache.h	/^    void removeUnusedTextures();$/;"	p	class:CCTextureCache	access:public	signature:()
removeUpdateFromHash	CCScheduler.cpp	/^void CCScheduler::removeUpdateFromHash(struct _listEntry *entry)$/;"	f	class:CCScheduler	signature:(struct _listEntry *entry)
removeUpdateFromHash	CCScheduler.h	/^    void removeUpdateFromHash(struct _listEntry *entry);$/;"	p	class:CCScheduler	access:private	signature:(struct _listEntry *entry)
removeUsedIndexBit	platform/CCEGLViewProtocol.cpp	/^static void removeUsedIndexBit(int index)$/;"	f	file:	signature:(int index)
render	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::render()$/;"	f	class:CCDrawNode	signature:()
render	draw_nodes/CCDrawNode.h	/^    void render();$/;"	p	class:CCDrawNode	access:private	signature:()
reorderBatch	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::reorderBatch(bool reorder)$/;"	f	class:CCSpriteBatchNode	signature:(bool reorder)
reorderBatch	sprite_nodes/CCSpriteBatchNode.h	/^    void reorderBatch(bool reorder);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(bool reorder)
reorderChild	base_nodes/CCNode.cpp	/^void CCNode::reorderChild(CCNode *child, int zOrder)$/;"	f	class:CCNode	signature:(CCNode *child, int zOrder)
reorderChild	base_nodes/CCNode.h	/^    virtual void reorderChild(CCNode * child, int zOrder);$/;"	p	class:CCNode	access:public	signature:(CCNode * child, int zOrder)
reorderChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::reorderChild(CCNode * child, int zOrder)$/;"	f	class:CCParticleBatchNode	signature:(CCNode * child, int zOrder)
reorderChild	particle_nodes/CCParticleBatchNode.h	/^    virtual void reorderChild(CCNode * child, int zOrder);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCNode * child, int zOrder)
reorderChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::reorderChild(CCNode *pChild, int zOrder)$/;"	f	class:CCSprite	signature:(CCNode *pChild, int zOrder)
reorderChild	sprite_nodes/CCSprite.h	/^    virtual void reorderChild(CCNode *pChild, int zOrder);$/;"	p	class:CCSprite	access:public	signature:(CCNode *pChild, int zOrder)
reorderChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::reorderChild(CCNode *child, int zOrder)$/;"	f	class:CCSpriteBatchNode	signature:(CCNode *child, int zOrder)
reorderChild	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void reorderChild(CCNode * child, int zOrder);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCNode * child, int zOrder)
replaceControlPoint	actions/CCActionCatmullRom.cpp	/^void CCPointArray::replaceControlPoint(cocos2d::CCPoint &controlPoint, unsigned int index)$/;"	f	class:CCPointArray	signature:(cocos2d::CCPoint &controlPoint, unsigned int index)
replaceControlPoint	actions/CCActionCatmullRom.h	/^    void replaceControlPoint(CCPoint &controlPoint, unsigned int index);$/;"	p	class:CCPointArray	access:public	signature:(CCPoint &controlPoint, unsigned int index)
replaceObjectAtIndex	cocoa/CCArray.cpp	/^void CCArray::replaceObjectAtIndex(unsigned int index, CCObject* pObject, bool bReleaseObject\/* = true*\/)$/;"	f	class:CCArray	signature:(unsigned int index, CCObject* pObject, bool bReleaseObject )
replaceObjectAtIndex	cocoa/CCArray.h	/^    void replaceObjectAtIndex(unsigned int uIndex, CCObject* pObject, bool bReleaseObject = true);$/;"	p	class:CCArray	access:public	signature:(unsigned int uIndex, CCObject* pObject, bool bReleaseObject = true)
replaceScene	CCDirector.cpp	/^void CCDirector::replaceScene(CCScene *pScene)$/;"	f	class:CCDirector	signature:(CCScene *pScene)
replaceScene	CCDirector.h	/^    void replaceScene(CCScene *pScene);$/;"	p	class:CCDirector	access:public	signature:(CCScene *pScene)
reserved	support/zip_support/ZipUtils.h	/^        unsigned int             reserved;            \/\/ Reserved for users.$/;"	m	struct:cocos2d::CCZHeader	access:public
reset	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::reset()$/;"	f	class:CCMotionStreak	signature:()
reset	misc_nodes/CCMotionStreak.h	/^    void reset();$/;"	p	class:CCMotionStreak	access:public	signature:()
reset	shaders/CCGLProgram.cpp	/^void CCGLProgram::reset()$/;"	f	class:CCGLProgram	signature:()
reset	shaders/CCGLProgram.h	/^    void reset();$/;"	p	class:CCGLProgram	access:public	signature:()
reset	support/CCProfiling.cpp	/^void CCProfilingTimer::reset()$/;"	f	class:CCProfilingTimer	signature:()
reset	support/CCProfiling.h	/^    void reset();$/;"	p	class:CCProfilingTimer	access:public	signature:()
resetSystem	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::resetSystem()$/;"	f	class:CCParticleSystem	signature:()
resetSystem	particle_nodes/CCParticleSystem.h	/^    void resetSystem();$/;"	p	class:CCParticleSystem	access:public	signature:()
resizeCapacity	textures/CCTextureAtlas.cpp	/^bool CCTextureAtlas::resizeCapacity(unsigned int newCapacity)$/;"	f	class:CCTextureAtlas	signature:(unsigned int newCapacity)
resizeCapacity	textures/CCTextureAtlas.h	/^    bool resizeCapacity(unsigned int n);$/;"	p	class:CCTextureAtlas	access:public	signature:(unsigned int n)
rest_read_compressed	support/zip_support/unzip.cpp	/^    ZPOS64_T rest_read_compressed; \/* number of byte to be decompressed *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
rest_read_uncompressed	support/zip_support/unzip.cpp	/^    ZPOS64_T rest_read_uncompressed;\/*number of byte to be obtained after decomp*\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
restore	CCCamera.cpp	/^void CCCamera::restore(void)$/;"	f	class:CCCamera	signature:(void)
restore	CCCamera.h	/^    void restore(void);$/;"	p	class:CCCamera	access:public	signature:(void)
resume	CCDirector.cpp	/^void CCDirector::resume(void)$/;"	f	class:CCDirector	signature:(void)
resume	CCDirector.h	/^    void resume(void);$/;"	p	class:CCDirector	access:public	signature:(void)
resumeSchedulerAndActions	base_nodes/CCNode.cpp	/^void CCNode::resumeSchedulerAndActions()$/;"	f	class:CCNode	signature:()
resumeSchedulerAndActions	base_nodes/CCNode.h	/^    void resumeSchedulerAndActions(void);$/;"	p	class:CCNode	access:public	signature:(void)
resumeTarget	CCScheduler.cpp	/^void CCScheduler::resumeTarget(CCObject *pTarget)$/;"	f	class:CCScheduler	signature:(CCObject *pTarget)
resumeTarget	CCScheduler.h	/^    void resumeTarget(CCObject *pTarget);$/;"	p	class:CCScheduler	access:public	signature:(CCObject *pTarget)
resumeTarget	actions/CCActionManager.cpp	/^void CCActionManager::resumeTarget(CCObject *pTarget)$/;"	f	class:CCActionManager	signature:(CCObject *pTarget)
resumeTarget	actions/CCActionManager.h	/^    void resumeTarget(CCObject *pTarget);$/;"	p	class:CCActionManager	access:public	signature:(CCObject *pTarget)
resumeTargets	CCScheduler.cpp	/^void CCScheduler::resumeTargets(CCSet* pTargetsToResume)$/;"	f	class:CCScheduler	signature:(CCSet* pTargetsToResume)
resumeTargets	CCScheduler.h	/^    void resumeTargets(CCSet* targetsToResume);$/;"	p	class:CCScheduler	access:public	signature:(CCSet* targetsToResume)
resumeTargets	actions/CCActionManager.cpp	/^void CCActionManager::resumeTargets(cocos2d::CCSet *targetsToResume)$/;"	f	class:CCActionManager	signature:(cocos2d::CCSet *targetsToResume)
resumeTargets	actions/CCActionManager.h	/^    void resumeTargets(CCSet *targetsToResume);$/;"	p	class:CCActionManager	access:public	signature:(CCSet *targetsToResume)
retain	cocoa/CCObject.cpp	/^void CCObject::retain(void)$/;"	f	class:CCObject	signature:(void)
retain	cocoa/CCObject.h	/^    void retain(void);$/;"	p	class:CCObject	access:public	signature:(void)
retainCount	cocoa/CCObject.cpp	/^unsigned int CCObject::retainCount(void)$/;"	f	class:CCObject	signature:(void)
retainCount	cocoa/CCObject.h	/^    unsigned int retainCount(void);$/;"	p	class:CCObject	access:public	signature:(void)
reuse	effects/CCGrid.cpp	/^void CCGrid3D::reuse(void)$/;"	f	class:CCGrid3D	signature:(void)
reuse	effects/CCGrid.cpp	/^void CCGridBase::reuse(void)$/;"	f	class:CCGridBase	signature:(void)
reuse	effects/CCGrid.cpp	/^void CCTiledGrid3D::reuse(void)$/;"	f	class:CCTiledGrid3D	signature:(void)
reuse	effects/CCGrid.h	/^    virtual void reuse(void);$/;"	p	class:CCGrid3D	access:public	signature:(void)
reuse	effects/CCGrid.h	/^    virtual void reuse(void);$/;"	p	class:CCGridBase	access:public	signature:(void)
reuse	effects/CCGrid.h	/^    virtual void reuse(void);$/;"	p	class:CCTiledGrid3D	access:public	signature:(void)
reusedTileWithRect	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite* CCTMXLayer::reusedTileWithRect(CCRect rect)$/;"	f	class:CCTMXLayer	signature:(CCRect rect)
reusedTileWithRect	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite* reusedTileWithRect(CCRect rect);$/;"	p	class:CCTMXLayer	access:private	signature:(CCRect rect)
reverse	actions/CCAction.cpp	/^CCActionInterval *CCSpeed::reverse()$/;"	f	class:CCSpeed	signature:()
reverse	actions/CCAction.cpp	/^CCFiniteTimeAction *CCFiniteTimeAction::reverse()$/;"	f	class:CCFiniteTimeAction	signature:()
reverse	actions/CCAction.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCSpeed	access:public	signature:(void)
reverse	actions/CCAction.h	/^    virtual CCFiniteTimeAction* reverse(void);$/;"	p	class:CCFiniteTimeAction	access:public	signature:(void)
reverse	actions/CCActionCamera.cpp	/^CCActionInterval * CCActionCamera::reverse()$/;"	f	class:CCActionCamera	signature:()
reverse	actions/CCActionCamera.h	/^    virtual CCActionInterval * reverse();$/;"	p	class:CCActionCamera	access:public	signature:()
reverse	actions/CCActionCatmullRom.cpp	/^CCActionInterval* CCCardinalSplineBy::reverse()$/;"	f	class:CCCardinalSplineBy	signature:()
reverse	actions/CCActionCatmullRom.cpp	/^CCActionInterval* CCCardinalSplineTo::reverse()$/;"	f	class:CCCardinalSplineTo	signature:()
reverse	actions/CCActionCatmullRom.cpp	/^CCPointArray* CCPointArray::reverse()$/;"	f	class:CCPointArray	signature:()
reverse	actions/CCActionCatmullRom.h	/^    CCPointArray* reverse();$/;"	p	class:CCPointArray	access:public	signature:()
reverse	actions/CCActionCatmullRom.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCCardinalSplineBy	access:public	signature:()
reverse	actions/CCActionCatmullRom.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCCardinalSplineTo	access:public	signature:()
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCActionEase::reverse(void)$/;"	f	class:CCActionEase	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBackIn::reverse(void)$/;"	f	class:CCEaseBackIn	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBackInOut::reverse()$/;"	f	class:CCEaseBackInOut	signature:()
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBackOut::reverse(void)$/;"	f	class:CCEaseBackOut	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBounce::reverse()$/;"	f	class:CCEaseBounce	signature:()
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBounceIn::reverse(void)$/;"	f	class:CCEaseBounceIn	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBounceInOut::reverse()$/;"	f	class:CCEaseBounceInOut	signature:()
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBounceOut::reverse(void)$/;"	f	class:CCEaseBounceOut	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseElastic::reverse(void)$/;"	f	class:CCEaseElastic	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseElasticIn::reverse(void)$/;"	f	class:CCEaseElasticIn	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseElasticInOut::reverse(void)$/;"	f	class:CCEaseElasticInOut	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseElasticOut::reverse(void)$/;"	f	class:CCEaseElasticOut	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseExponentialIn::reverse(void)$/;"	f	class:CCEaseExponentialIn	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseExponentialInOut::reverse()$/;"	f	class:CCEaseExponentialInOut	signature:()
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseExponentialOut::reverse(void)$/;"	f	class:CCEaseExponentialOut	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseIn::reverse(void)$/;"	f	class:CCEaseIn	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseInOut::reverse(void)$/;"	f	class:CCEaseInOut	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseOut::reverse()$/;"	f	class:CCEaseOut	signature:()
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseRateAction::reverse(void)$/;"	f	class:CCEaseRateAction	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseSineIn::reverse(void)$/;"	f	class:CCEaseSineIn	signature:(void)
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseSineInOut::reverse()$/;"	f	class:CCEaseSineInOut	signature:()
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseSineOut::reverse(void)$/;"	f	class:CCEaseSineOut	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCEaseBackInOut	access:public	signature:()
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCEaseBounce	access:public	signature:()
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCEaseBounceInOut	access:public	signature:()
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCEaseExponentialInOut	access:public	signature:()
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCEaseOut	access:public	signature:()
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse();$/;"	p	class:CCEaseSineInOut	access:public	signature:()
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCActionEase	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseBackIn	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseBackOut	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseBounceIn	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseBounceOut	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseElastic	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseElasticIn	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseElasticInOut	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseElasticOut	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseExponentialIn	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseExponentialOut	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseIn	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseInOut	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseRateAction	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseSineIn	access:public	signature:(void)
reverse	actions/CCActionEase.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCEaseSineOut	access:public	signature:(void)
reverse	actions/CCActionGrid.cpp	/^CCActionInterval* CCAccelAmplitude::reverse(void)$/;"	f	class:CCAccelAmplitude	signature:(void)
reverse	actions/CCActionGrid.cpp	/^CCActionInterval* CCAccelDeccelAmplitude::reverse(void)$/;"	f	class:CCAccelDeccelAmplitude	signature:(void)
reverse	actions/CCActionGrid.cpp	/^CCActionInterval* CCDeccelAmplitude::reverse(void)$/;"	f	class:CCDeccelAmplitude	signature:(void)
reverse	actions/CCActionGrid.cpp	/^CCActionInterval* CCGridAction::reverse(void)$/;"	f	class:CCGridAction	signature:(void)
reverse	actions/CCActionGrid.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCAccelAmplitude	access:public	signature:(void)
reverse	actions/CCActionGrid.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCAccelDeccelAmplitude	access:public	signature:(void)
reverse	actions/CCActionGrid.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCDeccelAmplitude	access:public	signature:(void)
reverse	actions/CCActionGrid.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCGridAction	access:public	signature:(void)
reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction * CCActionInstant::reverse() {$/;"	f	class:CCActionInstant	signature:()
reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction *CCHide::reverse() {$/;"	f	class:CCHide	signature:()
reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction* CCFlipX::reverse() {$/;"	f	class:CCFlipX	signature:()
reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction* CCFlipY::reverse() {$/;"	f	class:CCFlipY	signature:()
reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction* CCShow::reverse() {$/;"	f	class:CCShow	signature:()
reverse	actions/CCActionInstant.h	/^    virtual CCFiniteTimeAction * reverse(void);$/;"	p	class:CCActionInstant	access:public	signature:(void)
reverse	actions/CCActionInstant.h	/^    virtual CCFiniteTimeAction * reverse(void);$/;"	p	class:CCFlipX	access:public	signature:(void)
reverse	actions/CCActionInstant.h	/^    virtual CCFiniteTimeAction * reverse(void);$/;"	p	class:CCFlipY	access:public	signature:(void)
reverse	actions/CCActionInstant.h	/^    virtual CCFiniteTimeAction * reverse(void);$/;"	p	class:CCHide	access:public	signature:(void)
reverse	actions/CCActionInstant.h	/^    virtual CCFiniteTimeAction * reverse(void);$/;"	p	class:CCShow	access:public	signature:(void)
reverse	actions/CCActionInterval.cpp	/^    virtual ExtraAction* reverse(void);$/;"	p	class:ExtraAction	file:	access:public	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval *CCRepeatForever::reverse()$/;"	f	class:CCRepeatForever	signature:()
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCActionInterval::reverse(void)$/;"	f	class:CCActionInterval	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCAnimate::reverse(void)$/;"	f	class:CCAnimate	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCBezierBy::reverse(void)$/;"	f	class:CCBezierBy	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCBlink::reverse(void)$/;"	f	class:CCBlink	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCDelayTime::reverse(void)$/;"	f	class:CCDelayTime	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCFadeIn::reverse(void)$/;"	f	class:CCFadeIn	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCFadeOut::reverse(void)$/;"	f	class:CCFadeOut	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCJumpBy::reverse(void)$/;"	f	class:CCJumpBy	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCMoveBy::reverse(void)$/;"	f	class:CCMoveBy	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCRepeat::reverse(void)$/;"	f	class:CCRepeat	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCReverseTime::reverse(void)$/;"	f	class:CCReverseTime	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCRotateBy::reverse(void)$/;"	f	class:CCRotateBy	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCScaleBy::reverse(void)$/;"	f	class:CCScaleBy	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCSequence::reverse(void)$/;"	f	class:CCSequence	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCSkewBy::reverse()$/;"	f	class:CCSkewBy	signature:()
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCSpawn::reverse(void)$/;"	f	class:CCSpawn	signature:(void)
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCTintBy::reverse(void)$/;"	f	class:CCTintBy	signature:(void)
reverse	actions/CCActionInterval.cpp	/^ExtraAction* ExtraAction::reverse(void)$/;"	f	class:ExtraAction	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCActionInterval	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCAnimate	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCBezierBy	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCBlink	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCDelayTime	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCFadeIn	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCFadeOut	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCJumpBy	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCMoveBy	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCRepeat	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCRepeatForever	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCReverseTime	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCRotateBy	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCScaleBy	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCSequence	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCSkewBy	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCSpawn	access:public	signature:(void)
reverse	actions/CCActionInterval.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCTintBy	access:public	signature:(void)
reverse	actions/CCActionProgressTimer.cpp	/^CCActionInterval* CCProgressFromTo::reverse(void)$/;"	f	class:CCProgressFromTo	signature:(void)
reverse	actions/CCActionProgressTimer.h	/^    virtual CCActionInterval* reverse(void);$/;"	p	class:CCProgressFromTo	access:public	signature:(void)
reverse	actions/CCActionTween.cpp	/^CCActionInterval* CCActionTween::reverse()$/;"	f	class:CCActionTween	signature:()
reverse	actions/CCActionTween.h	/^    CCActionInterval* reverse();$/;"	p	class:CCActionTween	access:public	signature:()
reverseInline	actions/CCActionCatmullRom.cpp	/^void CCPointArray::reverseInline()$/;"	f	class:CCPointArray	signature:()
reverseInline	actions/CCActionCatmullRom.h	/^    void reverseInline();$/;"	p	class:CCPointArray	access:public	signature:()
reverseObjects	cocoa/CCArray.cpp	/^void CCArray::reverseObjects()$/;"	f	class:CCArray	signature:()
reverseObjects	cocoa/CCArray.h	/^    void reverseObjects();$/;"	p	class:CCArray	access:public	signature:()
right	label_nodes/CCLabelBMFont.h	/^    int right;$/;"	m	struct:_BMFontPadding	access:public
rotatePerSecond	particle_nodes/CCParticleSystem.h	/^        float rotatePerSecond;$/;"	m	struct:CCParticleSystem::__anon25	access:public
rotatePerSecondVar	particle_nodes/CCParticleSystem.h	/^        float rotatePerSecondVar;$/;"	m	struct:CCParticleSystem::__anon25	access:public
rotation	particle_nodes/CCParticleSystem.h	/^    float        rotation;$/;"	m	struct:sCCParticle	access:public
rotationIsDir	particle_nodes/CCParticleSystem.h	/^        bool rotationIsDir;$/;"	m	struct:CCParticleSystem::__anon24	access:public
runAction	base_nodes/CCNode.cpp	/^CCAction * CCNode::runAction(CCAction* action)$/;"	f	class:CCNode	signature:(CCAction* action)
runAction	base_nodes/CCNode.h	/^    CCAction* runAction(CCAction* action);$/;"	p	class:CCNode	access:public	signature:(CCAction* action)
runWithScene	CCDirector.cpp	/^void CCDirector::runWithScene(CCScene *pScene)$/;"	f	class:CCDirector	signature:(CCScene *pScene)
runWithScene	CCDirector.h	/^    void runWithScene(CCScene *pScene);$/;"	p	class:CCDirector	access:public	signature:(CCScene *pScene)
sCCParticle	particle_nodes/CCParticleSystem.h	/^typedef struct sCCParticle {$/;"	s
sCCParticle::__anon22::dir	particle_nodes/CCParticleSystem.h	/^        CCPoint        dir;$/;"	m	struct:sCCParticle::__anon22	access:public
sCCParticle::__anon22::radialAccel	particle_nodes/CCParticleSystem.h	/^        float        radialAccel;$/;"	m	struct:sCCParticle::__anon22	access:public
sCCParticle::__anon22::tangentialAccel	particle_nodes/CCParticleSystem.h	/^        float        tangentialAccel;$/;"	m	struct:sCCParticle::__anon22	access:public
sCCParticle::__anon23::angle	particle_nodes/CCParticleSystem.h	/^        float        angle;$/;"	m	struct:sCCParticle::__anon23	access:public
sCCParticle::__anon23::degreesPerSecond	particle_nodes/CCParticleSystem.h	/^        float        degreesPerSecond;$/;"	m	struct:sCCParticle::__anon23	access:public
sCCParticle::__anon23::deltaRadius	particle_nodes/CCParticleSystem.h	/^        float        deltaRadius;$/;"	m	struct:sCCParticle::__anon23	access:public
sCCParticle::__anon23::radius	particle_nodes/CCParticleSystem.h	/^        float        radius;$/;"	m	struct:sCCParticle::__anon23	access:public
sCCParticle::atlasIndex	particle_nodes/CCParticleSystem.h	/^    unsigned int    atlasIndex;$/;"	m	struct:sCCParticle	access:public
sCCParticle::color	particle_nodes/CCParticleSystem.h	/^    ccColor4F    color;$/;"	m	struct:sCCParticle	access:public
sCCParticle::deltaColor	particle_nodes/CCParticleSystem.h	/^    ccColor4F    deltaColor;$/;"	m	struct:sCCParticle	access:public
sCCParticle::deltaRotation	particle_nodes/CCParticleSystem.h	/^    float        deltaRotation;$/;"	m	struct:sCCParticle	access:public
sCCParticle::deltaSize	particle_nodes/CCParticleSystem.h	/^    float        deltaSize;$/;"	m	struct:sCCParticle	access:public
sCCParticle::modeA	particle_nodes/CCParticleSystem.h	/^    } modeA;$/;"	m	struct:sCCParticle	typeref:struct:sCCParticle::__anon22	access:public
sCCParticle::modeB	particle_nodes/CCParticleSystem.h	/^    } modeB;$/;"	m	struct:sCCParticle	typeref:struct:sCCParticle::__anon23	access:public
sCCParticle::pos	particle_nodes/CCParticleSystem.h	/^    CCPoint     pos;$/;"	m	struct:sCCParticle	access:public
sCCParticle::rotation	particle_nodes/CCParticleSystem.h	/^    float        rotation;$/;"	m	struct:sCCParticle	access:public
sCCParticle::size	particle_nodes/CCParticleSystem.h	/^    float        size;$/;"	m	struct:sCCParticle	access:public
sCCParticle::startPos	particle_nodes/CCParticleSystem.h	/^    CCPoint     startPos;$/;"	m	struct:sCCParticle	access:public
sCCParticle::timeToLive	particle_nodes/CCParticleSystem.h	/^    float        timeToLive;$/;"	m	struct:sCCParticle	access:public
sImageTGA	support/image_support/TGAlib.h	/^typedef struct sImageTGA {$/;"	s	namespace:cocos2d
s_ImageInfoMutex	textures/CCTextureCache.cpp	/^static pthread_mutex_t      s_ImageInfoMutex;$/;"	v	file:
s_SharedDirector	CCDirector.cpp	/^static CCDisplayLinkDirector *s_SharedDirector = NULL;$/;"	v	file:
s_TouchesIntergerDict	platform/CCEGLViewProtocol.cpp	/^static CCDictionary s_TouchesIntergerDict;$/;"	v	file:
s_asyncStructQueueMutex	textures/CCTextureCache.cpp	/^static pthread_mutex_t      s_asyncStructQueueMutex;$/;"	v	file:
s_bInitialized	draw_nodes/CCDrawingPrimitives.cpp	/^static bool s_bInitialized = false;$/;"	v	file:
s_bPopupNotify	platform/CCFileUtils.cpp	/^static bool s_bPopupNotify = true;$/;"	v	file:
s_bVertexAttribColor	shaders/ccGLStateCache.cpp	/^static bool        s_bVertexAttribColor = false;$/;"	v	file:
s_bVertexAttribPosition	shaders/ccGLStateCache.cpp	/^static bool        s_bVertexAttribPosition = false;$/;"	v	file:
s_bVertexAttribTexCoords	shaders/ccGLStateCache.cpp	/^static bool        s_bVertexAttribTexCoords = false;$/;"	v	file:
s_eBlendingDest	shaders/ccGLStateCache.cpp	/^static GLenum    s_eBlendingDest = -1;$/;"	v	file:
s_eBlendingSource	shaders/ccGLStateCache.cpp	/^static GLenum    s_eBlendingSource = -1;$/;"	v	file:
s_eGLServerState	shaders/ccGLStateCache.cpp	/^static int       s_eGLServerState = 0;$/;"	v	file:
s_fPointSize	draw_nodes/CCDrawingPrimitives.cpp	/^static GLfloat s_fPointSize = 1.0f;$/;"	v	file:
s_gSharedConfiguration	CCConfiguration.h	/^    static CCConfiguration *s_gSharedConfiguration;$/;"	m	class:CCConfiguration	access:private
s_globalOrderOfArrival	base_nodes/CCNode.cpp	/^static int s_globalOrderOfArrival = 1;$/;"	v	file:
s_indexBitsUsed	platform/CCEGLViewProtocol.cpp	/^static unsigned int s_indexBitsUsed = 0;$/;"	v	file:
s_loadingThread	textures/CCTextureCache.cpp	/^static pthread_t s_loadingThread;$/;"	v	file:
s_nAsyncRefCount	textures/CCTextureCache.cpp	/^static unsigned long s_nAsyncRefCount = 0;$/;"	v	file:
s_nColorLocation	draw_nodes/CCDrawingPrimitives.cpp	/^static int s_nColorLocation = -1;$/;"	v	file:
s_nPointSizeLocation	draw_nodes/CCDrawingPrimitives.cpp	/^static int s_nPointSizeLocation = -1;$/;"	v	file:
s_pAsyncStructQueue	textures/CCTextureCache.cpp	/^static std::queue<AsyncStruct*>* s_pAsyncStructQueue = NULL;$/;"	v	file:
s_pConfigurations	label_nodes/CCLabelBMFont.cpp	/^static CCDictionary* s_pConfigurations = NULL;$/;"	v	file:
s_pImageQueue	textures/CCTextureCache.cpp	/^static std::queue<ImageInfo*>*   s_pImageQueue = NULL;$/;"	v	file:
s_pPoolManager	cocoa/CCAutoreleasePool.cpp	/^static CCPoolManager* s_pPoolManager = NULL;$/;"	v	file:
s_pSem	textures/CCTextureCache.cpp	/^static sem_t* s_pSem = NULL;$/;"	v	file:
s_pShader	draw_nodes/CCDrawingPrimitives.cpp	/^static CCGLProgram* s_pShader = NULL;$/;"	v	file:
s_pSharedAnimationCache	sprite_nodes/CCAnimationCache.h	/^    static CCAnimationCache* s_pSharedAnimationCache;$/;"	m	class:CCAnimationCache	access:private
s_pSharedScriptEngineManager	script_support/CCScriptSupport.cpp	/^static CCScriptEngineManager* s_pSharedScriptEngineManager = NULL;$/;"	v	file:
s_pTouches	platform/CCEGLViewProtocol.cpp	/^static CCTouch* s_pTouches[CC_MAX_TOUCHES] = { NULL };$/;"	v	file:
s_sem	textures/CCTextureCache.cpp	/^    static sem_t s_sem;$/;"	v	file:
s_sharedFileUtils	platform/CCFileUtils.cpp	/^CCFileUtils* CCFileUtils::s_sharedFileUtils = NULL;$/;"	m	class:CCFileUtils	file:
s_sharedFileUtils	platform/CCFileUtils.h	/^    static CCFileUtils* s_sharedFileUtils;$/;"	m	class:CCFileUtils	access:protected
s_sharedNotifCenter	support/CCNotificationCenter.cpp	/^static CCNotificationCenter *s_sharedNotifCenter = NULL;$/;"	v	file:
s_tColor	draw_nodes/CCDrawingPrimitives.cpp	/^static ccColor4F s_tColor = {1.0f,1.0f,1.0f,1.0f};$/;"	v	file:
s_uCurrentBoundTexture	shaders/ccGLStateCache.cpp	/^static GLuint    s_uCurrentBoundTexture[kCCMaxActiveTexture] =  {(GLuint)-1,(GLuint)-1,(GLuint)-1,(GLuint)-1, (GLuint)-1,(GLuint)-1,(GLuint)-1,(GLuint)-1, (GLuint)-1,(GLuint)-1,(GLuint)-1,(GLuint)-1, (GLuint)-1,(GLuint)-1,(GLuint)-1,(GLuint)-1, };$/;"	v	file:
s_uCurrentProjectionMatrix	shaders/ccGLStateCache.cpp	/^static GLuint      s_uCurrentProjectionMatrix = -1;$/;"	v	file:
s_uCurrentShaderProgram	shaders/ccGLStateCache.cpp	/^static GLuint    s_uCurrentShaderProgram = -1;$/;"	v	file:
s_uVAO	shaders/ccGLStateCache.cpp	/^static GLuint    s_uVAO = 0;$/;"	v	file:
saveToFile	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::saveToFile(const char *fileName, tCCImageFormat format)$/;"	f	class:CCRenderTexture	signature:(const char *fileName, tCCImageFormat format)
saveToFile	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::saveToFile(const char *szFilePath)$/;"	f	class:CCRenderTexture	signature:(const char *szFilePath)
saveToFile	misc_nodes/CCRenderTexture.h	/^    bool saveToFile(const char *name, tCCImageFormat format);$/;"	p	class:CCRenderTexture	access:public	signature:(const char *name, tCCImageFormat format)
saveToFile	misc_nodes/CCRenderTexture.h	/^    bool saveToFile(const char *szFilePath);$/;"	p	class:CCRenderTexture	access:public	signature:(const char *szFilePath)
saveToFile	platform/CCImage.h	/^    bool saveToFile(const char *pszFilePath, bool bIsToRGB = true);$/;"	p	class:CCImage	access:public	signature:(const char *pszFilePath, bool bIsToRGB = true)
saveToFile	platform/CCImageCommon_cpp.h	/^bool CCImage::saveToFile(const char *pszFilePath, bool bIsToRGB)$/;"	f	class:CCImage	signature:(const char *pszFilePath, bool bIsToRGB)
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFadeTR::sceneOrder()$/;"	f	class:CCTransitionFadeTR	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::sceneOrder()$/;"	f	class:CCTransitionScene	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInB::sceneOrder()$/;"	f	class:CCTransitionSlideInB	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInL::sceneOrder()$/;"	f	class:CCTransitionSlideInL	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInR::sceneOrder()$/;"	f	class:CCTransitionSlideInR	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInT::sceneOrder()$/;"	f	class:CCTransitionSlideInT	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionTurnOffTiles::sceneOrder()$/;"	f	class:CCTransitionTurnOffTiles	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionFadeTR	access:protected	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionScene	access:protected	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionSlideInB	access:protected	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionSlideInL	access:protected	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionSlideInR	access:protected	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionSlideInT	access:protected	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionTurnOffTiles	access:protected	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^void CCTransitionPageTurn::sceneOrder()$/;"	f	class:CCTransitionPageTurn	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionPageTurn	access:protected	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgress::sceneOrder()$/;"	f	class:CCTransitionProgress	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgressInOut::sceneOrder()$/;"	f	class:CCTransitionProgressInOut	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionProgress	access:protected	signature:()
sceneOrder	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual void sceneOrder();$/;"	p	class:CCTransitionProgressInOut	access:protected	signature:()
schedule	base_nodes/CCNode.cpp	/^void CCNode::schedule(SEL_SCHEDULE selector)$/;"	f	class:CCNode	signature:(SEL_SCHEDULE selector)
schedule	base_nodes/CCNode.cpp	/^void CCNode::schedule(SEL_SCHEDULE selector, float interval)$/;"	f	class:CCNode	signature:(SEL_SCHEDULE selector, float interval)
schedule	base_nodes/CCNode.cpp	/^void CCNode::schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)$/;"	f	class:CCNode	signature:(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)
schedule	base_nodes/CCNode.h	/^    void schedule(SEL_SCHEDULE selector);$/;"	p	class:CCNode	access:public	signature:(SEL_SCHEDULE selector)
schedule	base_nodes/CCNode.h	/^    void schedule(SEL_SCHEDULE selector, float interval);$/;"	p	class:CCNode	access:public	signature:(SEL_SCHEDULE selector, float interval)
schedule	base_nodes/CCNode.h	/^    void schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay);$/;"	p	class:CCNode	access:public	signature:(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)
scheduleOnce	base_nodes/CCNode.cpp	/^void CCNode::scheduleOnce(SEL_SCHEDULE selector, float delay)$/;"	f	class:CCNode	signature:(SEL_SCHEDULE selector, float delay)
scheduleOnce	base_nodes/CCNode.h	/^    void scheduleOnce(SEL_SCHEDULE selector, float delay);$/;"	p	class:CCNode	access:public	signature:(SEL_SCHEDULE selector, float delay)
scheduleScriptFunc	CCScheduler.cpp	/^unsigned int CCScheduler::scheduleScriptFunc(unsigned int nHandler, float fInterval, bool bPaused)$/;"	f	class:CCScheduler	signature:(unsigned int nHandler, float fInterval, bool bPaused)
scheduleScriptFunc	CCScheduler.h	/^    unsigned int scheduleScriptFunc(unsigned int nHandler, float fInterval, bool bPaused);$/;"	p	class:CCScheduler	access:public	signature:(unsigned int nHandler, float fInterval, bool bPaused)
scheduleSelector	CCScheduler.cpp	/^void CCScheduler::scheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, bool bPaused)$/;"	f	class:CCScheduler	signature:(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, bool bPaused)
scheduleSelector	CCScheduler.cpp	/^void CCScheduler::scheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, unsigned int repeat, float delay, bool bPaused)$/;"	f	class:CCScheduler	signature:(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, unsigned int repeat, float delay, bool bPaused)
scheduleSelector	CCScheduler.h	/^    void scheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, bool bPaused);$/;"	p	class:CCScheduler	access:public	signature:(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, bool bPaused)
scheduleSelector	CCScheduler.h	/^    void scheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, unsigned int repeat, float delay, bool bPaused);$/;"	p	class:CCScheduler	access:public	signature:(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, unsigned int repeat, float delay, bool bPaused)
scheduleUpdate	base_nodes/CCNode.cpp	/^void CCNode::scheduleUpdate()$/;"	f	class:CCNode	signature:()
scheduleUpdate	base_nodes/CCNode.h	/^    void scheduleUpdate(void);$/;"	p	class:CCNode	access:public	signature:(void)
scheduleUpdateForTarget	CCScheduler.cpp	/^void CCScheduler::scheduleUpdateForTarget(CCObject *pTarget, int nPriority, bool bPaused)$/;"	f	class:CCScheduler	signature:(CCObject *pTarget, int nPriority, bool bPaused)
scheduleUpdateForTarget	CCScheduler.h	/^    void scheduleUpdateForTarget(CCObject *pTarget, int nPriority, bool bPaused);$/;"	p	class:CCScheduler	access:public	signature:(CCObject *pTarget, int nPriority, bool bPaused)
scheduleUpdateWithPriority	base_nodes/CCNode.cpp	/^void CCNode::scheduleUpdateWithPriority(int priority)$/;"	f	class:CCNode	signature:(int priority)
scheduleUpdateWithPriority	base_nodes/CCNode.h	/^    void scheduleUpdateWithPriority(int priority);$/;"	p	class:CCNode	access:public	signature:(int priority)
scheduleUpdateWithPriorityLua	base_nodes/CCNode.cpp	/^void CCNode::scheduleUpdateWithPriorityLua(int nHandler, int priority)$/;"	f	class:CCNode	signature:(int nHandler, int priority)
scheduleUpdateWithPriorityLua	base_nodes/CCNode.h	/^    void scheduleUpdateWithPriorityLua(int nHandler, int priority);$/;"	p	class:CCNode	access:public	signature:(int nHandler, int priority)
schedule_selector	cocoa/CCObject.h	87;"	d
searchNewPositionInChildrenForZ	particle_nodes/CCParticleBatchNode.cpp	/^unsigned int CCParticleBatchNode::searchNewPositionInChildrenForZ(int z)$/;"	f	class:CCParticleBatchNode	signature:(int z)
searchNewPositionInChildrenForZ	particle_nodes/CCParticleBatchNode.h	/^    unsigned int searchNewPositionInChildrenForZ(int z);$/;"	p	class:CCParticleBatchNode	access:private	signature:(int z)
seek64_file_func	support/zip_support/ioapi.h	/^typedef long     (ZCALLBACK *seek64_file_func)    OF((voidpf opaque, voidpf stream, ZPOS64_T offset, int origin));$/;"	t	namespace:cocos2d
seek_file_func	support/zip_support/ioapi.h	/^typedef long     (ZCALLBACK *seek_file_func)      OF((voidpf opaque, voidpf stream, uLong offset, int origin));$/;"	t	namespace:cocos2d
selected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::selected()$/;"	f	class:CCMenuItem	signature:()
selected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::selected()$/;"	f	class:CCMenuItemLabel	signature:()
selected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::selected()$/;"	f	class:CCMenuItemSprite	signature:()
selected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::selected()$/;"	f	class:CCMenuItemToggle	signature:()
selected	menu_nodes/CCMenuItem.h	/^    virtual void selected();$/;"	p	class:CCMenuItem	access:public	signature:()
selected	menu_nodes/CCMenuItem.h	/^    virtual void selected();$/;"	p	class:CCMenuItemLabel	access:public	signature:()
selected	menu_nodes/CCMenuItem.h	/^    virtual void selected();$/;"	p	class:CCMenuItemSprite	access:public	signature:()
selected	menu_nodes/CCMenuItem.h	/^    virtual void selected();$/;"	p	class:CCMenuItemToggle	access:public	signature:()
selectedItem	menu_nodes/CCMenuItem.cpp	/^CCMenuItem* CCMenuItemToggle::selectedItem()$/;"	f	class:CCMenuItemToggle	signature:()
selectedItem	menu_nodes/CCMenuItem.h	/^    CCMenuItem* selectedItem();$/;"	p	class:CCMenuItemToggle	access:public	signature:()
selector	textures/CCTextureCache.cpp	/^    SEL_CallFuncO        selector;$/;"	m	struct:_AsyncStruct	file:	access:public
set	kazmath/src/mat4.c	/^void set(kmMat4 * pIn, int row, int col, float value)$/;"	f	signature:(kmMat4 * pIn, int row, int col, float value)
set2DProjection	effects/CCGrid.cpp	/^void CCGridBase::set2DProjection()$/;"	f	class:CCGridBase	signature:()
set2DProjection	effects/CCGrid.h	/^    void set2DProjection(void);$/;"	p	class:CCGridBase	access:public	signature:(void)
setAccelerometer	CCDirector.cpp	/^void CCDirector::setAccelerometer(CCAccelerometer* pAccelerometer)$/;"	f	class:CCDirector	signature:(CCAccelerometer* pAccelerometer)
setAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setAccelerometerEnabled(bool enabled)$/;"	f	class:CCLayer	signature:(bool enabled)
setAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setAccelerometerEnabled(bool value);$/;"	p	class:CCLayer	access:public	signature:(bool value)
setAccelerometerInterval	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setAccelerometerInterval(double interval) {$/;"	f	class:CCLayer	signature:(double interval)
setAccelerometerInterval	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setAccelerometerInterval(double interval);$/;"	p	class:CCLayer	access:public	signature:(double interval)
setActionManager	CCDirector.cpp	/^void CCDirector::setActionManager(CCActionManager* pActionManager)$/;"	f	class:CCDirector	signature:(CCActionManager* pActionManager)
setActionManager	base_nodes/CCNode.cpp	/^void CCNode::setActionManager(CCActionManager* actionManager)$/;"	f	class:CCNode	signature:(CCActionManager* actionManager)
setActionManager	base_nodes/CCNode.h	/^    virtual void setActionManager(CCActionManager* actionManager);$/;"	p	class:CCNode	access:public	signature:(CCActionManager* actionManager)
setActive	effects/CCGrid.cpp	/^void CCGridBase::setActive(bool bActive)$/;"	f	class:CCGridBase	signature:(bool bActive)
setActive	effects/CCGrid.h	/^    void setActive(bool bActive);$/;"	p	class:CCGridBase	access:public	signature:(bool bActive)
setAdditionalTransform	base_nodes/CCNode.cpp	/^void CCNode::setAdditionalTransform(const CCAffineTransform& additionalTransform)$/;"	f	class:CCNode	signature:(const CCAffineTransform& additionalTransform)
setAdditionalTransform	base_nodes/CCNode.h	/^    void setAdditionalTransform(const CCAffineTransform& additionalTransform);$/;"	p	class:CCNode	access:public	signature:(const CCAffineTransform& additionalTransform)
setAliasTexParameters	textures/CCTexture2D.cpp	/^void CCTexture2D::setAliasTexParameters()$/;"	f	class:CCTexture2D	signature:()
setAliasTexParameters	textures/CCTexture2D.h	/^    void setAliasTexParameters();$/;"	p	class:CCTexture2D	access:public	signature:()
setAlignment	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setAlignment(CCTextAlignment alignment)$/;"	f	class:CCLabelBMFont	signature:(CCTextAlignment alignment)
setAlignment	label_nodes/CCLabelBMFont.h	/^    virtual void setAlignment(CCTextAlignment alignment);$/;"	p	class:CCLabelBMFont	access:public	signature:(CCTextAlignment alignment)
setAlphaBlending	CCDirector.cpp	/^void CCDirector::setAlphaBlending(bool bOn)$/;"	f	class:CCDirector	signature:(bool bOn)
setAlphaBlending	CCDirector.h	/^    void setAlphaBlending(bool bOn);$/;"	p	class:CCDirector	access:public	signature:(bool bOn)
setAlphaThreshold	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::setAlphaThreshold(GLfloat fAlphaThreshold)$/;"	f	class:CCClippingNode	signature:(GLfloat fAlphaThreshold)
setAlphaThreshold	misc_nodes/CCClippingNode.h	/^    void setAlphaThreshold(GLfloat fAlphaThreshold);$/;"	p	class:CCClippingNode	access:public	signature:(GLfloat fAlphaThreshold)
setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCLiquid	access:public	signature:(float fAmplitude)
setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCRipple3D	access:public	signature:(float fAmplitude)
setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCTwirl	access:public	signature:(float fAmplitude)
setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCWaves	access:public	signature:(float fAmplitude)
setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCWaves3D	access:public	signature:(float fAmplitude)
setAmplitude	actions/CCActionTiledGrid.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCJumpTiles3D	access:public	signature:(float fAmplitude)
setAmplitude	actions/CCActionTiledGrid.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCWavesTiles3D	access:public	signature:(float fAmplitude)
setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCLiquid	access:public	signature:(float fAmplitudeRate)
setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCRipple3D	access:public	signature:(float fAmplitudeRate)
setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCTwirl	access:public	signature:(float fAmplitudeRate)
setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCWaves	access:public	signature:(float fAmplitudeRate)
setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCWaves3D	access:public	signature:(float fAmplitudeRate)
setAmplitudeRate	actions/CCActionInterval.cpp	/^void CCActionInterval::setAmplitudeRate(float amp)$/;"	f	class:CCActionInterval	signature:(float amp)
setAmplitudeRate	actions/CCActionInterval.h	/^    void setAmplitudeRate(float amp);$/;"	p	class:CCActionInterval	access:public	signature:(float amp)
setAmplitudeRate	actions/CCActionTiledGrid.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCJumpTiles3D	access:public	signature:(float fAmplitudeRate)
setAmplitudeRate	actions/CCActionTiledGrid.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCWavesTiles3D	access:public	signature:(float fAmplitudeRate)
setAnchorPoint	base_nodes/CCNode.cpp	/^void CCNode::setAnchorPoint(const CCPoint& point)$/;"	f	class:CCNode	signature:(const CCPoint& point)
setAnchorPoint	base_nodes/CCNode.h	/^    virtual void setAnchorPoint(const CCPoint& anchorPoint);$/;"	p	class:CCNode	access:public	signature:(const CCPoint& anchorPoint)
setAnchorPoint	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setAnchorPoint(const CCPoint& point)$/;"	f	class:CCLabelBMFont	signature:(const CCPoint& point)
setAnchorPoint	label_nodes/CCLabelBMFont.h	/^    virtual void setAnchorPoint(const CCPoint& var);$/;"	p	class:CCLabelBMFont	access:public	signature:(const CCPoint& var)
setAnchorPoint	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setAnchorPoint(CCPoint anchorPoint)$/;"	f	class:CCProgressTimer	signature:(CCPoint anchorPoint)
setAnchorPoint	misc_nodes/CCProgressTimer.h	/^    void setAnchorPoint(CCPoint anchorPoint);$/;"	p	class:CCProgressTimer	access:public	signature:(CCPoint anchorPoint)
setAnchorPoint	sprite_nodes/CCSprite.cpp	/^void CCSprite::setAnchorPoint(const CCPoint& anchor)$/;"	f	class:CCSprite	signature:(const CCPoint& anchor)
setAnchorPoint	sprite_nodes/CCSprite.h	/^    virtual void setAnchorPoint(const CCPoint& anchor);$/;"	p	class:CCSprite	access:public	signature:(const CCPoint& anchor)
setAngle	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setAngle(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setAngleVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setAngleVar(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setAnimationInterval	CCDirector.cpp	/^void CCDisplayLinkDirector::setAnimationInterval(double dValue)$/;"	f	class:CCDisplayLinkDirector	signature:(double dValue)
setAnimationInterval	CCDirector.h	/^    virtual void setAnimationInterval(double dValue) = 0;$/;"	p	class:CCDirector	access:public	signature:(double dValue)
setAnimationInterval	CCDirector.h	/^    virtual void setAnimationInterval(double dValue);$/;"	p	class:CCDisplayLinkDirector	access:public	signature:(double dValue)
setAnimationInterval	platform/CCApplicationProtocol.h	/^    virtual void setAnimationInterval(double interval) = 0;$/;"	p	class:CCApplicationProtocol	access:public	signature:(double interval)
setAntiAliasTexParameters	textures/CCTexture2D.cpp	/^void CCTexture2D::setAntiAliasTexParameters()$/;"	f	class:CCTexture2D	signature:()
setAntiAliasTexParameters	textures/CCTexture2D.h	/^    void setAntiAliasTexParameters();$/;"	p	class:CCTexture2D	access:public	signature:()
setAtlasIndex	sprite_nodes/CCSprite.h	/^    inline void setAtlasIndex(unsigned int uAtlasIndex) { m_uAtlasIndex = uAtlasIndex; }$/;"	f	class:CCSprite	access:public	signature:(unsigned int uAtlasIndex)
setAtlasName	label_nodes/CCLabelBMFont.h	/^    inline void setAtlasName(const char* atlasName) { m_sAtlasName = atlasName; }$/;"	f	class:CCBMFontConfiguration	access:public	signature:(const char* atlasName)
setAutoDraw	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setAutoDraw(bool bAutoDraw)$/;"	f	class:CCRenderTexture	signature:(bool bAutoDraw)
setAutoDraw	misc_nodes/CCRenderTexture.h	/^    void setAutoDraw(bool bAutoDraw);$/;"	p	class:CCRenderTexture	access:public	signature:(bool bAutoDraw)
setAutoRemoveOnFinish	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setAutoRemoveOnFinish(bool var)$/;"	f	class:CCParticleSystem	signature:(bool var)
setAutoRemoveOnFinish	particle_nodes/CCParticleSystem.h	/^    virtual void setAutoRemoveOnFinish(bool var);$/;"	p	class:CCParticleSystem	access:public	signature:(bool var)
setAverageTime	support/CCProfiling.h	/^    inline void setAverageTime(double value) { m_dAverageTime = value; }$/;"	f	class:CCProfilingTimer	access:public	signature:(double value)
setBatchNode	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setBatchNode(CCParticleBatchNode* batchNode)$/;"	f	class:CCParticleSystem	signature:(CCParticleBatchNode* batchNode)
setBatchNode	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setBatchNode(CCParticleBatchNode * batchNode)$/;"	f	class:CCParticleSystemQuad	signature:(CCParticleBatchNode * batchNode)
setBatchNode	particle_nodes/CCParticleSystemQuad.h	/^    virtual void setBatchNode(CCParticleBatchNode* batchNode);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(CCParticleBatchNode* batchNode)
setBatchNode	sprite_nodes/CCSprite.cpp	/^void CCSprite::setBatchNode(CCSpriteBatchNode *pobSpriteBatchNode)$/;"	f	class:CCSprite	signature:(CCSpriteBatchNode *pobSpriteBatchNode)
setBatchNode	sprite_nodes/CCSprite.h	/^    virtual void setBatchNode(CCSpriteBatchNode *pobSpriteBatchNode);$/;"	p	class:CCSprite	access:public	signature:(CCSpriteBatchNode *pobSpriteBatchNode)
setBlendAdditive	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setBlendAdditive(bool additive)$/;"	f	class:CCParticleSystem	signature:(bool additive)
setBlendAdditive	particle_nodes/CCParticleSystem.h	/^    virtual void setBlendAdditive(bool value);$/;"	p	class:CCParticleSystem	access:public	signature:(bool value)
setBlendFunc	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCAtlasNode	signature:(ccBlendFunc blendFunc)
setBlendFunc	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::setBlendFunc(const ccBlendFunc &blendFunc)$/;"	f	class:CCDrawNode	signature:(const ccBlendFunc &blendFunc)
setBlendFunc	draw_nodes/CCDrawNode.h	/^    void setBlendFunc(const ccBlendFunc &blendFunc);$/;"	p	class:CCDrawNode	access:public	signature:(const ccBlendFunc &blendFunc)
setBlendFunc	include/CCProtocols.h	/^    virtual void setBlendFunc(ccBlendFunc blendFunc) = 0;$/;"	p	class:CCBlendProtocol	access:public	signature:(ccBlendFunc blendFunc)
setBlendFunc	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::setBlendFunc(ccBlendFunc var)$/;"	f	class:CCLayerColor	signature:(ccBlendFunc var)
setBlendFunc	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCMotionStreak	signature:(ccBlendFunc blendFunc)
setBlendFunc	misc_nodes/CCMotionStreak.h	/^    virtual void setBlendFunc(ccBlendFunc blendFunc);$/;"	p	class:CCMotionStreak	access:public	signature:(ccBlendFunc blendFunc)
setBlendFunc	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCParticleBatchNode	signature:(ccBlendFunc blendFunc)
setBlendFunc	particle_nodes/CCParticleBatchNode.h	/^    virtual void setBlendFunc(ccBlendFunc blendFunc);$/;"	p	class:CCParticleBatchNode	access:public	signature:(ccBlendFunc blendFunc)
setBlendFunc	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCParticleSystem	signature:(ccBlendFunc blendFunc)
setBlendFunc	sprite_nodes/CCSprite.h	/^    inline void setBlendFunc(ccBlendFunc blendFunc) { m_sBlendFunc = blendFunc; }$/;"	f	class:CCSprite	access:public	signature:(ccBlendFunc blendFunc)
setBlendFunc	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCSpriteBatchNode	signature:(ccBlendFunc blendFunc)
setBlendFunc	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void setBlendFunc(ccBlendFunc blendFunc);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(ccBlendFunc blendFunc)
setBoolForKey	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::setBoolForKey(const char* pKey, bool value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, bool value)
setBoolForKey	support/user_default/CCUserDefault.h	/^    void    setBoolForKey(const char* pKey, bool value);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, bool value)
setBoolForKey	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::setBoolForKey(const char* pKey, bool value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, bool value)
setBoudarySet	actions/CCAction.h	/^    inline void setBoudarySet(bool bValue) { m_bBoundarySet = bValue; }$/;"	f	class:CCFollow	access:public	signature:(bool bValue)
setCCSAXParserImp	platform/CCSAXParser.cpp	/^	void setCCSAXParserImp(CCSAXParser* parser)$/;"	f	class:XmlSaxHander	access:public	signature:(CCSAXParser* parser)
setCString	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setCString(const char *label)$/;"	f	class:CCLabelBMFont	signature:(const char *label)
setCString	label_nodes/CCLabelBMFont.h	/^    virtual void setCString(const char *label);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *label)
setCascadeColorEnabled	base_nodes/CCNode.cpp	/^void CCNodeRGBA::setCascadeColorEnabled(bool cascadeColorEnabled)$/;"	f	class:CCNodeRGBA	signature:(bool cascadeColorEnabled)
setCascadeColorEnabled	base_nodes/CCNode.h	/^    virtual void setCascadeColorEnabled(bool cascadeColorEnabled);$/;"	p	class:CCNodeRGBA	access:public	signature:(bool cascadeColorEnabled)
setCascadeColorEnabled	include/CCProtocols.h	/^    virtual void setCascadeColorEnabled(bool cascadeColorEnabled) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(bool cascadeColorEnabled)
setCascadeColorEnabled	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setCascadeColorEnabled(bool cascadeColorEnabled)$/;"	f	class:CCLabelBMFont	signature:(bool cascadeColorEnabled)
setCascadeColorEnabled	label_nodes/CCLabelBMFont.h	/^    virtual void setCascadeColorEnabled(bool cascadeColorEnabled);$/;"	p	class:CCLabelBMFont	access:public	signature:(bool cascadeColorEnabled)
setCascadeColorEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerRGBA::setCascadeColorEnabled(bool cascadeColorEnabled)$/;"	f	class:CCLayerRGBA	signature:(bool cascadeColorEnabled)
setCascadeColorEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setCascadeColorEnabled(bool cascadeColorEnabled);$/;"	p	class:CCLayerRGBA	access:public	signature:(bool cascadeColorEnabled)
setCascadeOpacityEnabled	base_nodes/CCNode.cpp	/^void CCNodeRGBA::setCascadeOpacityEnabled(bool cascadeOpacityEnabled)$/;"	f	class:CCNodeRGBA	signature:(bool cascadeOpacityEnabled)
setCascadeOpacityEnabled	base_nodes/CCNode.h	/^    virtual void setCascadeOpacityEnabled(bool cascadeOpacityEnabled);$/;"	p	class:CCNodeRGBA	access:public	signature:(bool cascadeOpacityEnabled)
setCascadeOpacityEnabled	include/CCProtocols.h	/^    virtual void setCascadeOpacityEnabled(bool cascadeOpacityEnabled) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(bool cascadeOpacityEnabled)
setCascadeOpacityEnabled	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setCascadeOpacityEnabled(bool cascadeOpacityEnabled)$/;"	f	class:CCLabelBMFont	signature:(bool cascadeOpacityEnabled)
setCascadeOpacityEnabled	label_nodes/CCLabelBMFont.h	/^    virtual void setCascadeOpacityEnabled(bool cascadeOpacityEnabled);$/;"	p	class:CCLabelBMFont	access:public	signature:(bool cascadeOpacityEnabled)
setCascadeOpacityEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerRGBA::setCascadeOpacityEnabled(bool cascadeOpacityEnabled)$/;"	f	class:CCLayerRGBA	signature:(bool cascadeOpacityEnabled)
setCascadeOpacityEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setCascadeOpacityEnabled(bool cascadeOpacityEnabled);$/;"	p	class:CCLayerRGBA	access:public	signature:(bool cascadeOpacityEnabled)
setCenterXYZ	CCCamera.cpp	/^void CCCamera::setCenterXYZ(float fCenterX, float fCenterY, float fCenterZ)$/;"	f	class:CCCamera	signature:(float fCenterX, float fCenterY, float fCenterZ)
setCenterXYZ	CCCamera.h	/^    void setCenterXYZ(float fCenterX, float fCenterY, float fCenterZ);$/;"	p	class:CCCamera	access:public	signature:(float fCenterX, float fCenterY, float fCenterZ)
setClearColor	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setClearColor(const ccColor4F &clearColor)$/;"	f	class:CCRenderTexture	signature:(const ccColor4F &clearColor)
setClearColor	misc_nodes/CCRenderTexture.h	/^    void setClearColor(const ccColor4F &clearColor);$/;"	p	class:CCRenderTexture	access:public	signature:(const ccColor4F &clearColor)
setClearDepth	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setClearDepth(float fClearDepth)$/;"	f	class:CCRenderTexture	signature:(float fClearDepth)
setClearDepth	misc_nodes/CCRenderTexture.h	/^    void setClearDepth(float fClearDepth);$/;"	p	class:CCRenderTexture	access:public	signature:(float fClearDepth)
setClearFlags	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setClearFlags(unsigned int uClearFlags)$/;"	f	class:CCRenderTexture	signature:(unsigned int uClearFlags)
setClearFlags	misc_nodes/CCRenderTexture.h	/^    void setClearFlags(unsigned int uClearFlags);$/;"	p	class:CCRenderTexture	access:public	signature:(unsigned int uClearFlags)
setClearStencil	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setClearStencil(float fClearStencil)$/;"	f	class:CCRenderTexture	signature:(float fClearStencil)
setClearStencil	misc_nodes/CCRenderTexture.h	/^    void setClearStencil(float fClearStencil);$/;"	p	class:CCRenderTexture	access:public	signature:(float fClearStencil)
setColor	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setColor(const ccColor3B& color3)$/;"	f	class:CCAtlasNode	signature:(const ccColor3B& color3)
setColor	base_nodes/CCAtlasNode.h	/^    virtual void setColor(const ccColor3B& color);$/;"	p	class:CCAtlasNode	access:public	signature:(const ccColor3B& color)
setColor	base_nodes/CCNode.cpp	/^void CCNodeRGBA::setColor(const ccColor3B& color)$/;"	f	class:CCNodeRGBA	signature:(const ccColor3B& color)
setColor	base_nodes/CCNode.h	/^    virtual void setColor(const ccColor3B& color);$/;"	p	class:CCNodeRGBA	access:public	signature:(const ccColor3B& color)
setColor	include/CCProtocols.h	/^    virtual void setColor(const ccColor3B& color) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(const ccColor3B& color)
setColor	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setColor(const ccColor3B& color)$/;"	f	class:CCLabelBMFont	signature:(const ccColor3B& color)
setColor	label_nodes/CCLabelBMFont.h	/^    virtual void setColor(const ccColor3B& color);$/;"	p	class:CCLabelBMFont	access:public	signature:(const ccColor3B& color)
setColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::setColor(const ccColor3B &color)$/;"	f	class:CCLayerColor	signature:(const ccColor3B &color)
setColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerRGBA::setColor(const ccColor3B& color)$/;"	f	class:CCLayerRGBA	signature:(const ccColor3B& color)
setColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setColor(const ccColor3B &color);$/;"	p	class:CCLayerColor	access:public	signature:(const ccColor3B &color)
setColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setColor(const ccColor3B& color);$/;"	p	class:CCLayerRGBA	access:public	signature:(const ccColor3B& color)
setColor	sprite_nodes/CCSprite.cpp	/^void CCSprite::setColor(const ccColor3B& color3)$/;"	f	class:CCSprite	signature:(const ccColor3B& color3)
setColor	sprite_nodes/CCSprite.h	/^    virtual void setColor(const ccColor3B& color3);$/;"	p	class:CCSprite	access:public	signature:(const ccColor3B& color3)
setColorSpaceHolder	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::setColorSpaceHolder(const ccColor3B& color)$/;"	f	class:CCTextFieldTTF	signature:(const ccColor3B& color)
setColorSpaceHolder	text_input_node/CCTextFieldTTF.h	/^    virtual void setColorSpaceHolder(const ccColor3B& color);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const ccColor3B& color)
setCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setCompressedInterpolation(bool compress)$/;"	f	class:CCLayerGradient	signature:(bool compress)
setCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setCompressedInterpolation(bool bCompressedInterpolation);$/;"	p	class:CCLayerGradient	access:public	signature:(bool bCompressedInterpolation)
setConcave	actions/CCActionGrid3D.h	/^    inline void setConcave(bool bConcave) { m_bConcave = bConcave; }$/;"	f	class:CCLens3D	access:public	signature:(bool bConcave)
setContentScaleFactor	CCDirector.cpp	/^void CCDirector::setContentScaleFactor(float scaleFactor)$/;"	f	class:CCDirector	signature:(float scaleFactor)
setContentScaleFactor	CCDirector.h	/^    void setContentScaleFactor(float scaleFactor);$/;"	p	class:CCDirector	access:public	signature:(float scaleFactor)
setContentSize	base_nodes/CCNode.cpp	/^void CCNode::setContentSize(const CCSize & size)$/;"	f	class:CCNode	signature:(const CCSize & size)
setContentSize	base_nodes/CCNode.h	/^    virtual void setContentSize(const CCSize& contentSize);$/;"	p	class:CCNode	access:public	signature:(const CCSize& contentSize)
setContentSize	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::setContentSize(const CCSize & size)$/;"	f	class:CCLayerColor	signature:(const CCSize & size)
setContentSize	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setContentSize(const CCSize & var);$/;"	p	class:CCLayerColor	access:public	signature:(const CCSize & var)
setControlPoints	actions/CCActionCatmullRom.cpp	/^void CCPointArray::setControlPoints(vector<CCPoint*> *controlPoints)$/;"	f	class:CCPointArray	signature:(vector<CCPoint*> *controlPoints)
setControlPoints	actions/CCActionCatmullRom.h	/^    void setControlPoints(std::vector<CCPoint*> *controlPoints);$/;"	p	class:CCPointArray	access:public	signature:(std::vector<CCPoint*> *controlPoints)
setCurrentString	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    inline void setCurrentString(const char *currentString){ m_sCurrentString = currentString; }$/;"	f	class:CCTMXMapInfo	access:public	signature:(const char *currentString)
setDefaultAlphaPixelFormat	textures/CCTexture2D.cpp	/^void CCTexture2D::setDefaultAlphaPixelFormat(CCTexture2DPixelFormat format)$/;"	f	class:CCTexture2D	signature:(CCTexture2DPixelFormat format)
setDefaultAlphaPixelFormat	textures/CCTexture2D.h	/^    static void setDefaultAlphaPixelFormat(CCTexture2DPixelFormat format);$/;"	p	class:CCTexture2D	access:public	signature:(CCTexture2DPixelFormat format)
setDelegate	CCDirector.cpp	/^void CCDirector::setDelegate(CCDirectorDelegate* pDelegate)$/;"	f	class:CCDirector	signature:(CCDirectorDelegate* pDelegate)
setDelegate	CCDirector.h	/^    void setDelegate(CCDirectorDelegate* pDelegate);$/;"	p	class:CCDirector	access:public	signature:(CCDirectorDelegate* pDelegate)
setDelegate	keypad_dispatcher/CCKeypadDelegate.cpp	/^void CCKeypadHandler::setDelegate(CCKeypadDelegate *pDelegate)$/;"	f	class:CCKeypadHandler	signature:(CCKeypadDelegate *pDelegate)
setDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^    void setDelegate(CCKeypadDelegate *pDelegate);$/;"	p	class:CCKeypadHandler	access:public	signature:(CCKeypadDelegate *pDelegate)
setDelegate	touch_dispatcher/CCTouchHandler.cpp	/^void CCTouchHandler::setDelegate(CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchHandler	signature:(CCTouchDelegate *pDelegate)
setDelegate	touch_dispatcher/CCTouchHandler.h	/^    void setDelegate(CCTouchDelegate *pDelegate);$/;"	p	class:CCTouchHandler	access:public	signature:(CCTouchDelegate *pDelegate)
setDelegator	platform/CCSAXParser.cpp	/^void CCSAXParser::setDelegator(CCSAXDelegator* pDelegator)$/;"	f	class:CCSAXParser	signature:(CCSAXDelegator* pDelegator)
setDelegator	platform/CCSAXParser.h	/^    void setDelegator(CCSAXDelegator* pDelegator);$/;"	p	class:CCSAXParser	access:public	signature:(CCSAXDelegator* pDelegator)
setDepthTest	CCDirector.cpp	/^void CCDirector::setDepthTest(bool bOn)$/;"	f	class:CCDirector	signature:(bool bOn)
setDepthTest	CCDirector.h	/^    void setDepthTest(bool bOn);$/;"	p	class:CCDirector	access:public	signature:(bool bOn)
setDesignResolutionSize	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy)$/;"	f	class:CCEGLViewProtocol	signature:(float width, float height, ResolutionPolicy resolutionPolicy)
setDesignResolutionSize	platform/CCEGLViewProtocol.h	/^    virtual void setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(float width, float height, ResolutionPolicy resolutionPolicy)
setDimensions	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setDimensions(const CCSize &dim)$/;"	f	class:CCLabelTTF	signature:(const CCSize &dim)
setDimensions	label_nodes/CCLabelTTF.h	/^    void setDimensions(const CCSize &dim);$/;"	p	class:CCLabelTTF	access:public	signature:(const CCSize &dim)
setDirty	CCCamera.h	/^    inline void setDirty(bool bValue) { m_bDirty = bValue; }$/;"	f	class:CCCamera	access:public	signature:(bool bValue)
setDirty	sprite_nodes/CCSprite.h	/^    inline virtual void setDirty(bool bDirty) { m_bDirty = bDirty; }$/;"	f	class:CCSprite	access:public	signature:(bool bDirty)
setDirtyRecursively	sprite_nodes/CCSprite.cpp	/^void CCSprite::setDirtyRecursively(bool bValue)$/;"	f	class:CCSprite	signature:(bool bValue)
setDirtyRecursively	sprite_nodes/CCSprite.h	/^    virtual void setDirtyRecursively(bool bValue);$/;"	p	class:CCSprite	access:protected	signature:(bool bValue)
setDisabledColor	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setDisabledColor(const ccColor3B& var)$/;"	f	class:CCMenuItemLabel	signature:(const ccColor3B& var)
setDisabledImage	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setDisabledImage(CCNode* pImage)$/;"	f	class:CCMenuItemSprite	signature:(CCNode* pImage)
setDisabledSpriteFrame	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemImage::setDisabledSpriteFrame(CCSpriteFrame * frame)$/;"	f	class:CCMenuItemImage	signature:(CCSpriteFrame * frame)
setDisabledSpriteFrame	menu_nodes/CCMenuItem.h	/^    void setDisabledSpriteFrame(CCSpriteFrame* frame);$/;"	p	class:CCMenuItemImage	access:public	signature:(CCSpriteFrame* frame)
setDispatchEvents	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::setDispatchEvents(bool bDispatchEvents)$/;"	f	class:CCTouchDispatcher	signature:(bool bDispatchEvents)
setDispatchEvents	touch_dispatcher/CCTouchDispatcher.h	/^    void setDispatchEvents(bool bDispatchEvents);$/;"	p	class:CCTouchDispatcher	access:public	signature:(bool bDispatchEvents)
setDisplayFrame	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setDisplayFrame(CCSpriteFrame *spriteFrame)$/;"	f	class:CCParticleSystemQuad	signature:(CCSpriteFrame *spriteFrame)
setDisplayFrame	particle_nodes/CCParticleSystemQuad.h	/^    void setDisplayFrame(CCSpriteFrame *spriteFrame);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(CCSpriteFrame *spriteFrame)
setDisplayFrame	sprite_nodes/CCSprite.cpp	/^void CCSprite::setDisplayFrame(CCSpriteFrame *pNewFrame)$/;"	f	class:CCSprite	signature:(CCSpriteFrame *pNewFrame)
setDisplayFrame	sprite_nodes/CCSprite.h	/^    virtual void setDisplayFrame(CCSpriteFrame *pNewFrame);$/;"	p	class:CCSprite	access:public	signature:(CCSpriteFrame *pNewFrame)
setDisplayFrameWithAnimationName	sprite_nodes/CCSprite.cpp	/^void CCSprite::setDisplayFrameWithAnimationName(const char *animationName, int frameIndex)$/;"	f	class:CCSprite	signature:(const char *animationName, int frameIndex)
setDisplayFrameWithAnimationName	sprite_nodes/CCSprite.h	/^    virtual void setDisplayFrameWithAnimationName(const char *animationName, int frameIndex);$/;"	p	class:CCSprite	access:public	signature:(const char *animationName, int frameIndex)
setDisplayStats	CCDirector.h	/^    inline void setDisplayStats(bool bDisplayStats) { m_bDisplayStats = bDisplayStats; }$/;"	f	class:CCDirector	access:public	signature:(bool bDisplayStats)
setDoubleForKey	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::setDoubleForKey(const char* pKey, double value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, double value)
setDoubleForKey	support/user_default/CCUserDefault.h	/^    void    setDoubleForKey(const char* pKey, double value);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, double value)
setDoubleForKey	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::setDoubleForKey(const char* pKey, double value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, double value)
setDuration	actions/CCAction.h	/^    inline void setDuration(float duration) { m_fDuration = duration; }$/;"	f	class:CCFiniteTimeAction	access:public	signature:(float duration)
setDuration	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setDuration(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setEmissionRate	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEmissionRate(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setEmitterMode	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEmitterMode(int var)$/;"	f	class:CCParticleSystem	signature:(int var)
setEnabled	menu_nodes/CCMenu.h	/^    virtual void setEnabled(bool value) { m_bEnabled = value; };$/;"	f	class:CCMenu	access:public	signature:(bool value)
setEnabled	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::setEnabled(bool enabled)$/;"	f	class:CCMenuItem	signature:(bool enabled)
setEnabled	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setEnabled(bool enabled)$/;"	f	class:CCMenuItemLabel	signature:(bool enabled)
setEnabled	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setEnabled(bool bEnabled)$/;"	f	class:CCMenuItemSprite	signature:(bool bEnabled)
setEnabled	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::setEnabled(bool enabled)$/;"	f	class:CCMenuItemToggle	signature:(bool enabled)
setEnabled	menu_nodes/CCMenuItem.h	/^    virtual void setEnabled(bool bEnabled);$/;"	p	class:CCMenuItemSprite	access:public	signature:(bool bEnabled)
setEnabled	menu_nodes/CCMenuItem.h	/^    virtual void setEnabled(bool enabled);$/;"	p	class:CCMenuItemLabel	access:public	signature:(bool enabled)
setEnabled	menu_nodes/CCMenuItem.h	/^    virtual void setEnabled(bool value);$/;"	p	class:CCMenuItem	access:public	signature:(bool value)
setEnabled	menu_nodes/CCMenuItem.h	/^    virtual void setEnabled(bool var);$/;"	p	class:CCMenuItemToggle	access:public	signature:(bool var)
setEnalbedSelectors	touch_dispatcher/CCTouchHandler.cpp	/^void CCTouchHandler::setEnalbedSelectors(int nValue)$/;"	f	class:CCTouchHandler	signature:(int nValue)
setEnalbedSelectors	touch_dispatcher/CCTouchHandler.h	/^    void setEnalbedSelectors(int nValue);$/;"	p	class:CCTouchHandler	access:public	signature:(int nValue)
setEndColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setEndColor(const ccColor3B& color)$/;"	f	class:CCLayerGradient	signature:(const ccColor3B& color)
setEndColor	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndColor(const ccColor4F& var)$/;"	f	class:CCParticleSystem	signature:(const ccColor4F& var)
setEndColorVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndColorVar(const ccColor4F& var)$/;"	f	class:CCParticleSystem	signature:(const ccColor4F& var)
setEndOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setEndOpacity(GLubyte o)$/;"	f	class:CCLayerGradient	signature:(GLubyte o)
setEndRadius	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndRadius(float endRadius)$/;"	f	class:CCParticleSystem	signature:(float endRadius)
setEndRadius	particle_nodes/CCParticleSystem.h	/^    virtual void setEndRadius(float endRadius);$/;"	p	class:CCParticleSystem	access:public	signature:(float endRadius)
setEndRadiusVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndRadiusVar(float endRadiusVar)$/;"	f	class:CCParticleSystem	signature:(float endRadiusVar)
setEndRadiusVar	particle_nodes/CCParticleSystem.h	/^    virtual void setEndRadiusVar(float endRadiusVar);$/;"	p	class:CCParticleSystem	access:public	signature:(float endRadiusVar)
setEndSize	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndSize(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setEndSizeVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndSizeVar(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setEndSpin	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndSpin(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setEndSpinVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndSpinVar(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setEyeXYZ	CCCamera.cpp	/^void CCCamera::setEyeXYZ(float fEyeX, float fEyeY, float fEyeZ)$/;"	f	class:CCCamera	signature:(float fEyeX, float fEyeY, float fEyeZ)
setEyeXYZ	CCCamera.h	/^    void setEyeXYZ(float fEyeX, float fEyeY, float fEyeZ);$/;"	p	class:CCCamera	access:public	signature:(float fEyeX, float fEyeY, float fEyeZ)
setFastMode	misc_nodes/CCMotionStreak.h	/^    inline void setFastMode(bool bFastMode) { m_bFastMode = bFastMode; }$/;"	f	class:CCMotionStreak	access:public	signature:(bool bFastMode)
setFilenameLookupDictionary	platform/CCFileUtils.cpp	/^void CCFileUtils::setFilenameLookupDictionary(CCDictionary* pFilenameLookupDict)$/;"	f	class:CCFileUtils	signature:(CCDictionary* pFilenameLookupDict)
setFilenameLookupDictionary	platform/CCFileUtils.h	/^    virtual void setFilenameLookupDictionary(CCDictionary* pFilenameLookupDict);$/;"	p	class:CCFileUtils	access:public	signature:(CCDictionary* pFilenameLookupDict)
setFilter	support/zip_support/ZipUtils.cpp	/^bool ZipFile::setFilter(const std::string &filter)$/;"	f	class:ZipFile	signature:(const std::string &filter)
setFilter	support/zip_support/ZipUtils.h	/^        bool setFilter(const std::string &filter);$/;"	p	class:cocos2d::ZipFile	access:public	signature:(const std::string &filter)
setFlipX	sprite_nodes/CCSprite.cpp	/^void CCSprite::setFlipX(bool bFlipX)$/;"	f	class:CCSprite	signature:(bool bFlipX)
setFlipX	sprite_nodes/CCSprite.h	/^    void setFlipX(bool bFlipX);$/;"	p	class:CCSprite	access:public	signature:(bool bFlipX)
setFlipY	sprite_nodes/CCSprite.cpp	/^void CCSprite::setFlipY(bool bFlipY)$/;"	f	class:CCSprite	signature:(bool bFlipY)
setFlipY	sprite_nodes/CCSprite.h	/^    void setFlipY(bool bFlipY);$/;"	p	class:CCSprite	access:public	signature:(bool bFlipY)
setFloatForKey	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::setFloatForKey(const char* pKey, float value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, float value)
setFloatForKey	support/user_default/CCUserDefault.h	/^    void    setFloatForKey(const char* pKey, float value);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, float value)
setFloatForKey	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::setFloatForKey(const char* pKey, float value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, float value)
setFntFile	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setFntFile(const char* fntFile)$/;"	f	class:CCLabelBMFont	signature:(const char* fntFile)
setFntFile	label_nodes/CCLabelBMFont.h	/^    void setFntFile(const char* fntFile);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char* fntFile)
setFontName	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setFontName(const char *fontName)$/;"	f	class:CCLabelTTF	signature:(const char *fontName)
setFontName	label_nodes/CCLabelTTF.h	/^    void setFontName(const char *fontName);$/;"	p	class:CCLabelTTF	access:public	signature:(const char *fontName)
setFontName	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::setFontName(const char *name)$/;"	f	class:CCMenuItemFont	signature:(const char *name)
setFontName	menu_nodes/CCMenuItem.h	/^    static void setFontName(const char *name);$/;"	p	class:CCMenuItemFont	access:public	signature:(const char *name)
setFontNameObj	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::setFontNameObj(const char* name)$/;"	f	class:CCMenuItemFont	signature:(const char* name)
setFontNameObj	menu_nodes/CCMenuItem.h	/^    void setFontNameObj(const char* name);$/;"	p	class:CCMenuItemFont	access:public	signature:(const char* name)
setFontSize	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setFontSize(float fontSize)$/;"	f	class:CCLabelTTF	signature:(float fontSize)
setFontSize	label_nodes/CCLabelTTF.h	/^    void setFontSize(float fontSize);$/;"	p	class:CCLabelTTF	access:public	signature:(float fontSize)
setFontSize	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::setFontSize(unsigned int s)$/;"	f	class:CCMenuItemFont	signature:(unsigned int s)
setFontSize	menu_nodes/CCMenuItem.h	/^    static void setFontSize(unsigned int s);$/;"	p	class:CCMenuItemFont	access:public	signature:(unsigned int s)
setFontSizeObj	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::setFontSizeObj(unsigned int s)$/;"	f	class:CCMenuItemFont	signature:(unsigned int s)
setFontSizeObj	menu_nodes/CCMenuItem.h	/^    void setFontSizeObj(unsigned int s);$/;"	p	class:CCMenuItemFont	access:public	signature:(unsigned int s)
setFrameSize	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setFrameSize(float width, float height)$/;"	f	class:CCEGLViewProtocol	signature:(float width, float height)
setFrameSize	platform/CCEGLViewProtocol.h	/^    virtual void setFrameSize(float width, float height);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(float width, float height)
setGLDefaultValues	CCDirector.cpp	/^void CCDirector::setGLDefaultValues(void)$/;"	f	class:CCDirector	signature:(void)
setGLDefaultValues	CCDirector.h	/^    void setGLDefaultValues(void);$/;"	p	class:CCDirector	access:public	signature:(void)
setGLServerState	base_nodes/CCNode.cpp	/^void CCNode::setGLServerState(ccGLServerState glServerState)$/;"	f	class:CCNode	signature:(ccGLServerState glServerState)
setGLServerState	base_nodes/CCNode.h	/^    virtual void setGLServerState(ccGLServerState glServerState);$/;"	p	class:CCNode	access:public	signature:(ccGLServerState glServerState)
setGravity	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setGravity(const CCPoint& g)$/;"	f	class:CCParticleSystem	signature:(const CCPoint& g)
setGravity	particle_nodes/CCParticleSystem.h	/^    virtual void setGravity(const CCPoint& g);$/;"	p	class:CCParticleSystem	access:public	signature:(const CCPoint& g)
setGrid	base_nodes/CCNode.cpp	/^void CCNode::setGrid(CCGridBase* pGrid)$/;"	f	class:CCNode	signature:(CCGridBase* pGrid)
setGrid	base_nodes/CCNode.h	/^    virtual void setGrid(CCGridBase *pGrid);$/;"	p	class:CCNode	access:public	signature:(CCGridBase *pGrid)
setGridSize	effects/CCGrid.h	/^    inline void setGridSize(const CCSize& gridSize) { m_sGridSize = gridSize; }$/;"	f	class:CCGridBase	access:public	signature:(const CCSize& gridSize)
setGroupName	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    inline void setGroupName(const char *groupName){ m_sGroupName = groupName; }$/;"	f	class:CCTMXObjectGroup	access:public	signature:(const char *groupName)
setHandlerPriority	menu_nodes/CCMenu.cpp	/^void CCMenu::setHandlerPriority(int newPriority)$/;"	f	class:CCMenu	signature:(int newPriority)
setHandlerPriority	menu_nodes/CCMenu.h	/^    void setHandlerPriority(int newPriority);$/;"	p	class:CCMenu	access:public	signature:(int newPriority)
setHorizontalAlignment	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setHorizontalAlignment(CCTextAlignment alignment)$/;"	f	class:CCLabelTTF	signature:(CCTextAlignment alignment)
setHorizontalAlignment	label_nodes/CCLabelTTF.h	/^    void setHorizontalAlignment(CCTextAlignment alignment);$/;"	p	class:CCLabelTTF	access:public	signature:(CCTextAlignment alignment)
setIMEKeyboardState	platform/CCEGLViewProtocol.h	/^    virtual void    setIMEKeyboardState(bool bOpen) = 0;$/;"	p	class:CCEGLViewProtocol	access:public	signature:(bool bOpen)
setInnerAction	actions/CCAction.cpp	/^void CCSpeed::setInnerAction(CCActionInterval *pAction)$/;"	f	class:CCSpeed	signature:(CCActionInterval *pAction)
setInnerAction	actions/CCAction.h	/^    void setInnerAction(CCActionInterval *pAction);$/;"	p	class:CCSpeed	access:public	signature:(CCActionInterval *pAction)
setInnerAction	actions/CCActionInterval.h	/^    inline void setInnerAction(CCActionInterval *pAction)$/;"	f	class:CCRepeatForever	access:public	signature:(CCActionInterval *pAction)
setInnerAction	actions/CCActionInterval.h	/^    inline void setInnerAction(CCFiniteTimeAction *pAction)$/;"	f	class:CCRepeat	access:public	signature:(CCFiniteTimeAction *pAction)
setIntegerForKey	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::setIntegerForKey(const char* pKey, int value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, int value)
setIntegerForKey	support/user_default/CCUserDefault.h	/^    void    setIntegerForKey(const char* pKey, int value);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, int value)
setIntegerForKey	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::setIntegerForKey(const char* pKey, int value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, int value)
setInterval	CCScheduler.cpp	/^void CCTimer::setInterval(float fInterval)$/;"	f	class:CCTimer	signature:(float fInterval)
setInterval	CCScheduler.h	/^    void setInterval(float fInterval);$/;"	p	class:CCTimer	access:public	signature:(float fInterval)
setInverted	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::setInverted(bool bInverted)$/;"	f	class:CCClippingNode	signature:(bool bInverted)
setInverted	misc_nodes/CCClippingNode.h	/^    void setInverted(bool bInverted);$/;"	p	class:CCClippingNode	access:public	signature:(bool bInverted)
setKeypadDispatcher	CCDirector.cpp	/^void CCDirector::setKeypadDispatcher(CCKeypadDispatcher* pKeypadDispatcher)$/;"	f	class:CCDirector	signature:(CCKeypadDispatcher* pKeypadDispatcher)
setKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setKeypadEnabled(bool enabled)$/;"	f	class:CCLayer	signature:(bool enabled)
setKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setKeypadEnabled(bool value);$/;"	p	class:CCLayer	access:public	signature:(bool value)
setLabel	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setLabel(CCNode* var)$/;"	f	class:CCMenuItemLabel	signature:(CCNode* var)
setLayerName	tilemap_parallax_nodes/CCTMXLayer.h	/^    inline void setLayerName(const char *layerName){ m_sLayerName = layerName; }$/;"	f	class:CCTMXLayer	access:public	signature:(const char *layerName)
setLayers	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setLayers(CCArray* var)$/;"	f	class:CCTMXMapInfo	signature:(CCArray* var)
setLensEffect	actions/CCActionGrid3D.h	/^    inline void setLensEffect(float fLensEffect) { m_fLensEffect = fLensEffect; }$/;"	f	class:CCLens3D	access:public	signature:(float fLensEffect)
setLife	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setLife(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setLifeVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setLifeVar(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setLineBreakWithoutSpace	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setLineBreakWithoutSpace( bool breakWithoutSpace )$/;"	f	class:CCLabelBMFont	signature:( bool breakWithoutSpace )
setLineBreakWithoutSpace	label_nodes/CCLabelBMFont.h	/^    virtual void setLineBreakWithoutSpace(bool breakWithoutSpace);$/;"	p	class:CCLabelBMFont	access:public	signature:(bool breakWithoutSpace)
setMaxS	textures/CCTexture2D.cpp	/^void CCTexture2D::setMaxS(GLfloat maxS)$/;"	f	class:CCTexture2D	signature:(GLfloat maxS)
setMaxT	textures/CCTexture2D.cpp	/^void CCTexture2D::setMaxT(GLfloat maxT)$/;"	f	class:CCTexture2D	signature:(GLfloat maxT)
setMidpoint	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setMidpoint(CCPoint midPoint)$/;"	f	class:CCProgressTimer	signature:(CCPoint midPoint)
setNewScene	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::setNewScene(float dt)$/;"	f	class:CCTransitionScene	signature:(float dt)
setNewScene	layers_scenes_transitions_nodes/CCTransition.h	/^    void setNewScene(float dt);$/;"	p	class:CCTransitionScene	access:private	signature:(float dt)
setNextDeltaTimeZero	CCDirector.cpp	/^void CCDirector::setNextDeltaTimeZero(bool bNextDeltaTimeZero)$/;"	f	class:CCDirector	signature:(bool bNextDeltaTimeZero)
setNextDeltaTimeZero	CCDirector.h	/^    void setNextDeltaTimeZero(bool bNextDeltaTimeZero);$/;"	p	class:CCDirector	access:public	signature:(bool bNextDeltaTimeZero)
setNextScene	CCDirector.cpp	/^void CCDirector::setNextScene(void)$/;"	f	class:CCDirector	signature:(void)
setNextScene	CCDirector.h	/^    void setNextScene(void);$/;"	p	class:CCDirector	access:protected	signature:(void)
setNormalImage	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setNormalImage(CCNode* pImage)$/;"	f	class:CCMenuItemSprite	signature:(CCNode* pImage)
setNormalSpriteFrame	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemImage::setNormalSpriteFrame(CCSpriteFrame * frame)$/;"	f	class:CCMenuItemImage	signature:(CCSpriteFrame * frame)
setNormalSpriteFrame	menu_nodes/CCMenuItem.h	/^    void setNormalSpriteFrame(CCSpriteFrame* frame);$/;"	p	class:CCMenuItemImage	access:public	signature:(CCSpriteFrame* frame)
setNotificationNode	CCDirector.cpp	/^void CCDirector::setNotificationNode(CCNode *node)$/;"	f	class:CCDirector	signature:(CCNode *node)
setNotificationNode	CCDirector.h	/^    void setNotificationNode(CCNode *node);$/;"	p	class:CCDirector	access:public	signature:(CCNode *node)
setObject	actions/CCActionInstant.h	/^    inline void setObject(CCObject* pObj)$/;"	f	class:CCCallFuncO	access:public	signature:(CCObject* pObj)
setObject	cocoa/CCDictionary.cpp	/^void CCDictionary::setObject(CCObject* pObject, const std::string& key)$/;"	f	class:CCDictionary	signature:(CCObject* pObject, const std::string& key)
setObject	cocoa/CCDictionary.cpp	/^void CCDictionary::setObject(CCObject* pObject, int key)$/;"	f	class:CCDictionary	signature:(CCObject* pObject, int key)
setObject	cocoa/CCDictionary.h	/^    void setObject(CCObject* pObject, const std::string& key);$/;"	p	class:CCDictionary	access:public	signature:(CCObject* pObject, const std::string& key)
setObject	cocoa/CCDictionary.h	/^    void setObject(CCObject* pObject, int key);$/;"	p	class:CCDictionary	access:public	signature:(CCObject* pObject, int key)
setObjectGroups	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^void CCTMXTiledMap::setObjectGroups(CCArray* var)$/;"	f	class:CCTMXTiledMap	signature:(CCArray* var)
setObjectGroups	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setObjectGroups(CCArray* var)$/;"	f	class:CCTMXMapInfo	signature:(CCArray* var)
setObjectUnSafe	cocoa/CCDictionary.cpp	/^void CCDictionary::setObjectUnSafe(CCObject* pObject, const int key)$/;"	f	class:CCDictionary	signature:(CCObject* pObject, const int key)
setObjectUnSafe	cocoa/CCDictionary.cpp	/^void CCDictionary::setObjectUnSafe(CCObject* pObject, const std::string& key)$/;"	f	class:CCDictionary	signature:(CCObject* pObject, const std::string& key)
setObjectUnSafe	cocoa/CCDictionary.h	/^    void setObjectUnSafe(CCObject* pObject, const int key);$/;"	p	class:CCDictionary	access:private	signature:(CCObject* pObject, const int key)
setObjectUnSafe	cocoa/CCDictionary.h	/^    void setObjectUnSafe(CCObject* pObject, const std::string& key);$/;"	p	class:CCDictionary	access:private	signature:(CCObject* pObject, const std::string& key)
setObjects	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^void CCTMXObjectGroup::setObjects(CCArray* objects)$/;"	f	class:CCTMXObjectGroup	signature:(CCArray* objects)
setOffset	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setOffset(const CCPoint& offsets)$/;"	f	class:CCSpriteFrame	signature:(const CCPoint& offsets)
setOffset	sprite_nodes/CCSpriteFrame.h	/^    void setOffset(const CCPoint& offsets);$/;"	p	class:CCSpriteFrame	access:public	signature:(const CCPoint& offsets)
setOffsetInPixels	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setOffsetInPixels(const CCPoint& offsetInPixels)$/;"	f	class:CCSpriteFrame	signature:(const CCPoint& offsetInPixels)
setOffsetInPixels	sprite_nodes/CCSpriteFrame.h	/^    void setOffsetInPixels(const CCPoint& offsetInPixels);$/;"	p	class:CCSpriteFrame	access:public	signature:(const CCPoint& offsetInPixels)
setOpacity	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setOpacity(GLubyte opacity)$/;"	f	class:CCAtlasNode	signature:(GLubyte opacity)
setOpacity	base_nodes/CCAtlasNode.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCAtlasNode	access:public	signature:(GLubyte opacity)
setOpacity	base_nodes/CCNode.cpp	/^void CCNodeRGBA::setOpacity(GLubyte opacity)$/;"	f	class:CCNodeRGBA	signature:(GLubyte opacity)
setOpacity	base_nodes/CCNode.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCNodeRGBA	access:public	signature:(GLubyte opacity)
setOpacity	include/CCProtocols.h	/^    virtual void setOpacity(GLubyte opacity) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(GLubyte opacity)
setOpacity	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setOpacity(GLubyte opacity)$/;"	f	class:CCLabelBMFont	signature:(GLubyte opacity)
setOpacity	label_nodes/CCLabelBMFont.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCLabelBMFont	access:public	signature:(GLubyte opacity)
setOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::setOpacity(GLubyte opacity)$/;"	f	class:CCLayerColor	signature:(GLubyte opacity)
setOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerRGBA::setOpacity(GLubyte opacity)$/;"	f	class:CCLayerRGBA	signature:(GLubyte opacity)
setOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCLayerColor	access:public	signature:(GLubyte opacity)
setOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCLayerRGBA	access:public	signature:(GLubyte opacity)
setOpacity	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setOpacity(GLubyte opacity)$/;"	f	class:CCMotionStreak	signature:(GLubyte opacity)
setOpacity	misc_nodes/CCMotionStreak.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCMotionStreak	access:public	signature:(GLubyte opacity)
setOpacity	sprite_nodes/CCSprite.cpp	/^void CCSprite::setOpacity(GLubyte opacity)$/;"	f	class:CCSprite	signature:(GLubyte opacity)
setOpacity	sprite_nodes/CCSprite.h	/^    virtual void setOpacity(GLubyte opacity);$/;"	p	class:CCSprite	access:public	signature:(GLubyte opacity)
setOpacityModifyRGB	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setOpacityModifyRGB(bool bValue)$/;"	f	class:CCAtlasNode	signature:(bool bValue)
setOpacityModifyRGB	base_nodes/CCAtlasNode.h	/^    virtual void setOpacityModifyRGB(bool isOpacityModifyRGB);$/;"	p	class:CCAtlasNode	access:public	signature:(bool isOpacityModifyRGB)
setOpacityModifyRGB	base_nodes/CCNode.h	/^    virtual void setOpacityModifyRGB(bool bValue) {};$/;"	f	class:CCNodeRGBA	access:public	signature:(bool bValue)
setOpacityModifyRGB	include/CCProtocols.h	/^    virtual void setOpacityModifyRGB(bool bValue) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(bool bValue)
setOpacityModifyRGB	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setOpacityModifyRGB(bool var)$/;"	f	class:CCLabelBMFont	signature:(bool var)
setOpacityModifyRGB	label_nodes/CCLabelBMFont.h	/^    virtual void setOpacityModifyRGB(bool isOpacityModifyRGB); virtual GLubyte getOpacity();$/;"	p	class:CCLabelBMFont	access:public	signature:(bool isOpacityModifyRGB)
setOpacityModifyRGB	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCLayerColor	access:public	signature:(bool bValue)
setOpacityModifyRGB	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setOpacityModifyRGB(bool bValue) {}$/;"	f	class:CCLayerRGBA	access:public	signature:(bool bValue)
setOpacityModifyRGB	menu_nodes/CCMenu.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCMenu	access:public	signature:(bool bValue)
setOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCMenuItem	access:public	signature:(bool bValue)
setOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCMenuItemSprite	access:public	signature:(bool bValue)
setOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCMenuItemToggle	access:public	signature:(bool bValue)
setOpacityModifyRGB	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setOpacityModifyRGB(bool bValue)$/;"	f	class:CCMotionStreak	signature:(bool bValue)
setOpacityModifyRGB	misc_nodes/CCMotionStreak.h	/^    virtual void setOpacityModifyRGB(bool bValue);$/;"	p	class:CCMotionStreak	access:public	signature:(bool bValue)
setOpacityModifyRGB	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setOpacityModifyRGB(bool bValue)$/;"	f	class:CCProgressTimer	signature:(bool bValue)
setOpacityModifyRGB	misc_nodes/CCProgressTimer.h	/^    virtual void setOpacityModifyRGB(bool bValue);$/;"	p	class:CCProgressTimer	access:public	signature:(bool bValue)
setOpacityModifyRGB	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setOpacityModifyRGB(bool bOpacityModifyRGB)$/;"	f	class:CCParticleSystem	signature:(bool bOpacityModifyRGB)
setOpacityModifyRGB	sprite_nodes/CCSprite.cpp	/^void CCSprite::setOpacityModifyRGB(bool modify)$/;"	f	class:CCSprite	signature:(bool modify)
setOpacityModifyRGB	sprite_nodes/CCSprite.h	/^    virtual void setOpacityModifyRGB(bool modify);$/;"	p	class:CCSprite	access:public	signature:(bool modify)
setOpenGLView	CCDirector.cpp	/^void CCDirector::setOpenGLView(CCEGLView *pobOpenGLView)$/;"	f	class:CCDirector	signature:(CCEGLView *pobOpenGLView)
setOpenGLView	CCDirector.h	/^    void setOpenGLView(CCEGLView *pobOpenGLView);$/;"	p	class:CCDirector	access:public	signature:(CCEGLView *pobOpenGLView)
setOrderOfArrival	base_nodes/CCNode.cpp	/^void CCNode::setOrderOfArrival(unsigned int uOrderOfArrival)$/;"	f	class:CCNode	signature:(unsigned int uOrderOfArrival)
setOrderOfArrival	base_nodes/CCNode.h	/^    virtual void setOrderOfArrival(unsigned int uOrderOfArrival);$/;"	p	class:CCNode	access:public	signature:(unsigned int uOrderOfArrival)
setOriginalSize	sprite_nodes/CCSpriteFrame.h	/^    inline void setOriginalSize(const CCSize& sizeInPixels) { m_obOriginalSize = sizeInPixels; }$/;"	f	class:CCSpriteFrame	access:public	signature:(const CCSize& sizeInPixels)
setOriginalSizeInPixels	sprite_nodes/CCSpriteFrame.h	/^    inline void setOriginalSizeInPixels(const CCSize& sizeInPixels) { m_obOriginalSizeInPixels = sizeInPixels; }$/;"	f	class:CCSpriteFrame	access:public	signature:(const CCSize& sizeInPixels)
setOriginalTarget	actions/CCAction.h	/^    inline void setOriginalTarget(CCNode *pOriginalTarget) { m_pOriginalTarget = pOriginalTarget; }$/;"	f	class:CCAction	access:public	signature:(CCNode *pOriginalTarget)
setParent	base_nodes/CCNode.cpp	/^void CCNode::setParent(CCNode * var)$/;"	f	class:CCNode	signature:(CCNode * var)
setParent	base_nodes/CCNode.h	/^    virtual void setParent(CCNode* parent);$/;"	p	class:CCNode	access:public	signature:(CCNode* parent)
setPercentage	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setPercentage(float fPercentage)$/;"	f	class:CCProgressTimer	signature:(float fPercentage)
setPercentage	misc_nodes/CCProgressTimer.h	/^    void setPercentage(float fPercentage);$/;"	p	class:CCProgressTimer	access:public	signature:(float fPercentage)
setPeriod	actions/CCActionEase.h	/^    inline void setPeriod(float fPeriod) { m_fPeriod = fPeriod; }$/;"	f	class:CCEaseElastic	access:public	signature:(float fPeriod)
setPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::setPlaceHolder(const char * text)$/;"	f	class:CCTextFieldTTF	signature:(const char * text)
setPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    virtual void setPlaceHolder(const char * text);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const char * text)
setPoint	cocoa/CCGeometry.cpp	/^void CCPoint::setPoint(float x, float y)$/;"	f	class:CCPoint	signature:(float x, float y)
setPoint	cocoa/CCGeometry.h	/^    void setPoint(float x, float y);$/;"	p	class:CCPoint	access:public	signature:(float x, float y)
setPoints	actions/CCActionCatmullRom.h	/^    inline void  setPoints(CCPointArray* points) $/;"	f	class:CCCardinalSplineTo	access:public	signature:(CCPointArray* points)
setPopupNotify	platform/CCFileUtils.cpp	/^void CCFileUtils::setPopupNotify(bool bNotify)$/;"	f	class:CCFileUtils	signature:(bool bNotify)
setPopupNotify	platform/CCFileUtils.h	/^    virtual void setPopupNotify(bool bNotify);$/;"	p	class:CCFileUtils	access:public	signature:(bool bNotify)
setPosVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setPosVar(const CCPoint& var)$/;"	f	class:CCParticleSystem	signature:(const CCPoint& var)
setPosition	actions/CCActionGrid3D.cpp	/^void CCLens3D::setPosition(const CCPoint& pos)$/;"	f	class:CCLens3D	signature:(const CCPoint& pos)
setPosition	actions/CCActionGrid3D.cpp	/^void CCRipple3D::setPosition(const CCPoint& position)$/;"	f	class:CCRipple3D	signature:(const CCPoint& position)
setPosition	actions/CCActionGrid3D.cpp	/^void CCTwirl::setPosition(const CCPoint& position)$/;"	f	class:CCTwirl	signature:(const CCPoint& position)
setPosition	actions/CCActionGrid3D.h	/^    void setPosition(const CCPoint& position);$/;"	p	class:CCLens3D	access:public	signature:(const CCPoint& position)
setPosition	actions/CCActionGrid3D.h	/^    void setPosition(const CCPoint& position);$/;"	p	class:CCRipple3D	access:public	signature:(const CCPoint& position)
setPosition	actions/CCActionGrid3D.h	/^    void setPosition(const CCPoint& position);$/;"	p	class:CCTwirl	access:public	signature:(const CCPoint& position)
setPosition	base_nodes/CCNode.cpp	/^void CCNode::setPosition(const CCPoint& newPosition)$/;"	f	class:CCNode	signature:(const CCPoint& newPosition)
setPosition	base_nodes/CCNode.cpp	/^void CCNode::setPosition(float x, float y)$/;"	f	class:CCNode	signature:(float x, float y)
setPosition	base_nodes/CCNode.h	/^    virtual void setPosition(const CCPoint &position);$/;"	p	class:CCNode	access:public	signature:(const CCPoint &position)
setPosition	base_nodes/CCNode.h	/^    void setPosition(float x, float y);$/;"	p	class:CCNode	access:public	signature:(float x, float y)
setPosition	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setPosition(const CCPoint& position)$/;"	f	class:CCMotionStreak	signature:(const CCPoint& position)
setPosition	misc_nodes/CCMotionStreak.h	/^    virtual void setPosition(const CCPoint& position);$/;"	p	class:CCMotionStreak	access:public	signature:(const CCPoint& position)
setPosition	sprite_nodes/CCSprite.cpp	/^void CCSprite::setPosition(const CCPoint& pos)$/;"	f	class:CCSprite	signature:(const CCPoint& pos)
setPosition	sprite_nodes/CCSprite.h	/^    virtual void setPosition(const CCPoint& pos);$/;"	p	class:CCSprite	access:public	signature:(const CCPoint& pos)
setPositionType	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setPositionType(tCCPositionType var)$/;"	f	class:CCParticleSystem	signature:(tCCPositionType var)
setPositionX	base_nodes/CCNode.cpp	/^void CCNode::setPositionX(float x)$/;"	f	class:CCNode	signature:(float x)
setPositionX	base_nodes/CCNode.h	/^    void  setPositionX(float x);$/;"	p	class:CCNode	access:public	signature:(float x)
setPositionY	base_nodes/CCNode.cpp	/^void CCNode::setPositionY(float y)$/;"	f	class:CCNode	signature:(float y)
setPositionY	base_nodes/CCNode.h	/^    void  setPositionY(float y);$/;"	p	class:CCNode	access:public	signature:(float y)
setPriority	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::setPriority(int nPriority, CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher	signature:(int nPriority, CCTouchDelegate *pDelegate)
setPriority	touch_dispatcher/CCTouchDispatcher.h	/^    void setPriority(int nPriority, CCTouchDelegate *pDelegate);$/;"	p	class:CCTouchDispatcher	access:public	signature:(int nPriority, CCTouchDelegate *pDelegate)
setPriority	touch_dispatcher/CCTouchHandler.cpp	/^void CCTouchHandler::setPriority(int nPriority)$/;"	f	class:CCTouchHandler	signature:(int nPriority)
setPriority	touch_dispatcher/CCTouchHandler.h	/^    void setPriority(int nPriority);$/;"	p	class:CCTouchHandler	access:public	signature:(int nPriority)
setProgram	misc_nodes/CCClippingNode.cpp	/^static void setProgram(CCNode *n, CCGLProgram *p)$/;"	f	file:	signature:(CCNode *n, CCGLProgram *p)
setProjection	CCDirector.cpp	/^void CCDirector::setProjection(ccDirectorProjection kProjection)$/;"	f	class:CCDirector	signature:(ccDirectorProjection kProjection)
setProjection	CCDirector.h	/^    void setProjection(ccDirectorProjection kProjection);$/;"	p	class:CCDirector	access:public	signature:(ccDirectorProjection kProjection)
setProperties	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setProperties(CCDictionary* var)$/;"	f	class:CCTMXLayer	signature:(CCDictionary* var)
setProperties	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^void CCTMXObjectGroup::setProperties(CCDictionary * properties)$/;"	f	class:CCTMXObjectGroup	signature:(CCDictionary * properties)
setProperties	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^void CCTMXTiledMap::setProperties(CCDictionary* var)$/;"	f	class:CCTMXTiledMap	signature:(CCDictionary* var)
setProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXLayerInfo::setProperties(CCDictionary* var)$/;"	f	class:CCTMXLayerInfo	signature:(CCDictionary* var)
setProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setProperties(CCDictionary* var)$/;"	f	class:CCTMXMapInfo	signature:(CCDictionary* var)
setQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setQuads(ccV3F_C4B_T2F_Quad *var)$/;"	f	class:CCTextureAtlas	signature:(ccV3F_C4B_T2F_Quad *var)
setQuadsToDraw	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setQuadsToDraw(unsigned int uQuadsToDraw)$/;"	f	class:CCAtlasNode	signature:(unsigned int uQuadsToDraw)
setRadialAccel	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRadialAccel(float t)$/;"	f	class:CCParticleSystem	signature:(float t)
setRadialAccel	particle_nodes/CCParticleSystem.h	/^    virtual void setRadialAccel(float t);$/;"	p	class:CCParticleSystem	access:public	signature:(float t)
setRadialAccelVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRadialAccelVar(float t)$/;"	f	class:CCParticleSystem	signature:(float t)
setRadialAccelVar	particle_nodes/CCParticleSystem.h	/^    virtual void setRadialAccelVar(float t);$/;"	p	class:CCParticleSystem	access:public	signature:(float t)
setRate	actions/CCActionEase.h	/^    inline void setRate(float rate) { m_fRate = rate; }$/;"	f	class:CCEaseRateAction	access:public	signature:(float rate)
setRate	actions/CCActionGrid.h	/^    inline void setRate(float fRate) { m_fRate = fRate; }$/;"	f	class:CCAccelAmplitude	access:public	signature:(float fRate)
setRate	actions/CCActionGrid.h	/^    inline void setRate(float fRate) { m_fRate = fRate; }$/;"	f	class:CCAccelDeccelAmplitude	access:public	signature:(float fRate)
setRate	actions/CCActionGrid.h	/^    inline void setRate(float fRate) { m_fRate = fRate; }$/;"	f	class:CCDeccelAmplitude	access:public	signature:(float fRate)
setRect	cocoa/CCGeometry.cpp	/^void CCRect::setRect(float x, float y, float width, float height)$/;"	f	class:CCRect	signature:(float x, float y, float width, float height)
setRect	cocoa/CCGeometry.h	/^    void setRect(float x, float y, float width, float height);$/;"	p	class:CCRect	access:public	signature:(float x, float y, float width, float height)
setRect	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setRect(const CCRect& rect)$/;"	f	class:CCSpriteFrame	signature:(const CCRect& rect)
setRect	sprite_nodes/CCSpriteFrame.h	/^    void setRect(const CCRect& rect);$/;"	p	class:CCSpriteFrame	access:public	signature:(const CCRect& rect)
setRectInPixels	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setRectInPixels(const CCRect& rectInPixels)$/;"	f	class:CCSpriteFrame	signature:(const CCRect& rectInPixels)
setRectInPixels	sprite_nodes/CCSpriteFrame.h	/^    void setRectInPixels(const CCRect& rectInPixels);$/;"	p	class:CCSpriteFrame	access:public	signature:(const CCRect& rectInPixels)
setReorderChildDirtyRecursively	sprite_nodes/CCSprite.cpp	/^void CCSprite::setReorderChildDirtyRecursively(void)$/;"	f	class:CCSprite	signature:(void)
setReorderChildDirtyRecursively	sprite_nodes/CCSprite.h	/^    virtual void setReorderChildDirtyRecursively(void);$/;"	p	class:CCSprite	access:protected	signature:(void)
setRetainName	textures/CCTexturePVR.h	/^    inline void setRetainName(bool retainName) { m_bRetainName = retainName; }$/;"	f	class:CCTexturePVR	access:public	signature:(bool retainName)
setReuseGrid	effects/CCGrid.h	/^    inline void setReuseGrid(int nReuseGrid) { m_nReuseGrid = nReuseGrid; }$/;"	f	class:CCGridBase	access:public	signature:(int nReuseGrid)
setReverseDirection	misc_nodes/CCProgressTimer.h	/^    inline void setReverseDirection(bool value) { m_bReverseDirection = value; };$/;"	f	class:CCProgressTimer	access:public	signature:(bool value)
setReverseProgress	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setReverseProgress(bool reverse)$/;"	f	class:CCProgressTimer	signature:(bool reverse)
setReverseProgress	misc_nodes/CCProgressTimer.h	/^    void setReverseProgress(bool reverse);$/;"	p	class:CCProgressTimer	access:public	signature:(bool reverse)
setRotatePerSecond	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRotatePerSecond(float degrees)$/;"	f	class:CCParticleSystem	signature:(float degrees)
setRotatePerSecond	particle_nodes/CCParticleSystem.h	/^    virtual void setRotatePerSecond(float degrees);$/;"	p	class:CCParticleSystem	access:public	signature:(float degrees)
setRotatePerSecondVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRotatePerSecondVar(float degrees)$/;"	f	class:CCParticleSystem	signature:(float degrees)
setRotatePerSecondVar	particle_nodes/CCParticleSystem.h	/^    virtual void setRotatePerSecondVar(float degrees);$/;"	p	class:CCParticleSystem	access:public	signature:(float degrees)
setRotated	sprite_nodes/CCSpriteFrame.h	/^    inline void setRotated(bool bRotated) { m_bRotated = bRotated; }$/;"	f	class:CCSpriteFrame	access:public	signature:(bool bRotated)
setRotation	base_nodes/CCNode.cpp	/^void CCNode::setRotation(float newRotation)$/;"	f	class:CCNode	signature:(float newRotation)
setRotation	base_nodes/CCNode.h	/^    virtual void setRotation(float fRotation);$/;"	p	class:CCNode	access:public	signature:(float fRotation)
setRotation	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRotation(float newRotation)$/;"	f	class:CCParticleSystem	signature:(float newRotation)
setRotation	particle_nodes/CCParticleSystem.h	/^    virtual void setRotation(float newRotation);$/;"	p	class:CCParticleSystem	access:public	signature:(float newRotation)
setRotation	sprite_nodes/CCSprite.cpp	/^void CCSprite::setRotation(float fRotation)$/;"	f	class:CCSprite	signature:(float fRotation)
setRotation	sprite_nodes/CCSprite.h	/^    virtual void setRotation(float fRotation);$/;"	p	class:CCSprite	access:public	signature:(float fRotation)
setRotationIsDir	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRotationIsDir(bool t)$/;"	f	class:CCParticleSystem	signature:(bool t)
setRotationIsDir	particle_nodes/CCParticleSystem.h	/^    virtual void setRotationIsDir(bool t);$/;"	p	class:CCParticleSystem	access:public	signature:(bool t)
setRotationX	base_nodes/CCNode.cpp	/^void CCNode::setRotationX(float fRotationX)$/;"	f	class:CCNode	signature:(float fRotationX)
setRotationX	base_nodes/CCNode.h	/^    virtual void setRotationX(float fRotaionX);$/;"	p	class:CCNode	access:public	signature:(float fRotaionX)
setRotationX	sprite_nodes/CCSprite.cpp	/^void CCSprite::setRotationX(float fRotationX)$/;"	f	class:CCSprite	signature:(float fRotationX)
setRotationX	sprite_nodes/CCSprite.h	/^    virtual void setRotationX(float fRotationX);$/;"	p	class:CCSprite	access:public	signature:(float fRotationX)
setRotationY	base_nodes/CCNode.cpp	/^void CCNode::setRotationY(float fRotationY)$/;"	f	class:CCNode	signature:(float fRotationY)
setRotationY	base_nodes/CCNode.h	/^    virtual void setRotationY(float fRotationY);$/;"	p	class:CCNode	access:public	signature:(float fRotationY)
setRotationY	sprite_nodes/CCSprite.cpp	/^void CCSprite::setRotationY(float fRotationY)$/;"	f	class:CCSprite	signature:(float fRotationY)
setRotationY	sprite_nodes/CCSprite.h	/^    virtual void setRotationY(float fRotationY);$/;"	p	class:CCSprite	access:public	signature:(float fRotationY)
setScale	base_nodes/CCNode.cpp	/^void CCNode::setScale(float scale)$/;"	f	class:CCNode	signature:(float scale)
setScale	base_nodes/CCNode.h	/^    virtual void setScale(float scale);$/;"	p	class:CCNode	access:public	signature:(float scale)
setScale	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setScale(float scale)$/;"	f	class:CCLabelBMFont	signature:(float scale)
setScale	label_nodes/CCLabelBMFont.h	/^    virtual void setScale(float scale);$/;"	p	class:CCLabelBMFont	access:public	signature:(float scale)
setScale	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setScale(float s)$/;"	f	class:CCParticleSystem	signature:(float s)
setScale	particle_nodes/CCParticleSystem.h	/^    virtual void setScale(float s);$/;"	p	class:CCParticleSystem	access:public	signature:(float s)
setScale	sprite_nodes/CCSprite.cpp	/^void CCSprite::setScale(float fScale)$/;"	f	class:CCSprite	signature:(float fScale)
setScale	sprite_nodes/CCSprite.h	/^    virtual void setScale(float fScale);$/;"	p	class:CCSprite	access:public	signature:(float fScale)
setScaleX	base_nodes/CCNode.cpp	/^void CCNode::setScaleX(float newScaleX)$/;"	f	class:CCNode	signature:(float newScaleX)
setScaleX	base_nodes/CCNode.h	/^    virtual void setScaleX(float fScaleX);$/;"	p	class:CCNode	access:public	signature:(float fScaleX)
setScaleX	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setScaleX(float scaleX)$/;"	f	class:CCLabelBMFont	signature:(float scaleX)
setScaleX	label_nodes/CCLabelBMFont.h	/^    virtual void setScaleX(float scaleX);$/;"	p	class:CCLabelBMFont	access:public	signature:(float scaleX)
setScaleX	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setScaleX(float newScaleX)$/;"	f	class:CCParticleSystem	signature:(float newScaleX)
setScaleX	particle_nodes/CCParticleSystem.h	/^    virtual void setScaleX(float newScaleX);$/;"	p	class:CCParticleSystem	access:public	signature:(float newScaleX)
setScaleX	sprite_nodes/CCSprite.cpp	/^void CCSprite::setScaleX(float fScaleX)$/;"	f	class:CCSprite	signature:(float fScaleX)
setScaleX	sprite_nodes/CCSprite.h	/^    virtual void setScaleX(float fScaleX);$/;"	p	class:CCSprite	access:public	signature:(float fScaleX)
setScaleY	base_nodes/CCNode.cpp	/^void CCNode::setScaleY(float newScaleY)$/;"	f	class:CCNode	signature:(float newScaleY)
setScaleY	base_nodes/CCNode.h	/^    virtual void setScaleY(float fScaleY);$/;"	p	class:CCNode	access:public	signature:(float fScaleY)
setScaleY	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setScaleY(float scaleY)$/;"	f	class:CCLabelBMFont	signature:(float scaleY)
setScaleY	label_nodes/CCLabelBMFont.h	/^    virtual void setScaleY(float scaleY);$/;"	p	class:CCLabelBMFont	access:public	signature:(float scaleY)
setScaleY	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setScaleY(float newScaleY)$/;"	f	class:CCParticleSystem	signature:(float newScaleY)
setScaleY	particle_nodes/CCParticleSystem.h	/^    virtual void setScaleY(float newScaleY);$/;"	p	class:CCParticleSystem	access:public	signature:(float newScaleY)
setScaleY	sprite_nodes/CCSprite.cpp	/^void CCSprite::setScaleY(float fScaleY)$/;"	f	class:CCSprite	signature:(float fScaleY)
setScaleY	sprite_nodes/CCSprite.h	/^    virtual void setScaleY(float fScaleY);$/;"	p	class:CCSprite	access:public	signature:(float fScaleY)
setScheduler	CCDirector.cpp	/^void CCDirector::setScheduler(CCScheduler* pScheduler)$/;"	f	class:CCDirector	signature:(CCScheduler* pScheduler)
setScheduler	base_nodes/CCNode.cpp	/^void CCNode::setScheduler(CCScheduler* scheduler)$/;"	f	class:CCNode	signature:(CCScheduler* scheduler)
setScheduler	base_nodes/CCNode.h	/^    virtual void setScheduler(CCScheduler* scheduler);$/;"	p	class:CCNode	access:public	signature:(CCScheduler* scheduler)
setScissorInPoints	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setScissorInPoints(float x , float y , float w , float h)$/;"	f	class:CCEGLViewProtocol	signature:(float x , float y , float w , float h)
setScissorInPoints	platform/CCEGLViewProtocol.h	/^    virtual void setScissorInPoints(float x , float y , float w , float h);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(float x , float y , float w , float h)
setScriptEngine	script_support/CCScriptSupport.cpp	/^void CCScriptEngineManager::setScriptEngine(CCScriptEngineProtocol *pScriptEngine)$/;"	f	class:CCScriptEngineManager	signature:(CCScriptEngineProtocol *pScriptEngine)
setScriptEngine	script_support/CCScriptSupport.h	/^    void setScriptEngine(CCScriptEngineProtocol *pScriptEngine);$/;"	p	class:CCScriptEngineManager	access:public	signature:(CCScriptEngineProtocol *pScriptEngine)
setSearchPaths	platform/CCFileUtils.cpp	/^void CCFileUtils::setSearchPaths(const std::vector<std::string>& searchPaths)$/;"	f	class:CCFileUtils	signature:(const std::vector<std::string>& searchPaths)
setSearchPaths	platform/CCFileUtils.h	/^    virtual void setSearchPaths(const std::vector<std::string>& searchPaths);$/;"	p	class:CCFileUtils	access:public	signature:(const std::vector<std::string>& searchPaths)
setSearchResolutionsOrder	platform/CCFileUtils.cpp	/^void CCFileUtils::setSearchResolutionsOrder(const std::vector<std::string>& searchResolutionsOrder)$/;"	f	class:CCFileUtils	signature:(const std::vector<std::string>& searchResolutionsOrder)
setSearchResolutionsOrder	platform/CCFileUtils.h	/^    virtual void setSearchResolutionsOrder(const std::vector<std::string>& searchResolutionsOrder);$/;"	p	class:CCFileUtils	access:public	signature:(const std::vector<std::string>& searchResolutionsOrder)
setSelectedImage	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setSelectedImage(CCNode* pImage)$/;"	f	class:CCMenuItemSprite	signature:(CCNode* pImage)
setSelectedIndex	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::setSelectedIndex(unsigned int index)$/;"	f	class:CCMenuItemToggle	signature:(unsigned int index)
setSelectedSpriteFrame	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemImage::setSelectedSpriteFrame(CCSpriteFrame * frame)$/;"	f	class:CCMenuItemImage	signature:(CCSpriteFrame * frame)
setSelectedSpriteFrame	menu_nodes/CCMenuItem.h	/^    void setSelectedSpriteFrame(CCSpriteFrame* frame);$/;"	p	class:CCMenuItemImage	access:public	signature:(CCSpriteFrame* frame)
setShaderProgram	base_nodes/CCNode.cpp	/^void CCNode::setShaderProgram(CCGLProgram *pShaderProgram)$/;"	f	class:CCNode	signature:(CCGLProgram *pShaderProgram)
setShaderProgram	base_nodes/CCNode.h	/^    virtual void setShaderProgram(CCGLProgram *pShaderProgram);$/;"	p	class:CCNode	access:public	signature:(CCGLProgram *pShaderProgram)
setShaderProgram	textures/CCTexture2D.cpp	/^void CCTexture2D::setShaderProgram(CCGLProgram* pShaderProgram)$/;"	f	class:CCTexture2D	signature:(CCGLProgram* pShaderProgram)
setSize	cocoa/CCGeometry.cpp	/^void CCSize::setSize(float width, float height)$/;"	f	class:CCSize	signature:(float width, float height)
setSize	cocoa/CCGeometry.h	/^    void setSize(float width, float height);$/;"	p	class:CCSize	access:public	signature:(float width, float height)
setSkewX	base_nodes/CCNode.cpp	/^void CCNode::setSkewX(float newSkewX)$/;"	f	class:CCNode	signature:(float newSkewX)
setSkewX	base_nodes/CCNode.h	/^    virtual void setSkewX(float fSkewX);$/;"	p	class:CCNode	access:public	signature:(float fSkewX)
setSkewX	sprite_nodes/CCSprite.cpp	/^void CCSprite::setSkewX(float sx)$/;"	f	class:CCSprite	signature:(float sx)
setSkewX	sprite_nodes/CCSprite.h	/^    virtual void setSkewX(float sx);$/;"	p	class:CCSprite	access:public	signature:(float sx)
setSkewY	base_nodes/CCNode.cpp	/^void CCNode::setSkewY(float newSkewY)$/;"	f	class:CCNode	signature:(float newSkewY)
setSkewY	base_nodes/CCNode.h	/^    virtual void setSkewY(float fSkewY);$/;"	p	class:CCNode	access:public	signature:(float fSkewY)
setSkewY	sprite_nodes/CCSprite.cpp	/^void CCSprite::setSkewY(float sy)$/;"	f	class:CCSprite	signature:(float sy)
setSkewY	sprite_nodes/CCSprite.h	/^    virtual void setSkewY(float sy);$/;"	p	class:CCSprite	access:public	signature:(float sy)
setSourcePosition	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setSourcePosition(const CCPoint& var)$/;"	f	class:CCParticleSystem	signature:(const CCPoint& var)
setSpeed	actions/CCAction.h	/^    inline void setSpeed(float fSpeed) { m_fSpeed = fSpeed; }$/;"	f	class:CCSpeed	access:public	signature:(float fSpeed)
setSpeed	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setSpeed(float speed)$/;"	f	class:CCParticleSystem	signature:(float speed)
setSpeed	particle_nodes/CCParticleSystem.h	/^    virtual void setSpeed(float speed);$/;"	p	class:CCParticleSystem	access:public	signature:(float speed)
setSpeedVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setSpeedVar(float speedVar)$/;"	f	class:CCParticleSystem	signature:(float speedVar)
setSpeedVar	particle_nodes/CCParticleSystem.h	/^    virtual void setSpeedVar(float speed);$/;"	p	class:CCParticleSystem	access:public	signature:(float speed)
setSprite	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setSprite(CCSprite *pSprite)$/;"	f	class:CCProgressTimer	signature:(CCSprite *pSprite)
setSprite	misc_nodes/CCProgressTimer.h	/^    void setSprite(CCSprite *pSprite);$/;"	p	class:CCProgressTimer	access:public	signature:(CCSprite *pSprite)
setSprite	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setSprite(CCSprite* var)$/;"	f	class:CCRenderTexture	signature:(CCSprite* var)
setStartColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setStartColor(const ccColor3B& color)$/;"	f	class:CCLayerGradient	signature:(const ccColor3B& color)
setStartColor	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartColor(const ccColor4F& var)$/;"	f	class:CCParticleSystem	signature:(const ccColor4F& var)
setStartColorVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartColorVar(const ccColor4F& var)$/;"	f	class:CCParticleSystem	signature:(const ccColor4F& var)
setStartOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setStartOpacity(GLubyte o)$/;"	f	class:CCLayerGradient	signature:(GLubyte o)
setStartRadius	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartRadius(float startRadius)$/;"	f	class:CCParticleSystem	signature:(float startRadius)
setStartRadius	particle_nodes/CCParticleSystem.h	/^    virtual void setStartRadius(float startRadius);$/;"	p	class:CCParticleSystem	access:public	signature:(float startRadius)
setStartRadiusVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartRadiusVar(float startRadiusVar)$/;"	f	class:CCParticleSystem	signature:(float startRadiusVar)
setStartRadiusVar	particle_nodes/CCParticleSystem.h	/^    virtual void setStartRadiusVar(float startRadiusVar);$/;"	p	class:CCParticleSystem	access:public	signature:(float startRadiusVar)
setStartSize	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartSize(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setStartSizeVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartSizeVar(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setStartSpin	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartSpin(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setStartSpinVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartSpinVar(float var)$/;"	f	class:CCParticleSystem	signature:(float var)
setStartingPositionInitialized	misc_nodes/CCMotionStreak.h	/^    inline void setStartingPositionInitialized(bool bStartingPositionInitialized) $/;"	f	class:CCMotionStreak	access:public	signature:(bool bStartingPositionInitialized)
setStencil	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::setStencil(CCNode *pStencil)$/;"	f	class:CCClippingNode	signature:(CCNode *pStencil)
setStencil	misc_nodes/CCClippingNode.h	/^    void setStencil(CCNode *pStencil);$/;"	p	class:CCClippingNode	access:public	signature:(CCNode *pStencil)
setStep	effects/CCGrid.h	/^    inline void setStep(const CCPoint& step) { m_obStep = step; }$/;"	f	class:CCGridBase	access:public	signature:(const CCPoint& step)
setString	include/CCProtocols.h	/^    virtual void setString(const char *label) = 0;$/;"	p	class:CCLabelProtocol	access:public	signature:(const char *label)
setString	label_nodes/CCLabelAtlas.cpp	/^void CCLabelAtlas::setString(const char *label)$/;"	f	class:CCLabelAtlas	signature:(const char *label)
setString	label_nodes/CCLabelAtlas.h	/^    virtual void setString(const char *label);$/;"	p	class:CCLabelAtlas	access:public	signature:(const char *label)
setString	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setString(const char *newString)$/;"	f	class:CCLabelBMFont	signature:(const char *newString)
setString	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setString(const char *newString, bool needUpdateLabel)$/;"	f	class:CCLabelBMFont	signature:(const char *newString, bool needUpdateLabel)
setString	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setString(unsigned short *newString, bool needUpdateLabel)$/;"	f	class:CCLabelBMFont	signature:(unsigned short *newString, bool needUpdateLabel)
setString	label_nodes/CCLabelBMFont.h	/^    virtual void setString(const char *newString);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *newString)
setString	label_nodes/CCLabelBMFont.h	/^    virtual void setString(const char *newString, bool needUpdateLabel);$/;"	p	class:CCLabelBMFont	access:public	signature:(const char *newString, bool needUpdateLabel)
setString	label_nodes/CCLabelBMFont.h	/^    virtual void setString(unsigned short *newString, bool needUpdateLabel);$/;"	p	class:CCLabelBMFont	access:protected	signature:(unsigned short *newString, bool needUpdateLabel)
setString	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setString(const char *string)$/;"	f	class:CCLabelTTF	signature:(const char *string)
setString	label_nodes/CCLabelTTF.h	/^    virtual void setString(const char *label);$/;"	p	class:CCLabelTTF	access:public	signature:(const char *label)
setString	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setString(const char * label)$/;"	f	class:CCMenuItemLabel	signature:(const char * label)
setString	menu_nodes/CCMenuItem.h	/^    void setString(const char * label);$/;"	p	class:CCMenuItemLabel	access:public	signature:(const char * label)
setString	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::setString(const char *text)$/;"	f	class:CCTextFieldTTF	signature:(const char *text)
setString	text_input_node/CCTextFieldTTF.h	/^    virtual void setString(const char *text);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const char *text)
setStringForKey	support/user_default/CCUserDefault.cpp	/^void CCUserDefault::setStringForKey(const char* pKey, const std::string & value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, const std::string & value)
setStringForKey	support/user_default/CCUserDefault.h	/^    void    setStringForKey(const char* pKey, const std::string & value);$/;"	p	class:CCUserDefault	access:public	signature:(const char* pKey, const std::string & value)
setStringForKey	support/user_default/CCUserDefaultAndroid.cpp	/^void CCUserDefault::setStringForKey(const char* pKey, const std::string & value)$/;"	f	class:CCUserDefault	signature:(const char* pKey, const std::string & value)
setSubItems	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::setSubItems(CCArray* var)$/;"	f	class:CCMenuItemToggle	signature:(CCArray* var)
setSwallowsTouches	touch_dispatcher/CCTouchHandler.cpp	/^void CCTargetedTouchHandler::setSwallowsTouches(bool bSwallowsTouches)$/;"	f	class:CCTargetedTouchHandler	signature:(bool bSwallowsTouches)
setSwallowsTouches	touch_dispatcher/CCTouchHandler.h	/^    void setSwallowsTouches(bool bSwallowsTouches);$/;"	p	class:CCTargetedTouchHandler	access:public	signature:(bool bSwallowsTouches)
setTGAInfo	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::setTGAInfo(struct sImageTGA* var)$/;"	f	class:CCTileMapAtlas	signature:(struct sImageTGA* var)
setTMXFileName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    inline void setTMXFileName(const char *fileName){ m_sTMXFileName = fileName; }$/;"	f	class:CCTMXMapInfo	access:public	signature:(const char *fileName)
setTag	actions/CCAction.h	/^    inline void setTag(int nTag) { m_nTag = nTag; }$/;"	f	class:CCAction	access:public	signature:(int nTag)
setTag	base_nodes/CCNode.cpp	/^void CCNode::setTag(int var)$/;"	f	class:CCNode	signature:(int var)
setTag	base_nodes/CCNode.h	/^    virtual void setTag(int nTag);$/;"	p	class:CCNode	access:public	signature:(int nTag)
setTangentialAccel	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setTangentialAccel(float t)$/;"	f	class:CCParticleSystem	signature:(float t)
setTangentialAccel	particle_nodes/CCParticleSystem.h	/^    virtual void setTangentialAccel(float t);$/;"	p	class:CCParticleSystem	access:public	signature:(float t)
setTangentialAccelVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setTangentialAccelVar(float t)$/;"	f	class:CCParticleSystem	signature:(float t)
setTangentialAccelVar	particle_nodes/CCParticleSystem.h	/^    virtual void setTangentialAccelVar(float t);$/;"	p	class:CCParticleSystem	access:public	signature:(float t)
setTarget	actions/CCAction.h	/^    inline void setTarget(CCNode *pTarget) { m_pTarget = pTarget; }$/;"	f	class:CCAction	access:public	signature:(CCNode *pTarget)
setTarget	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::setTarget(CCObject *rec, SEL_MenuHandler selector)$/;"	f	class:CCMenuItem	signature:(CCObject *rec, SEL_MenuHandler selector)
setTarget	menu_nodes/CCMenuItem.h	/^    void setTarget(CCObject *rec, SEL_MenuHandler selector);$/;"	p	class:CCMenuItem	access:public	signature:(CCObject *rec, SEL_MenuHandler selector)
setTargetCallback	actions/CCActionInstant.h	/^    inline void setTargetCallback(CCObject* pSel)$/;"	f	class:CCCallFunc	access:public	signature:(CCObject* pSel)
setTexParameters	textures/CCTexture2D.cpp	/^void CCTexture2D::setTexParameters(ccTexParams *texParams)$/;"	f	class:CCTexture2D	signature:(ccTexParams *texParams)
setTexParameters	textures/CCTexture2D.h	/^    void setTexParameters(ccTexParams* texParams);$/;"	p	class:CCTexture2D	access:public	signature:(ccTexParams* texParams)
setTexParameters	textures/CCTextureCache.cpp	/^void VolatileTexture::setTexParameters(CCTexture2D *t, ccTexParams *texParams) $/;"	f	class:VolatileTexture	signature:(CCTexture2D *t, ccTexParams *texParams)
setTexParameters	textures/CCTextureCache.h	/^    static void setTexParameters(CCTexture2D *t, ccTexParams *texParams);$/;"	p	class:VolatileTexture	access:public	signature:(CCTexture2D *t, ccTexParams *texParams)
setTexture	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setTexture(CCTexture2D *texture)$/;"	f	class:CCAtlasNode	signature:(CCTexture2D *texture)
setTexture	base_nodes/CCAtlasNode.h	/^    virtual void setTexture(CCTexture2D *texture);$/;"	p	class:CCAtlasNode	access:public	signature:(CCTexture2D *texture)
setTexture	include/CCProtocols.h	/^    virtual void setTexture(CCTexture2D *texture) = 0;$/;"	p	class:CCTextureProtocol	access:public	signature:(CCTexture2D *texture)
setTexture	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setTexture(CCTexture2D *texture)$/;"	f	class:CCMotionStreak	signature:(CCTexture2D *texture)
setTexture	misc_nodes/CCMotionStreak.h	/^    virtual void setTexture(CCTexture2D *texture);$/;"	p	class:CCMotionStreak	access:public	signature:(CCTexture2D *texture)
setTexture	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::setTexture(CCTexture2D* texture)$/;"	f	class:CCParticleBatchNode	signature:(CCTexture2D* texture)
setTexture	particle_nodes/CCParticleBatchNode.h	/^    virtual void setTexture(CCTexture2D *texture);$/;"	p	class:CCParticleBatchNode	access:public	signature:(CCTexture2D *texture)
setTexture	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setTexture(CCTexture2D* var)$/;"	f	class:CCParticleSystem	signature:(CCTexture2D* var)
setTexture	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setTexture(CCTexture2D* texture)$/;"	f	class:CCParticleSystemQuad	signature:(CCTexture2D* texture)
setTexture	particle_nodes/CCParticleSystemQuad.h	/^    virtual void setTexture(CCTexture2D* texture);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(CCTexture2D* texture)
setTexture	sprite_nodes/CCSprite.cpp	/^void CCSprite::setTexture(CCTexture2D *texture)$/;"	f	class:CCSprite	signature:(CCTexture2D *texture)
setTexture	sprite_nodes/CCSprite.h	/^    virtual void setTexture(CCTexture2D *texture);$/;"	p	class:CCSprite	access:public	signature:(CCTexture2D *texture)
setTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::setTexture(CCTexture2D *texture)$/;"	f	class:CCSpriteBatchNode	signature:(CCTexture2D *texture)
setTexture	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void setTexture(CCTexture2D *texture);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(CCTexture2D *texture)
setTexture	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setTexture(CCTexture2D * texture)$/;"	f	class:CCSpriteFrame	signature:(CCTexture2D * texture)
setTexture	sprite_nodes/CCSpriteFrame.h	/^    void setTexture(CCTexture2D* pobTexture);$/;"	p	class:CCSpriteFrame	access:public	signature:(CCTexture2D* pobTexture)
setTexture	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setTexture(CCTexture2D * var)$/;"	f	class:CCTextureAtlas	signature:(CCTexture2D * var)
setTextureAtlas	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setTextureAtlas(CCTextureAtlas* var)$/;"	f	class:CCAtlasNode	signature:(CCTextureAtlas* var)
setTextureAtlas	sprite_nodes/CCSprite.h	/^    inline void setTextureAtlas(CCTextureAtlas *pobTextureAtlas) { m_pobTextureAtlas = pobTextureAtlas; }$/;"	f	class:CCSprite	access:public	signature:(CCTextureAtlas *pobTextureAtlas)
setTextureAtlas	sprite_nodes/CCSpriteBatchNode.h	/^    inline void setTextureAtlas(CCTextureAtlas* textureAtlas) $/;"	f	class:CCSpriteBatchNode	access:public	signature:(CCTextureAtlas* textureAtlas)
setTextureCoords	sprite_nodes/CCSprite.cpp	/^void CCSprite::setTextureCoords(CCRect rect)$/;"	f	class:CCSprite	signature:(CCRect rect)
setTextureCoords	sprite_nodes/CCSprite.h	/^    virtual void setTextureCoords(CCRect rect);$/;"	p	class:CCSprite	access:protected	signature:(CCRect rect)
setTextureFlipped	effects/CCGrid.cpp	/^void CCGridBase::setTextureFlipped(bool bFlipped)$/;"	f	class:CCGridBase	signature:(bool bFlipped)
setTextureFlipped	effects/CCGrid.h	/^    void setTextureFlipped(bool bFlipped);$/;"	p	class:CCGridBase	access:public	signature:(bool bFlipped)
setTextureRect	sprite_nodes/CCSprite.cpp	/^void CCSprite::setTextureRect(const CCRect& rect)$/;"	f	class:CCSprite	signature:(const CCRect& rect)
setTextureRect	sprite_nodes/CCSprite.cpp	/^void CCSprite::setTextureRect(const CCRect& rect, bool rotated, const CCSize& untrimmedSize)$/;"	f	class:CCSprite	signature:(const CCRect& rect, bool rotated, const CCSize& untrimmedSize)
setTextureRect	sprite_nodes/CCSprite.h	/^    virtual void setTextureRect(const CCRect& rect);$/;"	p	class:CCSprite	access:public	signature:(const CCRect& rect)
setTextureRect	sprite_nodes/CCSprite.h	/^    virtual void setTextureRect(const CCRect& rect, bool rotated, const CCSize& untrimmedSize);$/;"	p	class:CCSprite	access:public	signature:(const CCRect& rect, bool rotated, const CCSize& untrimmedSize)
setTextureWithRect	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setTextureWithRect(CCTexture2D *texture, const CCRect& rect)$/;"	f	class:CCParticleSystemQuad	signature:(CCTexture2D *texture, const CCRect& rect)
setTextureWithRect	particle_nodes/CCParticleSystemQuad.h	/^    void setTextureWithRect(CCTexture2D *texture, const CCRect& rect);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(CCTexture2D *texture, const CCRect& rect)
setTile	actions/CCActionGrid.cpp	/^void CCTiledGrid3DAction::setTile(const CCPoint& pos, const ccQuad3& coords)$/;"	f	class:CCTiledGrid3DAction	signature:(const CCPoint& pos, const ccQuad3& coords)
setTile	actions/CCActionGrid.h	/^    void setTile(const CCPoint& position, const ccQuad3& coords);$/;"	p	class:CCTiledGrid3DAction	access:public	signature:(const CCPoint& position, const ccQuad3& coords)
setTile	effects/CCGrid.cpp	/^void CCTiledGrid3D::setTile(const CCPoint& pos, const ccQuad3& coords)$/;"	f	class:CCTiledGrid3D	signature:(const CCPoint& pos, const ccQuad3& coords)
setTile	effects/CCGrid.h	/^    void setTile(const CCPoint& pos, const ccQuad3& coords);$/;"	p	class:CCTiledGrid3D	access:public	signature:(const CCPoint& pos, const ccQuad3& coords)
setTile	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::setTile(const ccColor3B& tile, const CCPoint& position)$/;"	f	class:CCTileMapAtlas	signature:(const ccColor3B& tile, const CCPoint& position)
setTile	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    void setTile(const ccColor3B& tile, const CCPoint& position);$/;"	p	class:CCTileMapAtlas	access:public	signature:(const ccColor3B& tile, const CCPoint& position)
setTileGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setTileGID(unsigned int gid, const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(unsigned int gid, const CCPoint& pos)
setTileGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setTileGID(unsigned int gid, const CCPoint& pos, ccTMXTileFlags flags)$/;"	f	class:CCTMXLayer	signature:(unsigned int gid, const CCPoint& pos, ccTMXTileFlags flags)
setTileGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    void setTileGID(unsigned int gid, const CCPoint& tileCoordinate);$/;"	p	class:CCTMXLayer	access:public	signature:(unsigned int gid, const CCPoint& tileCoordinate)
setTileGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    void setTileGID(unsigned int gid, const CCPoint& tileCoordinate, ccTMXTileFlags flags);$/;"	p	class:CCTMXLayer	access:public	signature:(unsigned int gid, const CCPoint& tileCoordinate, ccTMXTileFlags flags)
setTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setTileProperties(CCDictionary* tileProperties)$/;"	f	class:CCTMXMapInfo	signature:(CCDictionary* tileProperties)
setTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    void setTileProperties(CCDictionary* tileProperties);$/;"	p	class:CCTMXMapInfo	access:public	signature:(CCDictionary* tileProperties)
setTileSet	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setTileSet(CCTMXTilesetInfo* var)$/;"	f	class:CCTMXLayer	signature:(CCTMXTilesetInfo* var)
setTilesets	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setTilesets(CCArray* var)$/;"	f	class:CCTMXMapInfo	signature:(CCArray* var)
setTimeScale	CCScheduler.h	/^    inline void setTimeScale(float fTimeScale) { m_fTimeScale = fTimeScale; }$/;"	f	class:CCScheduler	access:public	signature:(float fTimeScale)
setTotalParticles	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setTotalParticles(unsigned int var)$/;"	f	class:CCParticleSystem	signature:(unsigned int var)
setTotalParticles	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setTotalParticles(unsigned int tp)$/;"	f	class:CCParticleSystemQuad	signature:(unsigned int tp)
setTotalParticles	particle_nodes/CCParticleSystemQuad.h	/^    virtual void setTotalParticles(unsigned int tp);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(unsigned int tp)
setTouchDelegate	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setTouchDelegate(EGLTouchDelegate * pDelegate)$/;"	f	class:CCEGLViewProtocol	signature:(EGLTouchDelegate * pDelegate)
setTouchDelegate	platform/CCEGLViewProtocol.h	/^    virtual void setTouchDelegate(EGLTouchDelegate * pDelegate);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(EGLTouchDelegate * pDelegate)
setTouchDispatcher	CCDirector.cpp	/^void CCDirector::setTouchDispatcher(CCTouchDispatcher* pTouchDispatcher)$/;"	f	class:CCDirector	signature:(CCTouchDispatcher* pTouchDispatcher)
setTouchEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setTouchEnabled(bool enabled)$/;"	f	class:CCLayer	signature:(bool enabled)
setTouchEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setTouchEnabled(bool value);$/;"	p	class:CCLayer	access:public	signature:(bool value)
setTouchInfo	touch_dispatcher/CCTouch.h	/^    void setTouchInfo(int id, float x, float y)$/;"	f	class:CCTouch	access:public	signature:(int id, float x, float y)
setTouchMode	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setTouchMode(ccTouchesMode mode)$/;"	f	class:CCLayer	signature:(ccTouchesMode mode)
setTouchMode	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setTouchMode(ccTouchesMode mode);$/;"	p	class:CCLayer	access:public	signature:(ccTouchesMode mode)
setTouchPriority	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setTouchPriority(int priority)$/;"	f	class:CCLayer	signature:(int priority)
setTouchPriority	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setTouchPriority(int priority);$/;"	p	class:CCLayer	access:public	signature:(int priority)
setType	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setType(CCProgressTimerType type)$/;"	f	class:CCProgressTimer	signature:(CCProgressTimerType type)
setType	misc_nodes/CCProgressTimer.h	/^    void setType(CCProgressTimerType type);$/;"	p	class:CCProgressTimer	access:public	signature:(CCProgressTimerType type)
setUniformLocationWith1f	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith1f(GLint location, GLfloat f1)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat f1)
setUniformLocationWith1f	shaders/CCGLProgram.h	/^    void setUniformLocationWith1f(GLint location, GLfloat f1);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat f1)
setUniformLocationWith1i	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith1i(GLint location, GLint i1)$/;"	f	class:CCGLProgram	signature:(GLint location, GLint i1)
setUniformLocationWith1i	shaders/CCGLProgram.h	/^    void setUniformLocationWith1i(GLint location, GLint i1);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLint i1)
setUniformLocationWith2f	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith2f(GLint location, GLfloat f1, GLfloat f2)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat f1, GLfloat f2)
setUniformLocationWith2f	shaders/CCGLProgram.h	/^    void setUniformLocationWith2f(GLint location, GLfloat f1, GLfloat f2);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat f1, GLfloat f2)
setUniformLocationWith2fv	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith2fv(GLint location, GLfloat* floats, unsigned int numberOfArrays)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat* floats, unsigned int numberOfArrays)
setUniformLocationWith2fv	shaders/CCGLProgram.h	/^    void setUniformLocationWith2fv(GLint location, GLfloat* floats, unsigned int numberOfArrays);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat* floats, unsigned int numberOfArrays)
setUniformLocationWith3f	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith3f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)
setUniformLocationWith3f	shaders/CCGLProgram.h	/^    void setUniformLocationWith3f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)
setUniformLocationWith3fv	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith3fv(GLint location, GLfloat* floats, unsigned int numberOfArrays)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat* floats, unsigned int numberOfArrays)
setUniformLocationWith3fv	shaders/CCGLProgram.h	/^    void setUniformLocationWith3fv(GLint location, GLfloat* floats, unsigned int numberOfArrays);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat* floats, unsigned int numberOfArrays)
setUniformLocationWith4f	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith4f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)
setUniformLocationWith4f	shaders/CCGLProgram.h	/^    void setUniformLocationWith4f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)
setUniformLocationWith4fv	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith4fv(GLint location, GLfloat* floats, unsigned int numberOfArrays)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat* floats, unsigned int numberOfArrays)
setUniformLocationWith4fv	shaders/CCGLProgram.h	/^    void setUniformLocationWith4fv(GLint location, GLfloat* floats, unsigned int numberOfArrays);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat* floats, unsigned int numberOfArrays)
setUniformLocationWithMatrix4fv	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWithMatrix4fv(GLint location, GLfloat* matrixArray, unsigned int numberOfMatrices)$/;"	f	class:CCGLProgram	signature:(GLint location, GLfloat* matrixArray, unsigned int numberOfMatrices)
setUniformLocationWithMatrix4fv	shaders/CCGLProgram.h	/^    void setUniformLocationWithMatrix4fv(GLint location, GLfloat* matrixArray, unsigned int numberOfMatrices);$/;"	p	class:CCGLProgram	access:public	signature:(GLint location, GLfloat* matrixArray, unsigned int numberOfMatrices)
setUniformsForBuiltins	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformsForBuiltins()$/;"	f	class:CCGLProgram	signature:()
setUniformsForBuiltins	shaders/CCGLProgram.h	/^    void setUniformsForBuiltins();$/;"	p	class:CCGLProgram	access:public	signature:()
setUpXYZ	CCCamera.cpp	/^void CCCamera::setUpXYZ(float fUpX, float fUpY, float fUpZ)$/;"	f	class:CCCamera	signature:(float fUpX, float fUpY, float fUpZ)
setUpXYZ	CCCamera.h	/^    void setUpXYZ(float fUpX, float fUpY, float fUpZ);$/;"	p	class:CCCamera	access:public	signature:(float fUpX, float fUpY, float fUpZ)
setUserData	base_nodes/CCNode.cpp	/^void CCNode::setUserData(void *var)$/;"	f	class:CCNode	signature:(void *var)
setUserData	base_nodes/CCNode.h	/^    virtual void setUserData(void *pUserData);$/;"	p	class:CCNode	access:public	signature:(void *pUserData)
setUserObject	base_nodes/CCNode.cpp	/^void CCNode::setUserObject(CCObject *pUserObject)$/;"	f	class:CCNode	signature:(CCObject *pUserObject)
setUserObject	base_nodes/CCNode.h	/^    virtual void setUserObject(CCObject *pUserObject);$/;"	p	class:CCNode	access:public	signature:(CCObject *pUserObject)
setValueForKey	support/user_default/CCUserDefault.cpp	/^static void setValueForKey(const char* pKey, const char* pValue)$/;"	f	file:	signature:(const char* pKey, const char* pValue)
setVector	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setVector(const CCPoint& var)$/;"	f	class:CCLayerGradient	signature:(const CCPoint& var)
setVertex	actions/CCActionGrid.cpp	/^void CCGrid3DAction::setVertex(const CCPoint& position, const ccVertex3F& vertex)$/;"	f	class:CCGrid3DAction	signature:(const CCPoint& position, const ccVertex3F& vertex)
setVertex	actions/CCActionGrid.h	/^    void setVertex(const CCPoint& position, const ccVertex3F& vertex);$/;"	p	class:CCGrid3DAction	access:public	signature:(const CCPoint& position, const ccVertex3F& vertex)
setVertex	effects/CCGrid.cpp	/^void CCGrid3D::setVertex(const CCPoint& pos, const ccVertex3F& vertex)$/;"	f	class:CCGrid3D	signature:(const CCPoint& pos, const ccVertex3F& vertex)
setVertex	effects/CCGrid.h	/^    void setVertex(const CCPoint& pos, const ccVertex3F& vertex);$/;"	p	class:CCGrid3D	access:public	signature:(const CCPoint& pos, const ccVertex3F& vertex)
setVertexRect	sprite_nodes/CCSprite.cpp	/^void CCSprite::setVertexRect(const CCRect& rect)$/;"	f	class:CCSprite	signature:(const CCRect& rect)
setVertexRect	sprite_nodes/CCSprite.h	/^    virtual void setVertexRect(const CCRect& rect);$/;"	p	class:CCSprite	access:public	signature:(const CCRect& rect)
setVertexZ	base_nodes/CCNode.cpp	/^void CCNode::setVertexZ(float var)$/;"	f	class:CCNode	signature:(float var)
setVertexZ	base_nodes/CCNode.h	/^    virtual void setVertexZ(float vertexZ);$/;"	p	class:CCNode	access:public	signature:(float vertexZ)
setVertexZ	sprite_nodes/CCSprite.cpp	/^void CCSprite::setVertexZ(float fVertexZ)$/;"	f	class:CCSprite	signature:(float fVertexZ)
setVertexZ	sprite_nodes/CCSprite.h	/^    virtual void setVertexZ(float fVertexZ);$/;"	p	class:CCSprite	access:public	signature:(float fVertexZ)
setVerticalAlignment	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setVerticalAlignment(CCVerticalTextAlignment verticalAlignment)$/;"	f	class:CCLabelTTF	signature:(CCVerticalTextAlignment verticalAlignment)
setVerticalAlignment	label_nodes/CCLabelTTF.h	/^    void setVerticalAlignment(CCVerticalTextAlignment verticalAlignment);$/;"	p	class:CCLabelTTF	access:public	signature:(CCVerticalTextAlignment verticalAlignment)
setViewName	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setViewName(const char* pszViewName)$/;"	f	class:CCEGLViewProtocol	signature:(const char* pszViewName)
setViewName	platform/CCEGLViewProtocol.h	/^    virtual void setViewName(const char* pszViewName);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(const char* pszViewName)
setViewPortInPoints	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setViewPortInPoints(float x , float y , float w , float h)$/;"	f	class:CCEGLViewProtocol	signature:(float x , float y , float w , float h)
setViewPortInPoints	platform/CCEGLViewProtocol.h	/^    virtual void setViewPortInPoints(float x , float y , float w , float h);$/;"	p	class:CCEGLViewProtocol	access:public	signature:(float x , float y , float w , float h)
setViewport	CCDirector.cpp	/^void CCDirector::setViewport()$/;"	f	class:CCDirector	signature:()
setViewport	CCDirector.h	/^    void setViewport();$/;"	p	class:CCDirector	access:public	signature:()
setVisible	base_nodes/CCNode.cpp	/^void CCNode::setVisible(bool var)$/;"	f	class:CCNode	signature:(bool var)
setVisible	base_nodes/CCNode.h	/^    virtual void setVisible(bool visible);$/;"	p	class:CCNode	access:public	signature:(bool visible)
setVisible	sprite_nodes/CCSprite.cpp	/^void CCSprite::setVisible(bool bVisible)$/;"	f	class:CCSprite	signature:(bool bVisible)
setVisible	sprite_nodes/CCSprite.h	/^    virtual void setVisible(bool bVisible);$/;"	p	class:CCSprite	access:public	signature:(bool bVisible)
setWidth	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setWidth(float width)$/;"	f	class:CCLabelBMFont	signature:(float width)
setWidth	label_nodes/CCLabelBMFont.h	/^    virtual void setWidth(float width);$/;"	p	class:CCLabelBMFont	access:public	signature:(float width)
setZOrder	base_nodes/CCNode.cpp	/^void CCNode::setZOrder(int z)$/;"	f	class:CCNode	signature:(int z)
setZOrder	base_nodes/CCNode.h	/^    virtual void setZOrder(int zOrder);$/;"	p	class:CCNode	access:public	signature:(int zOrder)
setjmp_buffer	platform/CCImageCommon_cpp.h	/^  jmp_buf setjmp_buffer;	\/* for return to caller *\/$/;"	m	struct:my_error_mgr	access:public
setupIndices	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setupIndices()$/;"	f	class:CCTextureAtlas	signature:()
setupIndices	textures/CCTextureAtlas.h	/^    void setupIndices();$/;"	p	class:CCTextureAtlas	access:private	signature:()
setupTileSprite	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setupTileSprite(CCSprite* sprite, CCPoint pos, unsigned int gid)$/;"	f	class:CCTMXLayer	signature:(CCSprite* sprite, CCPoint pos, unsigned int gid)
setupTileSprite	tilemap_parallax_nodes/CCTMXLayer.h	/^    void setupTileSprite(CCSprite* sprite, CCPoint pos, unsigned int gid);$/;"	p	class:CCTMXLayer	access:private	signature:(CCSprite* sprite, CCPoint pos, unsigned int gid)
setupTiles	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setupTiles()$/;"	f	class:CCTMXLayer	signature:()
setupTiles	tilemap_parallax_nodes/CCTMXLayer.h	/^    void setupTiles();$/;"	p	class:CCTMXLayer	access:public	signature:()
setupTransition	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgress::setupTransition()$/;"	f	class:CCTransitionProgress	signature:()
setupTransition	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgressInOut::setupTransition()$/;"	f	class:CCTransitionProgressInOut	signature:()
setupTransition	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual void setupTransition();$/;"	p	class:CCTransitionProgress	access:protected	signature:()
setupTransition	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    virtual void setupTransition();$/;"	p	class:CCTransitionProgressInOut	access:protected	signature:()
setupVBO	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setupVBO()$/;"	f	class:CCParticleSystemQuad	signature:()
setupVBO	particle_nodes/CCParticleSystemQuad.h	/^    void setupVBO();$/;"	p	class:CCParticleSystemQuad	access:private	signature:()
setupVBO	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setupVBO()$/;"	f	class:CCTextureAtlas	signature:()
setupVBO	textures/CCTextureAtlas.h	/^    void setupVBO();$/;"	p	class:CCTextureAtlas	access:private	signature:()
setupVBOandVAO	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setupVBOandVAO()$/;"	f	class:CCParticleSystemQuad	signature:()
setupVBOandVAO	particle_nodes/CCParticleSystemQuad.h	/^    void setupVBOandVAO();$/;"	p	class:CCParticleSystemQuad	access:private	signature:()
setupVBOandVAO	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setupVBOandVAO()$/;"	f	class:CCTextureAtlas	signature:()
setupVBOandVAO	textures/CCTextureAtlas.h	/^    void setupVBOandVAO();$/;"	p	class:CCTextureAtlas	access:private	signature:()
sharedAnimationCache	sprite_nodes/CCAnimationCache.cpp	/^CCAnimationCache* CCAnimationCache::sharedAnimationCache(void)$/;"	f	class:CCAnimationCache	signature:(void)
sharedAnimationCache	sprite_nodes/CCAnimationCache.h	/^    static CCAnimationCache* sharedAnimationCache(void);$/;"	p	class:CCAnimationCache	access:public	signature:(void)
sharedConfiguration	CCConfiguration.cpp	/^CCConfiguration* CCConfiguration::sharedConfiguration(void)$/;"	f	class:CCConfiguration	signature:(void)
sharedConfiguration	CCConfiguration.h	/^    static CCConfiguration *sharedConfiguration(void);$/;"	p	class:CCConfiguration	access:public	signature:(void)
sharedDirector	CCDirector.cpp	/^CCDirector* CCDirector::sharedDirector(void)$/;"	f	class:CCDirector	signature:(void)
sharedDirector	CCDirector.h	/^    static CCDirector* sharedDirector(void);$/;"	p	class:CCDirector	access:public	signature:(void)
sharedDispatcher	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDispatcher* CCIMEDispatcher::sharedDispatcher()$/;"	f	class:CCIMEDispatcher	signature:()
sharedDispatcher	text_input_node/CCIMEDispatcher.h	/^    static CCIMEDispatcher* sharedDispatcher();$/;"	p	class:CCIMEDispatcher	access:public	signature:()
sharedFileUtils	platform/CCFileUtils.h	/^    static CCFileUtils* sharedFileUtils();$/;"	p	class:CCFileUtils	access:public	signature:()
sharedManager	script_support/CCScriptSupport.cpp	/^CCScriptEngineManager* CCScriptEngineManager::sharedManager(void)$/;"	f	class:CCScriptEngineManager	signature:(void)
sharedManager	script_support/CCScriptSupport.h	/^    static CCScriptEngineManager* sharedManager(void);$/;"	p	class:CCScriptEngineManager	access:public	signature:(void)
sharedNotificationCenter	support/CCNotificationCenter.cpp	/^CCNotificationCenter *CCNotificationCenter::sharedNotificationCenter(void)$/;"	f	class:CCNotificationCenter	signature:(void)
sharedNotificationCenter	support/CCNotificationCenter.h	/^    static CCNotificationCenter *sharedNotificationCenter(void);$/;"	p	class:CCNotificationCenter	access:public	signature:(void)
sharedPoolManager	cocoa/CCAutoreleasePool.cpp	/^CCPoolManager* CCPoolManager::sharedPoolManager()$/;"	f	class:CCPoolManager	signature:()
sharedPoolManager	cocoa/CCAutoreleasePool.h	/^    static CCPoolManager* sharedPoolManager();$/;"	p	class:CCPoolManager	access:public	signature:()
sharedProfiler	support/CCProfiling.cpp	/^CCProfiler* CCProfiler::sharedProfiler(void)$/;"	f	class:CCProfiler	signature:(void)
sharedProfiler	support/CCProfiling.h	/^    static CCProfiler* sharedProfiler(void);$/;"	p	class:CCProfiler	access:public	signature:(void)
sharedShaderCache	shaders/CCShaderCache.cpp	/^CCShaderCache* CCShaderCache::sharedShaderCache()$/;"	f	class:CCShaderCache	signature:()
sharedShaderCache	shaders/CCShaderCache.h	/^    static CCShaderCache* sharedShaderCache();$/;"	p	class:CCShaderCache	access:public	signature:()
sharedSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.cpp	/^CCSpriteFrameCache* CCSpriteFrameCache::sharedSpriteFrameCache(void)$/;"	f	class:CCSpriteFrameCache	signature:(void)
sharedSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.h	/^    static CCSpriteFrameCache* sharedSpriteFrameCache(void);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(void)
sharedTextureCache	textures/CCTextureCache.cpp	/^CCTextureCache * CCTextureCache::sharedTextureCache()$/;"	f	class:CCTextureCache	signature:()
sharedTextureCache	textures/CCTextureCache.h	/^    static CCTextureCache * sharedTextureCache();$/;"	p	class:CCTextureCache	access:public	signature:()
sharedUserDefault	support/user_default/CCUserDefault.cpp	/^CCUserDefault* CCUserDefault::sharedUserDefault()$/;"	f	class:CCUserDefault	signature:()
sharedUserDefault	support/user_default/CCUserDefault.h	/^    static CCUserDefault* sharedUserDefault();$/;"	p	class:CCUserDefault	access:public	signature:()
sharedUserDefault	support/user_default/CCUserDefaultAndroid.cpp	/^CCUserDefault* CCUserDefault::sharedUserDefault()$/;"	f	class:CCUserDefault	signature:()
showStats	CCDirector.cpp	/^void CCDirector::showStats(void)$/;"	f	class:CCDirector	signature:(void)
showStats	CCDirector.h	/^    void showStats();$/;"	p	class:CCDirector	access:protected	signature:()
shuffle	actions/CCActionTiledGrid.cpp	/^void CCShuffleTiles::shuffle(unsigned int *pArray, unsigned int nLen)$/;"	f	class:CCShuffleTiles	signature:(unsigned int *pArray, unsigned int nLen)
shuffle	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::shuffle(unsigned int *pArray, unsigned int nLen)$/;"	f	class:CCTurnOffTiles	signature:(unsigned int *pArray, unsigned int nLen)
shuffle	actions/CCActionTiledGrid.h	/^    void shuffle(unsigned int *pArray, unsigned int nLen);$/;"	p	class:CCShuffleTiles	access:public	signature:(unsigned int *pArray, unsigned int nLen)
shuffle	actions/CCActionTiledGrid.h	/^    void shuffle(unsigned int *pArray, unsigned int nLen);$/;"	p	class:CCTurnOffTiles	access:public	signature:(unsigned int *pArray, unsigned int nLen)
sig	support/zip_support/ZipUtils.h	/^        unsigned char            sig[4];                \/\/ signature. Should be 'CCZ!' 4 bytes$/;"	m	struct:cocos2d::CCZHeader	access:public
signature	support/data_support/uthash.h	/^   unsigned int signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table	access:public
size	cocoa/CCGeometry.h	/^    CCSize  size;$/;"	m	class:CCRect	access:public
size	include/ccTypes.h	/^    CCSize size; $/;"	m	struct:__anon8	access:public
size	include/ccTypes.h	/^    GLfloat        size;        \/\/ 4 bytes$/;"	m	struct:_ccPointSprite	access:public
size	particle_nodes/CCParticleSystem.h	/^    float        size;$/;"	m	struct:sCCParticle	access:public
size	platform/CCImageCommon_cpp.h	/^    int size;$/;"	m	struct:__anon30	access:public
size_central_dir	support/zip_support/unzip.cpp	/^    ZPOS64_T size_central_dir;     \/* size of the central directory  *\/$/;"	m	struct:cocos2d::__anon44	file:	access:public
size_comment	support/zip_support/unzip.h	/^    uLong size_comment;         \/* size of the global comment of the zipfile *\/$/;"	m	struct:cocos2d::unz_global_info64_s	access:public
size_comment	support/zip_support/unzip.h	/^    uLong size_comment;         \/* size of the global comment of the zipfile *\/$/;"	m	struct:cocos2d::unz_global_info_s	access:public
size_file_comment	support/zip_support/unzip.h	/^    uLong size_file_comment;    \/* file comment length             2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
size_file_comment	support/zip_support/unzip.h	/^    uLong size_file_comment;    \/* file comment length             2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
size_file_extra	support/zip_support/unzip.h	/^    uLong size_file_extra;      \/* extra field length              2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
size_file_extra	support/zip_support/unzip.h	/^    uLong size_file_extra;      \/* extra field length              2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
size_filename	support/zip_support/unzip.h	/^    uLong size_filename;        \/* filename length                 2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
size_filename	support/zip_support/unzip.h	/^    uLong size_filename;        \/* filename length                 2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
size_local_extrafield	support/zip_support/unzip.cpp	/^    uInt  size_local_extrafield;\/* size of the local extra field *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
snapshotTextures	textures/CCTextureCache.cpp	/^CCDictionary* CCTextureCache::snapshotTextures()$/;"	f	class:CCTextureCache	signature:()
snapshotTextures	textures/CCTextureCache.h	/^    CCDictionary* snapshotTextures();$/;"	p	class:CCTextureCache	access:public	signature:()
sortAllChildren	base_nodes/CCNode.cpp	/^void CCNode::sortAllChildren()$/;"	f	class:CCNode	signature:()
sortAllChildren	base_nodes/CCNode.h	/^    virtual void sortAllChildren();$/;"	p	class:CCNode	access:public	signature:()
sortAllChildren	sprite_nodes/CCSprite.cpp	/^void CCSprite::sortAllChildren()$/;"	f	class:CCSprite	signature:()
sortAllChildren	sprite_nodes/CCSprite.h	/^    virtual void sortAllChildren();$/;"	p	class:CCSprite	access:public	signature:()
sortAllChildren	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::sortAllChildren()$/;"	f	class:CCSpriteBatchNode	signature:()
sortAllChildren	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void sortAllChildren();$/;"	p	class:CCSpriteBatchNode	access:public	signature:()
speed	particle_nodes/CCParticleSystem.h	/^        float speed;$/;"	m	struct:CCParticleSystem::__anon24	access:public
speedVar	particle_nodes/CCParticleSystem.h	/^        float speedVar;$/;"	m	struct:CCParticleSystem::__anon24	access:public
sphericalRadius	actions/CCActionCamera.cpp	/^void CCOrbitCamera::sphericalRadius(float *newRadius, float *zenith, float *azimuth)$/;"	f	class:CCOrbitCamera	signature:(float *newRadius, float *zenith, float *azimuth)
sphericalRadius	actions/CCActionCamera.h	/^    void sphericalRadius(float *r, float *zenith, float *azimuth);$/;"	p	class:CCOrbitCamera	access:public	signature:(float *r, float *zenith, float *azimuth)
split	cocoa/CCNS.cpp	/^static inline void split(std::string src, const char* token, strArray& vect)$/;"	f	file:	signature:(std::string src, const char* token, strArray& vect)
splitWithForm	cocoa/CCNS.cpp	/^static bool splitWithForm(const char* pStr, strArray& strs)$/;"	f	file:	signature:(const char* pStr, strArray& strs)
spriteFrameByName	sprite_nodes/CCSpriteFrameCache.cpp	/^CCSpriteFrame* CCSpriteFrameCache::spriteFrameByName(const char *pszName)$/;"	f	class:CCSpriteFrameCache	signature:(const char *pszName)
spriteFrameByName	sprite_nodes/CCSpriteFrameCache.h	/^    CCSpriteFrame* spriteFrameByName(const char *pszName);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(const char *pszName)
src	include/ccTypes.h	/^    GLenum src;$/;"	m	struct:_ccBlendFunc	access:public
stack	kazmath/include/kazmath/GL/mat4stack.h	/^    kmMat4* stack;$/;"	m	struct:km_mat4_stack	access:public
start	kazmath/include/kazmath/ray2.h	/^    kmVec2 start;$/;"	m	struct:kmRay2	access:public
startAnimation	CCDirector.cpp	/^void CCDisplayLinkDirector::startAnimation(void)$/;"	f	class:CCDisplayLinkDirector	signature:(void)
startAnimation	CCDirector.h	/^    virtual void startAnimation(void) = 0;$/;"	p	class:CCDirector	access:public	signature:(void)
startAnimation	CCDirector.h	/^    virtual void startAnimation(void);$/;"	p	class:CCDisplayLinkDirector	access:public	signature:(void)
startElement	platform/CCFileUtils.cpp	/^    void startElement(void *ctx, const char *name, const char **atts)$/;"	f	class:CCDictMaker	access:public	signature:(void *ctx, const char *name, const char **atts)
startElement	platform/CCSAXParser.cpp	/^void CCSAXParser::startElement(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts)$/;"	f	class:CCSAXParser	signature:(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts)
startElement	platform/CCSAXParser.h	/^    static void startElement(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts);$/;"	p	class:CCSAXParser	access:public	signature:(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts)
startElement	platform/CCSAXParser.h	/^    virtual void startElement(void *ctx, const char *name, const char **atts) = 0;$/;"	p	class:CCSAXDelegator	access:public	signature:(void *ctx, const char *name, const char **atts)
startElement	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::startElement(void *ctx, const char *name, const char **atts)$/;"	f	class:CCTMXMapInfo	signature:(void *ctx, const char *name, const char **atts)
startElement	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    void startElement(void *ctx, const char *name, const char **atts);$/;"	p	class:CCTMXMapInfo	access:public	signature:(void *ctx, const char *name, const char **atts)
startPos	particle_nodes/CCParticleSystem.h	/^    CCPoint     startPos;$/;"	m	struct:sCCParticle	access:public
startPosition	actions/CCActionTiledGrid.cpp	/^    CCPoint    startPosition;$/;"	m	struct:Tile	file:	access:public
startRadius	particle_nodes/CCParticleSystem.h	/^        float startRadius;$/;"	m	struct:CCParticleSystem::__anon25	access:public
startRadiusVar	particle_nodes/CCParticleSystem.h	/^        float startRadiusVar;$/;"	m	struct:CCParticleSystem::__anon25	access:public
startWithTarget	actions/CCAction.cpp	/^void CCAction::startWithTarget(CCNode *aTarget)$/;"	f	class:CCAction	signature:(CCNode *aTarget)
startWithTarget	actions/CCAction.cpp	/^void CCSpeed::startWithTarget(CCNode* pTarget)$/;"	f	class:CCSpeed	signature:(CCNode* pTarget)
startWithTarget	actions/CCAction.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCAction	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCAction.h	/^    virtual void startWithTarget(CCNode* pTarget);$/;"	p	class:CCSpeed	access:public	signature:(CCNode* pTarget)
startWithTarget	actions/CCActionCamera.cpp	/^void CCActionCamera::startWithTarget(CCNode *pTarget)$/;"	f	class:CCActionCamera	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionCamera.cpp	/^void CCOrbitCamera::startWithTarget(CCNode *pTarget)$/;"	f	class:CCOrbitCamera	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionCamera.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCActionCamera	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionCamera.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCOrbitCamera	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineBy::startWithTarget(cocos2d::CCNode *pTarget)$/;"	f	class:CCCardinalSplineBy	signature:(cocos2d::CCNode *pTarget)
startWithTarget	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineTo::startWithTarget(cocos2d::CCNode *pTarget)$/;"	f	class:CCCardinalSplineTo	signature:(cocos2d::CCNode *pTarget)
startWithTarget	actions/CCActionCatmullRom.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCCardinalSplineBy	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionCatmullRom.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCCardinalSplineTo	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionEase.cpp	/^void CCActionEase::startWithTarget(CCNode *pTarget)$/;"	f	class:CCActionEase	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionEase.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCActionEase	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionGrid.cpp	/^void CCAccelAmplitude::startWithTarget(CCNode *pTarget)$/;"	f	class:CCAccelAmplitude	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionGrid.cpp	/^void CCAccelDeccelAmplitude::startWithTarget(CCNode *pTarget)$/;"	f	class:CCAccelDeccelAmplitude	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionGrid.cpp	/^void CCDeccelAmplitude::startWithTarget(CCNode *pTarget)$/;"	f	class:CCDeccelAmplitude	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionGrid.cpp	/^void CCGridAction::startWithTarget(CCNode *pTarget)$/;"	f	class:CCGridAction	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionGrid.cpp	/^void CCReuseGrid::startWithTarget(CCNode *pTarget)$/;"	f	class:CCReuseGrid	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionGrid.cpp	/^void CCStopGrid::startWithTarget(CCNode *pTarget)$/;"	f	class:CCStopGrid	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCAccelAmplitude	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCAccelDeccelAmplitude	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCDeccelAmplitude	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCGridAction	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCReuseGrid	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCStopGrid	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCActionInterval::startWithTarget(CCNode *pTarget)$/;"	f	class:CCActionInterval	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCAnimate::startWithTarget(CCNode *pTarget)$/;"	f	class:CCAnimate	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCBezierBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCBezierBy	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCBezierTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCBezierTo	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCBlink::startWithTarget(CCNode *pTarget)$/;"	f	class:CCBlink	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCFadeTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCFadeTo	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCJumpBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCJumpBy	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCJumpTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCJumpTo	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCMoveBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCMoveBy	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCMoveTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCMoveTo	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCRepeat::startWithTarget(CCNode *pTarget)$/;"	f	class:CCRepeat	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCRepeatForever::startWithTarget(CCNode* pTarget)$/;"	f	class:CCRepeatForever	signature:(CCNode* pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCReverseTime::startWithTarget(CCNode *pTarget)$/;"	f	class:CCReverseTime	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCRotateBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCRotateBy	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCRotateTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCRotateTo	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCScaleBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCScaleBy	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCScaleTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCScaleTo	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCSequence::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSequence	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCSkewBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSkewBy	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCSkewTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSkewTo	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCSpawn::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSpawn	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCTargetedAction::startWithTarget(CCNode *pTarget)$/;"	f	class:CCTargetedAction	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCTintBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCTintBy	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.cpp	/^void CCTintTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCTintTo	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCActionInterval	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCAnimate	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCBezierBy	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCBezierTo	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCBlink	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCFadeTo	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCJumpBy	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCJumpTo	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCMoveBy	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCMoveTo	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCRepeat	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCReverseTime	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCRotateBy	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCRotateTo	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCScaleBy	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCScaleTo	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCSequence	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCSkewBy	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCSkewTo	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCSpawn	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCTargetedAction	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCTintBy	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCTintTo	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionInterval.h	/^    virtual void startWithTarget(CCNode* pTarget);$/;"	p	class:CCRepeatForever	access:public	signature:(CCNode* pTarget)
startWithTarget	actions/CCActionProgressTimer.cpp	/^void CCProgressFromTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCProgressFromTo	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionProgressTimer.cpp	/^void CCProgressTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCProgressTo	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionProgressTimer.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCProgressFromTo	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionProgressTimer.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCProgressTo	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionTiledGrid.cpp	/^void CCShuffleTiles::startWithTarget(CCNode *pTarget)$/;"	f	class:CCShuffleTiles	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionTiledGrid.cpp	/^void CCSplitCols::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSplitCols	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionTiledGrid.cpp	/^void CCSplitRows::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSplitRows	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::startWithTarget(CCNode *pTarget)$/;"	f	class:CCTurnOffTiles	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionTiledGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCShuffleTiles	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionTiledGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCSplitCols	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionTiledGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCSplitRows	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionTiledGrid.h	/^    virtual void startWithTarget(CCNode *pTarget);$/;"	p	class:CCTurnOffTiles	access:public	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionTween.cpp	/^void CCActionTween::startWithTarget(CCNode *pTarget)$/;"	f	class:CCActionTween	signature:(CCNode *pTarget)
startWithTarget	actions/CCActionTween.h	/^    void startWithTarget(CCNode *pTarget);$/;"	p	class:CCActionTween	access:public	signature:(CCNode *pTarget)
status	support/image_support/TGAlib.h	/^    int status;$/;"	m	struct:cocos2d::sImageTGA	access:public
step	actions/CCAction.cpp	/^void CCAction::step(float dt)$/;"	f	class:CCAction	signature:(float dt)
step	actions/CCAction.cpp	/^void CCFollow::step(float dt)$/;"	f	class:CCFollow	signature:(float dt)
step	actions/CCAction.cpp	/^void CCSpeed::step(float dt)$/;"	f	class:CCSpeed	signature:(float dt)
step	actions/CCAction.h	/^    virtual void step(float dt);$/;"	p	class:CCAction	access:public	signature:(float dt)
step	actions/CCAction.h	/^    virtual void step(float dt);$/;"	p	class:CCFollow	access:public	signature:(float dt)
step	actions/CCAction.h	/^    virtual void step(float dt);$/;"	p	class:CCSpeed	access:public	signature:(float dt)
step	actions/CCActionInstant.cpp	/^void CCActionInstant::step(float dt) {$/;"	f	class:CCActionInstant	signature:(float dt)
step	actions/CCActionInstant.h	/^    virtual void step(float dt);$/;"	p	class:CCActionInstant	access:public	signature:(float dt)
step	actions/CCActionInterval.cpp	/^    virtual void step(float dt);$/;"	p	class:ExtraAction	file:	access:public	signature:(float dt)
step	actions/CCActionInterval.cpp	/^void CCActionInterval::step(float dt)$/;"	f	class:CCActionInterval	signature:(float dt)
step	actions/CCActionInterval.cpp	/^void CCRepeatForever::step(float dt)$/;"	f	class:CCRepeatForever	signature:(float dt)
step	actions/CCActionInterval.cpp	/^void ExtraAction::step(float dt)$/;"	f	class:ExtraAction	signature:(float dt)
step	actions/CCActionInterval.h	/^    virtual void step(float dt);$/;"	p	class:CCActionInterval	access:public	signature:(float dt)
step	actions/CCActionInterval.h	/^    virtual void step(float dt);$/;"	p	class:CCRepeatForever	access:public	signature:(float dt)
stop	actions/CCAction.cpp	/^void CCAction::stop()$/;"	f	class:CCAction	signature:()
stop	actions/CCAction.cpp	/^void CCFollow::stop()$/;"	f	class:CCFollow	signature:()
stop	actions/CCAction.cpp	/^void CCSpeed::stop()$/;"	f	class:CCSpeed	signature:()
stop	actions/CCAction.h	/^    virtual void stop();$/;"	p	class:CCSpeed	access:public	signature:()
stop	actions/CCAction.h	/^    virtual void stop(void);$/;"	p	class:CCAction	access:public	signature:(void)
stop	actions/CCAction.h	/^    virtual void stop(void);$/;"	p	class:CCFollow	access:public	signature:(void)
stop	actions/CCActionEase.cpp	/^void CCActionEase::stop(void)$/;"	f	class:CCActionEase	signature:(void)
stop	actions/CCActionEase.h	/^    virtual void stop(void);$/;"	p	class:CCActionEase	access:public	signature:(void)
stop	actions/CCActionInterval.cpp	/^void CCAnimate::stop(void)$/;"	f	class:CCAnimate	signature:(void)
stop	actions/CCActionInterval.cpp	/^void CCBlink::stop()$/;"	f	class:CCBlink	signature:()
stop	actions/CCActionInterval.cpp	/^void CCRepeat::stop(void)$/;"	f	class:CCRepeat	signature:(void)
stop	actions/CCActionInterval.cpp	/^void CCReverseTime::stop(void)$/;"	f	class:CCReverseTime	signature:(void)
stop	actions/CCActionInterval.cpp	/^void CCSequence::stop(void)$/;"	f	class:CCSequence	signature:(void)
stop	actions/CCActionInterval.cpp	/^void CCSpawn::stop(void)$/;"	f	class:CCSpawn	signature:(void)
stop	actions/CCActionInterval.cpp	/^void CCTargetedAction::stop(void)$/;"	f	class:CCTargetedAction	signature:(void)
stop	actions/CCActionInterval.h	/^    virtual void stop();$/;"	p	class:CCBlink	access:public	signature:()
stop	actions/CCActionInterval.h	/^    virtual void stop(void);$/;"	p	class:CCAnimate	access:public	signature:(void)
stop	actions/CCActionInterval.h	/^    virtual void stop(void);$/;"	p	class:CCRepeat	access:public	signature:(void)
stop	actions/CCActionInterval.h	/^    virtual void stop(void);$/;"	p	class:CCReverseTime	access:public	signature:(void)
stop	actions/CCActionInterval.h	/^    virtual void stop(void);$/;"	p	class:CCSequence	access:public	signature:(void)
stop	actions/CCActionInterval.h	/^    virtual void stop(void);$/;"	p	class:CCSpawn	access:public	signature:(void)
stop	actions/CCActionInterval.h	/^    virtual void stop(void);$/;"	p	class:CCTargetedAction	access:public	signature:(void)
stopAction	base_nodes/CCNode.cpp	/^void CCNode::stopAction(CCAction* action)$/;"	f	class:CCNode	signature:(CCAction* action)
stopAction	base_nodes/CCNode.h	/^    void stopAction(CCAction* action);$/;"	p	class:CCNode	access:public	signature:(CCAction* action)
stopActionByTag	base_nodes/CCNode.cpp	/^void CCNode::stopActionByTag(int tag)$/;"	f	class:CCNode	signature:(int tag)
stopActionByTag	base_nodes/CCNode.h	/^    void stopActionByTag(int tag);$/;"	p	class:CCNode	access:public	signature:(int tag)
stopAllActions	base_nodes/CCNode.cpp	/^void CCNode::stopAllActions()$/;"	f	class:CCNode	signature:()
stopAllActions	base_nodes/CCNode.h	/^    void stopAllActions(void);$/;"	p	class:CCNode	access:public	signature:(void)
stopAnimation	CCDirector.cpp	/^void CCDisplayLinkDirector::stopAnimation(void)$/;"	f	class:CCDisplayLinkDirector	signature:(void)
stopAnimation	CCDirector.h	/^    virtual void stopAnimation();$/;"	p	class:CCDisplayLinkDirector	access:public	signature:()
stopAnimation	CCDirector.h	/^    virtual void stopAnimation(void) = 0;$/;"	p	class:CCDirector	access:public	signature:(void)
stopSystem	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::stopSystem()$/;"	f	class:CCParticleSystem	signature:()
stopSystem	particle_nodes/CCParticleSystem.h	/^    void stopSystem();$/;"	p	class:CCParticleSystem	access:public	signature:()
strArray	cocoa/CCNS.cpp	/^typedef std::vector<std::string> strArray;$/;"	t	file:
strcmpcasenosensitive_internal	support/zip_support/unzip.cpp	/^local int strcmpcasenosensitive_internal (const char* fileName1, const char* fileName2)$/;"	f	namespace:cocos2d	signature:(const char* fileName1, const char* fileName2)
stream	support/zip_support/unzip.cpp	/^    z_stream stream;            \/* zLib stream structure for inflate *\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
stream_initialised	support/zip_support/unzip.cpp	/^    uLong stream_initialised;   \/* flag set if stream structure is initialized*\/$/;"	m	struct:cocos2d::__anon43	file:	access:public
stringForFormat	textures/CCTexture2D.cpp	/^const char* CCTexture2D::stringForFormat()$/;"	f	class:CCTexture2D	signature:()
stringForFormat	textures/CCTexture2D.h	/^    const char* stringForFormat();$/;"	p	class:CCTexture2D	access:public	signature:()
supportsBGRA8888	CCConfiguration.h	/^    inline bool supportsBGRA8888(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
supportsDiscardFramebuffer	CCConfiguration.h	/^    inline bool supportsDiscardFramebuffer(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
supportsNPOT	CCConfiguration.h	/^    inline bool supportsNPOT(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
supportsPVRTC	CCConfiguration.h	/^    inline bool supportsPVRTC(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
supportsShareableVAO	CCConfiguration.h	/^    inline bool supportsShareableVAO(void)$/;"	f	class:CCConfiguration	access:public	signature:(void)
swap	kazmath/src/mat4.c	/^void swap(kmMat4 * pIn, int r1, int c1, int r2, int c2)$/;"	f	signature:(kmMat4 * pIn, int r1, int c1, int r2, int c2)
swap	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::swap(int oldIndex, int newIndex)$/;"	f	class:CCSpriteBatchNode	signature:(int oldIndex, int newIndex)
swap	sprite_nodes/CCSpriteBatchNode.h	/^    void swap(int oldIndex, int newIndex);$/;"	p	class:CCSpriteBatchNode	access:private	signature:(int oldIndex, int newIndex)
swapBuffers	platform/CCEGLViewProtocol.h	/^    virtual void    swapBuffers() = 0;$/;"	p	class:CCEGLViewProtocol	access:public	signature:()
switchTo	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerMultiplex::switchTo(unsigned int n)$/;"	f	class:CCLayerMultiplex	signature:(unsigned int n)
switchTo	layers_scenes_transitions_nodes/CCLayer.h	/^    void switchTo(unsigned int n);$/;"	p	class:CCLayerMultiplex	access:public	signature:(unsigned int n)
switchToAndReleaseMe	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerMultiplex::switchToAndReleaseMe(unsigned int n)$/;"	f	class:CCLayerMultiplex	signature:(unsigned int n)
switchToAndReleaseMe	layers_scenes_transitions_nodes/CCLayer.h	/^    void switchToAndReleaseMe(unsigned int n);$/;"	p	class:CCLayerMultiplex	access:public	signature:(unsigned int n)
tCCFontDefHashElement	label_nodes/CCLabelBMFont.h	/^} tCCFontDefHashElement;$/;"	t	typeref:struct:_FontDefHashElement
tCCImageFormat	misc_nodes/CCRenderTexture.h	/^} tCCImageFormat;$/;"	t	typeref:enum:eImageFormat
tCCKerningHashElement	label_nodes/CCLabelBMFont.h	/^} tCCKerningHashElement;$/;"	t	typeref:struct:_KerningHashElement
tCCMenuState	menu_nodes/CCMenu.h	/^} tCCMenuState;$/;"	t	typeref:enum:__anon15
tCCParticle	particle_nodes/CCParticleSystem.h	/^}tCCParticle;$/;"	t	typeref:struct:sCCParticle
tCCPositionType	particle_nodes/CCParticleSystem.h	/^}tCCPositionType;$/;"	t	typeref:enum:__anon20
tHashElement	actions/CCActionManager.cpp	/^} tHashElement;$/;"	t	typeref:struct:_hashElement	file:
tHashTimerEntry	CCScheduler.cpp	/^} tHashTimerEntry;$/;"	t	typeref:struct:_hashSelectorEntry	file:
tHashUniformEntry	shaders/CCGLProgram.cpp	/^} tHashUniformEntry;$/;"	t	typeref:struct:_hashUniformEntry	file:
tHashUpdateEntry	CCScheduler.cpp	/^} tHashUpdateEntry;$/;"	t	typeref:struct:_hashUpdateEntry	file:
tImageSource	platform/CCImageCommon_cpp.h	/^}tImageSource;$/;"	t	typeref:struct:__anon30
tImageTGA	support/image_support/TGAlib.h	/^} tImageTGA;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::sImageTGA
tListEntry	CCScheduler.cpp	/^} tListEntry;$/;"	t	typeref:struct:_listEntry	file:
tOrientation	layers_scenes_transitions_nodes/CCTransition.h	/^} tOrientation;$/;"	t	typeref:enum:__anon12
tail	support/data_support/uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle	access:public
tangentialAccel	particle_nodes/CCParticleSystem.h	/^        float        tangentialAccel;$/;"	m	struct:sCCParticle::__anon22	access:public
tangentialAccel	particle_nodes/CCParticleSystem.h	/^        float tangentialAccel;$/;"	m	struct:CCParticleSystem::__anon24	access:public
tangentialAccelVar	particle_nodes/CCParticleSystem.h	/^        float tangentialAccelVar;$/;"	m	struct:CCParticleSystem::__anon24	access:public
target	CCScheduler.cpp	/^    CCObject            *target;        \/\/ hash key (retained)$/;"	m	struct:_hashUpdateEntry	file:	access:public
target	CCScheduler.cpp	/^    CCObject            *target;        \/\/ not retained (retained by hashUpdateEntry)$/;"	m	struct:_listEntry	file:	access:public
target	CCScheduler.cpp	/^    CCObject            *target;    \/\/ hash key (retained)$/;"	m	struct:_hashSelectorEntry	file:	access:public
target	actions/CCActionManager.cpp	/^    CCObject                    *target;$/;"	m	struct:_hashElement	file:	access:public
target	textures/CCTextureCache.cpp	/^    CCObject    *target;$/;"	m	struct:_AsyncStruct	file:	access:public
tbl	support/data_support/uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table	access:public
tell_file_func	support/zip_support/ioapi.h	/^typedef long     (ZCALLBACK *tell_file_func)      OF((voidpf opaque, voidpf stream));$/;"	t	namespace:cocos2d
testFunc	actions/CCActionTiledGrid.cpp	/^float CCFadeOutBLTiles::testFunc(const CCSize& pos, float time)$/;"	f	class:CCFadeOutBLTiles	signature:(const CCSize& pos, float time)
testFunc	actions/CCActionTiledGrid.cpp	/^float CCFadeOutDownTiles::testFunc(const CCSize& pos, float time)$/;"	f	class:CCFadeOutDownTiles	signature:(const CCSize& pos, float time)
testFunc	actions/CCActionTiledGrid.cpp	/^float CCFadeOutTRTiles::testFunc(const CCSize& pos, float time)$/;"	f	class:CCFadeOutTRTiles	signature:(const CCSize& pos, float time)
testFunc	actions/CCActionTiledGrid.cpp	/^float CCFadeOutUpTiles::testFunc(const CCSize& pos, float time)$/;"	f	class:CCFadeOutUpTiles	signature:(const CCSize& pos, float time)
testFunc	actions/CCActionTiledGrid.h	/^    virtual float testFunc(const CCSize& pos, float time);$/;"	p	class:CCFadeOutBLTiles	access:public	signature:(const CCSize& pos, float time)
testFunc	actions/CCActionTiledGrid.h	/^    virtual float testFunc(const CCSize& pos, float time);$/;"	p	class:CCFadeOutDownTiles	access:public	signature:(const CCSize& pos, float time)
testFunc	actions/CCActionTiledGrid.h	/^    virtual float testFunc(const CCSize& pos, float time);$/;"	p	class:CCFadeOutTRTiles	access:public	signature:(const CCSize& pos, float time)
testFunc	actions/CCActionTiledGrid.h	/^    virtual float testFunc(const CCSize& pos, float time);$/;"	p	class:CCFadeOutUpTiles	access:public	signature:(const CCSize& pos, float time)
testerror_file_func	support/zip_support/ioapi.h	/^typedef int      (ZCALLBACK *testerror_file_func) OF((voidpf opaque, voidpf stream));$/;"	t	namespace:cocos2d
tex2	include/ccTypes.h	/^static inline ccTex2F tex2(const float u, const float v)$/;"	f	signature:(const float u, const float v)
texCoords	include/ccTypes.h	/^    ccT2F_Quad texCoords;$/;"	m	struct:__anon8	access:public
texCoords	include/ccTypes.h	/^    ccTex2F            texCoords;            \/\/ 8 bytes$/;"	m	struct:_ccV3F_C4B_T2F	access:public
texCoords	include/ccTypes.h	/^    ccTex2F            texCoords;$/;"	m	struct:_ccV2F_C4B_T2F	access:public
texCoords	include/ccTypes.h	/^    ccTex2F            texCoords;$/;"	m	struct:_ccV2F_C4F_T2F	access:public
textFieldWithPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^CCTextFieldTTF * CCTextFieldTTF::textFieldWithPlaceHolder(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)$/;"	f	class:CCTextFieldTTF	signature:(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)
textFieldWithPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^CCTextFieldTTF * CCTextFieldTTF::textFieldWithPlaceHolder(const char *placeholder, const char *fontName, float fontSize)$/;"	f	class:CCTextFieldTTF	signature:(const char *placeholder, const char *fontName, float fontSize)
textFieldWithPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    static CCTextFieldTTF * textFieldWithPlaceHolder(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)
textFieldWithPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    static CCTextFieldTTF * textFieldWithPlaceHolder(const char *placeholder, const char *fontName, float fontSize);$/;"	p	class:CCTextFieldTTF	access:public	signature:(const char *placeholder, const char *fontName, float fontSize)
textHandler	platform/CCFileUtils.cpp	/^    void textHandler(void *ctx, const char *ch, int len)$/;"	f	class:CCDictMaker	access:public	signature:(void *ctx, const char *ch, int len)
textHandler	platform/CCSAXParser.cpp	/^void CCSAXParser::textHandler(void *ctx, const CC_XML_CHAR *name, int len)$/;"	f	class:CCSAXParser	signature:(void *ctx, const CC_XML_CHAR *name, int len)
textHandler	platform/CCSAXParser.h	/^    static void textHandler(void *ctx, const CC_XML_CHAR *name, int len);$/;"	p	class:CCSAXParser	access:public	signature:(void *ctx, const CC_XML_CHAR *name, int len)
textHandler	platform/CCSAXParser.h	/^    virtual void textHandler(void *ctx, const char *s, int len) = 0;$/;"	p	class:CCSAXDelegator	access:public	signature:(void *ctx, const char *s, int len)
textHandler	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::textHandler(void *ctx, const char *ch, int len)$/;"	f	class:CCTMXMapInfo	signature:(void *ctx, const char *ch, int len)
textHandler	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    void textHandler(void *ctx, const char *ch, int len);$/;"	p	class:CCTMXMapInfo	access:public	signature:(void *ctx, const char *ch, int len)
texture	textures/CCTextureCache.h	/^    CCTexture2D *texture;$/;"	m	class:VolatileTexture	access:protected
textureCoordFromAlphaPoint	misc_nodes/CCProgressTimer.cpp	/^ccTex2F CCProgressTimer::textureCoordFromAlphaPoint(CCPoint alpha)$/;"	f	class:CCProgressTimer	signature:(CCPoint alpha)
textureCoordFromAlphaPoint	misc_nodes/CCProgressTimer.h	/^    ccTex2F textureCoordFromAlphaPoint(CCPoint alpha);$/;"	p	class:CCProgressTimer	access:protected	signature:(CCPoint alpha)
textureForKey	textures/CCTextureCache.cpp	/^CCTexture2D* CCTextureCache::textureForKey(const char* key)$/;"	f	class:CCTextureCache	signature:(const char* key)
textureForKey	textures/CCTextureCache.h	/^    CCTexture2D* textureForKey(const char* key);$/;"	p	class:CCTextureCache	access:public	signature:(const char* key)
texture_matrix_stack	kazmath/src/GL/matrix.c	/^km_mat4_stack texture_matrix_stack;$/;"	v
textures	textures/CCTextureCache.cpp	/^std::list<VolatileTexture*> VolatileTexture::textures;$/;"	m	class:VolatileTexture	file:
textures	textures/CCTextureCache.h	/^    static std::list<VolatileTexture*> textures;$/;"	m	class:VolatileTexture	access:public
tgaDestroy	support/image_support/TGAlib.cpp	/^void tgaDestroy(tImageTGA *psInfo) {$/;"	f	namespace:cocos2d	signature:(tImageTGA *psInfo)
tgaDestroy	support/image_support/TGAlib.h	/^void tgaDestroy(tImageTGA *psInfo);$/;"	p	namespace:cocos2d	signature:(tImageTGA *psInfo)
tgaFlipImage	support/image_support/TGAlib.cpp	/^void tgaFlipImage( tImageTGA *info );$/;"	p	namespace:cocos2d	file:	signature:( tImageTGA *info )
tgaFlipImage	support/image_support/TGAlib.cpp	/^void tgaFlipImage( tImageTGA *psInfo )$/;"	f	namespace:cocos2d	signature:( tImageTGA *psInfo )
tgaLoad	support/image_support/TGAlib.cpp	/^tImageTGA * tgaLoad(const char *pszFilename)$/;"	f	namespace:cocos2d	signature:(const char *pszFilename)
tgaLoad	support/image_support/TGAlib.h	/^tImageTGA * tgaLoad(const char *pszFilename);$/;"	p	namespace:cocos2d	signature:(const char *pszFilename)
tgaLoadHeader	support/image_support/TGAlib.cpp	/^bool tgaLoadHeader(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo)$/;"	f	namespace:cocos2d	signature:(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo)
tgaLoadHeader	support/image_support/TGAlib.h	/^bool tgaLoadHeader(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo);$/;"	p	namespace:cocos2d	signature:(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo)
tgaLoadImageData	support/image_support/TGAlib.cpp	/^bool tgaLoadImageData(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo)$/;"	f	namespace:cocos2d	signature:(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo)
tgaLoadImageData	support/image_support/TGAlib.h	/^bool tgaLoadImageData(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo);$/;"	p	namespace:cocos2d	signature:(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo)
tgaLoadRLEImageData	support/image_support/TGAlib.cpp	/^static bool tgaLoadRLEImageData(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo)$/;"	f	namespace:cocos2d	signature:(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo)
tgaLoadRLEImageData	support/image_support/TGAlib.cpp	/^static bool tgaLoadRLEImageData(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo);$/;"	p	namespace:cocos2d	file:	signature:(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo)
tgaRGBtogreyscale	support/image_support/TGAlib.cpp	/^void tgaRGBtogreyscale(tImageTGA *psInfo) {$/;"	f	namespace:cocos2d	signature:(tImageTGA *psInfo)
tgaRGBtogreyscale	support/image_support/TGAlib.h	/^void tgaRGBtogreyscale(tImageTGA *psInfo);$/;"	p	namespace:cocos2d	signature:(tImageTGA *psInfo)
tile	actions/CCActionGrid.cpp	/^ccQuad3 CCTiledGrid3DAction::tile(const CCPoint& pos)$/;"	f	class:CCTiledGrid3DAction	signature:(const CCPoint& pos)
tile	actions/CCActionGrid.h	/^    ccQuad3 tile(const CCPoint& position);$/;"	p	class:CCTiledGrid3DAction	access:public	signature:(const CCPoint& position)
tile	effects/CCGrid.cpp	/^ccQuad3 CCTiledGrid3D::tile(const CCPoint& pos)$/;"	f	class:CCTiledGrid3D	signature:(const CCPoint& pos)
tile	effects/CCGrid.h	/^    ccQuad3 tile(const CCPoint& pos);$/;"	p	class:CCTiledGrid3D	access:public	signature:(const CCPoint& pos)
tileAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite * CCTMXLayer::tileAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
tileAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite* tileAt(const CCPoint& tileCoordinate);$/;"	p	class:CCTMXLayer	access:public	signature:(const CCPoint& tileCoordinate)
tileAt	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^ccColor3B CCTileMapAtlas::tileAt(const CCPoint& position)$/;"	f	class:CCTileMapAtlas	signature:(const CCPoint& position)
tileAt	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    ccColor3B tileAt(const CCPoint& position);$/;"	p	class:CCTileMapAtlas	access:public	signature:(const CCPoint& position)
tileGIDAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^unsigned int CCTMXLayer::tileGIDAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
tileGIDAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^unsigned int CCTMXLayer::tileGIDAt(const CCPoint& pos, ccTMXTileFlags* flags)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos, ccTMXTileFlags* flags)
tileGIDAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int  tileGIDAt(const CCPoint& tileCoordinate);$/;"	p	class:CCTMXLayer	access:public	signature:(const CCPoint& tileCoordinate)
tileGIDAt	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int tileGIDAt(const CCPoint& tileCoordinate, ccTMXTileFlags* flags);$/;"	p	class:CCTMXLayer	access:public	signature:(const CCPoint& tileCoordinate, ccTMXTileFlags* flags)
tilesetForLayer	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTilesetInfo * CCTMXTiledMap::tilesetForLayer(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXTiledMap	signature:(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
tilesetForLayer	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXTilesetInfo * tilesetForLayer(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo);$/;"	p	class:CCTMXTiledMap	access:private	signature:(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)
timeToLive	particle_nodes/CCParticleSystem.h	/^    float        timeToLive;$/;"	m	struct:sCCParticle	access:public
timerIndex	CCScheduler.cpp	/^    unsigned int        timerIndex;$/;"	m	struct:_hashSelectorEntry	file:	access:public
timerWithScriptHandler	CCScheduler.cpp	/^CCTimer* CCTimer::timerWithScriptHandler(int nHandler, float fSeconds)$/;"	f	class:CCTimer	signature:(int nHandler, float fSeconds)
timerWithScriptHandler	CCScheduler.h	/^    static CCTimer* timerWithScriptHandler(int nHandler, float fSeconds);$/;"	p	class:CCTimer	access:public	signature:(int nHandler, float fSeconds)
timerWithTarget	CCScheduler.cpp	/^CCTimer* CCTimer::timerWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector)$/;"	f	class:CCTimer	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector)
timerWithTarget	CCScheduler.cpp	/^CCTimer* CCTimer::timerWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds)$/;"	f	class:CCTimer	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds)
timerWithTarget	CCScheduler.h	/^    static CCTimer* timerWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector);$/;"	p	class:CCTimer	access:public	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector)
timerWithTarget	CCScheduler.h	/^    static CCTimer* timerWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds);$/;"	p	class:CCTimer	access:public	signature:(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds)
timers	CCScheduler.cpp	/^    ccArray             *timers;$/;"	m	struct:_hashSelectorEntry	file:	access:public
timersubCocos2d	platform/platform.cpp	/^double CCTime::timersubCocos2d(struct cc_timeval *start, struct cc_timeval *end)$/;"	f	class:CCTime	signature:(struct cc_timeval *start, struct cc_timeval *end)
timersubCocos2d	platform/platform.h	/^    static double timersubCocos2d(struct cc_timeval *start, struct cc_timeval *end);$/;"	p	class:CCTime	access:public	signature:(struct cc_timeval *start, struct cc_timeval *end)
timestamp	platform/CCAccelerometerDelegate.h	/^    double timestamp;$/;"	m	class:CCAcceleration	access:public
tintWithColor	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::tintWithColor(ccColor3B colors)$/;"	f	class:CCMotionStreak	signature:(ccColor3B colors)
tintWithColor	misc_nodes/CCMotionStreak.h	/^    void tintWithColor(ccColor3B colors);$/;"	p	class:CCMotionStreak	access:public	signature:(ccColor3B colors)
tinyxml2	support/tinyxml2/tinyxml2.cpp	/^namespace tinyxml2$/;"	n	file:
tinyxml2	support/tinyxml2/tinyxml2.h	/^namespace tinyxml2$/;"	n
tinyxml2::COLLAPSE_WHITESPACE	support/tinyxml2/tinyxml2.h	/^    COLLAPSE_WHITESPACE$/;"	e	enum:tinyxml2::Whitespace
tinyxml2::DynArray	support/tinyxml2/tinyxml2.h	/^class DynArray$/;"	c	namespace:tinyxml2
tinyxml2::DynArray::Capacity	support/tinyxml2/tinyxml2.h	/^    int Capacity() const				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::DynArray	support/tinyxml2/tinyxml2.h	/^    DynArray< T, INIT >() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::Empty	support/tinyxml2/tinyxml2.h	/^    bool Empty() const					{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::EnsureCapacity	support/tinyxml2/tinyxml2.h	/^    void EnsureCapacity( int cap ) {$/;"	f	class:tinyxml2::DynArray	access:private	signature:( int cap )
tinyxml2::DynArray::Mem	support/tinyxml2/tinyxml2.h	/^    T* Mem()							{$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::Mem	support/tinyxml2/tinyxml2.h	/^    const T* Mem() const				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::Pop	support/tinyxml2/tinyxml2.h	/^    T Pop() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::DynArray::PopArr	support/tinyxml2/tinyxml2.h	/^    void PopArr( int count ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( int count )
tinyxml2::DynArray::Push	support/tinyxml2/tinyxml2.h	/^    void Push( T t ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( T t )
tinyxml2::DynArray::PushArr	support/tinyxml2/tinyxml2.h	/^    T* PushArr( int count ) {$/;"	f	class:tinyxml2::DynArray	access:public	signature:( int count )
tinyxml2::DynArray::Size	support/tinyxml2/tinyxml2.h	/^    int Size() const					{$/;"	f	class:tinyxml2::DynArray	access:public	signature:() const
tinyxml2::DynArray::_allocated	support/tinyxml2/tinyxml2.h	/^    int _allocated;		\/\/ objects allocated$/;"	m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::_mem	support/tinyxml2/tinyxml2.h	/^    T*  _mem;$/;"	m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::_pool	support/tinyxml2/tinyxml2.h	/^    T   _pool[INIT];$/;"	m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::_size	support/tinyxml2/tinyxml2.h	/^    int _size;			\/\/ number objects in use$/;"	m	class:tinyxml2::DynArray	access:private
tinyxml2::DynArray::operator []	support/tinyxml2/tinyxml2.h	/^    T& operator[](int i)				{$/;"	f	class:tinyxml2::DynArray	access:public	signature:(int i)
tinyxml2::DynArray::operator []	support/tinyxml2/tinyxml2.h	/^    const T& operator[](int i) const	{$/;"	f	class:tinyxml2::DynArray	access:public	signature:(int i) const
tinyxml2::DynArray::~DynArray	support/tinyxml2/tinyxml2.h	/^    ~DynArray() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
tinyxml2::Entity	support/tinyxml2/tinyxml2.cpp	/^struct Entity {$/;"	s	namespace:tinyxml2	file:
tinyxml2::Entity::length	support/tinyxml2/tinyxml2.cpp	/^    int length;$/;"	m	struct:tinyxml2::Entity	file:	access:public
tinyxml2::Entity::pattern	support/tinyxml2/tinyxml2.cpp	/^    const char* pattern;$/;"	m	struct:tinyxml2::Entity	file:	access:public
tinyxml2::Entity::value	support/tinyxml2/tinyxml2.cpp	/^    char value;$/;"	m	struct:tinyxml2::Entity	file:	access:public
tinyxml2::MemPool	support/tinyxml2/tinyxml2.h	/^class MemPool$/;"	c	namespace:tinyxml2
tinyxml2::MemPool::Alloc	support/tinyxml2/tinyxml2.h	/^    virtual void* Alloc() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::Free	support/tinyxml2/tinyxml2.h	/^    virtual void Free( void* ) = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:( void* )
tinyxml2::MemPool::ItemSize	support/tinyxml2/tinyxml2.h	/^    virtual int ItemSize() const = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:() const
tinyxml2::MemPool::MemPool	support/tinyxml2/tinyxml2.h	/^    MemPool() {}$/;"	f	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::SetTracked	support/tinyxml2/tinyxml2.h	/^    virtual void SetTracked() = 0;$/;"	p	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPool::~MemPool	support/tinyxml2/tinyxml2.h	/^    virtual ~MemPool() {}$/;"	f	class:tinyxml2::MemPool	access:public	signature:()
tinyxml2::MemPoolT	support/tinyxml2/tinyxml2.h	/^class MemPoolT : public MemPool$/;"	c	namespace:tinyxml2	inherits:MemPool
tinyxml2::MemPoolT::Alloc	support/tinyxml2/tinyxml2.h	/^    virtual void* Alloc() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::Block	support/tinyxml2/tinyxml2.h	/^    struct Block {$/;"	s	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::Block::chunk	support/tinyxml2/tinyxml2.h	/^        Chunk chunk[COUNT];$/;"	m	struct:tinyxml2::MemPoolT::Block	access:public
tinyxml2::MemPoolT::COUNT	support/tinyxml2/tinyxml2.h	/^    enum { COUNT = 1024\/SIZE }; \/\/ Some compilers do not accept to use COUNT in private part if COUNT is private$/;"	e	enum:tinyxml2::MemPoolT::__anon39
tinyxml2::MemPoolT::Chunk	support/tinyxml2/tinyxml2.h	/^    union Chunk {$/;"	u	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::Chunk::mem	support/tinyxml2/tinyxml2.h	/^        char    mem[SIZE];$/;"	m	union:tinyxml2::MemPoolT::Chunk	access:public
tinyxml2::MemPoolT::Chunk::next	support/tinyxml2/tinyxml2.h	/^        Chunk*  next;$/;"	m	union:tinyxml2::MemPoolT::Chunk	access:public
tinyxml2::MemPoolT::CurrentAllocs	support/tinyxml2/tinyxml2.h	/^    int CurrentAllocs() const		{$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
tinyxml2::MemPoolT::Free	support/tinyxml2/tinyxml2.h	/^    virtual void Free( void* mem ) {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:( void* mem )
tinyxml2::MemPoolT::ItemSize	support/tinyxml2/tinyxml2.h	/^    virtual int ItemSize() const	{$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
tinyxml2::MemPoolT::MemPoolT	support/tinyxml2/tinyxml2.h	/^    MemPoolT() : _root(0), _currentAllocs(0), _nAllocs(0), _maxAllocs(0), _nUntracked(0)	{}$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::SetTracked	support/tinyxml2/tinyxml2.h	/^    void SetTracked() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::MemPoolT::Trace	support/tinyxml2/tinyxml2.h	/^    void Trace( const char* name ) {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:( const char* name )
tinyxml2::MemPoolT::Untracked	support/tinyxml2/tinyxml2.h	/^    int Untracked() const {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:() const
tinyxml2::MemPoolT::_blockPtrs	support/tinyxml2/tinyxml2.h	/^    DynArray< Block*, 10 > _blockPtrs;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_currentAllocs	support/tinyxml2/tinyxml2.h	/^    int _currentAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_maxAllocs	support/tinyxml2/tinyxml2.h	/^    int _maxAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_nAllocs	support/tinyxml2/tinyxml2.h	/^    int _nAllocs;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_nUntracked	support/tinyxml2/tinyxml2.h	/^    int _nUntracked;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::_root	support/tinyxml2/tinyxml2.h	/^    Chunk* _root;$/;"	m	class:tinyxml2::MemPoolT	access:private
tinyxml2::MemPoolT::~MemPoolT	support/tinyxml2/tinyxml2.h	/^    ~MemPoolT() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
tinyxml2::NUM_ENTITIES	support/tinyxml2/tinyxml2.cpp	/^static const int NUM_ENTITIES = 5;$/;"	m	namespace:tinyxml2	file:
tinyxml2::PRESERVE_WHITESPACE	support/tinyxml2/tinyxml2.h	/^    PRESERVE_WHITESPACE,$/;"	e	enum:tinyxml2::Whitespace
tinyxml2::StrPair	support/tinyxml2/tinyxml2.h	/^class StrPair$/;"	c	namespace:tinyxml2
tinyxml2::StrPair::ATTRIBUTE_NAME	support/tinyxml2/tinyxml2.h	/^        ATTRIBUTE_NAME		            = 0,$/;"	e	enum:tinyxml2::StrPair::__anon37
tinyxml2::StrPair::ATTRIBUTE_VALUE	support/tinyxml2/tinyxml2.h	/^        ATTRIBUTE_VALUE		            = NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon37
tinyxml2::StrPair::ATTRIBUTE_VALUE_LEAVE_ENTITIES	support/tinyxml2/tinyxml2.h	/^        ATTRIBUTE_VALUE_LEAVE_ENTITIES  = NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon37
tinyxml2::StrPair::COLLAPSE_WHITESPACE	support/tinyxml2/tinyxml2.h	/^        COLLAPSE_WHITESPACE				= 0x04,$/;"	e	enum:tinyxml2::StrPair::__anon37
tinyxml2::StrPair::COMMENT	support/tinyxml2/tinyxml2.h	/^        COMMENT				            = NEEDS_NEWLINE_NORMALIZATION$/;"	e	enum:tinyxml2::StrPair::__anon37
tinyxml2::StrPair::CollapseWhitespace	support/tinyxml2/tinyxml2.cpp	/^void StrPair::CollapseWhitespace()$/;"	f	class:tinyxml2::StrPair	signature:()
tinyxml2::StrPair::CollapseWhitespace	support/tinyxml2/tinyxml2.h	/^    void CollapseWhitespace();$/;"	p	class:tinyxml2::StrPair	access:private	signature:()
tinyxml2::StrPair::Empty	support/tinyxml2/tinyxml2.h	/^    bool Empty() const {$/;"	f	class:tinyxml2::StrPair	access:public	signature:() const
tinyxml2::StrPair::GetStr	support/tinyxml2/tinyxml2.cpp	/^const char* StrPair::GetStr()$/;"	f	class:tinyxml2::StrPair	signature:()
tinyxml2::StrPair::GetStr	support/tinyxml2/tinyxml2.h	/^    const char* GetStr();$/;"	p	class:tinyxml2::StrPair	access:public	signature:()
tinyxml2::StrPair::NEEDS_DELETE	support/tinyxml2/tinyxml2.h	/^        NEEDS_DELETE = 0x200$/;"	e	enum:tinyxml2::StrPair::__anon38
tinyxml2::StrPair::NEEDS_ENTITY_PROCESSING	support/tinyxml2/tinyxml2.h	/^        NEEDS_ENTITY_PROCESSING			= 0x01,$/;"	e	enum:tinyxml2::StrPair::__anon37
tinyxml2::StrPair::NEEDS_FLUSH	support/tinyxml2/tinyxml2.h	/^        NEEDS_FLUSH = 0x100,$/;"	e	enum:tinyxml2::StrPair::__anon38
tinyxml2::StrPair::NEEDS_NEWLINE_NORMALIZATION	support/tinyxml2/tinyxml2.h	/^        NEEDS_NEWLINE_NORMALIZATION		= 0x02,$/;"	e	enum:tinyxml2::StrPair::__anon37
tinyxml2::StrPair::ParseName	support/tinyxml2/tinyxml2.cpp	/^char* StrPair::ParseName( char* p )$/;"	f	class:tinyxml2::StrPair	signature:( char* p )
tinyxml2::StrPair::ParseName	support/tinyxml2/tinyxml2.h	/^    char* ParseName( char* in );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( char* in )
tinyxml2::StrPair::ParseText	support/tinyxml2/tinyxml2.cpp	/^char* StrPair::ParseText( char* p, const char* endTag, int strFlags )$/;"	f	class:tinyxml2::StrPair	signature:( char* p, const char* endTag, int strFlags )
tinyxml2::StrPair::ParseText	support/tinyxml2/tinyxml2.h	/^    char* ParseText( char* in, const char* endTag, int strFlags );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( char* in, const char* endTag, int strFlags )
tinyxml2::StrPair::Reset	support/tinyxml2/tinyxml2.cpp	/^void StrPair::Reset()$/;"	f	class:tinyxml2::StrPair	signature:()
tinyxml2::StrPair::Reset	support/tinyxml2/tinyxml2.h	/^    void Reset();$/;"	p	class:tinyxml2::StrPair	access:private	signature:()
tinyxml2::StrPair::Set	support/tinyxml2/tinyxml2.h	/^    void Set( char* start, char* end, int flags ) {$/;"	f	class:tinyxml2::StrPair	access:public	signature:( char* start, char* end, int flags )
tinyxml2::StrPair::SetInternedStr	support/tinyxml2/tinyxml2.h	/^    void SetInternedStr( const char* str ) {$/;"	f	class:tinyxml2::StrPair	access:public	signature:( const char* str )
tinyxml2::StrPair::SetStr	support/tinyxml2/tinyxml2.cpp	/^void StrPair::SetStr( const char* str, int flags )$/;"	f	class:tinyxml2::StrPair	signature:( const char* str, int flags )
tinyxml2::StrPair::SetStr	support/tinyxml2/tinyxml2.h	/^    void SetStr( const char* str, int flags=0 );$/;"	p	class:tinyxml2::StrPair	access:public	signature:( const char* str, int flags=0 )
tinyxml2::StrPair::StrPair	support/tinyxml2/tinyxml2.h	/^    StrPair() : _flags( 0 ), _start( 0 ), _end( 0 ) {}$/;"	f	class:tinyxml2::StrPair	access:public	signature:()
tinyxml2::StrPair::TEXT_ELEMENT	support/tinyxml2/tinyxml2.h	/^        TEXT_ELEMENT		            = NEEDS_ENTITY_PROCESSING | NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon37
tinyxml2::StrPair::TEXT_ELEMENT_LEAVE_ENTITIES	support/tinyxml2/tinyxml2.h	/^        TEXT_ELEMENT_LEAVE_ENTITIES		= NEEDS_NEWLINE_NORMALIZATION,$/;"	e	enum:tinyxml2::StrPair::__anon37
tinyxml2::StrPair::_end	support/tinyxml2/tinyxml2.h	/^    char*   _end;$/;"	m	class:tinyxml2::StrPair	access:private
tinyxml2::StrPair::_flags	support/tinyxml2/tinyxml2.h	/^    int     _flags;$/;"	m	class:tinyxml2::StrPair	access:private
tinyxml2::StrPair::_start	support/tinyxml2/tinyxml2.h	/^    char*   _start;$/;"	m	class:tinyxml2::StrPair	access:private
tinyxml2::StrPair::~StrPair	support/tinyxml2/tinyxml2.cpp	/^StrPair::~StrPair()$/;"	f	class:tinyxml2::StrPair	signature:()
tinyxml2::StrPair::~StrPair	support/tinyxml2/tinyxml2.h	/^    ~StrPair();$/;"	p	class:tinyxml2::StrPair	access:public	signature:()
tinyxml2::Whitespace	support/tinyxml2/tinyxml2.h	/^enum Whitespace {$/;"	g	namespace:tinyxml2
tinyxml2::XMLAttribute	support/tinyxml2/tinyxml2.h	/^class XMLAttribute$/;"	c	namespace:tinyxml2
tinyxml2::XMLAttribute::BUF_SIZE	support/tinyxml2/tinyxml2.h	/^    enum { BUF_SIZE = 200 };$/;"	e	enum:tinyxml2::XMLAttribute::__anon40
tinyxml2::XMLAttribute::BoolValue	support/tinyxml2/tinyxml2.h	/^    bool	 BoolValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::DoubleValue	support/tinyxml2/tinyxml2.h	/^    double 	 DoubleValue() const			{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::FloatValue	support/tinyxml2/tinyxml2.h	/^    float	 FloatValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::IntValue	support/tinyxml2/tinyxml2.h	/^    int		 IntValue() const				{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::Name	support/tinyxml2/tinyxml2.h	/^    const char* Name() const {$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::Next	support/tinyxml2/tinyxml2.h	/^    const XMLAttribute* Next() const {$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLAttribute::ParseDeep( char* p, bool processEntities )$/;"	f	class:tinyxml2::XMLAttribute	signature:( char* p, bool processEntities )
tinyxml2::XMLAttribute::ParseDeep	support/tinyxml2/tinyxml2.h	/^    char* ParseDeep( char* p, bool processEntities );$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( char* p, bool processEntities )
tinyxml2::XMLAttribute::QueryBoolValue	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLAttribute::QueryBoolValue( bool* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( bool* value ) const
tinyxml2::XMLAttribute::QueryBoolValue	support/tinyxml2/tinyxml2.h	/^    XMLError QueryBoolValue( bool* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( bool* value ) const
tinyxml2::XMLAttribute::QueryDoubleValue	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLAttribute::QueryDoubleValue( double* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( double* value ) const
tinyxml2::XMLAttribute::QueryDoubleValue	support/tinyxml2/tinyxml2.h	/^    XMLError QueryDoubleValue( double* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( double* value ) const
tinyxml2::XMLAttribute::QueryFloatValue	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLAttribute::QueryFloatValue( float* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( float* value ) const
tinyxml2::XMLAttribute::QueryFloatValue	support/tinyxml2/tinyxml2.h	/^    XMLError QueryFloatValue( float* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( float* value ) const
tinyxml2::XMLAttribute::QueryIntValue	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLAttribute::QueryIntValue( int* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( int* value ) const
tinyxml2::XMLAttribute::QueryIntValue	support/tinyxml2/tinyxml2.h	/^    XMLError QueryIntValue( int* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( int* value ) const
tinyxml2::XMLAttribute::QueryUnsignedValue	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLAttribute::QueryUnsignedValue( unsigned int* value ) const$/;"	f	class:tinyxml2::XMLAttribute	signature:( unsigned int* value ) const
tinyxml2::XMLAttribute::QueryUnsignedValue	support/tinyxml2/tinyxml2.h	/^    XMLError QueryUnsignedValue( unsigned int* value ) const;$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned int* value ) const
tinyxml2::XMLAttribute::SetAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( bool v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( bool v )
tinyxml2::XMLAttribute::SetAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( const char* v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( const char* v )
tinyxml2::XMLAttribute::SetAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( double v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( double v )
tinyxml2::XMLAttribute::SetAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( float v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( float v )
tinyxml2::XMLAttribute::SetAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( int v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( int v )
tinyxml2::XMLAttribute::SetAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetAttribute( unsigned v )$/;"	f	class:tinyxml2::XMLAttribute	signature:( unsigned v )
tinyxml2::XMLAttribute::SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( bool value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( bool value )
tinyxml2::XMLAttribute::SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( const char* value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( const char* value )
tinyxml2::XMLAttribute::SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( double value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( double value )
tinyxml2::XMLAttribute::SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( float value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( float value )
tinyxml2::XMLAttribute::SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( int value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( int value )
tinyxml2::XMLAttribute::SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( unsigned value );$/;"	p	class:tinyxml2::XMLAttribute	access:public	signature:( unsigned value )
tinyxml2::XMLAttribute::SetName	support/tinyxml2/tinyxml2.cpp	/^void XMLAttribute::SetName( const char* n )$/;"	f	class:tinyxml2::XMLAttribute	signature:( const char* n )
tinyxml2::XMLAttribute::SetName	support/tinyxml2/tinyxml2.h	/^    void SetName( const char* name );$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const char* name )
tinyxml2::XMLAttribute::UnsignedValue	support/tinyxml2/tinyxml2.h	/^    unsigned UnsignedValue() const			{$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::Value	support/tinyxml2/tinyxml2.h	/^    const char* Value() const {$/;"	f	class:tinyxml2::XMLAttribute	access:public	signature:() const
tinyxml2::XMLAttribute::XMLAttribute	support/tinyxml2/tinyxml2.h	/^    XMLAttribute( const XMLAttribute& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
tinyxml2::XMLAttribute::XMLAttribute	support/tinyxml2/tinyxml2.h	/^    XMLAttribute() : _next( 0 ) {}$/;"	f	class:tinyxml2::XMLAttribute	access:private	signature:()
tinyxml2::XMLAttribute::_memPool	support/tinyxml2/tinyxml2.h	/^    MemPool*        _memPool;$/;"	m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::_name	support/tinyxml2/tinyxml2.h	/^    mutable StrPair _name;$/;"	m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::_next	support/tinyxml2/tinyxml2.h	/^    XMLAttribute*   _next;$/;"	m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::_value	support/tinyxml2/tinyxml2.h	/^    mutable StrPair _value;$/;"	m	class:tinyxml2::XMLAttribute	access:private
tinyxml2::XMLAttribute::operator =	support/tinyxml2/tinyxml2.h	/^    void operator=( const XMLAttribute& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLAttribute	access:private	signature:( const XMLAttribute& )
tinyxml2::XMLAttribute::~XMLAttribute	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLAttribute()	{}$/;"	f	class:tinyxml2::XMLAttribute	access:private	signature:()
tinyxml2::XMLComment	support/tinyxml2/tinyxml2.h	/^class XMLComment : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLComment::Accept	support/tinyxml2/tinyxml2.cpp	/^bool XMLComment::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLComment	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLComment::Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLComment::ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLComment::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLComment	signature:( char* p, StrPair* )
tinyxml2::XMLComment::ParseDeep	support/tinyxml2/tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( char*, StrPair* endTag )
tinyxml2::XMLComment::ShallowClone	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLComment::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLComment	signature:( XMLDocument* doc ) const
tinyxml2::XMLComment::ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLComment::ShallowEqual	support/tinyxml2/tinyxml2.cpp	/^bool XMLComment::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLComment	signature:( const XMLNode* compare ) const
tinyxml2::XMLComment::ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLComment	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLComment::ToComment	support/tinyxml2/tinyxml2.h	/^    virtual XMLComment*	ToComment()					{$/;"	f	class:tinyxml2::XMLComment	access:public	signature:()
tinyxml2::XMLComment::ToComment	support/tinyxml2/tinyxml2.h	/^    virtual const XMLComment* ToComment() const		{$/;"	f	class:tinyxml2::XMLComment	access:public	signature:() const
tinyxml2::XMLComment::XMLComment	support/tinyxml2/tinyxml2.cpp	/^XMLComment::XMLComment( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLComment	signature:( XMLDocument* doc )
tinyxml2::XMLComment::XMLComment	support/tinyxml2/tinyxml2.h	/^    XMLComment( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLComment::XMLComment	support/tinyxml2/tinyxml2.h	/^    XMLComment( const XMLComment& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( const XMLComment& )
tinyxml2::XMLComment::operator =	support/tinyxml2/tinyxml2.h	/^    XMLComment& operator=( const XMLComment& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:( const XMLComment& )
tinyxml2::XMLComment::~XMLComment	support/tinyxml2/tinyxml2.cpp	/^XMLComment::~XMLComment()$/;"	f	class:tinyxml2::XMLComment	signature:()
tinyxml2::XMLComment::~XMLComment	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLComment();$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:()
tinyxml2::XMLConstHandle	support/tinyxml2/tinyxml2.h	/^class XMLConstHandle$/;"	c	namespace:tinyxml2
tinyxml2::XMLConstHandle::FirstChild	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle FirstChild() const											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::FirstChildElement	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle FirstChildElement( const char* value=0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* value=0 ) const
tinyxml2::XMLConstHandle::LastChild	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle LastChild()	const										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::LastChildElement	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle LastChildElement( const char* _value=0 ) const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value=0 ) const
tinyxml2::XMLConstHandle::NextSibling	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle NextSibling() const										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::NextSiblingElement	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle NextSiblingElement( const char* _value=0 ) const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value=0 ) const
tinyxml2::XMLConstHandle::PreviousSibling	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle PreviousSibling() const									{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::PreviousSiblingElement	support/tinyxml2/tinyxml2.h	/^    const XMLConstHandle PreviousSiblingElement( const char* _value=0 ) const		{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const char* _value=0 ) const
tinyxml2::XMLConstHandle::ToDeclaration	support/tinyxml2/tinyxml2.h	/^    const XMLDeclaration* ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToElement	support/tinyxml2/tinyxml2.h	/^    const XMLElement* ToElement() const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToNode	support/tinyxml2/tinyxml2.h	/^    const XMLNode* ToNode() const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToText	support/tinyxml2/tinyxml2.h	/^    const XMLText* ToText() const				{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::ToUnknown	support/tinyxml2/tinyxml2.h	/^    const XMLUnknown* ToUnknown() const			{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:() const
tinyxml2::XMLConstHandle::XMLConstHandle	support/tinyxml2/tinyxml2.h	/^    XMLConstHandle( const XMLConstHandle& ref )										{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
tinyxml2::XMLConstHandle::XMLConstHandle	support/tinyxml2/tinyxml2.h	/^    XMLConstHandle( const XMLNode& node )											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode& node )
tinyxml2::XMLConstHandle::XMLConstHandle	support/tinyxml2/tinyxml2.h	/^    XMLConstHandle( const XMLNode* node )											{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLNode* node )
tinyxml2::XMLConstHandle::_node	support/tinyxml2/tinyxml2.h	/^    const XMLNode* _node;$/;"	m	class:tinyxml2::XMLConstHandle	access:private
tinyxml2::XMLConstHandle::operator =	support/tinyxml2/tinyxml2.h	/^    XMLConstHandle& operator=( const XMLConstHandle& ref )							{$/;"	f	class:tinyxml2::XMLConstHandle	access:public	signature:( const XMLConstHandle& ref )
tinyxml2::XMLDeclaration	support/tinyxml2/tinyxml2.h	/^class XMLDeclaration : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLDeclaration::Accept	support/tinyxml2/tinyxml2.cpp	/^bool XMLDeclaration::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDeclaration::Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDeclaration::ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLDeclaration::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLDeclaration	signature:( char* p, StrPair* )
tinyxml2::XMLDeclaration::ParseDeep	support/tinyxml2/tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( char*, StrPair* endTag )
tinyxml2::XMLDeclaration::ShallowClone	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLDeclaration::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLDocument* doc ) const
tinyxml2::XMLDeclaration::ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLDeclaration::ShallowEqual	support/tinyxml2/tinyxml2.cpp	/^bool XMLDeclaration::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLDeclaration	signature:( const XMLNode* compare ) const
tinyxml2::XMLDeclaration::ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLDeclaration	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLDeclaration::ToDeclaration	support/tinyxml2/tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()					{$/;"	f	class:tinyxml2::XMLDeclaration	access:public	signature:()
tinyxml2::XMLDeclaration::ToDeclaration	support/tinyxml2/tinyxml2.h	/^    virtual const XMLDeclaration* ToDeclaration() const		{$/;"	f	class:tinyxml2::XMLDeclaration	access:public	signature:() const
tinyxml2::XMLDeclaration::XMLDeclaration	support/tinyxml2/tinyxml2.cpp	/^XMLDeclaration::XMLDeclaration( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLDeclaration	signature:( XMLDocument* doc )
tinyxml2::XMLDeclaration::XMLDeclaration	support/tinyxml2/tinyxml2.h	/^    XMLDeclaration( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLDeclaration::XMLDeclaration	support/tinyxml2/tinyxml2.h	/^    XMLDeclaration( const XMLDeclaration& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( const XMLDeclaration& )
tinyxml2::XMLDeclaration::operator =	support/tinyxml2/tinyxml2.h	/^    XMLDeclaration& operator=( const XMLDeclaration& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:( const XMLDeclaration& )
tinyxml2::XMLDeclaration::~XMLDeclaration	support/tinyxml2/tinyxml2.cpp	/^XMLDeclaration::~XMLDeclaration()$/;"	f	class:tinyxml2::XMLDeclaration	signature:()
tinyxml2::XMLDeclaration::~XMLDeclaration	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLDeclaration();$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:()
tinyxml2::XMLDocument	support/tinyxml2/tinyxml2.h	/^class XMLDocument : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLDocument::Accept	support/tinyxml2/tinyxml2.cpp	/^bool XMLDocument::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDocument::Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLDocument::DeleteNode	support/tinyxml2/tinyxml2.h	/^    void DeleteNode( XMLNode* node )	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( XMLNode* node )
tinyxml2::XMLDocument::Error	support/tinyxml2/tinyxml2.h	/^    bool Error() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::ErrorID	support/tinyxml2/tinyxml2.h	/^    XMLError  ErrorID() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::GetErrorStr1	support/tinyxml2/tinyxml2.h	/^    const char* GetErrorStr1() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::GetErrorStr2	support/tinyxml2/tinyxml2.h	/^    const char* GetErrorStr2() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::HasBOM	support/tinyxml2/tinyxml2.h	/^    bool HasBOM() const {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::Identify	support/tinyxml2/tinyxml2.cpp	/^char* XMLDocument::Identify( char* p, XMLNode** node )$/;"	f	class:tinyxml2::XMLDocument	signature:( char* p, XMLNode** node )
tinyxml2::XMLDocument::Identify	support/tinyxml2/tinyxml2.h	/^    char* Identify( char* p, XMLNode** node );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( char* p, XMLNode** node )
tinyxml2::XMLDocument::InitDocument	support/tinyxml2/tinyxml2.cpp	/^void XMLDocument::InitDocument()$/;"	f	class:tinyxml2::XMLDocument	signature:()
tinyxml2::XMLDocument::InitDocument	support/tinyxml2/tinyxml2.h	/^    void InitDocument();$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:()
tinyxml2::XMLDocument::LoadFile	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( FILE* fp )$/;"	f	class:tinyxml2::XMLDocument	signature:( FILE* fp )
tinyxml2::XMLDocument::LoadFile	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLDocument::LoadFile( const char* filename )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* filename )
tinyxml2::XMLDocument::LoadFile	support/tinyxml2/tinyxml2.h	/^    XMLError LoadFile( FILE* );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* )
tinyxml2::XMLDocument::LoadFile	support/tinyxml2/tinyxml2.h	/^    XMLError LoadFile( const char* filename );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename )
tinyxml2::XMLDocument::NewComment	support/tinyxml2/tinyxml2.cpp	/^XMLComment* XMLDocument::NewComment( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
tinyxml2::XMLDocument::NewComment	support/tinyxml2/tinyxml2.h	/^    XMLComment* NewComment( const char* comment );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* comment )
tinyxml2::XMLDocument::NewDeclaration	support/tinyxml2/tinyxml2.cpp	/^XMLDeclaration* XMLDocument::NewDeclaration( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
tinyxml2::XMLDocument::NewDeclaration	support/tinyxml2/tinyxml2.h	/^    XMLDeclaration* NewDeclaration( const char* text=0 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text=0 )
tinyxml2::XMLDocument::NewElement	support/tinyxml2/tinyxml2.cpp	/^XMLElement* XMLDocument::NewElement( const char* name )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* name )
tinyxml2::XMLDocument::NewElement	support/tinyxml2/tinyxml2.h	/^    XMLElement* NewElement( const char* name );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* name )
tinyxml2::XMLDocument::NewText	support/tinyxml2/tinyxml2.cpp	/^XMLText* XMLDocument::NewText( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
tinyxml2::XMLDocument::NewText	support/tinyxml2/tinyxml2.h	/^    XMLText* NewText( const char* text );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
tinyxml2::XMLDocument::NewUnknown	support/tinyxml2/tinyxml2.cpp	/^XMLUnknown* XMLDocument::NewUnknown( const char* str )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* str )
tinyxml2::XMLDocument::NewUnknown	support/tinyxml2/tinyxml2.h	/^    XMLUnknown* NewUnknown( const char* text );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* text )
tinyxml2::XMLDocument::Parse	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLDocument::Parse( const char* p, size_t len )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* p, size_t len )
tinyxml2::XMLDocument::Parse	support/tinyxml2/tinyxml2.h	/^    XMLError Parse( const char* xml, size_t nBytes=(size_t)(-1) );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* xml, size_t nBytes=(size_t)(-1) )
tinyxml2::XMLDocument::Print	support/tinyxml2/tinyxml2.cpp	/^void XMLDocument::Print( XMLPrinter* streamer )$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLPrinter* streamer )
tinyxml2::XMLDocument::Print	support/tinyxml2/tinyxml2.h	/^    void Print( XMLPrinter* streamer=0 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLPrinter* streamer=0 )
tinyxml2::XMLDocument::PrintError	support/tinyxml2/tinyxml2.cpp	/^void XMLDocument::PrintError() const$/;"	f	class:tinyxml2::XMLDocument	signature:() const
tinyxml2::XMLDocument::PrintError	support/tinyxml2/tinyxml2.h	/^    void PrintError() const;$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::ProcessEntities	support/tinyxml2/tinyxml2.h	/^    bool ProcessEntities() const		{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::RootElement	support/tinyxml2/tinyxml2.h	/^    XMLElement* RootElement()				{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLDocument::RootElement	support/tinyxml2/tinyxml2.h	/^    const XMLElement* RootElement() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::SaveFile	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( FILE* fp, bool compact )$/;"	f	class:tinyxml2::XMLDocument	signature:( FILE* fp, bool compact )
tinyxml2::XMLDocument::SaveFile	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLDocument::SaveFile( const char* filename, bool compact )$/;"	f	class:tinyxml2::XMLDocument	signature:( const char* filename, bool compact )
tinyxml2::XMLDocument::SaveFile	support/tinyxml2/tinyxml2.h	/^    XMLError SaveFile( FILE* fp, bool compact = false );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( FILE* fp, bool compact = false )
tinyxml2::XMLDocument::SaveFile	support/tinyxml2/tinyxml2.h	/^    XMLError SaveFile( const char* filename, bool compact = false );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( const char* filename, bool compact = false )
tinyxml2::XMLDocument::SetBOM	support/tinyxml2/tinyxml2.h	/^    void SetBOM( bool useBOM ) {$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( bool useBOM )
tinyxml2::XMLDocument::SetError	support/tinyxml2/tinyxml2.cpp	/^void XMLDocument::SetError( XMLError error, const char* str1, const char* str2 )$/;"	f	class:tinyxml2::XMLDocument	signature:( XMLError error, const char* str1, const char* str2 )
tinyxml2::XMLDocument::SetError	support/tinyxml2/tinyxml2.h	/^    void SetError( XMLError error, const char* str1, const char* str2 );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( XMLError error, const char* str1, const char* str2 )
tinyxml2::XMLDocument::ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* \/*document*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( XMLDocument* ) const
tinyxml2::XMLDocument::ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* \/*compare*\/ ) const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:( const XMLNode* ) const
tinyxml2::XMLDocument::ToDocument	support/tinyxml2/tinyxml2.h	/^    virtual XMLDocument* ToDocument()				{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLDocument::ToDocument	support/tinyxml2/tinyxml2.h	/^    virtual const XMLDocument* ToDocument() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::WhitespaceMode	support/tinyxml2/tinyxml2.h	/^    Whitespace WhitespaceMode() const	{$/;"	f	class:tinyxml2::XMLDocument	access:public	signature:() const
tinyxml2::XMLDocument::XMLDocument	support/tinyxml2/tinyxml2.cpp	/^XMLDocument::XMLDocument( bool processEntities, Whitespace whitespace ) :$/;"	f	class:tinyxml2::XMLDocument	signature:( bool processEntities, Whitespace whitespace )
tinyxml2::XMLDocument::XMLDocument	support/tinyxml2/tinyxml2.h	/^    XMLDocument( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE );$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:( bool processEntities = true, Whitespace = PRESERVE_WHITESPACE )
tinyxml2::XMLDocument::XMLDocument	support/tinyxml2/tinyxml2.h	/^    XMLDocument( const XMLDocument& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
tinyxml2::XMLDocument::_attributePool	support/tinyxml2/tinyxml2.h	/^    MemPoolT< sizeof(XMLAttribute) > _attributePool;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_charBuffer	support/tinyxml2/tinyxml2.h	/^    char*       _charBuffer;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_commentPool	support/tinyxml2/tinyxml2.h	/^    MemPoolT< sizeof(XMLComment) >	 _commentPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_elementPool	support/tinyxml2/tinyxml2.h	/^    MemPoolT< sizeof(XMLElement) >	 _elementPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorID	support/tinyxml2/tinyxml2.h	/^    XMLError    _errorID;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorStr1	support/tinyxml2/tinyxml2.h	/^    const char* _errorStr1;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_errorStr2	support/tinyxml2/tinyxml2.h	/^    const char* _errorStr2;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_processEntities	support/tinyxml2/tinyxml2.h	/^    bool        _processEntities;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_textPool	support/tinyxml2/tinyxml2.h	/^    MemPoolT< sizeof(XMLText) >		 _textPool;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_whitespace	support/tinyxml2/tinyxml2.h	/^    Whitespace  _whitespace;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::_writeBOM	support/tinyxml2/tinyxml2.h	/^    bool        _writeBOM;$/;"	m	class:tinyxml2::XMLDocument	access:private
tinyxml2::XMLDocument::operator =	support/tinyxml2/tinyxml2.h	/^    void operator=( const XMLDocument& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLDocument	access:private	signature:( const XMLDocument& )
tinyxml2::XMLDocument::~XMLDocument	support/tinyxml2/tinyxml2.cpp	/^XMLDocument::~XMLDocument()$/;"	f	class:tinyxml2::XMLDocument	signature:()
tinyxml2::XMLDocument::~XMLDocument	support/tinyxml2/tinyxml2.h	/^    ~XMLDocument();$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:()
tinyxml2::XMLElement	support/tinyxml2/tinyxml2.h	/^class XMLElement : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLElement::Accept	support/tinyxml2/tinyxml2.cpp	/^bool XMLElement::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLElement	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLElement::Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLElement::Attribute	support/tinyxml2/tinyxml2.cpp	/^const char* XMLElement::Attribute( const char* name, const char* value ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name, const char* value ) const
tinyxml2::XMLElement::Attribute	support/tinyxml2/tinyxml2.h	/^    const char* Attribute( const char* name, const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value=0 ) const
tinyxml2::XMLElement::BoolAttribute	support/tinyxml2/tinyxml2.h	/^    bool	 BoolAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::CLOSED	support/tinyxml2/tinyxml2.h	/^        CLOSED,		\/\/ <foo\/>$/;"	e	enum:tinyxml2::XMLElement::__anon41
tinyxml2::XMLElement::CLOSING	support/tinyxml2/tinyxml2.h	/^        CLOSING		\/\/ <\/foo>$/;"	e	enum:tinyxml2::XMLElement::__anon41
tinyxml2::XMLElement::ClosingType	support/tinyxml2/tinyxml2.h	/^    int ClosingType() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::DeleteAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLElement::DeleteAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
tinyxml2::XMLElement::DeleteAttribute	support/tinyxml2/tinyxml2.h	/^    void DeleteAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name )
tinyxml2::XMLElement::DoubleAttribute	support/tinyxml2/tinyxml2.h	/^    double 	 DoubleAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::FindAttribute	support/tinyxml2/tinyxml2.cpp	/^XMLAttribute* XMLElement::FindAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
tinyxml2::XMLElement::FindAttribute	support/tinyxml2/tinyxml2.cpp	/^const XMLAttribute* XMLElement::FindAttribute( const char* name ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name ) const
tinyxml2::XMLElement::FindAttribute	support/tinyxml2/tinyxml2.h	/^    XMLAttribute* FindAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
tinyxml2::XMLElement::FindAttribute	support/tinyxml2/tinyxml2.h	/^    const XMLAttribute* FindAttribute( const char* name ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::FindOrCreateAttribute	support/tinyxml2/tinyxml2.cpp	/^XMLAttribute* XMLElement::FindOrCreateAttribute( const char* name )$/;"	f	class:tinyxml2::XMLElement	signature:( const char* name )
tinyxml2::XMLElement::FindOrCreateAttribute	support/tinyxml2/tinyxml2.h	/^    XMLAttribute* FindOrCreateAttribute( const char* name );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const char* name )
tinyxml2::XMLElement::FirstAttribute	support/tinyxml2/tinyxml2.h	/^    const XMLAttribute* FirstAttribute() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::FloatAttribute	support/tinyxml2/tinyxml2.h	/^    float	 FloatAttribute( const char* name ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::GetText	support/tinyxml2/tinyxml2.cpp	/^const char* XMLElement::GetText() const$/;"	f	class:tinyxml2::XMLElement	signature:() const
tinyxml2::XMLElement::GetText	support/tinyxml2/tinyxml2.h	/^    const char* GetText() const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::IntAttribute	support/tinyxml2/tinyxml2.h	/^    int		 IntAttribute( const char* name ) const		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::Name	support/tinyxml2/tinyxml2.h	/^    const char* Name() const		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::OPEN	support/tinyxml2/tinyxml2.h	/^        OPEN,		\/\/ <foo>$/;"	e	enum:tinyxml2::XMLElement::__anon41
tinyxml2::XMLElement::ParseAttributes	support/tinyxml2/tinyxml2.cpp	/^char* XMLElement::ParseAttributes( char* p )$/;"	f	class:tinyxml2::XMLElement	signature:( char* p )
tinyxml2::XMLElement::ParseAttributes	support/tinyxml2/tinyxml2.h	/^    char* ParseAttributes( char* p );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( char* p )
tinyxml2::XMLElement::ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLElement::ParseDeep( char* p, StrPair* strPair )$/;"	f	class:tinyxml2::XMLElement	signature:( char* p, StrPair* strPair )
tinyxml2::XMLElement::ParseDeep	support/tinyxml2/tinyxml2.h	/^    char* ParseDeep( char* p, StrPair* endTag );$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( char* p, StrPair* endTag )
tinyxml2::XMLElement::QueryBoolAttribute	support/tinyxml2/tinyxml2.h	/^    XMLError QueryBoolAttribute( const char* name, bool* value ) const				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool* value ) const
tinyxml2::XMLElement::QueryBoolText	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLElement::QueryBoolText( bool* bval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( bool* bval ) const
tinyxml2::XMLElement::QueryBoolText	support/tinyxml2/tinyxml2.h	/^    XMLError QueryBoolText( bool* bval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( bool* bval ) const
tinyxml2::XMLElement::QueryDoubleAttribute	support/tinyxml2/tinyxml2.h	/^    XMLError QueryDoubleAttribute( const char* name, double* value ) const			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double* value ) const
tinyxml2::XMLElement::QueryDoubleText	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLElement::QueryDoubleText( double* dval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( double* dval ) const
tinyxml2::XMLElement::QueryDoubleText	support/tinyxml2/tinyxml2.h	/^    XMLError QueryDoubleText( double* dval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( double* dval ) const
tinyxml2::XMLElement::QueryFloatAttribute	support/tinyxml2/tinyxml2.h	/^    XMLError QueryFloatAttribute( const char* name, float* value ) const			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, float* value ) const
tinyxml2::XMLElement::QueryFloatText	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLElement::QueryFloatText( float* fval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( float* fval ) const
tinyxml2::XMLElement::QueryFloatText	support/tinyxml2/tinyxml2.h	/^    XMLError QueryFloatText( float* fval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( float* fval ) const
tinyxml2::XMLElement::QueryIntAttribute	support/tinyxml2/tinyxml2.h	/^    XMLError QueryIntAttribute( const char* name, int* value ) const				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int* value ) const
tinyxml2::XMLElement::QueryIntText	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLElement::QueryIntText( int* ival ) const$/;"	f	class:tinyxml2::XMLElement	signature:( int* ival ) const
tinyxml2::XMLElement::QueryIntText	support/tinyxml2/tinyxml2.h	/^    XMLError QueryIntText( int* ival ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( int* ival ) const
tinyxml2::XMLElement::QueryUnsignedAttribute	support/tinyxml2/tinyxml2.h	/^    XMLError QueryUnsignedAttribute( const char* name, unsigned int* value ) const	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned int* value ) const
tinyxml2::XMLElement::QueryUnsignedText	support/tinyxml2/tinyxml2.cpp	/^XMLError XMLElement::QueryUnsignedText( unsigned* uval ) const$/;"	f	class:tinyxml2::XMLElement	signature:( unsigned* uval ) const
tinyxml2::XMLElement::QueryUnsignedText	support/tinyxml2/tinyxml2.h	/^    XMLError QueryUnsignedText( unsigned* uval ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( unsigned* uval ) const
tinyxml2::XMLElement::SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( const char* name, bool value )			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, bool value )
tinyxml2::XMLElement::SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( const char* name, const char* value )	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, const char* value )
tinyxml2::XMLElement::SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( const char* name, double value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, double value )
tinyxml2::XMLElement::SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( const char* name, int value )			{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, int value )
tinyxml2::XMLElement::SetAttribute	support/tinyxml2/tinyxml2.h	/^    void SetAttribute( const char* name, unsigned value )		{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name, unsigned value )
tinyxml2::XMLElement::SetName	support/tinyxml2/tinyxml2.h	/^    void SetName( const char* str, bool staticMem=false )	{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* str, bool staticMem=false )
tinyxml2::XMLElement::ShallowClone	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLElement::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLElement	signature:( XMLDocument* doc ) const
tinyxml2::XMLElement::ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLElement::ShallowEqual	support/tinyxml2/tinyxml2.cpp	/^bool XMLElement::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLElement	signature:( const XMLNode* compare ) const
tinyxml2::XMLElement::ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLElement	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLElement::ToElement	support/tinyxml2/tinyxml2.h	/^    virtual XMLElement* ToElement()				{$/;"	f	class:tinyxml2::XMLElement	access:public	signature:()
tinyxml2::XMLElement::ToElement	support/tinyxml2/tinyxml2.h	/^    virtual const XMLElement* ToElement() const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:() const
tinyxml2::XMLElement::UnsignedAttribute	support/tinyxml2/tinyxml2.h	/^    unsigned UnsignedAttribute( const char* name ) const {$/;"	f	class:tinyxml2::XMLElement	access:public	signature:( const char* name ) const
tinyxml2::XMLElement::XMLElement	support/tinyxml2/tinyxml2.cpp	/^XMLElement::XMLElement( XMLDocument* doc ) : XMLNode( doc ),$/;"	f	class:tinyxml2::XMLElement	signature:( XMLDocument* doc )
tinyxml2::XMLElement::XMLElement	support/tinyxml2/tinyxml2.h	/^    XMLElement( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( XMLDocument* doc )
tinyxml2::XMLElement::XMLElement	support/tinyxml2/tinyxml2.h	/^    XMLElement( const XMLElement& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
tinyxml2::XMLElement::_closingType	support/tinyxml2/tinyxml2.h	/^    int _closingType;$/;"	m	class:tinyxml2::XMLElement	access:private
tinyxml2::XMLElement::_rootAttribute	support/tinyxml2/tinyxml2.h	/^    XMLAttribute* _rootAttribute;$/;"	m	class:tinyxml2::XMLElement	access:private
tinyxml2::XMLElement::operator =	support/tinyxml2/tinyxml2.h	/^    void operator=( const XMLElement& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLElement	access:private	signature:( const XMLElement& )
tinyxml2::XMLElement::~XMLElement	support/tinyxml2/tinyxml2.cpp	/^XMLElement::~XMLElement()$/;"	f	class:tinyxml2::XMLElement	signature:()
tinyxml2::XMLElement::~XMLElement	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLElement();$/;"	p	class:tinyxml2::XMLElement	access:private	signature:()
tinyxml2::XMLError	support/tinyxml2/tinyxml2.h	/^enum XMLError {$/;"	g	namespace:tinyxml2
tinyxml2::XMLHandle	support/tinyxml2/tinyxml2.h	/^class XMLHandle$/;"	c	namespace:tinyxml2
tinyxml2::XMLHandle::FirstChild	support/tinyxml2/tinyxml2.h	/^    XMLHandle FirstChild() 													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::FirstChildElement	support/tinyxml2/tinyxml2.h	/^    XMLHandle FirstChildElement( const char* value=0 )						{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* value=0 )
tinyxml2::XMLHandle::LastChild	support/tinyxml2/tinyxml2.h	/^    XMLHandle LastChild()													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::LastChildElement	support/tinyxml2/tinyxml2.h	/^    XMLHandle LastChildElement( const char* _value=0 )						{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value=0 )
tinyxml2::XMLHandle::NextSibling	support/tinyxml2/tinyxml2.h	/^    XMLHandle NextSibling()													{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::NextSiblingElement	support/tinyxml2/tinyxml2.h	/^    XMLHandle NextSiblingElement( const char* _value=0 )					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value=0 )
tinyxml2::XMLHandle::PreviousSibling	support/tinyxml2/tinyxml2.h	/^    XMLHandle PreviousSibling()												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::PreviousSiblingElement	support/tinyxml2/tinyxml2.h	/^    XMLHandle PreviousSiblingElement( const char* _value=0 )				{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const char* _value=0 )
tinyxml2::XMLHandle::ToDeclaration	support/tinyxml2/tinyxml2.h	/^    XMLDeclaration* ToDeclaration() 			{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToElement	support/tinyxml2/tinyxml2.h	/^    XMLElement* ToElement() 					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToNode	support/tinyxml2/tinyxml2.h	/^    XMLNode* ToNode()							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToText	support/tinyxml2/tinyxml2.h	/^    XMLText* ToText() 							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::ToUnknown	support/tinyxml2/tinyxml2.h	/^    XMLUnknown* ToUnknown() 					{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:()
tinyxml2::XMLHandle::XMLHandle	support/tinyxml2/tinyxml2.h	/^    XMLHandle( XMLNode& node )												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode& node )
tinyxml2::XMLHandle::XMLHandle	support/tinyxml2/tinyxml2.h	/^    XMLHandle( XMLNode* node )												{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( XMLNode* node )
tinyxml2::XMLHandle::XMLHandle	support/tinyxml2/tinyxml2.h	/^    XMLHandle( const XMLHandle& ref )										{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
tinyxml2::XMLHandle::_node	support/tinyxml2/tinyxml2.h	/^    XMLNode* _node;$/;"	m	class:tinyxml2::XMLHandle	access:private
tinyxml2::XMLHandle::operator =	support/tinyxml2/tinyxml2.h	/^    XMLHandle& operator=( const XMLHandle& ref )							{$/;"	f	class:tinyxml2::XMLHandle	access:public	signature:( const XMLHandle& ref )
tinyxml2::XMLNode	support/tinyxml2/tinyxml2.h	/^class XMLNode$/;"	c	namespace:tinyxml2
tinyxml2::XMLNode::Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLNode::DeleteChild	support/tinyxml2/tinyxml2.cpp	/^void XMLNode::DeleteChild( XMLNode* node )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* node )
tinyxml2::XMLNode::DeleteChild	support/tinyxml2/tinyxml2.h	/^    void DeleteChild( XMLNode* node );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* node )
tinyxml2::XMLNode::DeleteChildren	support/tinyxml2/tinyxml2.cpp	/^void XMLNode::DeleteChildren()$/;"	f	class:tinyxml2::XMLNode	signature:()
tinyxml2::XMLNode::DeleteChildren	support/tinyxml2/tinyxml2.h	/^    void DeleteChildren();$/;"	p	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::FirstChild	support/tinyxml2/tinyxml2.h	/^    XMLNode*		FirstChild()			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::FirstChild	support/tinyxml2/tinyxml2.h	/^    const XMLNode*  FirstChild() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::FirstChildElement	support/tinyxml2/tinyxml2.cpp	/^const XMLElement* XMLNode::FirstChildElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
tinyxml2::XMLNode::FirstChildElement	support/tinyxml2/tinyxml2.h	/^    XMLElement* FirstChildElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
tinyxml2::XMLNode::FirstChildElement	support/tinyxml2/tinyxml2.h	/^    const XMLElement* FirstChildElement( const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
tinyxml2::XMLNode::GetDocument	support/tinyxml2/tinyxml2.h	/^    XMLDocument* GetDocument()				{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::GetDocument	support/tinyxml2/tinyxml2.h	/^    const XMLDocument* GetDocument() const	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::InsertAfterChild	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLNode::InsertAfterChild( XMLNode* afterThis, XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* afterThis, XMLNode* addThis )
tinyxml2::XMLNode::InsertAfterChild	support/tinyxml2/tinyxml2.h	/^    XMLNode* InsertAfterChild( XMLNode* afterThis, XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* afterThis, XMLNode* addThis )
tinyxml2::XMLNode::InsertEndChild	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLNode::InsertEndChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* addThis )
tinyxml2::XMLNode::InsertEndChild	support/tinyxml2/tinyxml2.h	/^    XMLNode* InsertEndChild( XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
tinyxml2::XMLNode::InsertFirstChild	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLNode::InsertFirstChild( XMLNode* addThis )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* addThis )
tinyxml2::XMLNode::InsertFirstChild	support/tinyxml2/tinyxml2.h	/^    XMLNode* InsertFirstChild( XMLNode* addThis );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
tinyxml2::XMLNode::LastChild	support/tinyxml2/tinyxml2.h	/^    XMLNode*		LastChild()								{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::LastChild	support/tinyxml2/tinyxml2.h	/^    const XMLNode*	LastChild() const						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::LastChildElement	support/tinyxml2/tinyxml2.cpp	/^const XMLElement* XMLNode::LastChildElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
tinyxml2::XMLNode::LastChildElement	support/tinyxml2/tinyxml2.h	/^    XMLElement* LastChildElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
tinyxml2::XMLNode::LastChildElement	support/tinyxml2/tinyxml2.h	/^    const XMLElement* LastChildElement( const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
tinyxml2::XMLNode::LinkEndChild	support/tinyxml2/tinyxml2.h	/^    XMLNode* LinkEndChild( XMLNode* addThis )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( XMLNode* addThis )
tinyxml2::XMLNode::NextSibling	support/tinyxml2/tinyxml2.h	/^    XMLNode*	NextSibling()								{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::NextSibling	support/tinyxml2/tinyxml2.h	/^    const XMLNode*	NextSibling() const						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::NextSiblingElement	support/tinyxml2/tinyxml2.cpp	/^const XMLElement* XMLNode::NextSiblingElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
tinyxml2::XMLNode::NextSiblingElement	support/tinyxml2/tinyxml2.h	/^    XMLElement*	NextSiblingElement( const char* value=0 )	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
tinyxml2::XMLNode::NextSiblingElement	support/tinyxml2/tinyxml2.h	/^    const XMLElement*	NextSiblingElement( const char* value=0 ) const;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
tinyxml2::XMLNode::NoChildren	support/tinyxml2/tinyxml2.h	/^    bool NoChildren() const					{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::Parent	support/tinyxml2/tinyxml2.h	/^    XMLNode* Parent()						{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::Parent	support/tinyxml2/tinyxml2.h	/^    const XMLNode*	Parent() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLNode::ParseDeep( char* p, StrPair* parentEnd )$/;"	f	class:tinyxml2::XMLNode	signature:( char* p, StrPair* parentEnd )
tinyxml2::XMLNode::ParseDeep	support/tinyxml2/tinyxml2.h	/^    virtual char* ParseDeep( char*, StrPair* );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( char*, StrPair* )
tinyxml2::XMLNode::PreviousSibling	support/tinyxml2/tinyxml2.h	/^    XMLNode*	PreviousSibling()							{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::PreviousSibling	support/tinyxml2/tinyxml2.h	/^    const XMLNode*	PreviousSibling() const					{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::PreviousSiblingElement	support/tinyxml2/tinyxml2.cpp	/^const XMLElement* XMLNode::PreviousSiblingElement( const char* value ) const$/;"	f	class:tinyxml2::XMLNode	signature:( const char* value ) const
tinyxml2::XMLNode::PreviousSiblingElement	support/tinyxml2/tinyxml2.h	/^    XMLElement*	PreviousSiblingElement( const char* value=0 ) {$/;"	f	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 )
tinyxml2::XMLNode::PreviousSiblingElement	support/tinyxml2/tinyxml2.h	/^    const XMLElement*	PreviousSiblingElement( const char* value=0 ) const ;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* value=0 ) const
tinyxml2::XMLNode::SetValue	support/tinyxml2/tinyxml2.cpp	/^void XMLNode::SetValue( const char* str, bool staticMem )$/;"	f	class:tinyxml2::XMLNode	signature:( const char* str, bool staticMem )
tinyxml2::XMLNode::SetValue	support/tinyxml2/tinyxml2.h	/^    void SetValue( const char* val, bool staticMem=false );$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const char* val, bool staticMem=false )
tinyxml2::XMLNode::ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLNode::ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const = 0;$/;"	p	class:tinyxml2::XMLNode	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLNode::ToComment	support/tinyxml2/tinyxml2.h	/^    virtual XMLComment*		ToComment()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToComment	support/tinyxml2/tinyxml2.h	/^    virtual const XMLComment*		ToComment() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToDeclaration	support/tinyxml2/tinyxml2.h	/^    virtual XMLDeclaration*	ToDeclaration()	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToDeclaration	support/tinyxml2/tinyxml2.h	/^    virtual const XMLDeclaration*	ToDeclaration() const	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToDocument	support/tinyxml2/tinyxml2.h	/^    virtual XMLDocument*	ToDocument()	{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToDocument	support/tinyxml2/tinyxml2.h	/^    virtual const XMLDocument*		ToDocument() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToElement	support/tinyxml2/tinyxml2.h	/^    virtual XMLElement*		ToElement()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToElement	support/tinyxml2/tinyxml2.h	/^    virtual const XMLElement*		ToElement() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToText	support/tinyxml2/tinyxml2.h	/^    virtual XMLText*		ToText()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToText	support/tinyxml2/tinyxml2.h	/^    virtual const XMLText*			ToText() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::ToUnknown	support/tinyxml2/tinyxml2.h	/^    virtual XMLUnknown*		ToUnknown()		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:()
tinyxml2::XMLNode::ToUnknown	support/tinyxml2/tinyxml2.h	/^    virtual const XMLUnknown*		ToUnknown() const		{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::Unlink	support/tinyxml2/tinyxml2.cpp	/^void XMLNode::Unlink( XMLNode* child )$/;"	f	class:tinyxml2::XMLNode	signature:( XMLNode* child )
tinyxml2::XMLNode::Unlink	support/tinyxml2/tinyxml2.h	/^    void Unlink( XMLNode* child );$/;"	p	class:tinyxml2::XMLNode	access:private	signature:( XMLNode* child )
tinyxml2::XMLNode::Value	support/tinyxml2/tinyxml2.h	/^    const char* Value() const			{$/;"	f	class:tinyxml2::XMLNode	access:public	signature:() const
tinyxml2::XMLNode::XMLNode	support/tinyxml2/tinyxml2.cpp	/^XMLNode::XMLNode( XMLDocument* doc ) :$/;"	f	class:tinyxml2::XMLNode	signature:( XMLDocument* doc )
tinyxml2::XMLNode::XMLNode	support/tinyxml2/tinyxml2.h	/^    XMLNode( XMLDocument* );$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( XMLDocument* )
tinyxml2::XMLNode::XMLNode	support/tinyxml2/tinyxml2.h	/^    XMLNode( const XMLNode& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( const XMLNode& )
tinyxml2::XMLNode::_document	support/tinyxml2/tinyxml2.h	/^    XMLDocument*	_document;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_firstChild	support/tinyxml2/tinyxml2.h	/^    XMLNode*		_firstChild;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_lastChild	support/tinyxml2/tinyxml2.h	/^    XMLNode*		_lastChild;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_memPool	support/tinyxml2/tinyxml2.h	/^    MemPool*		_memPool;$/;"	m	class:tinyxml2::XMLNode	access:private
tinyxml2::XMLNode::_next	support/tinyxml2/tinyxml2.h	/^    XMLNode*		_next;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_parent	support/tinyxml2/tinyxml2.h	/^    XMLNode*		_parent;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_prev	support/tinyxml2/tinyxml2.h	/^    XMLNode*		_prev;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::_value	support/tinyxml2/tinyxml2.h	/^    mutable StrPair	_value;$/;"	m	class:tinyxml2::XMLNode	access:protected
tinyxml2::XMLNode::operator =	support/tinyxml2/tinyxml2.h	/^    XMLNode& operator=( const XMLNode& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:( const XMLNode& )
tinyxml2::XMLNode::~XMLNode	support/tinyxml2/tinyxml2.cpp	/^XMLNode::~XMLNode()$/;"	f	class:tinyxml2::XMLNode	signature:()
tinyxml2::XMLNode::~XMLNode	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLNode();$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:()
tinyxml2::XMLPrinter	support/tinyxml2/tinyxml2.h	/^class XMLPrinter : public XMLVisitor$/;"	c	namespace:tinyxml2	inherits:XMLVisitor
tinyxml2::XMLPrinter::BUF_SIZE	support/tinyxml2/tinyxml2.h	/^        BUF_SIZE = 200$/;"	e	enum:tinyxml2::XMLPrinter::__anon42
tinyxml2::XMLPrinter::CStr	support/tinyxml2/tinyxml2.h	/^    const char* CStr() const {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:() const
tinyxml2::XMLPrinter::CStrSize	support/tinyxml2/tinyxml2.h	/^    int CStrSize() const {$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:() const
tinyxml2::XMLPrinter::CloseElement	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::CloseElement()$/;"	f	class:tinyxml2::XMLPrinter	signature:()
tinyxml2::XMLPrinter::CloseElement	support/tinyxml2/tinyxml2.h	/^    void CloseElement();$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:()
tinyxml2::XMLPrinter::ENTITY_RANGE	support/tinyxml2/tinyxml2.h	/^        ENTITY_RANGE = 64,$/;"	e	enum:tinyxml2::XMLPrinter::__anon42
tinyxml2::XMLPrinter::OpenElement	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::OpenElement( const char* name )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name )
tinyxml2::XMLPrinter::OpenElement	support/tinyxml2/tinyxml2.h	/^    void OpenElement( const char* name );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name )
tinyxml2::XMLPrinter::Print	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::Print( const char* format, ... )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* format, ... )
tinyxml2::XMLPrinter::Print	support/tinyxml2/tinyxml2.h	/^    void Print( const char* format, ... );$/;"	p	class:tinyxml2::XMLPrinter	access:private	signature:( const char* format, ... )
tinyxml2::XMLPrinter::PrintSpace	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PrintSpace( int depth )$/;"	f	class:tinyxml2::XMLPrinter	signature:( int depth )
tinyxml2::XMLPrinter::PrintSpace	support/tinyxml2/tinyxml2.h	/^    void PrintSpace( int depth );$/;"	p	class:tinyxml2::XMLPrinter	access:private	signature:( int depth )
tinyxml2::XMLPrinter::PrintString	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PrintString( const char* p, bool restricted )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* p, bool restricted )
tinyxml2::XMLPrinter::PrintString	support/tinyxml2/tinyxml2.h	/^    void PrintString( const char*, bool restrictedEntitySet );	\/\/ prints out, after detecting entities.$/;"	p	class:tinyxml2::XMLPrinter	access:private	signature:( const char*, bool restrictedEntitySet )
tinyxml2::XMLPrinter::PushAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, bool v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, bool v )
tinyxml2::XMLPrinter::PushAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, const char* value )
tinyxml2::XMLPrinter::PushAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, double v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, double v )
tinyxml2::XMLPrinter::PushAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, int v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, int v )
tinyxml2::XMLPrinter::PushAttribute	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushAttribute( const char* name, unsigned v )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* name, unsigned v )
tinyxml2::XMLPrinter::PushAttribute	support/tinyxml2/tinyxml2.h	/^    void PushAttribute( const char* name, bool value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, bool value )
tinyxml2::XMLPrinter::PushAttribute	support/tinyxml2/tinyxml2.h	/^    void PushAttribute( const char* name, const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, const char* value )
tinyxml2::XMLPrinter::PushAttribute	support/tinyxml2/tinyxml2.h	/^    void PushAttribute( const char* name, double value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, double value )
tinyxml2::XMLPrinter::PushAttribute	support/tinyxml2/tinyxml2.h	/^    void PushAttribute( const char* name, int value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, int value )
tinyxml2::XMLPrinter::PushAttribute	support/tinyxml2/tinyxml2.h	/^    void PushAttribute( const char* name, unsigned value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* name, unsigned value )
tinyxml2::XMLPrinter::PushComment	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushComment( const char* comment )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* comment )
tinyxml2::XMLPrinter::PushComment	support/tinyxml2/tinyxml2.h	/^    void PushComment( const char* comment );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* comment )
tinyxml2::XMLPrinter::PushDeclaration	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushDeclaration( const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* value )
tinyxml2::XMLPrinter::PushDeclaration	support/tinyxml2/tinyxml2.h	/^    void PushDeclaration( const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
tinyxml2::XMLPrinter::PushHeader	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushHeader( bool writeBOM, bool writeDec )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool writeBOM, bool writeDec )
tinyxml2::XMLPrinter::PushHeader	support/tinyxml2/tinyxml2.h	/^    void PushHeader( bool writeBOM, bool writeDeclaration );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool writeBOM, bool writeDeclaration )
tinyxml2::XMLPrinter::PushText	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushText( bool value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( bool value )
tinyxml2::XMLPrinter::PushText	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushText( const char* text, bool cdata )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* text, bool cdata )
tinyxml2::XMLPrinter::PushText	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushText( double value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( double value )
tinyxml2::XMLPrinter::PushText	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushText( float value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( float value )
tinyxml2::XMLPrinter::PushText	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushText( int value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( int value )
tinyxml2::XMLPrinter::PushText	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushText( unsigned value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( unsigned value )
tinyxml2::XMLPrinter::PushText	support/tinyxml2/tinyxml2.h	/^    void PushText( bool value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( bool value )
tinyxml2::XMLPrinter::PushText	support/tinyxml2/tinyxml2.h	/^    void PushText( const char* text, bool cdata=false );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* text, bool cdata=false )
tinyxml2::XMLPrinter::PushText	support/tinyxml2/tinyxml2.h	/^    void PushText( double value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( double value )
tinyxml2::XMLPrinter::PushText	support/tinyxml2/tinyxml2.h	/^    void PushText( float value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( float value )
tinyxml2::XMLPrinter::PushText	support/tinyxml2/tinyxml2.h	/^    void PushText( int value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( int value )
tinyxml2::XMLPrinter::PushText	support/tinyxml2/tinyxml2.h	/^    void PushText( unsigned value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( unsigned value )
tinyxml2::XMLPrinter::PushUnknown	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::PushUnknown( const char* value )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const char* value )
tinyxml2::XMLPrinter::PushUnknown	support/tinyxml2/tinyxml2.h	/^    void PushUnknown( const char* value );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const char* value )
tinyxml2::XMLPrinter::SealElement	support/tinyxml2/tinyxml2.cpp	/^void XMLPrinter::SealElement()$/;"	f	class:tinyxml2::XMLPrinter	signature:()
tinyxml2::XMLPrinter::SealElement	support/tinyxml2/tinyxml2.h	/^    void SealElement();$/;"	p	class:tinyxml2::XMLPrinter	access:private	signature:()
tinyxml2::XMLPrinter::Visit	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLComment& comment )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLComment& comment )
tinyxml2::XMLPrinter::Visit	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLDeclaration& declaration )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLDeclaration& declaration )
tinyxml2::XMLPrinter::Visit	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLText& text )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLText& text )
tinyxml2::XMLPrinter::Visit	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::Visit( const XMLUnknown& unknown )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLUnknown& unknown )
tinyxml2::XMLPrinter::Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLComment& comment );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLComment& comment )
tinyxml2::XMLPrinter::Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLDeclaration& declaration );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDeclaration& declaration )
tinyxml2::XMLPrinter::Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLText& text );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLText& text )
tinyxml2::XMLPrinter::Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLUnknown& unknown );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLUnknown& unknown )
tinyxml2::XMLPrinter::VisitEnter	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLDocument& doc )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLDocument& doc )
tinyxml2::XMLPrinter::VisitEnter	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::VisitEnter( const XMLElement& element, const XMLAttribute* attribute )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLElement& element, const XMLAttribute* attribute )
tinyxml2::XMLPrinter::VisitEnter	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
tinyxml2::XMLPrinter::VisitEnter	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitEnter( const XMLElement& element, const XMLAttribute* attribute );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element, const XMLAttribute* attribute )
tinyxml2::XMLPrinter::VisitExit	support/tinyxml2/tinyxml2.cpp	/^bool XMLPrinter::VisitExit( const XMLElement& )$/;"	f	class:tinyxml2::XMLPrinter	signature:( const XMLElement& )
tinyxml2::XMLPrinter::VisitExit	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLDocument& )
tinyxml2::XMLPrinter::VisitExit	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitExit( const XMLElement& element );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( const XMLElement& element )
tinyxml2::XMLPrinter::XMLPrinter	support/tinyxml2/tinyxml2.cpp	/^XMLPrinter::XMLPrinter( FILE* file, bool compact ) :$/;"	f	class:tinyxml2::XMLPrinter	signature:( FILE* file, bool compact )
tinyxml2::XMLPrinter::XMLPrinter	support/tinyxml2/tinyxml2.h	/^    XMLPrinter( FILE* file=0, bool compact = false );$/;"	p	class:tinyxml2::XMLPrinter	access:public	signature:( FILE* file=0, bool compact = false )
tinyxml2::XMLPrinter::_accumulator	support/tinyxml2/tinyxml2.h	/^    DynArray< char, 20 > _accumulator;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_buffer	support/tinyxml2/tinyxml2.h	/^    DynArray< char, 20 > _buffer;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_compactMode	support/tinyxml2/tinyxml2.h	/^    bool _compactMode;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_depth	support/tinyxml2/tinyxml2.h	/^    int _depth;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_elementJustOpened	support/tinyxml2/tinyxml2.h	/^    bool _elementJustOpened;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_entityFlag	support/tinyxml2/tinyxml2.h	/^    bool _entityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_firstElement	support/tinyxml2/tinyxml2.h	/^    bool _firstElement;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_fp	support/tinyxml2/tinyxml2.h	/^    FILE* _fp;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_processEntities	support/tinyxml2/tinyxml2.h	/^    bool _processEntities;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_restrictedEntityFlag	support/tinyxml2/tinyxml2.h	/^    bool _restrictedEntityFlag[ENTITY_RANGE];$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_stack	support/tinyxml2/tinyxml2.h	/^    DynArray< const char*, 10 > _stack;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::_textDepth	support/tinyxml2/tinyxml2.h	/^    int _textDepth;$/;"	m	class:tinyxml2::XMLPrinter	access:private
tinyxml2::XMLPrinter::~XMLPrinter	support/tinyxml2/tinyxml2.h	/^    ~XMLPrinter()	{}$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:()
tinyxml2::XMLText	support/tinyxml2/tinyxml2.h	/^class XMLText : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLText::Accept	support/tinyxml2/tinyxml2.cpp	/^bool XMLText::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLText	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLText::Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLText::CData	support/tinyxml2/tinyxml2.h	/^    bool CData() const						{$/;"	f	class:tinyxml2::XMLText	access:public	signature:() const
tinyxml2::XMLText::ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLText::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLText	signature:( char* p, StrPair* )
tinyxml2::XMLText::ParseDeep	support/tinyxml2/tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLText	access:public	signature:( char*, StrPair* endTag )
tinyxml2::XMLText::SetCData	support/tinyxml2/tinyxml2.h	/^    void SetCData( bool isCData )			{$/;"	f	class:tinyxml2::XMLText	access:public	signature:( bool isCData )
tinyxml2::XMLText::ShallowClone	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLText::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLText	signature:( XMLDocument* doc ) const
tinyxml2::XMLText::ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLText::ShallowEqual	support/tinyxml2/tinyxml2.cpp	/^bool XMLText::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLText	signature:( const XMLNode* compare ) const
tinyxml2::XMLText::ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLText	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLText::ToText	support/tinyxml2/tinyxml2.h	/^    virtual XMLText* ToText()			{$/;"	f	class:tinyxml2::XMLText	access:public	signature:()
tinyxml2::XMLText::ToText	support/tinyxml2/tinyxml2.h	/^    virtual const XMLText* ToText() const	{$/;"	f	class:tinyxml2::XMLText	access:public	signature:() const
tinyxml2::XMLText::XMLText	support/tinyxml2/tinyxml2.h	/^    XMLText( XMLDocument* doc )	: XMLNode( doc ), _isCData( false )	{}$/;"	f	class:tinyxml2::XMLText	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLText::XMLText	support/tinyxml2/tinyxml2.h	/^    XMLText( const XMLText& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLText	access:protected	signature:( const XMLText& )
tinyxml2::XMLText::_isCData	support/tinyxml2/tinyxml2.h	/^    bool _isCData;$/;"	m	class:tinyxml2::XMLText	access:private
tinyxml2::XMLText::operator =	support/tinyxml2/tinyxml2.h	/^    XMLText& operator=( const XMLText& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLText	access:protected	signature:( const XMLText& )
tinyxml2::XMLText::~XMLText	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLText()												{}$/;"	f	class:tinyxml2::XMLText	access:protected	signature:()
tinyxml2::XMLUnknown	support/tinyxml2/tinyxml2.h	/^class XMLUnknown : public XMLNode$/;"	c	namespace:tinyxml2	inherits:XMLNode
tinyxml2::XMLUnknown::Accept	support/tinyxml2/tinyxml2.cpp	/^bool XMLUnknown::Accept( XMLVisitor* visitor ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLUnknown::Accept	support/tinyxml2/tinyxml2.h	/^    virtual bool Accept( XMLVisitor* visitor ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLVisitor* visitor ) const
tinyxml2::XMLUnknown::ParseDeep	support/tinyxml2/tinyxml2.cpp	/^char* XMLUnknown::ParseDeep( char* p, StrPair* )$/;"	f	class:tinyxml2::XMLUnknown	signature:( char* p, StrPair* )
tinyxml2::XMLUnknown::ParseDeep	support/tinyxml2/tinyxml2.h	/^    char* ParseDeep( char*, StrPair* endTag );$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( char*, StrPair* endTag )
tinyxml2::XMLUnknown::ShallowClone	support/tinyxml2/tinyxml2.cpp	/^XMLNode* XMLUnknown::ShallowClone( XMLDocument* doc ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLDocument* doc ) const
tinyxml2::XMLUnknown::ShallowClone	support/tinyxml2/tinyxml2.h	/^    virtual XMLNode* ShallowClone( XMLDocument* document ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( XMLDocument* document ) const
tinyxml2::XMLUnknown::ShallowEqual	support/tinyxml2/tinyxml2.cpp	/^bool XMLUnknown::ShallowEqual( const XMLNode* compare ) const$/;"	f	class:tinyxml2::XMLUnknown	signature:( const XMLNode* compare ) const
tinyxml2::XMLUnknown::ShallowEqual	support/tinyxml2/tinyxml2.h	/^    virtual bool ShallowEqual( const XMLNode* compare ) const;$/;"	p	class:tinyxml2::XMLUnknown	access:public	signature:( const XMLNode* compare ) const
tinyxml2::XMLUnknown::ToUnknown	support/tinyxml2/tinyxml2.h	/^    virtual XMLUnknown*	ToUnknown()					{$/;"	f	class:tinyxml2::XMLUnknown	access:public	signature:()
tinyxml2::XMLUnknown::ToUnknown	support/tinyxml2/tinyxml2.h	/^    virtual const XMLUnknown* ToUnknown() const		{$/;"	f	class:tinyxml2::XMLUnknown	access:public	signature:() const
tinyxml2::XMLUnknown::XMLUnknown	support/tinyxml2/tinyxml2.cpp	/^XMLUnknown::XMLUnknown( XMLDocument* doc ) : XMLNode( doc )$/;"	f	class:tinyxml2::XMLUnknown	signature:( XMLDocument* doc )
tinyxml2::XMLUnknown::XMLUnknown	support/tinyxml2/tinyxml2.h	/^    XMLUnknown( XMLDocument* doc );$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( XMLDocument* doc )
tinyxml2::XMLUnknown::XMLUnknown	support/tinyxml2/tinyxml2.h	/^    XMLUnknown( const XMLUnknown& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( const XMLUnknown& )
tinyxml2::XMLUnknown::operator =	support/tinyxml2/tinyxml2.h	/^    XMLUnknown& operator=( const XMLUnknown& );	\/\/ not supported$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:( const XMLUnknown& )
tinyxml2::XMLUnknown::~XMLUnknown	support/tinyxml2/tinyxml2.cpp	/^XMLUnknown::~XMLUnknown()$/;"	f	class:tinyxml2::XMLUnknown	signature:()
tinyxml2::XMLUnknown::~XMLUnknown	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLUnknown();$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:()
tinyxml2::XMLUtil	support/tinyxml2/tinyxml2.h	/^class XMLUtil$/;"	c	namespace:tinyxml2
tinyxml2::XMLUtil::ConvertUTF32ToUTF8	support/tinyxml2/tinyxml2.cpp	/^void XMLUtil::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:tinyxml2::XMLUtil	signature:( unsigned long input, char* output, int* length )
tinyxml2::XMLUtil::ConvertUTF32ToUTF8	support/tinyxml2/tinyxml2.h	/^    static void ConvertUTF32ToUTF8( unsigned long input, char* output, int* length );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned long input, char* output, int* length )
tinyxml2::XMLUtil::GetCharacterRef	support/tinyxml2/tinyxml2.cpp	/^const char* XMLUtil::GetCharacterRef( const char* p, char* value, int* length )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* p, char* value, int* length )
tinyxml2::XMLUtil::GetCharacterRef	support/tinyxml2/tinyxml2.h	/^    static const char* GetCharacterRef( const char* p, char* value, int* length );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, char* value, int* length )
tinyxml2::XMLUtil::IsAlpha	support/tinyxml2/tinyxml2.h	/^    inline static int IsAlpha( unsigned char anyByte )		{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char anyByte )
tinyxml2::XMLUtil::IsAlphaNum	support/tinyxml2/tinyxml2.h	/^    inline static int IsAlphaNum( unsigned char anyByte )	{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( unsigned char anyByte )
tinyxml2::XMLUtil::IsUTF8Continuation	support/tinyxml2/tinyxml2.h	/^    inline static int IsUTF8Continuation( const char p ) {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char p )
tinyxml2::XMLUtil::IsWhiteSpace	support/tinyxml2/tinyxml2.h	/^    static bool IsWhiteSpace( char p )					{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char p )
tinyxml2::XMLUtil::ReadBOM	support/tinyxml2/tinyxml2.cpp	/^const char* XMLUtil::ReadBOM( const char* p, bool* bom )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* p, bool* bom )
tinyxml2::XMLUtil::ReadBOM	support/tinyxml2/tinyxml2.h	/^    static const char* ReadBOM( const char* p, bool* hasBOM );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, bool* hasBOM )
tinyxml2::XMLUtil::SkipWhiteSpace	support/tinyxml2/tinyxml2.h	/^    static char* SkipWhiteSpace( char* p )				{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( char* p )
tinyxml2::XMLUtil::SkipWhiteSpace	support/tinyxml2/tinyxml2.h	/^    static const char* SkipWhiteSpace( const char* p )	{$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p )
tinyxml2::XMLUtil::StringEqual	support/tinyxml2/tinyxml2.h	/^    inline static bool StringEqual( const char* p, const char* q, int nChar=INT_MAX )  {$/;"	f	class:tinyxml2::XMLUtil	access:public	signature:( const char* p, const char* q, int nChar=INT_MAX )
tinyxml2::XMLUtil::ToBool	support/tinyxml2/tinyxml2.cpp	/^bool XMLUtil::ToBool( const char* str, bool* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, bool* value )
tinyxml2::XMLUtil::ToBool	support/tinyxml2/tinyxml2.h	/^    static bool	ToBool( const char* str, bool* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, bool* value )
tinyxml2::XMLUtil::ToDouble	support/tinyxml2/tinyxml2.cpp	/^bool XMLUtil::ToDouble( const char* str, double* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, double* value )
tinyxml2::XMLUtil::ToDouble	support/tinyxml2/tinyxml2.h	/^    static bool ToDouble( const char* str, double* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, double* value )
tinyxml2::XMLUtil::ToFloat	support/tinyxml2/tinyxml2.cpp	/^bool XMLUtil::ToFloat( const char* str, float* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, float* value )
tinyxml2::XMLUtil::ToFloat	support/tinyxml2/tinyxml2.h	/^    static bool	ToFloat( const char* str, float* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, float* value )
tinyxml2::XMLUtil::ToInt	support/tinyxml2/tinyxml2.cpp	/^bool XMLUtil::ToInt( const char* str, int* value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, int* value )
tinyxml2::XMLUtil::ToInt	support/tinyxml2/tinyxml2.h	/^    static bool	ToInt( const char* str, int* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, int* value )
tinyxml2::XMLUtil::ToStr	support/tinyxml2/tinyxml2.cpp	/^void XMLUtil::ToStr( bool v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( bool v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	support/tinyxml2/tinyxml2.cpp	/^void XMLUtil::ToStr( double v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( double v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	support/tinyxml2/tinyxml2.cpp	/^void XMLUtil::ToStr( float v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( float v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	support/tinyxml2/tinyxml2.cpp	/^void XMLUtil::ToStr( int v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( int v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	support/tinyxml2/tinyxml2.cpp	/^void XMLUtil::ToStr( unsigned v, char* buffer, int bufferSize )$/;"	f	class:tinyxml2::XMLUtil	signature:( unsigned v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	support/tinyxml2/tinyxml2.h	/^    static void ToStr( bool v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( bool v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	support/tinyxml2/tinyxml2.h	/^    static void ToStr( double v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( double v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	support/tinyxml2/tinyxml2.h	/^    static void ToStr( float v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( float v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	support/tinyxml2/tinyxml2.h	/^    static void ToStr( int v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( int v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToStr	support/tinyxml2/tinyxml2.h	/^    static void ToStr( unsigned v, char* buffer, int bufferSize );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( unsigned v, char* buffer, int bufferSize )
tinyxml2::XMLUtil::ToUnsigned	support/tinyxml2/tinyxml2.cpp	/^bool XMLUtil::ToUnsigned( const char* str, unsigned *value )$/;"	f	class:tinyxml2::XMLUtil	signature:( const char* str, unsigned *value )
tinyxml2::XMLUtil::ToUnsigned	support/tinyxml2/tinyxml2.h	/^    static bool ToUnsigned( const char* str, unsigned* value );$/;"	p	class:tinyxml2::XMLUtil	access:public	signature:( const char* str, unsigned* value )
tinyxml2::XMLVisitor	support/tinyxml2/tinyxml2.h	/^class XMLVisitor$/;"	c	namespace:tinyxml2
tinyxml2::XMLVisitor::Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLComment& \/*comment*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLComment& )
tinyxml2::XMLVisitor::Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLDeclaration& \/*declaration*\/ )		{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDeclaration& )
tinyxml2::XMLVisitor::Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLText& \/*text*\/ )					{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLText& )
tinyxml2::XMLVisitor::Visit	support/tinyxml2/tinyxml2.h	/^    virtual bool Visit( const XMLUnknown& \/*unknown*\/ )				{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLUnknown& )
tinyxml2::XMLVisitor::VisitEnter	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitEnter( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
tinyxml2::XMLVisitor::VisitEnter	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitEnter( const XMLElement& \/*element*\/, const XMLAttribute* \/*firstAttribute*\/ )	{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& , const XMLAttribute* )
tinyxml2::XMLVisitor::VisitExit	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitExit( const XMLDocument& \/*doc*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLDocument& )
tinyxml2::XMLVisitor::VisitExit	support/tinyxml2/tinyxml2.h	/^    virtual bool VisitExit( const XMLElement& \/*element*\/ )			{$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:( const XMLElement& )
tinyxml2::XMLVisitor::~XMLVisitor	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLVisitor() {}$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:()
tinyxml2::XML_CAN_NOT_CONVERT_TEXT	support/tinyxml2/tinyxml2.h	/^    XML_CAN_NOT_CONVERT_TEXT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_ELEMENT_MISMATCH	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_ELEMENT_MISMATCH,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_EMPTY_DOCUMENT	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_EMPTY_DOCUMENT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_FILE_COULD_NOT_BE_OPENED	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_FILE_COULD_NOT_BE_OPENED,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_FILE_NOT_FOUND	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_FILE_NOT_FOUND,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_FILE_READ_ERROR	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_FILE_READ_ERROR,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_IDENTIFYING_TAG	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_IDENTIFYING_TAG,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_MISMATCHED_ELEMENT	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_MISMATCHED_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_ATTRIBUTE	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_CDATA	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_CDATA,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_COMMENT	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_COMMENT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_DECLARATION	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_DECLARATION,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_ELEMENT	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_ELEMENT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_TEXT	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_TEXT,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_ERROR_PARSING_UNKNOWN	support/tinyxml2/tinyxml2.h	/^    XML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_NO_ATTRIBUTE	support/tinyxml2/tinyxml2.h	/^    XML_NO_ATTRIBUTE,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_NO_ERROR	support/tinyxml2/tinyxml2.h	/^    XML_NO_ERROR = 0,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_NO_TEXT_NODE	support/tinyxml2/tinyxml2.h	/^    XML_NO_TEXT_NODE$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_SUCCESS	support/tinyxml2/tinyxml2.h	/^    XML_SUCCESS = 0,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::XML_WRONG_ATTRIBUTE_TYPE	support/tinyxml2/tinyxml2.h	/^    XML_WRONG_ATTRIBUTE_TYPE,$/;"	e	enum:tinyxml2::XMLError
tinyxml2::entities	support/tinyxml2/tinyxml2.cpp	/^static const Entity entities[NUM_ENTITIES] = {$/;"	m	namespace:tinyxml2	file:
tl	include/ccTypes.h	/^    ccTex2F    tl;$/;"	m	struct:_ccT2F_Quad	access:public
tl	include/ccTypes.h	/^    ccV2F_C4B_T2F    tl;$/;"	m	struct:_ccV2F_C4B_T2F_Quad	access:public
tl	include/ccTypes.h	/^    ccV2F_C4F_T2F    tl;$/;"	m	struct:_ccV2F_C4F_T2F_Quad	access:public
tl	include/ccTypes.h	/^    ccV3F_C4B_T2F    tl;$/;"	m	struct:_ccV3F_C4B_T2F_Quad	access:public
tl	include/ccTypes.h	/^    ccVertex2F        tl;$/;"	m	struct:_ccQuad2	access:public
tl	include/ccTypes.h	/^    ccVertex3F        tl;$/;"	m	struct:_ccQuad3	access:public
tm_hour	support/zip_support/unzip.h	/^    uInt tm_hour;           \/* hours since midnight - [0,23] *\/$/;"	m	struct:cocos2d::tm_unz_s	access:public
tm_mday	support/zip_support/unzip.h	/^    uInt tm_mday;           \/* day of the month - [1,31] *\/$/;"	m	struct:cocos2d::tm_unz_s	access:public
tm_min	support/zip_support/unzip.h	/^    uInt tm_min;            \/* minutes after the hour - [0,59] *\/$/;"	m	struct:cocos2d::tm_unz_s	access:public
tm_mon	support/zip_support/unzip.h	/^    uInt tm_mon;            \/* months since January - [0,11] *\/$/;"	m	struct:cocos2d::tm_unz_s	access:public
tm_sec	support/zip_support/unzip.h	/^    uInt tm_sec;            \/* seconds after the minute - [0,59] *\/$/;"	m	struct:cocos2d::tm_unz_s	access:public
tm_unz	support/zip_support/unzip.h	/^} tm_unz;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::tm_unz_s
tm_unz_s	support/zip_support/unzip.h	/^typedef struct tm_unz_s$/;"	s	namespace:cocos2d
tm_year	support/zip_support/unzip.h	/^    uInt tm_year;           \/* years - [1980..2044] *\/$/;"	m	struct:cocos2d::tm_unz_s	access:public
tmu_date	support/zip_support/unzip.h	/^    tm_unz tmu_date;$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
tmu_date	support/zip_support/unzip.h	/^    tm_unz tmu_date;$/;"	m	struct:cocos2d::unz_file_info_s	access:public
top	kazmath/include/kazmath/GL/mat4stack.h	/^    kmMat4* top;$/;"	m	struct:km_mat4_stack	access:public
top	label_nodes/CCLabelBMFont.h	/^    int top;$/;"	m	struct:_BMFontPadding	access:public
totalTime	support/CCProfiling.h	/^    double            totalTime;$/;"	m	class:CCProfilingTimer	access:public
total_out_64	support/zip_support/unzip.cpp	/^    ZPOS64_T total_out_64;$/;"	m	struct:cocos2d::__anon43	file:	access:public
touches	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touches(CCSet *pTouches, CCEvent *pEvent, unsigned int uIndex)$/;"	f	class:CCTouchDispatcher	signature:(CCSet *pTouches, CCEvent *pEvent, unsigned int uIndex)
touches	touch_dispatcher/CCTouchDispatcher.h	/^    void touches(CCSet *pTouches, CCEvent *pEvent, unsigned int uIndex);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCSet *pTouches, CCEvent *pEvent, unsigned int uIndex)
touchesBegan	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touchesBegan(CCSet *touches, CCEvent *pEvent)$/;"	f	class:CCTouchDispatcher	signature:(CCSet *touches, CCEvent *pEvent)
touchesBegan	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesBegan(CCSet* touches, CCEvent* pEvent) = 0;$/;"	p	class:EGLTouchDelegate	access:public	signature:(CCSet* touches, CCEvent* pEvent)
touchesBegan	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesBegan(CCSet* touches, CCEvent* pEvent);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCSet* touches, CCEvent* pEvent)
touchesCancelled	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touchesCancelled(CCSet *touches, CCEvent *pEvent)$/;"	f	class:CCTouchDispatcher	signature:(CCSet *touches, CCEvent *pEvent)
touchesCancelled	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesCancelled(CCSet* touches, CCEvent* pEvent) = 0;$/;"	p	class:EGLTouchDelegate	access:public	signature:(CCSet* touches, CCEvent* pEvent)
touchesCancelled	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesCancelled(CCSet* touches, CCEvent* pEvent);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCSet* touches, CCEvent* pEvent)
touchesEnded	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touchesEnded(CCSet *touches, CCEvent *pEvent)$/;"	f	class:CCTouchDispatcher	signature:(CCSet *touches, CCEvent *pEvent)
touchesEnded	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesEnded(CCSet* touches, CCEvent* pEvent) = 0;$/;"	p	class:EGLTouchDelegate	access:public	signature:(CCSet* touches, CCEvent* pEvent)
touchesEnded	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesEnded(CCSet* touches, CCEvent* pEvent);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCSet* touches, CCEvent* pEvent)
touchesMoved	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touchesMoved(CCSet *touches, CCEvent *pEvent)$/;"	f	class:CCTouchDispatcher	signature:(CCSet *touches, CCEvent *pEvent)
touchesMoved	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesMoved(CCSet* touches, CCEvent* pEvent) = 0;$/;"	p	class:EGLTouchDelegate	access:public	signature:(CCSet* touches, CCEvent* pEvent)
touchesMoved	touch_dispatcher/CCTouchDispatcher.h	/^    virtual void touchesMoved(CCSet* touches, CCEvent* pEvent);$/;"	p	class:CCTouchDispatcher	access:public	signature:(CCSet* touches, CCEvent* pEvent)
tr	include/ccTypes.h	/^    ccTex2F    tr;$/;"	m	struct:_ccT2F_Quad	access:public
tr	include/ccTypes.h	/^    ccV2F_C4B_T2F    tr;$/;"	m	struct:_ccV2F_C4B_T2F_Quad	access:public
tr	include/ccTypes.h	/^    ccV2F_C4F_T2F    tr;$/;"	m	struct:_ccV2F_C4F_T2F_Quad	access:public
tr	include/ccTypes.h	/^    ccV3F_C4B_T2F    tr;$/;"	m	struct:_ccV3F_C4B_T2F_Quad	access:public
tr	include/ccTypes.h	/^    ccVertex2F        tr;$/;"	m	struct:_ccQuad2	access:public
tr	include/ccTypes.h	/^    ccVertex3F        tr;$/;"	m	struct:_ccQuad3	access:public
transform	base_nodes/CCNode.cpp	/^void CCNode::transform()$/;"	f	class:CCNode	signature:()
transform	base_nodes/CCNode.h	/^    void transform(void);$/;"	p	class:CCNode	access:public	signature:(void)
transformAncestors	base_nodes/CCNode.cpp	/^void CCNode::transformAncestors()$/;"	f	class:CCNode	signature:()
transformAncestors	base_nodes/CCNode.h	/^    void transformAncestors(void);$/;"	p	class:CCNode	access:public	signature:(void)
transformTile	actions/CCActionTiledGrid.cpp	/^void CCFadeOutTRTiles::transformTile(const CCPoint& pos, float distance)$/;"	f	class:CCFadeOutTRTiles	signature:(const CCPoint& pos, float distance)
transformTile	actions/CCActionTiledGrid.cpp	/^void CCFadeOutUpTiles::transformTile(const CCPoint& pos, float distance)$/;"	f	class:CCFadeOutUpTiles	signature:(const CCPoint& pos, float distance)
transformTile	actions/CCActionTiledGrid.h	/^    virtual void transformTile(const CCPoint& pos, float distance);$/;"	p	class:CCFadeOutTRTiles	access:public	signature:(const CCPoint& pos, float distance)
transformTile	actions/CCActionTiledGrid.h	/^    virtual void transformTile(const CCPoint& pos, float distance);$/;"	p	class:CCFadeOutUpTiles	access:public	signature:(const CCPoint& pos, float distance)
turnOffTile	actions/CCActionTiledGrid.cpp	/^void CCFadeOutTRTiles::turnOffTile(const CCPoint& pos)$/;"	f	class:CCFadeOutTRTiles	signature:(const CCPoint& pos)
turnOffTile	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::turnOffTile(const CCPoint& pos)$/;"	f	class:CCTurnOffTiles	signature:(const CCPoint& pos)
turnOffTile	actions/CCActionTiledGrid.h	/^    void turnOffTile(const CCPoint& pos);$/;"	p	class:CCFadeOutTRTiles	access:public	signature:(const CCPoint& pos)
turnOffTile	actions/CCActionTiledGrid.h	/^    void turnOffTile(const CCPoint& pos);$/;"	p	class:CCTurnOffTiles	access:public	signature:(const CCPoint& pos)
turnOnTile	actions/CCActionTiledGrid.cpp	/^void CCFadeOutTRTiles::turnOnTile(const CCPoint& pos)$/;"	f	class:CCFadeOutTRTiles	signature:(const CCPoint& pos)
turnOnTile	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::turnOnTile(const CCPoint& pos)$/;"	f	class:CCTurnOffTiles	signature:(const CCPoint& pos)
turnOnTile	actions/CCActionTiledGrid.h	/^    void turnOnTile(const CCPoint& pos);$/;"	p	class:CCFadeOutTRTiles	access:public	signature:(const CCPoint& pos)
turnOnTile	actions/CCActionTiledGrid.h	/^    void turnOnTile(const CCPoint& pos);$/;"	p	class:CCTurnOffTiles	access:public	signature:(const CCPoint& pos)
tv_sec	platform/platform.h	/^    time_t    tv_sec;        \/\/ seconds$/;"	m	struct:cc_timeval	access:public
tv_usec	platform/platform.h	/^    long    tv_usec;    \/\/ microSeconds$/;"	m	struct:cc_timeval	access:public
tx	cocoa/CCAffineTransform.h	/^  float tx, ty;$/;"	m	struct:CCAffineTransform	access:public
ty	cocoa/CCAffineTransform.h	/^  float tx, ty;$/;"	m	struct:CCAffineTransform	access:public
type	support/image_support/TGAlib.h	/^    unsigned char type, pixelDepth;$/;"	m	struct:cocos2d::sImageTGA	access:public
type	textures/CCTexturePVR.h	/^	GLenum type;$/;"	m	struct:_ccPVRTexturePixelFormatInfo	access:public
u	include/ccTypes.h	/^     GLfloat u;$/;"	m	struct:_ccTex2F	access:public
uiImage	textures/CCTextureCache.h	/^    CCImage *uiImage;$/;"	m	class:VolatileTexture	access:protected
uintValue	cocoa/CCString.cpp	/^unsigned int CCString::uintValue() const$/;"	f	class:CCString	signature:() const
uintValue	cocoa/CCString.h	/^    unsigned int uintValue() const;$/;"	p	class:CCString	access:public	signature:() const
uncompressed_size	support/zip_support/ZipUtils.cpp	/^    uLong uncompressed_size;$/;"	m	struct:ZipEntryInfo	file:	access:public
uncompressed_size	support/zip_support/unzip.h	/^    ZPOS64_T uncompressed_size; \/* uncompressed size               8 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
uncompressed_size	support/zip_support/unzip.h	/^    uLong uncompressed_size;    \/* uncompressed size               4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
unpackPVRv2Data	textures/CCTexturePVR.h	/^    bool unpackPVRv2Data(unsigned char* data, unsigned int len);$/;"	p	class:CCTexturePVR	access:private	signature:(unsigned char* data, unsigned int len)
unpackPVRv3Data	textures/CCTexturePVR.h	/^    bool unpackPVRv3Data(unsigned char* dataPointer, unsigned int dataLength);$/;"	p	class:CCTexturePVR	access:private	signature:(unsigned char* dataPointer, unsigned int dataLength)
unregisterScriptAccelerateHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::unregisterScriptAccelerateHandler(void)$/;"	f	class:CCLayer	signature:(void)
unregisterScriptAccelerateHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    void unregisterScriptAccelerateHandler(void);$/;"	p	class:CCLayer	access:public	signature:(void)
unregisterScriptHandler	base_nodes/CCNode.cpp	/^void CCNode::unregisterScriptHandler(void)$/;"	f	class:CCNode	signature:(void)
unregisterScriptHandler	base_nodes/CCNode.h	/^    virtual void unregisterScriptHandler(void);$/;"	p	class:CCNode	access:public	signature:(void)
unregisterScriptKeypadHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::unregisterScriptKeypadHandler(void)$/;"	f	class:CCLayer	signature:(void)
unregisterScriptKeypadHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    void unregisterScriptKeypadHandler(void);$/;"	p	class:CCLayer	access:public	signature:(void)
unregisterScriptObserver	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::unregisterScriptObserver(void)$/;"	f	class:CCNotificationCenter	signature:(void)
unregisterScriptObserver	support/CCNotificationCenter.h	/^    void unregisterScriptObserver(void);$/;"	p	class:CCNotificationCenter	access:public	signature:(void)
unregisterScriptTapHandler	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::unregisterScriptTapHandler(void)$/;"	f	class:CCMenuItem	signature:(void)
unregisterScriptTapHandler	menu_nodes/CCMenuItem.h	/^    virtual void unregisterScriptTapHandler(void);$/;"	p	class:CCMenuItem	access:public	signature:(void)
unregisterScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::unregisterScriptTouchHandler(void)$/;"	f	class:CCLayer	signature:(void)
unregisterScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void unregisterScriptTouchHandler(void);$/;"	p	class:CCLayer	access:public	signature:(void)
unschedule	base_nodes/CCNode.cpp	/^void CCNode::unschedule(SEL_SCHEDULE selector)$/;"	f	class:CCNode	signature:(SEL_SCHEDULE selector)
unschedule	base_nodes/CCNode.h	/^    void unschedule(SEL_SCHEDULE selector);$/;"	p	class:CCNode	access:public	signature:(SEL_SCHEDULE selector)
unscheduleAll	CCScheduler.cpp	/^void CCScheduler::unscheduleAll(void)$/;"	f	class:CCScheduler	signature:(void)
unscheduleAll	CCScheduler.h	/^    void unscheduleAll(void);$/;"	p	class:CCScheduler	access:public	signature:(void)
unscheduleAllForTarget	CCScheduler.cpp	/^void CCScheduler::unscheduleAllForTarget(CCObject *pTarget)$/;"	f	class:CCScheduler	signature:(CCObject *pTarget)
unscheduleAllForTarget	CCScheduler.h	/^    void unscheduleAllForTarget(CCObject *pTarget);$/;"	p	class:CCScheduler	access:public	signature:(CCObject *pTarget)
unscheduleAllSelectors	base_nodes/CCNode.cpp	/^void CCNode::unscheduleAllSelectors()$/;"	f	class:CCNode	signature:()
unscheduleAllSelectors	base_nodes/CCNode.h	/^    void unscheduleAllSelectors(void);$/;"	p	class:CCNode	access:public	signature:(void)
unscheduleAllWithMinPriority	CCScheduler.cpp	/^void CCScheduler::unscheduleAllWithMinPriority(int nMinPriority)$/;"	f	class:CCScheduler	signature:(int nMinPriority)
unscheduleAllWithMinPriority	CCScheduler.h	/^    void unscheduleAllWithMinPriority(int nMinPriority);$/;"	p	class:CCScheduler	access:public	signature:(int nMinPriority)
unscheduleScriptEntry	CCScheduler.cpp	/^void CCScheduler::unscheduleScriptEntry(unsigned int uScheduleScriptEntryID)$/;"	f	class:CCScheduler	signature:(unsigned int uScheduleScriptEntryID)
unscheduleScriptEntry	CCScheduler.h	/^    void unscheduleScriptEntry(unsigned int uScheduleScriptEntryID);$/;"	p	class:CCScheduler	access:public	signature:(unsigned int uScheduleScriptEntryID)
unscheduleSelector	CCScheduler.cpp	/^void CCScheduler::unscheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget)$/;"	f	class:CCScheduler	signature:(SEL_SCHEDULE pfnSelector, CCObject *pTarget)
unscheduleSelector	CCScheduler.h	/^    void unscheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget);$/;"	p	class:CCScheduler	access:public	signature:(SEL_SCHEDULE pfnSelector, CCObject *pTarget)
unscheduleUpdate	base_nodes/CCNode.cpp	/^void CCNode::unscheduleUpdate()$/;"	f	class:CCNode	signature:()
unscheduleUpdate	base_nodes/CCNode.h	/^    void unscheduleUpdate(void);$/;"	p	class:CCNode	access:public	signature:(void)
unscheduleUpdateForTarget	CCScheduler.cpp	/^void CCScheduler::unscheduleUpdateForTarget(const CCObject *pTarget)$/;"	f	class:CCScheduler	signature:(const CCObject *pTarget)
unscheduleUpdateForTarget	CCScheduler.h	/^    void unscheduleUpdateForTarget(const CCObject *pTarget);$/;"	p	class:CCScheduler	access:public	signature:(const CCObject *pTarget)
unselected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::unselected()$/;"	f	class:CCMenuItem	signature:()
unselected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::unselected()$/;"	f	class:CCMenuItemLabel	signature:()
unselected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::unselected()$/;"	f	class:CCMenuItemSprite	signature:()
unselected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::unselected()$/;"	f	class:CCMenuItemToggle	signature:()
unselected	menu_nodes/CCMenuItem.h	/^    virtual void unselected();$/;"	p	class:CCMenuItem	access:public	signature:()
unselected	menu_nodes/CCMenuItem.h	/^    virtual void unselected();$/;"	p	class:CCMenuItemLabel	access:public	signature:()
unselected	menu_nodes/CCMenuItem.h	/^    virtual void unselected();$/;"	p	class:CCMenuItemSprite	access:public	signature:()
unselected	menu_nodes/CCMenuItem.h	/^    virtual void unselected();$/;"	p	class:CCMenuItemToggle	access:public	signature:()
unused	support/zip_support/unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	m	struct:TagunzFile__	access:public
unz64_file_pos	support/zip_support/unzip.h	/^} unz64_file_pos;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz64_file_pos_s
unz64_file_pos_s	support/zip_support/unzip.h	/^typedef struct unz64_file_pos_s$/;"	s	namespace:cocos2d
unz64_s	support/zip_support/unzip.cpp	/^} unz64_s;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::__anon44	file:
unz64local_CheckCurrentFileCoherencyHeader	support/zip_support/unzip.cpp	/^local int unz64local_CheckCurrentFileCoherencyHeader (unz64_s* s, uInt* piSizeVar,$/;"	f	namespace:cocos2d	signature:(unz64_s* s, uInt* piSizeVar, ZPOS64_T * poffset_local_extrafield, uInt * psize_local_extrafield)
unz64local_DosDateToTmuDate	support/zip_support/unzip.cpp	/^local void unz64local_DosDateToTmuDate (ZPOS64_T ulDosDate, tm_unz* ptm)$/;"	f	namespace:cocos2d	signature:(ZPOS64_T ulDosDate, tm_unz* ptm)
unz64local_GetCurrentFileInfoInternal	support/zip_support/unzip.cpp	/^local int unz64local_GetCurrentFileInfoInternal (unzFile file,$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_file_info64 *pfile_info, unz_file_info64_internal *pfile_info_internal, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)
unz64local_GetCurrentFileInfoInternal	support/zip_support/unzip.cpp	/^local int unz64local_GetCurrentFileInfoInternal OF((unzFile file,$/;"	p	namespace:cocos2d	file:	signature:(unzFile file, unz_file_info64 *pfile_info, unz_file_info64_internal *pfile_info_internal, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)
unz64local_SearchCentralDir	support/zip_support/unzip.cpp	/^local ZPOS64_T unz64local_SearchCentralDir OF((const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream));$/;"	p	namespace:cocos2d	file:	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
unz64local_SearchCentralDir	support/zip_support/unzip.cpp	/^local ZPOS64_T unz64local_SearchCentralDir(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
unz64local_SearchCentralDir64	support/zip_support/unzip.cpp	/^local ZPOS64_T unz64local_SearchCentralDir64 OF(($/;"	p	namespace:cocos2d	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
unz64local_SearchCentralDir64	support/zip_support/unzip.cpp	/^local ZPOS64_T unz64local_SearchCentralDir64(const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)
unz64local_getByte	support/zip_support/unzip.cpp	/^local int unz64local_getByte OF(($/;"	p	namespace:cocos2d	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int *pi)
unz64local_getByte	support/zip_support/unzip.cpp	/^local int unz64local_getByte(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int *pi)$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int *pi)
unz64local_getLong	support/zip_support/unzip.cpp	/^local int unz64local_getLong (const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
unz64local_getLong	support/zip_support/unzip.cpp	/^local int unz64local_getLong OF(($/;"	p	namespace:cocos2d	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
unz64local_getLong64	support/zip_support/unzip.cpp	/^local int unz64local_getLong64 (const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX)
unz64local_getLong64	support/zip_support/unzip.cpp	/^local int unz64local_getLong64 OF(($/;"	p	namespace:cocos2d	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, ZPOS64_T *pX)
unz64local_getShort	support/zip_support/unzip.cpp	/^local int unz64local_getShort (const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	namespace:cocos2d	signature:(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
unz64local_getShort	support/zip_support/unzip.cpp	/^local int unz64local_getShort OF(($/;"	p	namespace:cocos2d	file:	signature:( const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, uLong *pX)
unzClose	support/zip_support/unzip.cpp	/^int ZEXPORT unzClose (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
unzClose	support/zip_support/unzip.h	/^int CC_DLL unzClose OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
unzCloseCurrentFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzCloseCurrentFile (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
unzCloseCurrentFile	support/zip_support/unzip.h	/^int CC_DLL unzCloseCurrentFile OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
unzFile	support/zip_support/unzip.h	/^typedef unzFile__ *unzFile;$/;"	t
unzFile	support/zip_support/unzip.h	/^typedef voidp unzFile;$/;"	t
unzFile__	support/zip_support/unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	t	typeref:struct:TagunzFile__
unzGetCurrentFileInfo	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetCurrentFileInfo (unzFile file,$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_file_info * pfile_info, char * szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char* szComment, uLong commentBufferSize)
unzGetCurrentFileInfo	support/zip_support/unzip.h	/^int CC_DLL unzGetCurrentFileInfo OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, unz_file_info *pfile_info, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)
unzGetCurrentFileInfo64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetCurrentFileInfo64 (unzFile file,$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_file_info64 * pfile_info, char * szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char* szComment, uLong commentBufferSize)
unzGetCurrentFileInfo64	support/zip_support/unzip.h	/^int CC_DLL unzGetCurrentFileInfo64 OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, unz_file_info64 *pfile_info, char *szFileName, uLong fileNameBufferSize, void *extraField, uLong extraFieldBufferSize, char *szComment, uLong commentBufferSize)
unzGetCurrentFileZStreamPos64	support/zip_support/unzip.cpp	/^ZPOS64_T ZEXPORT unzGetCurrentFileZStreamPos64( unzFile file)$/;"	f	namespace:cocos2d	signature:( unzFile file)
unzGetCurrentFileZStreamPos64	support/zip_support/unzip.h	/^ZPOS64_T CC_DLL unzGetCurrentFileZStreamPos64 OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
unzGetFilePos	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetFilePos($/;"	f	namespace:cocos2d	signature:( unzFile file, unz_file_pos* file_pos)
unzGetFilePos	support/zip_support/unzip.h	/^int CC_DLL unzGetFilePos($/;"	p	namespace:cocos2d	signature:( unzFile file, unz_file_pos* file_pos)
unzGetFilePos64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetFilePos64(unzFile file, unz64_file_pos*  file_pos)$/;"	f	namespace:cocos2d	signature:(unzFile file, unz64_file_pos* file_pos)
unzGetFilePos64	support/zip_support/unzip.h	/^int CC_DLL unzGetFilePos64($/;"	p	namespace:cocos2d	signature:( unzFile file, unz64_file_pos* file_pos)
unzGetGlobalComment	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetGlobalComment (unzFile file, char * szComment, uLong uSizeBuf)$/;"	f	namespace:cocos2d	signature:(unzFile file, char * szComment, uLong uSizeBuf)
unzGetGlobalComment	support/zip_support/unzip.h	/^int CC_DLL unzGetGlobalComment OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, char *szComment, uLong uSizeBuf)
unzGetGlobalInfo	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetGlobalInfo (unzFile file, unz_global_info* pglobal_info32)$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_global_info* pglobal_info32)
unzGetGlobalInfo	support/zip_support/unzip.h	/^int CC_DLL unzGetGlobalInfo OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, unz_global_info *pglobal_info)
unzGetGlobalInfo64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetGlobalInfo64 (unzFile file, unz_global_info64* pglobal_info)$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_global_info64* pglobal_info)
unzGetGlobalInfo64	support/zip_support/unzip.h	/^int CC_DLL unzGetGlobalInfo64 OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, unz_global_info64 *pglobal_info)
unzGetLocalExtrafield	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetLocalExtrafield (unzFile file, voidp buf, unsigned len)$/;"	f	namespace:cocos2d	signature:(unzFile file, voidp buf, unsigned len)
unzGetLocalExtrafield	support/zip_support/unzip.h	/^int CC_DLL unzGetLocalExtrafield OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, voidp buf, unsigned len)
unzGetOffset	support/zip_support/unzip.cpp	/^uLong ZEXPORT unzGetOffset (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
unzGetOffset	support/zip_support/unzip.h	/^uLong CC_DLL unzGetOffset (unzFile file);$/;"	p	namespace:cocos2d	signature:(unzFile file)
unzGetOffset64	support/zip_support/unzip.cpp	/^ZPOS64_T ZEXPORT unzGetOffset64(unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
unzGetOffset64	support/zip_support/unzip.h	/^ZPOS64_T CC_DLL unzGetOffset64 (unzFile file);$/;"	p	namespace:cocos2d	signature:(unzFile file)
unzGoToFilePos	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToFilePos($/;"	f	namespace:cocos2d	signature:( unzFile file, unz_file_pos* file_pos)
unzGoToFilePos	support/zip_support/unzip.h	/^int CC_DLL unzGoToFilePos($/;"	p	namespace:cocos2d	signature:( unzFile file, unz_file_pos* file_pos)
unzGoToFilePos64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToFilePos64(unzFile file, const unz64_file_pos* file_pos)$/;"	f	namespace:cocos2d	signature:(unzFile file, const unz64_file_pos* file_pos)
unzGoToFilePos64	support/zip_support/unzip.h	/^int CC_DLL unzGoToFilePos64($/;"	p	namespace:cocos2d	signature:( unzFile file, const unz64_file_pos* file_pos)
unzGoToFirstFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToFirstFile (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
unzGoToFirstFile	support/zip_support/unzip.h	/^int CC_DLL unzGoToFirstFile OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
unzGoToFirstFile64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToFirstFile64 (unzFile file,$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_file_info64 *pfile_info, char *szFileName, uLong fileNameBufferSize)
unzGoToFirstFile64	support/zip_support/unzip.h	/^int CC_DLL unzGoToFirstFile64 OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, unz_file_info64 *pfile_info, char *szFileName, uLong fileNameBufferSize)
unzGoToNextFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToNextFile (unzFile  file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
unzGoToNextFile	support/zip_support/unzip.h	/^int CC_DLL unzGoToNextFile OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
unzGoToNextFile64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToNextFile64 (unzFile file,$/;"	f	namespace:cocos2d	signature:(unzFile file, unz_file_info64 *pfile_info, char *szFileName, uLong fileNameBufferSize)
unzGoToNextFile64	support/zip_support/unzip.h	/^int CC_DLL unzGoToNextFile64 OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, unz_file_info64 *pfile_info, char *szFileName, uLong fileNameBufferSize)
unzLocateFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzLocateFile (unzFile file, const char *szFileName, int iCaseSensitivity)$/;"	f	namespace:cocos2d	signature:(unzFile file, const char *szFileName, int iCaseSensitivity)
unzLocateFile	support/zip_support/unzip.h	/^int CC_DLL unzLocateFile OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, const char *szFileName, int iCaseSensitivity)
unzOpen	support/zip_support/unzip.cpp	/^unzFile ZEXPORT unzOpen (const char *path)$/;"	f	namespace:cocos2d	signature:(const char *path)
unzOpen	support/zip_support/unzip.h	/^unzFile CC_DLL unzOpen OF((const char *path));$/;"	p	namespace:cocos2d	signature:(const char *path)
unzOpen2	support/zip_support/unzip.cpp	/^unzFile ZEXPORT unzOpen2 (const char *path,$/;"	f	namespace:cocos2d	signature:(const char *path, zlib_filefunc_def* pzlib_filefunc32_def)
unzOpen2	support/zip_support/unzip.h	/^unzFile CC_DLL unzOpen2 OF((const char *path,$/;"	p	namespace:cocos2d	signature:(const char *path, zlib_filefunc_def* pzlib_filefunc_def)
unzOpen2_64	support/zip_support/unzip.cpp	/^unzFile ZEXPORT unzOpen2_64 (const void *path,$/;"	f	namespace:cocos2d	signature:(const void *path, zlib_filefunc64_def* pzlib_filefunc_def)
unzOpen2_64	support/zip_support/unzip.h	/^unzFile CC_DLL unzOpen2_64 OF((const void *path,$/;"	p	namespace:cocos2d	signature:(const void *path, zlib_filefunc64_def* pzlib_filefunc_def)
unzOpen64	support/zip_support/unzip.cpp	/^unzFile ZEXPORT unzOpen64 (const void *path)$/;"	f	namespace:cocos2d	signature:(const void *path)
unzOpen64	support/zip_support/unzip.h	/^unzFile CC_DLL unzOpen64 OF((const void *path));$/;"	p	namespace:cocos2d	signature:(const void *path)
unzOpenCurrentFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzOpenCurrentFile (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
unzOpenCurrentFile	support/zip_support/unzip.h	/^int CC_DLL unzOpenCurrentFile OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
unzOpenCurrentFile2	support/zip_support/unzip.cpp	/^int ZEXPORT unzOpenCurrentFile2 (unzFile file, int* method, int* level, int raw)$/;"	f	namespace:cocos2d	signature:(unzFile file, int* method, int* level, int raw)
unzOpenCurrentFile2	support/zip_support/unzip.h	/^int CC_DLL unzOpenCurrentFile2 OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, int* method, int* level, int raw)
unzOpenCurrentFile3	support/zip_support/unzip.cpp	/^int ZEXPORT unzOpenCurrentFile3 (unzFile file, int* method,$/;"	f	namespace:cocos2d	signature:(unzFile file, int* method, int* level, int raw, const char* password)
unzOpenCurrentFile3	support/zip_support/unzip.h	/^int CC_DLL unzOpenCurrentFile3 OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, int* method, int* level, int raw, const char* password)
unzOpenCurrentFilePassword	support/zip_support/unzip.cpp	/^int ZEXPORT unzOpenCurrentFilePassword (unzFile file, const char*  password)$/;"	f	namespace:cocos2d	signature:(unzFile file, const char* password)
unzOpenCurrentFilePassword	support/zip_support/unzip.h	/^int CC_DLL unzOpenCurrentFilePassword OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, const char* password)
unzOpenInternal	support/zip_support/unzip.cpp	/^local unzFile unzOpenInternal (const void *path,$/;"	f	namespace:cocos2d	signature:(const void *path, zlib_filefunc64_32_def* pzlib_filefunc64_32_def, int is64bitOpenFunction)
unzReadCurrentFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzReadCurrentFile  (unzFile file, voidp buf, unsigned len)$/;"	f	namespace:cocos2d	signature:(unzFile file, voidp buf, unsigned len)
unzReadCurrentFile	support/zip_support/unzip.h	/^int CC_DLL unzReadCurrentFile OF((unzFile file,$/;"	p	namespace:cocos2d	signature:(unzFile file, voidp buf, unsigned len)
unzSetOffset	support/zip_support/unzip.cpp	/^int ZEXPORT unzSetOffset (unzFile file, uLong pos)$/;"	f	namespace:cocos2d	signature:(unzFile file, uLong pos)
unzSetOffset	support/zip_support/unzip.h	/^int CC_DLL unzSetOffset (unzFile file, uLong pos);$/;"	p	namespace:cocos2d	signature:(unzFile file, uLong pos)
unzSetOffset64	support/zip_support/unzip.cpp	/^int ZEXPORT unzSetOffset64(unzFile file, ZPOS64_T pos)$/;"	f	namespace:cocos2d	signature:(unzFile file, ZPOS64_T pos)
unzSetOffset64	support/zip_support/unzip.h	/^int CC_DLL unzSetOffset64 (unzFile file, ZPOS64_T pos);$/;"	p	namespace:cocos2d	signature:(unzFile file, ZPOS64_T pos)
unzStringFileNameCompare	support/zip_support/unzip.cpp	/^int ZEXPORT unzStringFileNameCompare (const char*  fileName1,$/;"	f	namespace:cocos2d	signature:(const char* fileName1, const char* fileName2, int iCaseSensitivity)
unzStringFileNameCompare	support/zip_support/unzip.h	/^int CC_DLL unzStringFileNameCompare OF ((const char* fileName1,$/;"	p	namespace:cocos2d	signature:(const char* fileName1, const char* fileName2, int iCaseSensitivity)
unz_copyright	support/zip_support/unzip.cpp	/^const char unz_copyright[] =$/;"	m	namespace:cocos2d	file:
unz_file_info	support/zip_support/unzip.h	/^} unz_file_info;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_file_info_s
unz_file_info64	support/zip_support/unzip.h	/^} unz_file_info64;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_file_info64_s
unz_file_info64_internal	support/zip_support/unzip.cpp	/^} unz_file_info64_internal;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_file_info64_internal_s	file:
unz_file_info64_internal_s	support/zip_support/unzip.cpp	/^typedef struct unz_file_info64_internal_s$/;"	s	namespace:cocos2d	file:
unz_file_info64_s	support/zip_support/unzip.h	/^typedef struct unz_file_info64_s$/;"	s	namespace:cocos2d
unz_file_info_s	support/zip_support/unzip.h	/^typedef struct unz_file_info_s$/;"	s	namespace:cocos2d
unz_file_pos	support/zip_support/unzip.h	/^} unz_file_pos;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_file_pos_s
unz_file_pos_s	support/zip_support/unzip.h	/^typedef struct unz_file_pos_s$/;"	s	namespace:cocos2d
unz_global_info	support/zip_support/unzip.h	/^} unz_global_info;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_global_info_s
unz_global_info64	support/zip_support/unzip.h	/^} unz_global_info64;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_global_info64_s
unz_global_info64_s	support/zip_support/unzip.h	/^typedef struct unz_global_info64_s$/;"	s	namespace:cocos2d
unz_global_info_s	support/zip_support/unzip.h	/^typedef struct unz_global_info_s$/;"	s	namespace:cocos2d
unzeof	support/zip_support/unzip.cpp	/^int ZEXPORT unzeof (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
unzeof	support/zip_support/unzip.h	/^int CC_DLL unzeof OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
unztell	support/zip_support/unzip.cpp	/^z_off_t ZEXPORT unztell (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
unztell	support/zip_support/unzip.h	/^z_off_t CC_DLL unztell OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
unztell64	support/zip_support/unzip.cpp	/^ZPOS64_T ZEXPORT unztell64 (unzFile file)$/;"	f	namespace:cocos2d	signature:(unzFile file)
unztell64	support/zip_support/unzip.h	/^ZPOS64_T CC_DLL unztell64 OF((unzFile file));$/;"	p	namespace:cocos2d	signature:(unzFile file)
update	CCScheduler.cpp	/^void CCScheduler::update(float dt)$/;"	f	class:CCScheduler	signature:(float dt)
update	CCScheduler.cpp	/^void CCTimer::update(float dt)$/;"	f	class:CCTimer	signature:(float dt)
update	CCScheduler.h	/^    void update(float dt);$/;"	p	class:CCScheduler	access:public	signature:(float dt)
update	CCScheduler.h	/^    void update(float dt);$/;"	p	class:CCTimer	access:public	signature:(float dt)
update	actions/CCAction.cpp	/^void CCAction::update(float time)$/;"	f	class:CCAction	signature:(float time)
update	actions/CCAction.h	/^    virtual void update(float time);$/;"	p	class:CCAction	access:public	signature:(float time)
update	actions/CCActionCamera.cpp	/^void CCOrbitCamera::update(float dt)$/;"	f	class:CCOrbitCamera	signature:(float dt)
update	actions/CCActionCamera.h	/^    virtual void update(float time);$/;"	p	class:CCOrbitCamera	access:public	signature:(float time)
update	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineTo::update(float time)$/;"	f	class:CCCardinalSplineTo	signature:(float time)
update	actions/CCActionCatmullRom.h	/^    virtual void update(float time);$/;"	p	class:CCCardinalSplineTo	access:public	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCActionEase::update(float time)$/;"	f	class:CCActionEase	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseBackIn::update(float time)$/;"	f	class:CCEaseBackIn	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseBackInOut::update(float time)$/;"	f	class:CCEaseBackInOut	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseBackOut::update(float time)$/;"	f	class:CCEaseBackOut	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseBounceIn::update(float time)$/;"	f	class:CCEaseBounceIn	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseBounceInOut::update(float time)$/;"	f	class:CCEaseBounceInOut	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseBounceOut::update(float time)$/;"	f	class:CCEaseBounceOut	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseElasticIn::update(float time)$/;"	f	class:CCEaseElasticIn	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseElasticInOut::update(float time)$/;"	f	class:CCEaseElasticInOut	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseElasticOut::update(float time)$/;"	f	class:CCEaseElasticOut	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseExponentialIn::update(float time)$/;"	f	class:CCEaseExponentialIn	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseExponentialInOut::update(float time)$/;"	f	class:CCEaseExponentialInOut	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseExponentialOut::update(float time)$/;"	f	class:CCEaseExponentialOut	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseIn::update(float time)$/;"	f	class:CCEaseIn	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseInOut::update(float time)$/;"	f	class:CCEaseInOut	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseOut::update(float time)$/;"	f	class:CCEaseOut	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseSineIn::update(float time)$/;"	f	class:CCEaseSineIn	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseSineInOut::update(float time)$/;"	f	class:CCEaseSineInOut	signature:(float time)
update	actions/CCActionEase.cpp	/^void CCEaseSineOut::update(float time)$/;"	f	class:CCEaseSineOut	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCActionEase	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseBackIn	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseBackInOut	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseBackOut	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseBounceIn	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseBounceInOut	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseBounceOut	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseElasticIn	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseElasticInOut	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseElasticOut	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseExponentialIn	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseExponentialInOut	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseExponentialOut	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseIn	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseInOut	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseOut	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseSineIn	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseSineInOut	access:public	signature:(float time)
update	actions/CCActionEase.h	/^    virtual void update(float time);$/;"	p	class:CCEaseSineOut	access:public	signature:(float time)
update	actions/CCActionGrid.cpp	/^void CCAccelAmplitude::update(float time)$/;"	f	class:CCAccelAmplitude	signature:(float time)
update	actions/CCActionGrid.cpp	/^void CCAccelDeccelAmplitude::update(float time)$/;"	f	class:CCAccelDeccelAmplitude	signature:(float time)
update	actions/CCActionGrid.cpp	/^void CCDeccelAmplitude::update(float time)$/;"	f	class:CCDeccelAmplitude	signature:(float time)
update	actions/CCActionGrid.h	/^    virtual void update(float time);$/;"	p	class:CCAccelAmplitude	access:public	signature:(float time)
update	actions/CCActionGrid.h	/^    virtual void update(float time);$/;"	p	class:CCAccelDeccelAmplitude	access:public	signature:(float time)
update	actions/CCActionGrid.h	/^    virtual void update(float time);$/;"	p	class:CCDeccelAmplitude	access:public	signature:(float time)
update	actions/CCActionGrid3D.cpp	/^void CCFlipX3D::update(float time)$/;"	f	class:CCFlipX3D	signature:(float time)
update	actions/CCActionGrid3D.cpp	/^void CCFlipY3D::update(float time)$/;"	f	class:CCFlipY3D	signature:(float time)
update	actions/CCActionGrid3D.cpp	/^void CCLens3D::update(float time)$/;"	f	class:CCLens3D	signature:(float time)
update	actions/CCActionGrid3D.cpp	/^void CCLiquid::update(float time)$/;"	f	class:CCLiquid	signature:(float time)
update	actions/CCActionGrid3D.cpp	/^void CCRipple3D::update(float time)$/;"	f	class:CCRipple3D	signature:(float time)
update	actions/CCActionGrid3D.cpp	/^void CCShaky3D::update(float time)$/;"	f	class:CCShaky3D	signature:(float time)
update	actions/CCActionGrid3D.cpp	/^void CCTwirl::update(float time)$/;"	f	class:CCTwirl	signature:(float time)
update	actions/CCActionGrid3D.cpp	/^void CCWaves3D::update(float time)$/;"	f	class:CCWaves3D	signature:(float time)
update	actions/CCActionGrid3D.cpp	/^void CCWaves::update(float time)$/;"	f	class:CCWaves	signature:(float time)
update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCFlipX3D	access:public	signature:(float time)
update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCFlipY3D	access:public	signature:(float time)
update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCLens3D	access:public	signature:(float time)
update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCLiquid	access:public	signature:(float time)
update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCRipple3D	access:public	signature:(float time)
update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCShaky3D	access:public	signature:(float time)
update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCTwirl	access:public	signature:(float time)
update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCWaves	access:public	signature:(float time)
update	actions/CCActionGrid3D.h	/^    virtual void update(float time);$/;"	p	class:CCWaves3D	access:public	signature:(float time)
update	actions/CCActionInstant.cpp	/^void CCActionInstant::update(float time) {$/;"	f	class:CCActionInstant	signature:(float time)
update	actions/CCActionInstant.cpp	/^void CCCallFunc::update(float time) {$/;"	f	class:CCCallFunc	signature:(float time)
update	actions/CCActionInstant.cpp	/^void CCFlipX::update(float time) {$/;"	f	class:CCFlipX	signature:(float time)
update	actions/CCActionInstant.cpp	/^void CCFlipY::update(float time) {$/;"	f	class:CCFlipY	signature:(float time)
update	actions/CCActionInstant.cpp	/^void CCHide::update(float time) {$/;"	f	class:CCHide	signature:(float time)
update	actions/CCActionInstant.cpp	/^void CCPlace::update(float time) {$/;"	f	class:CCPlace	signature:(float time)
update	actions/CCActionInstant.cpp	/^void CCShow::update(float time) {$/;"	f	class:CCShow	signature:(float time)
update	actions/CCActionInstant.cpp	/^void CCToggleVisibility::update(float time) $/;"	f	class:CCToggleVisibility	signature:(float time)
update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCActionInstant	access:public	signature:(float time)
update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCCallFunc	access:public	signature:(float time)
update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCFlipX	access:public	signature:(float time)
update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCFlipY	access:public	signature:(float time)
update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCHide	access:public	signature:(float time)
update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCPlace	access:public	signature:(float time)
update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCShow	access:public	signature:(float time)
update	actions/CCActionInstant.h	/^    virtual void update(float time);$/;"	p	class:CCToggleVisibility	access:public	signature:(float time)
update	actions/CCActionInterval.cpp	/^    virtual void update(float time);$/;"	p	class:ExtraAction	file:	access:public	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCAnimate::update(float t)$/;"	f	class:CCAnimate	signature:(float t)
update	actions/CCActionInterval.cpp	/^void CCBezierBy::update(float time)$/;"	f	class:CCBezierBy	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCBlink::update(float time)$/;"	f	class:CCBlink	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCDelayTime::update(float time)$/;"	f	class:CCDelayTime	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCFadeIn::update(float time)$/;"	f	class:CCFadeIn	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCFadeOut::update(float time)$/;"	f	class:CCFadeOut	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCFadeTo::update(float time)$/;"	f	class:CCFadeTo	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCJumpBy::update(float t)$/;"	f	class:CCJumpBy	signature:(float t)
update	actions/CCActionInterval.cpp	/^void CCMoveBy::update(float t)$/;"	f	class:CCMoveBy	signature:(float t)
update	actions/CCActionInterval.cpp	/^void CCRepeat::update(float dt)$/;"	f	class:CCRepeat	signature:(float dt)
update	actions/CCActionInterval.cpp	/^void CCReverseTime::update(float time)$/;"	f	class:CCReverseTime	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCRotateBy::update(float time)$/;"	f	class:CCRotateBy	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCRotateTo::update(float time)$/;"	f	class:CCRotateTo	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCScaleTo::update(float time)$/;"	f	class:CCScaleTo	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCSequence::update(float t)$/;"	f	class:CCSequence	signature:(float t)
update	actions/CCActionInterval.cpp	/^void CCSkewTo::update(float t)$/;"	f	class:CCSkewTo	signature:(float t)
update	actions/CCActionInterval.cpp	/^void CCSpawn::update(float time)$/;"	f	class:CCSpawn	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCTargetedAction::update(float time)$/;"	f	class:CCTargetedAction	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCTintBy::update(float time)$/;"	f	class:CCTintBy	signature:(float time)
update	actions/CCActionInterval.cpp	/^void CCTintTo::update(float time)$/;"	f	class:CCTintTo	signature:(float time)
update	actions/CCActionInterval.cpp	/^void ExtraAction::update(float time)$/;"	f	class:ExtraAction	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float dt);$/;"	p	class:CCRepeat	access:public	signature:(float dt)
update	actions/CCActionInterval.h	/^    virtual void update(float t);$/;"	p	class:CCAnimate	access:public	signature:(float t)
update	actions/CCActionInterval.h	/^    virtual void update(float t);$/;"	p	class:CCSequence	access:public	signature:(float t)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCBezierBy	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCBlink	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCDelayTime	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCFadeIn	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCFadeOut	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCFadeTo	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCJumpBy	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCMoveBy	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCReverseTime	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCRotateBy	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCRotateTo	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCScaleTo	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCSkewTo	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCSpawn	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCTargetedAction	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCTintBy	access:public	signature:(float time)
update	actions/CCActionInterval.h	/^    virtual void update(float time);$/;"	p	class:CCTintTo	access:public	signature:(float time)
update	actions/CCActionManager.cpp	/^void CCActionManager::update(float dt)$/;"	f	class:CCActionManager	signature:(float dt)
update	actions/CCActionManager.h	/^    void update(float dt);$/;"	p	class:CCActionManager	access:protected	signature:(float dt)
update	actions/CCActionPageTurn3D.cpp	/^void CCPageTurn3D::update(float time)$/;"	f	class:CCPageTurn3D	signature:(float time)
update	actions/CCActionPageTurn3D.h	/^    virtual void update(float time);$/;"	p	class:CCPageTurn3D	access:public	signature:(float time)
update	actions/CCActionProgressTimer.cpp	/^void CCProgressFromTo::update(float time)$/;"	f	class:CCProgressFromTo	signature:(float time)
update	actions/CCActionProgressTimer.cpp	/^void CCProgressTo::update(float time)$/;"	f	class:CCProgressTo	signature:(float time)
update	actions/CCActionProgressTimer.h	/^    virtual void update(float time);$/;"	p	class:CCProgressFromTo	access:public	signature:(float time)
update	actions/CCActionProgressTimer.h	/^    virtual void update(float time);$/;"	p	class:CCProgressTo	access:public	signature:(float time)
update	actions/CCActionTiledGrid.cpp	/^void CCFadeOutTRTiles::update(float time)$/;"	f	class:CCFadeOutTRTiles	signature:(float time)
update	actions/CCActionTiledGrid.cpp	/^void CCJumpTiles3D::update(float time)$/;"	f	class:CCJumpTiles3D	signature:(float time)
update	actions/CCActionTiledGrid.cpp	/^void CCShakyTiles3D::update(float time)$/;"	f	class:CCShakyTiles3D	signature:(float time)
update	actions/CCActionTiledGrid.cpp	/^void CCShatteredTiles3D::update(float time)$/;"	f	class:CCShatteredTiles3D	signature:(float time)
update	actions/CCActionTiledGrid.cpp	/^void CCShuffleTiles::update(float time)$/;"	f	class:CCShuffleTiles	signature:(float time)
update	actions/CCActionTiledGrid.cpp	/^void CCSplitCols::update(float time)$/;"	f	class:CCSplitCols	signature:(float time)
update	actions/CCActionTiledGrid.cpp	/^void CCSplitRows::update(float time)$/;"	f	class:CCSplitRows	signature:(float time)
update	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::update(float time)$/;"	f	class:CCTurnOffTiles	signature:(float time)
update	actions/CCActionTiledGrid.cpp	/^void CCWavesTiles3D::update(float time)$/;"	f	class:CCWavesTiles3D	signature:(float time)
update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCFadeOutTRTiles	access:public	signature:(float time)
update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCJumpTiles3D	access:public	signature:(float time)
update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCShakyTiles3D	access:public	signature:(float time)
update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCShatteredTiles3D	access:public	signature:(float time)
update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCShuffleTiles	access:public	signature:(float time)
update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCSplitCols	access:public	signature:(float time)
update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCSplitRows	access:public	signature:(float time)
update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCTurnOffTiles	access:public	signature:(float time)
update	actions/CCActionTiledGrid.h	/^    virtual void update(float time);$/;"	p	class:CCWavesTiles3D	access:public	signature:(float time)
update	actions/CCActionTween.cpp	/^void CCActionTween::update(float dt)$/;"	f	class:CCActionTween	signature:(float dt)
update	actions/CCActionTween.h	/^    void update(float dt);$/;"	p	class:CCActionTween	access:public	signature:(float dt)
update	base_nodes/CCNode.cpp	/^void CCNode::update(float fDelta)$/;"	f	class:CCNode	signature:(float fDelta)
update	base_nodes/CCNode.h	/^    virtual void update(float delta);$/;"	p	class:CCNode	access:public	signature:(float delta)
update	cocoa/CCObject.h	/^    virtual void update(float dt) {CC_UNUSED_PARAM(dt);};$/;"	f	class:CCObject	access:public	signature:(float dt)
update	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::update(float delta)$/;"	f	class:CCMotionStreak	signature:(float delta)
update	misc_nodes/CCMotionStreak.h	/^    virtual void update(float delta);$/;"	p	class:CCMotionStreak	access:public	signature:(float delta)
update	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::update(float dt)$/;"	f	class:CCParticleSystem	signature:(float dt)
update	particle_nodes/CCParticleSystem.h	/^    virtual void update(float dt);$/;"	p	class:CCParticleSystem	access:public	signature:(float dt)
updateAllAtlasIndexes	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::updateAllAtlasIndexes()$/;"	f	class:CCParticleBatchNode	signature:()
updateAllAtlasIndexes	particle_nodes/CCParticleBatchNode.h	/^    void updateAllAtlasIndexes();$/;"	p	class:CCParticleBatchNode	access:private	signature:()
updateAtlasIndex	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::updateAtlasIndex(CCSprite* sprite, int* curIndex)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite* sprite, int* curIndex)
updateAtlasIndex	sprite_nodes/CCSpriteBatchNode.h	/^    void updateAtlasIndex(CCSprite* sprite, int* curIndex);$/;"	p	class:CCSpriteBatchNode	access:private	signature:(CCSprite* sprite, int* curIndex)
updateAtlasValueAt	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::updateAtlasValueAt(const CCPoint& pos, const ccColor3B& value, unsigned int index)$/;"	f	class:CCTileMapAtlas	signature:(const CCPoint& pos, const ccColor3B& value, unsigned int index)
updateAtlasValueAt	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    void updateAtlasValueAt(const CCPoint& pos, const ccColor3B& value, unsigned int index);$/;"	p	class:CCTileMapAtlas	access:private	signature:(const CCPoint& pos, const ccColor3B& value, unsigned int index)
updateAtlasValues	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::updateAtlasValues()$/;"	f	class:CCAtlasNode	signature:()
updateAtlasValues	base_nodes/CCAtlasNode.h	/^    virtual void updateAtlasValues();$/;"	p	class:CCAtlasNode	access:public	signature:()
updateAtlasValues	label_nodes/CCLabelAtlas.cpp	/^void CCLabelAtlas::updateAtlasValues()$/;"	f	class:CCLabelAtlas	signature:()
updateAtlasValues	label_nodes/CCLabelAtlas.h	/^    virtual void updateAtlasValues();$/;"	p	class:CCLabelAtlas	access:public	signature:()
updateAtlasValues	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::updateAtlasValues()$/;"	f	class:CCTileMapAtlas	signature:()
updateAtlasValues	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    void updateAtlasValues();$/;"	p	class:CCTileMapAtlas	access:private	signature:()
updateBar	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::updateBar(void)$/;"	f	class:CCProgressTimer	signature:(void)
updateBar	misc_nodes/CCProgressTimer.h	/^    void updateBar(void);$/;"	p	class:CCProgressTimer	access:protected	signature:(void)
updateBlendFunc	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::updateBlendFunc()$/;"	f	class:CCAtlasNode	signature:()
updateBlendFunc	base_nodes/CCAtlasNode.h	/^    void updateBlendFunc();$/;"	p	class:CCAtlasNode	access:private	signature:()
updateBlendFunc	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::updateBlendFunc(void)$/;"	f	class:CCParticleBatchNode	signature:(void)
updateBlendFunc	particle_nodes/CCParticleBatchNode.h	/^    void updateBlendFunc(void);$/;"	p	class:CCParticleBatchNode	access:private	signature:(void)
updateBlendFunc	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::updateBlendFunc()$/;"	f	class:CCParticleSystem	signature:()
updateBlendFunc	particle_nodes/CCParticleSystem.h	/^    virtual void updateBlendFunc();$/;"	p	class:CCParticleSystem	access:protected	signature:()
updateBlendFunc	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateBlendFunc(void)$/;"	f	class:CCSprite	signature:(void)
updateBlendFunc	sprite_nodes/CCSprite.h	/^    virtual void updateBlendFunc(void);$/;"	p	class:CCSprite	access:protected	signature:(void)
updateBlendFunc	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::updateBlendFunc(void)$/;"	f	class:CCSpriteBatchNode	signature:(void)
updateBlendFunc	sprite_nodes/CCSpriteBatchNode.h	/^    void updateBlendFunc();$/;"	p	class:CCSpriteBatchNode	access:private	signature:()
updateColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::updateColor()$/;"	f	class:CCLayerColor	signature:()
updateColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::updateColor()$/;"	f	class:CCLayerGradient	signature:()
updateColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void updateColor();$/;"	p	class:CCLayerColor	access:protected	signature:()
updateColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void updateColor();$/;"	p	class:CCLayerGradient	access:protected	signature:()
updateColor	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::updateColor(void)$/;"	f	class:CCProgressTimer	signature:(void)
updateColor	misc_nodes/CCProgressTimer.h	/^    void updateColor(void);$/;"	p	class:CCProgressTimer	access:protected	signature:(void)
updateColor	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateColor(void)$/;"	f	class:CCSprite	signature:(void)
updateColor	sprite_nodes/CCSprite.h	/^    void updateColor(void);$/;"	p	class:CCSprite	access:protected	signature:(void)
updateDisplayedColor	base_nodes/CCNode.cpp	/^void CCNodeRGBA::updateDisplayedColor(const ccColor3B& parentColor)$/;"	f	class:CCNodeRGBA	signature:(const ccColor3B& parentColor)
updateDisplayedColor	base_nodes/CCNode.h	/^    virtual void updateDisplayedColor(const ccColor3B& parentColor);$/;"	p	class:CCNodeRGBA	access:public	signature:(const ccColor3B& parentColor)
updateDisplayedColor	include/CCProtocols.h	/^    virtual void updateDisplayedColor(const ccColor3B& color) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(const ccColor3B& color)
updateDisplayedColor	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::updateDisplayedColor(const ccColor3B& parentColor)$/;"	f	class:CCLabelBMFont	signature:(const ccColor3B& parentColor)
updateDisplayedColor	label_nodes/CCLabelBMFont.h	/^    virtual void updateDisplayedColor(const ccColor3B& parentColor);$/;"	p	class:CCLabelBMFont	access:public	signature:(const ccColor3B& parentColor)
updateDisplayedColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerRGBA::updateDisplayedColor(const ccColor3B& parentColor)$/;"	f	class:CCLayerRGBA	signature:(const ccColor3B& parentColor)
updateDisplayedColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void updateDisplayedColor(const ccColor3B& parentColor);$/;"	p	class:CCLayerRGBA	access:public	signature:(const ccColor3B& parentColor)
updateDisplayedColor	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateDisplayedColor(const ccColor3B& parentColor)$/;"	f	class:CCSprite	signature:(const ccColor3B& parentColor)
updateDisplayedColor	sprite_nodes/CCSprite.h	/^    virtual void updateDisplayedColor(const ccColor3B& parentColor);$/;"	p	class:CCSprite	access:public	signature:(const ccColor3B& parentColor)
updateDisplayedOpacity	base_nodes/CCNode.cpp	/^void CCNodeRGBA::updateDisplayedOpacity(GLubyte parentOpacity)$/;"	f	class:CCNodeRGBA	signature:(GLubyte parentOpacity)
updateDisplayedOpacity	base_nodes/CCNode.h	/^    virtual void updateDisplayedOpacity(GLubyte parentOpacity);$/;"	p	class:CCNodeRGBA	access:public	signature:(GLubyte parentOpacity)
updateDisplayedOpacity	include/CCProtocols.h	/^    virtual void updateDisplayedOpacity(GLubyte opacity) = 0;$/;"	p	class:CCRGBAProtocol	access:public	signature:(GLubyte opacity)
updateDisplayedOpacity	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::updateDisplayedOpacity(GLubyte parentOpacity)$/;"	f	class:CCLabelBMFont	signature:(GLubyte parentOpacity)
updateDisplayedOpacity	label_nodes/CCLabelBMFont.h	/^    virtual void updateDisplayedOpacity(GLubyte parentOpacity);$/;"	p	class:CCLabelBMFont	access:public	signature:(GLubyte parentOpacity)
updateDisplayedOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerRGBA::updateDisplayedOpacity(GLubyte parentOpacity)$/;"	f	class:CCLayerRGBA	signature:(GLubyte parentOpacity)
updateDisplayedOpacity	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void updateDisplayedOpacity(GLubyte parentOpacity);$/;"	p	class:CCLayerRGBA	access:public	signature:(GLubyte parentOpacity)
updateDisplayedOpacity	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateDisplayedOpacity(GLubyte opacity)$/;"	f	class:CCSprite	signature:(GLubyte opacity)
updateDisplayedOpacity	sprite_nodes/CCSprite.h	/^    virtual void updateDisplayedOpacity(GLubyte parentOpacity);$/;"	p	class:CCSprite	access:public	signature:(GLubyte parentOpacity)
updateImagesVisibility	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::updateImagesVisibility()$/;"	f	class:CCMenuItemSprite	signature:()
updateImagesVisibility	menu_nodes/CCMenuItem.h	/^    virtual void updateImagesVisibility();$/;"	p	class:CCMenuItemSprite	access:protected	signature:()
updateLabel	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::updateLabel()$/;"	f	class:CCLabelBMFont	signature:()
updateLabel	label_nodes/CCLabelBMFont.h	/^    virtual void updateLabel();$/;"	p	class:CCLabelBMFont	access:public	signature:()
updateOpacityModifyRGB	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::updateOpacityModifyRGB()$/;"	f	class:CCAtlasNode	signature:()
updateOpacityModifyRGB	base_nodes/CCAtlasNode.h	/^    void updateOpacityModifyRGB();$/;"	p	class:CCAtlasNode	access:private	signature:()
updatePosition	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineBy::updatePosition(cocos2d::CCPoint &newPos)$/;"	f	class:CCCardinalSplineBy	signature:(cocos2d::CCPoint &newPos)
updatePosition	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineTo::updatePosition(cocos2d::CCPoint &newPos)$/;"	f	class:CCCardinalSplineTo	signature:(cocos2d::CCPoint &newPos)
updatePosition	actions/CCActionCatmullRom.h	/^    virtual void updatePosition(CCPoint &newPos);$/;"	p	class:CCCardinalSplineBy	access:public	signature:(CCPoint &newPos)
updatePosition	actions/CCActionCatmullRom.h	/^    virtual void updatePosition(CCPoint &newPos);$/;"	p	class:CCCardinalSplineTo	access:public	signature:(CCPoint &newPos)
updateProgress	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::updateProgress(void)$/;"	f	class:CCProgressTimer	signature:(void)
updateProgress	misc_nodes/CCProgressTimer.h	/^    void updateProgress(void);$/;"	p	class:CCProgressTimer	access:protected	signature:(void)
updateProjection	include/CCProtocols.h	/^    virtual void updateProjection(void) = 0;$/;"	p	class:CCDirectorDelegate	access:public	signature:(void)
updateQuad	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::updateQuad(ccV3F_C4B_T2F_Quad *quad, unsigned int index)$/;"	f	class:CCTextureAtlas	signature:(ccV3F_C4B_T2F_Quad *quad, unsigned int index)
updateQuad	textures/CCTextureAtlas.h	/^    void updateQuad(ccV3F_C4B_T2F_Quad* quad, unsigned int index);$/;"	p	class:CCTextureAtlas	access:public	signature:(ccV3F_C4B_T2F_Quad* quad, unsigned int index)
updateQuadFromSprite	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::updateQuadFromSprite(CCSprite *sprite, unsigned int index)$/;"	f	class:CCSpriteBatchNode	signature:(CCSprite *sprite, unsigned int index)
updateQuadFromSprite	sprite_nodes/CCSpriteBatchNode.h	/^    void updateQuadFromSprite(CCSprite *sprite, unsigned int index);$/;"	p	class:CCSpriteBatchNode	access:protected	signature:(CCSprite *sprite, unsigned int index)
updateQuadWithParticle	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::updateQuadWithParticle(tCCParticle* particle, const CCPoint& newPosition)$/;"	f	class:CCParticleSystem	signature:(tCCParticle* particle, const CCPoint& newPosition)
updateQuadWithParticle	particle_nodes/CCParticleSystem.h	/^    virtual void updateQuadWithParticle(tCCParticle* particle, const CCPoint& newPosition);$/;"	p	class:CCParticleSystem	access:public	signature:(tCCParticle* particle, const CCPoint& newPosition)
updateQuadWithParticle	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::updateQuadWithParticle(tCCParticle* particle, const CCPoint& newPosition)$/;"	f	class:CCParticleSystemQuad	signature:(tCCParticle* particle, const CCPoint& newPosition)
updateQuadWithParticle	particle_nodes/CCParticleSystemQuad.h	/^    virtual void updateQuadWithParticle(tCCParticle* particle, const CCPoint& newPosition);$/;"	p	class:CCParticleSystemQuad	access:public	signature:(tCCParticle* particle, const CCPoint& newPosition)
updateRadial	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::updateRadial(void)$/;"	f	class:CCProgressTimer	signature:(void)
updateRadial	misc_nodes/CCProgressTimer.h	/^    void updateRadial(void);$/;"	p	class:CCProgressTimer	access:protected	signature:(void)
updateTexture	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::updateTexture()$/;"	f	class:CCLabelTTF	signature:()
updateTexture	label_nodes/CCLabelTTF.h	/^    bool updateTexture();$/;"	p	class:CCLabelTTF	access:private	signature:()
updateTileForGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite * CCTMXLayer::updateTileForGID(unsigned int gid, const CCPoint& pos)    $/;"	f	class:CCTMXLayer	signature:(unsigned int gid, const CCPoint& pos)
updateTileForGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite* updateTileForGID(unsigned int gid, const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(unsigned int gid, const CCPoint& pos)
updateTransform	base_nodes/CCNode.cpp	/^void CCNode::updateTransform()$/;"	f	class:CCNode	signature:()
updateTransform	base_nodes/CCNode.h	/^    virtual void updateTransform(void);$/;"	p	class:CCNode	access:public	signature:(void)
updateTransform	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateTransform(void)$/;"	f	class:CCSprite	signature:(void)
updateTransform	sprite_nodes/CCSprite.h	/^    virtual void updateTransform(void);$/;"	p	class:CCSprite	access:public	signature:(void)
updateTweenAction	actions/CCActionTween.h	/^    virtual void updateTweenAction(float value, const char* key) = 0;$/;"	p	class:CCActionTweenDelegate	access:public	signature:(float value, const char* key)
updateUniformLocation	shaders/CCGLProgram.cpp	/^bool CCGLProgram::updateUniformLocation(GLint location, GLvoid* data, unsigned int bytes)$/;"	f	class:CCGLProgram	signature:(GLint location, GLvoid* data, unsigned int bytes)
updateUniformLocation	shaders/CCGLProgram.h	/^    bool updateUniformLocation(GLint location, GLvoid* data, unsigned int bytes);$/;"	p	class:CCGLProgram	access:private	signature:(GLint location, GLvoid* data, unsigned int bytes)
updateUniforms	shaders/CCGLProgram.cpp	/^void CCGLProgram::updateUniforms()$/;"	f	class:CCGLProgram	signature:()
updateUniforms	shaders/CCGLProgram.h	/^    void updateUniforms();$/;"	p	class:CCGLProgram	access:public	signature:()
updateWithNoTime	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::updateWithNoTime(void)$/;"	f	class:CCParticleSystem	signature:(void)
updateWithNoTime	particle_nodes/CCParticleSystem.h	/^    virtual void updateWithNoTime(void);$/;"	p	class:CCParticleSystem	access:public	signature:(void)
use	shaders/CCGLProgram.cpp	/^void CCGLProgram::use()$/;"	f	class:CCGLProgram	signature:()
use	shaders/CCGLProgram.h	/^    void use();$/;"	p	class:CCGLProgram	access:public	signature:()
utf8_skip_data	support/ccUTF8.cpp	/^static const char utf8_skip_data[256] = {$/;"	v	file:
uthash_expand_fyi	support/data_support/uthash.h	85;"	d
uthash_fatal	support/data_support/uthash.h	80;"	d
uthash_free	support/data_support/uthash.h	82;"	d
uthash_malloc	support/data_support/uthash.h	81;"	d
uthash_noexpand_fyi	support/data_support/uthash.h	84;"	d
v	include/ccTypes.h	/^     GLfloat v;$/;"	m	struct:_ccTex2F	access:public
v2_pixel_formathash	textures/CCTexturePVR.cpp	/^static struct _pixel_formathash v2_pixel_formathash[] = {$/;"	v	typeref:struct:_pixel_formathash	file:
v2f	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2f(float x, float y)$/;"	f	file:	signature:(float x, float y)
v2fadd	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fadd(const ccVertex2F &v0, const ccVertex2F &v1)$/;"	f	file:	signature:(const ccVertex2F &v0, const ccVertex2F &v1)
v2fdot	draw_nodes/CCDrawNode.cpp	/^static inline float v2fdot(const ccVertex2F &p0, const ccVertex2F &p1)$/;"	f	file:	signature:(const ccVertex2F &p0, const ccVertex2F &p1)
v2fforangle	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fforangle(float _a_)$/;"	f	file:	signature:(float _a_)
v2fmult	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fmult(const ccVertex2F &v, float s)$/;"	f	file:	signature:(const ccVertex2F &v, float s)
v2fneg	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fneg(const ccVertex2F &p0)$/;"	f	file:	signature:(const ccVertex2F &p0)
v2fnormalize	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fnormalize(const ccVertex2F &p)$/;"	f	file:	signature:(const ccVertex2F &p)
v2fperp	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fperp(const ccVertex2F &p0)$/;"	f	file:	signature:(const ccVertex2F &p0)
v2fsub	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fsub(const ccVertex2F &v0, const ccVertex2F &v1)$/;"	f	file:	signature:(const ccVertex2F &v0, const ccVertex2F &v1)
v2fzero	draw_nodes/CCDrawNode.cpp	/^static ccVertex2F v2fzero = {0.0f,0.0f};$/;"	v	file:
v3_pixel_formathash	textures/CCTexturePVR.cpp	/^struct _pixel_formathash v3_pixel_formathash[] = {$/;"	v	typeref:struct:_pixel_formathash
value	shaders/CCGLProgram.cpp	/^    GLvoid*         value;       \/\/ value$/;"	m	struct:_hashUniformEntry	file:	access:public
value	support/tinyxml2/tinyxml2.cpp	/^    char value;$/;"	m	struct:tinyxml2::Entity	file:	access:public
valueForKey	cocoa/CCDictionary.cpp	/^const CCString* CCDictionary::valueForKey(const std::string& key)$/;"	f	class:CCDictionary	signature:(const std::string& key)
valueForKey	cocoa/CCDictionary.cpp	/^const CCString* CCDictionary::valueForKey(int key)$/;"	f	class:CCDictionary	signature:(int key)
valueForKey	cocoa/CCDictionary.h	/^    const CCString* valueForKey(const std::string& key);$/;"	p	class:CCDictionary	access:public	signature:(const std::string& key)
valueForKey	cocoa/CCDictionary.h	/^    const CCString* valueForKey(int key);$/;"	p	class:CCDictionary	access:public	signature:(int key)
valueForKey	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^static const char* valueForKey(const char *key, std::map<std::string, std::string>* dict)$/;"	f	file:	signature:(const char *key, std::map<std::string, std::string>* dict)
version	support/zip_support/ZipUtils.h	/^        unsigned short            version;            \/\/ should be 2 (although version type==1 is also supported)$/;"	m	struct:cocos2d::CCZHeader	access:public
version	support/zip_support/unzip.h	/^    uLong version;              \/* version made by                 2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
version	support/zip_support/unzip.h	/^    uLong version;              \/* version made by                 2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
version	textures/CCTexturePVR.cpp	/^	uint32_t version;$/;"	m	struct:__anon56	file:	access:public
version_needed	support/zip_support/unzip.h	/^    uLong version_needed;       \/* version needed to extract       2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s	access:public
version_needed	support/zip_support/unzip.h	/^    uLong version_needed;       \/* version needed to extract       2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s	access:public
vertex	actions/CCActionGrid.cpp	/^ccVertex3F CCGrid3DAction::vertex(const CCPoint& position)$/;"	f	class:CCGrid3DAction	signature:(const CCPoint& position)
vertex	actions/CCActionGrid.h	/^    ccVertex3F vertex(const CCPoint& position);$/;"	p	class:CCGrid3DAction	access:public	signature:(const CCPoint& position)
vertex	effects/CCGrid.cpp	/^ccVertex3F CCGrid3D::vertex(const CCPoint& pos)$/;"	f	class:CCGrid3D	signature:(const CCPoint& pos)
vertex	effects/CCGrid.h	/^    ccVertex3F vertex(const CCPoint& pos);$/;"	p	class:CCGrid3D	access:public	signature:(const CCPoint& pos)
vertex2	include/ccTypes.h	/^static inline ccVertex2F vertex2(const float x, const float y)$/;"	f	signature:(const float x, const float y)
vertex3	include/ccTypes.h	/^static inline ccVertex3F vertex3(const float x, const float y, const float z)$/;"	f	signature:(const float x, const float y, const float z)
vertexFromAlphaPoint	misc_nodes/CCProgressTimer.cpp	/^ccVertex2F CCProgressTimer::vertexFromAlphaPoint(CCPoint alpha)$/;"	f	class:CCProgressTimer	signature:(CCPoint alpha)
vertexFromAlphaPoint	misc_nodes/CCProgressTimer.h	/^    ccVertex2F vertexFromAlphaPoint(CCPoint alpha);$/;"	p	class:CCProgressTimer	access:protected	signature:(CCPoint alpha)
vertexShaderLog	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::vertexShaderLog()$/;"	f	class:CCGLProgram	signature:()
vertexShaderLog	shaders/CCGLProgram.h	/^    const char* vertexShaderLog();$/;"	p	class:CCGLProgram	access:public	signature:()
vertexZForPos	tilemap_parallax_nodes/CCTMXLayer.cpp	/^int CCTMXLayer::vertexZForPos(const CCPoint& pos)$/;"	f	class:CCTMXLayer	signature:(const CCPoint& pos)
vertexZForPos	tilemap_parallax_nodes/CCTMXLayer.h	/^    int vertexZForPos(const CCPoint& pos);$/;"	p	class:CCTMXLayer	access:private	signature:(const CCPoint& pos)
vertices	include/ccTypes.h	/^    ccVertex2F        vertices;$/;"	m	struct:_ccV2F_C4B_T2F	access:public
vertices	include/ccTypes.h	/^    ccVertex2F        vertices;$/;"	m	struct:_ccV2F_C4F_T2F	access:public
vertices	include/ccTypes.h	/^    ccVertex3F        vertices;            \/\/ 12 bytes$/;"	m	struct:_ccV3F_C4B_T2F	access:public
visit	base_nodes/CCNode.cpp	/^void CCNode::visit()$/;"	f	class:CCNode	signature:()
visit	base_nodes/CCNode.h	/^    virtual void visit(void);$/;"	p	class:CCNode	access:public	signature:(void)
visit	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::visit()$/;"	f	class:CCClippingNode	signature:()
visit	misc_nodes/CCClippingNode.h	/^    virtual void visit();$/;"	p	class:CCClippingNode	access:public	signature:()
visit	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::visit()$/;"	f	class:CCRenderTexture	signature:()
visit	misc_nodes/CCRenderTexture.h	/^    virtual void visit();$/;"	p	class:CCRenderTexture	access:public	signature:()
visit	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::visit()$/;"	f	class:CCParticleBatchNode	signature:()
visit	particle_nodes/CCParticleBatchNode.h	/^    void visit();$/;"	p	class:CCParticleBatchNode	access:public	signature:()
visit	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::visit(void)$/;"	f	class:CCSpriteBatchNode	signature:(void)
visit	sprite_nodes/CCSpriteBatchNode.h	/^    virtual void visit(void);$/;"	p	class:CCSpriteBatchNode	access:public	signature:(void)
visit	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::visit()$/;"	f	class:CCParallaxNode	signature:()
visit	tilemap_parallax_nodes/CCParallaxNode.h	/^    virtual void visit(void);$/;"	p	class:CCParallaxNode	access:public	signature:(void)
w	kazmath/include/kazmath/quaternion.h	/^    kmScalar w;$/;"	m	struct:kmQuaternion	access:public
w	kazmath/include/kazmath/vec4.h	/^    kmScalar w;$/;"	m	struct:kmVec4	access:public
width	cocoa/CCGeometry.h	/^    float width;$/;"	m	class:CCSize	access:public
width	support/image_support/TGAlib.h	/^    signed short width;$/;"	m	struct:cocos2d::sImageTGA	access:public
width	textures/CCTexturePVR.cpp	/^	uint32_t width;$/;"	m	struct:__anon56	file:	access:public
width	textures/CCTexturePVR.cpp	/^    unsigned int width;$/;"	m	struct:_PVRTexHeader	file:	access:public
worldToNodeTransform	base_nodes/CCNode.cpp	/^CCAffineTransform CCNode::worldToNodeTransform(void)$/;"	f	class:CCNode	signature:(void)
worldToNodeTransform	base_nodes/CCNode.h	/^    virtual CCAffineTransform worldToNodeTransform(void);$/;"	p	class:CCNode	access:public	signature:(void)
wrapS	textures/CCTexture2D.h	/^    GLuint    wrapS;$/;"	m	struct:_ccTexParams	access:public
wrapT	textures/CCTexture2D.h	/^    GLuint    wrapT;$/;"	m	struct:_ccTexParams	access:public
x	cocoa/CCGeometry.h	/^    float x;$/;"	m	class:CCPoint	access:public
x	include/ccTypes.h	/^    GLfloat x;$/;"	m	struct:_ccVertex2F	access:public
x	include/ccTypes.h	/^    GLfloat x;$/;"	m	struct:_ccVertex3F	access:public
x	kazmath/include/kazmath/quaternion.h	/^    kmScalar x;$/;"	m	struct:kmQuaternion	access:public
x	kazmath/include/kazmath/vec2.h	/^    kmScalar x;$/;"	m	struct:kmVec2	access:public
x	kazmath/include/kazmath/vec3.h	/^    kmScalar x;$/;"	m	struct:kmVec3	access:public
x	kazmath/include/kazmath/vec4.h	/^    kmScalar x;$/;"	m	struct:kmVec4	access:public
x	platform/CCAccelerometerDelegate.h	/^    double x;$/;"	m	class:CCAcceleration	access:public
xAdvance	label_nodes/CCLabelBMFont.h	/^    short xAdvance;$/;"	m	struct:_BMFontDef	access:public
xOffset	label_nodes/CCLabelBMFont.h	/^    short xOffset;$/;"	m	struct:_BMFontDef	access:public
y	cocoa/CCGeometry.h	/^    float y;$/;"	m	class:CCPoint	access:public
y	include/ccTypes.h	/^    GLfloat y;$/;"	m	struct:_ccVertex2F	access:public
y	include/ccTypes.h	/^    GLfloat y;$/;"	m	struct:_ccVertex3F	access:public
y	kazmath/include/kazmath/quaternion.h	/^    kmScalar y;$/;"	m	struct:kmQuaternion	access:public
y	kazmath/include/kazmath/vec2.h	/^    kmScalar y;$/;"	m	struct:kmVec2	access:public
y	kazmath/include/kazmath/vec3.h	/^    kmScalar y;$/;"	m	struct:kmVec3	access:public
y	kazmath/include/kazmath/vec4.h	/^    kmScalar y;$/;"	m	struct:kmVec4	access:public
y	platform/CCAccelerometerDelegate.h	/^    double y;$/;"	m	class:CCAcceleration	access:public
yOffset	label_nodes/CCLabelBMFont.h	/^    short yOffset;$/;"	m	struct:_BMFontDef	access:public
z	include/ccTypes.h	/^    GLfloat z;$/;"	m	struct:_ccVertex3F	access:public
z	kazmath/include/kazmath/quaternion.h	/^    kmScalar z;$/;"	m	struct:kmQuaternion	access:public
z	kazmath/include/kazmath/vec3.h	/^    kmScalar z;$/;"	m	struct:kmVec3	access:public
z	kazmath/include/kazmath/vec4.h	/^    kmScalar z;$/;"	m	struct:kmVec4	access:public
z	platform/CCAccelerometerDelegate.h	/^    double z;$/;"	m	class:CCAcceleration	access:public
z_filefunc	support/zip_support/unzip.cpp	/^    zlib_filefunc64_32_def z_filefunc;$/;"	m	struct:cocos2d::__anon43	file:	access:public
z_filefunc	support/zip_support/unzip.cpp	/^    zlib_filefunc64_32_def z_filefunc;$/;"	m	struct:cocos2d::__anon44	file:	access:public
zclose_file	support/zip_support/ioapi.h	/^    close_file_func     zclose_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
zclose_file	support/zip_support/ioapi.h	/^    close_file_func     zclose_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
zerror_file	support/zip_support/ioapi.h	/^    testerror_file_func zerror_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
zerror_file	support/zip_support/ioapi.h	/^    testerror_file_func zerror_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
zfile_func64	support/zip_support/ioapi.h	/^    zlib_filefunc64_def zfile_func64;$/;"	m	struct:cocos2d::zlib_filefunc64_32_def_s	access:public
zipFile	support/zip_support/ZipUtils.cpp	/^    unzFile zipFile;$/;"	m	class:ZipFilePrivate	file:	access:public
zlib_filefunc64_32_def	support/zip_support/ioapi.h	/^} zlib_filefunc64_32_def;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::zlib_filefunc64_32_def_s
zlib_filefunc64_32_def_s	support/zip_support/ioapi.h	/^typedef struct zlib_filefunc64_32_def_s$/;"	s	namespace:cocos2d
zlib_filefunc64_def	support/zip_support/ioapi.h	/^} zlib_filefunc64_def;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::zlib_filefunc64_def_s
zlib_filefunc64_def_s	support/zip_support/ioapi.h	/^typedef struct zlib_filefunc64_def_s$/;"	s	namespace:cocos2d
zlib_filefunc_def	support/zip_support/ioapi.h	/^} zlib_filefunc_def;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::zlib_filefunc_def_s
zlib_filefunc_def_s	support/zip_support/ioapi.h	/^typedef struct zlib_filefunc_def_s$/;"	s	namespace:cocos2d
zopen32_file	support/zip_support/ioapi.h	/^    open_file_func      zopen32_file;$/;"	m	struct:cocos2d::zlib_filefunc64_32_def_s	access:public
zopen64_file	support/zip_support/ioapi.h	/^    open64_file_func    zopen64_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
zopen_file	support/zip_support/ioapi.h	/^    open_file_func      zopen_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
zread_file	support/zip_support/ioapi.h	/^    read_file_func      zread_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
zread_file	support/zip_support/ioapi.h	/^    read_file_func      zread_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
zseek32_file	support/zip_support/ioapi.h	/^    seek_file_func      zseek32_file;$/;"	m	struct:cocos2d::zlib_filefunc64_32_def_s	access:public
zseek64_file	support/zip_support/ioapi.h	/^    seek64_file_func    zseek64_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
zseek_file	support/zip_support/ioapi.h	/^    seek_file_func      zseek_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
ztell32_file	support/zip_support/ioapi.h	/^    tell_file_func      ztell32_file;$/;"	m	struct:cocos2d::zlib_filefunc64_32_def_s	access:public
ztell64_file	support/zip_support/ioapi.h	/^    tell64_file_func    ztell64_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
ztell_file	support/zip_support/ioapi.h	/^    tell_file_func      ztell_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
zwrite_file	support/zip_support/ioapi.h	/^    write_file_func     zwrite_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s	access:public
zwrite_file	support/zip_support/ioapi.h	/^    write_file_func     zwrite_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s	access:public
~CCAccelAmplitude	actions/CCActionGrid.cpp	/^CCAccelAmplitude::~CCAccelAmplitude(void)$/;"	f	class:CCAccelAmplitude	signature:(void)
~CCAccelAmplitude	actions/CCActionGrid.h	/^    ~CCAccelAmplitude(void);$/;"	p	class:CCAccelAmplitude	access:public	signature:(void)
~CCAccelDeccelAmplitude	actions/CCActionGrid.cpp	/^CCAccelDeccelAmplitude::~CCAccelDeccelAmplitude(void)$/;"	f	class:CCAccelDeccelAmplitude	signature:(void)
~CCAccelDeccelAmplitude	actions/CCActionGrid.h	/^    virtual ~CCAccelDeccelAmplitude(void);$/;"	p	class:CCAccelDeccelAmplitude	access:public	signature:(void)
~CCAction	actions/CCAction.cpp	/^CCAction::~CCAction()$/;"	f	class:CCAction	signature:()
~CCAction	actions/CCAction.h	/^    virtual ~CCAction(void);$/;"	p	class:CCAction	access:public	signature:(void)
~CCActionCamera	actions/CCActionCamera.h	/^    virtual ~CCActionCamera(){}$/;"	f	class:CCActionCamera	access:public	signature:()
~CCActionEase	actions/CCActionEase.cpp	/^CCActionEase::~CCActionEase(void)$/;"	f	class:CCActionEase	signature:(void)
~CCActionEase	actions/CCActionEase.h	/^    virtual ~CCActionEase(void);$/;"	p	class:CCActionEase	access:public	signature:(void)
~CCActionInstant	actions/CCActionInstant.h	/^    virtual ~CCActionInstant(){}$/;"	f	class:CCActionInstant	access:public	signature:()
~CCActionManager	actions/CCActionManager.cpp	/^CCActionManager::~CCActionManager(void)$/;"	f	class:CCActionManager	signature:(void)
~CCActionManager	actions/CCActionManager.h	/^    ~CCActionManager(void);$/;"	p	class:CCActionManager	access:public	signature:(void)
~CCActionTweenDelegate	actions/CCActionTween.h	/^    virtual ~CCActionTweenDelegate() {}$/;"	f	class:CCActionTweenDelegate	access:public	signature:()
~CCAnimate	actions/CCActionInterval.cpp	/^CCAnimate::~CCAnimate()$/;"	f	class:CCAnimate	signature:()
~CCAnimate	actions/CCActionInterval.h	/^    ~CCAnimate();$/;"	p	class:CCAnimate	access:public	signature:()
~CCAnimation	sprite_nodes/CCAnimation.cpp	/^CCAnimation::~CCAnimation(void)$/;"	f	class:CCAnimation	signature:(void)
~CCAnimation	sprite_nodes/CCAnimation.h	/^    ~CCAnimation(void);$/;"	p	class:CCAnimation	access:public	signature:(void)
~CCAnimationCache	sprite_nodes/CCAnimationCache.cpp	/^CCAnimationCache::~CCAnimationCache()$/;"	f	class:CCAnimationCache	signature:()
~CCAnimationCache	sprite_nodes/CCAnimationCache.h	/^    ~CCAnimationCache();$/;"	p	class:CCAnimationCache	access:public	signature:()
~CCAnimationFrame	sprite_nodes/CCAnimation.cpp	/^CCAnimationFrame::~CCAnimationFrame()$/;"	f	class:CCAnimationFrame	signature:()
~CCAnimationFrame	sprite_nodes/CCAnimation.h	/^    virtual ~CCAnimationFrame();$/;"	p	class:CCAnimationFrame	access:public	signature:()
~CCApplicationProtocol	platform/CCApplicationProtocol.h	/^    virtual ~CCApplicationProtocol() {}$/;"	f	class:CCApplicationProtocol	access:public	signature:()
~CCArray	cocoa/CCArray.cpp	/^CCArray::~CCArray()$/;"	f	class:CCArray	signature:()
~CCArray	cocoa/CCArray.h	/^    ~CCArray();$/;"	p	class:CCArray	access:public	signature:()
~CCAtlasNode	base_nodes/CCAtlasNode.cpp	/^CCAtlasNode::~CCAtlasNode()$/;"	f	class:CCAtlasNode	signature:()
~CCAtlasNode	base_nodes/CCAtlasNode.h	/^    virtual ~CCAtlasNode();$/;"	p	class:CCAtlasNode	access:public	signature:()
~CCAutoreleasePool	cocoa/CCAutoreleasePool.cpp	/^CCAutoreleasePool::~CCAutoreleasePool(void)$/;"	f	class:CCAutoreleasePool	signature:(void)
~CCAutoreleasePool	cocoa/CCAutoreleasePool.h	/^    ~CCAutoreleasePool(void);$/;"	p	class:CCAutoreleasePool	access:public	signature:(void)
~CCBMFontConfiguration	label_nodes/CCLabelBMFont.cpp	/^CCBMFontConfiguration::~CCBMFontConfiguration()$/;"	f	class:CCBMFontConfiguration	signature:()
~CCBMFontConfiguration	label_nodes/CCLabelBMFont.h	/^    virtual ~CCBMFontConfiguration();$/;"	p	class:CCBMFontConfiguration	access:public	signature:()
~CCCallFunc	actions/CCActionInstant.cpp	/^CCCallFunc::~CCCallFunc(void)$/;"	f	class:CCCallFunc	signature:(void)
~CCCallFunc	actions/CCActionInstant.h	/^    virtual ~CCCallFunc();$/;"	p	class:CCCallFunc	access:public	signature:()
~CCCallFuncN	actions/CCActionInstant.h	/^    virtual ~CCCallFuncN(){}$/;"	f	class:CCCallFuncN	access:public	signature:()
~CCCallFuncO	actions/CCActionInstant.cpp	/^CCCallFuncO::~CCCallFuncO() {$/;"	f	class:CCCallFuncO	signature:()
~CCCallFuncO	actions/CCActionInstant.h	/^    virtual ~CCCallFuncO();$/;"	p	class:CCCallFuncO	access:public	signature:()
~CCCamera	CCCamera.cpp	/^CCCamera::~CCCamera(void)$/;"	f	class:CCCamera	signature:(void)
~CCCamera	CCCamera.h	/^    ~CCCamera(void);$/;"	p	class:CCCamera	access:public	signature:(void)
~CCCardinalSplineTo	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo::~CCCardinalSplineTo()$/;"	f	class:CCCardinalSplineTo	signature:()
~CCCardinalSplineTo	actions/CCActionCatmullRom.h	/^    virtual ~CCCardinalSplineTo();$/;"	p	class:CCCardinalSplineTo	access:public	signature:()
~CCClippingNode	misc_nodes/CCClippingNode.cpp	/^CCClippingNode::~CCClippingNode()$/;"	f	class:CCClippingNode	signature:()
~CCClippingNode	misc_nodes/CCClippingNode.h	/^    virtual ~CCClippingNode();$/;"	p	class:CCClippingNode	access:public	signature:()
~CCDeccelAmplitude	actions/CCActionGrid.cpp	/^CCDeccelAmplitude::~CCDeccelAmplitude(void)$/;"	f	class:CCDeccelAmplitude	signature:(void)
~CCDeccelAmplitude	actions/CCActionGrid.h	/^    ~CCDeccelAmplitude(void);$/;"	p	class:CCDeccelAmplitude	access:public	signature:(void)
~CCDictElement	cocoa/CCDictionary.cpp	/^CCDictElement::~CCDictElement()$/;"	f	class:CCDictElement	signature:()
~CCDictElement	cocoa/CCDictionary.h	/^    ~CCDictElement();$/;"	p	class:CCDictElement	access:public	signature:()
~CCDictMaker	platform/CCFileUtils.cpp	/^    ~CCDictMaker()$/;"	f	class:CCDictMaker	access:public	signature:()
~CCDictionary	cocoa/CCDictionary.cpp	/^CCDictionary::~CCDictionary()$/;"	f	class:CCDictionary	signature:()
~CCDictionary	cocoa/CCDictionary.h	/^    ~CCDictionary();$/;"	p	class:CCDictionary	access:public	signature:()
~CCDirector	CCDirector.cpp	/^CCDirector::~CCDirector(void)$/;"	f	class:CCDirector	signature:(void)
~CCDirector	CCDirector.h	/^    virtual ~CCDirector(void);$/;"	p	class:CCDirector	access:public	signature:(void)
~CCDrawNode	draw_nodes/CCDrawNode.cpp	/^CCDrawNode::~CCDrawNode()$/;"	f	class:CCDrawNode	signature:()
~CCDrawNode	draw_nodes/CCDrawNode.h	/^    virtual ~CCDrawNode();$/;"	p	class:CCDrawNode	access:public	signature:()
~CCEGLViewProtocol	platform/CCEGLViewProtocol.cpp	/^CCEGLViewProtocol::~CCEGLViewProtocol()$/;"	f	class:CCEGLViewProtocol	signature:()
~CCEGLViewProtocol	platform/CCEGLViewProtocol.h	/^    virtual ~CCEGLViewProtocol();$/;"	p	class:CCEGLViewProtocol	access:public	signature:()
~CCEaseRateAction	actions/CCActionEase.cpp	/^CCEaseRateAction::~CCEaseRateAction(void)$/;"	f	class:CCEaseRateAction	signature:(void)
~CCEaseRateAction	actions/CCActionEase.h	/^    virtual ~CCEaseRateAction(void);$/;"	p	class:CCEaseRateAction	access:public	signature:(void)
~CCFileUtils	platform/CCFileUtils.cpp	/^CCFileUtils::~CCFileUtils()$/;"	f	class:CCFileUtils	signature:()
~CCFileUtils	platform/CCFileUtils.h	/^    virtual ~CCFileUtils();$/;"	p	class:CCFileUtils	access:public	signature:()
~CCFiniteTimeAction	actions/CCAction.h	/^    virtual ~CCFiniteTimeAction(){}$/;"	f	class:CCFiniteTimeAction	access:public	signature:()
~CCFlipX	actions/CCActionInstant.h	/^    virtual ~CCFlipX(){}$/;"	f	class:CCFlipX	access:public	signature:()
~CCFlipY	actions/CCActionInstant.h	/^    virtual ~CCFlipY(){}$/;"	f	class:CCFlipY	access:public	signature:()
~CCFollow	actions/CCAction.cpp	/^CCFollow::~CCFollow()$/;"	f	class:CCFollow	signature:()
~CCFollow	actions/CCAction.h	/^    virtual ~CCFollow(void);$/;"	p	class:CCFollow	access:public	signature:(void)
~CCGLProgram	shaders/CCGLProgram.cpp	/^CCGLProgram::~CCGLProgram()$/;"	f	class:CCGLProgram	signature:()
~CCGLProgram	shaders/CCGLProgram.h	/^    virtual ~CCGLProgram();$/;"	p	class:CCGLProgram	access:public	signature:()
~CCGrabber	effects/CCGrabber.cpp	/^CCGrabber::~CCGrabber()$/;"	f	class:CCGrabber	signature:()
~CCGrabber	effects/CCGrabber.h	/^    ~CCGrabber(void);$/;"	p	class:CCGrabber	access:public	signature:(void)
~CCGrid3D	effects/CCGrid.cpp	/^CCGrid3D::~CCGrid3D(void)$/;"	f	class:CCGrid3D	signature:(void)
~CCGrid3D	effects/CCGrid.h	/^    ~CCGrid3D(void);$/;"	p	class:CCGrid3D	access:public	signature:(void)
~CCGridBase	effects/CCGrid.cpp	/^CCGridBase::~CCGridBase(void)$/;"	f	class:CCGridBase	signature:(void)
~CCGridBase	effects/CCGrid.h	/^    virtual ~CCGridBase(void);$/;"	p	class:CCGridBase	access:public	signature:(void)
~CCHide	actions/CCActionInstant.h	/^    virtual ~CCHide(){}$/;"	f	class:CCHide	access:public	signature:()
~CCIMEDelegate	text_input_node/CCIMEDelegate.h	/^    virtual ~CCIMEDelegate();$/;"	p	class:CCIMEDelegate	access:public	signature:()
~CCIMEDelegate	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDelegate::~CCIMEDelegate()$/;"	f	class:CCIMEDelegate	signature:()
~CCIMEDispatcher	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDispatcher::~CCIMEDispatcher()$/;"	f	class:CCIMEDispatcher	signature:()
~CCIMEDispatcher	text_input_node/CCIMEDispatcher.h	/^    ~CCIMEDispatcher();$/;"	p	class:CCIMEDispatcher	access:public	signature:()
~CCImage	platform/CCImage.h	/^    ~CCImage();$/;"	p	class:CCImage	access:public	signature:()
~CCImage	platform/CCImageCommon_cpp.h	/^CCImage::~CCImage()$/;"	f	class:CCImage	signature:()
~CCKeypadDispatcher	keypad_dispatcher/CCKeypadDispatcher.cpp	/^CCKeypadDispatcher::~CCKeypadDispatcher()$/;"	f	class:CCKeypadDispatcher	signature:()
~CCKeypadDispatcher	keypad_dispatcher/CCKeypadDispatcher.h	/^    ~CCKeypadDispatcher();$/;"	p	class:CCKeypadDispatcher	access:public	signature:()
~CCKeypadHandler	keypad_dispatcher/CCKeypadDelegate.cpp	/^CCKeypadHandler::~CCKeypadHandler()$/;"	f	class:CCKeypadHandler	signature:()
~CCKeypadHandler	keypad_dispatcher/CCKeypadDelegate.h	/^    virtual ~CCKeypadHandler(void);$/;"	p	class:CCKeypadHandler	access:public	signature:(void)
~CCLabelAtlas	label_nodes/CCLabelAtlas.h	/^    virtual ~CCLabelAtlas()$/;"	f	class:CCLabelAtlas	access:public	signature:()
~CCLabelBMFont	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont::~CCLabelBMFont()$/;"	f	class:CCLabelBMFont	signature:()
~CCLabelBMFont	label_nodes/CCLabelBMFont.h	/^    virtual ~CCLabelBMFont();$/;"	p	class:CCLabelBMFont	access:public	signature:()
~CCLabelTTF	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF::~CCLabelTTF()$/;"	f	class:CCLabelTTF	signature:()
~CCLabelTTF	label_nodes/CCLabelTTF.h	/^    virtual ~CCLabelTTF();$/;"	p	class:CCLabelTTF	access:public	signature:()
~CCLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayer::~CCLayer()$/;"	f	class:CCLayer	signature:()
~CCLayer	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual ~CCLayer();$/;"	p	class:CCLayer	access:public	signature:()
~CCLayerColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor::~CCLayerColor()$/;"	f	class:CCLayerColor	signature:()
~CCLayerColor	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual ~CCLayerColor();$/;"	p	class:CCLayerColor	access:public	signature:()
~CCLayerMultiplex	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex::~CCLayerMultiplex()$/;"	f	class:CCLayerMultiplex	signature:()
~CCLayerMultiplex	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual ~CCLayerMultiplex();$/;"	p	class:CCLayerMultiplex	access:public	signature:()
~CCLayerRGBA	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerRGBA::~CCLayerRGBA() {}$/;"	f	class:CCLayerRGBA	signature:()
~CCLayerRGBA	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual ~CCLayerRGBA();$/;"	p	class:CCLayerRGBA	access:public	signature:()
~CCMenu	menu_nodes/CCMenu.h	/^    virtual ~CCMenu(){}$/;"	f	class:CCMenu	access:public	signature:()
~CCMenuItem	menu_nodes/CCMenuItem.cpp	/^CCMenuItem::~CCMenuItem()$/;"	f	class:CCMenuItem	signature:()
~CCMenuItem	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItem();$/;"	p	class:CCMenuItem	access:public	signature:()
~CCMenuItemAtlasFont	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemAtlasFont(){}$/;"	f	class:CCMenuItemAtlasFont	access:public	signature:()
~CCMenuItemFont	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemFont(){}$/;"	f	class:CCMenuItemFont	access:public	signature:()
~CCMenuItemImage	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemImage(){}$/;"	f	class:CCMenuItemImage	access:public	signature:()
~CCMenuItemLabel	menu_nodes/CCMenuItem.cpp	/^CCMenuItemLabel::~CCMenuItemLabel()$/;"	f	class:CCMenuItemLabel	signature:()
~CCMenuItemLabel	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemLabel();$/;"	p	class:CCMenuItemLabel	access:public	signature:()
~CCMenuItemToggle	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle::~CCMenuItemToggle()$/;"	f	class:CCMenuItemToggle	signature:()
~CCMenuItemToggle	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemToggle();$/;"	p	class:CCMenuItemToggle	access:public	signature:()
~CCMotionStreak	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak::~CCMotionStreak()$/;"	f	class:CCMotionStreak	signature:()
~CCMotionStreak	misc_nodes/CCMotionStreak.h	/^    virtual ~CCMotionStreak();$/;"	p	class:CCMotionStreak	access:public	signature:()
~CCNode	base_nodes/CCNode.cpp	/^CCNode::~CCNode(void)$/;"	f	class:CCNode	signature:(void)
~CCNode	base_nodes/CCNode.h	/^    virtual ~CCNode(void);$/;"	p	class:CCNode	access:public	signature:(void)
~CCNodeRGBA	base_nodes/CCNode.cpp	/^CCNodeRGBA::~CCNodeRGBA() {}$/;"	f	class:CCNodeRGBA	signature:()
~CCNodeRGBA	base_nodes/CCNode.h	/^    virtual ~CCNodeRGBA();$/;"	p	class:CCNodeRGBA	access:public	signature:()
~CCNotificationCenter	support/CCNotificationCenter.cpp	/^CCNotificationCenter::~CCNotificationCenter()$/;"	f	class:CCNotificationCenter	signature:()
~CCNotificationCenter	support/CCNotificationCenter.h	/^    ~CCNotificationCenter();$/;"	p	class:CCNotificationCenter	access:public	signature:()
~CCNotificationObserver	support/CCNotificationCenter.cpp	/^CCNotificationObserver::~CCNotificationObserver()$/;"	f	class:CCNotificationObserver	signature:()
~CCNotificationObserver	support/CCNotificationCenter.h	/^    ~CCNotificationObserver();      $/;"	p	class:CCNotificationObserver	access:public	signature:()
~CCObject	cocoa/CCObject.cpp	/^CCObject::~CCObject(void)$/;"	f	class:CCObject	signature:(void)
~CCObject	cocoa/CCObject.h	/^    virtual ~CCObject(void);$/;"	p	class:CCObject	access:public	signature:(void)
~CCOrbitCamera	actions/CCActionCamera.h	/^    ~CCOrbitCamera(){}$/;"	f	class:CCOrbitCamera	access:public	signature:()
~CCParallaxNode	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCParallaxNode::~CCParallaxNode()$/;"	f	class:CCParallaxNode	signature:()
~CCParallaxNode	tilemap_parallax_nodes/CCParallaxNode.h	/^    virtual ~CCParallaxNode();$/;"	p	class:CCParallaxNode	access:public	signature:()
~CCParticleBatchNode	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode::~CCParticleBatchNode()$/;"	f	class:CCParticleBatchNode	signature:()
~CCParticleBatchNode	particle_nodes/CCParticleBatchNode.h	/^    virtual ~CCParticleBatchNode();$/;"	p	class:CCParticleBatchNode	access:public	signature:()
~CCParticleExplosion	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleExplosion(){}$/;"	f	class:CCParticleExplosion	access:public	signature:()
~CCParticleFire	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleFire(){}$/;"	f	class:CCParticleFire	access:public	signature:()
~CCParticleFireworks	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleFireworks(){}$/;"	f	class:CCParticleFireworks	access:public	signature:()
~CCParticleFlower	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleFlower(){}$/;"	f	class:CCParticleFlower	access:public	signature:()
~CCParticleGalaxy	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleGalaxy(){}$/;"	f	class:CCParticleGalaxy	access:public	signature:()
~CCParticleMeteor	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleMeteor(){}$/;"	f	class:CCParticleMeteor	access:public	signature:()
~CCParticleRain	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleRain(){}$/;"	f	class:CCParticleRain	access:public	signature:()
~CCParticleSmoke	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleSmoke(){}$/;"	f	class:CCParticleSmoke	access:public	signature:()
~CCParticleSnow	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleSnow(){}$/;"	f	class:CCParticleSnow	access:public	signature:()
~CCParticleSpiral	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleSpiral(){}$/;"	f	class:CCParticleSpiral	access:public	signature:()
~CCParticleSun	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleSun(){}$/;"	f	class:CCParticleSun	access:public	signature:()
~CCParticleSystem	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem::~CCParticleSystem()$/;"	f	class:CCParticleSystem	signature:()
~CCParticleSystem	particle_nodes/CCParticleSystem.h	/^    virtual ~CCParticleSystem();$/;"	p	class:CCParticleSystem	access:public	signature:()
~CCParticleSystemQuad	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad::~CCParticleSystemQuad()$/;"	f	class:CCParticleSystemQuad	signature:()
~CCParticleSystemQuad	particle_nodes/CCParticleSystemQuad.h	/^    virtual ~CCParticleSystemQuad();$/;"	p	class:CCParticleSystemQuad	access:public	signature:()
~CCPlace	actions/CCActionInstant.h	/^    virtual ~CCPlace(){}$/;"	f	class:CCPlace	access:public	signature:()
~CCPointArray	actions/CCActionCatmullRom.cpp	/^CCPointArray::~CCPointArray()$/;"	f	class:CCPointArray	signature:()
~CCPointArray	actions/CCActionCatmullRom.h	/^    virtual ~CCPointArray();$/;"	p	class:CCPointArray	access:public	signature:()
~CCPoolManager	cocoa/CCAutoreleasePool.cpp	/^CCPoolManager::~CCPoolManager()$/;"	f	class:CCPoolManager	signature:()
~CCPoolManager	cocoa/CCAutoreleasePool.h	/^    ~CCPoolManager();$/;"	p	class:CCPoolManager	access:public	signature:()
~CCProfiler	support/CCProfiling.cpp	/^CCProfiler::~CCProfiler(void)$/;"	f	class:CCProfiler	signature:(void)
~CCProfiler	support/CCProfiling.h	/^    ~CCProfiler(void);$/;"	p	class:CCProfiler	access:public	signature:(void)
~CCProfilingTimer	support/CCProfiling.cpp	/^CCProfilingTimer::~CCProfilingTimer(void)$/;"	f	class:CCProfilingTimer	signature:(void)
~CCProfilingTimer	support/CCProfiling.h	/^    ~CCProfilingTimer(void);$/;"	p	class:CCProfilingTimer	access:public	signature:(void)
~CCProgressTimer	misc_nodes/CCProgressTimer.cpp	/^CCProgressTimer::~CCProgressTimer(void)$/;"	f	class:CCProgressTimer	signature:(void)
~CCProgressTimer	misc_nodes/CCProgressTimer.h	/^    ~CCProgressTimer(void);$/;"	p	class:CCProgressTimer	access:public	signature:(void)
~CCRenderTexture	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture::~CCRenderTexture()$/;"	f	class:CCRenderTexture	signature:()
~CCRenderTexture	misc_nodes/CCRenderTexture.h	/^    virtual ~CCRenderTexture();$/;"	p	class:CCRenderTexture	access:public	signature:()
~CCRepeat	actions/CCActionInterval.cpp	/^CCRepeat::~CCRepeat(void)$/;"	f	class:CCRepeat	signature:(void)
~CCRepeat	actions/CCActionInterval.h	/^    ~CCRepeat(void);$/;"	p	class:CCRepeat	access:public	signature:(void)
~CCRepeatForever	actions/CCActionInterval.cpp	/^CCRepeatForever::~CCRepeatForever()$/;"	f	class:CCRepeatForever	signature:()
~CCRepeatForever	actions/CCActionInterval.h	/^    virtual ~CCRepeatForever();$/;"	p	class:CCRepeatForever	access:public	signature:()
~CCReverseTime	actions/CCActionInterval.cpp	/^CCReverseTime::~CCReverseTime(void)$/;"	f	class:CCReverseTime	signature:(void)
~CCReverseTime	actions/CCActionInterval.h	/^    ~CCReverseTime(void);$/;"	p	class:CCReverseTime	access:public	signature:(void)
~CCSAXParser	platform/CCSAXParser.cpp	/^CCSAXParser::~CCSAXParser(void)$/;"	f	class:CCSAXParser	signature:(void)
~CCSAXParser	platform/CCSAXParser.h	/^    ~CCSAXParser(void);$/;"	p	class:CCSAXParser	access:public	signature:(void)
~CCScene	layers_scenes_transitions_nodes/CCScene.cpp	/^CCScene::~CCScene()$/;"	f	class:CCScene	signature:()
~CCScene	layers_scenes_transitions_nodes/CCScene.h	/^    virtual ~CCScene();$/;"	p	class:CCScene	access:public	signature:()
~CCScheduler	CCScheduler.cpp	/^CCScheduler::~CCScheduler(void)$/;"	f	class:CCScheduler	signature:(void)
~CCScheduler	CCScheduler.h	/^    ~CCScheduler(void);$/;"	p	class:CCScheduler	access:public	signature:(void)
~CCSchedulerScriptHandlerEntry	script_support/CCScriptSupport.cpp	/^CCSchedulerScriptHandlerEntry::~CCSchedulerScriptHandlerEntry(void)$/;"	f	class:CCSchedulerScriptHandlerEntry	signature:(void)
~CCSchedulerScriptHandlerEntry	script_support/CCScriptSupport.h	/^    ~CCSchedulerScriptHandlerEntry(void);$/;"	p	class:CCSchedulerScriptHandlerEntry	access:public	signature:(void)
~CCScriptEngineManager	script_support/CCScriptSupport.cpp	/^CCScriptEngineManager::~CCScriptEngineManager(void)$/;"	f	class:CCScriptEngineManager	signature:(void)
~CCScriptEngineManager	script_support/CCScriptSupport.h	/^    ~CCScriptEngineManager(void);$/;"	p	class:CCScriptEngineManager	access:public	signature:(void)
~CCScriptEngineProtocol	script_support/CCScriptSupport.h	/^    virtual ~CCScriptEngineProtocol() {};$/;"	f	class:CCScriptEngineProtocol	access:public	signature:()
~CCScriptHandlerEntry	script_support/CCScriptSupport.cpp	/^CCScriptHandlerEntry::~CCScriptHandlerEntry(void)$/;"	f	class:CCScriptHandlerEntry	signature:(void)
~CCScriptHandlerEntry	script_support/CCScriptSupport.h	/^    ~CCScriptHandlerEntry(void);$/;"	p	class:CCScriptHandlerEntry	access:public	signature:(void)
~CCSequence	actions/CCActionInterval.cpp	/^CCSequence::~CCSequence(void)$/;"	f	class:CCSequence	signature:(void)
~CCSequence	actions/CCActionInterval.h	/^    ~CCSequence(void);$/;"	p	class:CCSequence	access:public	signature:(void)
~CCSet	cocoa/CCSet.cpp	/^CCSet::~CCSet(void)$/;"	f	class:CCSet	signature:(void)
~CCSet	cocoa/CCSet.h	/^    virtual ~CCSet(void);$/;"	p	class:CCSet	access:public	signature:(void)
~CCShaderCache	shaders/CCShaderCache.cpp	/^CCShaderCache::~CCShaderCache()$/;"	f	class:CCShaderCache	signature:()
~CCShaderCache	shaders/CCShaderCache.h	/^    virtual ~CCShaderCache();$/;"	p	class:CCShaderCache	access:public	signature:()
~CCShow	actions/CCActionInstant.h	/^    virtual ~CCShow(){}$/;"	f	class:CCShow	access:public	signature:()
~CCShuffleTiles	actions/CCActionTiledGrid.cpp	/^CCShuffleTiles::~CCShuffleTiles(void)$/;"	f	class:CCShuffleTiles	signature:(void)
~CCShuffleTiles	actions/CCActionTiledGrid.h	/^    ~CCShuffleTiles(void);$/;"	p	class:CCShuffleTiles	access:public	signature:(void)
~CCSpawn	actions/CCActionInterval.cpp	/^CCSpawn::~CCSpawn(void)$/;"	f	class:CCSpawn	signature:(void)
~CCSpawn	actions/CCActionInterval.h	/^    ~CCSpawn(void);$/;"	p	class:CCSpawn	access:public	signature:(void)
~CCSpeed	actions/CCAction.cpp	/^CCSpeed::~CCSpeed()$/;"	f	class:CCSpeed	signature:()
~CCSpeed	actions/CCAction.h	/^    virtual ~CCSpeed(void);$/;"	p	class:CCSpeed	access:public	signature:(void)
~CCSprite	sprite_nodes/CCSprite.cpp	/^CCSprite::~CCSprite(void)$/;"	f	class:CCSprite	signature:(void)
~CCSprite	sprite_nodes/CCSprite.h	/^    virtual ~CCSprite(void);$/;"	p	class:CCSprite	access:public	signature:(void)
~CCSpriteBatchNode	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode::~CCSpriteBatchNode()$/;"	f	class:CCSpriteBatchNode	signature:()
~CCSpriteBatchNode	sprite_nodes/CCSpriteBatchNode.h	/^    ~CCSpriteBatchNode();$/;"	p	class:CCSpriteBatchNode	access:public	signature:()
~CCSpriteFrame	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame::~CCSpriteFrame(void)$/;"	f	class:CCSpriteFrame	signature:(void)
~CCSpriteFrame	sprite_nodes/CCSpriteFrame.h	/^    ~CCSpriteFrame(void);$/;"	p	class:CCSpriteFrame	access:public	signature:(void)
~CCSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.cpp	/^CCSpriteFrameCache::~CCSpriteFrameCache(void)$/;"	f	class:CCSpriteFrameCache	signature:(void)
~CCSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.h	/^    ~CCSpriteFrameCache(void);$/;"	p	class:CCSpriteFrameCache	access:public	signature:(void)
~CCString	cocoa/CCString.cpp	/^CCString::~CCString()$/;"	f	class:CCString	signature:()
~CCString	cocoa/CCString.h	/^    virtual ~CCString();$/;"	p	class:CCString	access:public	signature:()
~CCTMXLayer	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXLayer::~CCTMXLayer()$/;"	f	class:CCTMXLayer	signature:()
~CCTMXLayer	tilemap_parallax_nodes/CCTMXLayer.h	/^    virtual ~CCTMXLayer();$/;"	p	class:CCTMXLayer	access:public	signature:()
~CCTMXLayerInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXLayerInfo::~CCTMXLayerInfo()$/;"	f	class:CCTMXLayerInfo	signature:()
~CCTMXLayerInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    virtual ~CCTMXLayerInfo();$/;"	p	class:CCTMXLayerInfo	access:public	signature:()
~CCTMXMapInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXMapInfo::~CCTMXMapInfo()$/;"	f	class:CCTMXMapInfo	signature:()
~CCTMXMapInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    virtual ~CCTMXMapInfo();$/;"	p	class:CCTMXMapInfo	access:public	signature:()
~CCTMXObjectGroup	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCTMXObjectGroup::~CCTMXObjectGroup()$/;"	f	class:CCTMXObjectGroup	signature:()
~CCTMXObjectGroup	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    virtual ~CCTMXObjectGroup();$/;"	p	class:CCTMXObjectGroup	access:public	signature:()
~CCTMXTiledMap	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap::~CCTMXTiledMap()$/;"	f	class:CCTMXTiledMap	signature:()
~CCTMXTiledMap	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    virtual ~CCTMXTiledMap();$/;"	p	class:CCTMXTiledMap	access:public	signature:()
~CCTMXTilesetInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXTilesetInfo::~CCTMXTilesetInfo()$/;"	f	class:CCTMXTilesetInfo	signature:()
~CCTMXTilesetInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    virtual ~CCTMXTilesetInfo();$/;"	p	class:CCTMXTilesetInfo	access:public	signature:()
~CCTargetedAction	actions/CCActionInterval.cpp	/^CCTargetedAction::~CCTargetedAction()$/;"	f	class:CCTargetedAction	signature:()
~CCTargetedAction	actions/CCActionInterval.h	/^    virtual ~CCTargetedAction();$/;"	p	class:CCTargetedAction	access:public	signature:()
~CCTargetedTouchHandler	touch_dispatcher/CCTouchHandler.cpp	/^CCTargetedTouchHandler::~CCTargetedTouchHandler(void)$/;"	f	class:CCTargetedTouchHandler	signature:(void)
~CCTargetedTouchHandler	touch_dispatcher/CCTouchHandler.h	/^    ~CCTargetedTouchHandler(void);$/;"	p	class:CCTargetedTouchHandler	access:public	signature:(void)
~CCTextFieldTTF	text_input_node/CCTextFieldTTF.cpp	/^CCTextFieldTTF::~CCTextFieldTTF()$/;"	f	class:CCTextFieldTTF	signature:()
~CCTextFieldTTF	text_input_node/CCTextFieldTTF.h	/^    virtual ~CCTextFieldTTF();$/;"	p	class:CCTextFieldTTF	access:public	signature:()
~CCTexture2D	textures/CCTexture2D.cpp	/^CCTexture2D::~CCTexture2D()$/;"	f	class:CCTexture2D	signature:()
~CCTexture2D	textures/CCTexture2D.h	/^    virtual ~CCTexture2D();$/;"	p	class:CCTexture2D	access:public	signature:()
~CCTextureAtlas	textures/CCTextureAtlas.cpp	/^CCTextureAtlas::~CCTextureAtlas()$/;"	f	class:CCTextureAtlas	signature:()
~CCTextureAtlas	textures/CCTextureAtlas.h	/^    virtual ~CCTextureAtlas();$/;"	p	class:CCTextureAtlas	access:public	signature:()
~CCTextureCache	textures/CCTextureCache.cpp	/^CCTextureCache::~CCTextureCache()$/;"	f	class:CCTextureCache	signature:()
~CCTextureCache	textures/CCTextureCache.h	/^    virtual ~CCTextureCache();$/;"	p	class:CCTextureCache	access:public	signature:()
~CCTexturePVR	textures/CCTexturePVR.h	/^    virtual ~CCTexturePVR();$/;"	p	class:CCTexturePVR	access:public	signature:()
~CCThread	platform/CCThread.cpp	/^CCThread::~CCThread()$/;"	f	class:CCThread	signature:()
~CCThread	platform/CCThread.h	/^    ~CCThread();$/;"	p	class:CCThread	access:public	signature:()
~CCTileMapAtlas	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^CCTileMapAtlas::~CCTileMapAtlas()$/;"	f	class:CCTileMapAtlas	signature:()
~CCTileMapAtlas	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    virtual ~CCTileMapAtlas();$/;"	p	class:CCTileMapAtlas	access:public	signature:()
~CCTiledGrid3D	effects/CCGrid.cpp	/^CCTiledGrid3D::~CCTiledGrid3D(void)$/;"	f	class:CCTiledGrid3D	signature:(void)
~CCTiledGrid3D	effects/CCGrid.h	/^    ~CCTiledGrid3D(void);$/;"	p	class:CCTiledGrid3D	access:public	signature:(void)
~CCToggleVisibility	actions/CCActionInstant.h	/^    virtual ~CCToggleVisibility(){}$/;"	f	class:CCToggleVisibility	access:public	signature:()
~CCTouchDelegate	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual ~CCTouchDelegate()$/;"	f	class:CCTouchDelegate	access:public	signature:()
~CCTouchDispatcher	touch_dispatcher/CCTouchDispatcher.cpp	/^CCTouchDispatcher::~CCTouchDispatcher(void)$/;"	f	class:CCTouchDispatcher	signature:(void)
~CCTouchDispatcher	touch_dispatcher/CCTouchDispatcher.h	/^    ~CCTouchDispatcher();$/;"	p	class:CCTouchDispatcher	access:public	signature:()
~CCTouchHandler	touch_dispatcher/CCTouchHandler.cpp	/^CCTouchHandler::~CCTouchHandler(void)$/;"	f	class:CCTouchHandler	signature:(void)
~CCTouchHandler	touch_dispatcher/CCTouchHandler.h	/^    virtual ~CCTouchHandler(void);$/;"	p	class:CCTouchHandler	access:public	signature:(void)
~CCTouchScriptHandlerEntry	script_support/CCScriptSupport.cpp	/^CCTouchScriptHandlerEntry::~CCTouchScriptHandlerEntry(void)$/;"	f	class:CCTouchScriptHandlerEntry	signature:(void)
~CCTouchScriptHandlerEntry	script_support/CCScriptSupport.h	/^    ~CCTouchScriptHandlerEntry(void);$/;"	p	class:CCTouchScriptHandlerEntry	access:public	signature:(void)
~CCTransitionCrossFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionCrossFade::~CCTransitionCrossFade()$/;"	f	class:CCTransitionCrossFade	signature:()
~CCTransitionCrossFade	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionCrossFade();$/;"	p	class:CCTransitionCrossFade	access:public	signature:()
~CCTransitionFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade::~CCTransitionFade()$/;"	f	class:CCTransitionFade	signature:()
~CCTransitionFade	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFade();$/;"	p	class:CCTransitionFade	access:public	signature:()
~CCTransitionFadeBL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeBL::~CCTransitionFadeBL()$/;"	f	class:CCTransitionFadeBL	signature:()
~CCTransitionFadeBL	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFadeBL();$/;"	p	class:CCTransitionFadeBL	access:public	signature:()
~CCTransitionFadeDown	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeDown::~CCTransitionFadeDown()$/;"	f	class:CCTransitionFadeDown	signature:()
~CCTransitionFadeDown	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFadeDown();$/;"	p	class:CCTransitionFadeDown	access:public	signature:()
~CCTransitionFadeTR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeTR::~CCTransitionFadeTR()$/;"	f	class:CCTransitionFadeTR	signature:()
~CCTransitionFadeTR	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFadeTR();$/;"	p	class:CCTransitionFadeTR	access:public	signature:()
~CCTransitionFadeUp	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeUp::~CCTransitionFadeUp()$/;"	f	class:CCTransitionFadeUp	signature:()
~CCTransitionFadeUp	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFadeUp();$/;"	p	class:CCTransitionFadeUp	access:public	signature:()
~CCTransitionFlipAngular	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular::~CCTransitionFlipAngular()$/;"	f	class:CCTransitionFlipAngular	signature:()
~CCTransitionFlipAngular	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFlipAngular();$/;"	p	class:CCTransitionFlipAngular	access:public	signature:()
~CCTransitionFlipX	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX::~CCTransitionFlipX()$/;"	f	class:CCTransitionFlipX	signature:()
~CCTransitionFlipX	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFlipX();$/;"	p	class:CCTransitionFlipX	access:public	signature:()
~CCTransitionFlipY	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY::~CCTransitionFlipY()$/;"	f	class:CCTransitionFlipY	signature:()
~CCTransitionFlipY	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionFlipY();$/;"	p	class:CCTransitionFlipY	access:public	signature:()
~CCTransitionJumpZoom	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionJumpZoom::~CCTransitionJumpZoom()$/;"	f	class:CCTransitionJumpZoom	signature:()
~CCTransitionJumpZoom	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionJumpZoom();$/;"	p	class:CCTransitionJumpZoom	access:public	signature:()
~CCTransitionMoveInB	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInB::~CCTransitionMoveInB()$/;"	f	class:CCTransitionMoveInB	signature:()
~CCTransitionMoveInB	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionMoveInB();$/;"	p	class:CCTransitionMoveInB	access:public	signature:()
~CCTransitionMoveInL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInL::~CCTransitionMoveInL()$/;"	f	class:CCTransitionMoveInL	signature:()
~CCTransitionMoveInL	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionMoveInL();$/;"	p	class:CCTransitionMoveInL	access:public	signature:()
~CCTransitionMoveInR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInR::~CCTransitionMoveInR()$/;"	f	class:CCTransitionMoveInR	signature:()
~CCTransitionMoveInR	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionMoveInR();$/;"	p	class:CCTransitionMoveInR	access:public	signature:()
~CCTransitionMoveInT	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInT::~CCTransitionMoveInT()$/;"	f	class:CCTransitionMoveInT	signature:()
~CCTransitionMoveInT	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionMoveInT();$/;"	p	class:CCTransitionMoveInT	access:public	signature:()
~CCTransitionPageTurn	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCTransitionPageTurn::~CCTransitionPageTurn()$/;"	f	class:CCTransitionPageTurn	signature:()
~CCTransitionPageTurn	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    virtual ~CCTransitionPageTurn();$/;"	p	class:CCTransitionPageTurn	access:public	signature:()
~CCTransitionRotoZoom	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionRotoZoom::~CCTransitionRotoZoom()$/;"	f	class:CCTransitionRotoZoom	signature:()
~CCTransitionRotoZoom	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionRotoZoom();$/;"	p	class:CCTransitionRotoZoom	access:public	signature:()
~CCTransitionScene	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionScene::~CCTransitionScene()$/;"	f	class:CCTransitionScene	signature:()
~CCTransitionScene	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionScene();$/;"	p	class:CCTransitionScene	access:public	signature:()
~CCTransitionSceneOriented	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSceneOriented::~CCTransitionSceneOriented()$/;"	f	class:CCTransitionSceneOriented	signature:()
~CCTransitionSceneOriented	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSceneOriented();$/;"	p	class:CCTransitionSceneOriented	access:public	signature:()
~CCTransitionShrinkGrow	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionShrinkGrow::~CCTransitionShrinkGrow()$/;"	f	class:CCTransitionShrinkGrow	signature:()
~CCTransitionShrinkGrow	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionShrinkGrow();$/;"	p	class:CCTransitionShrinkGrow	access:public	signature:()
~CCTransitionSlideInB	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInB::~CCTransitionSlideInB()$/;"	f	class:CCTransitionSlideInB	signature:()
~CCTransitionSlideInB	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSlideInB();$/;"	p	class:CCTransitionSlideInB	access:public	signature:()
~CCTransitionSlideInL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInL::~CCTransitionSlideInL()$/;"	f	class:CCTransitionSlideInL	signature:()
~CCTransitionSlideInL	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSlideInL();$/;"	p	class:CCTransitionSlideInL	access:public	signature:()
~CCTransitionSlideInR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInR::~CCTransitionSlideInR()$/;"	f	class:CCTransitionSlideInR	signature:()
~CCTransitionSlideInR	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSlideInR();$/;"	p	class:CCTransitionSlideInR	access:public	signature:()
~CCTransitionSlideInT	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInT::~CCTransitionSlideInT()$/;"	f	class:CCTransitionSlideInT	signature:()
~CCTransitionSlideInT	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSlideInT();$/;"	p	class:CCTransitionSlideInT	access:public	signature:()
~CCTransitionSplitCols	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitCols::~CCTransitionSplitCols()$/;"	f	class:CCTransitionSplitCols	signature:()
~CCTransitionSplitCols	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSplitCols();$/;"	p	class:CCTransitionSplitCols	access:public	signature:()
~CCTransitionSplitRows	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitRows::~CCTransitionSplitRows()$/;"	f	class:CCTransitionSplitRows	signature:()
~CCTransitionSplitRows	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionSplitRows();$/;"	p	class:CCTransitionSplitRows	access:public	signature:()
~CCTransitionTurnOffTiles	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionTurnOffTiles::~CCTransitionTurnOffTiles()$/;"	f	class:CCTransitionTurnOffTiles	signature:()
~CCTransitionTurnOffTiles	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionTurnOffTiles();$/;"	p	class:CCTransitionTurnOffTiles	access:public	signature:()
~CCTransitionZoomFlipAngular	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular::~CCTransitionZoomFlipAngular()$/;"	f	class:CCTransitionZoomFlipAngular	signature:()
~CCTransitionZoomFlipAngular	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionZoomFlipAngular();$/;"	p	class:CCTransitionZoomFlipAngular	access:public	signature:()
~CCTransitionZoomFlipX	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX::~CCTransitionZoomFlipX()$/;"	f	class:CCTransitionZoomFlipX	signature:()
~CCTransitionZoomFlipX	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionZoomFlipX();$/;"	p	class:CCTransitionZoomFlipX	access:public	signature:()
~CCTransitionZoomFlipY	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY::~CCTransitionZoomFlipY()$/;"	f	class:CCTransitionZoomFlipY	signature:()
~CCTransitionZoomFlipY	layers_scenes_transitions_nodes/CCTransition.h	/^    virtual ~CCTransitionZoomFlipY();$/;"	p	class:CCTransitionZoomFlipY	access:public	signature:()
~CCTurnOffTiles	actions/CCActionTiledGrid.cpp	/^CCTurnOffTiles::~CCTurnOffTiles(void)$/;"	f	class:CCTurnOffTiles	signature:(void)
~CCTurnOffTiles	actions/CCActionTiledGrid.h	/^    ~CCTurnOffTiles(void);$/;"	p	class:CCTurnOffTiles	access:public	signature:(void)
~CCUserDefault	support/user_default/CCUserDefault.cpp	/^CCUserDefault::~CCUserDefault()$/;"	f	class:CCUserDefault	signature:()
~CCUserDefault	support/user_default/CCUserDefault.h	/^    ~CCUserDefault();$/;"	p	class:CCUserDefault	access:public	signature:()
~CCUserDefault	support/user_default/CCUserDefaultAndroid.cpp	/^CCUserDefault::~CCUserDefault()$/;"	f	class:CCUserDefault	signature:()
~DynArray	support/tinyxml2/tinyxml2.h	/^    ~DynArray() {$/;"	f	class:tinyxml2::DynArray	access:public	signature:()
~EGLTouchDelegate	touch_dispatcher/CCTouchDispatcher.h	/^    virtual ~EGLTouchDelegate() {}$/;"	f	class:EGLTouchDelegate	access:public	signature:()
~Impl	text_input_node/CCIMEDispatcher.cpp	/^    ~Impl()$/;"	f	class:CCIMEDispatcher::Impl	access:public	signature:()
~MemPool	support/tinyxml2/tinyxml2.h	/^    virtual ~MemPool() {}$/;"	f	class:tinyxml2::MemPool	access:public	signature:()
~MemPoolT	support/tinyxml2/tinyxml2.h	/^    ~MemPoolT() {$/;"	f	class:tinyxml2::MemPoolT	access:public	signature:()
~StrPair	support/tinyxml2/tinyxml2.cpp	/^StrPair::~StrPair()$/;"	f	class:tinyxml2::StrPair	signature:()
~StrPair	support/tinyxml2/tinyxml2.h	/^    ~StrPair();$/;"	p	class:tinyxml2::StrPair	access:public	signature:()
~VolatileTexture	textures/CCTextureCache.cpp	/^VolatileTexture::~VolatileTexture()$/;"	f	class:VolatileTexture	signature:()
~VolatileTexture	textures/CCTextureCache.h	/^    ~VolatileTexture();$/;"	p	class:VolatileTexture	access:public	signature:()
~XMLAttribute	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLAttribute()	{}$/;"	f	class:tinyxml2::XMLAttribute	access:private	signature:()
~XMLComment	support/tinyxml2/tinyxml2.cpp	/^XMLComment::~XMLComment()$/;"	f	class:tinyxml2::XMLComment	signature:()
~XMLComment	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLComment();$/;"	p	class:tinyxml2::XMLComment	access:protected	signature:()
~XMLDeclaration	support/tinyxml2/tinyxml2.cpp	/^XMLDeclaration::~XMLDeclaration()$/;"	f	class:tinyxml2::XMLDeclaration	signature:()
~XMLDeclaration	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLDeclaration();$/;"	p	class:tinyxml2::XMLDeclaration	access:protected	signature:()
~XMLDocument	support/tinyxml2/tinyxml2.cpp	/^XMLDocument::~XMLDocument()$/;"	f	class:tinyxml2::XMLDocument	signature:()
~XMLDocument	support/tinyxml2/tinyxml2.h	/^    ~XMLDocument();$/;"	p	class:tinyxml2::XMLDocument	access:public	signature:()
~XMLElement	support/tinyxml2/tinyxml2.cpp	/^XMLElement::~XMLElement()$/;"	f	class:tinyxml2::XMLElement	signature:()
~XMLElement	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLElement();$/;"	p	class:tinyxml2::XMLElement	access:private	signature:()
~XMLNode	support/tinyxml2/tinyxml2.cpp	/^XMLNode::~XMLNode()$/;"	f	class:tinyxml2::XMLNode	signature:()
~XMLNode	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLNode();$/;"	p	class:tinyxml2::XMLNode	access:protected	signature:()
~XMLPrinter	support/tinyxml2/tinyxml2.h	/^    ~XMLPrinter()	{}$/;"	f	class:tinyxml2::XMLPrinter	access:public	signature:()
~XMLText	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLText()												{}$/;"	f	class:tinyxml2::XMLText	access:protected	signature:()
~XMLUnknown	support/tinyxml2/tinyxml2.cpp	/^XMLUnknown::~XMLUnknown()$/;"	f	class:tinyxml2::XMLUnknown	signature:()
~XMLUnknown	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLUnknown();$/;"	p	class:tinyxml2::XMLUnknown	access:protected	signature:()
~XMLVisitor	support/tinyxml2/tinyxml2.h	/^    virtual ~XMLVisitor() {}$/;"	f	class:tinyxml2::XMLVisitor	access:public	signature:()
~ZipFile	support/zip_support/ZipUtils.cpp	/^ZipFile::~ZipFile()$/;"	f	class:ZipFile	signature:()
~ZipFile	support/zip_support/ZipUtils.h	/^        virtual ~ZipFile();$/;"	p	class:cocos2d::ZipFile	access:public	signature:()
