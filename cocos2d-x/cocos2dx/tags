!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADJUST_FACTOR	layers_scenes_transitions_nodes/CCTransition.cpp	576;"	d	file:
ALLOC	support/zip_support/unzip.cpp	113;"	d	file:
AsyncStruct	textures/CCTextureCache.cpp	/^} AsyncStruct;$/;"	t	typeref:struct:_AsyncStruct	file:
BUFFER_INC_FACTOR	support/zip_support/ZipUtils.cpp	40;"	d	file:
BUFREADCOMMENT	support/zip_support/unzip.cpp	406;"	d	file:
CASESENSITIVITYDEFAULTVALUE	support/zip_support/unzip.cpp	373;"	d	file:
CASESENSITIVITYDEFAULTVALUE	support/zip_support/unzip.cpp	375;"	d	file:
CASESENSITIVITYDEFAULT_NO	support/zip_support/unzip.cpp	99;"	d	file:
CCARRAYDATA_FOREACH	support/data_support/ccCArray.h	57;"	d
CCARRAY_FOREACH	cocoa/CCArray.h	51;"	d
CCARRAY_FOREACH_REVERSE	cocoa/CCArray.h	57;"	d
CCARRAY_VERIFY_TYPE	cocoa/CCArray.h	64;"	d
CCARRAY_VERIFY_TYPE	cocoa/CCArray.h	72;"	d
CCAccelAmplitude	actions/CCActionGrid.h	/^class CC_DLL CCAccelAmplitude : public CCActionInterval$/;"	c
CCAccelDeccelAmplitude	actions/CCActionGrid.h	/^class CC_DLL CCAccelDeccelAmplitude : public CCActionInterval$/;"	c
CCAcceleration	platform/CCAccelerometerDelegate.h	/^class CCAcceleration$/;"	c
CCAccelerometerDelegate	platform/CCAccelerometerDelegate.h	/^class CC_DLL CCAccelerometerDelegate$/;"	c
CCAction	actions/CCAction.cpp	/^CCAction::CCAction()$/;"	f	class:CCAction
CCAction	actions/CCAction.h	/^class CC_DLL CCAction : public CCObject $/;"	c
CCActionCamera	actions/CCActionCamera.h	/^    CCActionCamera()$/;"	f	class:CCActionCamera
CCActionCamera	actions/CCActionCamera.h	/^class CC_DLL CCActionCamera : public CCActionInterval \/\/<NSCopying> $/;"	c
CCActionEase	actions/CCActionEase.h	/^class CC_DLL CCActionEase : public CCActionInterval$/;"	c
CCActionInstant	actions/CCActionInstant.cpp	/^CCActionInstant::CCActionInstant() {$/;"	f	class:CCActionInstant
CCActionInstant	actions/CCActionInstant.h	/^class CC_DLL CCActionInstant : public CCFiniteTimeAction \/\/<NSCopying>$/;"	c
CCActionInterval	actions/CCActionInterval.h	/^class CC_DLL CCActionInterval : public CCFiniteTimeAction$/;"	c
CCActionManager	actions/CCActionManager.cpp	/^CCActionManager::CCActionManager(void)$/;"	f	class:CCActionManager
CCActionManager	actions/CCActionManager.h	/^class CC_DLL CCActionManager : public CCObject$/;"	c
CCActionTween	actions/CCActionTween.h	/^class CC_DLL CCActionTween : public CCActionInterval$/;"	c
CCActionTweenDelegate	actions/CCActionTween.h	/^class CC_DLL CCActionTweenDelegate$/;"	c
CCAffineTransform	cocoa/CCAffineTransform.h	/^struct CCAffineTransform {$/;"	s
CCAffineTransformConcat	cocoa/CCAffineTransform.cpp	/^CCAffineTransform CCAffineTransformConcat(const CCAffineTransform& t1, const CCAffineTransform& t2)$/;"	f
CCAffineTransformEqualToTransform	cocoa/CCAffineTransform.cpp	/^bool CCAffineTransformEqualToTransform(const CCAffineTransform& t1, const CCAffineTransform& t2)$/;"	f
CCAffineTransformIdentity	cocoa/CCAffineTransform.cpp	/^extern const CCAffineTransform CCAffineTransformIdentity = CCAffineTransformMakeIdentity();$/;"	v
CCAffineTransformInvert	cocoa/CCAffineTransform.cpp	/^CCAffineTransform CCAffineTransformInvert(const CCAffineTransform& t)$/;"	f
CCAffineTransformMake	cocoa/CCAffineTransform.h	39;"	d
CCAffineTransformMakeIdentity	cocoa/CCAffineTransform.cpp	/^CCAffineTransform CCAffineTransformMakeIdentity()$/;"	f
CCAffineTransformRotate	cocoa/CCAffineTransform.cpp	/^CCAffineTransform CCAffineTransformRotate(const CCAffineTransform& t, float anAngle)$/;"	f
CCAffineTransformScale	cocoa/CCAffineTransform.cpp	/^CCAffineTransform CCAffineTransformScale(const CCAffineTransform& t, float sx, float sy)$/;"	f
CCAffineTransformTranslate	cocoa/CCAffineTransform.cpp	/^CCAffineTransform CCAffineTransformTranslate(const CCAffineTransform& t, float tx, float ty)$/;"	f
CCAnimate	actions/CCActionInterval.cpp	/^CCAnimate::CCAnimate()$/;"	f	class:CCAnimate
CCAnimate	actions/CCActionInterval.h	/^class CC_DLL CCAnimate : public CCActionInterval$/;"	c
CCAnimation	sprite_nodes/CCAnimation.cpp	/^CCAnimation::CCAnimation()$/;"	f	class:CCAnimation
CCAnimation	sprite_nodes/CCAnimation.h	/^class CC_DLL CCAnimation : public CCObject$/;"	c
CCAnimationCache	sprite_nodes/CCAnimationCache.cpp	/^CCAnimationCache::CCAnimationCache()$/;"	f	class:CCAnimationCache
CCAnimationCache	sprite_nodes/CCAnimationCache.h	/^class CC_DLL CCAnimationCache : public CCObject$/;"	c
CCAnimationFrame	sprite_nodes/CCAnimation.cpp	/^CCAnimationFrame::CCAnimationFrame()$/;"	f	class:CCAnimationFrame
CCAnimationFrame	sprite_nodes/CCAnimation.h	/^class CC_DLL CCAnimationFrame : public CCObject$/;"	c
CCAnimationFrameDisplayedNotification	include/ccMacros.h	246;"	d
CCApplicationProtocol	platform/CCApplicationProtocol.h	/^class CC_DLL CCApplicationProtocol$/;"	c
CCArray	cocoa/CCArray.cpp	/^CCArray::CCArray()$/;"	f	class:CCArray
CCArray	cocoa/CCArray.cpp	/^CCArray::CCArray(unsigned int capacity)$/;"	f	class:CCArray
CCArray	cocoa/CCArray.h	/^class CC_DLL CCArray : public CCObject$/;"	c
CCAssert	include/ccMacros.h	38;"	d
CCAtlasNode	base_nodes/CCAtlasNode.cpp	/^CCAtlasNode::CCAtlasNode()$/;"	f	class:CCAtlasNode
CCAtlasNode	base_nodes/CCAtlasNode.h	/^class CC_DLL CCAtlasNode : public CCNode, public CCRGBAProtocol, public CCTextureProtocol$/;"	c
CCAutoreleasePool	cocoa/CCAutoreleasePool.cpp	/^CCAutoreleasePool::CCAutoreleasePool(void)$/;"	f	class:CCAutoreleasePool
CCAutoreleasePool	cocoa/CCAutoreleasePool.h	/^class CC_DLL CCAutoreleasePool : public CCObject$/;"	c
CCBMFontConfiguration	label_nodes/CCLabelBMFont.cpp	/^CCBMFontConfiguration::CCBMFontConfiguration()$/;"	f	class:CCBMFontConfiguration
CCBMFontConfiguration	label_nodes/CCLabelBMFont.h	/^class CC_DLL CCBMFontConfiguration : public CCObject$/;"	c
CCBezierBy	actions/CCActionInterval.h	/^class CC_DLL CCBezierBy : public CCActionInterval$/;"	c
CCBezierTo	actions/CCActionInterval.h	/^class CC_DLL CCBezierTo : public CCBezierBy$/;"	c
CCBlendProtocol	include/CCProtocols.h	/^class CC_DLL CCBlendProtocol$/;"	c
CCBlink	actions/CCActionInterval.h	/^class CC_DLL CCBlink : public CCActionInterval$/;"	c
CCCallFunc	actions/CCActionInstant.h	/^    CCCallFunc()$/;"	f	class:CCCallFunc
CCCallFunc	actions/CCActionInstant.h	/^class CC_DLL CCCallFunc : public CCActionInstant \/\/<NSCopying>$/;"	c
CCCallFuncN	actions/CCActionInstant.h	/^    CCCallFuncN(){}$/;"	f	class:CCCallFuncN
CCCallFuncN	actions/CCActionInstant.h	/^class CC_DLL CCCallFuncN : public CCCallFunc, public TypeInfo$/;"	c
CCCallFuncND	actions/CCActionInstant.h	/^class CC_DLL CCCallFuncND : public CCCallFuncN$/;"	c
CCCallFuncO	actions/CCActionInstant.cpp	/^CCCallFuncO::CCCallFuncO() :$/;"	f	class:CCCallFuncO
CCCallFuncO	actions/CCActionInstant.h	/^class CC_DLL CCCallFuncO : public CCCallFunc, public TypeInfo$/;"	c
CCCamera	CCCamera.cpp	/^CCCamera::CCCamera(void)$/;"	f	class:CCCamera
CCCamera	CCCamera.h	/^class CC_DLL CCCamera : public CCObject$/;"	c
CCCardinalSplineBy	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineBy::CCCardinalSplineBy() : m_startPosition(0,0)$/;"	f	class:CCCardinalSplineBy
CCCardinalSplineBy	actions/CCActionCatmullRom.h	/^class CC_DLL CCCardinalSplineBy : public CCCardinalSplineTo $/;"	c
CCCardinalSplineTo	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo::CCCardinalSplineTo()$/;"	f	class:CCCardinalSplineTo
CCCardinalSplineTo	actions/CCActionCatmullRom.h	/^class CC_DLL CCCardinalSplineTo : public CCActionInterval$/;"	c
CCCatmullRomBy	actions/CCActionCatmullRom.h	/^class CC_DLL CCCatmullRomBy : public CCCardinalSplineBy$/;"	c
CCCatmullRomTo	actions/CCActionCatmullRom.h	/^class CC_DLL CCCatmullRomTo : public CCCardinalSplineTo$/;"	c
CCClippingNode	misc_nodes/CCClippingNode.cpp	/^CCClippingNode::CCClippingNode()$/;"	f	class:CCClippingNode
CCClippingNode	misc_nodes/CCClippingNode.h	/^class CC_DLL CCClippingNode : public CCNode$/;"	c
CCConfiguration	CCConfiguration.cpp	/^CCConfiguration::CCConfiguration(void)$/;"	f	class:CCConfiguration
CCConfiguration	CCConfiguration.h	/^class CC_DLL CCConfiguration : public CCObject$/;"	c
CCCopying	cocoa/CCObject.h	/^class CC_DLL CCCopying$/;"	c
CCDICT_FOREACH	cocoa/CCDictionary.h	106;"	d
CCDeccelAmplitude	actions/CCActionGrid.h	/^class CC_DLL CCDeccelAmplitude : public CCActionInterval$/;"	c
CCDelayTime	actions/CCActionInterval.h	/^class CC_DLL CCDelayTime : public CCActionInterval$/;"	c
CCDictElement	cocoa/CCDictionary.h	/^    CCDictElement(const char* pszKey, CCObject* pObject)$/;"	f	class:CCDictElement
CCDictElement	cocoa/CCDictionary.h	/^    CCDictElement(intptr_t iKey, CCObject* pObject)$/;"	f	class:CCDictElement
CCDictElement	cocoa/CCDictionary.h	/^class CC_DLL CCDictElement$/;"	c
CCDictMaker	platform/CCFileUtilsCommon_cpp.h	/^    CCDictMaker()        $/;"	f	class:CCDictMaker
CCDictMaker	platform/CCFileUtilsCommon_cpp.h	/^class CCDictMaker : public CCSAXDelegator$/;"	c
CCDictType	cocoa/CCDictionary.h	/^    enum CCDictType$/;"	g	class:CCDictionary
CCDictionary	cocoa/CCDictionary.cpp	/^CCDictionary::CCDictionary()$/;"	f	class:CCDictionary
CCDictionary	cocoa/CCDictionary.h	/^class CC_DLL CCDictionary : public CCObject$/;"	c
CCDirector	CCDirector.cpp	/^CCDirector::CCDirector(void)$/;"	f	class:CCDirector
CCDirector	CCDirector.h	/^class CC_DLL CCDirector : public CCObject, public TypeInfo$/;"	c
CCDirectorDelegate	include/CCProtocols.h	/^class CC_DLL CCDirectorDelegate$/;"	c
CCDisplayLinkDirector	CCDirector.h	/^    CCDisplayLinkDirector(void) $/;"	f	class:CCDisplayLinkDirector
CCDisplayLinkDirector	CCDirector.h	/^class CCDisplayLinkDirector : public CCDirector$/;"	c
CCDrawNode	draw_nodes/CCDrawNode.cpp	/^CCDrawNode::CCDrawNode()$/;"	f	class:CCDrawNode
CCDrawNode	draw_nodes/CCDrawNode.h	/^class CC_DLL CCDrawNode : public CCNode$/;"	c
CCEGLViewProtocol	platform/CCEGLViewProtocol.cpp	/^CCEGLViewProtocol::CCEGLViewProtocol()$/;"	f	class:CCEGLViewProtocol
CCEGLViewProtocol	platform/CCEGLViewProtocol.h	/^class CC_DLL CCEGLViewProtocol$/;"	c
CCEaseBackIn	actions/CCActionEase.h	/^class CC_DLL CCEaseBackIn : public CCActionEase$/;"	c
CCEaseBackInOut	actions/CCActionEase.h	/^class CC_DLL CCEaseBackInOut : public CCActionEase$/;"	c
CCEaseBackOut	actions/CCActionEase.h	/^class CC_DLL CCEaseBackOut : public CCActionEase$/;"	c
CCEaseBounce	actions/CCActionEase.h	/^class CC_DLL CCEaseBounce : public CCActionEase$/;"	c
CCEaseBounceIn	actions/CCActionEase.h	/^class CC_DLL CCEaseBounceIn : public CCEaseBounce$/;"	c
CCEaseBounceInOut	actions/CCActionEase.h	/^class CC_DLL CCEaseBounceInOut : public CCEaseBounce$/;"	c
CCEaseBounceOut	actions/CCActionEase.h	/^class CC_DLL CCEaseBounceOut : public CCEaseBounce$/;"	c
CCEaseElastic	actions/CCActionEase.h	/^class CC_DLL CCEaseElastic : public CCActionEase$/;"	c
CCEaseElasticIn	actions/CCActionEase.h	/^class CC_DLL CCEaseElasticIn : public CCEaseElastic$/;"	c
CCEaseElasticInOut	actions/CCActionEase.h	/^class CC_DLL CCEaseElasticInOut : public CCEaseElastic$/;"	c
CCEaseElasticOut	actions/CCActionEase.h	/^class CC_DLL CCEaseElasticOut : public CCEaseElastic$/;"	c
CCEaseExponentialIn	actions/CCActionEase.h	/^class CC_DLL CCEaseExponentialIn : public CCActionEase$/;"	c
CCEaseExponentialInOut	actions/CCActionEase.h	/^class CC_DLL CCEaseExponentialInOut : public CCActionEase$/;"	c
CCEaseExponentialOut	actions/CCActionEase.h	/^class CC_DLL CCEaseExponentialOut : public CCActionEase$/;"	c
CCEaseIn	actions/CCActionEase.h	/^class CC_DLL CCEaseIn : public CCEaseRateAction$/;"	c
CCEaseInOut	actions/CCActionEase.h	/^class CC_DLL CCEaseInOut : public CCEaseRateAction$/;"	c
CCEaseOut	actions/CCActionEase.h	/^class CC_DLL CCEaseOut : public CCEaseRateAction$/;"	c
CCEaseRateAction	actions/CCActionEase.h	/^class CC_DLL CCEaseRateAction : public CCActionEase$/;"	c
CCEaseSineIn	actions/CCActionEase.h	/^class CC_DLL CCEaseSineIn : public CCActionEase$/;"	c
CCEaseSineInOut	actions/CCActionEase.h	/^class CC_DLL CCEaseSineInOut : public CCActionEase$/;"	c
CCEaseSineOut	actions/CCActionEase.h	/^class CC_DLL CCEaseSineOut : public CCActionEase$/;"	c
CCEvent	touch_dispatcher/CCTouch.h	/^class CC_DLL CCEvent : public CCObject$/;"	c
CCFadeIn	actions/CCActionInterval.h	/^class CC_DLL CCFadeIn : public CCActionInterval$/;"	c
CCFadeOut	actions/CCActionInterval.h	/^class CC_DLL CCFadeOut : public CCActionInterval$/;"	c
CCFadeOutBLTiles	actions/CCActionTiledGrid.h	/^class CC_DLL CCFadeOutBLTiles : public CCFadeOutTRTiles$/;"	c
CCFadeOutDownTiles	actions/CCActionTiledGrid.h	/^class CC_DLL CCFadeOutDownTiles : public CCFadeOutUpTiles$/;"	c
CCFadeOutTRTiles	actions/CCActionTiledGrid.h	/^class CC_DLL CCFadeOutTRTiles : public CCTiledGrid3DAction$/;"	c
CCFadeOutUpTiles	actions/CCActionTiledGrid.h	/^class CC_DLL CCFadeOutUpTiles : public CCFadeOutTRTiles$/;"	c
CCFadeTo	actions/CCActionInterval.h	/^class CC_DLL CCFadeTo : public CCActionInterval$/;"	c
CCFileUtils	platform/CCFileUtils.h	/^    CCFileUtils(void)$/;"	f	class:CCFileUtils
CCFileUtils	platform/CCFileUtils.h	/^class CC_DLL CCFileUtils$/;"	c
CCFiniteTimeAction	actions/CCAction.h	/^    CCFiniteTimeAction()$/;"	f	class:CCFiniteTimeAction
CCFiniteTimeAction	actions/CCAction.h	/^class CC_DLL CCFiniteTimeAction : public CCAction$/;"	c
CCFlipX	actions/CCActionInstant.h	/^    CCFlipX()$/;"	f	class:CCFlipX
CCFlipX	actions/CCActionInstant.h	/^class CC_DLL CCFlipX : public CCActionInstant$/;"	c
CCFlipX3D	actions/CCActionGrid3D.h	/^class CC_DLL CCFlipX3D : public CCGrid3DAction$/;"	c
CCFlipY	actions/CCActionInstant.h	/^    CCFlipY()$/;"	f	class:CCFlipY
CCFlipY	actions/CCActionInstant.h	/^class CC_DLL CCFlipY : public CCActionInstant$/;"	c
CCFlipY3D	actions/CCActionGrid3D.h	/^class CC_DLL CCFlipY3D : public CCFlipX3D$/;"	c
CCFollow	actions/CCAction.h	/^    CCFollow()$/;"	f	class:CCFollow
CCFollow	actions/CCAction.h	/^class CC_DLL CCFollow : public CCAction$/;"	c
CCGLProgram	shaders/CCGLProgram.cpp	/^CCGLProgram::CCGLProgram()$/;"	f	class:CCGLProgram
CCGLProgram	shaders/CCGLProgram.h	/^class CC_DLL CCGLProgram : public CCObject$/;"	c
CCGrabber	effects/CCGrabber.cpp	/^CCGrabber::CCGrabber(void)$/;"	f	class:CCGrabber
CCGrabber	effects/CCGrabber.h	/^class CCGrabber : public CCObject$/;"	c
CCGrid3D	effects/CCGrid.cpp	/^CCGrid3D::CCGrid3D()$/;"	f	class:CCGrid3D
CCGrid3D	effects/CCGrid.h	/^class CC_DLL CCGrid3D : public CCGridBase$/;"	c
CCGrid3DAction	actions/CCActionGrid.h	/^class CC_DLL CCGrid3DAction : public CCGridAction$/;"	c
CCGridAction	actions/CCActionGrid.h	/^class CC_DLL CCGridAction : public CCActionInterval$/;"	c
CCGridBase	effects/CCGrid.h	/^class CC_DLL CCGridBase : public CCObject$/;"	c
CCHide	actions/CCActionInstant.h	/^    CCHide(){}$/;"	f	class:CCHide
CCHide	actions/CCActionInstant.h	/^class CC_DLL CCHide : public CCActionInstant$/;"	c
CCIMEDelegate	text_input_node/CCIMEDelegate.h	/^class CC_DLL CCIMEDelegate$/;"	c
CCIMEDelegate	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDelegate::CCIMEDelegate()$/;"	f	class:CCIMEDelegate
CCIMEDispatcher	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDispatcher::CCIMEDispatcher()$/;"	f	class:CCIMEDispatcher
CCIMEDispatcher	text_input_node/CCIMEDispatcher.h	/^class CC_DLL CCIMEDispatcher$/;"	c
CCIMEKeyboardNotificationInfo	text_input_node/CCIMEDelegate.h	/^} CCIMEKeyboardNotificationInfo;$/;"	t	typeref:struct:__anon40
CCImage	platform/CCImage.h	/^class CC_DLL CCImage : public CCObject$/;"	c
CCImage	platform/CCImageCommon_cpp.h	/^CCImage::CCImage()$/;"	f	class:CCImage
CCInteger	cocoa/CCInteger.h	/^    CCInteger(int v)$/;"	f	class:CCInteger
CCInteger	cocoa/CCInteger.h	/^class CC_DLL CCInteger : public CCObject$/;"	c
CCJumpBy	actions/CCActionInterval.h	/^class CC_DLL CCJumpBy : public CCActionInterval$/;"	c
CCJumpTiles3D	actions/CCActionTiledGrid.h	/^class CC_DLL CCJumpTiles3D : public CCTiledGrid3DAction$/;"	c
CCJumpTo	actions/CCActionInterval.h	/^class CC_DLL CCJumpTo : public CCJumpBy$/;"	c
CCKeypadDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^class CC_DLL CCKeypadDelegate$/;"	c
CCKeypadDispatcher	keypad_dispatcher/CCKeypadDispatcher.cpp	/^CCKeypadDispatcher::CCKeypadDispatcher()$/;"	f	class:CCKeypadDispatcher
CCKeypadDispatcher	keypad_dispatcher/CCKeypadDispatcher.h	/^class CC_DLL CCKeypadDispatcher : public CCObject$/;"	c
CCKeypadHandler	keypad_dispatcher/CCKeypadDelegate.h	/^class CC_DLL CCKeypadHandler : public CCObject$/;"	c
CCLOG	platform/CCPlatformMacros.h	211;"	d
CCLOG	platform/CCPlatformMacros.h	217;"	d
CCLOG	platform/CCPlatformMacros.h	223;"	d
CCLOGERROR	platform/CCPlatformMacros.h	213;"	d
CCLOGERROR	platform/CCPlatformMacros.h	218;"	d
CCLOGERROR	platform/CCPlatformMacros.h	224;"	d
CCLOGINFO	platform/CCPlatformMacros.h	212;"	d
CCLOGINFO	platform/CCPlatformMacros.h	219;"	d
CCLOGINFO	platform/CCPlatformMacros.h	225;"	d
CCLOGWARN	platform/CCPlatformMacros.h	214;"	d
CCLOGWARN	platform/CCPlatformMacros.h	220;"	d
CCLOGWARN	platform/CCPlatformMacros.h	226;"	d
CCLabelAtlas	label_nodes/CCLabelAtlas.h	/^    CCLabelAtlas()$/;"	f	class:CCLabelAtlas
CCLabelAtlas	label_nodes/CCLabelAtlas.h	/^class CC_DLL CCLabelAtlas : public CCAtlasNode, public CCLabelProtocol$/;"	c
CCLabelBMFont	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont::CCLabelBMFont()$/;"	f	class:CCLabelBMFont
CCLabelBMFont	label_nodes/CCLabelBMFont.h	/^class CC_DLL CCLabelBMFont : public CCSpriteBatchNode, public CCLabelProtocol, public CCRGBAProtocol$/;"	c
CCLabelProtocol	include/CCProtocols.h	/^class CC_DLL CCLabelProtocol$/;"	c
CCLabelTTF	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF::CCLabelTTF()$/;"	f	class:CCLabelTTF
CCLabelTTF	label_nodes/CCLabelTTF.h	/^class CC_DLL CCLabelTTF : public CCSprite, public CCLabelProtocol$/;"	c
CCLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayer::CCLayer()$/;"	f	class:CCLayer
CCLayer	layers_scenes_transitions_nodes/CCLayer.h	/^class CC_DLL CCLayer : public CCNode, public CCTouchDelegate, public CCAccelerometerDelegate, public CCKeypadDelegate$/;"	c
CCLayerColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor::CCLayerColor()$/;"	f	class:CCLayerColor
CCLayerColor	layers_scenes_transitions_nodes/CCLayer.h	/^class CC_DLL CCLayerColor : public CCLayer , public CCRGBAProtocol, public CCBlendProtocol$/;"	c
CCLayerGradient	layers_scenes_transitions_nodes/CCLayer.h	/^class CC_DLL CCLayerGradient : public CCLayerColor$/;"	c
CCLayerMultiplex	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex::CCLayerMultiplex()$/;"	f	class:CCLayerMultiplex
CCLayerMultiplex	layers_scenes_transitions_nodes/CCLayer.h	/^class CC_DLL CCLayerMultiplex : public CCLayer$/;"	c
CCLens3D	actions/CCActionGrid3D.h	/^class CC_DLL CCLens3D : public CCGrid3DAction$/;"	c
CCLiquid	actions/CCActionGrid3D.h	/^class CC_DLL CCLiquid : public CCGrid3DAction$/;"	c
CCMenu	menu_nodes/CCMenu.h	/^    CCMenu()$/;"	f	class:CCMenu
CCMenu	menu_nodes/CCMenu.h	/^class CC_DLL CCMenu : public CCLayer, public CCRGBAProtocol$/;"	c
CCMenuItem	menu_nodes/CCMenuItem.h	/^    CCMenuItem()$/;"	f	class:CCMenuItem
CCMenuItem	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItem : public CCNode$/;"	c
CCMenuItemAtlasFont	menu_nodes/CCMenuItem.h	/^    CCMenuItemAtlasFont(){}$/;"	f	class:CCMenuItemAtlasFont
CCMenuItemAtlasFont	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItemAtlasFont : public CCMenuItemLabel$/;"	c
CCMenuItemFont	menu_nodes/CCMenuItem.h	/^    CCMenuItemFont() : m_uFontSize(0), m_strFontName(""){}$/;"	f	class:CCMenuItemFont
CCMenuItemFont	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItemFont : public CCMenuItemLabel$/;"	c
CCMenuItemImage	menu_nodes/CCMenuItem.h	/^    CCMenuItemImage(){}$/;"	f	class:CCMenuItemImage
CCMenuItemImage	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItemImage : public CCMenuItemSprite$/;"	c
CCMenuItemLabel	menu_nodes/CCMenuItem.h	/^    CCMenuItemLabel()$/;"	f	class:CCMenuItemLabel
CCMenuItemLabel	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItemLabel : public CCMenuItem, public CCRGBAProtocol$/;"	c
CCMenuItemSprite	menu_nodes/CCMenuItem.h	/^    CCMenuItemSprite()$/;"	f	class:CCMenuItemSprite
CCMenuItemSprite	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItemSprite : public CCMenuItem, public CCRGBAProtocol$/;"	c
CCMenuItemToggle	menu_nodes/CCMenuItem.h	/^    CCMenuItemToggle()$/;"	f	class:CCMenuItemToggle
CCMenuItemToggle	menu_nodes/CCMenuItem.h	/^class CC_DLL CCMenuItemToggle : public CCMenuItem, public CCRGBAProtocol$/;"	c
CCMotionStreak	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak::CCMotionStreak()$/;"	f	class:CCMotionStreak
CCMotionStreak	misc_nodes/CCMotionStreak.h	/^class CC_DLL CCMotionStreak : public CCNode, public CCTextureProtocol, public CCRGBAProtocol$/;"	c
CCMoveBy	actions/CCActionInterval.h	/^class CC_DLL CCMoveBy : public CCMoveTo$/;"	c
CCMoveTo	actions/CCActionInterval.h	/^class CC_DLL CCMoveTo : public CCActionInterval$/;"	c
CCNode	base_nodes/CCNode.cpp	/^CCNode::CCNode(void)$/;"	f	class:CCNode
CCNode	base_nodes/CCNode.h	/^class CC_DLL CCNode : public CCObject$/;"	c
CCNotificationCenter	support/CCNotificationCenter.cpp	/^CCNotificationCenter::CCNotificationCenter()$/;"	f	class:CCNotificationCenter
CCNotificationCenter	support/CCNotificationCenter.h	/^class CC_DLL CCNotificationCenter : public CCObject$/;"	c
CCNotificationObserver	support/CCNotificationCenter.cpp	/^CCNotificationObserver::CCNotificationObserver(CCObject *target, $/;"	f	class:CCNotificationObserver
CCNotificationObserver	support/CCNotificationCenter.h	/^class CC_DLL CCNotificationObserver : public CCObject$/;"	c
CCObject	cocoa/CCObject.cpp	/^CCObject::CCObject(void)$/;"	f	class:CCObject
CCObject	cocoa/CCObject.h	/^class CC_DLL CCObject : public CCCopying$/;"	c
CCOrbitCamera	actions/CCActionCamera.h	/^    CCOrbitCamera()$/;"	f	class:CCOrbitCamera
CCOrbitCamera	actions/CCActionCamera.h	/^class CC_DLL CCOrbitCamera : public CCActionCamera \/\/<NSCopying> $/;"	c
CCPVRMipmap	textures/CCTexturePVR.h	/^struct CCPVRMipmap {$/;"	s
CCPageTurn3D	actions/CCActionPageTurn3D.h	/^class CC_DLL CCPageTurn3D : public CCGrid3DAction$/;"	c
CCParallaxNode	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCParallaxNode::CCParallaxNode()$/;"	f	class:CCParallaxNode
CCParallaxNode	tilemap_parallax_nodes/CCParallaxNode.h	/^class CC_DLL CCParallaxNode : public CCNode $/;"	c
CCParticleBatchNode	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode::CCParticleBatchNode()$/;"	f	class:CCParticleBatchNode
CCParticleBatchNode	particle_nodes/CCParticleBatchNode.h	/^class CC_DLL CCParticleBatchNode : public CCNode, public CCTextureProtocol$/;"	c
CCParticleExplosion	particle_nodes/CCParticleExamples.h	/^    CCParticleExplosion(){}$/;"	f	class:CCParticleExplosion
CCParticleExplosion	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleExplosion : public CCParticleSystemQuad$/;"	c
CCParticleFire	particle_nodes/CCParticleExamples.h	/^    CCParticleFire(){}$/;"	f	class:CCParticleFire
CCParticleFire	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleFire : public CCParticleSystemQuad$/;"	c
CCParticleFireworks	particle_nodes/CCParticleExamples.h	/^    CCParticleFireworks(){}$/;"	f	class:CCParticleFireworks
CCParticleFireworks	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleFireworks : public CCParticleSystemQuad$/;"	c
CCParticleFlower	particle_nodes/CCParticleExamples.h	/^    CCParticleFlower(){}$/;"	f	class:CCParticleFlower
CCParticleFlower	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleFlower : public CCParticleSystemQuad$/;"	c
CCParticleGalaxy	particle_nodes/CCParticleExamples.h	/^    CCParticleGalaxy(){}$/;"	f	class:CCParticleGalaxy
CCParticleGalaxy	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleGalaxy : public CCParticleSystemQuad$/;"	c
CCParticleMeteor	particle_nodes/CCParticleExamples.h	/^    CCParticleMeteor(){}$/;"	f	class:CCParticleMeteor
CCParticleMeteor	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleMeteor : public CCParticleSystemQuad$/;"	c
CCParticleRain	particle_nodes/CCParticleExamples.h	/^    CCParticleRain(){}$/;"	f	class:CCParticleRain
CCParticleRain	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleRain : public CCParticleSystemQuad$/;"	c
CCParticleSmoke	particle_nodes/CCParticleExamples.h	/^    CCParticleSmoke(){}$/;"	f	class:CCParticleSmoke
CCParticleSmoke	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleSmoke : public CCParticleSystemQuad$/;"	c
CCParticleSnow	particle_nodes/CCParticleExamples.h	/^    CCParticleSnow(){}$/;"	f	class:CCParticleSnow
CCParticleSnow	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleSnow : public CCParticleSystemQuad$/;"	c
CCParticleSpiral	particle_nodes/CCParticleExamples.h	/^    CCParticleSpiral(){}$/;"	f	class:CCParticleSpiral
CCParticleSpiral	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleSpiral : public CCParticleSystemQuad$/;"	c
CCParticleSun	particle_nodes/CCParticleExamples.h	/^    CCParticleSun(){}$/;"	f	class:CCParticleSun
CCParticleSun	particle_nodes/CCParticleExamples.h	/^class CC_DLL CCParticleSun : public CCParticleSystemQuad$/;"	c
CCParticleSystem	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem::CCParticleSystem()$/;"	f	class:CCParticleSystem
CCParticleSystem	particle_nodes/CCParticleSystem.h	/^class CC_DLL CCParticleSystem : public CCNode, public CCTextureProtocol$/;"	c
CCParticleSystemQuad	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad::CCParticleSystemQuad()$/;"	f	class:CCParticleSystemQuad
CCParticleSystemQuad	particle_nodes/CCParticleSystemQuad.h	/^class CC_DLL CCParticleSystemQuad : public CCParticleSystem$/;"	c
CCPlace	actions/CCActionInstant.h	/^    CCPlace(){}$/;"	f	class:CCPlace
CCPlace	actions/CCActionInstant.h	/^class CC_DLL CCPlace : public CCActionInstant \/\/<NSCopying>$/;"	c
CCPoint	cocoa/CCGeometry.cpp	/^CCPoint::CCPoint(const CCPoint& other)$/;"	f	class:CCPoint
CCPoint	cocoa/CCGeometry.cpp	/^CCPoint::CCPoint(float x, float y)$/;"	f	class:CCPoint
CCPoint	cocoa/CCGeometry.cpp	/^CCPoint::CCPoint(void)$/;"	f	class:CCPoint
CCPoint	cocoa/CCGeometry.h	/^class CC_DLL CCPoint : public CCObject$/;"	c
CCPointApplyAffineTransform	cocoa/CCAffineTransform.h	42;"	d
CCPointArray	actions/CCActionCatmullRom.cpp	/^CCPointArray::CCPointArray() :m_pControlPoints(NULL){}$/;"	f	class:CCPointArray
CCPointArray	actions/CCActionCatmullRom.h	/^class CC_DLL CCPointArray : public CCNode$/;"	c
CCPointEqualToPoint	cocoa/CCGeometry.cpp	/^bool CCPoint::CCPointEqualToPoint(const CCPoint& point1, const CCPoint& point2)$/;"	f	class:CCPoint
CCPointFromString	cocoa/CCNS.cpp	/^CCPoint CCPointFromString(const char* pszContent)$/;"	f
CCPointMake	cocoa/CCGeometry.h	112;"	d
CCPointObject	tilemap_parallax_nodes/CCParallaxNode.cpp	/^class CCPointObject : CCObject$/;"	c	file:
CCPointZero	cocoa/CCGeometry.h	/^const CCPoint CCPointZero = CCPointMake(0,0);$/;"	v
CCPoolManager	cocoa/CCAutoreleasePool.cpp	/^CCPoolManager::CCPoolManager()$/;"	f	class:CCPoolManager
CCPoolManager	cocoa/CCAutoreleasePool.h	/^class CC_DLL CCPoolManager$/;"	c
CCProfiler	support/CCProfiling.h	/^class CC_DLL CCProfiler : public CCObject$/;"	c
CCProfilingBeginTimingBlock	support/CCProfiling.cpp	/^void CCProfilingBeginTimingBlock(const char *timerName)$/;"	f
CCProfilingEndTimingBlock	support/CCProfiling.cpp	/^void CCProfilingEndTimingBlock(const char *timerName)$/;"	f
CCProfilingResetTimingBlock	support/CCProfiling.cpp	/^void CCProfilingResetTimingBlock(const char *timerName)$/;"	f
CCProfilingTimer	support/CCProfiling.h	/^class CCProfilingTimer : public CCObject$/;"	c
CCProgressFromTo	actions/CCActionProgressTimer.h	/^class CC_DLL CCProgressFromTo : public CCActionInterval$/;"	c
CCProgressTimer	misc_nodes/CCProgressTimer.cpp	/^CCProgressTimer::CCProgressTimer()$/;"	f	class:CCProgressTimer
CCProgressTimer	misc_nodes/CCProgressTimer.h	/^class CC_DLL CCProgressTimer : public CCNode, public CCRGBAProtocol$/;"	c
CCProgressTimerType	misc_nodes/CCProgressTimer.h	/^} CCProgressTimerType;$/;"	t	typeref:enum:__anon17
CCProgressTo	actions/CCActionProgressTimer.h	/^class CC_DLL CCProgressTo : public CCActionInterval$/;"	c
CCRANDOM_0_1	include/ccMacros.h	60;"	d
CCRANDOM_MINUS1_1	include/ccMacros.h	55;"	d
CCRGBAProtocol	include/CCProtocols.h	/^class CC_DLL CCRGBAProtocol$/;"	c
CCRect	cocoa/CCGeometry.cpp	/^CCRect::CCRect(const CCRect& other)$/;"	f	class:CCRect
CCRect	cocoa/CCGeometry.cpp	/^CCRect::CCRect(float x, float y, float width, float height)$/;"	f	class:CCRect
CCRect	cocoa/CCGeometry.cpp	/^CCRect::CCRect(void)$/;"	f	class:CCRect
CCRect	cocoa/CCGeometry.h	/^class CC_DLL CCRect : public CCObject$/;"	c
CCRectApplyAffineTransform	cocoa/CCAffineTransform.cpp	/^CCRect CCRectApplyAffineTransform(const CCRect& rect, const CCAffineTransform& anAffineTransform)$/;"	f
CCRectContainsPoint	cocoa/CCGeometry.cpp	/^bool CCRect::CCRectContainsPoint(const CCRect& rect, const CCPoint& point)$/;"	f	class:CCRect
CCRectEqualToRect	cocoa/CCGeometry.cpp	/^bool CCRect::CCRectEqualToRect(const CCRect& rect1, const CCRect& rect2)$/;"	f	class:CCRect
CCRectFromString	cocoa/CCNS.cpp	/^CCRect CCRectFromString(const char* pszContent)$/;"	f
CCRectIntersectsRect	cocoa/CCGeometry.cpp	/^bool CCRect::CCRectIntersectsRect(const CCRect& rectA, const CCRect& rectB)$/;"	f	class:CCRect
CCRectMake	cocoa/CCGeometry.h	114;"	d
CCRectZero	cocoa/CCGeometry.h	/^const CCRect CCRectZero = CCRectMake(0,0,0,0);$/;"	v
CCRenderTexture	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture::CCRenderTexture()$/;"	f	class:CCRenderTexture
CCRenderTexture	misc_nodes/CCRenderTexture.h	/^class CC_DLL CCRenderTexture : public CCNode $/;"	c
CCRepeat	actions/CCActionInterval.h	/^class CC_DLL CCRepeat : public CCActionInterval$/;"	c
CCRepeatForever	actions/CCActionInterval.h	/^    CCRepeatForever()$/;"	f	class:CCRepeatForever
CCRepeatForever	actions/CCActionInterval.h	/^class CC_DLL CCRepeatForever : public CCActionInterval$/;"	c
CCReuseGrid	actions/CCActionGrid.h	/^class CC_DLL CCReuseGrid : public CCActionInstant$/;"	c
CCReverseTime	actions/CCActionInterval.cpp	/^CCReverseTime::CCReverseTime() : m_pOther(NULL) $/;"	f	class:CCReverseTime
CCReverseTime	actions/CCActionInterval.h	/^class CC_DLL CCReverseTime : public CCActionInterval$/;"	c
CCRipple3D	actions/CCActionGrid3D.h	/^class CC_DLL CCRipple3D : public CCGrid3DAction$/;"	c
CCRotateBy	actions/CCActionInterval.h	/^class CC_DLL CCRotateBy : public CCActionInterval$/;"	c
CCRotateTo	actions/CCActionInterval.h	/^class CC_DLL CCRotateTo : public CCActionInterval$/;"	c
CCSAXDelegator	platform/CCSAXParser.h	/^class CC_DLL CCSAXDelegator$/;"	c
CCSAXParser	platform/CCSAXParser.cpp	/^CCSAXParser::CCSAXParser()$/;"	f	class:CCSAXParser
CCSAXParser	platform/CCSAXParser.h	/^class CC_DLL CCSAXParser$/;"	c
CCSAXResult	platform/CCFileUtilsCommon_cpp.h	/^}CCSAXResult;$/;"	t	typeref:enum:__anon27
CCSAXState	platform/CCFileUtilsCommon_cpp.h	/^}CCSAXState;$/;"	t	typeref:enum:__anon26
CCScaleBy	actions/CCActionInterval.h	/^class CC_DLL CCScaleBy : public CCScaleTo$/;"	c
CCScaleTo	actions/CCActionInterval.h	/^class CC_DLL CCScaleTo : public CCActionInterval$/;"	c
CCScene	layers_scenes_transitions_nodes/CCScene.cpp	/^CCScene::CCScene()$/;"	f	class:CCScene
CCScene	layers_scenes_transitions_nodes/CCScene.h	/^class CC_DLL CCScene : public CCNode$/;"	c
CCScheduler	CCScheduler.cpp	/^CCScheduler::CCScheduler(void)$/;"	f	class:CCScheduler
CCScheduler	CCScheduler.h	/^class CC_DLL CCScheduler : public CCObject$/;"	c
CCSchedulerScriptHandlerEntry	script_support/CCScriptSupport.h	/^    CCSchedulerScriptHandlerEntry(int nHandler)$/;"	f	class:CCSchedulerScriptHandlerEntry
CCSchedulerScriptHandlerEntry	script_support/CCScriptSupport.h	/^class CCSchedulerScriptHandlerEntry : public CCScriptHandlerEntry$/;"	c
CCScriptEngineManager	script_support/CCScriptSupport.h	/^    CCScriptEngineManager(void)$/;"	f	class:CCScriptEngineManager
CCScriptEngineManager	script_support/CCScriptSupport.h	/^class CC_DLL CCScriptEngineManager$/;"	c
CCScriptEngineProtocol	script_support/CCScriptSupport.h	/^class CC_DLL CCScriptEngineProtocol$/;"	c
CCScriptHandlerEntry	script_support/CCScriptSupport.h	/^    CCScriptHandlerEntry(int nHandler)$/;"	f	class:CCScriptHandlerEntry
CCScriptHandlerEntry	script_support/CCScriptSupport.h	/^class CCScriptHandlerEntry : public CCObject$/;"	c
CCSequence	actions/CCActionInterval.h	/^class CC_DLL CCSequence : public CCActionInterval$/;"	c
CCSet	cocoa/CCSet.cpp	/^CCSet::CCSet(const CCSet &rSetObject)$/;"	f	class:CCSet
CCSet	cocoa/CCSet.cpp	/^CCSet::CCSet(void)$/;"	f	class:CCSet
CCSet	cocoa/CCSet.h	/^class CC_DLL CCSet : public CCObject$/;"	c
CCSetIterator	cocoa/CCSet.h	/^typedef std::set<CCObject *>::iterator CCSetIterator;$/;"	t
CCShaderCache	shaders/CCShaderCache.cpp	/^CCShaderCache::CCShaderCache()$/;"	f	class:CCShaderCache
CCShaderCache	shaders/CCShaderCache.h	/^class CC_DLL CCShaderCache : public CCObject $/;"	c
CCShaky3D	actions/CCActionGrid3D.h	/^class CC_DLL CCShaky3D : public CCGrid3DAction$/;"	c
CCShakyTiles3D	actions/CCActionTiledGrid.h	/^class CC_DLL CCShakyTiles3D : public CCTiledGrid3DAction$/;"	c
CCShatteredTiles3D	actions/CCActionTiledGrid.h	/^class CC_DLL CCShatteredTiles3D : public CCTiledGrid3DAction$/;"	c
CCShow	actions/CCActionInstant.h	/^    CCShow(){}$/;"	f	class:CCShow
CCShow	actions/CCActionInstant.h	/^class CC_DLL CCShow : public CCActionInstant$/;"	c
CCShuffleTiles	actions/CCActionTiledGrid.h	/^class CC_DLL CCShuffleTiles : public CCTiledGrid3DAction$/;"	c
CCSize	cocoa/CCGeometry.cpp	/^CCSize::CCSize(const CCSize& other)$/;"	f	class:CCSize
CCSize	cocoa/CCGeometry.cpp	/^CCSize::CCSize(float width, float height)$/;"	f	class:CCSize
CCSize	cocoa/CCGeometry.cpp	/^CCSize::CCSize(void)$/;"	f	class:CCSize
CCSize	cocoa/CCGeometry.h	/^class CC_DLL CCSize : public CCObject$/;"	c
CCSizeApplyAffineTransform	cocoa/CCAffineTransform.h	45;"	d
CCSizeEqualToSize	cocoa/CCGeometry.cpp	/^bool CCSize::CCSizeEqualToSize(const CCSize& size1, const CCSize& size2)$/;"	f	class:CCSize
CCSizeFromString	cocoa/CCNS.cpp	/^CCSize CCSizeFromString(const char* pszContent)$/;"	f
CCSizeMake	cocoa/CCGeometry.h	113;"	d
CCSizeZero	cocoa/CCGeometry.h	/^const CCSize CCSizeZero = CCSizeMake(0,0);$/;"	v
CCSkewBy	actions/CCActionInterval.h	/^class CC_DLL CCSkewBy : public CCSkewTo$/;"	c
CCSkewTo	actions/CCActionInterval.cpp	/^CCSkewTo::CCSkewTo()$/;"	f	class:CCSkewTo
CCSkewTo	actions/CCActionInterval.h	/^class CC_DLL CCSkewTo : public CCActionInterval$/;"	c
CCSpawn	actions/CCActionInterval.h	/^class CC_DLL CCSpawn : public CCActionInterval$/;"	c
CCSpeed	actions/CCAction.h	/^    CCSpeed()$/;"	f	class:CCSpeed
CCSpeed	actions/CCAction.h	/^class CC_DLL CCSpeed : public CCAction$/;"	c
CCSplitCols	actions/CCActionTiledGrid.h	/^class CC_DLL CCSplitCols : public CCTiledGrid3DAction$/;"	c
CCSplitRows	actions/CCActionTiledGrid.h	/^class CC_DLL CCSplitRows : public CCTiledGrid3DAction$/;"	c
CCSprite	sprite_nodes/CCSprite.cpp	/^CCSprite::CCSprite(void)$/;"	f	class:CCSprite
CCSprite	sprite_nodes/CCSprite.h	/^class CC_DLL CCSprite : public CCNode, public CCTextureProtocol, public CCRGBAProtocol$/;"	c
CCSpriteBatchNode	sprite_nodes/CCSpriteBatchNode.h	/^class CC_DLL CCSpriteBatchNode : public CCNode, public CCTextureProtocol$/;"	c
CCSpriteFrame	sprite_nodes/CCSpriteFrame.h	/^class CC_DLL CCSpriteFrame : public CCObject$/;"	c
CCSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.h	/^    CCSpriteFrameCache(void) : m_pSpriteFrames(NULL), m_pSpriteFramesAliases(NULL){}$/;"	f	class:CCSpriteFrameCache
CCSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.h	/^class CC_DLL CCSpriteFrameCache : public CCObject$/;"	c
CCSpriteIndexNotInitialized	sprite_nodes/CCSprite.h	53;"	d
CCStandardTouchDelegate	touch_dispatcher/CCTouchDelegateProtocol.h	/^ class CC_DLL CCStandardTouchDelegate : public CCTouchDelegate$/;"	c
CCStandardTouchHandler	touch_dispatcher/CCTouchHandler.h	/^class CC_DLL  CCStandardTouchHandler : public CCTouchHandler$/;"	c
CCStopGrid	actions/CCActionGrid.h	/^class CC_DLL CCStopGrid : public CCActionInstant$/;"	c
CCString	cocoa/CCString.cpp	/^CCString::CCString()$/;"	f	class:CCString
CCString	cocoa/CCString.cpp	/^CCString::CCString(const CCString& str)$/;"	f	class:CCString
CCString	cocoa/CCString.cpp	/^CCString::CCString(const char * str)$/;"	f	class:CCString
CCString	cocoa/CCString.cpp	/^CCString::CCString(const std::string& str)$/;"	f	class:CCString
CCString	cocoa/CCString.h	/^class CC_DLL CCString : public CCObject$/;"	c
CCStringCompare	cocoa/CCString.h	/^struct CCStringCompare : public std::binary_function<CCString *, CCString *, bool> {$/;"	s
CCStringMake	cocoa/CCString.h	164;"	d
CCTMXLayer	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXLayer::CCTMXLayer()$/;"	f	class:CCTMXLayer
CCTMXLayer	tilemap_parallax_nodes/CCTMXLayer.h	/^class CC_DLL CCTMXLayer : public CCSpriteBatchNode$/;"	c
CCTMXLayerInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXLayerInfo::CCTMXLayerInfo()$/;"	f	class:CCTMXLayerInfo
CCTMXLayerInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^class CC_DLL CCTMXLayerInfo : public CCObject$/;"	c
CCTMXMapInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXMapInfo::CCTMXMapInfo()$/;"	f	class:CCTMXMapInfo
CCTMXMapInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^class CC_DLL CCTMXMapInfo : public CCObject, public CCSAXDelegator$/;"	c
CCTMXObjectGroup	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCTMXObjectGroup::CCTMXObjectGroup()$/;"	f	class:CCTMXObjectGroup
CCTMXObjectGroup	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^class CC_DLL CCTMXObjectGroup : public CCObject$/;"	c
CCTMXOrientationHex	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXOrientationHex,$/;"	e	enum:__anon52
CCTMXOrientationIso	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXOrientationIso,$/;"	e	enum:__anon52
CCTMXOrientationOrtho	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCTMXOrientationOrtho,$/;"	e	enum:__anon52
CCTMXTiledMap	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap::CCTMXTiledMap()$/;"	f	class:CCTMXTiledMap
CCTMXTiledMap	tilemap_parallax_nodes/CCTMXTiledMap.h	/^class CC_DLL CCTMXTiledMap : public CCNode$/;"	c
CCTMXTilesetInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXTilesetInfo::CCTMXTilesetInfo()$/;"	f	class:CCTMXTilesetInfo
CCTMXTilesetInfo	tilemap_parallax_nodes/CCTMXXMLParser.h	/^class CC_DLL CCTMXTilesetInfo : public CCObject$/;"	c
CCTOUCHBEGAN	touch_dispatcher/CCTouchDispatcher.h	/^    CCTOUCHBEGAN,$/;"	e	enum:__anon56
CCTOUCHCANCELLED	touch_dispatcher/CCTouchDispatcher.h	/^    CCTOUCHCANCELLED,$/;"	e	enum:__anon56
CCTOUCHENDED	touch_dispatcher/CCTouchDispatcher.h	/^    CCTOUCHENDED,$/;"	e	enum:__anon56
CCTOUCHMOVED	touch_dispatcher/CCTouchDispatcher.h	/^    CCTOUCHMOVED,$/;"	e	enum:__anon56
CCTargetedAction	actions/CCActionInterval.cpp	/^CCTargetedAction::CCTargetedAction()$/;"	f	class:CCTargetedAction
CCTargetedAction	actions/CCActionInterval.h	/^class CC_DLL CCTargetedAction : public CCActionInterval$/;"	c
CCTargetedTouchDelegate	touch_dispatcher/CCTouchDelegateProtocol.h	/^ class CC_DLL CCTargetedTouchDelegate : public CCTouchDelegate$/;"	c
CCTargetedTouchHandler	touch_dispatcher/CCTouchHandler.h	/^class CC_DLL  CCTargetedTouchHandler : public CCTouchHandler$/;"	c
CCTextAlignment	include/ccTypes.h	/^} CCTextAlignment;$/;"	t	typeref:enum:__anon7
CCTextFieldDelegate	text_input_node/CCTextFieldTTF.h	/^class CC_DLL CCTextFieldDelegate$/;"	c
CCTextFieldTTF	text_input_node/CCTextFieldTTF.cpp	/^CCTextFieldTTF::CCTextFieldTTF()$/;"	f	class:CCTextFieldTTF
CCTextFieldTTF	text_input_node/CCTextFieldTTF.h	/^class CC_DLL CCTextFieldTTF : public CCLabelTTF, public CCIMEDelegate$/;"	c
CCTexture2D	textures/CCTexture2D.cpp	/^CCTexture2D::CCTexture2D()$/;"	f	class:CCTexture2D
CCTexture2D	textures/CCTexture2D.h	/^class CC_DLL CCTexture2D : public CCObject$/;"	c
CCTexture2DPixelFormat	textures/CCTexture2D.h	/^} CCTexture2DPixelFormat;$/;"	t	typeref:enum:__anon41
CCTextureAtlas	textures/CCTextureAtlas.cpp	/^CCTextureAtlas::CCTextureAtlas()$/;"	f	class:CCTextureAtlas
CCTextureAtlas	textures/CCTextureAtlas.h	/^class CC_DLL CCTextureAtlas : public CCObject $/;"	c
CCTextureCache	textures/CCTextureCache.cpp	/^CCTextureCache::CCTextureCache()$/;"	f	class:CCTextureCache
CCTextureCache	textures/CCTextureCache.h	/^class CC_DLL CCTextureCache : public CCObject$/;"	c
CCTexturePVR	textures/CCTexturePVR.h	/^class CCTexturePVR : public CCObject$/;"	c
CCTextureProtocol	include/CCProtocols.h	/^class CC_DLL CCTextureProtocol : public CCBlendProtocol$/;"	c
CCThread	platform/CCThread.h	/^    CCThread() : m_pAutoreasePool(0) {}$/;"	f	class:CCThread
CCThread	platform/CCThread.h	/^class CC_DLL CCThread$/;"	c
CCTileMapAtlas	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^CCTileMapAtlas::CCTileMapAtlas()$/;"	f	class:CCTileMapAtlas
CCTileMapAtlas	tilemap_parallax_nodes/CCTileMapAtlas.h	/^class CC_DLL CCTileMapAtlas : public CCAtlasNode $/;"	c
CCTiledGrid3D	effects/CCGrid.cpp	/^CCTiledGrid3D::CCTiledGrid3D()$/;"	f	class:CCTiledGrid3D
CCTiledGrid3D	effects/CCGrid.h	/^class CC_DLL CCTiledGrid3D : public CCGridBase$/;"	c
CCTiledGrid3DAction	actions/CCActionGrid.h	/^class CC_DLL CCTiledGrid3DAction : public CCGridAction$/;"	c
CCTime	platform/platform.h	/^class CC_DLL CCTime$/;"	c
CCTimer	CCScheduler.cpp	/^CCTimer::CCTimer()$/;"	f	class:CCTimer
CCTimer	CCScheduler.h	/^class CC_DLL CCTimer : public CCObject$/;"	c
CCTintBy	actions/CCActionInterval.h	/^class CC_DLL CCTintBy : public CCActionInterval$/;"	c
CCTintTo	actions/CCActionInterval.h	/^class CC_DLL CCTintTo : public CCActionInterval$/;"	c
CCToggleVisibility	actions/CCActionInstant.h	/^    CCToggleVisibility(){}$/;"	f	class:CCToggleVisibility
CCToggleVisibility	actions/CCActionInstant.h	/^class CC_DLL CCToggleVisibility : public CCActionInstant$/;"	c
CCTouch	touch_dispatcher/CCTouch.h	/^    CCTouch() $/;"	f	class:CCTouch
CCTouch	touch_dispatcher/CCTouch.h	/^class CC_DLL CCTouch : public CCObject$/;"	c
CCTouchDelegate	touch_dispatcher/CCTouchDelegateProtocol.h	/^    CCTouchDelegate() {}$/;"	f	class:CCTouchDelegate
CCTouchDelegate	touch_dispatcher/CCTouchDelegateProtocol.h	/^class CC_DLL CCTouchDelegate$/;"	c
CCTouchDispatcher	touch_dispatcher/CCTouchDispatcher.h	/^    CCTouchDispatcher() $/;"	f	class:CCTouchDispatcher
CCTouchDispatcher	touch_dispatcher/CCTouchDispatcher.h	/^class CC_DLL CCTouchDispatcher : public CCObject, public EGLTouchDelegate$/;"	c
CCTouchHandler	touch_dispatcher/CCTouchHandler.h	/^class CC_DLL  CCTouchHandler : public CCObject$/;"	c
CCTouchScriptHandlerEntry	script_support/CCScriptSupport.h	/^    CCTouchScriptHandlerEntry(int nHandler)$/;"	f	class:CCTouchScriptHandlerEntry
CCTouchScriptHandlerEntry	script_support/CCScriptSupport.h	/^class CCTouchScriptHandlerEntry : public CCScriptHandlerEntry$/;"	c
CCTransitionCrossFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionCrossFade::CCTransitionCrossFade()$/;"	f	class:CCTransitionCrossFade
CCTransitionCrossFade	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionCrossFade : public CCTransitionScene$/;"	c
CCTransitionEaseScene	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionEaseScene\/\/ : public CCObject$/;"	c
CCTransitionFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade::CCTransitionFade()$/;"	f	class:CCTransitionFade
CCTransitionFade	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFade : public CCTransitionScene$/;"	c
CCTransitionFadeBL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeBL::CCTransitionFadeBL()$/;"	f	class:CCTransitionFadeBL
CCTransitionFadeBL	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFadeBL : public CCTransitionFadeTR$/;"	c
CCTransitionFadeDown	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeDown::CCTransitionFadeDown()$/;"	f	class:CCTransitionFadeDown
CCTransitionFadeDown	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFadeDown : public CCTransitionFadeTR$/;"	c
CCTransitionFadeTR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeTR::CCTransitionFadeTR()$/;"	f	class:CCTransitionFadeTR
CCTransitionFadeTR	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFadeTR : public CCTransitionScene , public CCTransitionEaseScene$/;"	c
CCTransitionFadeUp	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeUp::CCTransitionFadeUp()$/;"	f	class:CCTransitionFadeUp
CCTransitionFadeUp	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFadeUp : public CCTransitionFadeTR$/;"	c
CCTransitionFlipAngular	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular::CCTransitionFlipAngular()$/;"	f	class:CCTransitionFlipAngular
CCTransitionFlipAngular	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFlipAngular : public CCTransitionSceneOriented$/;"	c
CCTransitionFlipX	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX::CCTransitionFlipX()$/;"	f	class:CCTransitionFlipX
CCTransitionFlipX	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFlipX : public CCTransitionSceneOriented$/;"	c
CCTransitionFlipY	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY::CCTransitionFlipY()$/;"	f	class:CCTransitionFlipY
CCTransitionFlipY	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionFlipY : public CCTransitionSceneOriented$/;"	c
CCTransitionJumpZoom	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionJumpZoom::CCTransitionJumpZoom()$/;"	f	class:CCTransitionJumpZoom
CCTransitionJumpZoom	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionJumpZoom : public CCTransitionScene$/;"	c
CCTransitionMoveInB	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInB::CCTransitionMoveInB()$/;"	f	class:CCTransitionMoveInB
CCTransitionMoveInB	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionMoveInB : public CCTransitionMoveInL$/;"	c
CCTransitionMoveInL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInL::CCTransitionMoveInL()$/;"	f	class:CCTransitionMoveInL
CCTransitionMoveInL	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionMoveInL : public CCTransitionScene, public CCTransitionEaseScene$/;"	c
CCTransitionMoveInR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInR::CCTransitionMoveInR()$/;"	f	class:CCTransitionMoveInR
CCTransitionMoveInR	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionMoveInR : public CCTransitionMoveInL$/;"	c
CCTransitionMoveInT	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInT::CCTransitionMoveInT()$/;"	f	class:CCTransitionMoveInT
CCTransitionMoveInT	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionMoveInT : public CCTransitionMoveInL $/;"	c
CCTransitionPageTurn	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCTransitionPageTurn::CCTransitionPageTurn()$/;"	f	class:CCTransitionPageTurn
CCTransitionPageTurn	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^class CC_DLL CCTransitionPageTurn : public CCTransitionScene$/;"	c
CCTransitionProgress	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgress::CCTransitionProgress()$/;"	f	class:CCTransitionProgress
CCTransitionProgress	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgress : public CCTransitionScene$/;"	c
CCTransitionProgressHorizontal	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgressHorizontal : public CCTransitionProgress$/;"	c
CCTransitionProgressInOut	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgressInOut : public CCTransitionProgress$/;"	c
CCTransitionProgressOutIn	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgressOutIn : public CCTransitionProgress$/;"	c
CCTransitionProgressRadialCCW	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgressRadialCCW : public CCTransitionProgress$/;"	c
CCTransitionProgressRadialCW	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgressRadialCW : public CCTransitionProgress$/;"	c
CCTransitionProgressVertical	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^class CC_DLL CCTransitionProgressVertical : public CCTransitionProgress$/;"	c
CCTransitionRotoZoom	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionRotoZoom::CCTransitionRotoZoom()$/;"	f	class:CCTransitionRotoZoom
CCTransitionRotoZoom	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionRotoZoom : public CCTransitionScene$/;"	c
CCTransitionScene	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionScene::CCTransitionScene()$/;"	f	class:CCTransitionScene
CCTransitionScene	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionScene : public CCScene$/;"	c
CCTransitionSceneOriented	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSceneOriented::CCTransitionSceneOriented()$/;"	f	class:CCTransitionSceneOriented
CCTransitionSceneOriented	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSceneOriented : public CCTransitionScene$/;"	c
CCTransitionShrinkGrow	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionShrinkGrow::CCTransitionShrinkGrow()$/;"	f	class:CCTransitionShrinkGrow
CCTransitionShrinkGrow	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionShrinkGrow : public CCTransitionScene , public CCTransitionEaseScene$/;"	c
CCTransitionSlideInB	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInB::CCTransitionSlideInB()$/;"	f	class:CCTransitionSlideInB
CCTransitionSlideInB	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSlideInB : public CCTransitionSlideInL$/;"	c
CCTransitionSlideInL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInL::CCTransitionSlideInL()$/;"	f	class:CCTransitionSlideInL
CCTransitionSlideInL	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSlideInL : public CCTransitionScene, public CCTransitionEaseScene$/;"	c
CCTransitionSlideInR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInR::CCTransitionSlideInR()$/;"	f	class:CCTransitionSlideInR
CCTransitionSlideInR	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSlideInR : public CCTransitionSlideInL $/;"	c
CCTransitionSlideInT	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInT::CCTransitionSlideInT()$/;"	f	class:CCTransitionSlideInT
CCTransitionSlideInT	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSlideInT : public CCTransitionSlideInL$/;"	c
CCTransitionSplitCols	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitCols::CCTransitionSplitCols()$/;"	f	class:CCTransitionSplitCols
CCTransitionSplitCols	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSplitCols : public CCTransitionScene , public CCTransitionEaseScene$/;"	c
CCTransitionSplitRows	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitRows::CCTransitionSplitRows()$/;"	f	class:CCTransitionSplitRows
CCTransitionSplitRows	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionSplitRows : public CCTransitionSplitCols$/;"	c
CCTransitionTurnOffTiles	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionTurnOffTiles::CCTransitionTurnOffTiles()$/;"	f	class:CCTransitionTurnOffTiles
CCTransitionTurnOffTiles	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionTurnOffTiles : public CCTransitionScene ,public CCTransitionEaseScene$/;"	c
CCTransitionZoomFlipAngular	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular::CCTransitionZoomFlipAngular()$/;"	f	class:CCTransitionZoomFlipAngular
CCTransitionZoomFlipAngular	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionZoomFlipAngular : public CCTransitionSceneOriented$/;"	c
CCTransitionZoomFlipX	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX::CCTransitionZoomFlipX()$/;"	f	class:CCTransitionZoomFlipX
CCTransitionZoomFlipX	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionZoomFlipX : public CCTransitionSceneOriented$/;"	c
CCTransitionZoomFlipY	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY::CCTransitionZoomFlipY()$/;"	f	class:CCTransitionZoomFlipY
CCTransitionZoomFlipY	layers_scenes_transitions_nodes/CCTransition.h	/^class CC_DLL CCTransitionZoomFlipY : public CCTransitionSceneOriented$/;"	c
CCTurnOffTiles	actions/CCActionTiledGrid.h	/^class CC_DLL CCTurnOffTiles : public CCTiledGrid3DAction$/;"	c
CCTwirl	actions/CCActionGrid3D.h	/^class CC_DLL CCTwirl : public CCGrid3DAction$/;"	c
CCUserDefault	support/CCUserDefault.cpp	/^CCUserDefault::CCUserDefault()$/;"	f	class:CCUserDefault
CCUserDefault	support/CCUserDefault.h	/^class CC_DLL CCUserDefault$/;"	c
CCVerticalTextAlignment	include/ccTypes.h	/^} CCVerticalTextAlignment;$/;"	t	typeref:enum:__anon6
CCWaves	actions/CCActionGrid3D.h	/^class CC_DLL CCWaves : public CCGrid3DAction$/;"	c
CCWaves3D	actions/CCActionGrid3D.h	/^class CC_DLL CCWaves3D : public CCGrid3DAction$/;"	c
CCWavesTiles3D	actions/CCActionTiledGrid.h	/^class CC_DLL CCWavesTiles3D : public CCTiledGrid3DAction$/;"	c
CCZHeader	support/zip_support/ZipUtils.h	/^    struct CCZHeader {$/;"	s	namespace:cocos2d
CCZ_COMPRESSION_BZIP2	support/zip_support/ZipUtils.h	/^        CCZ_COMPRESSION_BZIP2,                \/\/ bzip2 format (not supported yet)$/;"	e	enum:cocos2d::__anon39
CCZ_COMPRESSION_GZIP	support/zip_support/ZipUtils.h	/^        CCZ_COMPRESSION_GZIP,                \/\/ gzip format (not supported yet)$/;"	e	enum:cocos2d::__anon39
CCZ_COMPRESSION_NONE	support/zip_support/ZipUtils.h	/^        CCZ_COMPRESSION_NONE,                \/\/ plain (not supported yet)$/;"	e	enum:cocos2d::__anon39
CCZ_COMPRESSION_ZLIB	support/zip_support/ZipUtils.h	/^        CCZ_COMPRESSION_ZLIB,                \/\/ zlib format.$/;"	e	enum:cocos2d::__anon39
CCZone	cocoa/CCZone.cpp	/^CCZone::CCZone(CCObject *pObject)$/;"	f	class:CCZone
CCZone	cocoa/CCZone.h	/^class CC_DLL CCZone$/;"	c
CC_ARRAY_H	support/data_support/ccCArray.h	43;"	d
CC_ASYNC_TEXTURE_CACHE_SEMAPHORE	textures/CCTextureCache.cpp	81;"	d	file:
CC_ASYNC_TEXTURE_CACHE_USE_NAMED_SEMAPHORE	textures/CCTextureCache.cpp	74;"	d	file:
CC_ASYNC_TEXTURE_CACHE_USE_NAMED_SEMAPHORE	textures/CCTextureCache.cpp	76;"	d	file:
CC_BLEND_DST	include/ccMacros.h	78;"	d
CC_BLEND_SRC	include/ccMacros.h	77;"	d
CC_BREAK_IF	platform/CCPlatformMacros.h	204;"	d
CC_CONTENT_SCALE_FACTOR	include/ccMacros.h	112;"	d
CC_DEGREES_TO_RADIANS	include/ccMacros.h	65;"	d
CC_DEPRECATED_ATTRIBUTE	platform/CCPlatformMacros.h	240;"	d
CC_DEPRECATED_ATTRIBUTE	platform/CCPlatformMacros.h	242;"	d
CC_DEPRECATED_ATTRIBUTE	platform/CCPlatformMacros.h	244;"	d
CC_DIRECTOR_DISPATCH_FAST_EVENTS	include/ccConfig.h	133;"	d
CC_DIRECTOR_END	include/ccMacros.h	102;"	d
CC_DIRECTOR_FPS_POSITION	include/ccConfig.h	119;"	d
CC_DIRECTOR_MAC_USE_DISPLAY_LINK_THREAD	include/ccConfig.h	148;"	d
CC_DIRECTOR_STATS_INTERVAL	include/ccConfig.h	110;"	d
CC_DIRECTOR_STATS_POSITION	CCDirector.cpp	65;"	d	file:
CC_ENABLE_BOX2D_INTEGRATION	include/ccConfig.h	57;"	d
CC_ENABLE_CACHE_TEXTURE_DATA	platform/CCPlatformMacros.h	84;"	d
CC_ENABLE_CACHE_TEXTURE_DATA	platform/CCPlatformMacros.h	86;"	d
CC_ENABLE_CHIPMUNK_INTEGRATION	include/ccConfig.h	45;"	d
CC_ENABLE_GL_STATE_CACHE	include/ccConfig.h	75;"	d
CC_ENABLE_PROFILERS	include/ccConfig.h	269;"	d
CC_FIX_ARTIFACTS_BY_STRECHING_TEXEL	include/ccConfig.h	99;"	d
CC_GL_ALL	shaders/ccGLStateCache.h	/^      CC_GL_ALL = 0,$/;"	e	enum:__anon34
CC_HOST_IS_BIG_ENDIAN	include/ccMacros.h	173;"	d
CC_INCREMENT_GL_DRAWS	include/ccMacros.h	238;"	d
CC_INVALID_INDEX	support/data_support/ccCArray.h	54;"	d
CC_LABELATLAS_DEBUG_DRAW	include/ccConfig.h	258;"	d
CC_LABELBMFONT_DEBUG_DRAW	include/ccConfig.h	248;"	d
CC_LUA_ENGINE_DEBUG	include/ccConfig.h	274;"	d
CC_MAX_TOUCHES	platform/CCEGLViewProtocol.h	23;"	d
CC_NODE_DRAW_SETUP	include/ccMacros.h	85;"	d
CC_NODE_RENDER_SUBPIXEL	include/ccConfig.h	158;"	d
CC_PLATFORM_ANDROID	platform/CCPlatformConfig.h	39;"	d
CC_PLATFORM_BADA	platform/CCPlatformConfig.h	43;"	d
CC_PLATFORM_BLACKBERRY	platform/CCPlatformConfig.h	44;"	d
CC_PLATFORM_IOS	platform/CCPlatformConfig.h	38;"	d
CC_PLATFORM_LINUX	platform/CCPlatformConfig.h	42;"	d
CC_PLATFORM_MAC	platform/CCPlatformConfig.h	45;"	d
CC_PLATFORM_MARMALADE	platform/CCPlatformConfig.h	41;"	d
CC_PLATFORM_UNKNOWN	platform/CCPlatformConfig.h	37;"	d
CC_PLATFORM_WIN32	platform/CCPlatformConfig.h	40;"	d
CC_POINT_PIXELS_TO_POINTS	include/ccMacros.h	135;"	d
CC_POINT_POINTS_TO_PIXELS	include/ccMacros.h	141;"	d
CC_PROFILER_DISPLAY_TIMERS	include/ccMacros.h	186;"	d
CC_PROFILER_DISPLAY_TIMERS	include/ccMacros.h	204;"	d
CC_PROFILER_PURGE_ALL	include/ccMacros.h	187;"	d
CC_PROFILER_PURGE_ALL	include/ccMacros.h	205;"	d
CC_PROFILER_RESET	include/ccMacros.h	191;"	d
CC_PROFILER_RESET	include/ccMacros.h	209;"	d
CC_PROFILER_RESET_CATEGORY	include/ccMacros.h	195;"	d
CC_PROFILER_RESET_CATEGORY	include/ccMacros.h	213;"	d
CC_PROFILER_RESET_INSTANCE	include/ccMacros.h	199;"	d
CC_PROFILER_RESET_INSTANCE	include/ccMacros.h	217;"	d
CC_PROFILER_START	include/ccMacros.h	189;"	d
CC_PROFILER_START	include/ccMacros.h	207;"	d
CC_PROFILER_START_CATEGORY	include/ccMacros.h	193;"	d
CC_PROFILER_START_CATEGORY	include/ccMacros.h	211;"	d
CC_PROFILER_START_INSTANCE	include/ccMacros.h	197;"	d
CC_PROFILER_START_INSTANCE	include/ccMacros.h	215;"	d
CC_PROFILER_STOP	include/ccMacros.h	190;"	d
CC_PROFILER_STOP	include/ccMacros.h	208;"	d
CC_PROFILER_STOP_CATEGORY	include/ccMacros.h	194;"	d
CC_PROFILER_STOP_CATEGORY	include/ccMacros.h	212;"	d
CC_PROFILER_STOP_INSTANCE	include/ccMacros.h	198;"	d
CC_PROFILER_STOP_INSTANCE	include/ccMacros.h	216;"	d
CC_PROPERTY	platform/CCPlatformMacros.h	138;"	d
CC_PROPERTY_PASS_BY_REF	platform/CCPlatformMacros.h	143;"	d
CC_PROPERTY_READONLY	platform/CCPlatformMacros.h	120;"	d
CC_PROPERTY_READONLY_PASS_BY_REF	platform/CCPlatformMacros.h	124;"	d
CC_PVRMIPMAP_MAX	textures/CCTexturePVR.h	/^    CC_PVRMIPMAP_MAX = 16,$/;"	e	enum:__anon51
CC_RADIANS_TO_DEGREES	include/ccMacros.h	70;"	d
CC_REBIND_INDICES_BUFFER	platform/CCPlatformMacros.h	93;"	d
CC_REBIND_INDICES_BUFFER	platform/CCPlatformMacros.h	95;"	d
CC_RECT_PIXELS_TO_POINTS	include/ccMacros.h	121;"	d
CC_RECT_POINTS_TO_PIXELS	include/ccMacros.h	128;"	d
CC_RGB_PREMULTIPLY_ALPHA	platform/CCImageCommon_cpp.h	43;"	d
CC_SAFE_DELETE	platform/CCPlatformMacros.h	198;"	d
CC_SAFE_DELETE_ARRAY	platform/CCPlatformMacros.h	199;"	d
CC_SAFE_FREE	platform/CCPlatformMacros.h	200;"	d
CC_SAFE_RELEASE	platform/CCPlatformMacros.h	201;"	d
CC_SAFE_RELEASE_NULL	platform/CCPlatformMacros.h	202;"	d
CC_SAFE_RETAIN	platform/CCPlatformMacros.h	203;"	d
CC_SIZE_PIXELS_TO_POINTS	include/ccMacros.h	147;"	d
CC_SIZE_POINTS_TO_PIXELS	include/ccMacros.h	153;"	d
CC_SPRITEBATCHNODE_DEBUG_DRAW	include/ccConfig.h	238;"	d
CC_SPRITEBATCHNODE_RENDER_SUBPIXEL	include/ccConfig.h	168;"	d
CC_SPRITE_DEBUG_DRAW	include/ccConfig.h	228;"	d
CC_SUPPORT_PVRTC	platform/CCPlatformConfig.h	60;"	d
CC_SWAP	include/ccMacros.h	46;"	d
CC_SWAP16	include/ccMacros.h	175;"	d
CC_SWAP32	include/ccMacros.h	174;"	d
CC_SWAP_INT16_BIG_TO_HOST	include/ccMacros.h	179;"	d
CC_SWAP_INT16_LITTLE_TO_HOST	include/ccMacros.h	177;"	d
CC_SWAP_INT32_BIG_TO_HOST	include/ccMacros.h	178;"	d
CC_SWAP_INT32_LITTLE_TO_HOST	include/ccMacros.h	176;"	d
CC_SYNTHESIZE	platform/CCPlatformMacros.h	175;"	d
CC_SYNTHESIZE_PASS_BY_REF	platform/CCPlatformMacros.h	180;"	d
CC_SYNTHESIZE_READONLY	platform/CCPlatformMacros.h	157;"	d
CC_SYNTHESIZE_READONLY_PASS_BY_REF	platform/CCPlatformMacros.h	161;"	d
CC_SYNTHESIZE_RETAIN	platform/CCPlatformMacros.h	185;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	48;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	52;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	53;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	58;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	59;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	65;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	66;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	71;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	72;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	77;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	78;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	83;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	84;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	89;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	90;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	95;"	d
CC_TARGET_PLATFORM	platform/CCPlatformConfig.h	96;"	d
CC_TEXTURE_ATLAS_USE_TRIANGLE_STRIP	include/ccConfig.h	179;"	d
CC_TEXTURE_ATLAS_USE_VAO	include/ccConfig.h	192;"	d
CC_TEXTURE_ATLAS_USE_VAO	include/ccConfig.h	197;"	d
CC_USE_LA88_LABELS	include/ccConfig.h	212;"	d
CC_XML_CHAR	platform/CCSAXParser.h	/^typedef unsigned char CC_XML_CHAR;$/;"	t
CDL_DELETE	support/data_support/utlist.h	458;"	d
CDL_FOREACH	support/data_support/utlist.h	469;"	d
CDL_FOREACH_SAFE	support/data_support/utlist.h	472;"	d
CDL_PREPEND	support/data_support/utlist.h	444;"	d
CDL_SEARCH	support/data_support/utlist.h	484;"	d
CDL_SEARCH_SCALAR	support/data_support/utlist.h	477;"	d
CDL_SORT	support/data_support/utlist.h	216;"	d
CGAffineToGL	support/TransformUtils.cpp	/^void CGAffineToGL(const CCAffineTransform *t, GLfloat *m)$/;"	f	namespace:cocos2d
CHECK_GL_ERROR_DEBUG	include/ccMacros.h	222;"	d
CHECK_GL_ERROR_DEBUG	include/ccMacros.h	224;"	d
COCOS2D_VERSION	include/cocos2d.h	32;"	d
CREATE_FUNC	platform/CCPlatformMacros.h	38;"	d
C_STACK_H_INCLUDED	kazmath/include/kazmath/GL/mat4stack.h	27;"	d
DECLTYPE	support/data_support/uthash.h	37;"	d
DECLTYPE	support/data_support/uthash.h	40;"	d
DECLTYPE	support/data_support/uthash.h	43;"	d
DECLTYPE	support/data_support/uthash.h	48;"	d
DECLTYPE	support/data_support/uthash.h	49;"	d
DECLTYPE_ASSIGN	support/data_support/uthash.h	53;"	d
DECLTYPE_ASSIGN	support/data_support/uthash.h	59;"	d
DISALLOW_COPY_AND_ASSIGN	include/ccMacros.h	161;"	d
DL_APPEND	support/data_support/utlist.h	398;"	d
DL_DELETE	support/data_support/utlist.h	412;"	d
DL_FOREACH	support/data_support/utlist.h	430;"	d
DL_FOREACH_SAFE	support/data_support/utlist.h	434;"	d
DL_PREPEND	support/data_support/utlist.h	386;"	d
DL_SEARCH	support/data_support/utlist.h	439;"	d
DL_SEARCH_SCALAR	support/data_support/utlist.h	438;"	d
DL_SORT	support/data_support/utlist.h	158;"	d
DelegateIter	text_input_node/CCIMEDispatcher.cpp	/^typedef std::list< CCIMEDelegate * >::iterator  DelegateIter;$/;"	t	file:
DelegateList	text_input_node/CCIMEDispatcher.cpp	/^typedef std::list< CCIMEDelegate * > DelegateList;$/;"	t	file:
EGLTouchDelegate	touch_dispatcher/CCTouchDispatcher.h	/^class CC_DLL EGLTouchDelegate$/;"	c
EImageFormat	platform/CCImage.h	/^    }EImageFormat;$/;"	t	class:CCImage	typeref:enum:CCImage::__anon28
ELMT_FROM_HH	support/data_support/uthash.h	93;"	d
ETextAlign	platform/CCImage.h	/^    }ETextAlign;$/;"	t	class:CCImage	typeref:enum:CCImage::__anon29
EVENT_COME_TO_BACKGROUND	include/CCEventType.h	17;"	d
EVNET_COME_TO_FOREGROUND	include/CCEventType.h	12;"	d
FLT_EPSILON	include/ccMacros.h	158;"	d
FNTConfigLoadFile	label_nodes/CCLabelBMFont.cpp	/^CCBMFontConfiguration* FNTConfigLoadFile( const char *fntFile)$/;"	f
FNTConfigRemoveCache	label_nodes/CCLabelBMFont.cpp	/^void FNTConfigRemoveCache( void )$/;"	f
FileListContainer	support/zip_support/ZipUtils.cpp	/^    typedef std::map<std::string, struct ZipEntryInfo> FileListContainer;$/;"	t	class:ZipFilePrivate	file:
GLInfoFunction	shaders/CCGLProgram.h	/^typedef void (*GLInfoFunction)(GLuint program, GLenum pname, GLint* params);$/;"	t
GLLogFunction	shaders/CCGLProgram.h	/^typedef void (*GLLogFunction) (GLuint program, GLsizei bufsize, GLsizei* length, GLchar* infolog);$/;"	t
GLToCGAffine	support/TransformUtils.cpp	/^void GLToCGAffine(const GLfloat *m, CCAffineTransform *t)$/;"	f	namespace:cocos2d
GLToClipTransform	CCDirector.cpp	/^GLToClipTransform(kmMat4 *transformOut)$/;"	f	file:
HASH_ADD	support/data_support/uthash.h	160;"	d
HASH_ADD_INT	support/data_support/uthash.h	248;"	d
HASH_ADD_KEYPTR	support/data_support/uthash.h	163;"	d
HASH_ADD_PTR	support/data_support/uthash.h	252;"	d
HASH_ADD_STR	support/data_support/uthash.h	244;"	d
HASH_ADD_TO_BKT	support/data_support/uthash.h	663;"	d
HASH_BER	support/data_support/uthash.h	339;"	d
HASH_BKT_CAPACITY_THRESH	support/data_support/uthash.h	90;"	d
HASH_BLOOM_ADD	support/data_support/uthash.h	128;"	d
HASH_BLOOM_ADD	support/data_support/uthash.h	137;"	d
HASH_BLOOM_BITLEN	support/data_support/uthash.h	109;"	d
HASH_BLOOM_BITSET	support/data_support/uthash.h	125;"	d
HASH_BLOOM_BITTEST	support/data_support/uthash.h	126;"	d
HASH_BLOOM_BYTELEN	support/data_support/uthash.h	110;"	d
HASH_BLOOM_FREE	support/data_support/uthash.h	120;"	d
HASH_BLOOM_FREE	support/data_support/uthash.h	136;"	d
HASH_BLOOM_MAKE	support/data_support/uthash.h	111;"	d
HASH_BLOOM_MAKE	support/data_support/uthash.h	135;"	d
HASH_BLOOM_SIGNATURE	support/data_support/uthash.h	939;"	d
HASH_BLOOM_TEST	support/data_support/uthash.h	131;"	d
HASH_BLOOM_TEST	support/data_support/uthash.h	138;"	d
HASH_CLEAR	support/data_support/uthash.h	893;"	d
HASH_CNT	support/data_support/uthash.h	915;"	d
HASH_COUNT	support/data_support/uthash.h	914;"	d
HASH_DEL	support/data_support/uthash.h	254;"	d
HASH_DELETE	support/data_support/uthash.h	205;"	d
HASH_DEL_IN_BKT	support/data_support/uthash.h	677;"	d
HASH_EMIT_KEY	support/data_support/uthash.h	321;"	d
HASH_EMIT_KEY	support/data_support/uthash.h	328;"	d
HASH_EXPAND_BUCKETS	support/data_support/uthash.h	718;"	d
HASH_FCN	support/data_support/uthash.h	333;"	d
HASH_FCN	support/data_support/uthash.h	335;"	d
HASH_FIND	support/data_support/uthash.h	95;"	d
HASH_FIND_INT	support/data_support/uthash.h	246;"	d
HASH_FIND_IN_BKT	support/data_support/uthash.h	649;"	d
HASH_FIND_PTR	support/data_support/uthash.h	250;"	d
HASH_FIND_STR	support/data_support/uthash.h	242;"	d
HASH_FNV	support/data_support/uthash.h	361;"	d
HASH_FSCK	support/data_support/uthash.h	262;"	d
HASH_FSCK	support/data_support/uthash.h	314;"	d
HASH_INITIAL_NUM_BUCKETS	support/data_support/uthash.h	88;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	support/data_support/uthash.h	89;"	d
HASH_ITER	support/data_support/uthash.h	904;"	d
HASH_ITER	support/data_support/uthash.h	908;"	d
HASH_JEN	support/data_support/uthash.h	400;"	d
HASH_JEN_MIX	support/data_support/uthash.h	387;"	d
HASH_KEYCMP	support/data_support/uthash.h	646;"	d
HASH_MAKE_TABLE	support/data_support/uthash.h	141;"	d
HASH_MUR	support/data_support/uthash.h	508;"	d
HASH_MUR	support/data_support/uthash.h	510;"	d
HASH_MUR_ALIGNED	support/data_support/uthash.h	548;"	d
HASH_MUR_UNALIGNED	support/data_support/uthash.h	514;"	d
HASH_OAT	support/data_support/uthash.h	371;"	d
HASH_OOPS	support/data_support/uthash.h	261;"	d
HASH_SAX	support/data_support/uthash.h	351;"	d
HASH_SELECT	support/data_support/uthash.h	855;"	d
HASH_SFH	support/data_support/uthash.h	452;"	d
HASH_SIGNATURE	support/data_support/uthash.h	938;"	d
HASH_SORT	support/data_support/uthash.h	770;"	d
HASH_SRT	support/data_support/uthash.h	771;"	d
HASH_TO_BKT	support/data_support/uthash.h	188;"	d
INCREMENT	kazmath/src/GL/mat4stack.c	32;"	d	file:
INITIAL_SIZE	kazmath/src/GL/mat4stack.c	31;"	d	file:
ImageInfo	textures/CCTextureCache.cpp	/^} ImageInfo;$/;"	t	typeref:struct:_ImageInfo	file:
Impl	text_input_node/CCIMEDispatcher.cpp	/^    Impl()$/;"	f	class:CCIMEDispatcher::Impl
Impl	text_input_node/CCIMEDispatcher.cpp	/^class CCIMEDispatcher::Impl$/;"	c	class:CCIMEDispatcher	file:
KAZMATH_AABB_H_INCLUDED	kazmath/include/kazmath/aabb.h	27;"	d
KAZMATH_H_INCLUDED	kazmath/include/kazmath/kazmath.h	27;"	d
KM_FALSE	kazmath/include/kazmath/utility.h	45;"	d
KM_GL_MATRIX_H_INCLUDED	kazmath/include/kazmath/GL/matrix.h	27;"	d
KM_GL_MODELVIEW	kazmath/include/kazmath/GL/matrix.h	31;"	d
KM_GL_PROJECTION	kazmath/include/kazmath/GL/matrix.h	32;"	d
KM_GL_TEXTURE	kazmath/include/kazmath/GL/matrix.h	33;"	d
KM_PLANE_BOTTOM	kazmath/include/kazmath/plane.h	31;"	d
KM_PLANE_FAR	kazmath/include/kazmath/plane.h	34;"	d
KM_PLANE_LEFT	kazmath/include/kazmath/plane.h	29;"	d
KM_PLANE_NEAR	kazmath/include/kazmath/plane.h	33;"	d
KM_PLANE_RIGHT	kazmath/include/kazmath/plane.h	30;"	d
KM_PLANE_TOP	kazmath/include/kazmath/plane.h	32;"	d
KM_TRUE	kazmath/include/kazmath/utility.h	49;"	d
LDECLTYPE	support/data_support/utlist.h	68;"	d
LL_APPEND	support/data_support/utlist.h	295;"	d
LL_APPEND	support/data_support/utlist.h	356;"	d
LL_APPEND	support/data_support/utlist.h	357;"	d
LL_APPEND_VS2008	support/data_support/utlist.h	325;"	d
LL_DELETE	support/data_support/utlist.h	308;"	d
LL_DELETE	support/data_support/utlist.h	358;"	d
LL_DELETE	support/data_support/utlist.h	359;"	d
LL_DELETE_VS2008	support/data_support/utlist.h	337;"	d
LL_FOREACH	support/data_support/utlist.h	363;"	d
LL_FOREACH_SAFE	support/data_support/utlist.h	366;"	d
LL_PREPEND	support/data_support/utlist.h	289;"	d
LL_SEARCH	support/data_support/utlist.h	376;"	d
LL_SEARCH_SCALAR	support/data_support/utlist.h	369;"	d
LL_SORT	support/data_support/utlist.h	102;"	d
LUALOG	platform/CCPlatformMacros.h	231;"	d
LUALOG	platform/CCPlatformMacros.h	233;"	d
LanguageType	platform/CCCommon.h	/^typedef enum LanguageType$/;"	g
MAT3_H_INCLUDED	kazmath/include/kazmath/mat3.h	28;"	d
MAT4_H_INCLUDED	kazmath/include/kazmath/mat4.h	27;"	d
MAX_KEY_LEN	cocoa/CCDictionary.h	44;"	d
M_PI	draw_nodes/CCDrawingPrimitives.cpp	53;"	d	file:
M_PI_X_2	actions/CCActionEase.cpp	39;"	d	file:
NEON_Matrix4Mul	kazmath/src/neon_matrix_impl.c	/^void NEON_Matrix4Mul(const float* a, const float* b, float* output )$/;"	f
NEON_Matrix4Vector4Mul	kazmath/src/neon_matrix_impl.c	/^void NEON_Matrix4Vector4Mul(const float* m, const float* v, float* output)$/;"	f
NODE_FUNC	platform/CCPlatformMacros.h	60;"	d
NOUNCRYPT	support/zip_support/unzip.cpp	72;"	d	file:
NO_DECLTYPE	support/data_support/uthash.h	39;"	d
NO_DECLTYPE	support/data_support/uthash.h	47;"	d
NS_CC_BEGIN	platform/CCPlatformMacros.h	102;"	d
NS_CC_BEGIN	platform/CCPlatformMacros.h	106;"	d
NS_CC_END	platform/CCPlatformMacros.h	103;"	d
NS_CC_END	platform/CCPlatformMacros.h	107;"	d
NULL	kazmath/src/quaternion.c	36;"	d	file:
OF	support/zip_support/ioapi.h	/^typedef ZPOS64_T (ZCALLBACK *tell64_file_func)    OF((voidpf opaque, voidpf stream));$/;"	t	namespace:cocos2d
OF	support/zip_support/ioapi.h	/^typedef uLong    (ZCALLBACK *read_file_func)      OF((voidpf opaque, voidpf stream, void* buf, uLong size));$/;"	t	namespace:cocos2d
OF	support/zip_support/ioapi.h	/^typedef uLong    (ZCALLBACK *write_file_func)     OF((voidpf opaque, voidpf stream, const void* buf, uLong size));$/;"	t	namespace:cocos2d
OF	support/zip_support/ioapi.h	/^typedef voidpf   (ZCALLBACK *open64_file_func)    OF((voidpf opaque, const void* filename, int mode));$/;"	t	namespace:cocos2d
OF	support/zip_support/ioapi.h	/^typedef voidpf   (ZCALLBACK *open_file_func)      OF((voidpf opaque, const char* filename, int mode));$/;"	t	namespace:cocos2d
PLANE_H_INCLUDED	kazmath/include/kazmath/plane.h	27;"	d
PNGSIGSIZE	platform/CCImageCommon_cpp.h	344;"	d
POINT_BEHIND_PLANE	kazmath/include/kazmath/plane.h	/^    POINT_BEHIND_PLANE,$/;"	e	enum:POINT_CLASSIFICATION
POINT_CLASSIFICATION	kazmath/include/kazmath/plane.h	/^typedef enum POINT_CLASSIFICATION {$/;"	g
POINT_CLASSIFICATION	kazmath/include/kazmath/plane.h	/^} POINT_CLASSIFICATION;$/;"	t	typeref:enum:POINT_CLASSIFICATION
POINT_INFRONT_OF_PLANE	kazmath/include/kazmath/plane.h	/^    POINT_INFRONT_OF_PLANE = 0,$/;"	e	enum:POINT_CLASSIFICATION
POINT_ON_PLANE	kazmath/include/kazmath/plane.h	/^    POINT_ON_PLANE,$/;"	e	enum:POINT_CLASSIFICATION
PVR2_MAX_TABLE_ELEMENTS	textures/CCTexturePVR.cpp	156;"	d	file:
PVR3_MAX_TABLE_ELEMENTS	textures/CCTexturePVR.cpp	181;"	d	file:
PVRHaveAlphaPremultiplied_	textures/CCTexture2D.cpp	/^static bool PVRHaveAlphaPremultiplied_ = false;$/;"	v	file:
PVRImagesHavePremultipliedAlpha	textures/CCTexture2D.cpp	/^void CCTexture2D::PVRImagesHavePremultipliedAlpha(bool haveAlphaPremultiplied)$/;"	f	class:CCTexture2D
PVRTableFormats	textures/CCTexturePVR.cpp	/^static const ccPVRTexturePixelFormatInfo PVRTableFormats[] = {$/;"	v	file:
PVR_TEXTURE_FLAG_TYPE_MASK	textures/CCTexturePVR.cpp	41;"	d	file:
QUATERNION_H_INCLUDED	kazmath/include/kazmath/quaternion.h	27;"	d
RAY_2_H	kazmath/include/kazmath/ray2.h	27;"	d
RENDER_IN_SUBPIXEL	base_nodes/CCNode.cpp	44;"	d	file:
RENDER_IN_SUBPIXEL	base_nodes/CCNode.cpp	46;"	d	file:
RENDER_IN_SUBPIXEL	sprite_nodes/CCSprite.cpp	55;"	d	file:
ResolutionPolicy	platform/CCEGLViewProtocol.h	/^enum ResolutionPolicy$/;"	g
SAX_ARRAY	platform/CCFileUtilsCommon_cpp.h	/^    SAX_ARRAY$/;"	e	enum:__anon26
SAX_DICT	platform/CCFileUtilsCommon_cpp.h	/^    SAX_DICT,$/;"	e	enum:__anon26
SAX_INT	platform/CCFileUtilsCommon_cpp.h	/^    SAX_INT,$/;"	e	enum:__anon26
SAX_KEY	platform/CCFileUtilsCommon_cpp.h	/^    SAX_KEY,$/;"	e	enum:__anon26
SAX_NONE	platform/CCFileUtilsCommon_cpp.h	/^    SAX_NONE = 0,$/;"	e	enum:__anon26
SAX_REAL	platform/CCFileUtilsCommon_cpp.h	/^    SAX_REAL,$/;"	e	enum:__anon26
SAX_RESULT_ARRAY	platform/CCFileUtilsCommon_cpp.h	/^    SAX_RESULT_ARRAY$/;"	e	enum:__anon27
SAX_RESULT_DICT	platform/CCFileUtilsCommon_cpp.h	/^    SAX_RESULT_DICT,$/;"	e	enum:__anon27
SAX_RESULT_NONE	platform/CCFileUtilsCommon_cpp.h	/^    SAX_RESULT_NONE = 0,$/;"	e	enum:__anon27
SAX_STRING	platform/CCFileUtilsCommon_cpp.h	/^    SAX_STRING,$/;"	e	enum:__anon26
SEL_CallFunc	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_CallFunc)();$/;"	t
SEL_CallFuncN	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_CallFuncN)(CCNode*);$/;"	t
SEL_CallFuncND	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_CallFuncND)(CCNode*, void*);$/;"	t
SEL_CallFuncO	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_CallFuncO)(CCObject*);$/;"	t
SEL_Compare	cocoa/CCObject.h	/^typedef int (CCObject::*SEL_Compare)(CCObject*);$/;"	t
SEL_EventHandler	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_EventHandler)(CCEvent*);$/;"	t
SEL_MenuHandler	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_MenuHandler)(CCObject*);$/;"	t
SEL_SCHEDULE	cocoa/CCObject.h	/^typedef void (CCObject::*SEL_SCHEDULE)(float);$/;"	t
SET_DIRTY_RECURSIVELY	sprite_nodes/CCSprite.cpp	805;"	d	file:
SHADER_PROGRAM	label_nodes/CCLabelTTF.cpp	34;"	d	file:
SIZECENTRALDIRITEM	support/zip_support/unzip.cpp	119;"	d	file:
SIZEZIPLOCALHEADER	support/zip_support/unzip.cpp	120;"	d	file:
STRCMPCASENOSENTIVEFUNCTION	support/zip_support/unzip.cpp	379;"	d	file:
SetBlending	shaders/ccGLStateCache.cpp	/^static void SetBlending(GLenum sfactor, GLenum dfactor)$/;"	f	file:
TGA_ERROR_COMPRESSED_FILE	support/image_support/TGAlib.h	/^    TGA_ERROR_COMPRESSED_FILE,$/;"	e	enum:cocos2d::__anon36
TGA_ERROR_FILE_OPEN	support/image_support/TGAlib.h	/^    TGA_ERROR_FILE_OPEN,$/;"	e	enum:cocos2d::__anon36
TGA_ERROR_INDEXED_COLOR	support/image_support/TGAlib.h	/^    TGA_ERROR_INDEXED_COLOR,$/;"	e	enum:cocos2d::__anon36
TGA_ERROR_MEMORY	support/image_support/TGAlib.h	/^    TGA_ERROR_MEMORY,$/;"	e	enum:cocos2d::__anon36
TGA_ERROR_READING_FILE	support/image_support/TGAlib.h	/^    TGA_ERROR_READING_FILE,$/;"	e	enum:cocos2d::__anon36
TGA_OK	support/image_support/TGAlib.h	/^    TGA_OK,$/;"	e	enum:cocos2d::__anon36
TMXLayerAttribBase64	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXLayerAttribBase64 = 1 << 1,$/;"	e	enum:__anon53
TMXLayerAttribGzip	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXLayerAttribGzip = 1 << 2,$/;"	e	enum:__anon53
TMXLayerAttribNone	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXLayerAttribNone = 1 << 0,$/;"	e	enum:__anon53
TMXLayerAttribZlib	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXLayerAttribZlib = 1 << 3,$/;"	e	enum:__anon53
TMXPropertyLayer	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXPropertyLayer,$/;"	e	enum:__anon54
TMXPropertyMap	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXPropertyMap,$/;"	e	enum:__anon54
TMXPropertyNone	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXPropertyNone,$/;"	e	enum:__anon54
TMXPropertyObject	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXPropertyObject,$/;"	e	enum:__anon54
TMXPropertyObjectGroup	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXPropertyObjectGroup,$/;"	e	enum:__anon54
TMXPropertyTile	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    TMXPropertyTile$/;"	e	enum:__anon54
TRYFREE	support/zip_support/unzip.cpp	116;"	d	file:
TagunzFile__	support/zip_support/unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	s
TargetPlatform	platform/CCApplicationProtocol.h	/^enum TargetPlatform$/;"	g
Tile	actions/CCActionTiledGrid.cpp	/^struct Tile$/;"	s	file:
TypeInfo	include/ccTypeInfo.h	/^class TypeInfo$/;"	c
UNICODE_VALID	label_nodes/CCLabelBMFont.cpp	114;"	d	file:
UNZ_BADZIPFILE	support/zip_support/unzip.h	75;"	d
UNZ_BUFSIZE	support/zip_support/unzip.cpp	105;"	d	file:
UNZ_CRCERROR	support/zip_support/unzip.h	77;"	d
UNZ_END_OF_LIST_OF_FILE	support/zip_support/unzip.h	71;"	d
UNZ_EOF	support/zip_support/unzip.h	73;"	d
UNZ_ERRNO	support/zip_support/unzip.h	72;"	d
UNZ_INTERNALERROR	support/zip_support/unzip.h	76;"	d
UNZ_MAXFILENAMEINZIP	support/zip_support/ZipUtils.cpp	289;"	d	file:
UNZ_MAXFILENAMEINZIP	support/zip_support/unzip.cpp	109;"	d	file:
UNZ_OK	support/zip_support/unzip.h	70;"	d
UNZ_PARAMERROR	support/zip_support/unzip.h	74;"	d
USERDEFAULT_ROOT_NAME	support/CCUserDefault.cpp	31;"	d	file:
USING_NS_CC	platform/CCPlatformMacros.h	104;"	d
USING_NS_CC	platform/CCPlatformMacros.h	108;"	d
UTF8_COMPUTE	label_nodes/CCLabelBMFont.cpp	59;"	d	file:
UTF8_GET	label_nodes/CCLabelBMFont.cpp	101;"	d	file:
UTF8_LENGTH	label_nodes/CCLabelBMFont.cpp	93;"	d	file:
UTHASH_VERSION	support/data_support/uthash.h	78;"	d
UTILITY_H_INCLUDED	kazmath/include/kazmath/utility.h	27;"	d
UTLIST_VERSION	support/data_support/utlist.h	29;"	d
UT_hash_bucket	support/data_support/uthash.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	support/data_support/uthash.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
UT_hash_handle	support/data_support/uthash.h	/^typedef struct UT_hash_handle {$/;"	s
UT_hash_handle	support/data_support/uthash.h	/^} UT_hash_handle;$/;"	t	typeref:struct:UT_hash_handle
UT_hash_table	support/data_support/uthash.h	/^typedef struct UT_hash_table {$/;"	s
UT_hash_table	support/data_support/uthash.h	/^} UT_hash_table;$/;"	t	typeref:struct:UT_hash_table
VEC2_H_INCLUDED	kazmath/include/kazmath/vec2.h	27;"	d
VEC3_H_INCLUDED	kazmath/include/kazmath/vec3.h	27;"	d
VEC4_H_INCLUDED	kazmath/include/kazmath/vec4.h	27;"	d
VolatileTexture	textures/CCTextureCache.cpp	/^VolatileTexture::VolatileTexture(CCTexture2D *t)$/;"	f	class:VolatileTexture
VolatileTexture	textures/CCTextureCache.h	/^class VolatileTexture$/;"	c
XML_FILE_NAME	support/CCUserDefault.cpp	33;"	d	file:
ZCALLBACK	support/zip_support/ioapi.h	117;"	d
ZCALLBACK	support/zip_support/ioapi.h	119;"	d
ZCLOSE64	support/zip_support/ioapi.h	182;"	d
ZERROR64	support/zip_support/ioapi.h	183;"	d
ZLIB_FILEFUNC_MODE_CREATE	support/zip_support/ioapi.h	112;"	d
ZLIB_FILEFUNC_MODE_EXISTING	support/zip_support/ioapi.h	111;"	d
ZLIB_FILEFUNC_MODE_READ	support/zip_support/ioapi.h	107;"	d
ZLIB_FILEFUNC_MODE_READWRITEFILTER	support/zip_support/ioapi.h	109;"	d
ZLIB_FILEFUNC_MODE_WRITE	support/zip_support/ioapi.h	108;"	d
ZLIB_FILEFUNC_SEEK_CUR	support/zip_support/ioapi.h	103;"	d
ZLIB_FILEFUNC_SEEK_END	support/zip_support/ioapi.h	104;"	d
ZLIB_FILEFUNC_SEEK_SET	support/zip_support/ioapi.h	105;"	d
ZOPEN64	support/zip_support/ioapi.h	191;"	d
ZPOS64_T	support/zip_support/ioapi.h	/^typedef  64BIT_INT_CUSTOM_TYPE ZPOS64_T;$/;"	t	namespace:cocos2d
ZPOS64_T	support/zip_support/ioapi.h	/^typedef uint64_t ZPOS64_T;$/;"	t	namespace:cocos2d
ZREAD64	support/zip_support/ioapi.h	178;"	d
ZSEEK64	support/zip_support/ioapi.h	193;"	d
ZTELL64	support/zip_support/ioapi.h	192;"	d
ZWRITE64	support/zip_support/ioapi.h	179;"	d
Z_BZIP2ED	support/zip_support/unzip.h	58;"	d
ZipEntryInfo	support/zip_support/ZipUtils.cpp	/^struct ZipEntryInfo$/;"	s	file:
ZipFile	support/zip_support/ZipUtils.cpp	/^ZipFile::ZipFile(const std::string &zipFile, const std::string &filter)$/;"	f	class:ZipFile
ZipFile	support/zip_support/ZipUtils.h	/^    class ZipFile$/;"	c	namespace:cocos2d
ZipFilePrivate	support/zip_support/ZipUtils.cpp	/^class ZipFilePrivate$/;"	c	file:
ZipUtils	support/zip_support/ZipUtils.h	/^    class ZipUtils$/;"	c	namespace:cocos2d
_AsyncStruct	textures/CCTextureCache.cpp	/^typedef struct _AsyncStruct$/;"	s	file:
_BMFontDef	label_nodes/CCLabelBMFont.h	/^typedef struct _BMFontDef {$/;"	s
_BMFontPadding	label_nodes/CCLabelBMFont.h	/^typedef struct _BMFontPadding {$/;"	s
_CASTASGN	support/data_support/utlist.h	87;"	d
_FILE_OFFSET_BIT	support/zip_support/ioapi.h	41;"	d
_FontDefHashElement	label_nodes/CCLabelBMFont.h	/^typedef struct _FontDefHashElement$/;"	s
_ImageInfo	textures/CCTextureCache.cpp	/^typedef struct _ImageInfo$/;"	s	file:
_KerningHashElement	label_nodes/CCLabelBMFont.h	/^typedef struct _KerningHashElement$/;"	s
_LARGEFILE64_SOURCE	support/zip_support/ioapi.h	38;"	d
_NEXT	support/data_support/utlist.h	82;"	d
_NEXTASGN	support/data_support/utlist.h	83;"	d
_PREV	support/data_support/utlist.h	84;"	d
_PREVASGN	support/data_support/utlist.h	85;"	d
_PVRTexHeader	textures/CCTexturePVR.cpp	/^typedef struct _PVRTexHeader$/;"	s	file:
_RS	support/data_support/utlist.h	86;"	d
_SV	support/data_support/utlist.h	81;"	d
_USE_MATH_DEFINES	include/ccMacros.h	31;"	d
_ZLIBIOAPI64_H	support/zip_support/ioapi.h	22;"	d
__ACTIONS_CCACTION_H__	actions/CCAction.h	28;"	d
__ACTION_CCACTION_MANAGER_H__	actions/CCActionManager.h	29;"	d
__ACTION_CCEASE_ACTION_H__	actions/CCActionEase.h	27;"	d
__ACTION_CCGRID3D_ACTION_H__	actions/CCActionGrid3D.h	26;"	d
__ACTION_CCGRID_ACTION_H__	actions/CCActionGrid.h	26;"	d
__ACTION_CCINTERVAL_ACTION_H__	actions/CCActionInterval.h	28;"	d
__ACTION_CCPAGETURN3D_ACTION_H__	actions/CCActionPageTurn3D.h	26;"	d
__ACTION_CCPROGRESS_TIMER_H__	actions/CCActionProgressTimer.h	26;"	d
__ACTION_CCTILEDGRID_ACTION_H__	actions/CCActionTiledGrid.h	26;"	d
__AUTORELEASEPOOL_H__	cocoa/CCAutoreleasePool.h	25;"	d
__CCACCELEROMETER_DELEGATE_H__	platform/CCAccelerometerDelegate.h	26;"	d
__CCACTIONTWEEN_H__	actions/CCActionTween.h	26;"	d
__CCACTION_CATMULLROM_H__	actions/CCActionCatmullRom.h	38;"	d
__CCARRAY_H__	cocoa/CCArray.h	26;"	d
__CCATLAS_NODE_H__	base_nodes/CCAtlasNode.h	28;"	d
__CCAffineTransformMake	cocoa/CCAffineTransform.cpp	/^CCAffineTransform __CCAffineTransformMake(float a, float b, float c, float d, float tx, float ty)$/;"	f
__CCBITMAP_FONT_ATLAS_H__	label_nodes/CCLabelBMFont.h	34;"	d
__CCCAMERA_ACTION_H__	actions/CCActionCamera.h	27;"	d
__CCCAMERA_H__	CCCamera.h	28;"	d
__CCCONFIGURATION_H__	CCConfiguration.h	27;"	d
__CCCONFIG_H__	include/ccConfig.h	28;"	d
__CCDICTIONARY_H__	cocoa/CCDictionary.h	26;"	d
__CCDIRECTOR_H__	CCDirector.h	28;"	d
__CCDRAWING_PRIMITIVES__	draw_nodes/CCDrawingPrimitives.h	40;"	d
__CCDRAWNODES_CCDRAW_NODE_H__	draw_nodes/CCDrawNode.h	31;"	d
__CCEGLVIEWPROTOCOL_H__	platform/CCEGLViewProtocol.h	2;"	d
__CCEVENT_TYPE_H__	include/CCEventType.h	3;"	d
__CCGEMETRY_H__	cocoa/CCGeometry.h	26;"	d
__CCGLPROGRAM_H__	shaders/CCGLProgram.h	29;"	d
__CCGLSTATE_H__	shaders/ccGLStateCache.h	28;"	d
__CCINSTANT_ACTION_H__	actions/CCActionInstant.h	28;"	d
__CCINTEGER_H__	cocoa/CCInteger.h	2;"	d
__CCKEYPAD_DELEGATE_H__	keypad_dispatcher/CCKeypadDelegate.h	26;"	d
__CCKEYPAD_DISPATCHER_H__	keypad_dispatcher/CCKeypadDispatcher.h	26;"	d
__CCLABELTTF_H__	label_nodes/CCLabelTTF.h	26;"	d
__CCLABEL_ATLAS_H__	label_nodes/CCLabelAtlas.h	27;"	d
__CCLAYER_H__	layers_scenes_transitions_nodes/CCLayer.h	28;"	d
__CCLOGWITHFUNCTION	platform/CCPlatformMacros.h	206;"	d
__CCMACROS_H__	include/ccMacros.h	28;"	d
__CCMENU_H_	menu_nodes/CCMenu.h	26;"	d
__CCMENU_ITEM_H__	menu_nodes/CCMenuItem.h	28;"	d
__CCMOTION_STREAK_H__	misc_nodes/CCMotionStreak.h	26;"	d
__CCNOTIFICATIONCENTER_H__	support/CCNotificationCenter.h	26;"	d
__CCOBJECT_H__	cocoa/CCObject.h	26;"	d
__CCPAGE_TURN_TRANSITION_H__	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	27;"	d
__CCPARALLAX_NODE_H__	tilemap_parallax_nodes/CCParallaxNode.h	27;"	d
__CCPARTICLEBATCHNODE_H__	particle_nodes/CCParticleBatchNode.h	30;"	d
__CCPARTICLE_EXAMPLE_H__	particle_nodes/CCParticleExamples.h	27;"	d
__CCPARTICLE_SYSTEM_H__	particle_nodes/CCParticleSystem.h	27;"	d
__CCPROTOCOLS_H__	include/CCProtocols.h	27;"	d
__CCPVRTEXTURE_H__	textures/CCTexturePVR.h	27;"	d
__CCPointApplyAffineTransform	cocoa/CCAffineTransform.cpp	/^CCPoint __CCPointApplyAffineTransform(const CCPoint& point, const CCAffineTransform& t)$/;"	f
__CCRENDER_TEXTURE_H__	misc_nodes/CCRenderTexture.h	26;"	d
__CCSAXPARSER_H__	platform/CCSAXParser.h	25;"	d
__CCSCENE_H__	layers_scenes_transitions_nodes/CCScene.h	28;"	d
__CCSCHEDULER_H__	CCScheduler.h	28;"	d
__CCSHADERCACHE_H__	shaders/CCShaderCache.h	28;"	d
__CCSHADER_H__	shaders/ccShaders.h	26;"	d
__CCSTRING_H__	cocoa/CCString.h	25;"	d
__CCSizeApplyAffineTransform	cocoa/CCAffineTransform.cpp	/^CCSize __CCSizeApplyAffineTransform(const CCSize& size, const CCAffineTransform& t)$/;"	f
__CCTEXTURE2D_H__	textures/CCTexture2D.h	27;"	d
__CCTEXTURE_ATLAS_H__	textures/CCTextureAtlas.h	28;"	d
__CCTEXTURE_CACHE_H__	textures/CCTextureCache.h	28;"	d
__CCTILE_MAP_ATLAS__	tilemap_parallax_nodes/CCTileMapAtlas.h	27;"	d
__CCTMX_LAYER_H__	tilemap_parallax_nodes/CCTMXLayer.h	27;"	d
__CCTMX_OBJECT_GROUP_H__	tilemap_parallax_nodes/CCTMXObjectGroup.h	28;"	d
__CCTMX_TILE_MAP_H__	tilemap_parallax_nodes/CCTMXTiledMap.h	27;"	d
__CCTRANSITIONPROGRESS_H__	layers_scenes_transitions_nodes/CCTransitionProgress.h	28;"	d
__CCTRANSITION_H__	layers_scenes_transitions_nodes/CCTransition.h	28;"	d
__CCTYPES_H__	include/ccTypes.h	28;"	d
__CCVERTEX_H__	support/CCVertex.h	26;"	d
__CC_ANIMATION_CACHE_H__	sprite_nodes/CCAnimationCache.h	27;"	d
__CC_ANIMATION_H__	sprite_nodes/CCAnimation.h	27;"	d
__CC_APPLICATION_PROTOCOL_H__	platform/CCApplicationProtocol.h	2;"	d
__CC_COMMON_H__	platform/CCCommon.h	26;"	d
__CC_FILEUTILS_PLATFORM_H__	platform/CCFileUtils.h	25;"	d
__CC_IMAGE_H__	platform/CCImage.h	26;"	d
__CC_IME_DELEGATE_H__	text_input_node/CCIMEDelegate.h	26;"	d
__CC_IME_DISPATCHER_H__	text_input_node/CCIMEDispatcher.h	26;"	d
__CC_PARTICLE_SYSTEM_QUAD_H__	particle_nodes/CCParticleSystemQuad.h	28;"	d
__CC_PLATFORM_CONFIG_H__	platform/CCPlatformConfig.h	26;"	d
__CC_PLATFORM_MACROS_H__	platform/CCPlatformMacros.h	25;"	d
__CC_PLATFORM_THREAD_H__	platform/CCThread.h	26;"	d
__CC_SET_H__	cocoa/CCSet.h	26;"	d
__CC_SPRITE_BATCH_NODE_H__	sprite_nodes/CCSpriteBatchNode.h	29;"	d
__CC_TEXT_FIELD_H__	text_input_node/CCTextFieldTTF.h	26;"	d
__CC_TM_XML_PARSER__	tilemap_parallax_nodes/CCTMXXMLParser.h	29;"	d
__CC_TOUCH_H__	touch_dispatcher/CCTouch.h	26;"	d
__CC_ZONE_H__	cocoa/CCZone.h	26;"	d
__COCOA_CGAFFINETRANSFORM_H__	cocoa/CCAffineTransform.h	26;"	d
__COCOS2D_H__	include/cocos2d.h	28;"	d
__EFFECTS_CCGRABBER_H__	effects/CCGrabber.h	26;"	d
__EFFECTS_CCGRID_H__	effects/CCGrid.h	26;"	d
__MISCNODE_CCCLIPPING_NODE_H__	misc_nodes/CCClippingNode.h	29;"	d
__MISC_NODE_CCPROGRESS_TIMER_H__	misc_nodes/CCProgressTimer.h	26;"	d
__NEON_MATRIX_IMPL_H__	kazmath/include/kazmath/neon_matrix_impl.h	25;"	d
__PLATFOMR_CCNS_H__	cocoa/CCNS.h	26;"	d
__PLATFORM_CCNODE_H__	base_nodes/CCNode.h	29;"	d
__PLATFORM_H__	platform/platform.h	26;"	d
__SCRIPT_SUPPORT_H__	script_support/CCScriptSupport.h	26;"	d
__SPITE_NODE_CCSPRITE_H__	sprite_nodes/CCSprite.h	28;"	d
__SPRITE_CCSPRITE_FRAME_CACHE_H__	sprite_nodes/CCSpriteFrameCache.h	30;"	d
__SPRITE_CCSPRITE_FRAME_H__	sprite_nodes/CCSpriteFrame.h	28;"	d
__SUPPORT_BASE64_H__	support/base64.h	26;"	d
__SUPPORT_CCPROFILING_H__	support/CCProfiling.h	26;"	d
__SUPPORT_CCUSERDEFAULT_H__	support/CCUserDefault.h	25;"	d
__SUPPORT_CC_UTILS_H__	support/ccUtils.h	25;"	d
__SUPPORT_CGPOINTEXTENSION_H__	support/CCPointExtension.h	28;"	d
__SUPPORT_DATA_SUPPORT_TGALIB_H__	support/image_support/TGAlib.h	26;"	d
__SUPPORT_DATA_SUPPORT_UTHASH_H__	support/data_support/uthash.h	25;"	d
__SUPPORT_DATA_SUPPORT_UTLIST_H__	support/data_support/utlist.h	26;"	d
__SUPPORT_TRANSFORM_UTILS_H__	support/TransformUtils.h	27;"	d
__SUPPORT_ZIPUTILS_H__	support/zip_support/ZipUtils.h	25;"	d
__TOUCH_DISPATCHER_CCTOUCH_DISPATCHER_H__	touch_dispatcher/CCTouchDispatcher.h	27;"	d
__TOUCH_DISPATCHER_CCTOUCH_HANDLER_H__	touch_dispatcher/CCTouchHandler.h	27;"	d
__TOUCH_DISPATHCHER_CCTOUCH_DELEGATE_PROTOCOL_H__	touch_dispatcher/CCTouchDelegateProtocol.h	27;"	d
__USE_FILE_OFFSET64	support/zip_support/ioapi.h	32;"	d
__USE_LARGEFILE64	support/zip_support/ioapi.h	35;"	d
__firePngData	particle_nodes/firePngData.h	/^const unsigned char __firePngData[] = {$/;"	v
__t	draw_nodes/CCDrawNode.cpp	/^static inline ccTex2F __t(const ccVertex2F &v)$/;"	f	file:
__v2f	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F __v2f(const CCPoint &v)$/;"	f	file:
_base64Decode	support/base64.cpp	/^int _base64Decode( unsigned char *input, unsigned int input_len, unsigned char *output, unsigned int *output_len )$/;"	f	namespace:cocos2d
_calcCharCount	text_input_node/CCTextFieldTTF.cpp	/^static int _calcCharCount(const char * pszText)$/;"	f	file:
_ccArray	support/data_support/ccCArray.h	/^typedef struct _ccArray {$/;"	s
_ccBezierConfig	actions/CCActionInterval.h	/^typedef struct _ccBezierConfig {$/;"	s
_ccBlendFunc	include/ccTypes.h	/^typedef struct _ccBlendFunc$/;"	s
_ccCArray	support/data_support/ccCArray.h	/^typedef struct _ccCArray {$/;"	s
_ccColor3B	include/ccTypes.h	/^typedef struct _ccColor3B$/;"	s
_ccColor4B	include/ccTypes.h	/^typedef struct _ccColor4B$/;"	s
_ccColor4F	include/ccTypes.h	/^typedef struct _ccColor4F {$/;"	s
_ccGridSize	include/ccTypes.h	/^typedef struct _ccGridSize$/;"	s
_ccPVRTexturePixelFormatInfo	textures/CCTexturePVR.h	/^typedef struct _ccPVRTexturePixelFormatInfo {$/;"	s
_ccPointSprite	include/ccTypes.h	/^typedef struct _ccPointSprite$/;"	s
_ccQuad2	include/ccTypes.h	/^typedef struct _ccQuad2 {$/;"	s
_ccQuad3	include/ccTypes.h	/^typedef struct _ccQuad3 {$/;"	s
_ccT2F_Quad	include/ccTypes.h	/^typedef struct _ccT2F_Quad$/;"	s
_ccTex2F	include/ccTypes.h	/^typedef struct _ccTex2F {$/;"	s
_ccTexParams	textures/CCTexture2D.h	/^typedef struct _ccTexParams {$/;"	s
_ccV2F_C4B_T2F	include/ccTypes.h	/^typedef struct _ccV2F_C4B_T2F$/;"	s
_ccV2F_C4B_T2F_Quad	include/ccTypes.h	/^typedef struct _ccV2F_C4B_T2F_Quad$/;"	s
_ccV2F_C4B_T2F_Triangle	include/ccTypes.h	/^typedef struct _ccV2F_C4B_T2F_Triangle$/;"	s
_ccV2F_C4F_T2F	include/ccTypes.h	/^typedef struct _ccV2F_C4F_T2F$/;"	s
_ccV2F_C4F_T2F_Quad	include/ccTypes.h	/^typedef struct _ccV2F_C4F_T2F_Quad$/;"	s
_ccV3F_C4B_T2F	include/ccTypes.h	/^typedef struct _ccV3F_C4B_T2F$/;"	s
_ccV3F_C4B_T2F_Quad	include/ccTypes.h	/^typedef struct _ccV3F_C4B_T2F_Quad$/;"	s
_ccVertex2F	include/ccTypes.h	/^typedef struct _ccVertex2F$/;"	s
_ccVertex3F	include/ccTypes.h	/^typedef struct _ccVertex3F$/;"	s
_fontName	menu_nodes/CCMenuItem.cpp	/^static std::string _fontName = "Marker Felt";$/;"	v	file:
_fontNameRelease	menu_nodes/CCMenuItem.cpp	/^static bool _fontNameRelease = false;$/;"	v	file:
_fontSize	menu_nodes/CCMenuItem.cpp	/^static unsigned int _fontSize = kCCItemSize;$/;"	v	file:
_hashElement	actions/CCActionManager.cpp	/^typedef struct _hashElement$/;"	s	file:
_hashSelectorEntry	CCScheduler.cpp	/^typedef struct _hashSelectorEntry$/;"	s	file:
_hashUniformEntry	shaders/CCGLProgram.cpp	/^typedef struct _hashUniformEntry$/;"	s	file:
_hashUpdateEntry	CCScheduler.cpp	/^typedef struct _hashUpdateEntry$/;"	s	file:
_initWithJpgData	platform/CCImageCommon_cpp.h	/^bool CCImage::_initWithJpgData(void * data, int nSize)$/;"	f	class:CCImage
_initWithPngData	platform/CCImageCommon_cpp.h	/^bool CCImage::_initWithPngData(void * pData, int nDatalen)$/;"	f	class:CCImage
_initWithRawData	platform/CCImageCommon_cpp.h	/^bool CCImage::_initWithRawData(void * pData, int nDatalen, int nWidth, int nHeight, int nBitsPerComponent)$/;"	f	class:CCImage
_initWithTiffData	platform/CCImageCommon_cpp.h	/^bool CCImage::_initWithTiffData(void* pData, int nDataLen)$/;"	f	class:CCImage
_listEntry	CCScheduler.cpp	/^typedef struct _listEntry$/;"	s	file:
_pixelformat_hash	textures/CCTexturePVR.cpp	/^struct _pixelformat_hash {$/;"	s	file:
_saveImageToJPG	platform/CCImageCommon_cpp.h	/^bool CCImage::_saveImageToJPG(const char * pszFilePath)$/;"	f	class:CCImage
_saveImageToPNG	platform/CCImageCommon_cpp.h	/^bool CCImage::_saveImageToPNG(const char * pszFilePath, bool bIsToRGB)$/;"	f	class:CCImage
_setZOrder	base_nodes/CCNode.cpp	/^void CCNode::_setZOrder(int z)$/;"	f	class:CCNode
_sharedShaderCache	shaders/CCShaderCache.cpp	/^static CCShaderCache *_sharedShaderCache = 0;$/;"	v	file:
_tiffCloseProc	platform/CCImageCommon_cpp.h	/^static int _tiffCloseProc(thandle_t fd)$/;"	f
_tiffMapProc	platform/CCImageCommon_cpp.h	/^static int _tiffMapProc(thandle_t fd, void** pbase, toff_t* psize)$/;"	f
_tiffReadProc	platform/CCImageCommon_cpp.h	/^static tmsize_t _tiffReadProc(thandle_t fd, void* buf, tmsize_t size)$/;"	f
_tiffSeekProc	platform/CCImageCommon_cpp.h	/^static uint64 _tiffSeekProc(thandle_t fd, uint64 off, int whence)$/;"	f
_tiffSizeProc	platform/CCImageCommon_cpp.h	/^static uint64 _tiffSizeProc(thandle_t fd)$/;"	f
_tiffUnmapProc	platform/CCImageCommon_cpp.h	/^static void _tiffUnmapProc(thandle_t fd, void* base, toff_t size)$/;"	f
_tiffWriteProc	platform/CCImageCommon_cpp.h	/^static tmsize_t _tiffWriteProc(thandle_t fd, void* buf, tmsize_t size)$/;"	f
_unz64_H	support/zip_support/unzip.h	44;"	d
a	cocoa/CCAffineTransform.h	/^  float a, b, c, d;$/;"	m	struct:CCAffineTransform
a	include/ccTypes.h	/^	ccV2F_C4B_T2F a;$/;"	m	struct:_ccV2F_C4B_T2F_Triangle
a	include/ccTypes.h	/^    GLfloat a;$/;"	m	struct:_ccColor4F
a	include/ccTypes.h	/^    GLubyte a;$/;"	m	struct:_ccColor4B
a	kazmath/include/kazmath/plane.h	/^    kmScalar     a, b, c, d;$/;"	m	struct:kmPlane
absolutePosition	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCPoint CCParallaxNode::absolutePosition()$/;"	f	class:CCParallaxNode
action	actions/CCAction.cpp	/^CCAction * CCAction::action()$/;"	f	class:CCAction
action	actions/CCActionGrid.cpp	/^CCStopGrid* CCStopGrid::action(void)$/;"	f	class:CCStopGrid
action	actions/CCActionInstant.cpp	/^CCHide * CCHide::action() $/;"	f	class:CCHide
action	actions/CCActionInstant.cpp	/^CCShow* CCShow::action() $/;"	f	class:CCShow
action	actions/CCActionInstant.cpp	/^CCToggleVisibility * CCToggleVisibility::action()$/;"	f	class:CCToggleVisibility
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionMoveInL::action()$/;"	f	class:CCTransitionMoveInL
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInB:: action()$/;"	f	class:CCTransitionSlideInB
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInL::action()$/;"	f	class:CCTransitionSlideInL
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInR:: action()$/;"	f	class:CCTransitionSlideInR
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInT::action()$/;"	f	class:CCTransitionSlideInT
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSplitCols:: action()$/;"	f	class:CCTransitionSplitCols
action	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSplitRows::action()$/;"	f	class:CCTransitionSplitRows
actionAllocWithHashElement	actions/CCActionManager.cpp	/^void CCActionManager::actionAllocWithHashElement(tHashElement *pElement)$/;"	f	class:CCActionManager
actionIndex	actions/CCActionManager.cpp	/^    unsigned int                actionIndex;$/;"	m	struct:_hashElement	file:
actionOneTwo	actions/CCActionInterval.cpp	/^CCSequence* CCSequence::actionOneTwo(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)$/;"	f	class:CCSequence
actionOneTwo	actions/CCActionInterval.cpp	/^CCSpawn* CCSpawn::actionOneTwo(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)$/;"	f	class:CCSpawn
actionWithAction	actions/CCAction.cpp	/^CCSpeed * CCSpeed::actionWithAction(CCActionInterval *pAction, float fSpeed)$/;"	f	class:CCSpeed
actionWithAction	actions/CCActionEase.cpp	/^CCActionEase* CCActionEase::actionWithAction(CCActionInterval *pAction)$/;"	f	class:CCActionEase
actionWithAction	actions/CCActionEase.cpp	/^CCEaseBackIn* CCEaseBackIn::actionWithAction(CCActionInterval *pAction)$/;"	f	class:CCEaseBackIn
actionWithAction	actions/CCActionEase.cpp	/^CCEaseBackInOut* CCEaseBackInOut::actionWithAction(CCActionInterval* pAction)$/;"	f	class:CCEaseBackInOut
actionWithAction	actions/CCActionEase.cpp	/^CCEaseBackOut* CCEaseBackOut::actionWithAction(CCActionInterval* pAction)$/;"	f	class:CCEaseBackOut
actionWithAction	actions/CCActionEase.cpp	/^CCEaseBounce* CCEaseBounce::actionWithAction(CCActionInterval* pAction)$/;"	f	class:CCEaseBounce
actionWithAction	actions/CCActionEase.cpp	/^CCEaseBounceIn* CCEaseBounceIn::actionWithAction(CCActionInterval* pAction)$/;"	f	class:CCEaseBounceIn
actionWithAction	actions/CCActionEase.cpp	/^CCEaseBounceInOut* CCEaseBounceInOut::actionWithAction(CCActionInterval* pAction)$/;"	f	class:CCEaseBounceInOut
actionWithAction	actions/CCActionEase.cpp	/^CCEaseBounceOut* CCEaseBounceOut::actionWithAction(CCActionInterval* pAction)$/;"	f	class:CCEaseBounceOut
actionWithAction	actions/CCActionEase.cpp	/^CCEaseElastic* CCEaseElastic::actionWithAction(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElastic
actionWithAction	actions/CCActionEase.cpp	/^CCEaseElasticIn* CCEaseElasticIn::actionWithAction(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElasticIn
actionWithAction	actions/CCActionEase.cpp	/^CCEaseElasticInOut* CCEaseElasticInOut::actionWithAction(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElasticInOut
actionWithAction	actions/CCActionEase.cpp	/^CCEaseElasticOut* CCEaseElasticOut::actionWithAction(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElasticOut
actionWithAction	actions/CCActionEase.cpp	/^CCEaseExponentialIn* CCEaseExponentialIn::actionWithAction(CCActionInterval* pAction)$/;"	f	class:CCEaseExponentialIn
actionWithAction	actions/CCActionEase.cpp	/^CCEaseExponentialInOut* CCEaseExponentialInOut::actionWithAction(CCActionInterval *pAction)$/;"	f	class:CCEaseExponentialInOut
actionWithAction	actions/CCActionEase.cpp	/^CCEaseExponentialOut* CCEaseExponentialOut::actionWithAction(CCActionInterval* pAction)$/;"	f	class:CCEaseExponentialOut
actionWithAction	actions/CCActionEase.cpp	/^CCEaseIn* CCEaseIn::actionWithAction(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseIn
actionWithAction	actions/CCActionEase.cpp	/^CCEaseInOut* CCEaseInOut::actionWithAction(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseInOut
actionWithAction	actions/CCActionEase.cpp	/^CCEaseOut* CCEaseOut::actionWithAction(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseOut
actionWithAction	actions/CCActionEase.cpp	/^CCEaseRateAction* CCEaseRateAction::actionWithAction(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseRateAction
actionWithAction	actions/CCActionEase.cpp	/^CCEaseSineIn* CCEaseSineIn::actionWithAction(CCActionInterval* pAction)$/;"	f	class:CCEaseSineIn
actionWithAction	actions/CCActionEase.cpp	/^CCEaseSineInOut* CCEaseSineInOut::actionWithAction(CCActionInterval* pAction)$/;"	f	class:CCEaseSineInOut
actionWithAction	actions/CCActionEase.cpp	/^CCEaseSineOut* CCEaseSineOut::actionWithAction(CCActionInterval* pAction)$/;"	f	class:CCEaseSineOut
actionWithAction	actions/CCActionGrid.cpp	/^CCAccelAmplitude* CCAccelAmplitude::actionWithAction(CCAction *pAction, float duration)$/;"	f	class:CCAccelAmplitude
actionWithAction	actions/CCActionGrid.cpp	/^CCAccelDeccelAmplitude* CCAccelDeccelAmplitude::actionWithAction(CCAction *pAction, float duration)$/;"	f	class:CCAccelDeccelAmplitude
actionWithAction	actions/CCActionGrid.cpp	/^CCDeccelAmplitude* CCDeccelAmplitude::actionWithAction(CCAction *pAction, float duration)$/;"	f	class:CCDeccelAmplitude
actionWithAction	actions/CCActionInterval.cpp	/^CCRepeat* CCRepeat::actionWithAction(CCFiniteTimeAction *pAction, unsigned int times)$/;"	f	class:CCRepeat
actionWithAction	actions/CCActionInterval.cpp	/^CCRepeatForever *CCRepeatForever::actionWithAction(CCActionInterval *pAction)$/;"	f	class:CCRepeatForever
actionWithAction	actions/CCActionInterval.cpp	/^CCReverseTime* CCReverseTime::actionWithAction(CCFiniteTimeAction *pAction)$/;"	f	class:CCReverseTime
actionWithAnimation	actions/CCActionInterval.cpp	/^CCAnimate* CCAnimate::actionWithAnimation(CCAnimation *pAnimation)$/;"	f	class:CCAnimate
actionWithArray	actions/CCActionInterval.cpp	/^CCFiniteTimeAction* CCSequence::actionWithArray(CCArray* arrayOfActions)$/;"	f	class:CCSequence
actionWithArray	actions/CCActionInterval.cpp	/^CCFiniteTimeAction* CCSpawn::actionWithArray(CCArray *arrayOfActions)$/;"	f	class:CCSpawn
actionWithCols	actions/CCActionTiledGrid.cpp	/^CCSplitCols* CCSplitCols::actionWithCols(int nCols, float duration)$/;"	f	class:CCSplitCols
actionWithDuration	actions/CCActionCamera.cpp	/^CCOrbitCamera * CCOrbitCamera::actionWithDuration(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)$/;"	f	class:CCOrbitCamera
actionWithDuration	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineBy* CCCardinalSplineBy::actionWithDuration(float duration, cocos2d::CCPointArray *points, float tension)$/;"	f	class:CCCardinalSplineBy
actionWithDuration	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo* CCCardinalSplineTo::actionWithDuration(float duration, cocos2d::CCPointArray *points, float tension)$/;"	f	class:CCCardinalSplineTo
actionWithDuration	actions/CCActionCatmullRom.cpp	/^CCCatmullRomBy* CCCatmullRomBy::actionWithDuration(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomBy
actionWithDuration	actions/CCActionCatmullRom.cpp	/^CCCatmullRomTo* CCCatmullRomTo::actionWithDuration(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomTo
actionWithDuration	actions/CCActionGrid3D.cpp	/^CCFlipX3D* CCFlipX3D::actionWithDuration(float duration)$/;"	f	class:CCFlipX3D
actionWithDuration	actions/CCActionGrid3D.cpp	/^CCFlipY3D* CCFlipY3D::actionWithDuration(float duration)$/;"	f	class:CCFlipY3D
actionWithDuration	actions/CCActionInterval.cpp	/^CCActionInterval* CCActionInterval::actionWithDuration(float d)$/;"	f	class:CCActionInterval
actionWithDuration	actions/CCActionInterval.cpp	/^CCBezierBy* CCBezierBy::actionWithDuration(float t, const ccBezierConfig& c)$/;"	f	class:CCBezierBy
actionWithDuration	actions/CCActionInterval.cpp	/^CCBezierTo* CCBezierTo::actionWithDuration(float t, const ccBezierConfig& c)$/;"	f	class:CCBezierTo
actionWithDuration	actions/CCActionInterval.cpp	/^CCBlink* CCBlink::actionWithDuration(float duration, unsigned int uBlinks)$/;"	f	class:CCBlink
actionWithDuration	actions/CCActionInterval.cpp	/^CCDelayTime* CCDelayTime::actionWithDuration(float d)$/;"	f	class:CCDelayTime
actionWithDuration	actions/CCActionInterval.cpp	/^CCFadeIn* CCFadeIn::actionWithDuration(float d)$/;"	f	class:CCFadeIn
actionWithDuration	actions/CCActionInterval.cpp	/^CCFadeOut* CCFadeOut::actionWithDuration(float d)$/;"	f	class:CCFadeOut
actionWithDuration	actions/CCActionInterval.cpp	/^CCFadeTo* CCFadeTo::actionWithDuration(float duration, GLubyte opacity)$/;"	f	class:CCFadeTo
actionWithDuration	actions/CCActionInterval.cpp	/^CCJumpBy* CCJumpBy::actionWithDuration(float duration, const CCPoint& position, float height, unsigned int jumps)$/;"	f	class:CCJumpBy
actionWithDuration	actions/CCActionInterval.cpp	/^CCJumpTo* CCJumpTo::actionWithDuration(float duration, const CCPoint& position, float height, int jumps)$/;"	f	class:CCJumpTo
actionWithDuration	actions/CCActionInterval.cpp	/^CCMoveBy* CCMoveBy::actionWithDuration(float duration, const CCPoint& position)$/;"	f	class:CCMoveBy
actionWithDuration	actions/CCActionInterval.cpp	/^CCMoveTo* CCMoveTo::actionWithDuration(float duration, const CCPoint& position)$/;"	f	class:CCMoveTo
actionWithDuration	actions/CCActionInterval.cpp	/^CCRotateBy* CCRotateBy::actionWithDuration(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateBy
actionWithDuration	actions/CCActionInterval.cpp	/^CCRotateTo* CCRotateTo::actionWithDuration(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateTo
actionWithDuration	actions/CCActionInterval.cpp	/^CCScaleBy* CCScaleBy::actionWithDuration(float duration, float s)$/;"	f	class:CCScaleBy
actionWithDuration	actions/CCActionInterval.cpp	/^CCScaleBy* CCScaleBy::actionWithDuration(float duration, float sx, float sy)$/;"	f	class:CCScaleBy
actionWithDuration	actions/CCActionInterval.cpp	/^CCScaleTo* CCScaleTo::actionWithDuration(float duration, float s)$/;"	f	class:CCScaleTo
actionWithDuration	actions/CCActionInterval.cpp	/^CCScaleTo* CCScaleTo::actionWithDuration(float duration, float sx, float sy)$/;"	f	class:CCScaleTo
actionWithDuration	actions/CCActionInterval.cpp	/^CCSkewBy* CCSkewBy::actionWithDuration(float t, float sx, float sy)$/;"	f	class:CCSkewBy
actionWithDuration	actions/CCActionInterval.cpp	/^CCSkewTo* CCSkewTo::actionWithDuration(float t, float sx, float sy)$/;"	f	class:CCSkewTo
actionWithDuration	actions/CCActionInterval.cpp	/^CCTintBy* CCTintBy::actionWithDuration(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)$/;"	f	class:CCTintBy
actionWithDuration	actions/CCActionInterval.cpp	/^CCTintTo* CCTintTo::actionWithDuration(float duration, GLubyte red, GLubyte green, GLubyte blue)$/;"	f	class:CCTintTo
actionWithDuration	actions/CCActionProgressTimer.cpp	/^CCProgressFromTo* CCProgressFromTo::actionWithDuration(float duration, float fFromPercentage, float fToPercentage)$/;"	f	class:CCProgressFromTo
actionWithDuration	actions/CCActionProgressTimer.cpp	/^CCProgressTo* CCProgressTo::actionWithDuration(float duration, float fPercent)$/;"	f	class:CCProgressTo
actionWithDuration	actions/CCActionTween.cpp	/^CCActionTween* CCActionTween::actionWithDuration(float aDuration, const char* key, float from, float to)$/;"	f	class:CCActionTween
actionWithFlipX	actions/CCActionInstant.cpp	/^CCFlipX *CCFlipX::actionWithFlipX(bool x) $/;"	f	class:CCFlipX
actionWithFlipY	actions/CCActionInstant.cpp	/^CCFlipY * CCFlipY::actionWithFlipY(bool y)$/;"	f	class:CCFlipY
actionWithJumps	actions/CCActionTiledGrid.cpp	/^CCJumpTiles3D* CCJumpTiles3D::actionWithJumps(int j, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCJumpTiles3D
actionWithPosition	actions/CCActionGrid3D.cpp	/^CCLens3D* CCLens3D::actionWithPosition(const CCPoint& pos, float r, const ccGridSize& gridSize, float duration)$/;"	f	class:CCLens3D
actionWithPosition	actions/CCActionGrid3D.cpp	/^CCRipple3D* CCRipple3D::actionWithPosition(const CCPoint& pos, float r, int wav, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCRipple3D
actionWithPosition	actions/CCActionGrid3D.cpp	/^CCTwirl* CCTwirl::actionWithPosition(CCPoint pos, int t, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCTwirl
actionWithPosition	actions/CCActionInstant.cpp	/^CCPlace* CCPlace::actionWithPosition(const CCPoint& pos)$/;"	f	class:CCPlace
actionWithRange	actions/CCActionGrid3D.cpp	/^CCShaky3D* CCShaky3D::actionWithRange(int range, bool shakeZ, const ccGridSize& gridSize, float duration)$/;"	f	class:CCShaky3D
actionWithRange	actions/CCActionTiledGrid.cpp	/^CCShakyTiles3D* CCShakyTiles3D::actionWithRange(int nRange, bool bShakeZ,const ccGridSize& gridSize, float duration)$/;"	f	class:CCShakyTiles3D
actionWithRange	actions/CCActionTiledGrid.cpp	/^CCShatteredTiles3D* CCShatteredTiles3D::actionWithRange(int nRange, bool bShatterZ, const ccGridSize& gridSize, float duration)$/;"	f	class:CCShatteredTiles3D
actionWithRows	actions/CCActionTiledGrid.cpp	/^CCSplitRows* CCSplitRows::actionWithRows(int nRows, float duration)$/;"	f	class:CCSplitRows
actionWithSeed	actions/CCActionTiledGrid.cpp	/^CCShuffleTiles* CCShuffleTiles::actionWithSeed(int s, const ccGridSize& gridSize, float duration)$/;"	f	class:CCShuffleTiles
actionWithSeed	actions/CCActionTiledGrid.cpp	/^CCTurnOffTiles* CCTurnOffTiles::actionWithSeed(int s, const ccGridSize& gridSize, float duration)$/;"	f	class:CCTurnOffTiles
actionWithSize	actions/CCActionGrid.cpp	/^CCGridAction* CCGridAction::actionWithSize(const ccGridSize& gridSize, float duration)$/;"	f	class:CCGridAction
actionWithSize	actions/CCActionPageTurn3D.cpp	/^CCPageTurn3D* CCPageTurn3D::actionWithSize(const ccGridSize& gridSize, float time)$/;"	f	class:CCPageTurn3D
actionWithSize	actions/CCActionTiledGrid.cpp	/^CCFadeOutBLTiles* CCFadeOutBLTiles::actionWithSize(const ccGridSize& gridSize, float time)$/;"	f	class:CCFadeOutBLTiles
actionWithSize	actions/CCActionTiledGrid.cpp	/^CCFadeOutDownTiles* CCFadeOutDownTiles::actionWithSize(const ccGridSize& gridSize, float time)$/;"	f	class:CCFadeOutDownTiles
actionWithSize	actions/CCActionTiledGrid.cpp	/^CCFadeOutTRTiles* CCFadeOutTRTiles::actionWithSize(const ccGridSize& gridSize, float time)$/;"	f	class:CCFadeOutTRTiles
actionWithSize	actions/CCActionTiledGrid.cpp	/^CCFadeOutUpTiles* CCFadeOutUpTiles::actionWithSize(const ccGridSize& gridSize, float time)$/;"	f	class:CCFadeOutUpTiles
actionWithSize	actions/CCActionTiledGrid.cpp	/^CCTurnOffTiles* CCTurnOffTiles::actionWithSize(const ccGridSize& size, float d)$/;"	f	class:CCTurnOffTiles
actionWithSize	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval*  CCTransitionFadeBL::actionWithSize(const ccGridSize& size)$/;"	f	class:CCTransitionFadeBL
actionWithSize	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval*  CCTransitionFadeTR::actionWithSize(const ccGridSize& size)$/;"	f	class:CCTransitionFadeTR
actionWithSize	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionFadeDown::actionWithSize(const ccGridSize& size)$/;"	f	class:CCTransitionFadeDown
actionWithSize	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionFadeUp::actionWithSize(const ccGridSize& size)$/;"	f	class:CCTransitionFadeUp
actionWithSize	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCActionInterval* CCTransitionPageTurn:: actionWithSize(const ccGridSize& vector)$/;"	f	class:CCTransitionPageTurn
actionWithTarget	actions/CCAction.cpp	/^CCFollow *CCFollow::actionWithTarget(CCNode *pFollowedNode, const CCRect& rect\/* = CCRectZero*\/)$/;"	f	class:CCFollow
actionWithTarget	actions/CCActionInstant.cpp	/^CCCallFunc * CCCallFunc::actionWithTarget(CCObject* pSelectorTarget, SEL_CallFunc selector) $/;"	f	class:CCCallFunc
actionWithTarget	actions/CCActionInstant.cpp	/^CCCallFuncN * CCCallFuncN::actionWithTarget(CCObject* pSelectorTarget, SEL_CallFuncN selector)$/;"	f	class:CCCallFuncN
actionWithTarget	actions/CCActionInstant.cpp	/^CCCallFuncND * CCCallFuncND::actionWithTarget(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d) $/;"	f	class:CCCallFuncND
actionWithTarget	actions/CCActionInstant.cpp	/^CCCallFuncO * CCCallFuncO::actionWithTarget(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject)$/;"	f	class:CCCallFuncO
actionWithTarget	actions/CCActionInterval.cpp	/^CCTargetedAction* CCTargetedAction::actionWithTarget(CCNode* pTarget, CCFiniteTimeAction* pAction)$/;"	f	class:CCTargetedAction
actionWithTimes	actions/CCActionGrid.cpp	/^CCReuseGrid* CCReuseGrid::actionWithTimes(int times)$/;"	f	class:CCReuseGrid
actionWithWaves	actions/CCActionGrid3D.cpp	/^CCLiquid* CCLiquid::actionWithWaves(int wav, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCLiquid
actionWithWaves	actions/CCActionGrid3D.cpp	/^CCWaves* CCWaves::actionWithWaves(int wav, float amp, bool h, bool v, const ccGridSize& gridSize, float duration)$/;"	f	class:CCWaves
actionWithWaves	actions/CCActionGrid3D.cpp	/^CCWaves3D* CCWaves3D::actionWithWaves(int wav, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCWaves3D
actionWithWaves	actions/CCActionTiledGrid.cpp	/^CCWavesTiles3D* CCWavesTiles3D::actionWithWaves(int wav, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCWavesTiles3D
actions	actions/CCActionInterval.cpp	/^CCFiniteTimeAction* CCSequence::actions(CCFiniteTimeAction *pAction1, ...)$/;"	f	class:CCSequence
actions	actions/CCActionInterval.cpp	/^CCFiniteTimeAction* CCSpawn::actions(CCFiniteTimeAction *pAction1, ...)$/;"	f	class:CCSpawn
actions	actions/CCActionManager.cpp	/^    struct _ccArray             *actions;$/;"	m	struct:_hashElement	typeref:struct:_hashElement::_ccArray	file:
activate	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::activate()$/;"	f	class:CCMenuItem
activate	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::activate()$/;"	f	class:CCMenuItemLabel
activate	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::activate()$/;"	f	class:CCMenuItemToggle
addAction	actions/CCActionManager.cpp	/^void CCActionManager::addAction(CCAction *pAction, CCNode *pTarget, bool paused)$/;"	f	class:CCActionManager
addAnimation	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::addAnimation(CCAnimation *animation, const char * name)$/;"	f	class:CCAnimationCache
addAnimationsWithDictionary	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::addAnimationsWithDictionary(CCDictionary* dictionary)$/;"	f	class:CCAnimationCache
addAnimationsWithFile	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::addAnimationsWithFile(const char* plist)$/;"	f	class:CCAnimationCache
addAttribute	shaders/CCGLProgram.cpp	/^void CCGLProgram::addAttribute(const char* attributeName, GLuint index)$/;"	f	class:CCGLProgram
addCCImage	textures/CCTextureCache.cpp	/^void VolatileTexture::addCCImage(CCTexture2D *tt, CCImage *image)$/;"	f	class:VolatileTexture
addChild	base_nodes/CCNode.cpp	/^void CCNode::addChild(CCNode *child)$/;"	f	class:CCNode
addChild	base_nodes/CCNode.cpp	/^void CCNode::addChild(CCNode *child, int zOrder)$/;"	f	class:CCNode
addChild	base_nodes/CCNode.cpp	/^void CCNode::addChild(CCNode *child, int zOrder, int tag)$/;"	f	class:CCNode
addChild	menu_nodes/CCMenu.cpp	/^void CCMenu::addChild(CCNode * child)$/;"	f	class:CCMenu
addChild	menu_nodes/CCMenu.cpp	/^void CCMenu::addChild(CCNode * child, int zOrder)$/;"	f	class:CCMenu
addChild	menu_nodes/CCMenu.cpp	/^void CCMenu::addChild(CCNode * child, int zOrder, int tag)$/;"	f	class:CCMenu
addChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::addChild(CCNode * child)$/;"	f	class:CCParticleBatchNode
addChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::addChild(CCNode * child, int zOrder)$/;"	f	class:CCParticleBatchNode
addChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::addChild(CCNode * child, int zOrder, int tag)$/;"	f	class:CCParticleBatchNode
addChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::addChild(CCNode *pChild, int zOrder)$/;"	f	class:CCSprite
addChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::addChild(CCNode *pChild, int zOrder, int tag)$/;"	f	class:CCSprite
addChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::addChild(CCNode* pChild)$/;"	f	class:CCSprite
addChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::addChild(CCNode *child)$/;"	f	class:CCSpriteBatchNode
addChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::addChild(CCNode *child, int zOrder)$/;"	f	class:CCSpriteBatchNode
addChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::addChild(CCNode *child, int zOrder, int tag)$/;"	f	class:CCSpriteBatchNode
addChild	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::addChild(CCNode * child, unsigned int zOrder, int tag)$/;"	f	class:CCParallaxNode
addChild	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::addChild(CCNode *child, unsigned int z, const CCPoint& ratio, const CCPoint& offset)$/;"	f	class:CCParallaxNode
addChild	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::addChild(CCNode * child, int zOrder, int tag)$/;"	f	class:CCTMXLayer
addChildHelper	particle_nodes/CCParticleBatchNode.cpp	/^unsigned int CCParticleBatchNode::addChildHelper(CCParticleSystem* child, int z, int aTag)$/;"	f	class:CCParticleBatchNode
addControlPoint	actions/CCActionCatmullRom.cpp	/^void CCPointArray::addControlPoint(CCPoint controlPoint)$/;"	f	class:CCPointArray
addDataTexture	textures/CCTextureCache.cpp	/^void VolatileTexture::addDataTexture(CCTexture2D *tt, void* data, CCTexture2DPixelFormat pixelFormat, const CCSize& contentSize)$/;"	f	class:VolatileTexture
addDelegate	keypad_dispatcher/CCKeypadDispatcher.cpp	/^void CCKeypadDispatcher::addDelegate(CCKeypadDelegate* pDelegate)$/;"	f	class:CCKeypadDispatcher
addDelegate	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::addDelegate(CCIMEDelegate* pDelegate)$/;"	f	class:CCIMEDispatcher
addImage	textures/CCTextureCache.cpp	/^CCTexture2D * CCTextureCache::addImage(const char * path)$/;"	f	class:CCTextureCache
addImageAsync	textures/CCTextureCache.cpp	/^void CCTextureCache::addImageAsync(const char *path, CCObject *target, SEL_CallFuncO selector)$/;"	f	class:CCTextureCache
addImageAsyncCallBack	textures/CCTextureCache.cpp	/^void CCTextureCache::addImageAsyncCallBack(float dt)$/;"	f	class:CCTextureCache
addImageTexture	textures/CCTextureCache.cpp	/^void VolatileTexture::addImageTexture(CCTexture2D *tt, const char* imageFileName, CCImage::EImageFormat format)$/;"	f	class:VolatileTexture
addLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerMultiplex::addLayer(CCLayer* layer)$/;"	f	class:CCLayerMultiplex
addObject	cocoa/CCArray.cpp	/^void CCArray::addObject(CCObject* object)$/;"	f	class:CCArray
addObject	cocoa/CCAutoreleasePool.cpp	/^void CCAutoreleasePool::addObject(CCObject* pObject)$/;"	f	class:CCAutoreleasePool
addObject	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::addObject(CCObject* pObject)$/;"	f	class:CCPoolManager
addObject	cocoa/CCSet.cpp	/^void CCSet::addObject(CCObject *pObject)$/;"	f	class:CCSet
addObjectsFromArray	cocoa/CCArray.cpp	/^void CCArray::addObjectsFromArray(CCArray* otherArray)$/;"	f	class:CCArray
addObserver	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::addObserver(CCObject *target, $/;"	f	class:CCNotificationCenter
addPVRImage	textures/CCTextureCache.cpp	/^CCTexture2D * CCTextureCache::addPVRImage(const char* path)$/;"	f	class:CCTextureCache
addPVRTCImage	textures/CCTextureCache.cpp	/^CCTexture2D* CCTextureCache::addPVRTCImage(const char* path, int bpp, bool hasAlpha, int width)$/;"	f	class:CCTextureCache
addParticle	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::addParticle()$/;"	f	class:CCParticleSystem
addProgram	shaders/CCShaderCache.cpp	/^void CCShaderCache::addProgram(CCGLProgram* program, const char* key)$/;"	f	class:CCShaderCache
addSpriteFrame	sprite_nodes/CCAnimation.cpp	/^void CCAnimation::addSpriteFrame(CCSpriteFrame *pFrame)$/;"	f	class:CCAnimation
addSpriteFrame	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFrame(CCSpriteFrame *pobFrame, const char *pszFrameName)$/;"	f	class:CCSpriteFrameCache
addSpriteFrameWithFileName	sprite_nodes/CCAnimation.cpp	/^void CCAnimation::addSpriteFrameWithFileName(const char *pszFileName)$/;"	f	class:CCAnimation
addSpriteFrameWithTexture	sprite_nodes/CCAnimation.cpp	/^void CCAnimation::addSpriteFrameWithTexture(CCTexture2D *pobTexture, const CCRect& rect)$/;"	f	class:CCAnimation
addSpriteFramesWithDictionary	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFramesWithDictionary(CCDictionary* dictionary, CCTexture2D *pobTexture)$/;"	f	class:CCSpriteFrameCache
addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFramesWithFile(const char *pszPlist)$/;"	f	class:CCSpriteFrameCache
addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFramesWithFile(const char *pszPlist, CCTexture2D *pobTexture)$/;"	f	class:CCSpriteFrameCache
addSpriteFramesWithFile	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::addSpriteFramesWithFile(const char* plist, const char* textureFileName)$/;"	f	class:CCSpriteFrameCache
addSpriteWithoutQuad	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode * CCSpriteBatchNode::addSpriteWithoutQuad(CCSprite*child, unsigned int z, int aTag)$/;"	f	class:CCSpriteBatchNode
addStandardDelegate	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::addStandardDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCTouchDispatcher
addStringTexture	textures/CCTextureCache.cpp	/^void VolatileTexture::addStringTexture(CCTexture2D *tt, const char* text, const CCSize& dimensions, CCTextAlignment alignment, $/;"	f	class:VolatileTexture
addSubItem	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::addSubItem(CCMenuItem *item)$/;"	f	class:CCMenuItemToggle
addTargetedDelegate	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::addTargetedDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallowsTouches)$/;"	f	class:CCTouchDispatcher
addUIImage	textures/CCTextureCache.cpp	/^CCTexture2D* CCTextureCache::addUIImage(CCImage *image, const char *key)$/;"	f	class:CCTextureCache
address	textures/CCTexturePVR.h	/^    unsigned char *address;$/;"	m	struct:CCPVRMipmap
afterDraw	effects/CCGrid.cpp	/^void CCGridBase::afterDraw(cocos2d::CCNode *pTarget)$/;"	f	class:CCGridBase
afterRender	effects/CCGrabber.cpp	/^void CCGrabber::afterRender(cocos2d::CCTexture2D *pTexture)$/;"	f	class:CCGrabber
alignItemsHorizontally	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsHorizontally(void)$/;"	f	class:CCMenu
alignItemsHorizontallyWithPadding	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsHorizontallyWithPadding(float padding)$/;"	f	class:CCMenu
alignItemsInColumns	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInColumns(unsigned int columns, ...)$/;"	f	class:CCMenu
alignItemsInColumns	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInColumns(unsigned int columns, va_list args)$/;"	f	class:CCMenu
alignItemsInColumnsWithArray	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInColumnsWithArray(CCArray* rowsArray)$/;"	f	class:CCMenu
alignItemsInRows	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInRows(unsigned int rows, ...)$/;"	f	class:CCMenu
alignItemsInRows	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInRows(unsigned int rows, va_list args)$/;"	f	class:CCMenu
alignItemsInRowsWithArray	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsInRowsWithArray(CCArray* columnArray)$/;"	f	class:CCMenu
alignItemsVertically	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsVertically()$/;"	f	class:CCMenu
alignItemsVerticallyWithPadding	menu_nodes/CCMenu.cpp	/^void CCMenu::alignItemsVerticallyWithPadding(float padding)$/;"	f	class:CCMenu
allKeys	cocoa/CCDictionary.cpp	/^CCArray* CCDictionary::allKeys()$/;"	f	class:CCDictionary
allKeysForObject	cocoa/CCDictionary.cpp	/^CCArray* CCDictionary::allKeysForObject(CCObject* object)$/;"	f	class:CCDictionary
allocMemory	particle_nodes/CCParticleSystemQuad.cpp	/^bool CCParticleSystemQuad::allocMemory()$/;"	f	class:CCParticleSystemQuad
alpha	textures/CCTexturePVR.h	/^	bool alpha;$/;"	m	struct:_ccPVRTexturePixelFormatInfo
alphabet	support/base64.cpp	/^unsigned char alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	m	namespace:cocos2d	file:
amount	label_nodes/CCLabelBMFont.h	/^	int				amount;$/;"	m	struct:_KerningHashElement
angle	particle_nodes/CCParticleSystem.h	/^        float        angle;$/;"	m	struct:sCCParticle::__anon23
animation	sprite_nodes/CCAnimation.cpp	/^CCAnimation* CCAnimation::animation(void)$/;"	f	class:CCAnimation
animationByName	sprite_nodes/CCAnimationCache.cpp	/^CCAnimation* CCAnimationCache::animationByName(const char* name)$/;"	f	class:CCAnimationCache
animationWithAnimationFrames	sprite_nodes/CCAnimation.cpp	/^CCAnimation* CCAnimation::animationWithAnimationFrames(CCArray* arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops)$/;"	f	class:CCAnimation
animationWithSpriteFrames	sprite_nodes/CCAnimation.cpp	/^CCAnimation* CCAnimation::animationWithSpriteFrames(CCArray *frames, float delay\/* = 0.0f*\/)$/;"	f	class:CCAnimation
anyObject	cocoa/CCSet.cpp	/^CCObject* CCSet::anyObject()$/;"	f	class:CCSet
appendChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::appendChild(CCSprite* sprite)$/;"	f	class:CCSpriteBatchNode
appendIn	CCScheduler.cpp	/^void CCScheduler::appendIn(_listEntry **ppList, CCObject *pTarget, bool bPaused)$/;"	f	class:CCScheduler
appendTileForGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite * CCTMXLayer::appendTileForGID(unsigned int gid, const CCPoint& pos)$/;"	f	class:CCTMXLayer
arr	support/data_support/ccCArray.h	/^	CCObject** arr;$/;"	m	struct:_ccArray
arr	support/data_support/ccCArray.h	/^    void** arr;$/;"	m	struct:_ccCArray
array	cocoa/CCArray.cpp	/^CCArray* CCArray::array()$/;"	f	class:CCArray
arrayMakeObjectsPerformSelector	cocoa/CCArray.h	75;"	d
arrayMakeObjectsPerformSelectorWithObject	cocoa/CCArray.h	92;"	d
arrayWithArray	cocoa/CCArray.cpp	/^CCArray* CCArray::arrayWithArray(CCArray* otherArray)$/;"	f	class:CCArray
arrayWithCapacity	actions/CCActionCatmullRom.cpp	/^CCPointArray* CCPointArray::arrayWithCapacity(unsigned int capacity)$/;"	f	class:CCPointArray
arrayWithCapacity	cocoa/CCArray.cpp	/^CCArray* CCArray::arrayWithCapacity(unsigned int capacity)$/;"	f	class:CCArray
arrayWithContentsOfFile	cocoa/CCArray.cpp	/^CCArray* CCArray::arrayWithContentsOfFile(const char* pFileName)$/;"	f	class:CCArray
arrayWithContentsOfFile	platform/CCFileUtilsCommon_cpp.h	/^    CCArray* arrayWithContentsOfFile(const char* pFileName)$/;"	f	class:CCDictMaker
arrayWithContentsOfFileThreadSafe	cocoa/CCArray.cpp	/^CCArray* CCArray::arrayWithContentsOfFileThreadSafe(const char* pFileName)$/;"	f	class:CCArray
arrayWithObject	cocoa/CCArray.cpp	/^CCArray* CCArray::arrayWithObject(CCObject* pObject)$/;"	f	class:CCArray
arrayWithObjects	cocoa/CCArray.cpp	/^CCArray* CCArray::arrayWithObjects(CCObject* pObject, ...)$/;"	f	class:CCArray
asyncStruct	textures/CCTextureCache.cpp	/^    AsyncStruct *asyncStruct;$/;"	m	struct:_ImageInfo	file:
atlasIndex	particle_nodes/CCParticleSystem.h	/^    unsigned int    atlasIndex;$/;"	m	struct:sCCParticle
atlasIndexForChild	sprite_nodes/CCSpriteBatchNode.cpp	/^unsigned int CCSpriteBatchNode::atlasIndexForChild(CCSprite *pobSprite, int nZ)$/;"	f	class:CCSpriteBatchNode
atlasIndexForExistantZ	tilemap_parallax_nodes/CCTMXLayer.cpp	/^unsigned int CCTMXLayer::atlasIndexForExistantZ(unsigned int z)$/;"	f	class:CCTMXLayer
atlasIndexForNewZ	tilemap_parallax_nodes/CCTMXLayer.cpp	/^unsigned int CCTMXLayer::atlasIndexForNewZ(int z)$/;"	f	class:CCTMXLayer
atlasWithTileFile	base_nodes/CCAtlasNode.cpp	/^CCAtlasNode * CCAtlasNode::atlasWithTileFile(const char *tile, unsigned int tileWidth, unsigned int tileHeight, $/;"	f	class:CCAtlasNode
attachDelegateWithIME	text_input_node/CCIMEDispatcher.cpp	/^bool CCIMEDispatcher::attachDelegateWithIME(CCIMEDelegate * pDelegate)$/;"	f	class:CCIMEDispatcher
attachWithIME	text_input_node/CCIMEDispatcher.cpp	/^bool CCIMEDelegate::attachWithIME()$/;"	f	class:CCIMEDelegate
attachWithIME	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::attachWithIME()$/;"	f	class:CCTextFieldTTF
autorelease	cocoa/CCObject.cpp	/^CCObject* CCObject::autorelease(void)$/;"	f	class:CCObject
b	cocoa/CCAffineTransform.h	/^  float a, b, c, d;$/;"	m	struct:CCAffineTransform
b	include/ccTypes.h	/^	ccV2F_C4B_T2F b;$/;"	m	struct:_ccV2F_C4B_T2F_Triangle
b	include/ccTypes.h	/^    GLfloat b;$/;"	m	struct:_ccColor4F
b	include/ccTypes.h	/^    GLubyte b;$/;"	m	struct:_ccColor3B
b	include/ccTypes.h	/^    GLubyte b;$/;"	m	struct:_ccColor4B
b	kazmath/include/kazmath/plane.h	/^    kmScalar     a, b, c, d;$/;"	m	struct:kmPlane
base64Decode	support/base64.cpp	/^int base64Decode(unsigned char *in, unsigned int inLength, unsigned char **out)$/;"	f	namespace:cocos2d
batchNodeWithFile	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode* CCParticleBatchNode::batchNodeWithFile(const char* imageFile, unsigned int capacity\/* = kCCParticleDefaultCapacity*\/)$/;"	f	class:CCParticleBatchNode
batchNodeWithFile	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode* CCSpriteBatchNode::batchNodeWithFile(const char *fileImage, unsigned int capacity\/* = kDefaultSpriteBatchCapacity*\/)$/;"	f	class:CCSpriteBatchNode
batchNodeWithTexture	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode* CCParticleBatchNode::batchNodeWithTexture(CCTexture2D *tex, unsigned int capacity\/* = kCCParticleDefaultCapacity*\/)$/;"	f	class:CCParticleBatchNode
batchNodeWithTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode* CCSpriteBatchNode::batchNodeWithTexture(CCTexture2D* tex, unsigned int capacity\/* = kDefaultSpriteBatchCapacity*\/)$/;"	f	class:CCSpriteBatchNode
beforeDraw	effects/CCGrid.cpp	/^void CCGridBase::beforeDraw(void)$/;"	f	class:CCGridBase
beforeRender	effects/CCGrabber.cpp	/^void CCGrabber::beforeRender(CCTexture2D *pTexture)$/;"	f	class:CCGrabber
begin	cocoa/CCSet.cpp	/^CCSetIterator CCSet::begin(void)$/;"	f	class:CCSet
begin	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::begin()$/;"	f	class:CCRenderTexture
begin	text_input_node/CCIMEDelegate.h	/^    CCRect  begin;              \/\/ the soft keyboard rectangle when animation begins$/;"	m	struct:__anon40
beginWithClear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::beginWithClear(float r, float g, float b, float a)$/;"	f	class:CCRenderTexture
beginWithClear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue)$/;"	f	class:CCRenderTexture
beginWithClear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue)$/;"	f	class:CCRenderTexture
beginWithClear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::beginWithClear(float r, float g, float b, float a, float depthValue, int stencilValue, GLbitfield flags)$/;"	f	class:CCRenderTexture
bezierat	actions/CCActionInterval.cpp	/^static inline float bezierat( float a, float b, float c, float d, float t )$/;"	f	file:
bitmaskAlpha	textures/CCTexturePVR.cpp	/^    unsigned int bitmaskAlpha;$/;"	m	struct:_PVRTexHeader	file:
bitmaskBlue	textures/CCTexturePVR.cpp	/^    unsigned int bitmaskBlue;$/;"	m	struct:_PVRTexHeader	file:
bitmaskGreen	textures/CCTexturePVR.cpp	/^    unsigned int bitmaskGreen;$/;"	m	struct:_PVRTexHeader	file:
bitmaskRed	textures/CCTexturePVR.cpp	/^    unsigned int bitmaskRed;$/;"	m	struct:_PVRTexHeader	file:
bitsPerPixelForFormat	textures/CCTexture2D.cpp	/^unsigned int CCTexture2D::bitsPerPixelForFormat()$/;"	f	class:CCTexture2D
bitsPerPixelForFormat	textures/CCTexture2D.cpp	/^unsigned int CCTexture2D::bitsPerPixelForFormat(CCTexture2DPixelFormat format)$/;"	f	class:CCTexture2D
bl	include/ccTypes.h	/^    ccTex2F    bl;$/;"	m	struct:_ccT2F_Quad
bl	include/ccTypes.h	/^    ccV2F_C4B_T2F    bl;$/;"	m	struct:_ccV2F_C4B_T2F_Quad
bl	include/ccTypes.h	/^    ccV2F_C4F_T2F    bl;$/;"	m	struct:_ccV2F_C4F_T2F_Quad
bl	include/ccTypes.h	/^    ccV3F_C4B_T2F    bl;$/;"	m	struct:_ccV3F_C4B_T2F_Quad
bl	include/ccTypes.h	/^    ccVertex2F        bl;$/;"	m	struct:_ccQuad2
bl	include/ccTypes.h	/^    ccVertex3F        bl;$/;"	m	struct:_ccQuad3
blit	effects/CCGrid.cpp	/^void CCGrid3D::blit(void)$/;"	f	class:CCGrid3D
blit	effects/CCGrid.cpp	/^void CCGridBase::blit(void)$/;"	f	class:CCGridBase
blit	effects/CCGrid.cpp	/^void CCTiledGrid3D::blit(void)$/;"	f	class:CCTiledGrid3D
bloom_bv	support/data_support/uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table
bloom_nbits	support/data_support/uthash.h	/^   char bloom_nbits;$/;"	m	struct:UT_hash_table
bloom_sig	support/data_support/uthash.h	/^   unsigned int bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table
boolValue	cocoa/CCString.cpp	/^bool CCString::boolValue() const$/;"	f	class:CCString
bottom	label_nodes/CCLabelBMFont.h	/^    int bottom;$/;"	m	struct:_BMFontPadding
bounceTime	actions/CCActionEase.cpp	/^float CCEaseBounce::bounceTime(float time)$/;"	f	class:CCEaseBounce
boundaryTexCoord	misc_nodes/CCProgressTimer.cpp	/^CCPoint CCProgressTimer::boundaryTexCoord(char index)$/;"	f	class:CCProgressTimer
boundingBox	base_nodes/CCNode.cpp	/^CCRect CCNode::boundingBox()$/;"	f	class:CCNode
bpp	textures/CCTexturePVR.cpp	/^    unsigned int bpp;$/;"	m	struct:_PVRTexHeader	file:
bpp	textures/CCTexturePVR.h	/^	uint32_t bpp;$/;"	m	struct:_ccPVRTexturePixelFormatInfo
br	include/ccTypes.h	/^    ccTex2F    br;$/;"	m	struct:_ccT2F_Quad
br	include/ccTypes.h	/^    ccV2F_C4B_T2F    br;$/;"	m	struct:_ccV2F_C4B_T2F_Quad
br	include/ccTypes.h	/^    ccV2F_C4F_T2F    br;$/;"	m	struct:_ccV2F_C4F_T2F_Quad
br	include/ccTypes.h	/^    ccV3F_C4B_T2F    br;$/;"	m	struct:_ccV3F_C4B_T2F_Quad
br	include/ccTypes.h	/^    ccVertex2F        br;$/;"	m	struct:_ccQuad2
br	include/ccTypes.h	/^    ccVertex3F        br;$/;"	m	struct:_ccQuad3
bstream	support/zip_support/unzip.cpp	/^    bz_stream bstream;          \/* bzLib stream structure for bziped *\/$/;"	m	struct:cocos2d::__anon37	file:
buckets	support/data_support/uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table
buildWithMapInfo	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^void CCTMXTiledMap::buildWithMapInfo(CCTMXMapInfo* mapInfo)$/;"	f	class:CCTMXTiledMap
byte_before_the_zipfile	support/zip_support/unzip.cpp	/^    ZPOS64_T byte_before_the_zipfile;\/* byte before the zipfile, (>0 for sfx)*\/$/;"	m	struct:cocos2d::__anon37	file:
byte_before_the_zipfile	support/zip_support/unzip.cpp	/^    ZPOS64_T byte_before_the_zipfile;\/* byte before the zipfile, (>0 for sfx)*\/$/;"	m	struct:cocos2d::__anon38	file:
c	cocoa/CCAffineTransform.h	/^  float a, b, c, d;$/;"	m	struct:CCAffineTransform
c	include/ccTypes.h	/^	ccV2F_C4B_T2F c;$/;"	m	struct:_ccV2F_C4B_T2F_Triangle
c	kazmath/include/kazmath/plane.h	/^    kmScalar     a, b, c, d;$/;"	m	struct:kmPlane
calculateDeltaTime	CCDirector.cpp	/^void CCDirector::calculateDeltaTime(void)$/;"	f	class:CCDirector
calculateItemsToRender	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::calculateItemsToRender()$/;"	f	class:CCTileMapAtlas
calculateLayerOffset	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::calculateLayerOffset(const CCPoint& pos)$/;"	f	class:CCTMXLayer
calculateMPF	CCDirector.cpp	/^void CCDirector::calculateMPF()$/;"	f	class:CCDirector
calculateMaxItems	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::calculateMaxItems()$/;"	f	class:CCAtlasNode
calculateVertexPoints	effects/CCGrid.cpp	/^void CCGrid3D::calculateVertexPoints(void)$/;"	f	class:CCGrid3D
calculateVertexPoints	effects/CCGrid.cpp	/^void CCGridBase::calculateVertexPoints(void)$/;"	f	class:CCGridBase
calculateVertexPoints	effects/CCGrid.cpp	/^void CCTiledGrid3D::calculateVertexPoints(void)$/;"	f	class:CCTiledGrid3D
calculate_line_normal	kazmath/src/ray2.c	/^void calculate_line_normal(kmVec2 p1, kmVec2 p2, kmVec2* normal_out) {$/;"	f
call_zopen64	support/zip_support/ioapi.cpp	/^voidpf call_zopen64 (const zlib_filefunc64_32_def* pfilefunc,const void*filename,int mode)$/;"	f	namespace:cocos2d
call_zseek64	support/zip_support/ioapi.cpp	/^long call_zseek64 (const zlib_filefunc64_32_def* pfilefunc,voidpf filestream, ZPOS64_T offset, int origin)$/;"	f	namespace:cocos2d
call_ztell64	support/zip_support/ioapi.cpp	/^ZPOS64_T call_ztell64 (const zlib_filefunc64_32_def* pfilefunc,voidpf filestream)$/;"	f	namespace:cocos2d
callfuncND_selector	cocoa/CCObject.h	90;"	d
callfuncN_selector	cocoa/CCObject.h	89;"	d
callfuncO_selector	cocoa/CCObject.h	91;"	d
callfunc_selector	cocoa/CCObject.h	88;"	d
canAttachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual bool canAttachWithIME() { return false; }$/;"	f	class:CCIMEDelegate
canAttachWithIME	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::canAttachWithIME()$/;"	f	class:CCTextFieldTTF
canDetachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual bool canDetachWithIME() { return false; }$/;"	f	class:CCIMEDelegate
canDetachWithIME	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::canDetachWithIME()$/;"	f	class:CCTextFieldTTF
capacity	cocoa/CCArray.cpp	/^unsigned int CCArray::capacity()$/;"	f	class:CCArray
capacity	kazmath/include/kazmath/GL/mat4stack.h	/^    int capacity; \/\/The total item capacity$/;"	m	struct:km_mat4_stack
ccAnimationFrameData	include/ccTypes.h	/^} ccAnimationFrameData;$/;"	t	typeref:struct:__anon8
ccArray	support/data_support/ccCArray.h	/^} ccArray;$/;"	t	typeref:struct:_ccArray
ccArrayAppendArray	support/data_support/ccCArray.cpp	/^void ccArrayAppendArray(ccArray *arr, ccArray *plusArr)$/;"	f
ccArrayAppendArrayWithResize	support/data_support/ccCArray.cpp	/^void ccArrayAppendArrayWithResize(ccArray *arr, ccArray *plusArr)$/;"	f
ccArrayAppendObject	support/data_support/ccCArray.cpp	/^void ccArrayAppendObject(ccArray *arr, CCObject* object)$/;"	f
ccArrayAppendObjectWithResize	support/data_support/ccCArray.cpp	/^void ccArrayAppendObjectWithResize(ccArray *arr, CCObject* object)$/;"	f
ccArrayContainsObject	support/data_support/ccCArray.cpp	/^bool ccArrayContainsObject(ccArray *arr, CCObject* object)$/;"	f
ccArrayDoubleCapacity	support/data_support/ccCArray.cpp	/^void ccArrayDoubleCapacity(ccArray *arr)$/;"	f
ccArrayEnsureExtraCapacity	support/data_support/ccCArray.cpp	/^void ccArrayEnsureExtraCapacity(ccArray *arr, unsigned int extra)$/;"	f
ccArrayFastRemoveObject	support/data_support/ccCArray.cpp	/^void ccArrayFastRemoveObject(ccArray *arr, CCObject* object)$/;"	f
ccArrayFastRemoveObjectAtIndex	support/data_support/ccCArray.cpp	/^void ccArrayFastRemoveObjectAtIndex(ccArray *arr, unsigned int index)$/;"	f
ccArrayFree	support/data_support/ccCArray.cpp	/^void ccArrayFree(ccArray*& arr)$/;"	f
ccArrayFullRemoveArray	support/data_support/ccCArray.cpp	/^void ccArrayFullRemoveArray(ccArray *arr, ccArray *minusArr)$/;"	f
ccArrayGetIndexOfObject	support/data_support/ccCArray.cpp	/^unsigned int ccArrayGetIndexOfObject(ccArray *arr, CCObject* object)$/;"	f
ccArrayInsertObjectAtIndex	support/data_support/ccCArray.cpp	/^void ccArrayInsertObjectAtIndex(ccArray *arr, CCObject* object, unsigned int index)$/;"	f
ccArrayNew	support/data_support/ccCArray.cpp	/^ccArray* ccArrayNew(unsigned int capacity) $/;"	f
ccArrayRemoveAllObjects	support/data_support/ccCArray.cpp	/^void ccArrayRemoveAllObjects(ccArray *arr)$/;"	f
ccArrayRemoveArray	support/data_support/ccCArray.cpp	/^void ccArrayRemoveArray(ccArray *arr, ccArray *minusArr)$/;"	f
ccArrayRemoveObject	support/data_support/ccCArray.cpp	/^void ccArrayRemoveObject(ccArray *arr, CCObject* object, bool bReleaseObj\/* = true*\/)$/;"	f
ccArrayRemoveObjectAtIndex	support/data_support/ccCArray.cpp	/^void ccArrayRemoveObjectAtIndex(ccArray *arr, unsigned int index, bool bReleaseObj\/* = true*\/)$/;"	f
ccArrayShrink	support/data_support/ccCArray.cpp	/^void ccArrayShrink(ccArray *arr)$/;"	f
ccArraySwapObjectsAtIndexes	support/data_support/ccCArray.cpp	/^void ccArraySwapObjectsAtIndexes(ccArray *arr, unsigned int index1, unsigned int index2)$/;"	f
ccBLACK	include/ccTypes.h	/^static const ccColor3B ccBLACK={0,0,0};$/;"	v
ccBLUE	include/ccTypes.h	/^static const ccColor3B ccBLUE={0,0,255};$/;"	v
ccBMFontDef	label_nodes/CCLabelBMFont.h	/^} ccBMFontDef;$/;"	t	typeref:struct:_BMFontDef
ccBMFontPadding	label_nodes/CCLabelBMFont.h	/^} ccBMFontPadding;$/;"	t	typeref:struct:_BMFontPadding
ccBezierConfig	actions/CCActionInterval.h	/^} ccBezierConfig;$/;"	t	typeref:struct:_ccBezierConfig
ccBlendFunc	include/ccTypes.h	/^} ccBlendFunc;$/;"	t	typeref:struct:_ccBlendFunc
ccCArray	support/data_support/ccCArray.h	/^} ccCArray;$/;"	t	typeref:struct:_ccCArray
ccCArrayAppendArray	support/data_support/ccCArray.cpp	/^void ccCArrayAppendArray(ccCArray *arr, ccCArray *plusArr)$/;"	f
ccCArrayAppendArrayWithResize	support/data_support/ccCArray.cpp	/^void ccCArrayAppendArrayWithResize(ccCArray *arr, ccCArray *plusArr)$/;"	f
ccCArrayAppendValue	support/data_support/ccCArray.cpp	/^void ccCArrayAppendValue(ccCArray *arr, void* value)$/;"	f
ccCArrayAppendValueWithResize	support/data_support/ccCArray.cpp	/^void ccCArrayAppendValueWithResize(ccCArray *arr, void* value)$/;"	f
ccCArrayContainsValue	support/data_support/ccCArray.cpp	/^bool ccCArrayContainsValue(ccCArray *arr, void* value)$/;"	f
ccCArrayDoubleCapacity	support/data_support/ccCArray.cpp	/^void ccCArrayDoubleCapacity(ccCArray *arr)$/;"	f
ccCArrayEnsureExtraCapacity	support/data_support/ccCArray.cpp	/^void ccCArrayEnsureExtraCapacity(ccCArray *arr, unsigned int extra)$/;"	f
ccCArrayFastRemoveValueAtIndex	support/data_support/ccCArray.cpp	/^void ccCArrayFastRemoveValueAtIndex(ccCArray *arr, unsigned int index)$/;"	f
ccCArrayFree	support/data_support/ccCArray.cpp	/^void ccCArrayFree(ccCArray *arr)$/;"	f
ccCArrayFullRemoveArray	support/data_support/ccCArray.cpp	/^void ccCArrayFullRemoveArray(ccCArray *arr, ccCArray *minusArr)$/;"	f
ccCArrayGetIndexOfValue	support/data_support/ccCArray.cpp	/^unsigned int ccCArrayGetIndexOfValue(ccCArray *arr, void* value)$/;"	f
ccCArrayInsertValueAtIndex	support/data_support/ccCArray.cpp	/^void ccCArrayInsertValueAtIndex( ccCArray *arr, void* value, unsigned int index)$/;"	f
ccCArrayNew	support/data_support/ccCArray.cpp	/^ccCArray* ccCArrayNew(unsigned int capacity)$/;"	f
ccCArrayRemoveAllValues	support/data_support/ccCArray.cpp	/^void ccCArrayRemoveAllValues(ccCArray *arr)$/;"	f
ccCArrayRemoveArray	support/data_support/ccCArray.cpp	/^void ccCArrayRemoveArray(ccCArray *arr, ccCArray *minusArr)$/;"	f
ccCArrayRemoveValue	support/data_support/ccCArray.cpp	/^void ccCArrayRemoveValue(ccCArray *arr, void* value)$/;"	f
ccCArrayRemoveValueAtIndex	support/data_support/ccCArray.cpp	/^void ccCArrayRemoveValueAtIndex(ccCArray *arr, unsigned int index)$/;"	f
ccCachedImageType	textures/CCTextureCache.h	/^}ccCachedImageType;$/;"	t	class:VolatileTexture	typeref:enum:VolatileTexture::__anon42
ccCardinalSplineAt	actions/CCActionCatmullRom.cpp	/^CCPoint ccCardinalSplineAt(CCPoint &p0, CCPoint &p1, CCPoint &p2, CCPoint &p3, float tension, float t)$/;"	f
ccColor3B	include/ccTypes.h	/^} ccColor3B;$/;"	t	typeref:struct:_ccColor3B
ccColor4B	include/ccTypes.h	/^} ccColor4B;$/;"	t	typeref:struct:_ccColor4B
ccColor4F	include/ccTypes.h	/^} ccColor4F;$/;"	t	typeref:struct:_ccColor4F
ccDirectorProjection	CCDirector.h	/^} ccDirectorProjection;$/;"	t	typeref:enum:__anon1
ccDrawCardinalSpline	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawCardinalSpline( CCPointArray *config, float tension,  unsigned int segments )$/;"	f
ccDrawCatmullRom	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawCatmullRom( CCPointArray *points, unsigned int segments )$/;"	f
ccDrawCircle	draw_nodes/CCDrawingPrimitives.cpp	/^void CC_DLL ccDrawCircle( const CCPoint& center, float radius, float angle, unsigned int segments, bool drawLineToCenter)$/;"	f
ccDrawCircle	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawCircle( const CCPoint& center, float radius, float angle, unsigned int segments, bool drawLineToCenter, float scaleX, float scaleY)$/;"	f
ccDrawColor4B	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawColor4B( GLubyte r, GLubyte g, GLubyte b, GLubyte a )$/;"	f
ccDrawColor4F	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawColor4F( GLfloat r, GLfloat g, GLfloat b, GLfloat a )$/;"	f
ccDrawCubicBezier	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawCubicBezier(const CCPoint& origin, const CCPoint& control1, const CCPoint& control2, const CCPoint& destination, unsigned int segments)$/;"	f
ccDrawInit	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawInit()$/;"	f
ccDrawLine	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawLine( const CCPoint& origin, const CCPoint& destination )$/;"	f
ccDrawPoint	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawPoint( const CCPoint& point )$/;"	f
ccDrawPoints	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawPoints( const CCPoint *points, unsigned int numberOfPoints )$/;"	f
ccDrawPoly	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawPoly( const CCPoint *poli, unsigned int numberOfPoints, bool closePolygon )$/;"	f
ccDrawQuadBezier	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawQuadBezier(const CCPoint& origin, const CCPoint& control, const CCPoint& destination, unsigned int segments)$/;"	f
ccDrawRect	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawRect( CCPoint origin, CCPoint destination )$/;"	f
ccDrawSolidPoly	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawSolidPoly( const CCPoint *poli, unsigned int numberOfPoints, ccColor4F color )$/;"	f
ccDrawSolidRect	draw_nodes/CCDrawingPrimitives.cpp	/^void ccDrawSolidRect( CCPoint origin, CCPoint destination, ccColor4F color )$/;"	f
ccFileUtils_arrayWithContentsOfFileThreadSafe	platform/CCFileUtilsCommon_cpp.h	/^CCArray* ccFileUtils_arrayWithContentsOfFileThreadSafe(const char* pFileName)$/;"	f
ccFileUtils_dictionaryWithContentsOfFileThreadSafe	platform/CCFileUtilsCommon_cpp.h	/^CCDictionary* ccFileUtils_dictionaryWithContentsOfFileThreadSafe(const char *pFileName)$/;"	f
ccGLBindTexture2D	shaders/ccGLStateCache.cpp	/^void ccGLBindTexture2D(GLuint textureId)$/;"	f
ccGLBindTexture2DN	shaders/ccGLStateCache.cpp	/^void ccGLBindTexture2DN(GLuint textureUnit, GLuint textureId)$/;"	f
ccGLBindVAO	shaders/ccGLStateCache.cpp	/^void ccGLBindVAO(GLuint vaoId)$/;"	f
ccGLBlendFunc	shaders/ccGLStateCache.cpp	/^void ccGLBlendFunc(GLenum sfactor, GLenum dfactor)$/;"	f
ccGLBlendResetToCache	shaders/ccGLStateCache.cpp	/^void ccGLBlendResetToCache(void)$/;"	f
ccGLDeleteProgram	shaders/ccGLStateCache.cpp	/^void ccGLDeleteProgram( GLuint program )$/;"	f
ccGLDeleteTexture	shaders/ccGLStateCache.cpp	/^void ccGLDeleteTexture(GLuint textureId)$/;"	f
ccGLDeleteTextureN	shaders/ccGLStateCache.cpp	/^void ccGLDeleteTextureN(GLuint textureUnit, GLuint textureId)$/;"	f
ccGLEnable	shaders/ccGLStateCache.cpp	/^void ccGLEnable(ccGLServerState flags)$/;"	f
ccGLEnableVertexAttribs	shaders/ccGLStateCache.cpp	/^void ccGLEnableVertexAttribs( unsigned int flags )$/;"	f
ccGLInvalidateStateCache	shaders/ccGLStateCache.cpp	/^void ccGLInvalidateStateCache( void )$/;"	f
ccGLServerState	shaders/ccGLStateCache.h	/^} ccGLServerState;$/;"	t	typeref:enum:__anon34
ccGLUseProgram	shaders/ccGLStateCache.cpp	/^void ccGLUseProgram( GLuint program )$/;"	f
ccGRAY	include/ccTypes.h	/^static const ccColor3B ccGRAY={166,166,166};$/;"	v
ccGREEN	include/ccTypes.h	/^static const ccColor3B ccGREEN={0,255,0};$/;"	v
ccGridSize	include/ccTypes.h	/^} ccGridSize;$/;"	t	typeref:struct:_ccGridSize
ccInflateCCZFile	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateCCZFile(const char *path, unsigned char **out)$/;"	f	class:ZipUtils
ccInflateGZipFile	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateGZipFile(const char *path, unsigned char **out)$/;"	f	class:ZipUtils
ccInflateMemory	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateMemory(unsigned char *in, unsigned int inLength, unsigned char **out)$/;"	f	class:ZipUtils
ccInflateMemoryWithHint	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateMemoryWithHint(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int *outLength, unsigned int outLenghtHint)$/;"	f	class:ZipUtils
ccInflateMemoryWithHint	support/zip_support/ZipUtils.cpp	/^int ZipUtils::ccInflateMemoryWithHint(unsigned char *in, unsigned int inLength, unsigned char **out, unsigned int outLengthHint)$/;"	f	class:ZipUtils
ccKeypadMSGType	keypad_dispatcher/CCKeypadDispatcher.h	/^} ccKeypadMSGType;$/;"	t	typeref:enum:__anon9
ccLanguageType	platform/CCCommon.h	/^} ccLanguageType;$/;"	t	typeref:enum:LanguageType
ccMAGENTA	include/ccTypes.h	/^static const ccColor3B ccMAGENTA={255,0,255};$/;"	v
ccNextPOT	support/ccUtils.cpp	/^unsigned long ccNextPOT(unsigned long x)$/;"	f	namespace:cocos2d
ccORANGE	include/ccTypes.h	/^static const ccColor3B ccORANGE={255,127,0};$/;"	v
ccPVR2TexturePixelFormat	textures/CCTexturePVR.cpp	/^} ccPVR2TexturePixelFormat;$/;"	t	typeref:enum:__anon48	file:
ccPVR3TexturePixelFormat	textures/CCTexturePVR.cpp	/^} ccPVR3TexturePixelFormat;$/;"	t	typeref:enum:__anon49	file:
ccPVRTexturePixelFormatInfo	textures/CCTexturePVR.h	/^} ccPVRTexturePixelFormatInfo;$/;"	t	typeref:struct:_ccPVRTexturePixelFormatInfo
ccPVRv2TexHeader	textures/CCTexturePVR.cpp	/^} ccPVRv2TexHeader;$/;"	t	typeref:struct:_PVRTexHeader	file:
ccPVRv3TexHeader	textures/CCTexturePVR.cpp	/^} ccPVRv3TexHeader;$/;"	t	typeref:struct:__anon50	file:
ccPixelFormat	textures/CCTexturePVR.h	/^	CCTexture2DPixelFormat ccPixelFormat;$/;"	m	struct:_ccPVRTexturePixelFormatInfo
ccPointSize	draw_nodes/CCDrawingPrimitives.cpp	/^void ccPointSize( GLfloat pointSize )$/;"	f
ccPointSprite	include/ccTypes.h	/^} ccPointSprite;$/;"	t	typeref:struct:_ccPointSprite
ccQuad2	include/ccTypes.h	/^} ccQuad2;$/;"	t	typeref:struct:_ccQuad2
ccQuad3	include/ccTypes.h	/^} ccQuad3;$/;"	t	typeref:struct:_ccQuad3
ccRED	include/ccTypes.h	/^static const ccColor3B ccRED={255,0,0};$/;"	v
ccScriptType	script_support/CCScriptSupport.h	/^enum ccScriptType {$/;"	g
ccSetProjectionMatrixDirty	shaders/ccGLStateCache.cpp	/^void ccSetProjectionMatrixDirty( void )$/;"	f
ccT2F_Quad	include/ccTypes.h	/^} ccT2F_Quad;$/;"	t	typeref:struct:_ccT2F_Quad
ccTMXTileFlags	tilemap_parallax_nodes/CCTMXXMLParser.h	/^} ccTMXTileFlags;$/;"	t	typeref:enum:ccTMXTileFlags_
ccTMXTileFlags_	tilemap_parallax_nodes/CCTMXXMLParser.h	/^typedef enum ccTMXTileFlags_ {$/;"	g
ccTex2F	include/ccTypes.h	/^} ccTex2F;$/;"	t	typeref:struct:_ccTex2F
ccTexParams	textures/CCTexture2D.h	/^} ccTexParams;$/;"	t	typeref:struct:_ccTexParams
ccTouchBegan	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:CCLayer
ccTouchBegan	menu_nodes/CCMenu.cpp	/^bool CCMenu::ccTouchBegan(CCTouch* touch, CCEvent* event)$/;"	f	class:CCMenu
ccTouchBegan	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent) { CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);return false;};$/;"	f	class:CCTargetedTouchDelegate
ccTouchBegan	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual bool ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent); return false;};$/;"	f	class:CCTouchDelegate
ccTouchCancelled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:CCLayer
ccTouchCancelled	menu_nodes/CCMenu.cpp	/^void CCMenu::ccTouchCancelled(CCTouch *touch, CCEvent* event)$/;"	f	class:CCMenu
ccTouchCancelled	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTargetedTouchDelegate
ccTouchCancelled	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate
ccTouchEnded	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:CCLayer
ccTouchEnded	menu_nodes/CCMenu.cpp	/^void CCMenu::ccTouchEnded(CCTouch *touch, CCEvent* event)$/;"	f	class:CCMenu
ccTouchEnded	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTargetedTouchDelegate
ccTouchEnded	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate
ccTouchHandlerHelperData	touch_dispatcher/CCTouchDispatcher.h	/^struct ccTouchHandlerHelperData {$/;"	s
ccTouchMax	touch_dispatcher/CCTouchDispatcher.h	/^    ccTouchMax,$/;"	e	enum:__anon56
ccTouchMoved	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent)$/;"	f	class:CCLayer
ccTouchMoved	menu_nodes/CCMenu.cpp	/^void CCMenu::ccTouchMoved(CCTouch* touch, CCEvent* event)$/;"	f	class:CCMenu
ccTouchMoved	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTargetedTouchDelegate
ccTouchMoved	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual void ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouch); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate
ccTouchSelectorAllBits	touch_dispatcher/CCTouchDispatcher.h	/^    ccTouchSelectorAllBits = ( ccTouchSelectorBeganBit | ccTouchSelectorMovedBit | ccTouchSelectorEndedBit | ccTouchSelectorCancelledBit),$/;"	e	enum:__anon55
ccTouchSelectorBeganBit	touch_dispatcher/CCTouchDispatcher.h	/^    ccTouchSelectorBeganBit = 1 << 0,$/;"	e	enum:__anon55
ccTouchSelectorCancelledBit	touch_dispatcher/CCTouchDispatcher.h	/^    ccTouchSelectorCancelledBit = 1 << 3,$/;"	e	enum:__anon55
ccTouchSelectorEndedBit	touch_dispatcher/CCTouchDispatcher.h	/^    ccTouchSelectorEndedBit = 1 << 2,$/;"	e	enum:__anon55
ccTouchSelectorFlag	touch_dispatcher/CCTouchDispatcher.h	/^} ccTouchSelectorFlag;$/;"	t	typeref:enum:__anon55
ccTouchSelectorMovedBit	touch_dispatcher/CCTouchDispatcher.h	/^    ccTouchSelectorMovedBit = 1 << 1,$/;"	e	enum:__anon55
ccTouchesBegan	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:CCLayer
ccTouchesBegan	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCStandardTouchDelegate
ccTouchesBegan	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesBegan(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate
ccTouchesCancelled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:CCLayer
ccTouchesCancelled	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate
ccTouchesCancelled	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual void ccTouchesCancelled(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCStandardTouchDelegate
ccTouchesEnded	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:CCLayer
ccTouchesEnded	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCStandardTouchDelegate
ccTouchesEnded	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesEnded(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate
ccTouchesMode	layers_scenes_transitions_nodes/CCLayer.h	/^} ccTouchesMode;$/;"	t	typeref:enum:__anon11
ccTouchesMoved	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent)$/;"	f	class:CCLayer
ccTouchesMoved	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCStandardTouchDelegate
ccTouchesMoved	touch_dispatcher/CCTouchDelegateProtocol.h	/^     virtual void ccTouchesMoved(CCSet *pTouches, CCEvent *pEvent) {CC_UNUSED_PARAM(pTouches); CC_UNUSED_PARAM(pEvent);}$/;"	f	class:CCTouchDelegate
ccV2F_C4B_T2F	include/ccTypes.h	/^} ccV2F_C4B_T2F;$/;"	t	typeref:struct:_ccV2F_C4B_T2F
ccV2F_C4B_T2F_Quad	include/ccTypes.h	/^} ccV2F_C4B_T2F_Quad;$/;"	t	typeref:struct:_ccV2F_C4B_T2F_Quad
ccV2F_C4B_T2F_Triangle	include/ccTypes.h	/^} ccV2F_C4B_T2F_Triangle;$/;"	t	typeref:struct:_ccV2F_C4B_T2F_Triangle
ccV2F_C4F_T2F	include/ccTypes.h	/^} ccV2F_C4F_T2F;$/;"	t	typeref:struct:_ccV2F_C4F_T2F
ccV2F_C4F_T2F_Quad	include/ccTypes.h	/^} ccV2F_C4F_T2F_Quad;$/;"	t	typeref:struct:_ccV2F_C4F_T2F_Quad
ccV3F_C4B_T2F	include/ccTypes.h	/^} ccV3F_C4B_T2F;$/;"	t	typeref:struct:_ccV3F_C4B_T2F
ccV3F_C4B_T2F_Quad	include/ccTypes.h	/^} ccV3F_C4B_T2F_Quad;$/;"	t	typeref:struct:_ccV3F_C4B_T2F_Quad
ccVertex2F	include/ccTypes.h	/^} ccVertex2F;$/;"	t	typeref:struct:_ccVertex2F
ccVertex3F	include/ccTypes.h	/^} ccVertex3F;$/;"	t	typeref:struct:_ccVertex3F
ccVertexLineIntersect	support/CCVertex.cpp	/^bool ccVertexLineIntersect(float Ax, float Ay,$/;"	f
ccVertexLineToPolygon	support/CCVertex.cpp	/^void ccVertexLineToPolygon(CCPoint *points, float stroke, ccVertex2F *vertices, unsigned int offset, unsigned int nuPoints)$/;"	f
ccWHITE	include/ccTypes.h	/^static const ccColor3B ccWHITE={255,255,255};$/;"	v
ccYELLOW	include/ccTypes.h	/^static const ccColor3B ccYELLOW={255,255,0};$/;"	v
cc_timeval	platform/platform.h	/^struct CC_DLL cc_timeval$/;"	s
cc_utf16_from_utf8	label_nodes/CCLabelBMFont.cpp	/^static unsigned short* cc_utf16_from_utf8(const char* str_old)$/;"	f	file:
cc_utf16_vec_from_utf16_str	label_nodes/CCLabelBMFont.cpp	/^static std::vector<unsigned short> cc_utf16_vec_from_utf16_str(const unsigned short* str)$/;"	f	file:
cc_utf8_find_char	label_nodes/CCLabelBMFont.cpp	/^static unsigned int cc_utf8_find_char(std::vector<unsigned short> str, unsigned short c)$/;"	f	file:
cc_utf8_find_last_not_char	label_nodes/CCLabelBMFont.cpp	/^static unsigned int cc_utf8_find_last_not_char(std::vector<unsigned short> str, unsigned short c)$/;"	f	file:
cc_utf8_get_char	label_nodes/CCLabelBMFont.cpp	/^cc_utf8_get_char (const char * p)$/;"	f	file:
cc_utf8_next_char	label_nodes/CCLabelBMFont.cpp	142;"	d	file:
cc_utf8_strlen	label_nodes/CCLabelBMFont.cpp	/^cc_utf8_strlen (const char * p, int max)$/;"	f
cc_utf8_trim_from	label_nodes/CCLabelBMFont.cpp	/^static void cc_utf8_trim_from(std::vector<unsigned short>* str, int index)$/;"	f	file:
cc_utf8_trim_ws	label_nodes/CCLabelBMFont.cpp	/^static void cc_utf8_trim_ws(std::vector<unsigned short>* str)$/;"	f	file:
cc_wcslen	label_nodes/CCLabelBMFont.cpp	/^static int cc_wcslen(const unsigned short* str)$/;"	f	file:
ccarray_to_std_vector	menu_nodes/CCMenu.cpp	/^static std::vector<unsigned int> ccarray_to_std_vector(CCArray* pArray)$/;"	f	file:
ccc3	include/ccTypes.h	/^ccc3(const GLubyte r, const GLubyte g, const GLubyte b)$/;"	f
ccc4	include/ccTypes.h	/^ccc4(const GLubyte r, const GLubyte g, const GLubyte b, const GLubyte o)$/;"	f
ccc4BFromccc4F	include/ccTypes.h	/^static inline ccColor4B ccc4BFromccc4F(ccColor4F c)$/;"	f
ccc4FEqual	include/ccTypes.h	/^static inline bool ccc4FEqual(ccColor4F a, ccColor4F b)$/;"	f
ccc4FFromccc3B	include/ccTypes.h	/^static inline ccColor4F ccc4FFromccc3B(ccColor3B c)$/;"	f
ccc4FFromccc4B	include/ccTypes.h	/^static inline ccColor4F ccc4FFromccc4B(ccColor4B c)$/;"	f
ccc4f	include/ccTypes.h	/^ccc4f(const GLfloat r, const GLfloat g, const GLfloat b, const GLfloat a)$/;"	f
ccg	include/ccTypes.h	/^ccg(const int x, const int y)$/;"	f
ccp	support/CCPointExtension.h	60;"	d
ccpAdd	support/CCPointExtension.h	/^ccpAdd(const CCPoint& v1, const CCPoint& v2)$/;"	f
ccpAngle	support/CCPointExtension.cpp	/^float ccpAngle(const CCPoint& a, const CCPoint& b)$/;"	f
ccpAngleSigned	support/CCPointExtension.cpp	/^float ccpAngleSigned(const CCPoint& a, const CCPoint& b)$/;"	f
ccpClamp	support/CCPointExtension.cpp	/^CCPoint ccpClamp(const CCPoint& p, const CCPoint& min_inclusive, const CCPoint& max_inclusive)$/;"	f
ccpCompMult	support/CCPointExtension.cpp	/^CCPoint ccpCompMult(const CCPoint& a, const CCPoint& b)$/;"	f
ccpCompOp	support/CCPointExtension.cpp	/^CCPoint ccpCompOp(const CCPoint& p, float (*opFunc)(float))$/;"	f
ccpCross	support/CCPointExtension.h	/^ccpCross(const CCPoint& v1, const CCPoint& v2)$/;"	f
ccpDistance	support/CCPointExtension.cpp	/^ccpDistance(const CCPoint& v1, const CCPoint& v2)$/;"	f
ccpDistanceSQ	support/CCPointExtension.h	/^ccpDistanceSQ(const CCPoint p1, const CCPoint p2)$/;"	f
ccpDot	support/CCPointExtension.h	/^ccpDot(const CCPoint& v1, const CCPoint& v2)$/;"	f
ccpForAngle	support/CCPointExtension.cpp	/^ccpForAngle(const float a)$/;"	f
ccpFromSize	support/CCPointExtension.cpp	/^CCPoint ccpFromSize(const CCSize& s)$/;"	f
ccpFuzzyEqual	support/CCPointExtension.cpp	/^bool ccpFuzzyEqual(const CCPoint& a, const CCPoint& b, float var)$/;"	f
ccpIntersectPoint	support/CCPointExtension.cpp	/^CCPoint ccpIntersectPoint(const CCPoint& A, const CCPoint& B, const CCPoint& C, const CCPoint& D)$/;"	f
ccpLength	support/CCPointExtension.cpp	/^ccpLength(const CCPoint& v)$/;"	f
ccpLengthSQ	support/CCPointExtension.h	/^ccpLengthSQ(const CCPoint& v)$/;"	f
ccpLerp	support/CCPointExtension.cpp	/^CCPoint ccpLerp(const CCPoint& a, const CCPoint& b, float alpha)$/;"	f
ccpLineIntersect	support/CCPointExtension.cpp	/^bool ccpLineIntersect(const CCPoint& A, const CCPoint& B, $/;"	f
ccpMidpoint	support/CCPointExtension.h	/^ccpMidpoint(const CCPoint& v1, const CCPoint& v2)$/;"	f
ccpMult	support/CCPointExtension.h	/^ccpMult(const CCPoint& v, const float s)$/;"	f
ccpNeg	support/CCPointExtension.h	/^ccpNeg(const CCPoint& v)$/;"	f
ccpNormalize	support/CCPointExtension.cpp	/^ccpNormalize(const CCPoint& v)$/;"	f
ccpPerp	support/CCPointExtension.h	/^ccpPerp(const CCPoint& v)$/;"	f
ccpProject	support/CCPointExtension.h	/^ccpProject(const CCPoint& v1, const CCPoint& v2)$/;"	f
ccpRPerp	support/CCPointExtension.h	/^ccpRPerp(const CCPoint& v)$/;"	f
ccpRotate	support/CCPointExtension.h	/^ccpRotate(const CCPoint& v1, const CCPoint& v2)$/;"	f
ccpRotateByAngle	support/CCPointExtension.cpp	/^CCPoint ccpRotateByAngle(const CCPoint& v, const CCPoint& pivot, float angle)$/;"	f
ccpSegmentIntersect	support/CCPointExtension.cpp	/^bool ccpSegmentIntersect(const CCPoint& A, const CCPoint& B, const CCPoint& C, const CCPoint& D)$/;"	f
ccpSub	support/CCPointExtension.h	/^ccpSub(const CCPoint& v1, const CCPoint& v2)$/;"	f
ccpToAngle	support/CCPointExtension.cpp	/^ccpToAngle(const CCPoint& v)$/;"	f
ccpUnrotate	support/CCPointExtension.h	/^ccpUnrotate(const CCPoint& v1, const CCPoint& v2)$/;"	f
ccs	cocoa/CCString.h	165;"	d
central_pos	support/zip_support/unzip.cpp	/^    ZPOS64_T central_pos;          \/* position of the beginning of the central dir*\/$/;"	m	struct:cocos2d::__anon38	file:
changeHeight	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::changeHeight(GLfloat h)$/;"	f	class:CCLayerColor
changeWidth	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::changeWidth(GLfloat w)$/;"	f	class:CCLayerColor
changeWidthAndHeight	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::changeWidthAndHeight(GLfloat w ,GLfloat h)$/;"	f	class:CCLayerColor
channelType	textures/CCTexturePVR.cpp	/^	uint32_t channelType;$/;"	m	struct:__anon50	file:
charID	label_nodes/CCLabelBMFont.h	/^    unsigned int charID;$/;"	m	struct:_BMFontDef
checkForGLExtension	CCConfiguration.cpp	/^bool CCConfiguration::checkForGLExtension(const string &searchName)$/;"	f	class:CCConfiguration
childrenAlloc	base_nodes/CCNode.cpp	/^void CCNode::childrenAlloc(void)$/;"	f	class:CCNode
clampf	support/CCPointExtension.cpp	/^float clampf(float value, float min_inclusive, float max_inclusive)$/;"	f
cleanup	base_nodes/CCNode.cpp	/^void CCNode::cleanup()$/;"	f	class:CCNode
cleanup	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::cleanup()$/;"	f	class:CCTransitionScene
clear	cocoa/CCAutoreleasePool.cpp	/^void CCAutoreleasePool::clear()$/;"	f	class:CCAutoreleasePool
clear	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::clear()$/;"	f	class:CCDrawNode
clear	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::clear(float r, float g, float b, float a)$/;"	f	class:CCRenderTexture
clearDepth	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::clearDepth(float depthValue)$/;"	f	class:CCRenderTexture
clearStencil	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::clearStencil(int stencilValue)$/;"	f	class:CCRenderTexture
close_file_func	support/zip_support/ioapi.h	/^typedef int      (ZCALLBACK *close_file_func)     OF((voidpf opaque, voidpf stream));$/;"	t	namespace:cocos2d
cocos2d	support/TransformUtils.cpp	/^namespace cocos2d {$/;"	n	file:
cocos2d	support/TransformUtils.h	/^namespace   cocos2d {$/;"	n
cocos2d	support/base64.cpp	/^namespace cocos2d {$/;"	n	file:
cocos2d	support/base64.h	/^namespace cocos2d {$/;"	n
cocos2d	support/ccUtils.cpp	/^namespace cocos2d {$/;"	n	file:
cocos2d	support/ccUtils.h	/^namespace cocos2d {$/;"	n
cocos2d	support/data_support/utlist.h	/^namespace   cocos2d {$/;"	n
cocos2d	support/image_support/TGAlib.cpp	/^namespace cocos2d {$/;"	n	file:
cocos2d	support/image_support/TGAlib.h	/^namespace cocos2d {$/;"	n
cocos2d	support/zip_support/ZipUtils.h	/^namespace cocos2d$/;"	n
cocos2d	support/zip_support/ioapi.cpp	/^namespace cocos2d {$/;"	n	file:
cocos2d	support/zip_support/ioapi.h	/^namespace cocos2d {$/;"	n
cocos2d	support/zip_support/unzip.cpp	/^namespace cocos2d {$/;"	n	file:
cocos2d	support/zip_support/unzip.h	/^namespace cocos2d {$/;"	n
cocos2dVersion	cocos2d.cpp	/^const char* cocos2dVersion()$/;"	f
cocos2dx_ccTypeInfo_h	include/ccTypeInfo.h	26;"	d
color	include/ccTypes.h	/^    ccColor4B    color;        \/\/ 4 bytes$/;"	m	struct:_ccPointSprite
color	particle_nodes/CCParticleSystem.h	/^    ccColor4F    color;$/;"	m	struct:sCCParticle
colorSpace	textures/CCTexturePVR.cpp	/^	uint32_t colorSpace;$/;"	m	struct:__anon50	file:
colors	include/ccTypes.h	/^    ccColor4B        colors;                \/\/ 4 bytes$/;"	m	struct:_ccV3F_C4B_T2F
colors	include/ccTypes.h	/^    ccColor4B        colors;$/;"	m	struct:_ccV2F_C4B_T2F
colors	include/ccTypes.h	/^    ccColor4F        colors;$/;"	m	struct:_ccV2F_C4F_T2F
compare	cocoa/CCString.cpp	/^int CCString::compare(const char * pStr) const$/;"	f	class:CCString
compareInts	tilemap_parallax_nodes/CCTMXLayer.cpp	/^static inline int compareInts(const void * a, const void * b)$/;"	f	file:
compare_selector	cocoa/CCObject.h	94;"	d
compileShader	shaders/CCGLProgram.cpp	/^bool CCGLProgram::compileShader(GLuint * shader, GLenum type, const GLchar* source)$/;"	f	class:CCGLProgram
compressed	textures/CCTexturePVR.h	/^	bool compressed;$/;"	m	struct:_ccPVRTexturePixelFormatInfo
compressed_size	support/zip_support/unzip.h	/^    ZPOS64_T compressed_size;   \/* compressed size                 8 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
compressed_size	support/zip_support/unzip.h	/^    uLong compressed_size;      \/* compressed size                 4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
compression_method	support/zip_support/unzip.cpp	/^    uLong compression_method;   \/* compression method (0==store) *\/$/;"	m	struct:cocos2d::__anon37	file:
compression_method	support/zip_support/unzip.h	/^    uLong compression_method;   \/* compression method              2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
compression_method	support/zip_support/unzip.h	/^    uLong compression_method;   \/* compression method              2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
compression_type	support/zip_support/ZipUtils.h	/^        unsigned short            compression_type;    \/\/ should 0$/;"	m	struct:cocos2d::CCZHeader
computeImageFormatType	textures/CCTextureCache.cpp	/^static CCImage::EImageFormat computeImageFormatType(string& filename)$/;"	f	file:
configurationWithFNTFile	label_nodes/CCLabelBMFont.cpp	/^CCBMFontConfiguration * CCBMFontConfiguration::configurationWithFNTFile(const char *FNTfile)$/;"	f	class:CCBMFontConfiguration
containsObject	cocoa/CCArray.cpp	/^bool CCArray::containsObject(CCObject* object)$/;"	f	class:CCArray
containsObject	cocoa/CCSet.cpp	/^bool CCSet::containsObject(CCObject *pObject)$/;"	f	class:CCSet
containsPoint	cocoa/CCGeometry.cpp	/^bool CCRect::containsPoint(const CCPoint& point) const$/;"	f	class:CCRect
controlPoint_1	actions/CCActionInterval.h	/^    CCPoint controlPoint_1;$/;"	m	struct:_ccBezierConfig
controlPoint_2	actions/CCActionInterval.h	/^    CCPoint controlPoint_2;$/;"	m	struct:_ccBezierConfig
convertToGL	CCDirector.cpp	/^CCPoint CCDirector::convertToGL(const CCPoint& uiPoint)$/;"	f	class:CCDirector
convertToNodeSpace	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToNodeSpace(const CCPoint& worldPoint)$/;"	f	class:CCNode
convertToNodeSpaceAR	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToNodeSpaceAR(const CCPoint& worldPoint)$/;"	f	class:CCNode
convertToUI	CCDirector.cpp	/^CCPoint CCDirector::convertToUI(const CCPoint& glPoint)$/;"	f	class:CCDirector
convertToWindowSpace	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToWindowSpace(const CCPoint& nodePoint)$/;"	f	class:CCNode
convertToWorldSpace	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToWorldSpace(const CCPoint& nodePoint)$/;"	f	class:CCNode
convertToWorldSpaceAR	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertToWorldSpaceAR(const CCPoint& nodePoint)$/;"	f	class:CCNode
convertTouchToNodeSpace	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertTouchToNodeSpace(CCTouch *touch)$/;"	f	class:CCNode
convertTouchToNodeSpaceAR	base_nodes/CCNode.cpp	/^CCPoint CCNode::convertTouchToNodeSpaceAR(CCTouch *touch)$/;"	f	class:CCNode
copy	cocoa/CCObject.cpp	/^CCObject* CCObject::copy()$/;"	f	class:CCObject
copy	cocoa/CCSet.cpp	/^CCSet* CCSet::copy(void)$/;"	f	class:CCSet
copyWithZone	actions/CCAction.cpp	/^CCObject *CCFollow::copyWithZone(CCZone *pZone)$/;"	f	class:CCFollow
copyWithZone	actions/CCAction.cpp	/^CCObject *CCSpeed::copyWithZone(CCZone *pZone)$/;"	f	class:CCSpeed
copyWithZone	actions/CCAction.cpp	/^CCObject* CCAction::copyWithZone(CCZone *pZone)$/;"	f	class:CCAction
copyWithZone	actions/CCActionCamera.cpp	/^CCObject * CCOrbitCamera::copyWithZone(CCZone *pZone)$/;"	f	class:CCOrbitCamera
copyWithZone	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo* CCCardinalSplineTo::copyWithZone(cocos2d::CCZone *pZone)$/;"	f	class:CCCardinalSplineTo
copyWithZone	actions/CCActionCatmullRom.cpp	/^CCObject* CCPointArray::copyWithZone(cocos2d::CCZone *zone)$/;"	f	class:CCPointArray
copyWithZone	actions/CCActionEase.cpp	/^CCObject *CCEaseElasticOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseElasticOut
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCActionEase::copyWithZone(CCZone *pZone)$/;"	f	class:CCActionEase
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBackIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBackIn
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBackInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBackInOut
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBackOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBackOut
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBounce::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBounce
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBounceIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBounceIn
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBounceInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBounceInOut
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseBounceOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseBounceOut
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseElastic::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseElastic
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseElasticIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseElasticIn
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseElasticInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseElasticInOut
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseExponentialIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseExponentialIn
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseExponentialInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseExponentialInOut
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseExponentialOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseExponentialOut
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseIn
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseInOut
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseOut
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseRateAction::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseRateAction
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseSineIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseSineIn
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseSineInOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseSineInOut
copyWithZone	actions/CCActionEase.cpp	/^CCObject* CCEaseSineOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCEaseSineOut
copyWithZone	actions/CCActionGrid.cpp	/^CCObject* CCGridAction::copyWithZone(CCZone *pZone)$/;"	f	class:CCGridAction
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCFlipX3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCFlipX3D
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCFlipY3D::copyWithZone(CCZone* pZone)$/;"	f	class:CCFlipY3D
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCLens3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCLens3D
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCLiquid::copyWithZone(CCZone *pZone)$/;"	f	class:CCLiquid
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCRipple3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCRipple3D
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCShaky3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCShaky3D
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCTwirl::copyWithZone(CCZone *pZone)$/;"	f	class:CCTwirl
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCWaves3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCWaves3D
copyWithZone	actions/CCActionGrid3D.cpp	/^CCObject* CCWaves::copyWithZone(CCZone *pZone)$/;"	f	class:CCWaves
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCActionInstant::copyWithZone(CCZone *pZone) {$/;"	f	class:CCActionInstant
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCCallFunc::copyWithZone(CCZone *pZone) {$/;"	f	class:CCCallFunc
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCCallFuncN::copyWithZone(CCZone* zone) {$/;"	f	class:CCCallFuncN
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCCallFuncND::copyWithZone(CCZone* zone) {$/;"	f	class:CCCallFuncND
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCCallFuncO::copyWithZone(CCZone* zone) {$/;"	f	class:CCCallFuncO
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCFlipX::copyWithZone(CCZone *pZone) {$/;"	f	class:CCFlipX
copyWithZone	actions/CCActionInstant.cpp	/^CCObject * CCPlace::copyWithZone(CCZone *pZone) {$/;"	f	class:CCPlace
copyWithZone	actions/CCActionInstant.cpp	/^CCObject* CCFlipY::copyWithZone(CCZone *pZone) {$/;"	f	class:CCFlipY
copyWithZone	actions/CCActionInstant.cpp	/^CCObject* CCHide::copyWithZone(CCZone *pZone) {$/;"	f	class:CCHide
copyWithZone	actions/CCActionInstant.cpp	/^CCObject* CCShow::copyWithZone(CCZone *pZone) {$/;"	f	class:CCShow
copyWithZone	actions/CCActionInstant.cpp	/^CCObject* CCToggleVisibility::copyWithZone(CCZone *pZone)$/;"	f	class:CCToggleVisibility
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCActionInterval::copyWithZone(CCZone *pZone)$/;"	f	class:CCActionInterval
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCAnimate::copyWithZone(CCZone *pZone)$/;"	f	class:CCAnimate
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCBezierBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCBezierBy
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCBezierTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCBezierTo
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCBlink::copyWithZone(CCZone *pZone)$/;"	f	class:CCBlink
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCDelayTime::copyWithZone(CCZone *pZone)$/;"	f	class:CCDelayTime
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCFadeIn::copyWithZone(CCZone *pZone)$/;"	f	class:CCFadeIn
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCFadeOut::copyWithZone(CCZone *pZone)$/;"	f	class:CCFadeOut
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCFadeTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCFadeTo
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCJumpBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCJumpBy
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCJumpTo::copyWithZone(CCZone* pZone)$/;"	f	class:CCJumpTo
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCMoveBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCMoveBy
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCMoveTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCMoveTo
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCRepeat::copyWithZone(CCZone *pZone)$/;"	f	class:CCRepeat
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCRepeatForever::copyWithZone(CCZone *pZone)$/;"	f	class:CCRepeatForever
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCReverseTime::copyWithZone(CCZone *pZone)$/;"	f	class:CCReverseTime
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCRotateBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCRotateBy
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCRotateTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCRotateTo
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCScaleBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCScaleBy
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCScaleTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCScaleTo
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCSequence::copyWithZone(CCZone *pZone)$/;"	f	class:CCSequence
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCSkewTo::copyWithZone(CCZone* pZone)$/;"	f	class:CCSkewTo
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCSpawn::copyWithZone(CCZone *pZone)$/;"	f	class:CCSpawn
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCTargetedAction::copyWithZone(CCZone* pZone)$/;"	f	class:CCTargetedAction
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCTintBy::copyWithZone(CCZone *pZone)$/;"	f	class:CCTintBy
copyWithZone	actions/CCActionInterval.cpp	/^CCObject* CCTintTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCTintTo
copyWithZone	actions/CCActionProgressTimer.cpp	/^CCObject* CCProgressFromTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCProgressFromTo
copyWithZone	actions/CCActionProgressTimer.cpp	/^CCObject* CCProgressTo::copyWithZone(CCZone *pZone)$/;"	f	class:CCProgressTo
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCJumpTiles3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCJumpTiles3D
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCShakyTiles3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCShakyTiles3D
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCShatteredTiles3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCShatteredTiles3D
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCShuffleTiles::copyWithZone(CCZone *pZone)$/;"	f	class:CCShuffleTiles
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCSplitCols::copyWithZone(CCZone *pZone)$/;"	f	class:CCSplitCols
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCSplitRows::copyWithZone(CCZone *pZone)$/;"	f	class:CCSplitRows
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCTurnOffTiles::copyWithZone(CCZone *pZone)$/;"	f	class:CCTurnOffTiles
copyWithZone	actions/CCActionTiledGrid.cpp	/^CCObject* CCWavesTiles3D::copyWithZone(CCZone *pZone)$/;"	f	class:CCWavesTiles3D
copyWithZone	cocoa/CCArray.cpp	/^CCObject* CCArray::copyWithZone(CCZone* pZone)$/;"	f	class:CCArray
copyWithZone	cocoa/CCDictionary.cpp	/^CCObject* CCDictionary::copyWithZone(CCZone* pZone)$/;"	f	class:CCDictionary
copyWithZone	cocoa/CCGeometry.cpp	/^CCObject* CCPoint::copyWithZone(CCZone* pZone)$/;"	f	class:CCPoint
copyWithZone	cocoa/CCGeometry.cpp	/^CCObject* CCRect::copyWithZone(CCZone* pZone)$/;"	f	class:CCRect
copyWithZone	cocoa/CCGeometry.cpp	/^CCObject* CCSize::copyWithZone(CCZone* pZone)$/;"	f	class:CCSize
copyWithZone	cocoa/CCObject.cpp	/^CCObject* CCCopying::copyWithZone(CCZone *pZone)$/;"	f	class:CCCopying
copyWithZone	cocoa/CCString.cpp	/^CCObject* CCString::copyWithZone(CCZone* pZone)$/;"	f	class:CCString
copyWithZone	sprite_nodes/CCAnimation.cpp	/^CCObject* CCAnimation::copyWithZone(CCZone* pZone)$/;"	f	class:CCAnimation
copyWithZone	sprite_nodes/CCAnimation.cpp	/^CCObject* CCAnimationFrame::copyWithZone(CCZone* pZone)$/;"	f	class:CCAnimationFrame
copyWithZone	sprite_nodes/CCSpriteFrame.cpp	/^CCObject* CCSpriteFrame::copyWithZone(CCZone *pZone)$/;"	f	class:CCSpriteFrame
count	actions/CCActionCatmullRom.cpp	/^unsigned int CCPointArray::count()$/;"	f	class:CCPointArray
count	cocoa/CCArray.cpp	/^unsigned int CCArray::count()$/;"	f	class:CCArray
count	cocoa/CCDictionary.cpp	/^unsigned int CCDictionary::count()$/;"	f	class:CCDictionary
count	cocoa/CCSet.cpp	/^int CCSet::count(void)$/;"	f	class:CCSet
count	support/data_support/uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket
crc	support/zip_support/unzip.h	/^    uLong crc;                  \/* crc-32                          4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
crc	support/zip_support/unzip.h	/^    uLong crc;                  \/* crc-32                          4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
crc32	support/zip_support/unzip.cpp	/^    uLong crc32;                \/* crc32 of all data uncompressed *\/$/;"	m	struct:cocos2d::__anon37	file:
crc32_wait	support/zip_support/unzip.cpp	/^    uLong crc32_wait;           \/* crc32 we must obtain after decompress all *\/$/;"	m	struct:cocos2d::__anon37	file:
create	actions/CCAction.cpp	/^CCAction* CCAction::create()$/;"	f	class:CCAction
create	actions/CCAction.cpp	/^CCFollow* CCFollow::create(CCNode *pFollowedNode, const CCRect& rect\/* = CCRectZero*\/)$/;"	f	class:CCFollow
create	actions/CCAction.cpp	/^CCSpeed* CCSpeed::create(CCActionInterval* pAction, float fSpeed)$/;"	f	class:CCSpeed
create	actions/CCActionCamera.cpp	/^CCOrbitCamera * CCOrbitCamera::create(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)$/;"	f	class:CCOrbitCamera
create	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineBy* CCCardinalSplineBy::create(float duration, cocos2d::CCPointArray *points, float tension)$/;"	f	class:CCCardinalSplineBy
create	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo* CCCardinalSplineTo::create(float duration, cocos2d::CCPointArray *points, float tension)$/;"	f	class:CCCardinalSplineTo
create	actions/CCActionCatmullRom.cpp	/^CCCatmullRomBy* CCCatmullRomBy::create(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomBy
create	actions/CCActionCatmullRom.cpp	/^CCCatmullRomTo* CCCatmullRomTo::create(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomTo
create	actions/CCActionCatmullRom.cpp	/^CCPointArray* CCPointArray::create(unsigned int capacity)$/;"	f	class:CCPointArray
create	actions/CCActionEase.cpp	/^CCActionEase* CCActionEase::create(CCActionInterval *pAction)$/;"	f	class:CCActionEase
create	actions/CCActionEase.cpp	/^CCEaseBackIn* CCEaseBackIn::create(CCActionInterval *pAction)$/;"	f	class:CCEaseBackIn
create	actions/CCActionEase.cpp	/^CCEaseBackInOut* CCEaseBackInOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBackInOut
create	actions/CCActionEase.cpp	/^CCEaseBackOut* CCEaseBackOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBackOut
create	actions/CCActionEase.cpp	/^CCEaseBounce* CCEaseBounce::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBounce
create	actions/CCActionEase.cpp	/^CCEaseBounceIn* CCEaseBounceIn::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBounceIn
create	actions/CCActionEase.cpp	/^CCEaseBounceInOut* CCEaseBounceInOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBounceInOut
create	actions/CCActionEase.cpp	/^CCEaseBounceOut* CCEaseBounceOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseBounceOut
create	actions/CCActionEase.cpp	/^CCEaseElastic* CCEaseElastic::create(CCActionInterval *pAction)$/;"	f	class:CCEaseElastic
create	actions/CCActionEase.cpp	/^CCEaseElastic* CCEaseElastic::create(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElastic
create	actions/CCActionEase.cpp	/^CCEaseElasticIn* CCEaseElasticIn::create(CCActionInterval *pAction)$/;"	f	class:CCEaseElasticIn
create	actions/CCActionEase.cpp	/^CCEaseElasticIn* CCEaseElasticIn::create(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElasticIn
create	actions/CCActionEase.cpp	/^CCEaseElasticInOut* CCEaseElasticInOut::create(CCActionInterval *pAction)$/;"	f	class:CCEaseElasticInOut
create	actions/CCActionEase.cpp	/^CCEaseElasticInOut* CCEaseElasticInOut::create(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElasticInOut
create	actions/CCActionEase.cpp	/^CCEaseElasticOut* CCEaseElasticOut::create(CCActionInterval *pAction)$/;"	f	class:CCEaseElasticOut
create	actions/CCActionEase.cpp	/^CCEaseElasticOut* CCEaseElasticOut::create(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElasticOut
create	actions/CCActionEase.cpp	/^CCEaseExponentialIn* CCEaseExponentialIn::create(CCActionInterval* pAction)$/;"	f	class:CCEaseExponentialIn
create	actions/CCActionEase.cpp	/^CCEaseExponentialInOut* CCEaseExponentialInOut::create(CCActionInterval *pAction)$/;"	f	class:CCEaseExponentialInOut
create	actions/CCActionEase.cpp	/^CCEaseExponentialOut* CCEaseExponentialOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseExponentialOut
create	actions/CCActionEase.cpp	/^CCEaseIn* CCEaseIn::create(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseIn
create	actions/CCActionEase.cpp	/^CCEaseInOut* CCEaseInOut::create(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseInOut
create	actions/CCActionEase.cpp	/^CCEaseOut* CCEaseOut::create(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseOut
create	actions/CCActionEase.cpp	/^CCEaseRateAction* CCEaseRateAction::create(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseRateAction
create	actions/CCActionEase.cpp	/^CCEaseSineIn* CCEaseSineIn::create(CCActionInterval* pAction)$/;"	f	class:CCEaseSineIn
create	actions/CCActionEase.cpp	/^CCEaseSineInOut* CCEaseSineInOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseSineInOut
create	actions/CCActionEase.cpp	/^CCEaseSineOut* CCEaseSineOut::create(CCActionInterval* pAction)$/;"	f	class:CCEaseSineOut
create	actions/CCActionGrid.cpp	/^CCAccelAmplitude* CCAccelAmplitude::create(CCAction *pAction, float duration)$/;"	f	class:CCAccelAmplitude
create	actions/CCActionGrid.cpp	/^CCAccelDeccelAmplitude* CCAccelDeccelAmplitude::create(CCAction *pAction, float duration)$/;"	f	class:CCAccelDeccelAmplitude
create	actions/CCActionGrid.cpp	/^CCDeccelAmplitude* CCDeccelAmplitude::create(CCAction *pAction, float duration)$/;"	f	class:CCDeccelAmplitude
create	actions/CCActionGrid.cpp	/^CCGridAction* CCGridAction::create(const ccGridSize& gridSize, float duration)$/;"	f	class:CCGridAction
create	actions/CCActionGrid.cpp	/^CCReuseGrid* CCReuseGrid::create(int times)$/;"	f	class:CCReuseGrid
create	actions/CCActionGrid.cpp	/^CCStopGrid* CCStopGrid::create(void)$/;"	f	class:CCStopGrid
create	actions/CCActionGrid3D.cpp	/^CCFlipX3D* CCFlipX3D::create(float duration)$/;"	f	class:CCFlipX3D
create	actions/CCActionGrid3D.cpp	/^CCFlipY3D* CCFlipY3D::create(float duration)$/;"	f	class:CCFlipY3D
create	actions/CCActionGrid3D.cpp	/^CCLens3D* CCLens3D::create(const CCPoint& pos, float r, const ccGridSize& gridSize, float duration)$/;"	f	class:CCLens3D
create	actions/CCActionGrid3D.cpp	/^CCLiquid* CCLiquid::create(int wav, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCLiquid
create	actions/CCActionGrid3D.cpp	/^CCRipple3D* CCRipple3D::create(const CCPoint& pos, float r, int wav, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCRipple3D
create	actions/CCActionGrid3D.cpp	/^CCShaky3D* CCShaky3D::create(int range, bool shakeZ, const ccGridSize& gridSize, float duration)$/;"	f	class:CCShaky3D
create	actions/CCActionGrid3D.cpp	/^CCTwirl* CCTwirl::create(CCPoint pos, int t, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCTwirl
create	actions/CCActionGrid3D.cpp	/^CCWaves* CCWaves::create(int wav, float amp, bool h, bool v, const ccGridSize& gridSize, float duration)$/;"	f	class:CCWaves
create	actions/CCActionGrid3D.cpp	/^CCWaves3D* CCWaves3D::create(int wav, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCWaves3D
create	actions/CCActionInstant.cpp	/^CCCallFunc * CCCallFunc::create(CCObject* pSelectorTarget, SEL_CallFunc selector) $/;"	f	class:CCCallFunc
create	actions/CCActionInstant.cpp	/^CCCallFunc * CCCallFunc::create(int nHandler)$/;"	f	class:CCCallFunc
create	actions/CCActionInstant.cpp	/^CCCallFuncN * CCCallFuncN::create(CCObject* pSelectorTarget, SEL_CallFuncN selector)$/;"	f	class:CCCallFuncN
create	actions/CCActionInstant.cpp	/^CCCallFuncN * CCCallFuncN::create(int nHandler)$/;"	f	class:CCCallFuncN
create	actions/CCActionInstant.cpp	/^CCCallFuncND * CCCallFuncND::create(CCObject* pSelectorTarget, SEL_CallFuncND selector, void* d)$/;"	f	class:CCCallFuncND
create	actions/CCActionInstant.cpp	/^CCCallFuncO * CCCallFuncO::create(CCObject* pSelectorTarget, SEL_CallFuncO selector, CCObject* pObject)$/;"	f	class:CCCallFuncO
create	actions/CCActionInstant.cpp	/^CCFlipX *CCFlipX::create(bool x)$/;"	f	class:CCFlipX
create	actions/CCActionInstant.cpp	/^CCFlipY * CCFlipY::create(bool y)$/;"	f	class:CCFlipY
create	actions/CCActionInstant.cpp	/^CCHide * CCHide::create() $/;"	f	class:CCHide
create	actions/CCActionInstant.cpp	/^CCPlace* CCPlace::create(const CCPoint& pos)$/;"	f	class:CCPlace
create	actions/CCActionInstant.cpp	/^CCShow* CCShow::create() $/;"	f	class:CCShow
create	actions/CCActionInstant.cpp	/^CCToggleVisibility * CCToggleVisibility::create()$/;"	f	class:CCToggleVisibility
create	actions/CCActionInterval.cpp	/^CCActionInterval* CCActionInterval::create(float d)$/;"	f	class:CCActionInterval
create	actions/CCActionInterval.cpp	/^CCAnimate* CCAnimate::create(CCAnimation *pAnimation)$/;"	f	class:CCAnimate
create	actions/CCActionInterval.cpp	/^CCBezierBy* CCBezierBy::create(float t, const ccBezierConfig& c)$/;"	f	class:CCBezierBy
create	actions/CCActionInterval.cpp	/^CCBezierTo* CCBezierTo::create(float t, const ccBezierConfig& c)$/;"	f	class:CCBezierTo
create	actions/CCActionInterval.cpp	/^CCBlink* CCBlink::create(float duration, unsigned int uBlinks)$/;"	f	class:CCBlink
create	actions/CCActionInterval.cpp	/^CCDelayTime* CCDelayTime::create(float d)$/;"	f	class:CCDelayTime
create	actions/CCActionInterval.cpp	/^CCFadeIn* CCFadeIn::create(float d)$/;"	f	class:CCFadeIn
create	actions/CCActionInterval.cpp	/^CCFadeOut* CCFadeOut::create(float d)$/;"	f	class:CCFadeOut
create	actions/CCActionInterval.cpp	/^CCFadeTo* CCFadeTo::create(float duration, GLubyte opacity)$/;"	f	class:CCFadeTo
create	actions/CCActionInterval.cpp	/^CCFiniteTimeAction* CCSequence::create(CCArray* arrayOfActions)$/;"	f	class:CCSequence
create	actions/CCActionInterval.cpp	/^CCFiniteTimeAction* CCSequence::create(CCFiniteTimeAction *pAction1, ...)$/;"	f	class:CCSequence
create	actions/CCActionInterval.cpp	/^CCFiniteTimeAction* CCSequence::create(CCFiniteTimeAction *pAction1, va_list args)$/;"	f	class:CCSequence
create	actions/CCActionInterval.cpp	/^CCFiniteTimeAction* CCSpawn::create(CCArray *arrayOfActions)$/;"	f	class:CCSpawn
create	actions/CCActionInterval.cpp	/^CCFiniteTimeAction* CCSpawn::create(CCFiniteTimeAction *pAction1, ...)$/;"	f	class:CCSpawn
create	actions/CCActionInterval.cpp	/^CCFiniteTimeAction* CCSpawn::create(CCFiniteTimeAction *pAction1, va_list args)$/;"	f	class:CCSpawn
create	actions/CCActionInterval.cpp	/^CCJumpBy* CCJumpBy::create(float duration, const CCPoint& position, float height, unsigned int jumps)$/;"	f	class:CCJumpBy
create	actions/CCActionInterval.cpp	/^CCJumpTo* CCJumpTo::create(float duration, const CCPoint& position, float height, int jumps)$/;"	f	class:CCJumpTo
create	actions/CCActionInterval.cpp	/^CCMoveBy* CCMoveBy::create(float duration, const CCPoint& position)$/;"	f	class:CCMoveBy
create	actions/CCActionInterval.cpp	/^CCMoveTo* CCMoveTo::create(float duration, const CCPoint& position)$/;"	f	class:CCMoveTo
create	actions/CCActionInterval.cpp	/^CCRepeat* CCRepeat::create(CCFiniteTimeAction *pAction, unsigned int times)$/;"	f	class:CCRepeat
create	actions/CCActionInterval.cpp	/^CCRepeatForever *CCRepeatForever::create(CCActionInterval *pAction)$/;"	f	class:CCRepeatForever
create	actions/CCActionInterval.cpp	/^CCReverseTime* CCReverseTime::create(CCFiniteTimeAction *pAction)$/;"	f	class:CCReverseTime
create	actions/CCActionInterval.cpp	/^CCRotateBy* CCRotateBy::create(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateBy
create	actions/CCActionInterval.cpp	/^CCRotateBy* CCRotateBy::create(float fDuration, float fDeltaAngleX, float fDeltaAngleY)$/;"	f	class:CCRotateBy
create	actions/CCActionInterval.cpp	/^CCRotateTo* CCRotateTo::create(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateTo
create	actions/CCActionInterval.cpp	/^CCRotateTo* CCRotateTo::create(float fDuration, float fDeltaAngleX, float fDeltaAngleY)$/;"	f	class:CCRotateTo
create	actions/CCActionInterval.cpp	/^CCScaleBy* CCScaleBy::create(float duration, float s)$/;"	f	class:CCScaleBy
create	actions/CCActionInterval.cpp	/^CCScaleBy* CCScaleBy::create(float duration, float sx, float sy)$/;"	f	class:CCScaleBy
create	actions/CCActionInterval.cpp	/^CCScaleTo* CCScaleTo::create(float duration, float s)$/;"	f	class:CCScaleTo
create	actions/CCActionInterval.cpp	/^CCScaleTo* CCScaleTo::create(float duration, float sx, float sy)$/;"	f	class:CCScaleTo
create	actions/CCActionInterval.cpp	/^CCSkewBy* CCSkewBy::create(float t, float sx, float sy)$/;"	f	class:CCSkewBy
create	actions/CCActionInterval.cpp	/^CCSkewTo* CCSkewTo::create(float t, float sx, float sy)$/;"	f	class:CCSkewTo
create	actions/CCActionInterval.cpp	/^CCTargetedAction* CCTargetedAction::create(CCNode* pTarget, CCFiniteTimeAction* pAction)$/;"	f	class:CCTargetedAction
create	actions/CCActionInterval.cpp	/^CCTintBy* CCTintBy::create(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)$/;"	f	class:CCTintBy
create	actions/CCActionInterval.cpp	/^CCTintTo* CCTintTo::create(float duration, GLubyte red, GLubyte green, GLubyte blue)$/;"	f	class:CCTintTo
create	actions/CCActionPageTurn3D.cpp	/^CCPageTurn3D* CCPageTurn3D::create(const ccGridSize& gridSize, float time)$/;"	f	class:CCPageTurn3D
create	actions/CCActionProgressTimer.cpp	/^CCProgressFromTo* CCProgressFromTo::create(float duration, float fFromPercentage, float fToPercentage)$/;"	f	class:CCProgressFromTo
create	actions/CCActionProgressTimer.cpp	/^CCProgressTo* CCProgressTo::create(float duration, float fPercent)$/;"	f	class:CCProgressTo
create	actions/CCActionTiledGrid.cpp	/^CCFadeOutBLTiles* CCFadeOutBLTiles::create(const ccGridSize& gridSize, float time)$/;"	f	class:CCFadeOutBLTiles
create	actions/CCActionTiledGrid.cpp	/^CCFadeOutDownTiles* CCFadeOutDownTiles::create(const ccGridSize& gridSize, float time)$/;"	f	class:CCFadeOutDownTiles
create	actions/CCActionTiledGrid.cpp	/^CCFadeOutTRTiles* CCFadeOutTRTiles::create(const ccGridSize& gridSize, float time)$/;"	f	class:CCFadeOutTRTiles
create	actions/CCActionTiledGrid.cpp	/^CCFadeOutUpTiles* CCFadeOutUpTiles::create(const ccGridSize& gridSize, float time)$/;"	f	class:CCFadeOutUpTiles
create	actions/CCActionTiledGrid.cpp	/^CCJumpTiles3D* CCJumpTiles3D::create(int j, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCJumpTiles3D
create	actions/CCActionTiledGrid.cpp	/^CCShakyTiles3D* CCShakyTiles3D::create(int nRange, bool bShakeZ,const ccGridSize& gridSize, float duration)$/;"	f	class:CCShakyTiles3D
create	actions/CCActionTiledGrid.cpp	/^CCShatteredTiles3D* CCShatteredTiles3D::create(int nRange, bool bShatterZ, const ccGridSize& gridSize, float duration)$/;"	f	class:CCShatteredTiles3D
create	actions/CCActionTiledGrid.cpp	/^CCShuffleTiles* CCShuffleTiles::create(int s, const ccGridSize& gridSize, float duration)$/;"	f	class:CCShuffleTiles
create	actions/CCActionTiledGrid.cpp	/^CCSplitCols* CCSplitCols::create(int nCols, float duration)$/;"	f	class:CCSplitCols
create	actions/CCActionTiledGrid.cpp	/^CCSplitRows* CCSplitRows::create(int nRows, float duration)$/;"	f	class:CCSplitRows
create	actions/CCActionTiledGrid.cpp	/^CCTurnOffTiles* CCTurnOffTiles::create(const ccGridSize& size, float d)$/;"	f	class:CCTurnOffTiles
create	actions/CCActionTiledGrid.cpp	/^CCTurnOffTiles* CCTurnOffTiles::create(int s, const ccGridSize& gridSize, float duration)$/;"	f	class:CCTurnOffTiles
create	actions/CCActionTiledGrid.cpp	/^CCWavesTiles3D* CCWavesTiles3D::create(int wav, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCWavesTiles3D
create	actions/CCActionTween.cpp	/^CCActionTween* CCActionTween::create(float aDuration, const char* key, float from, float to)$/;"	f	class:CCActionTween
create	base_nodes/CCAtlasNode.cpp	/^CCAtlasNode * CCAtlasNode::create(const char *tile, unsigned int tileWidth, unsigned int tileHeight, $/;"	f	class:CCAtlasNode
create	base_nodes/CCNode.cpp	/^CCNode * CCNode::create(void)$/;"	f	class:CCNode
create	cocoa/CCArray.cpp	/^CCArray* CCArray::create()$/;"	f	class:CCArray
create	cocoa/CCArray.cpp	/^CCArray* CCArray::create(CCObject* pObject, ...)$/;"	f	class:CCArray
create	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::create()$/;"	f	class:CCDictionary
create	cocoa/CCInteger.h	/^    static CCInteger* create(int v)$/;"	f	class:CCInteger
create	cocoa/CCString.cpp	/^CCString* CCString::create(const std::string& str)$/;"	f	class:CCString
create	draw_nodes/CCDrawNode.cpp	/^CCDrawNode* CCDrawNode::create()$/;"	f	class:CCDrawNode
create	effects/CCGrid.cpp	/^CCGrid3D* CCGrid3D::create(const ccGridSize& gridSize)$/;"	f	class:CCGrid3D
create	effects/CCGrid.cpp	/^CCGrid3D* CCGrid3D::create(const ccGridSize& gridSize, CCTexture2D *pTexture, bool bFlipped)$/;"	f	class:CCGrid3D
create	effects/CCGrid.cpp	/^CCGridBase* CCGridBase::create(const ccGridSize& gridSize)$/;"	f	class:CCGridBase
create	effects/CCGrid.cpp	/^CCGridBase* CCGridBase::create(const ccGridSize& gridSize, CCTexture2D *texture, bool flipped)$/;"	f	class:CCGridBase
create	effects/CCGrid.cpp	/^CCTiledGrid3D* CCTiledGrid3D::create(const ccGridSize& gridSize)$/;"	f	class:CCTiledGrid3D
create	effects/CCGrid.cpp	/^CCTiledGrid3D* CCTiledGrid3D::create(const ccGridSize& gridSize, CCTexture2D *pTexture, bool bFlipped)$/;"	f	class:CCTiledGrid3D
create	label_nodes/CCLabelAtlas.cpp	/^CCLabelAtlas* CCLabelAtlas::create(const char *string, const char *charMapFile, unsigned int itemWidth, int unsigned itemHeight, unsigned int startCharMap)$/;"	f	class:CCLabelAtlas
create	label_nodes/CCLabelAtlas.cpp	/^CCLabelAtlas* CCLabelAtlas::create(const char *string, const char *fntFile)$/;"	f	class:CCLabelAtlas
create	label_nodes/CCLabelBMFont.cpp	/^CCBMFontConfiguration * CCBMFontConfiguration::create(const char *FNTfile)$/;"	f	class:CCBMFontConfiguration
create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::create()$/;"	f	class:CCLabelBMFont
create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::create(const char *str, const char *fntFile)$/;"	f	class:CCLabelBMFont
create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::create(const char *str, const char *fntFile, float width)$/;"	f	class:CCLabelBMFont
create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::create(const char *str, const char *fntFile, float width, CCTextAlignment alignment)$/;"	f	class:CCLabelBMFont
create	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont *CCLabelBMFont::create(const char *str, const char *fntFile, float width\/* = kCCLabelAutomaticWidth*\/, CCTextAlignment alignment\/* = kCCTextAlignmentLeft*\/, CCPoint imageOffset\/* = CCPointZero*\/)$/;"	f	class:CCLabelBMFont
create	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF * CCLabelTTF::create()$/;"	f	class:CCLabelTTF
create	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF * CCLabelTTF::create(const char *string, const char *fontName, float fontSize)$/;"	f	class:CCLabelTTF
create	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF * CCLabelTTF::create(const char *string, const char *fontName, float fontSize,$/;"	f	class:CCLabelTTF
create	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF* CCLabelTTF::create(const char *string, const char *fontName, float fontSize,$/;"	f	class:CCLabelTTF
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayer *CCLayer::create()$/;"	f	class:CCLayer
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor * CCLayerColor::create(const ccColor4B& color)$/;"	f	class:CCLayerColor
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor * CCLayerColor::create(const ccColor4B& color, GLfloat width, GLfloat height)$/;"	f	class:CCLayerColor
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor* CCLayerColor::create()$/;"	f	class:CCLayerColor
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerGradient* CCLayerGradient::create()$/;"	f	class:CCLayerGradient
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerGradient* CCLayerGradient::create(const ccColor4B& start, const ccColor4B& end)$/;"	f	class:CCLayerGradient
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerGradient* CCLayerGradient::create(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)$/;"	f	class:CCLayerGradient
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex * CCLayerMultiplex::create(CCLayer * layer, ...)$/;"	f	class:CCLayerMultiplex
create	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex* CCLayerMultiplex::create()$/;"	f	class:CCLayerMultiplex
create	layers_scenes_transitions_nodes/CCScene.cpp	/^CCScene *CCScene::create()$/;"	f	class:CCScene
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionCrossFade* CCTransitionCrossFade::create(float t, CCScene* scene)$/;"	f	class:CCTransitionCrossFade
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade * CCTransitionFade::create(float duration, CCScene *scene, const ccColor3B& color)$/;"	f	class:CCTransitionFade
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade* CCTransitionFade::create(float duration,CCScene* scene)$/;"	f	class:CCTransitionFade
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeBL* CCTransitionFadeBL::create(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeBL
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeDown* CCTransitionFadeDown::create(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeDown
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeTR* CCTransitionFadeTR::create(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeTR
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeUp* CCTransitionFadeUp::create(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeUp
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular* CCTransitionFlipAngular::create(float t, CCScene* s)$/;"	f	class:CCTransitionFlipAngular
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular* CCTransitionFlipAngular::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionFlipAngular
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX* CCTransitionFlipX::create(float t, CCScene* s)$/;"	f	class:CCTransitionFlipX
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX* CCTransitionFlipX::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionFlipX
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY* CCTransitionFlipY::create(float t, CCScene* s)$/;"	f	class:CCTransitionFlipY
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY* CCTransitionFlipY::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionFlipY
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionJumpZoom* CCTransitionJumpZoom::create(float t, CCScene* scene)$/;"	f	class:CCTransitionJumpZoom
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInB* CCTransitionMoveInB::create(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInB
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInL* CCTransitionMoveInL::create(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInL
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInR* CCTransitionMoveInR::create(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInR
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInT* CCTransitionMoveInT::create(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInT
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionRotoZoom* CCTransitionRotoZoom::create(float t, CCScene* scene)                   $/;"	f	class:CCTransitionRotoZoom
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionScene * CCTransitionScene::create(float t, CCScene *scene)$/;"	f	class:CCTransitionScene
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSceneOriented * CCTransitionSceneOriented::create(float t, CCScene *scene, tOrientation orientation)$/;"	f	class:CCTransitionSceneOriented
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionShrinkGrow* CCTransitionShrinkGrow::create(float t, CCScene* scene)$/;"	f	class:CCTransitionShrinkGrow
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInB* CCTransitionSlideInB::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInB
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInL* CCTransitionSlideInL::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInL
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInR* CCTransitionSlideInR::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInR
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInT* CCTransitionSlideInT::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInT
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitCols* CCTransitionSplitCols::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSplitCols
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitRows* CCTransitionSplitRows::create(float t, CCScene* scene)$/;"	f	class:CCTransitionSplitRows
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionTurnOffTiles* CCTransitionTurnOffTiles::create(float t, CCScene* scene)$/;"	f	class:CCTransitionTurnOffTiles
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular* CCTransitionZoomFlipAngular::create(float t, CCScene* s)$/;"	f	class:CCTransitionZoomFlipAngular
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular* CCTransitionZoomFlipAngular::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionZoomFlipAngular
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX* CCTransitionZoomFlipX::create(float t, CCScene* s)$/;"	f	class:CCTransitionZoomFlipX
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX* CCTransitionZoomFlipX::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionZoomFlipX
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY* CCTransitionZoomFlipY::create(float t, CCScene* s)$/;"	f	class:CCTransitionZoomFlipY
create	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY* CCTransitionZoomFlipY::create(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionZoomFlipY
create	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCTransitionPageTurn * CCTransitionPageTurn::create(float t, CCScene *scene, bool backwards)$/;"	f	class:CCTransitionPageTurn
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgress* CCTransitionProgress::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgress
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressHorizontal* CCTransitionProgressHorizontal::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressHorizontal
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressInOut* CCTransitionProgressInOut::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressInOut
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressOutIn* CCTransitionProgressOutIn::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressOutIn
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressRadialCCW* CCTransitionProgressRadialCCW::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressRadialCCW
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressRadialCW* CCTransitionProgressRadialCW::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressRadialCW
create	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressVertical* CCTransitionProgressVertical::create(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressVertical
create	menu_nodes/CCMenu.cpp	/^CCMenu * CCMenu::create(CCMenuItem* item, ...)$/;"	f	class:CCMenu
create	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::create()$/;"	f	class:CCMenu
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItem* CCMenuItem::create()$/;"	f	class:CCMenuItem
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItem* CCMenuItem::create(CCObject *rec, SEL_MenuHandler selector)$/;"	f	class:CCMenuItem
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemAtlasFont * CCMenuItemAtlasFont::create(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap)$/;"	f	class:CCMenuItemAtlasFont
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemAtlasFont * CCMenuItemAtlasFont::create(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemAtlasFont
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemFont * CCMenuItemFont::create(const char *value)$/;"	f	class:CCMenuItemFont
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemFont * CCMenuItemFont::create(const char *value, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemFont
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::create(const char *normalImage, const char *selectedImage)$/;"	f	class:CCMenuItemImage
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::create(const char *normalImage, const char *selectedImage, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemImage
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::create(const char *normalImage, const char *selectedImage, const char *disabledImage)$/;"	f	class:CCMenuItemImage
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::create(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemImage
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage* CCMenuItemImage::create()$/;"	f	class:CCMenuItemImage
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemLabel * CCMenuItemLabel::create(CCNode*label, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemLabel
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemLabel* CCMenuItemLabel::create(CCNode *label)$/;"	f	class:CCMenuItemLabel
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemSprite * CCMenuItemSprite::create(CCNode *normalSprite, CCNode *selectedSprite, CCNode *disabledSprite, CCObject *target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemSprite
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemSprite * CCMenuItemSprite::create(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite)$/;"	f	class:CCMenuItemSprite
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemSprite * CCMenuItemSprite::create(CCNode* normalSprite, CCNode* selectedSprite, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemSprite
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle * CCMenuItemToggle::create()$/;"	f	class:CCMenuItemToggle
create	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle* CCMenuItemToggle::create(CCMenuItem *item)$/;"	f	class:CCMenuItemToggle
create	misc_nodes/CCClippingNode.cpp	/^CCClippingNode* CCClippingNode::create()$/;"	f	class:CCClippingNode
create	misc_nodes/CCClippingNode.cpp	/^CCClippingNode* CCClippingNode::create(CCNode *pStencil)$/;"	f	class:CCClippingNode
create	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak* CCMotionStreak::create(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)$/;"	f	class:CCMotionStreak
create	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak* CCMotionStreak::create(float fade, float minSeg, float stroke, ccColor3B color, const char* path)$/;"	f	class:CCMotionStreak
create	misc_nodes/CCProgressTimer.cpp	/^CCProgressTimer* CCProgressTimer::create(CCSprite* sp)$/;"	f	class:CCProgressTimer
create	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture * CCRenderTexture::create(int w ,int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)$/;"	f	class:CCRenderTexture
create	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture * CCRenderTexture::create(int w, int h)$/;"	f	class:CCRenderTexture
create	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture * CCRenderTexture::create(int w, int h, CCTexture2DPixelFormat eFormat)$/;"	f	class:CCRenderTexture
create	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode* CCParticleBatchNode::create(const char* imageFile, unsigned int capacity\/* = kCCParticleDefaultCapacity*\/)$/;"	f	class:CCParticleBatchNode
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleExplosion* CCParticleExplosion::create()$/;"	f	class:CCParticleExplosion
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleFire* CCParticleFire::create()$/;"	f	class:CCParticleFire
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleFireworks* CCParticleFireworks::create()$/;"	f	class:CCParticleFireworks
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleFlower* CCParticleFlower::create()$/;"	f	class:CCParticleFlower
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleGalaxy* CCParticleGalaxy::create()$/;"	f	class:CCParticleGalaxy
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleMeteor * CCParticleMeteor::create()$/;"	f	class:CCParticleMeteor
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleRain* CCParticleRain::create()$/;"	f	class:CCParticleRain
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleSmoke* CCParticleSmoke::create()$/;"	f	class:CCParticleSmoke
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleSnow* CCParticleSnow::create()$/;"	f	class:CCParticleSnow
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleSpiral* CCParticleSpiral::create()$/;"	f	class:CCParticleSpiral
create	particle_nodes/CCParticleExamples.cpp	/^CCParticleSun* CCParticleSun::create()$/;"	f	class:CCParticleSun
create	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem * CCParticleSystem::create(const char *plistFile)$/;"	f	class:CCParticleSystem
create	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad * CCParticleSystemQuad::create() {$/;"	f	class:CCParticleSystemQuad
create	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad * CCParticleSystemQuad::create(const char *plistFile)$/;"	f	class:CCParticleSystemQuad
create	script_support/CCScriptSupport.cpp	/^CCSchedulerScriptHandlerEntry* CCSchedulerScriptHandlerEntry::create(int nHandler, float fInterval, bool bPaused)$/;"	f	class:CCSchedulerScriptHandlerEntry
create	script_support/CCScriptSupport.cpp	/^CCScriptHandlerEntry* CCScriptHandlerEntry::create(int nHandler)$/;"	f	class:CCScriptHandlerEntry
create	script_support/CCScriptSupport.cpp	/^CCTouchScriptHandlerEntry* CCTouchScriptHandlerEntry::create(int nHandler,$/;"	f	class:CCTouchScriptHandlerEntry
create	sprite_nodes/CCAnimation.cpp	/^CCAnimation* CCAnimation::create(CCArray* arrayOfAnimationFrameNames, float delayPerUnit, unsigned int loops)$/;"	f	class:CCAnimation
create	sprite_nodes/CCAnimation.cpp	/^CCAnimation* CCAnimation::create(void)$/;"	f	class:CCAnimation
create	sprite_nodes/CCAnimation.h	/^    static CCAnimation* create(CCArray *arrayOfAnimationFrameNames, float delayPerUnit) {$/;"	f	class:CCAnimation
create	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::create()$/;"	f	class:CCSprite
create	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::create(const char *pszFileName)$/;"	f	class:CCSprite
create	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::create(const char *pszFileName, const CCRect& rect)$/;"	f	class:CCSprite
create	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode* CCSpriteBatchNode::create(const char *fileImage, unsigned int capacity\/* = kDefaultSpriteBatchCapacity*\/)$/;"	f	class:CCSpriteBatchNode
create	sprite_nodes/CCSpriteBatchNode.h	/^    static CCSpriteBatchNode* create(const char* fileImage) {$/;"	f	class:CCSpriteBatchNode
create	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::create(const char* filename, const CCRect& rect)$/;"	f	class:CCSpriteFrame
create	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::create(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame
create	textures/CCTextureAtlas.cpp	/^CCTextureAtlas * CCTextureAtlas::create(const char* file, unsigned int capacity)$/;"	f	class:CCTextureAtlas
create	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCParallaxNode * CCParallaxNode::create()$/;"	f	class:CCParallaxNode
create	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXLayer * CCTMXLayer::create(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXLayer
create	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap * CCTMXTiledMap::create(const char *tmxFile)$/;"	f	class:CCTMXTiledMap
create	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^CCTileMapAtlas * CCTileMapAtlas::create(const char *tile, const char *mapFile, int tileWidth, int tileHeight)$/;"	f	class:CCTileMapAtlas
createAndAddTimerWithName	support/CCProfiling.cpp	/^CCProfilingTimer* CCProfiler::createAndAddTimerWithName(const char* timerName)$/;"	f	class:CCProfiler
createAutoreleasePool	platform/CCThread.cpp	/^void CCThread::createAutoreleasePool()$/;"	f	class:CCThread
createFontChars	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::createFontChars()$/;"	f	class:CCLabelBMFont
createStatsLabel	CCDirector.cpp	/^void CCDirector::createStatsLabel()$/;"	f	class:CCDirector
createWithArray	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithArray(CCArray* otherArray)$/;"	f	class:CCArray
createWithArray	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex* CCLayerMultiplex::createWithArray(CCArray* arrayOfLayers)$/;"	f	class:CCLayerMultiplex
createWithArray	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::createWithArray(CCArray* pArrayOfItems)$/;"	f	class:CCMenu
createWithCapacity	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithCapacity(unsigned int capacity)$/;"	f	class:CCArray
createWithContentsOfFile	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithContentsOfFile(const char* pFileName)$/;"	f	class:CCArray
createWithContentsOfFile	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::createWithContentsOfFile(const char *pFileName)$/;"	f	class:CCDictionary
createWithContentsOfFile	cocoa/CCString.cpp	/^CCString* CCString::createWithContentsOfFile(const char* pszFileName)$/;"	f	class:CCString
createWithContentsOfFileThreadSafe	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithContentsOfFileThreadSafe(const char* pFileName)$/;"	f	class:CCArray
createWithContentsOfFileThreadSafe	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::createWithContentsOfFileThreadSafe(const char *pFileName)$/;"	f	class:CCDictionary
createWithData	cocoa/CCString.cpp	/^CCString* CCString::createWithData(const unsigned char* pData, unsigned long nLen)$/;"	f	class:CCString
createWithDictionary	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::createWithDictionary(CCDictionary* srcDict)$/;"	f	class:CCDictionary
createWithFormat	cocoa/CCString.cpp	/^CCString* CCString::createWithFormat(const char* format, ...)$/;"	f	class:CCString
createWithItem	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::createWithItem(CCMenuItem* item)$/;"	f	class:CCMenu
createWithItems	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::createWithItems(CCMenuItem* item, va_list args)$/;"	f	class:CCMenu
createWithLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex * CCLayerMultiplex::createWithLayer(CCLayer* layer)$/;"	f	class:CCLayerMultiplex
createWithObject	cocoa/CCArray.cpp	/^CCArray* CCArray::createWithObject(CCObject* pObject)$/;"	f	class:CCArray
createWithSpriteFrame	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::createWithSpriteFrame(CCSpriteFrame *pSpriteFrame)$/;"	f	class:CCSprite
createWithSpriteFrameName	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::createWithSpriteFrameName(const char *pszSpriteFrameName)$/;"	f	class:CCSprite
createWithSpriteFrames	sprite_nodes/CCAnimation.cpp	/^CCAnimation* CCAnimation::createWithSpriteFrames(CCArray *frames, float delay\/* = 0.0f*\/)$/;"	f	class:CCAnimation
createWithTarget	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle * CCMenuItemToggle::createWithTarget(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, ...)$/;"	f	class:CCMenuItemToggle
createWithTexture	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode* CCParticleBatchNode::createWithTexture(CCTexture2D *tex, unsigned int capacity\/* = kCCParticleDefaultCapacity*\/)$/;"	f	class:CCParticleBatchNode
createWithTexture	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::createWithTexture(CCTexture2D *pTexture)$/;"	f	class:CCSprite
createWithTexture	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::createWithTexture(CCTexture2D *pTexture, const CCRect& rect)$/;"	f	class:CCSprite
createWithTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode* CCSpriteBatchNode::createWithTexture(CCTexture2D* tex, unsigned int capacity\/* = kDefaultSpriteBatchCapacity*\/)$/;"	f	class:CCSpriteBatchNode
createWithTexture	sprite_nodes/CCSpriteBatchNode.h	/^    static CCSpriteBatchNode* createWithTexture(CCTexture2D* tex) {$/;"	f	class:CCSpriteBatchNode
createWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::createWithTexture(CCTexture2D *pobTexture, const CCRect& rect)$/;"	f	class:CCSpriteFrame
createWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::createWithTexture(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame
createWithTexture	textures/CCTextureAtlas.cpp	/^CCTextureAtlas * CCTextureAtlas::createWithTexture(CCTexture2D *texture, unsigned int capacity)$/;"	f	class:CCTextureAtlas
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleExplosion* CCParticleExplosion::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleExplosion
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleFire* CCParticleFire::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFire
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleFireworks* CCParticleFireworks::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFireworks
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleFlower* CCParticleFlower::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFlower
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleGalaxy* CCParticleGalaxy::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleGalaxy
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleMeteor* CCParticleMeteor::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleMeteor
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleRain* CCParticleRain::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleRain
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleSmoke* CCParticleSmoke::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSmoke
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleSnow* CCParticleSnow::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSnow
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleSpiral* CCParticleSpiral::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSpiral
createWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^CCParticleSun* CCParticleSun::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSun
createWithTotalParticles	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem* CCParticleSystem::createWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSystem
createWithTotalParticles	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad * CCParticleSystemQuad::createWithTotalParticles(unsigned int numberOfParticles) {$/;"	f	class:CCParticleSystemQuad
createWithTwoActions	actions/CCActionInterval.cpp	/^CCSequence* CCSequence::createWithTwoActions(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)$/;"	f	class:CCSequence
createWithTwoActions	actions/CCActionInterval.cpp	/^CCSpawn* CCSpawn::createWithTwoActions(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)$/;"	f	class:CCSpawn
createWithXML	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap* CCTMXTiledMap::createWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXTiledMap
createXMLFile	support/CCUserDefault.cpp	/^bool CCUserDefault::createXMLFile()$/;"	f	class:CCUserDefault
cur_file_info	support/zip_support/unzip.cpp	/^    unz_file_info64 cur_file_info; \/* public info about the current file in zip*\/$/;"	m	struct:cocos2d::__anon38	file:
cur_file_info_internal	support/zip_support/unzip.cpp	/^    unz_file_info64_internal cur_file_info_internal; \/* private info about it*\/$/;"	m	struct:cocos2d::__anon38	file:
currentAction	actions/CCActionManager.cpp	/^    CCAction                    *currentAction;$/;"	m	struct:_hashElement	file:
currentActionSalvaged	actions/CCActionManager.cpp	/^    bool                        currentActionSalvaged;$/;"	m	struct:_hashElement	file:
currentTimer	CCScheduler.cpp	/^    CCTimer                        *currentTimer;$/;"	m	struct:_hashSelectorEntry	file:
currentTimerSalvaged	CCScheduler.cpp	/^    bool                        currentTimerSalvaged;$/;"	m	struct:_hashSelectorEntry	file:
current_file_ok	support/zip_support/unzip.cpp	/^    ZPOS64_T current_file_ok;      \/* flag about the usability of the current file*\/$/;"	m	struct:cocos2d::__anon38	file:
current_stack	kazmath/src/GL/matrix.c	/^km_mat4_stack* current_stack = NULL;$/;"	v
d	cocoa/CCAffineTransform.h	/^  float a, b, c, d;$/;"	m	struct:CCAffineTransform
d	kazmath/include/kazmath/plane.h	/^    kmScalar     a, b, c, d;$/;"	m	struct:kmPlane
data	cocoa/CCArray.h	/^    ccArray* data;$/;"	m	class:CCArray
data	platform/CCImageCommon_cpp.h	/^    unsigned char* data;$/;"	m	struct:__anon30
dataLength	textures/CCTexturePVR.cpp	/^    unsigned int dataLength;$/;"	m	struct:_PVRTexHeader	file:
defaultAlphaPixelFormat	textures/CCTexture2D.cpp	/^CCTexture2DPixelFormat CCTexture2D::defaultAlphaPixelFormat()$/;"	f	class:CCTexture2D
degreesPerSecond	particle_nodes/CCParticleSystem.h	/^        float        degreesPerSecond;$/;"	m	struct:sCCParticle::__anon23
delay	include/ccTypes.h	/^    float delay;$/;"	m	struct:__anon8
deleteBackward	text_input_node/CCIMEDelegate.h	/^    virtual void deleteBackward() {}$/;"	f	class:CCIMEDelegate
deleteBackward	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::deleteBackward()$/;"	f	class:CCTextFieldTTF
deleteHashElement	actions/CCActionManager.cpp	/^void CCActionManager::deleteHashElement(tHashElement *pElement)$/;"	f	class:CCActionManager
delta	actions/CCActionTiledGrid.cpp	/^    ccGridSize    delta;$/;"	m	struct:Tile	file:
deltaColor	particle_nodes/CCParticleSystem.h	/^    ccColor4F    deltaColor;$/;"	m	struct:sCCParticle
deltaRadius	particle_nodes/CCParticleSystem.h	/^        float        deltaRadius;$/;"	m	struct:sCCParticle::__anon23
deltaRotation	particle_nodes/CCParticleSystem.h	/^    float        deltaRotation;$/;"	m	struct:sCCParticle
deltaSize	particle_nodes/CCParticleSystem.h	/^    float        deltaSize;$/;"	m	struct:sCCParticle
depth	textures/CCTexturePVR.cpp	/^	uint32_t depth;$/;"	m	struct:__anon50	file:
description	CCCamera.cpp	/^const char* CCCamera::description(void)$/;"	f	class:CCCamera
description	actions/CCAction.cpp	/^const char* CCAction::description()$/;"	f	class:CCAction
description	base_nodes/CCNode.cpp	/^const char* CCNode::description()$/;"	f	class:CCNode
description	label_nodes/CCLabelBMFont.cpp	/^const char* CCBMFontConfiguration::description(void)$/;"	f	class:CCBMFontConfiguration
description	label_nodes/CCLabelTTF.cpp	/^const char* CCLabelTTF::description()$/;"	f	class:CCLabelTTF
description	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::description()$/;"	f	class:CCGLProgram
description	support/CCProfiling.cpp	/^const char* CCProfilingTimer::description()$/;"	f	class:CCProfilingTimer
description	textures/CCTexture2D.cpp	/^const char* CCTexture2D::description(void)$/;"	f	class:CCTexture2D
description	textures/CCTextureAtlas.cpp	/^const char* CCTextureAtlas::description()$/;"	f	class:CCTextureAtlas
description	textures/CCTextureCache.cpp	/^const char* CCTextureCache::description()$/;"	f	class:CCTextureCache
detachChild	base_nodes/CCNode.cpp	/^void CCNode::detachChild(CCNode *child, bool doCleanup)$/;"	f	class:CCNode
detachDelegateWithIME	text_input_node/CCIMEDispatcher.cpp	/^bool CCIMEDispatcher::detachDelegateWithIME(CCIMEDelegate * pDelegate)$/;"	f	class:CCIMEDispatcher
detachWithIME	text_input_node/CCIMEDispatcher.cpp	/^bool CCIMEDelegate::detachWithIME()$/;"	f	class:CCIMEDelegate
detachWithIME	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::detachWithIME()$/;"	f	class:CCTextFieldTTF
dictionary	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::dictionary()$/;"	f	class:CCDictionary
dictionaryWithContentsOfFile	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::dictionaryWithContentsOfFile(const char *pFileName)$/;"	f	class:CCDictionary
dictionaryWithContentsOfFile	platform/CCFileUtilsCommon_cpp.h	/^    CCDictionary* dictionaryWithContentsOfFile(const char *pFileName)$/;"	f	class:CCDictMaker
dictionaryWithContentsOfFileThreadSafe	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::dictionaryWithContentsOfFileThreadSafe(const char *pFileName)$/;"	f	class:CCDictionary
dictionaryWithDictionary	cocoa/CCDictionary.cpp	/^CCDictionary* CCDictionary::dictionaryWithDictionary(CCDictionary* srcDict)$/;"	f	class:CCDictionary
didAccelerate	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::didAccelerate(CCAcceleration* pAccelerationValue)$/;"	f	class:CCLayer
didAccelerate	platform/CCAccelerometerDelegate.h	/^    virtual void didAccelerate(CCAcceleration* pAccelerationValue) {CC_UNUSED_PARAM(pAccelerationValue);}$/;"	f	class:CCAccelerometerDelegate
didAttachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual void didAttachWithIME() {}$/;"	f	class:CCIMEDelegate
didDetachWithIME	text_input_node/CCIMEDelegate.h	/^    virtual void didDetachWithIME() {}$/;"	f	class:CCIMEDelegate
dir	kazmath/include/kazmath/ray2.h	/^    kmVec2 dir;$/;"	m	struct:kmRay2
dir	particle_nodes/CCParticleSystem.h	/^        CCPoint        dir;$/;"	m	struct:sCCParticle::__anon22
disableParticle	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::disableParticle(unsigned int particleIndex)$/;"	f	class:CCParticleBatchNode
disk_num_start	support/zip_support/unzip.h	/^    uLong disk_num_start;       \/* disk number start               2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
disk_num_start	support/zip_support/unzip.h	/^    uLong disk_num_start;       \/* disk number start               2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
dispatchDeleteBackward	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchDeleteBackward()$/;"	f	class:CCIMEDispatcher
dispatchInsertText	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchInsertText(const char * pText, int nLen)$/;"	f	class:CCIMEDispatcher
dispatchKeyboardDidHide	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchKeyboardDidHide(CCIMEKeyboardNotificationInfo& info)$/;"	f	class:CCIMEDispatcher
dispatchKeyboardDidShow	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchKeyboardDidShow(CCIMEKeyboardNotificationInfo& info)$/;"	f	class:CCIMEDispatcher
dispatchKeyboardWillHide	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchKeyboardWillHide(CCIMEKeyboardNotificationInfo& info)$/;"	f	class:CCIMEDispatcher
dispatchKeyboardWillShow	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::dispatchKeyboardWillShow(CCIMEKeyboardNotificationInfo& info)$/;"	f	class:CCIMEDispatcher
dispatchKeypadMSG	keypad_dispatcher/CCKeypadDispatcher.cpp	/^bool CCKeypadDispatcher::dispatchKeypadMSG(ccKeypadMSGType nMsgType)$/;"	f	class:CCKeypadDispatcher
displayFrame	sprite_nodes/CCSprite.cpp	/^CCSpriteFrame* CCSprite::displayFrame(void)$/;"	f	class:CCSprite
displayTimers	support/CCProfiling.cpp	/^void CCProfiler::displayTimers()$/;"	f	class:CCProfiler
dosDate	support/zip_support/unzip.h	/^    uLong dosDate;              \/* last mod file date in Dos fmt   4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
dosDate	support/zip_support/unzip.h	/^    uLong dosDate;              \/* last mod file date in Dos fmt   4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
doubleValue	cocoa/CCString.cpp	/^double CCString::doubleValue() const$/;"	f	class:CCString
draw	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::draw(void)$/;"	f	class:CCAtlasNode
draw	base_nodes/CCNode.cpp	/^ void CCNode::draw()$/;"	f	class:CCNode
draw	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::draw()$/;"	f	class:CCDrawNode
draw	label_nodes/CCLabelAtlas.cpp	/^void CCLabelAtlas::draw()$/;"	f	class:CCLabelAtlas
draw	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::draw()$/;"	f	class:CCLabelBMFont
draw	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::draw()$/;"	f	class:CCLayerColor
draw	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionCrossFade:: draw()$/;"	f	class:CCTransitionCrossFade
draw	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::draw()$/;"	f	class:CCTransitionScene
draw	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::draw()$/;"	f	class:CCMotionStreak
draw	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::draw(void)$/;"	f	class:CCProgressTimer
draw	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::draw()$/;"	f	class:CCRenderTexture
draw	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::draw(void)$/;"	f	class:CCParticleBatchNode
draw	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::draw()$/;"	f	class:CCParticleSystemQuad
draw	sprite_nodes/CCSprite.cpp	/^void CCSprite::draw(void)$/;"	f	class:CCSprite
draw	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::draw(void)$/;"	f	class:CCSpriteBatchNode
draw	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::draw()$/;"	f	class:CCTextFieldTTF
drawAtPoint	textures/CCTexture2D.cpp	/^void CCTexture2D::drawAtPoint(const CCPoint& point)$/;"	f	class:CCTexture2D
drawDot	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::drawDot(const CCPoint &pos, float radius, const ccColor4F &color)$/;"	f	class:CCDrawNode
drawInRect	textures/CCTexture2D.cpp	/^void CCTexture2D::drawInRect(const CCRect& rect)$/;"	f	class:CCTexture2D
drawNumberOfQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::drawNumberOfQuads(unsigned int n)$/;"	f	class:CCTextureAtlas
drawNumberOfQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::drawNumberOfQuads(unsigned int n, unsigned int start)$/;"	f	class:CCTextureAtlas
drawPolygon	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::drawPolygon(CCPoint *verts, unsigned int count, const ccColor4F &fillColor, float borderWidth, const ccColor4F &borderColor)$/;"	f	class:CCDrawNode
drawQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::drawQuads()$/;"	f	class:CCTextureAtlas
drawScene	CCDirector.cpp	/^void CCDirector::drawScene(void)$/;"	f	class:CCDirector
drawSegment	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::drawSegment(const CCPoint &from, const CCPoint &to, float radius, const ccColor4F &color)$/;"	f	class:CCDrawNode
dst	include/ccTypes.h	/^    GLenum dst;$/;"	m	struct:_ccBlendFunc
dumpCachedTextureInfo	textures/CCTextureCache.cpp	/^void CCTextureCache::dumpCachedTextureInfo()$/;"	f	class:CCTextureCache
duration	text_input_node/CCIMEDelegate.h	/^    float     duration;           \/\/ the soft keyboard animation duration$/;"	m	struct:__anon40
eImageFormat	misc_nodes/CCRenderTexture.h	/^typedef enum eImageFormat$/;"	g
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionFadeTR:: easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionFadeTR
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionMoveInL::easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionMoveInL
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionShrinkGrow:: easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionShrinkGrow
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSlideInL::easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionSlideInL
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionSplitCols::easeActionWithAction(CCActionInterval * action)$/;"	f	class:CCTransitionSplitCols
easeActionWithAction	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCActionInterval* CCTransitionTurnOffTiles:: easeActionWithAction(CCActionInterval* action)$/;"	f	class:CCTransitionTurnOffTiles
encrypted	support/zip_support/unzip.cpp	/^    int encrypted;$/;"	m	struct:cocos2d::__anon38	file:
end	CCDirector.cpp	/^void CCDirector::end()$/;"	f	class:CCDirector
end	cocoa/CCSet.cpp	/^CCSetIterator CCSet::end(void)$/;"	f	class:CCSet
end	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::end()$/;"	f	class:CCRenderTexture
end	text_input_node/CCIMEDelegate.h	/^    CCRect  end;                \/\/ the soft keyboard rectangle when animation ends$/;"	m	struct:__anon40
endElement	platform/CCFileUtilsCommon_cpp.h	/^    void endElement(void *ctx, const char *name)$/;"	f	class:CCDictMaker
endElement	platform/CCSAXParser.cpp	/^void CCSAXParser::endElement(void *ctx, const CC_XML_CHAR *name)$/;"	f	class:CCSAXParser
endElement	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::endElement(void *ctx, const char *name)$/;"	f	class:CCTMXMapInfo
endPosition	actions/CCActionInterval.h	/^    CCPoint endPosition;$/;"	m	struct:_ccBezierConfig
endRadius	particle_nodes/CCParticleSystem.h	/^        float endRadius;$/;"	m	struct:CCParticleSystem::__anon25
endRadiusVar	particle_nodes/CCParticleSystem.h	/^        float endRadiusVar;            $/;"	m	struct:CCParticleSystem::__anon25
endToLua	misc_nodes/CCRenderTexture.h	/^    inline void endToLua(){ end();};$/;"	f	class:CCRenderTexture
ensureCapacity	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::ensureCapacity(unsigned int count)$/;"	f	class:CCDrawNode
entry	CCScheduler.cpp	/^    tListEntry            *entry;        \/\/ entry in the list$/;"	m	struct:_hashUpdateEntry	file:
equals	cocoa/CCGeometry.cpp	/^bool CCPoint::equals(const CCPoint& target) const$/;"	f	class:CCPoint
equals	cocoa/CCGeometry.cpp	/^bool CCRect::equals(const CCRect& rect) const$/;"	f	class:CCRect
equals	cocoa/CCGeometry.cpp	/^bool CCSize::equals(const CCSize& target) const$/;"	f	class:CCSize
event_selector	cocoa/CCObject.h	93;"	d
exchangeObject	cocoa/CCArray.cpp	/^void CCArray::exchangeObject(CCObject* object1, CCObject* object2)$/;"	f	class:CCArray
exchangeObjectAtIndex	cocoa/CCArray.cpp	/^void CCArray::exchangeObjectAtIndex(unsigned int index1, unsigned int index2)$/;"	f	class:CCArray
excuteScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^int CCLayer::excuteScriptTouchHandler(int nEventType, CCSet *pTouches)$/;"	f	class:CCLayer
excuteScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^int CCLayer::excuteScriptTouchHandler(int nEventType, CCTouch *pTouch)$/;"	f	class:CCLayer
execute	actions/CCActionInstant.cpp	/^void CCCallFunc::execute() {$/;"	f	class:CCCallFunc
execute	actions/CCActionInstant.cpp	/^void CCCallFuncN::execute() {$/;"	f	class:CCCallFuncN
execute	actions/CCActionInstant.cpp	/^void CCCallFuncND::execute() {$/;"	f	class:CCCallFuncND
execute	actions/CCActionInstant.cpp	/^void CCCallFuncO::execute() {$/;"	f	class:CCCallFuncO
expand_mult	support/data_support/uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket
external_fa	support/zip_support/unzip.h	/^    uLong external_fa;          \/* external file attributes        4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
external_fa	support/zip_support/unzip.h	/^    uLong external_fa;          \/* external file attributes        4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
fastRemoveObject	cocoa/CCArray.cpp	/^void CCArray::fastRemoveObject(CCObject* object)$/;"	f	class:CCArray
fastRemoveObjectAtIndex	cocoa/CCArray.cpp	/^void CCArray::fastRemoveObjectAtIndex(unsigned int index)$/;"	f	class:CCArray
fclose_file_func	support/zip_support/ioapi.cpp	/^static int ZCALLBACK fclose_file_func (voidpf opaque, voidpf stream)$/;"	f	namespace:cocos2d
ferror_file_func	support/zip_support/ioapi.cpp	/^static int ZCALLBACK ferror_file_func (voidpf opaque, voidpf stream)$/;"	f	namespace:cocos2d
fileExists	support/zip_support/ZipUtils.cpp	/^bool ZipFile::fileExists(const std::string &fileName) const$/;"	f	class:ZipFile
fileList	support/zip_support/ZipUtils.cpp	/^    FileListContainer fileList;$/;"	m	class:ZipFilePrivate	file:
file_in_zip64_read_info_s	support/zip_support/unzip.cpp	/^} file_in_zip64_read_info_s;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::__anon37	file:
filename	textures/CCTextureCache.cpp	/^    std::string            filename;$/;"	m	struct:_AsyncStruct	file:
filestream	support/zip_support/unzip.cpp	/^    voidpf filestream;        \/* io structure of the zipfile *\/$/;"	m	struct:cocos2d::__anon37	file:
filestream	support/zip_support/unzip.cpp	/^    voidpf filestream;        \/* io structure of the zipfile *\/$/;"	m	struct:cocos2d::__anon38	file:
fillWithEmptyQuadsFromIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::fillWithEmptyQuadsFromIndex(unsigned int index, unsigned int amount)$/;"	f	class:CCTextureAtlas
fill_fopen64_filefunc	support/zip_support/ioapi.cpp	/^void fill_fopen64_filefunc (zlib_filefunc64_def*  pzlib_filefunc_def)$/;"	f	namespace:cocos2d
fill_fopen_filefunc	support/zip_support/ioapi.cpp	/^void fill_fopen_filefunc (zlib_filefunc_def* pzlib_filefunc_def)$/;"	f	namespace:cocos2d
fill_zlib_filefunc64_32_def_from_filefunc32	support/zip_support/ioapi.cpp	/^void fill_zlib_filefunc64_32_def_from_filefunc32(zlib_filefunc64_32_def* p_filefunc64_32,const zlib_filefunc_def* p_filefunc32)$/;"	f	namespace:cocos2d
finalize	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::finalize()$/;"	f	class:CCPoolManager
findDelegate	text_input_node/CCIMEDispatcher.cpp	/^    DelegateIter findDelegate(CCIMEDelegate* pDelegate)$/;"	f	class:CCIMEDispatcher::Impl
findHandler	touch_dispatcher/CCTouchDispatcher.cpp	/^CCTouchHandler* CCTouchDispatcher::findHandler(CCArray* pArray, CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher
findHandler	touch_dispatcher/CCTouchDispatcher.cpp	/^CCTouchHandler* CCTouchDispatcher::findHandler(CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher
findVolotileTexture	textures/CCTextureCache.cpp	/^VolatileTexture* VolatileTexture::findVolotileTexture(CCTexture2D *tt)$/;"	f	class:VolatileTexture
finish	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::finish()$/;"	f	class:CCTransitionScene
flag	support/zip_support/unzip.h	/^    uLong flag;                 \/* general purpose bit flag        2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
flag	support/zip_support/unzip.h	/^    uLong flag;                 \/* general purpose bit flag        2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
flags	textures/CCTexturePVR.cpp	/^	uint32_t flags;$/;"	m	struct:__anon50	file:
flags	textures/CCTexturePVR.cpp	/^    unsigned int flags;$/;"	m	struct:_PVRTexHeader	file:
flipped	support/image_support/TGAlib.h	/^    int flipped;$/;"	m	struct:cocos2d::sImageTGA
floatValue	cocoa/CCString.cpp	/^float CCString::floatValue() const$/;"	f	class:CCString
flush	support/CCUserDefault.cpp	/^void CCUserDefault::flush()$/;"	f	class:CCUserDefault
fontDef	label_nodes/CCLabelBMFont.h	/^	ccBMFontDef		fontDef;	\/\/ font definition$/;"	m	struct:_FontDefHashElement
fontName	menu_nodes/CCMenuItem.cpp	/^const char * CCMenuItemFont::fontName()$/;"	f	class:CCMenuItemFont
fontNameObj	menu_nodes/CCMenuItem.cpp	/^const char* CCMenuItemFont::fontNameObj()$/;"	f	class:CCMenuItemFont
fontSize	menu_nodes/CCMenuItem.cpp	/^unsigned int CCMenuItemFont::fontSize()$/;"	f	class:CCMenuItemFont
fontSizeObj	menu_nodes/CCMenuItem.cpp	/^unsigned int CCMenuItemFont::fontSizeObj()$/;"	f	class:CCMenuItemFont
fopen64	support/zip_support/ioapi.h	52;"	d
fopen64_file_func	support/zip_support/ioapi.cpp	/^static voidpf ZCALLBACK fopen64_file_func (voidpf opaque, const void* filename, int mode)$/;"	f	namespace:cocos2d
fopen_file_func	support/zip_support/ioapi.cpp	/^static voidpf ZCALLBACK fopen_file_func (voidpf opaque, const char* filename, int mode)$/;"	f	namespace:cocos2d
forceAddDelegate	keypad_dispatcher/CCKeypadDispatcher.cpp	/^void CCKeypadDispatcher::forceAddDelegate(CCKeypadDelegate* pDelegate)$/;"	f	class:CCKeypadDispatcher
forceAddHandler	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::forceAddHandler(CCTouchHandler *pHandler, CCArray *pArray)$/;"	f	class:CCTouchDispatcher
forceRemoveAllDelegates	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::forceRemoveAllDelegates(void)$/;"	f	class:CCTouchDispatcher
forceRemoveDelegate	keypad_dispatcher/CCKeypadDispatcher.cpp	/^void CCKeypadDispatcher::forceRemoveDelegate(CCKeypadDelegate* pDelegate)$/;"	f	class:CCKeypadDispatcher
forceRemoveDelegate	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::forceRemoveDelegate(CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher
format	textures/CCTexturePVR.h	/^	GLenum format;$/;"	m	struct:_ccPVRTexturePixelFormatInfo
formatWithTMXFile	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXMapInfo * CCTMXMapInfo::formatWithTMXFile(const char *tmxFile)$/;"	f	class:CCTMXMapInfo
formatWithXML	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXMapInfo * CCTMXMapInfo::formatWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXMapInfo
fragmentShaderLog	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::fragmentShaderLog()$/;"	f	class:CCGLProgram
frameWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::frameWithTexture(CCTexture2D *pobTexture, const CCRect& rect)$/;"	f	class:CCSpriteFrame
frameWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::frameWithTexture(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame
frameWithTextureFilename	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::frameWithTextureFilename(const char* filename, const CCRect& rect)$/;"	f	class:CCSpriteFrame
frameWithTextureFilename	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame* CCSpriteFrame::frameWithTextureFilename(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame
fread_file_func	support/zip_support/ioapi.cpp	/^static uLong ZCALLBACK fread_file_func (voidpf opaque, voidpf stream, void* buf, uLong size)$/;"	f	namespace:cocos2d
fseek64_file_func	support/zip_support/ioapi.cpp	/^static long ZCALLBACK fseek64_file_func (voidpf  opaque, voidpf stream, ZPOS64_T offset, int origin)$/;"	f	namespace:cocos2d
fseek_file_func	support/zip_support/ioapi.cpp	/^static long ZCALLBACK fseek_file_func (voidpf  opaque, voidpf stream, uLong offset, int origin)$/;"	f	namespace:cocos2d
fseeko64	support/zip_support/ioapi.h	54;"	d
ftell64_file_func	support/zip_support/ioapi.cpp	/^static ZPOS64_T ZCALLBACK ftell64_file_func (voidpf opaque, voidpf stream)$/;"	f	namespace:cocos2d
ftell_file_func	support/zip_support/ioapi.cpp	/^static long ZCALLBACK ftell_file_func (voidpf opaque, voidpf stream)$/;"	f	namespace:cocos2d
ftello64	support/zip_support/ioapi.h	53;"	d
fwrite_file_func	support/zip_support/ioapi.cpp	/^static uLong ZCALLBACK fwrite_file_func (voidpf opaque, voidpf stream, const void* buf, uLong size)$/;"	f	namespace:cocos2d
g	include/ccTypes.h	/^    GLfloat g;$/;"	m	struct:_ccColor4F
g	include/ccTypes.h	/^    GLubyte    g;$/;"	m	struct:_ccColor3B
g	include/ccTypes.h	/^    GLubyte g;$/;"	m	struct:_ccColor4B
gPVRTexIdentifier	textures/CCTexturePVR.cpp	/^static char gPVRTexIdentifier[5] = "PVR!";$/;"	v	file:
g_defaultAlphaPixelFormat	textures/CCTexture2D.cpp	/^static CCTexture2DPixelFormat g_defaultAlphaPixelFormat = kCCTexture2DPixelFormat_Default;$/;"	v	file:
g_sSharedProfiler	support/CCProfiling.cpp	/^static CCProfiler* g_sSharedProfiler = NULL;$/;"	v	file:
g_sStencilBits	misc_nodes/CCClippingNode.cpp	/^static GLint g_sStencilBits = -1;$/;"	v	file:
g_sharedDoc	support/CCUserDefault.cpp	/^static xmlDocPtr g_sharedDoc = NULL;$/;"	v	file:
g_sharedTextureCache	textures/CCTextureCache.cpp	/^static CCTextureCache *g_sharedTextureCache = NULL;$/;"	v	file:
g_uNumberOfDraws	CCDirector.cpp	/^unsigned int g_uNumberOfDraws = 0;$/;"	v
g_utf8_skip	label_nodes/CCLabelBMFont.cpp	/^static const char *const g_utf8_skip = utf8_skip_data;$/;"	v	file:
gaussj	kazmath/src/mat4.c	/^int gaussj(kmMat4 *a, kmMat4 *b)$/;"	f
generateMipmap	textures/CCTexture2D.cpp	/^void CCTexture2D::generateMipmap()$/;"	f	class:CCTexture2D
get	kazmath/src/mat4.c	/^float get(const kmMat4 * pIn, int row, int col)$/;"	f
get16bits	support/data_support/uthash.h	442;"	d
get16bits	support/data_support/uthash.h	445;"	d
get16bits	support/data_support/uthash.h	449;"	d
getAccelerometer	CCDirector.cpp	/^CCAccelerometer* CCDirector::getAccelerometer()$/;"	f	class:CCDirector
getActionByTag	actions/CCActionManager.cpp	/^CCAction* CCActionManager::getActionByTag(unsigned int tag, CCObject *pTarget)$/;"	f	class:CCActionManager
getActionByTag	base_nodes/CCNode.cpp	/^CCAction * CCNode::getActionByTag(int tag)$/;"	f	class:CCNode
getActionManager	CCDirector.cpp	/^CCActionManager* CCDirector::getActionManager()$/;"	f	class:CCDirector
getActionManager	base_nodes/CCNode.cpp	/^CCActionManager* CCNode::getActionManager()$/;"	f	class:CCNode
getAlphaThreshold	misc_nodes/CCClippingNode.cpp	/^GLfloat CCClippingNode::getAlphaThreshold() const$/;"	f	class:CCClippingNode
getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCLiquid
getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCRipple3D
getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCTwirl
getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCWaves
getAmplitude	actions/CCActionGrid3D.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCWaves3D
getAmplitude	actions/CCActionTiledGrid.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCJumpTiles3D
getAmplitude	actions/CCActionTiledGrid.h	/^    inline float getAmplitude(void) { return m_fAmplitude; }$/;"	f	class:CCWavesTiles3D
getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCLiquid
getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCRipple3D
getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCTwirl
getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCWaves
getAmplitudeRate	actions/CCActionGrid3D.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCWaves3D
getAmplitudeRate	actions/CCActionInterval.cpp	/^float CCActionInterval::getAmplitudeRate(void)$/;"	f	class:CCActionInterval
getAmplitudeRate	actions/CCActionTiledGrid.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCJumpTiles3D
getAmplitudeRate	actions/CCActionTiledGrid.h	/^    inline float getAmplitudeRate(void) { return m_fAmplitudeRate; }$/;"	f	class:CCWavesTiles3D
getAnchorPoint	base_nodes/CCNode.cpp	/^CCPoint CCNode::getAnchorPoint()$/;"	f	class:CCNode
getAnchorPointInPoints	base_nodes/CCNode.cpp	/^CCPoint CCNode::getAnchorPointInPoints()$/;"	f	class:CCNode
getAngle	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getAngle()$/;"	f	class:CCParticleSystem
getAngleVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getAngleVar()$/;"	f	class:CCParticleSystem
getAnimationInterval	CCDirector.h	/^    inline double getAnimationInterval(void) { return m_dAnimationInterval; }$/;"	f	class:CCDirector
getAtlasIndex	sprite_nodes/CCSprite.h	/^    inline unsigned int getAtlasIndex(void) { return m_uAtlasIndex; }$/;"	f	class:CCSprite
getAtlasName	label_nodes/CCLabelBMFont.h	/^    inline const char* getAtlasName(){ return m_sAtlasName.c_str(); }$/;"	f	class:CCBMFontConfiguration
getAverageTime	support/CCProfiling.h	/^    inline double getAverageTime(void) { return m_dAverageTime; }$/;"	f	class:CCProfilingTimer
getBatchNode	particle_nodes/CCParticleSystem.cpp	/^CCParticleBatchNode* CCParticleSystem::getBatchNode(void)$/;"	f	class:CCParticleSystem
getBatchNode	sprite_nodes/CCSprite.cpp	/^CCSpriteBatchNode* CCSprite::getBatchNode(void)$/;"	f	class:CCSprite
getBlendFunc	base_nodes/CCAtlasNode.cpp	/^ccBlendFunc CCAtlasNode::getBlendFunc()$/;"	f	class:CCAtlasNode
getBlendFunc	draw_nodes/CCDrawNode.cpp	/^ccBlendFunc CCDrawNode::getBlendFunc() const$/;"	f	class:CCDrawNode
getBlendFunc	layers_scenes_transitions_nodes/CCLayer.cpp	/^ccBlendFunc CCLayerColor::getBlendFunc()$/;"	f	class:CCLayerColor
getBlendFunc	misc_nodes/CCMotionStreak.cpp	/^ccBlendFunc CCMotionStreak::getBlendFunc(void)$/;"	f	class:CCMotionStreak
getBlendFunc	particle_nodes/CCParticleBatchNode.cpp	/^ccBlendFunc CCParticleBatchNode::getBlendFunc(void)$/;"	f	class:CCParticleBatchNode
getBlendFunc	particle_nodes/CCParticleSystem.cpp	/^ccBlendFunc CCParticleSystem::getBlendFunc()$/;"	f	class:CCParticleSystem
getBlendFunc	sprite_nodes/CCSprite.h	/^    inline ccBlendFunc getBlendFunc(void) { return m_sBlendFunc; }$/;"	f	class:CCSprite
getBlendFunc	sprite_nodes/CCSpriteBatchNode.cpp	/^ccBlendFunc CCSpriteBatchNode::getBlendFunc(void)$/;"	f	class:CCSpriteBatchNode
getBoolForKey	support/CCUserDefault.cpp	/^ bool CCUserDefault::getBoolForKey(const char* pKey)$/;"	f	class:CCUserDefault
getBoolForKey	support/CCUserDefault.cpp	/^bool CCUserDefault::getBoolForKey(const char* pKey, bool defaultValue)$/;"	f	class:CCUserDefault
getCString	cocoa/CCString.cpp	/^const char* CCString::getCString() const$/;"	f	class:CCString
getCamera	base_nodes/CCNode.cpp	/^CCCamera* CCNode::getCamera()$/;"	f	class:CCNode
getCapacity	textures/CCTextureAtlas.cpp	/^unsigned int CCTextureAtlas::getCapacity()$/;"	f	class:CCTextureAtlas
getCenterXYZ	CCCamera.cpp	/^void CCCamera::getCenterXYZ(float *pCenterX, float *pCenterY, float *pCenterZ)$/;"	f	class:CCCamera
getCharacterSet	label_nodes/CCLabelBMFont.cpp	/^std::set<unsigned int>* CCBMFontConfiguration::getCharacterSet() const$/;"	f	class:CCBMFontConfiguration
getChildByTag	base_nodes/CCNode.cpp	/^CCNode* CCNode::getChildByTag(int aTag)$/;"	f	class:CCNode
getChildren	base_nodes/CCNode.cpp	/^CCArray* CCNode::getChildren()$/;"	f	class:CCNode
getChildrenCount	base_nodes/CCNode.cpp	/^unsigned int CCNode::getChildrenCount(void)$/;"	f	class:CCNode
getClaimedTouches	touch_dispatcher/CCTouchHandler.cpp	/^CCSet* CCTargetedTouchHandler::getClaimedTouches(void)$/;"	f	class:CCTargetedTouchHandler
getClassTypeInfo	CCDirector.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCDirector
getClassTypeInfo	actions/CCActionInstant.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCCallFuncN
getClassTypeInfo	actions/CCActionInstant.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCCallFuncND
getClassTypeInfo	actions/CCActionInstant.h	/^    virtual long getClassTypeInfo() {$/;"	f	class:CCCallFuncO
getClearColor	misc_nodes/CCRenderTexture.cpp	/^const ccColor4F& CCRenderTexture::getClearColor() const$/;"	f	class:CCRenderTexture
getClearDepth	misc_nodes/CCRenderTexture.cpp	/^float CCRenderTexture::getClearDepth() const$/;"	f	class:CCRenderTexture
getClearFlags	misc_nodes/CCRenderTexture.cpp	/^unsigned int CCRenderTexture::getClearFlags() const$/;"	f	class:CCRenderTexture
getClearStencil	misc_nodes/CCRenderTexture.cpp	/^int CCRenderTexture::getClearStencil() const$/;"	f	class:CCRenderTexture
getColor	base_nodes/CCAtlasNode.cpp	/^ccColor3B CCAtlasNode:: getColor()$/;"	f	class:CCAtlasNode
getColor	label_nodes/CCLabelBMFont.cpp	/^ccColor3B CCLabelBMFont::getColor()$/;"	f	class:CCLabelBMFont
getColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^ccColor3B CCLayerColor::getColor()$/;"	f	class:CCLayerColor
getColor	menu_nodes/CCMenu.cpp	/^ccColor3B CCMenu::getColor(void)$/;"	f	class:CCMenu
getColor	menu_nodes/CCMenuItem.cpp	/^ccColor3B CCMenuItemLabel::getColor()$/;"	f	class:CCMenuItemLabel
getColor	menu_nodes/CCMenuItem.cpp	/^ccColor3B CCMenuItemSprite::getColor()$/;"	f	class:CCMenuItemSprite
getColor	menu_nodes/CCMenuItem.cpp	/^ccColor3B CCMenuItemToggle::getColor()$/;"	f	class:CCMenuItemToggle
getColor	misc_nodes/CCMotionStreak.cpp	/^ccColor3B CCMotionStreak::getColor(void)$/;"	f	class:CCMotionStreak
getColor	misc_nodes/CCProgressTimer.cpp	/^ccColor3B CCProgressTimer::getColor(void)$/;"	f	class:CCProgressTimer
getColor	sprite_nodes/CCSprite.cpp	/^ccColor3B CCSprite::getColor(void)$/;"	f	class:CCSprite
getColorSpaceHolder	text_input_node/CCTextFieldTTF.cpp	/^ccColor3B CCTextFieldTTF::getColorSpaceHolder()$/;"	f	class:CCTextFieldTTF
getContentScaleFactor	CCDirector.cpp	/^float CCDirector::getContentScaleFactor(void)$/;"	f	class:CCDirector
getContentSize	base_nodes/CCNode.cpp	/^CCSize CCNode::getContentSize()$/;"	f	class:CCNode
getContentSize	textures/CCTexture2D.cpp	/^CCSize CCTexture2D::getContentSize()$/;"	f	class:CCTexture2D
getContentSizeInPixels	textures/CCTexture2D.cpp	/^const CCSize& CCTexture2D::getContentSizeInPixels()$/;"	f	class:CCTexture2D
getContentText	text_input_node/CCIMEDelegate.h	/^    virtual const char * getContentText() { return 0; }$/;"	f	class:CCIMEDelegate
getContentText	text_input_node/CCIMEDispatcher.cpp	/^const char * CCIMEDispatcher::getContentText()$/;"	f	class:CCIMEDispatcher
getContentText	text_input_node/CCTextFieldTTF.cpp	/^const char * CCTextFieldTTF::getContentText()$/;"	f	class:CCTextFieldTTF
getControlPointAtIndex	actions/CCActionCatmullRom.cpp	/^CCPoint CCPointArray::getControlPointAtIndex(unsigned int index)$/;"	f	class:CCPointArray
getControlPoints	actions/CCActionCatmullRom.h	/^    inline CCArray* getControlPoints(){ return m_pControlPoints; }$/;"	f	class:CCPointArray
getCurReleasePool	cocoa/CCAutoreleasePool.cpp	/^CCAutoreleasePool* CCPoolManager::getCurReleasePool()$/;"	f	class:CCPoolManager
getCurrentIndex	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::getCurrentIndex(unsigned int* oldIndex, unsigned int* newIndex, CCNode* child, int z)$/;"	f	class:CCParticleBatchNode
getCurrentString	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    inline const char* getCurrentString(){ return m_sCurrentString.c_str(); }$/;"	f	class:CCTMXMapInfo
getData	platform/CCImage.h	/^    unsigned char *   getData()               { return m_pData; }$/;"	f	class:CCImage
getDataLen	platform/CCImage.h	/^    int         getDataLen()            { return m_nWidth * m_nHeight; }$/;"	f	class:CCImage
getDefaultTexture	particle_nodes/CCParticleExamples.cpp	/^static CCTexture2D* getDefaultTexture()$/;"	f	file:
getDelegate	CCDirector.cpp	/^CCDirectorDelegate* CCDirector::getDelegate() const$/;"	f	class:CCDirector
getDelegate	keypad_dispatcher/CCKeypadDelegate.cpp	/^CCKeypadDelegate* CCKeypadHandler::getDelegate()$/;"	f	class:CCKeypadHandler
getDelegate	touch_dispatcher/CCTouchHandler.cpp	/^CCTouchDelegate* CCTouchHandler::getDelegate(void)$/;"	f	class:CCTouchHandler
getDelta	actions/CCActionTiledGrid.cpp	/^ccGridSize CCShuffleTiles::getDelta(const ccGridSize& pos)$/;"	f	class:CCShuffleTiles
getDelta	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getDelta() const$/;"	f	class:CCTouch
getDescendants	sprite_nodes/CCSpriteBatchNode.h	/^    inline CCArray* getDescendants(void) { return m_pobDescendants; }$/;"	f	class:CCSpriteBatchNode
getDesignResolutionSize	platform/CCEGLViewProtocol.cpp	/^const CCSize& CCEGLViewProtocol::getDesignResolutionSize() const $/;"	f	class:CCEGLViewProtocol
getDimensions	label_nodes/CCLabelTTF.cpp	/^CCSize CCLabelTTF::getDimensions()$/;"	f	class:CCLabelTTF
getDisabledColor	menu_nodes/CCMenuItem.cpp	/^ccColor3B CCMenuItemLabel::getDisabledColor()$/;"	f	class:CCMenuItemLabel
getDisabledImage	menu_nodes/CCMenuItem.cpp	/^CCNode * CCMenuItemSprite::getDisabledImage()$/;"	f	class:CCMenuItemSprite
getDoubleForKey	support/CCUserDefault.cpp	/^double  CCUserDefault::getDoubleForKey(const char* pKey)$/;"	f	class:CCUserDefault
getDoubleForKey	support/CCUserDefault.cpp	/^double CCUserDefault::getDoubleForKey(const char* pKey, double defaultValue)$/;"	f	class:CCUserDefault
getDuration	actions/CCAction.h	/^    inline float getDuration(void) { return m_fDuration; }$/;"	f	class:CCFiniteTimeAction
getDuration	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getDuration()$/;"	f	class:CCParticleSystem
getDuration	sprite_nodes/CCAnimation.cpp	/^float CCAnimation::getDuration(void)$/;"	f	class:CCAnimation
getElapsed	actions/CCActionInterval.h	/^    inline float getElapsed(void) { return m_elapsed; }$/;"	f	class:CCActionInterval
getEmissionRate	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEmissionRate()$/;"	f	class:CCParticleSystem
getEmitterMode	particle_nodes/CCParticleSystem.cpp	/^int CCParticleSystem::getEmitterMode()$/;"	f	class:CCParticleSystem
getEnabledSelectors	touch_dispatcher/CCTouchHandler.cpp	/^int CCTouchHandler::getEnabledSelectors(void)$/;"	f	class:CCTouchHandler
getEndColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^ccColor3B CCLayerGradient::getEndColor()$/;"	f	class:CCLayerGradient
getEndColor	particle_nodes/CCParticleSystem.cpp	/^ccColor4F CCParticleSystem::getEndColor()$/;"	f	class:CCParticleSystem
getEndColorVar	particle_nodes/CCParticleSystem.cpp	/^ccColor4F CCParticleSystem::getEndColorVar()$/;"	f	class:CCParticleSystem
getEndOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^GLubyte CCLayerGradient::getEndOpacity()$/;"	f	class:CCLayerGradient
getEndRadius	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndRadius()$/;"	f	class:CCParticleSystem
getEndRadiusVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndRadiusVar()$/;"	f	class:CCParticleSystem
getEndSize	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndSize()$/;"	f	class:CCParticleSystem
getEndSizeVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndSizeVar()$/;"	f	class:CCParticleSystem
getEndSpin	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndSpin()$/;"	f	class:CCParticleSystem
getEndSpinVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getEndSpinVar()$/;"	f	class:CCParticleSystem
getEntryId	script_support/CCScriptSupport.h	/^    int getEntryId(void) {$/;"	f	class:CCScriptHandlerEntry
getEyeXYZ	CCCamera.cpp	/^void CCCamera::getEyeXYZ(float *pEyeX, float *pEyeY, float *pEyeZ)$/;"	f	class:CCCamera
getFileData	support/zip_support/ZipUtils.cpp	/^unsigned char *ZipFile::getFileData(const std::string &fileName, unsigned long *pSize)$/;"	f	class:ZipFile
getFileDataFromZip	platform/CCFileUtilsCommon_cpp.h	/^unsigned char* CCFileUtils::getFileDataFromZip(const char* pszZipFilePath, const char* pszFileName, unsigned long * pSize)$/;"	f	class:CCFileUtils
getFloatForKey	support/CCUserDefault.cpp	/^float CCUserDefault::getFloatForKey(const char* pKey)$/;"	f	class:CCUserDefault
getFloatForKey	support/CCUserDefault.cpp	/^float CCUserDefault::getFloatForKey(const char* pKey, float defaultValue)$/;"	f	class:CCUserDefault
getFntFile	label_nodes/CCLabelBMFont.cpp	/^const char* CCLabelBMFont::getFntFile()$/;"	f	class:CCLabelBMFont
getFontName	label_nodes/CCLabelTTF.cpp	/^const char* CCLabelTTF::getFontName()$/;"	f	class:CCLabelTTF
getFontSize	label_nodes/CCLabelTTF.cpp	/^float CCLabelTTF::getFontSize()$/;"	f	class:CCLabelTTF
getFormat	textures/CCTexturePVR.h	/^    inline CCTexture2DPixelFormat getFormat() { return m_eFormat; }$/;"	f	class:CCTexturePVR
getFrameSize	platform/CCEGLViewProtocol.cpp	/^const CCSize& CCEGLViewProtocol::getFrameSize() const$/;"	f	class:CCEGLViewProtocol
getGLServerState	base_nodes/CCNode.cpp	/^ccGLServerState CCNode::getGLServerState()$/;"	f	class:CCNode
getGravity	particle_nodes/CCParticleSystem.cpp	/^const CCPoint& CCParticleSystem::getGravity()$/;"	f	class:CCParticleSystem
getGrid	actions/CCActionGrid.cpp	/^CCGridBase* CCGrid3DAction::getGrid(void)$/;"	f	class:CCGrid3DAction
getGrid	actions/CCActionGrid.cpp	/^CCGridBase* CCGridAction::getGrid(void)$/;"	f	class:CCGridAction
getGrid	actions/CCActionGrid.cpp	/^CCGridBase* CCTiledGrid3DAction::getGrid(void)$/;"	f	class:CCTiledGrid3DAction
getGrid	base_nodes/CCNode.cpp	/^CCGridBase* CCNode::getGrid()$/;"	f	class:CCNode
getGridSize	effects/CCGrid.h	/^    inline const ccGridSize& getGridSize(void) { return m_sGridSize; }$/;"	f	class:CCGridBase
getGroupName	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    inline const char* getGroupName(){ return m_sGroupName.c_str(); }$/;"	f	class:CCTMXObjectGroup
getHandler	script_support/CCScriptSupport.h	/^    int getHandler(void) {$/;"	f	class:CCScriptHandlerEntry
getHashCodeByString	include/ccTypeInfo.h	/^static inline unsigned int getHashCodeByString(const char *key)$/;"	f
getHeight	textures/CCTexturePVR.h	/^    inline unsigned int getHeight() { return m_uHeight; }$/;"	f	class:CCTexturePVR
getHorizontalAlignment	label_nodes/CCLabelTTF.cpp	/^CCTextAlignment CCLabelTTF::getHorizontalAlignment()$/;"	f	class:CCLabelTTF
getID	touch_dispatcher/CCTouch.h	/^    int getID() const$/;"	f	class:CCTouch
getInnerAction	actions/CCAction.h	/^    inline CCActionInterval* getInnerAction()$/;"	f	class:CCSpeed
getInnerAction	actions/CCActionInterval.h	/^    inline CCActionInterval* getInnerAction()$/;"	f	class:CCRepeatForever
getInnerAction	actions/CCActionInterval.h	/^    inline CCFiniteTimeAction* getInnerAction()$/;"	f	class:CCRepeat
getIntKey	cocoa/CCDictionary.h	/^    inline intptr_t getIntKey() const $/;"	f	class:CCDictElement
getIntegerForKey	support/CCUserDefault.cpp	/^int CCUserDefault::getIntegerForKey(const char* pKey)$/;"	f	class:CCUserDefault
getIntegerForKey	support/CCUserDefault.cpp	/^int CCUserDefault::getIntegerForKey(const char* pKey, int defaultValue)$/;"	f	class:CCUserDefault
getInterval	CCScheduler.cpp	/^float CCTimer::getInterval() const$/;"	f	class:CCTimer
getKeypadDispatcher	CCDirector.cpp	/^CCKeypadDispatcher* CCDirector::getKeypadDispatcher()$/;"	f	class:CCDirector
getLabel	menu_nodes/CCMenuItem.cpp	/^CCNode *CCMenuItemLabel::getLabel()$/;"	f	class:CCMenuItemLabel
getLayerName	tilemap_parallax_nodes/CCTMXLayer.h	/^    inline const char* getLayerName(){ return m_sLayerName.c_str(); }$/;"	f	class:CCTMXLayer
getLayers	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCArray* CCTMXMapInfo::getLayers()$/;"	f	class:CCTMXMapInfo
getLensEffect	actions/CCActionGrid3D.h	/^    inline float getLensEffect(void) { return m_fLensEffect; }$/;"	f	class:CCLens3D
getLetterPosXLeft	label_nodes/CCLabelBMFont.cpp	/^float CCLabelBMFont::getLetterPosXLeft( CCSprite* sp )$/;"	f	class:CCLabelBMFont
getLetterPosXRight	label_nodes/CCLabelBMFont.cpp	/^float CCLabelBMFont::getLetterPosXRight( CCSprite* sp )$/;"	f	class:CCLabelBMFont
getLife	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getLife()$/;"	f	class:CCParticleSystem
getLifeVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getLifeVar()$/;"	f	class:CCParticleSystem
getLocation	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getLocation() const$/;"	f	class:CCTouch
getLocationInView	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getLocationInView() const $/;"	f	class:CCTouch
getMaxModelviewStackDepth	CCConfiguration.h	/^    inline int getMaxModelviewStackDepth(void)$/;"	f	class:CCConfiguration
getMaxS	textures/CCTexture2D.cpp	/^GLfloat CCTexture2D::getMaxS()$/;"	f	class:CCTexture2D
getMaxT	textures/CCTexture2D.cpp	/^GLfloat CCTexture2D::getMaxT()$/;"	f	class:CCTexture2D
getMaxTextureSize	CCConfiguration.h	/^    inline int getMaxTextureSize(void)$/;"	f	class:CCConfiguration
getMaxTextureUnits	CCConfiguration.h	/^    inline int getMaxTextureUnits(void)$/;"	f	class:CCConfiguration
getMaxX	cocoa/CCGeometry.cpp	/^float CCRect::getMaxX() const$/;"	f	class:CCRect
getMaxY	cocoa/CCGeometry.cpp	/^float CCRect::getMaxY() const$/;"	f	class:CCRect
getMidX	cocoa/CCGeometry.cpp	/^float CCRect::getMidX() const$/;"	f	class:CCRect
getMidY	cocoa/CCGeometry.cpp	/^float CCRect::getMidY() const$/;"	f	class:CCRect
getMidpoint	misc_nodes/CCProgressTimer.cpp	/^CCPoint CCProgressTimer::getMidpoint(void)$/;"	f	class:CCProgressTimer
getMinX	cocoa/CCGeometry.cpp	/^float CCRect::getMinX() const$/;"	f	class:CCRect
getMinY	cocoa/CCGeometry.cpp	/^float CCRect::getMinY() const$/;"	f	class:CCRect
getName	support/CCNotificationCenter.cpp	/^char *CCNotificationObserver::getName()$/;"	f	class:CCNotificationObserver
getName	textures/CCTexture2D.cpp	/^GLuint CCTexture2D::getName()$/;"	f	class:CCTexture2D
getName	textures/CCTexturePVR.h	/^    inline unsigned int getName() { return m_uName; }$/;"	f	class:CCTexturePVR
getNormalImage	menu_nodes/CCMenuItem.cpp	/^CCNode * CCMenuItemSprite::getNormalImage()$/;"	f	class:CCMenuItemSprite
getNotificationNode	CCDirector.cpp	/^CCNode* CCDirector::getNotificationNode() $/;"	f	class:CCDirector
getNumberOfMipmaps	textures/CCTexturePVR.h	/^    inline unsigned int getNumberOfMipmaps() { return m_uNumberOfMipmaps; }$/;"	f	class:CCTexturePVR
getObject	actions/CCActionInstant.h	/^    inline CCObject* getObject()$/;"	f	class:CCCallFuncO
getObject	cocoa/CCDictionary.h	/^    inline CCObject* getObject() const$/;"	f	class:CCDictElement
getObject	support/CCNotificationCenter.cpp	/^CCObject *CCNotificationObserver::getObject()$/;"	f	class:CCNotificationObserver
getObjectGroups	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCArray* CCTMXTiledMap::getObjectGroups()$/;"	f	class:CCTMXTiledMap
getObjectGroups	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCArray* CCTMXMapInfo::getObjectGroups()$/;"	f	class:CCTMXMapInfo
getObjects	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCArray* CCTMXObjectGroup::getObjects()$/;"	f	class:CCTMXObjectGroup
getOffset	sprite_nodes/CCSpriteFrame.cpp	/^const CCPoint& CCSpriteFrame::getOffset(void)$/;"	f	class:CCSpriteFrame
getOffsetInPixels	sprite_nodes/CCSpriteFrame.cpp	/^const CCPoint& CCSpriteFrame::getOffsetInPixels(void)$/;"	f	class:CCSpriteFrame
getOffsetPosition	sprite_nodes/CCSprite.h	/^    inline const CCPoint& getOffsetPosition(void) { return m_obOffsetPosition; }$/;"	f	class:CCSprite
getOpacity	base_nodes/CCAtlasNode.cpp	/^GLubyte CCAtlasNode::getOpacity()$/;"	f	class:CCAtlasNode
getOpacity	label_nodes/CCLabelBMFont.cpp	/^GLubyte CCLabelBMFont::getOpacity()$/;"	f	class:CCLabelBMFont
getOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^GLubyte CCLayerColor::getOpacity()$/;"	f	class:CCLayerColor
getOpacity	menu_nodes/CCMenu.cpp	/^GLubyte CCMenu::getOpacity(void)$/;"	f	class:CCMenu
getOpacity	menu_nodes/CCMenuItem.cpp	/^GLubyte CCMenuItemLabel::getOpacity()$/;"	f	class:CCMenuItemLabel
getOpacity	menu_nodes/CCMenuItem.cpp	/^GLubyte CCMenuItemSprite::getOpacity()$/;"	f	class:CCMenuItemSprite
getOpacity	menu_nodes/CCMenuItem.cpp	/^GLubyte CCMenuItemToggle::getOpacity()$/;"	f	class:CCMenuItemToggle
getOpacity	misc_nodes/CCMotionStreak.cpp	/^GLubyte CCMotionStreak::getOpacity(void)$/;"	f	class:CCMotionStreak
getOpacity	misc_nodes/CCProgressTimer.cpp	/^GLubyte CCProgressTimer::getOpacity(void)$/;"	f	class:CCProgressTimer
getOpacity	sprite_nodes/CCSprite.cpp	/^GLubyte CCSprite::getOpacity(void)$/;"	f	class:CCSprite
getOpacityModifyRGB	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::getOpacityModifyRGB()$/;"	f	class:CCParticleSystem
getOpenGLView	CCDirector.h	/^    inline CCEGLView* getOpenGLView(void) { return m_pobOpenGLView; }$/;"	f	class:CCDirector
getOrderOfArrival	base_nodes/CCNode.cpp	/^unsigned int CCNode::getOrderOfArrival()$/;"	f	class:CCNode
getOriginalSize	sprite_nodes/CCSpriteFrame.h	/^    inline const CCSize& getOriginalSize(void) { return m_obOriginalSize; }$/;"	f	class:CCSpriteFrame
getOriginalSizeInPixels	sprite_nodes/CCSpriteFrame.h	/^    inline const CCSize& getOriginalSizeInPixels(void) { return m_obOriginalSizeInPixels; }$/;"	f	class:CCSpriteFrame
getOriginalTarget	actions/CCAction.h	/^    inline CCNode* getOriginalTarget(void) { return m_pOriginalTarget; } $/;"	f	class:CCAction
getParent	base_nodes/CCNode.cpp	/^CCNode * CCNode::getParent()$/;"	f	class:CCNode
getParticleCount	particle_nodes/CCParticleSystem.cpp	/^unsigned int CCParticleSystem::getParticleCount()$/;"	f	class:CCParticleSystem
getPercentage	misc_nodes/CCProgressTimer.h	/^    inline float getPercentage(void) {return m_fPercentage; }$/;"	f	class:CCProgressTimer
getPeriod	actions/CCActionEase.h	/^    inline float getPeriod(void) { return m_fPeriod; }$/;"	f	class:CCEaseElastic
getPixelFormat	textures/CCTexture2D.cpp	/^CCTexture2DPixelFormat CCTexture2D::getPixelFormat()$/;"	f	class:CCTexture2D
getPixelsHigh	textures/CCTexture2D.cpp	/^unsigned int CCTexture2D::getPixelsHigh()$/;"	f	class:CCTexture2D
getPixelsWide	textures/CCTexture2D.cpp	/^unsigned int CCTexture2D::getPixelsWide()$/;"	f	class:CCTexture2D
getPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^const char * CCTextFieldTTF::getPlaceHolder(void)$/;"	f	class:CCTextFieldTTF
getPoints	actions/CCActionCatmullRom.h	/^    inline CCPointArray* getPoints() { return m_pPoints; }$/;"	f	class:CCCardinalSplineTo
getPosVar	particle_nodes/CCParticleSystem.cpp	/^CCPoint CCParticleSystem::getPosVar()$/;"	f	class:CCParticleSystem
getPosition	actions/CCActionGrid3D.h	/^    inline const CCPoint& getPosition(void) { return m_position; }$/;"	f	class:CCLens3D
getPosition	actions/CCActionGrid3D.h	/^    inline const CCPoint& getPosition(void) { return m_position; }$/;"	f	class:CCRipple3D
getPosition	actions/CCActionGrid3D.h	/^    inline const CCPoint& getPosition(void) { return m_position; }$/;"	f	class:CCTwirl
getPosition	base_nodes/CCNode.cpp	/^CCPoint CCNode::getPosition()$/;"	f	class:CCNode
getPosition	base_nodes/CCNode.cpp	/^void CCNode::getPosition(float* x, float* y)$/;"	f	class:CCNode
getPositionLua	base_nodes/CCNode.cpp	/^const CCPoint& CCNode::getPositionLua(void)$/;"	f	class:CCNode
getPositionType	particle_nodes/CCParticleSystem.cpp	/^tCCPositionType CCParticleSystem::getPositionType()$/;"	f	class:CCParticleSystem
getPositionX	base_nodes/CCNode.cpp	/^float CCNode::getPositionX(void)$/;"	f	class:CCNode
getPositionY	base_nodes/CCNode.cpp	/^float CCNode::getPositionY(void)$/;"	f	class:CCNode
getPreviousLocation	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getPreviousLocation() const$/;"	f	class:CCTouch
getPreviousLocationInView	touch_dispatcher/CCTouch.cpp	/^CCPoint CCTouch::getPreviousLocationInView() const $/;"	f	class:CCTouch
getPriority	script_support/CCScriptSupport.h	/^    int getPriority(void) {$/;"	f	class:CCTouchScriptHandlerEntry
getPriority	touch_dispatcher/CCTouchHandler.cpp	/^int CCTouchHandler::getPriority(void)$/;"	f	class:CCTouchHandler
getProgram	shaders/CCGLProgram.h	/^    inline const GLuint getProgram() { return m_uProgram; }$/;"	f	class:CCGLProgram
getProjection	CCDirector.h	/^    inline ccDirectorProjection getProjection(void) { return m_eProjection; }$/;"	f	class:CCDirector
getProperties	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCDictionary * CCTMXLayer::getProperties()$/;"	f	class:CCTMXLayer
getProperties	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCDictionary* CCTMXObjectGroup::getProperties()$/;"	f	class:CCTMXObjectGroup
getProperties	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCDictionary * CCTMXTiledMap::getProperties()$/;"	f	class:CCTMXTiledMap
getProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCDictionary * CCTMXLayerInfo::getProperties()$/;"	f	class:CCTMXLayerInfo
getProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCDictionary * CCTMXMapInfo::getProperties()$/;"	f	class:CCTMXMapInfo
getQuad	sprite_nodes/CCSprite.h	/^    inline ccV3F_C4B_T2F_Quad getQuad(void) { return m_sQuad; }$/;"	f	class:CCSprite
getQuads	textures/CCTextureAtlas.cpp	/^ccV3F_C4B_T2F_Quad* CCTextureAtlas::getQuads()$/;"	f	class:CCTextureAtlas
getQuadsToDraw	base_nodes/CCAtlasNode.cpp	/^unsigned int CCAtlasNode::getQuadsToDraw()$/;"	f	class:CCAtlasNode
getRadialAccel	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getRadialAccel()$/;"	f	class:CCParticleSystem
getRadialAccelVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getRadialAccelVar()$/;"	f	class:CCParticleSystem
getRate	actions/CCActionEase.h	/^    inline float getRate(void) { return m_fRate; }$/;"	f	class:CCEaseRateAction
getRate	actions/CCActionGrid.h	/^    inline float getRate(void) { return m_fRate; }$/;"	f	class:CCAccelAmplitude
getRate	actions/CCActionGrid.h	/^    inline float getRate(void) { return m_fRate; }$/;"	f	class:CCAccelDeccelAmplitude
getRate	actions/CCActionGrid.h	/^    inline float getRate(void) { return m_fRate; }$/;"	f	class:CCDeccelAmplitude
getRect	sprite_nodes/CCSpriteFrame.h	/^    inline const CCRect& getRect(void) { return m_obRect; }$/;"	f	class:CCSpriteFrame
getRectInPixels	sprite_nodes/CCSpriteFrame.h	/^    inline const CCRect& getRectInPixels(void) { return m_obRectInPixels; }$/;"	f	class:CCSpriteFrame
getResourceDirectory	platform/CCFileUtilsCommon_cpp.h	/^const char* CCFileUtils::getResourceDirectory()$/;"	f	class:CCFileUtils
getReuseGrid	effects/CCGrid.h	/^    inline int getReuseGrid(void) { return m_nReuseGrid; }$/;"	f	class:CCGridBase
getRotatePerSecond	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getRotatePerSecond()$/;"	f	class:CCParticleSystem
getRotatePerSecondVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getRotatePerSecondVar()$/;"	f	class:CCParticleSystem
getRotation	base_nodes/CCNode.cpp	/^float CCNode::getRotation()$/;"	f	class:CCNode
getRotationX	base_nodes/CCNode.cpp	/^float CCNode::getRotationX()$/;"	f	class:CCNode
getRotationY	base_nodes/CCNode.cpp	/^float CCNode::getRotationY()$/;"	f	class:CCNode
getRunningScene	CCDirector.h	/^    inline CCScene* getRunningScene(void) { return m_pRunningScene; }$/;"	f	class:CCDirector
getScale	base_nodes/CCNode.cpp	/^float CCNode::getScale(void)$/;"	f	class:CCNode
getScaleX	base_nodes/CCNode.cpp	/^float CCNode::getScaleX()$/;"	f	class:CCNode
getScaleX	platform/CCEGLViewProtocol.cpp	/^float CCEGLViewProtocol::getScaleX() const$/;"	f	class:CCEGLViewProtocol
getScaleY	base_nodes/CCNode.cpp	/^float CCNode::getScaleY()$/;"	f	class:CCNode
getScaleY	platform/CCEGLViewProtocol.cpp	/^float CCEGLViewProtocol::getScaleY() const$/;"	f	class:CCEGLViewProtocol
getScheduler	CCDirector.cpp	/^CCScheduler* CCDirector::getScheduler()$/;"	f	class:CCDirector
getScheduler	base_nodes/CCNode.cpp	/^CCScheduler* CCNode::getScheduler()$/;"	f	class:CCNode
getScriptAccelerateHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    inline CCScriptHandlerEntry* getScriptAccelerateHandlerEntry() { return m_pScriptAccelerateHandlerEntry; };$/;"	f	class:CCLayer
getScriptEngine	script_support/CCScriptSupport.h	/^    CCScriptEngineProtocol* getScriptEngine(void) {$/;"	f	class:CCScriptEngineManager
getScriptHandler	CCScheduler.h	/^    inline int getScriptHandler() { return m_nScriptHandler; };$/;"	f	class:CCTimer
getScriptHandler	actions/CCActionInstant.h	/^    inline int getScriptHandler() { return m_nScriptHandler; };$/;"	f	class:CCCallFunc
getScriptHandler	base_nodes/CCNode.h	/^    inline int getScriptHandler() { return m_nScriptHandler; };$/;"	f	class:CCNode
getScriptHandler	support/CCNotificationCenter.h	/^    inline int getScriptHandler() { return m_scriptHandler; };$/;"	f	class:CCNotificationCenter
getScriptKeypadHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    inline CCScriptHandlerEntry* getScriptKeypadHandlerEntry() { return m_pScriptKeypadHandlerEntry; };$/;"	f	class:CCLayer
getScriptTapHandler	menu_nodes/CCMenuItem.h	/^    int getScriptTapHandler() { return m_nScriptTapHandler; };$/;"	f	class:CCMenuItem
getScriptTouchHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    inline CCTouchScriptHandlerEntry* getScriptTouchHandlerEntry() { return m_pScriptTouchHandlerEntry; };$/;"	f	class:CCLayer
getScriptType	script_support/CCScriptSupport.h	/^    virtual ccScriptType getScriptType() { return kScriptTypeNone; };$/;"	f	class:CCScriptEngineProtocol
getSecondsPerFrame	CCDirector.h	/^    inline float getSecondsPerFrame() { return m_fSecondsPerFrame; }$/;"	f	class:CCDirector
getSelectedImage	menu_nodes/CCMenuItem.cpp	/^CCNode * CCMenuItemSprite::getSelectedImage()$/;"	f	class:CCMenuItemSprite
getSelectedIndex	menu_nodes/CCMenuItem.cpp	/^unsigned int CCMenuItemToggle::getSelectedIndex()$/;"	f	class:CCMenuItemToggle
getSelector	CCScheduler.cpp	/^SEL_SCHEDULE CCTimer::getSelector() const$/;"	f	class:CCTimer
getSelector	support/CCNotificationCenter.cpp	/^SEL_CallFuncO CCNotificationObserver::getSelector()$/;"	f	class:CCNotificationObserver
getSetOfTouchesEndOrCancel	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::getSetOfTouchesEndOrCancel(CCSet& set, int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol
getShaderProgram	base_nodes/CCNode.cpp	/^CCGLProgram* CCNode::getShaderProgram()$/;"	f	class:CCNode
getShaderProgram	textures/CCTexture2D.cpp	/^CCGLProgram* CCTexture2D::getShaderProgram(void)$/;"	f	class:CCTexture2D
getSkewX	base_nodes/CCNode.cpp	/^float CCNode::getSkewX()$/;"	f	class:CCNode
getSkewY	base_nodes/CCNode.cpp	/^float CCNode::getSkewY()$/;"	f	class:CCNode
getSourcePosition	particle_nodes/CCParticleSystem.cpp	/^CCPoint CCParticleSystem::getSourcePosition()$/;"	f	class:CCParticleSystem
getSpeed	actions/CCAction.h	/^    inline float getSpeed(void) { return m_fSpeed; }$/;"	f	class:CCSpeed
getSpeed	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getSpeed()$/;"	f	class:CCParticleSystem
getSpeedVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getSpeedVar()$/;"	f	class:CCParticleSystem
getSprite	misc_nodes/CCProgressTimer.h	/^    inline CCSprite* getSprite(void) { return m_pSprite; }$/;"	f	class:CCProgressTimer
getSprite	misc_nodes/CCRenderTexture.cpp	/^CCSprite * CCRenderTexture::getSprite()$/;"	f	class:CCRenderTexture
getStartColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^ccColor3B CCLayerGradient::getStartColor()$/;"	f	class:CCLayerGradient
getStartColor	particle_nodes/CCParticleSystem.cpp	/^ccColor4F CCParticleSystem::getStartColor()$/;"	f	class:CCParticleSystem
getStartColorVar	particle_nodes/CCParticleSystem.cpp	/^ccColor4F CCParticleSystem::getStartColorVar()$/;"	f	class:CCParticleSystem
getStartOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^GLubyte CCLayerGradient::getStartOpacity()$/;"	f	class:CCLayerGradient
getStartRadius	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartRadius()$/;"	f	class:CCParticleSystem
getStartRadiusVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartRadiusVar()$/;"	f	class:CCParticleSystem
getStartSize	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartSize()$/;"	f	class:CCParticleSystem
getStartSizeVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartSizeVar()$/;"	f	class:CCParticleSystem
getStartSpin	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartSpin()$/;"	f	class:CCParticleSystem
getStartSpinVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getStartSpinVar()$/;"	f	class:CCParticleSystem
getStartTime	support/CCProfiling.h	/^    inline struct cc_timeval * getStartTime(void) { return &m_sStartTime; };$/;"	f	class:CCProfilingTimer
getStencil	misc_nodes/CCClippingNode.cpp	/^CCNode* CCClippingNode::getStencil() const$/;"	f	class:CCClippingNode
getStep	effects/CCGrid.h	/^    inline const CCPoint& getStep(void) { return m_obStep; }$/;"	f	class:CCGridBase
getStrKey	cocoa/CCDictionary.h	/^    inline const char* getStrKey() const$/;"	f	class:CCDictElement
getString	label_nodes/CCLabelAtlas.cpp	/^const char* CCLabelAtlas::getString(void)$/;"	f	class:CCLabelAtlas
getString	label_nodes/CCLabelBMFont.cpp	/^const char* CCLabelBMFont::getString(void)$/;"	f	class:CCLabelBMFont
getString	label_nodes/CCLabelTTF.cpp	/^const char* CCLabelTTF::getString(void)$/;"	f	class:CCLabelTTF
getString	text_input_node/CCTextFieldTTF.cpp	/^const char* CCTextFieldTTF::getString(void)$/;"	f	class:CCTextFieldTTF
getStringForKey	support/CCUserDefault.cpp	/^std::string CCUserDefault::getStringForKey(const char* pKey)$/;"	f	class:CCUserDefault
getStringForKey	support/CCUserDefault.cpp	/^string CCUserDefault::getStringForKey(const char* pKey, const std::string & defaultValue)$/;"	f	class:CCUserDefault
getSubItems	menu_nodes/CCMenuItem.cpp	/^CCArray* CCMenuItemToggle::getSubItems()$/;"	f	class:CCMenuItemToggle
getSwallowsTouches	script_support/CCScriptSupport.h	/^    bool getSwallowsTouches(void) {$/;"	f	class:CCTouchScriptHandlerEntry
getTGAInfo	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^struct sImageTGA * CCTileMapAtlas::getTGAInfo()$/;"	f	class:CCTileMapAtlas
getTMXFileName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    inline const char* getTMXFileName(){ return m_sTMXFileName.c_str(); }$/;"	f	class:CCTMXMapInfo
getTag	actions/CCAction.h	/^    inline int getTag(void) { return m_nTag; }$/;"	f	class:CCAction
getTag	base_nodes/CCNode.cpp	/^int CCNode::getTag()$/;"	f	class:CCNode
getTangentialAccel	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getTangentialAccel()$/;"	f	class:CCParticleSystem
getTangentialAccelVar	particle_nodes/CCParticleSystem.cpp	/^float CCParticleSystem::getTangentialAccelVar()$/;"	f	class:CCParticleSystem
getTarget	actions/CCAction.h	/^    inline CCNode* getTarget(void) { return m_pTarget; }$/;"	f	class:CCAction
getTarget	support/CCNotificationCenter.cpp	/^CCObject *CCNotificationObserver::getTarget()$/;"	f	class:CCNotificationObserver
getTargetCallback	actions/CCActionInstant.h	/^    inline CCObject* getTargetCallback()$/;"	f	class:CCCallFunc
getTexture	base_nodes/CCAtlasNode.cpp	/^CCTexture2D * CCAtlasNode::getTexture()$/;"	f	class:CCAtlasNode
getTexture	misc_nodes/CCMotionStreak.cpp	/^CCTexture2D* CCMotionStreak::getTexture(void)$/;"	f	class:CCMotionStreak
getTexture	particle_nodes/CCParticleBatchNode.cpp	/^CCTexture2D* CCParticleBatchNode::getTexture(void)$/;"	f	class:CCParticleBatchNode
getTexture	particle_nodes/CCParticleSystem.cpp	/^CCTexture2D * CCParticleSystem::getTexture()$/;"	f	class:CCParticleSystem
getTexture	sprite_nodes/CCSprite.cpp	/^CCTexture2D* CCSprite::getTexture(void)$/;"	f	class:CCSprite
getTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^CCTexture2D* CCSpriteBatchNode::getTexture(void)$/;"	f	class:CCSpriteBatchNode
getTexture	sprite_nodes/CCSpriteFrame.cpp	/^CCTexture2D* CCSpriteFrame::getTexture(void)$/;"	f	class:CCSpriteFrame
getTexture	textures/CCTextureAtlas.cpp	/^CCTexture2D* CCTextureAtlas::getTexture()$/;"	f	class:CCTextureAtlas
getTextureAtlas	base_nodes/CCAtlasNode.cpp	/^CCTextureAtlas * CCAtlasNode::getTextureAtlas()$/;"	f	class:CCAtlasNode
getTextureAtlas	sprite_nodes/CCSprite.h	/^    inline CCTextureAtlas* getTextureAtlas(void) { return m_pobTextureAtlas; }$/;"	f	class:CCSprite
getTextureAtlas	sprite_nodes/CCSpriteBatchNode.h	/^    inline CCTextureAtlas* getTextureAtlas(void) { return m_pobTextureAtlas; }$/;"	f	class:CCSpriteBatchNode
getTextureRect	sprite_nodes/CCSprite.h	/^    inline const CCRect& getTextureRect(void) { return m_obRect; }$/;"	f	class:CCSprite
getTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCDictionary* CCTMXMapInfo::getTileProperties()$/;"	f	class:CCTMXMapInfo
getTileSet	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXTilesetInfo * CCTMXLayer::getTileSet()$/;"	f	class:CCTMXLayer
getTilesets	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCArray* CCTMXMapInfo::getTilesets()$/;"	f	class:CCTMXMapInfo
getTimeScale	CCScheduler.h	/^    inline float getTimeScale(void) { return m_fTimeScale; }$/;"	f	class:CCScheduler
getTimer	script_support/CCScriptSupport.h	/^    cocos2d::CCTimer* getTimer(void) {$/;"	f	class:CCSchedulerScriptHandlerEntry
getTotalFrames	CCDirector.h	/^    inline unsigned int getTotalFrames(void) { return m_uTotalFrames; }$/;"	f	class:CCDirector
getTotalParticles	particle_nodes/CCParticleSystem.cpp	/^unsigned int CCParticleSystem::getTotalParticles()$/;"	f	class:CCParticleSystem
getTotalQuads	textures/CCTextureAtlas.cpp	/^unsigned int CCTextureAtlas::getTotalQuads()$/;"	f	class:CCTextureAtlas
getTouchDispatcher	CCDirector.cpp	/^CCTouchDispatcher* CCDirector::getTouchDispatcher()$/;"	f	class:CCDirector
getTouchMode	layers_scenes_transitions_nodes/CCLayer.cpp	/^int CCLayer::getTouchMode()$/;"	f	class:CCLayer
getTouchPriority	layers_scenes_transitions_nodes/CCLayer.cpp	/^int CCLayer::getTouchPriority()$/;"	f	class:CCLayer
getType	misc_nodes/CCProgressTimer.h	/^    inline CCProgressTimerType getType(void) { return m_eType; }$/;"	f	class:CCProgressTimer
getUnUsedIndex	platform/CCEGLViewProtocol.cpp	/^static int getUnUsedIndex()$/;"	f	file:
getUpXYZ	CCCamera.cpp	/^void CCCamera::getUpXYZ(float *pUpX, float *pUpY, float *pUpZ)$/;"	f	class:CCCamera
getUserData	base_nodes/CCNode.cpp	/^void * CCNode::getUserData()$/;"	f	class:CCNode
getUserObject	base_nodes/CCNode.cpp	/^CCObject* CCNode::getUserObject()$/;"	f	class:CCNode
getValue	cocoa/CCInteger.h	/^    int getValue() const {return m_nValue;}$/;"	f	class:CCInteger
getValueForKey	support/CCUserDefault.cpp	/^static inline const char* getValueForKey(const char* pKey)$/;"	f	file:
getVector	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCPoint CCLayerGradient::getVector()$/;"	f	class:CCLayerGradient
getVertexZ	base_nodes/CCNode.cpp	/^float CCNode::getVertexZ()$/;"	f	class:CCNode
getVerticalAlignment	label_nodes/CCLabelTTF.cpp	/^CCVerticalTextAlignment CCLabelTTF::getVerticalAlignment()$/;"	f	class:CCLabelTTF
getViewName	platform/CCEGLViewProtocol.cpp	/^const char* CCEGLViewProtocol::getViewName()$/;"	f	class:CCEGLViewProtocol
getViewPortRect	platform/CCEGLViewProtocol.cpp	/^const CCRect& CCEGLViewProtocol::getViewPortRect() const$/;"	f	class:CCEGLViewProtocol
getVisibleOrigin	CCDirector.cpp	/^CCPoint CCDirector::getVisibleOrigin()$/;"	f	class:CCDirector
getVisibleOrigin	platform/CCEGLViewProtocol.cpp	/^CCPoint CCEGLViewProtocol::getVisibleOrigin() const$/;"	f	class:CCEGLViewProtocol
getVisibleSize	CCDirector.cpp	/^CCSize CCDirector::getVisibleSize()$/;"	f	class:CCDirector
getVisibleSize	platform/CCEGLViewProtocol.cpp	/^CCSize  CCEGLViewProtocol::getVisibleSize() const$/;"	f	class:CCEGLViewProtocol
getWidth	textures/CCTexturePVR.h	/^    inline unsigned int getWidth() { return m_uWidth; }$/;"	f	class:CCTexturePVR
getWinSize	CCDirector.cpp	/^CCSize CCDirector::getWinSize(void)$/;"	f	class:CCDirector
getWinSizeInPixels	CCDirector.cpp	/^CCSize CCDirector::getWinSizeInPixels()$/;"	f	class:CCDirector
getXMLFilePath	support/CCUserDefault.cpp	/^const string& CCUserDefault::getXMLFilePath()$/;"	f	class:CCUserDefault
getXMLNodeForKey	support/CCUserDefault.cpp	/^static xmlNodePtr getXMLNodeForKey(const char* pKey, xmlNodePtr *rootNode)$/;"	f	file:
getZEye	CCCamera.cpp	/^float CCCamera::getZEye(void)$/;"	f	class:CCCamera
getZEye	CCDirector.cpp	/^float CCDirector::getZEye(void)$/;"	f	class:CCDirector
getZOrder	base_nodes/CCNode.cpp	/^int CCNode::getZOrder()$/;"	f	class:CCNode
gettimeofdayCocos2d	platform/platform.cpp	/^int CCTime::gettimeofdayCocos2d(struct cc_timeval *tp, void *tzp)$/;"	f	class:CCTime
gi	support/zip_support/unzip.cpp	/^    unz_global_info64 gi;       \/* public global information *\/$/;"	m	struct:cocos2d::__anon38	file:
grab	effects/CCGrabber.cpp	/^void CCGrabber::grab(CCTexture2D *pTexture)$/;"	f	class:CCGrabber
gravity	particle_nodes/CCParticleSystem.h	/^        CCPoint gravity;$/;"	m	struct:CCParticleSystem::__anon24
gridWithSize	effects/CCGrid.cpp	/^CCGrid3D* CCGrid3D::gridWithSize(const ccGridSize& gridSize)$/;"	f	class:CCGrid3D
gridWithSize	effects/CCGrid.cpp	/^CCGrid3D* CCGrid3D::gridWithSize(const ccGridSize& gridSize, CCTexture2D *pTexture, bool bFlipped)$/;"	f	class:CCGrid3D
gridWithSize	effects/CCGrid.cpp	/^CCGridBase* CCGridBase::gridWithSize(const ccGridSize& gridSize)$/;"	f	class:CCGridBase
gridWithSize	effects/CCGrid.cpp	/^CCGridBase* CCGridBase::gridWithSize(const ccGridSize& gridSize, CCTexture2D *texture, bool flipped)$/;"	f	class:CCGridBase
gridWithSize	effects/CCGrid.cpp	/^CCTiledGrid3D* CCTiledGrid3D::gridWithSize(const ccGridSize& gridSize)$/;"	f	class:CCTiledGrid3D
gridWithSize	effects/CCGrid.cpp	/^CCTiledGrid3D* CCTiledGrid3D::gridWithSize(const ccGridSize& gridSize, CCTexture2D *pTexture, bool bFlipped)$/;"	f	class:CCTiledGrid3D
handleTouchesBegin	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::handleTouchesBegin(int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol
handleTouchesCancel	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::handleTouchesCancel(int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol
handleTouchesEnd	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::handleTouchesEnd(int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol
handleTouchesMove	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::handleTouchesMove(int num, int ids[], float xs[], float ys[])$/;"	f	class:CCEGLViewProtocol
handlerWithDelegate	keypad_dispatcher/CCKeypadDelegate.cpp	/^CCKeypadHandler* CCKeypadHandler::handlerWithDelegate(CCKeypadDelegate *pDelegate)$/;"	f	class:CCKeypadHandler
handlerWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^CCStandardTouchHandler* CCStandardTouchHandler::handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCStandardTouchHandler
handlerWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^CCTargetedTouchHandler* CCTargetedTouchHandler::handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)$/;"	f	class:CCTargetedTouchHandler
handlerWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^CCTouchHandler* CCTouchHandler::handlerWithDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCTouchHandler
hasAlpha	platform/CCImage.h	/^    bool hasAlpha()                     { return m_bHasAlpha; }$/;"	f	class:CCImage
hasAlpha	textures/CCTexturePVR.h	/^    inline bool hasAlpha() { return m_bHasAlpha; }$/;"	f	class:CCTexturePVR
hasMipmaps	textures/CCTexture2D.cpp	/^bool CCTexture2D::hasMipmaps()$/;"	f	class:CCTexture2D
hasPremultipliedAlpha	textures/CCTexture2D.cpp	/^bool CCTexture2D::hasPremultipliedAlpha()$/;"	f	class:CCTexture2D
hashv	support/data_support/uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle
headerLength	textures/CCTexturePVR.cpp	/^    unsigned int headerLength;$/;"	m	struct:_PVRTexHeader	file:
height	cocoa/CCGeometry.h	/^    float height;$/;"	m	class:CCSize
height	support/image_support/TGAlib.h	/^    signed short height;$/;"	m	struct:cocos2d::sImageTGA
height	textures/CCTexturePVR.cpp	/^	uint32_t height;$/;"	m	struct:__anon50	file:
height	textures/CCTexturePVR.cpp	/^    unsigned int height;$/;"	m	struct:_PVRTexHeader	file:
hh	CCScheduler.cpp	/^    UT_hash_handle                hh;$/;"	m	struct:_hashSelectorEntry	file:
hh	CCScheduler.cpp	/^    UT_hash_handle        hh;$/;"	m	struct:_hashUpdateEntry	file:
hh	actions/CCActionManager.cpp	/^    UT_hash_handle                hh;$/;"	m	struct:_hashElement	file:
hh	cocoa/CCDictionary.h	/^    UT_hash_handle hh; \/* makes this class hashable *\/$/;"	m	class:CCDictElement
hh	label_nodes/CCLabelBMFont.h	/^	UT_hash_handle	hh;$/;"	m	struct:_FontDefHashElement
hh	label_nodes/CCLabelBMFont.h	/^	UT_hash_handle	hh;$/;"	m	struct:_KerningHashElement
hh	shaders/CCGLProgram.cpp	/^    UT_hash_handle  hh;          \/\/ hash entry$/;"	m	struct:_hashUniformEntry	file:
hh_head	support/data_support/uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle
hh_next	support/data_support/uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hh_prev	support/data_support/uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hho	support/data_support/uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table
hideOutShowIn	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::hideOutShowIn()$/;"	f	class:CCTransitionScene
highestAtlasIndexInChild	sprite_nodes/CCSpriteBatchNode.cpp	/^unsigned int CCSpriteBatchNode::highestAtlasIndexInChild(CCSprite *pSprite)$/;"	f	class:CCSpriteBatchNode
ideal_chain_maxlen	support/data_support/uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table
ignoreAnchorPointForPosition	base_nodes/CCNode.cpp	/^void CCNode::ignoreAnchorPointForPosition(bool newValue)$/;"	f	class:CCNode
ignoreAnchorPointForPosition	sprite_nodes/CCSprite.cpp	/^void CCSprite::ignoreAnchorPointForPosition(bool value)$/;"	f	class:CCSprite
image	textures/CCTextureCache.cpp	/^    CCImage        *image;$/;"	m	struct:_ImageInfo	file:
imageData	support/image_support/TGAlib.h	/^    unsigned char *imageData;$/;"	m	struct:cocos2d::sImageTGA
imageType	textures/CCTextureCache.cpp	/^    CCImage::EImageFormat imageType;$/;"	m	struct:_ImageInfo	file:
increaseAtlasCapacity	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::increaseAtlasCapacity(void)$/;"	f	class:CCSpriteBatchNode
increaseAtlasCapacityTo	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::increaseAtlasCapacityTo(unsigned int quantity)$/;"	f	class:CCParticleBatchNode
increaseTotalQuadsWith	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::increaseTotalQuadsWith(unsigned int amount)$/;"	f	class:CCTextureAtlas
indexOfObject	cocoa/CCArray.cpp	/^unsigned int CCArray::indexOfObject(CCObject* object)$/;"	f	class:CCArray
ineff_expands	support/data_support/uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
init	CCCamera.cpp	/^void CCCamera::init(void)$/;"	f	class:CCCamera
init	CCConfiguration.cpp	/^bool CCConfiguration::init(void)$/;"	f	class:CCConfiguration
init	CCDirector.cpp	/^bool CCDirector::init(void)$/;"	f	class:CCDirector
init	cocoa/CCArray.cpp	/^bool CCArray::init()$/;"	f	class:CCArray
init	cocoa/CCDictionary.h	/^    inline void init()$/;"	f	class:CCDictElement
init	draw_nodes/CCDrawNode.cpp	/^bool CCDrawNode::init()$/;"	f	class:CCDrawNode
init	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::init()$/;"	f	class:CCLabelBMFont
init	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::init()$/;"	f	class:CCLabelTTF
init	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::init()$/;"	f	class:CCLayer
init	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerColor::init()$/;"	f	class:CCLayerColor
init	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerGradient::init()$/;"	f	class:CCLayerGradient
init	layers_scenes_transitions_nodes/CCScene.cpp	/^bool CCScene::init()$/;"	f	class:CCScene
init	menu_nodes/CCMenu.cpp	/^bool CCMenu::init()$/;"	f	class:CCMenu
init	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemImage::init(void)$/;"	f	class:CCMenuItemImage
init	misc_nodes/CCClippingNode.cpp	/^bool CCClippingNode::init()$/;"	f	class:CCClippingNode
init	misc_nodes/CCClippingNode.cpp	/^bool CCClippingNode::init(CCNode *pStencil)$/;"	f	class:CCClippingNode
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(1000); }$/;"	f	class:CCParticleRain
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(150); }$/;"	f	class:CCParticleMeteor
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(1500); }$/;"	f	class:CCParticleFireworks
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(200); }$/;"	f	class:CCParticleGalaxy
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(200); }$/;"	f	class:CCParticleSmoke
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(250); }$/;"	f	class:CCParticleFire
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(250); }$/;"	f	class:CCParticleFlower
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(350); }$/;"	f	class:CCParticleSun
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(500); }$/;"	f	class:CCParticleSpiral
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(700); }$/;"	f	class:CCParticleExplosion
init	particle_nodes/CCParticleExamples.h	/^    bool init(){ return initWithTotalParticles(700); }$/;"	f	class:CCParticleSnow
init	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::init()$/;"	f	class:CCParticleSystem
init	platform/CCSAXParser.cpp	/^bool CCSAXParser::init(const char *pszEncoding)$/;"	f	class:CCSAXParser
init	script_support/CCScriptSupport.cpp	/^bool CCSchedulerScriptHandlerEntry::init(float fInterval, bool bPaused)$/;"	f	class:CCSchedulerScriptHandlerEntry
init	script_support/CCScriptSupport.cpp	/^bool CCTouchScriptHandlerEntry::init(bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)$/;"	f	class:CCTouchScriptHandlerEntry
init	shaders/CCShaderCache.cpp	/^bool CCShaderCache::init()$/;"	f	class:CCShaderCache
init	sprite_nodes/CCAnimation.cpp	/^bool CCAnimation::init()$/;"	f	class:CCAnimation
init	sprite_nodes/CCAnimationCache.cpp	/^bool CCAnimationCache::init()$/;"	f	class:CCAnimationCache
init	sprite_nodes/CCSprite.cpp	/^bool CCSprite::init(void)$/;"	f	class:CCSprite
init	sprite_nodes/CCSpriteBatchNode.cpp	/^bool CCSpriteBatchNode::init()$/;"	f	class:CCSpriteBatchNode
init	sprite_nodes/CCSpriteFrameCache.cpp	/^bool CCSpriteFrameCache::init(void)$/;"	f	class:CCSpriteFrameCache
init	support/CCProfiling.cpp	/^bool CCProfiler::init()$/;"	f	class:CCProfiler
init	text_input_node/CCIMEDispatcher.cpp	/^    void init()$/;"	f	class:CCIMEDispatcher::Impl
init	touch_dispatcher/CCTouchDispatcher.cpp	/^bool CCTouchDispatcher::init(void)$/;"	f	class:CCTouchDispatcher
initParticle	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::initParticle(tCCParticle* particle)$/;"	f	class:CCParticleSystem
initPremultipliedATextureWithImage	textures/CCTexture2D.cpp	/^bool CCTexture2D::initPremultipliedATextureWithImage(CCImage *image, unsigned int width, unsigned int height)$/;"	f	class:CCTexture2D
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInB::initScenes()$/;"	f	class:CCTransitionMoveInB
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInL::initScenes()$/;"	f	class:CCTransitionMoveInL
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInR::initScenes()$/;"	f	class:CCTransitionMoveInR
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInT::initScenes()$/;"	f	class:CCTransitionMoveInT
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInB:: initScenes()$/;"	f	class:CCTransitionSlideInB
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInL:: initScenes()$/;"	f	class:CCTransitionSlideInL
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInR::initScenes()$/;"	f	class:CCTransitionSlideInR
initScenes	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInT::initScenes()$/;"	f	class:CCTransitionSlideInT
initTexCoordsWithRect	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::initTexCoordsWithRect(const CCRect& pointRect)$/;"	f	class:CCParticleSystemQuad
initWithAction	actions/CCAction.cpp	/^bool CCSpeed::initWithAction(CCActionInterval *pAction, float fSpeed)$/;"	f	class:CCSpeed
initWithAction	actions/CCActionEase.cpp	/^bool CCActionEase::initWithAction(CCActionInterval *pAction)$/;"	f	class:CCActionEase
initWithAction	actions/CCActionEase.cpp	/^bool CCEaseElastic::initWithAction(CCActionInterval *pAction, float fPeriod\/* = 0.3f*\/)$/;"	f	class:CCEaseElastic
initWithAction	actions/CCActionEase.cpp	/^bool CCEaseRateAction::initWithAction(CCActionInterval *pAction, float fRate)$/;"	f	class:CCEaseRateAction
initWithAction	actions/CCActionGrid.cpp	/^bool CCAccelAmplitude::initWithAction(CCAction *pAction, float duration)$/;"	f	class:CCAccelAmplitude
initWithAction	actions/CCActionGrid.cpp	/^bool CCAccelDeccelAmplitude::initWithAction(CCAction *pAction, float duration)$/;"	f	class:CCAccelDeccelAmplitude
initWithAction	actions/CCActionGrid.cpp	/^bool CCDeccelAmplitude::initWithAction(CCAction *pAction, float duration)$/;"	f	class:CCDeccelAmplitude
initWithAction	actions/CCActionInterval.cpp	/^bool CCRepeat::initWithAction(CCFiniteTimeAction *pAction, unsigned int times)$/;"	f	class:CCRepeat
initWithAction	actions/CCActionInterval.cpp	/^bool CCRepeatForever::initWithAction(CCActionInterval *pAction)$/;"	f	class:CCRepeatForever
initWithAction	actions/CCActionInterval.cpp	/^bool CCReverseTime::initWithAction(CCFiniteTimeAction *pAction)$/;"	f	class:CCReverseTime
initWithAnimation	actions/CCActionInterval.cpp	/^bool CCAnimate::initWithAnimation(CCAnimation *pAnimation)$/;"	f	class:CCAnimate
initWithAnimationFrames	sprite_nodes/CCAnimation.cpp	/^bool CCAnimation::initWithAnimationFrames(CCArray* arrayOfAnimationFrames, float delayPerUnit, unsigned int loops)$/;"	f	class:CCAnimation
initWithArray	cocoa/CCArray.cpp	/^bool CCArray::initWithArray(CCArray* otherArray)$/;"	f	class:CCArray
initWithArray	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerMultiplex::initWithArray(CCArray* arrayOfLayers)$/;"	f	class:CCLayerMultiplex
initWithArray	menu_nodes/CCMenu.cpp	/^bool CCMenu::initWithArray(CCArray* pArrayOfItems)$/;"	f	class:CCMenu
initWithCCPoint	tilemap_parallax_nodes/CCParallaxNode.cpp	/^    bool initWithCCPoint(CCPoint ratio, CCPoint offset)$/;"	f	class:CCPointObject	file:
initWithCapacity	actions/CCActionCatmullRom.cpp	/^bool CCPointArray::initWithCapacity(unsigned int capacity)$/;"	f	class:CCPointArray
initWithCapacity	cocoa/CCArray.cpp	/^bool CCArray::initWithCapacity(unsigned int capacity)$/;"	f	class:CCArray
initWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerColor::initWithColor(const ccColor4B& color)$/;"	f	class:CCLayerColor
initWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerColor::initWithColor(const ccColor4B& color, GLfloat w, GLfloat h)$/;"	f	class:CCLayerColor
initWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerGradient::initWithColor(const ccColor4B& start, const ccColor4B& end)$/;"	f	class:CCLayerGradient
initWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerGradient::initWithColor(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)$/;"	f	class:CCLayerGradient
initWithCols	actions/CCActionTiledGrid.cpp	/^bool CCSplitCols::initWithCols(int nCols, float duration)$/;"	f	class:CCSplitCols
initWithData	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithData(const void *data, CCTexture2DPixelFormat pixelFormat, unsigned int pixelsWide, unsigned int pixelsHigh, const CCSize& contentSize)$/;"	f	class:CCTexture2D
initWithDelegate	keypad_dispatcher/CCKeypadDelegate.cpp	/^bool CCKeypadHandler::initWithDelegate(CCKeypadDelegate *pDelegate)$/;"	f	class:CCKeypadHandler
initWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^bool CCStandardTouchHandler::initWithDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCStandardTouchHandler
initWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^bool CCTargetedTouchHandler::initWithDelegate(CCTouchDelegate *pDelegate, int nPriority, bool bSwallow)$/;"	f	class:CCTargetedTouchHandler
initWithDelegate	touch_dispatcher/CCTouchHandler.cpp	/^bool CCTouchHandler::initWithDelegate(CCTouchDelegate *pDelegate, int nPriority)$/;"	f	class:CCTouchHandler
initWithDictionary	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::initWithDictionary(CCDictionary *dictionary)$/;"	f	class:CCParticleSystem
initWithDictionary	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::initWithDictionary(CCDictionary *dictionary, const char *dirname)$/;"	f	class:CCParticleSystem
initWithDuration	actions/CCActionCamera.cpp	/^bool CCOrbitCamera::initWithDuration(float t, float radius, float deltaRadius, float angleZ, float deltaAngleZ, float angleX, float deltaAngleX)$/;"	f	class:CCOrbitCamera
initWithDuration	actions/CCActionCatmullRom.cpp	/^bool CCCardinalSplineTo::initWithDuration(float duration, cocos2d::CCPointArray *points, float tension)$/;"	f	class:CCCardinalSplineTo
initWithDuration	actions/CCActionCatmullRom.cpp	/^bool CCCatmullRomBy::initWithDuration(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomBy
initWithDuration	actions/CCActionCatmullRom.cpp	/^bool CCCatmullRomTo::initWithDuration(float dt, cocos2d::CCPointArray *points)$/;"	f	class:CCCatmullRomTo
initWithDuration	actions/CCActionGrid3D.cpp	/^bool CCFlipX3D::initWithDuration(float duration)$/;"	f	class:CCFlipX3D
initWithDuration	actions/CCActionInterval.cpp	/^bool CCActionInterval::initWithDuration(float d)$/;"	f	class:CCActionInterval
initWithDuration	actions/CCActionInterval.cpp	/^bool CCBezierBy::initWithDuration(float t, const ccBezierConfig& c)$/;"	f	class:CCBezierBy
initWithDuration	actions/CCActionInterval.cpp	/^bool CCBezierTo::initWithDuration(float t, const ccBezierConfig &c)$/;"	f	class:CCBezierTo
initWithDuration	actions/CCActionInterval.cpp	/^bool CCBlink::initWithDuration(float duration, unsigned int uBlinks)$/;"	f	class:CCBlink
initWithDuration	actions/CCActionInterval.cpp	/^bool CCFadeTo::initWithDuration(float duration, GLubyte opacity)$/;"	f	class:CCFadeTo
initWithDuration	actions/CCActionInterval.cpp	/^bool CCJumpBy::initWithDuration(float duration, const CCPoint& position, float height, unsigned int jumps)$/;"	f	class:CCJumpBy
initWithDuration	actions/CCActionInterval.cpp	/^bool CCMoveBy::initWithDuration(float duration, const CCPoint& position)$/;"	f	class:CCMoveBy
initWithDuration	actions/CCActionInterval.cpp	/^bool CCMoveTo::initWithDuration(float duration, const CCPoint& position)$/;"	f	class:CCMoveTo
initWithDuration	actions/CCActionInterval.cpp	/^bool CCRotateBy::initWithDuration(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateBy
initWithDuration	actions/CCActionInterval.cpp	/^bool CCRotateBy::initWithDuration(float fDuration, float fDeltaAngleX, float fDeltaAngleY)$/;"	f	class:CCRotateBy
initWithDuration	actions/CCActionInterval.cpp	/^bool CCRotateTo::initWithDuration(float fDuration, float fDeltaAngle)$/;"	f	class:CCRotateTo
initWithDuration	actions/CCActionInterval.cpp	/^bool CCRotateTo::initWithDuration(float fDuration, float fDeltaAngleX, float fDeltaAngleY)$/;"	f	class:CCRotateTo
initWithDuration	actions/CCActionInterval.cpp	/^bool CCScaleTo::initWithDuration(float duration, float s)$/;"	f	class:CCScaleTo
initWithDuration	actions/CCActionInterval.cpp	/^bool CCScaleTo::initWithDuration(float duration, float sx, float sy)$/;"	f	class:CCScaleTo
initWithDuration	actions/CCActionInterval.cpp	/^bool CCSkewBy::initWithDuration(float t, float deltaSkewX, float deltaSkewY)$/;"	f	class:CCSkewBy
initWithDuration	actions/CCActionInterval.cpp	/^bool CCSkewTo::initWithDuration(float t, float sx, float sy)$/;"	f	class:CCSkewTo
initWithDuration	actions/CCActionInterval.cpp	/^bool CCTintBy::initWithDuration(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue)$/;"	f	class:CCTintBy
initWithDuration	actions/CCActionInterval.cpp	/^bool CCTintTo::initWithDuration(float duration, GLubyte red, GLubyte green, GLubyte blue)$/;"	f	class:CCTintTo
initWithDuration	actions/CCActionProgressTimer.cpp	/^bool CCProgressFromTo::initWithDuration(float duration, float fFromPercentage, float fToPercentage)$/;"	f	class:CCProgressFromTo
initWithDuration	actions/CCActionProgressTimer.cpp	/^bool CCProgressTo::initWithDuration(float duration, float fPercent)$/;"	f	class:CCProgressTo
initWithDuration	actions/CCActionTween.cpp	/^bool CCActionTween::initWithDuration(float aDuration, const char* key, float from, float to)$/;"	f	class:CCActionTween
initWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^bool CCTransitionFade::initWithDuration(float duration, CCScene *scene, const ccColor3B& color)$/;"	f	class:CCTransitionFade
initWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^bool CCTransitionFade::initWithDuration(float t, CCScene *scene)$/;"	f	class:CCTransitionFade
initWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^bool CCTransitionScene::initWithDuration(float t, CCScene *scene)$/;"	f	class:CCTransitionScene
initWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^bool CCTransitionSceneOriented::initWithDuration(float t, CCScene *scene, tOrientation orientation)$/;"	f	class:CCTransitionSceneOriented
initWithDuration	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^bool CCTransitionPageTurn::initWithDuration(float t, CCScene *scene, bool backwards)$/;"	f	class:CCTransitionPageTurn
initWithFNTfile	label_nodes/CCLabelBMFont.cpp	/^bool CCBMFontConfiguration::initWithFNTfile(const char *FNTfile)$/;"	f	class:CCBMFontConfiguration
initWithFade	misc_nodes/CCMotionStreak.cpp	/^bool CCMotionStreak::initWithFade(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)$/;"	f	class:CCMotionStreak
initWithFade	misc_nodes/CCMotionStreak.cpp	/^bool CCMotionStreak::initWithFade(float fade, float minSeg, float stroke, ccColor3B color, const char* path)$/;"	f	class:CCMotionStreak
initWithFile	particle_nodes/CCParticleBatchNode.cpp	/^bool CCParticleBatchNode::initWithFile(const char* fileImage, unsigned int capacity)$/;"	f	class:CCParticleBatchNode
initWithFile	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::initWithFile(const char *plistFile)$/;"	f	class:CCParticleSystem
initWithFile	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithFile(const char *pszFilename)$/;"	f	class:CCSprite
initWithFile	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithFile(const char *pszFilename, const CCRect& rect)$/;"	f	class:CCSprite
initWithFile	sprite_nodes/CCSpriteBatchNode.cpp	/^bool CCSpriteBatchNode::initWithFile(const char* fileImage, unsigned int capacity)$/;"	f	class:CCSpriteBatchNode
initWithFile	textures/CCTextureAtlas.cpp	/^bool CCTextureAtlas::initWithFile(const char * file, unsigned int capacity)$/;"	f	class:CCTextureAtlas
initWithFlipX	actions/CCActionInstant.cpp	/^bool CCFlipX::initWithFlipX(bool x) {$/;"	f	class:CCFlipX
initWithFlipY	actions/CCActionInstant.cpp	/^bool CCFlipY::initWithFlipY(bool y) {$/;"	f	class:CCFlipY
initWithFormat	cocoa/CCString.cpp	/^bool CCString::initWithFormat(const char* format, ...)$/;"	f	class:CCString
initWithFormatAndValist	cocoa/CCString.cpp	/^bool CCString::initWithFormatAndValist(const char* format, va_list ap)$/;"	f	class:CCString
initWithImage	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithImage(CCImage *uiImage)$/;"	f	class:CCTexture2D
initWithImageData	platform/CCImageCommon_cpp.h	/^bool CCImage::initWithImageData(void * pData, $/;"	f	class:CCImage
initWithImageFile	platform/CCImageCommon_cpp.h	/^bool CCImage::initWithImageFile(const char * strPath, EImageFormat eImgFmt\/* = eFmtPng*\/)$/;"	f	class:CCImage
initWithImageFileThreadSafe	platform/CCImageCommon_cpp.h	/^bool CCImage::initWithImageFileThreadSafe(const char *fullpath, EImageFormat imageType)$/;"	f	class:CCImage
initWithItem	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemToggle::initWithItem(CCMenuItem *item)$/;"	f	class:CCMenuItemToggle
initWithJumps	actions/CCActionTiledGrid.cpp	/^bool CCJumpTiles3D::initWithJumps(int j, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCJumpTiles3D
initWithLabel	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemLabel::initWithLabel(CCNode* label, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemLabel
initWithLayers	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerMultiplex::initWithLayers(CCLayer *layer, va_list params)$/;"	f	class:CCLayerMultiplex
initWithName	support/CCProfiling.cpp	/^bool CCProfilingTimer::initWithName(const char* timerName)$/;"	f	class:CCProfilingTimer
initWithNormalImage	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemImage::initWithNormalImage(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemImage
initWithNormalSprite	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemSprite::initWithNormalSprite(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemSprite
initWithObject	cocoa/CCArray.cpp	/^bool CCArray::initWithObject(CCObject* pObject)$/;"	f	class:CCArray
initWithObjects	cocoa/CCArray.cpp	/^bool CCArray::initWithObjects(CCObject* pObject, ...)$/;"	f	class:CCArray
initWithPVRFile	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithPVRFile(const char* file)$/;"	f	class:CCTexture2D
initWithPVRTCData	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithPVRTCData(const void *data, int level, int bpp, bool hasAlpha, int length, CCTexture2DPixelFormat pixelFormat)$/;"	f	class:CCTexture2D
initWithPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::initWithPlaceHolder(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)$/;"	f	class:CCTextFieldTTF
initWithPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^bool CCTextFieldTTF::initWithPlaceHolder(const char *placeholder, const char *fontName, float fontSize)$/;"	f	class:CCTextFieldTTF
initWithPosition	actions/CCActionGrid3D.cpp	/^bool CCLens3D::initWithPosition(const CCPoint& pos, float r, const ccGridSize& gridSize, float duration)$/;"	f	class:CCLens3D
initWithPosition	actions/CCActionGrid3D.cpp	/^bool CCRipple3D::initWithPosition(const CCPoint& pos, float r, int wav, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCRipple3D
initWithPosition	actions/CCActionGrid3D.cpp	/^bool CCTwirl::initWithPosition(const CCPoint& pos, int t, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCTwirl
initWithPosition	actions/CCActionInstant.cpp	/^bool CCPlace::initWithPosition(const CCPoint& pos) {$/;"	f	class:CCPlace
initWithRange	actions/CCActionGrid3D.cpp	/^bool CCShaky3D::initWithRange(int range, bool shakeZ, const ccGridSize& gridSize, float duration)$/;"	f	class:CCShaky3D
initWithRange	actions/CCActionTiledGrid.cpp	/^bool CCShakyTiles3D::initWithRange(int nRange, bool bShakeZ, const ccGridSize& gridSize, float duration)$/;"	f	class:CCShakyTiles3D
initWithRange	actions/CCActionTiledGrid.cpp	/^bool CCShatteredTiles3D::initWithRange(int nRange, bool bShatterZ, const ccGridSize& gridSize,  float duration)$/;"	f	class:CCShatteredTiles3D
initWithRows	actions/CCActionTiledGrid.cpp	/^bool CCSplitRows::initWithRows(int nRows, float duration)$/;"	f	class:CCSplitRows
initWithScriptHandler	CCScheduler.cpp	/^bool CCTimer::initWithScriptHandler(int nHandler, float fSeconds)$/;"	f	class:CCTimer
initWithSeed	actions/CCActionTiledGrid.cpp	/^bool CCShuffleTiles::initWithSeed(int s, const ccGridSize& gridSize, float duration)$/;"	f	class:CCShuffleTiles
initWithSeed	actions/CCActionTiledGrid.cpp	/^bool CCTurnOffTiles::initWithSeed(int s, const ccGridSize& gridSize, float duration)$/;"	f	class:CCTurnOffTiles
initWithSize	actions/CCActionGrid.cpp	/^bool CCGridAction::initWithSize(const ccGridSize& gridSize, float duration)$/;"	f	class:CCGridAction
initWithSize	actions/CCActionGrid3D.cpp	/^bool CCFlipX3D::initWithSize(const ccGridSize& gridSize, float duration)$/;"	f	class:CCFlipX3D
initWithSize	effects/CCGrid.cpp	/^bool CCGridBase::initWithSize(const ccGridSize& gridSize)$/;"	f	class:CCGridBase
initWithSize	effects/CCGrid.cpp	/^bool CCGridBase::initWithSize(const ccGridSize& gridSize, CCTexture2D *pTexture, bool bFlipped)$/;"	f	class:CCGridBase
initWithSprite	misc_nodes/CCProgressTimer.cpp	/^bool CCProgressTimer::initWithSprite(CCSprite* sp)$/;"	f	class:CCProgressTimer
initWithSpriteFrame	sprite_nodes/CCAnimation.cpp	/^bool CCAnimationFrame::initWithSpriteFrame(CCSpriteFrame* spriteFrame, float delayUnits, CCDictionary* userInfo)$/;"	f	class:CCAnimationFrame
initWithSpriteFrame	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithSpriteFrame(CCSpriteFrame *pSpriteFrame)$/;"	f	class:CCSprite
initWithSpriteFrameName	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithSpriteFrameName(const char *pszSpriteFrameName)$/;"	f	class:CCSprite
initWithSpriteFrames	sprite_nodes/CCAnimation.cpp	/^bool CCAnimation::initWithSpriteFrames(CCArray *pFrames, float delay\/* = 0.0f*\/)$/;"	f	class:CCAnimation
initWithString	label_nodes/CCLabelAtlas.cpp	/^bool CCLabelAtlas::initWithString(const char *string, const char *charMapFile, unsigned int itemWidth, unsigned int itemHeight, unsigned int startCharMap)$/;"	f	class:CCLabelAtlas
initWithString	label_nodes/CCLabelAtlas.cpp	/^bool CCLabelAtlas::initWithString(const char *theString, const char *fntFile)$/;"	f	class:CCLabelAtlas
initWithString	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::initWithString(const char *theString, const char *fntFile, float width\/* = kCCLabelAutomaticWidth*\/, CCTextAlignment alignment\/* = kCCTextAlignmentLeft*\/, CCPoint imageOffset\/* = CCPointZero*\/)$/;"	f	class:CCLabelBMFont
initWithString	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::initWithString(const char *label, const char *fontName, float fontSize)$/;"	f	class:CCLabelTTF
initWithString	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::initWithString(const char *label, const char *fontName, float fontSize, $/;"	f	class:CCLabelTTF
initWithString	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::initWithString(const char *string, const char *fontName, float fontSize,$/;"	f	class:CCLabelTTF
initWithString	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemAtlasFont::initWithString(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemAtlasFont
initWithString	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemFont::initWithString(const char *value, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemFont
initWithString	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithString(const char *text, const char *fontName, float fontSize)$/;"	f	class:CCTexture2D
initWithString	textures/CCTexture2D.cpp	/^bool CCTexture2D::initWithString(const char *text, const char *fontName, float fontSize, const CCSize& dimensions, CCTextAlignment hAlignment, CCVerticalTextAlignment vAlignment)$/;"	f	class:CCTexture2D
initWithTMXFile	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^bool CCTMXTiledMap::initWithTMXFile(const char *tmxFile)$/;"	f	class:CCTMXTiledMap
initWithTMXFile	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^bool CCTMXMapInfo::initWithTMXFile(const char *tmxFile)$/;"	f	class:CCTMXMapInfo
initWithTarget	CCScheduler.cpp	/^bool CCTimer::initWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector)$/;"	f	class:CCTimer
initWithTarget	CCScheduler.cpp	/^bool CCTimer::initWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds, unsigned int nRepeat, float fDelay)$/;"	f	class:CCTimer
initWithTarget	actions/CCAction.cpp	/^bool CCFollow::initWithTarget(CCNode *pFollowedNode, const CCRect& rect\/* = CCRectZero*\/)$/;"	f	class:CCFollow
initWithTarget	actions/CCActionInstant.cpp	/^bool CCCallFunc::initWithTarget(CCObject* pSelectorTarget) {$/;"	f	class:CCCallFunc
initWithTarget	actions/CCActionInstant.cpp	/^bool CCCallFuncN::initWithTarget(CCObject* pSelectorTarget,$/;"	f	class:CCCallFuncN
initWithTarget	actions/CCActionInstant.cpp	/^bool CCCallFuncND::initWithTarget(CCObject* pSelectorTarget,$/;"	f	class:CCCallFuncND
initWithTarget	actions/CCActionInstant.cpp	/^bool CCCallFuncO::initWithTarget(CCObject* pSelectorTarget,$/;"	f	class:CCCallFuncO
initWithTarget	actions/CCActionInterval.cpp	/^bool CCTargetedAction::initWithTarget(CCNode* pTarget, CCFiniteTimeAction* pAction)$/;"	f	class:CCTargetedAction
initWithTarget	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItem::initWithTarget(CCObject *rec, SEL_MenuHandler selector)$/;"	f	class:CCMenuItem
initWithTarget	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItemToggle::initWithTarget(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, va_list args)$/;"	f	class:CCMenuItemToggle
initWithTexture	particle_nodes/CCParticleBatchNode.cpp	/^bool CCParticleBatchNode::initWithTexture(CCTexture2D *tex, unsigned int capacity)$/;"	f	class:CCParticleBatchNode
initWithTexture	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithTexture(CCTexture2D *pTexture)$/;"	f	class:CCSprite
initWithTexture	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithTexture(CCTexture2D *pTexture, const CCRect& rect)$/;"	f	class:CCSprite
initWithTexture	sprite_nodes/CCSprite.cpp	/^bool CCSprite::initWithTexture(CCTexture2D *pTexture, const CCRect& rect, bool rotated)$/;"	f	class:CCSprite
initWithTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^bool CCSpriteBatchNode::initWithTexture(CCTexture2D *tex, unsigned int capacity)$/;"	f	class:CCSpriteBatchNode
initWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^bool CCSpriteFrame::initWithTexture(CCTexture2D* pobTexture, const CCRect& rect)$/;"	f	class:CCSpriteFrame
initWithTexture	sprite_nodes/CCSpriteFrame.cpp	/^bool CCSpriteFrame::initWithTexture(CCTexture2D* pobTexture, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame
initWithTexture	textures/CCTextureAtlas.cpp	/^bool CCTextureAtlas::initWithTexture(CCTexture2D *texture, unsigned int capacity)$/;"	f	class:CCTextureAtlas
initWithTextureFilename	sprite_nodes/CCSpriteFrame.cpp	/^bool CCSpriteFrame::initWithTextureFilename(const char* filename, const CCRect& rect)$/;"	f	class:CCSpriteFrame
initWithTextureFilename	sprite_nodes/CCSpriteFrame.cpp	/^bool CCSpriteFrame::initWithTextureFilename(const char* filename, const CCRect& rect, bool rotated, const CCPoint& offset, const CCSize& originalSize)$/;"	f	class:CCSpriteFrame
initWithTileFile	base_nodes/CCAtlasNode.cpp	/^bool CCAtlasNode::initWithTileFile(const char *tile, unsigned int tileWidth, unsigned int tileHeight, $/;"	f	class:CCAtlasNode
initWithTileFile	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^bool CCTileMapAtlas::initWithTileFile(const char *tile, const char *mapFile, int tileWidth, int tileHeight)$/;"	f	class:CCTileMapAtlas
initWithTilesetInfo	tilemap_parallax_nodes/CCTMXLayer.cpp	/^bool CCTMXLayer::initWithTilesetInfo(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXLayer
initWithTimes	actions/CCActionGrid.cpp	/^bool CCReuseGrid::initWithTimes(int times)$/;"	f	class:CCReuseGrid
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleExplosion::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleExplosion
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleFire::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFire
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleFireworks::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFireworks
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleFlower::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleFlower
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleGalaxy::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleGalaxy
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleMeteor::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleMeteor
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleRain::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleRain
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleSmoke::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSmoke
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleSnow::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSnow
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleSpiral::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSpiral
initWithTotalParticles	particle_nodes/CCParticleExamples.cpp	/^bool CCParticleSun::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSun
initWithTotalParticles	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSystem
initWithTotalParticles	particle_nodes/CCParticleSystemQuad.cpp	/^bool CCParticleSystemQuad::initWithTotalParticles(unsigned int numberOfParticles)$/;"	f	class:CCParticleSystemQuad
initWithTwoActions	actions/CCActionInterval.cpp	/^bool CCSequence::initWithTwoActions(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo)$/;"	f	class:CCSequence
initWithTwoActions	actions/CCActionInterval.cpp	/^bool CCSpawn:: initWithTwoActions(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2)$/;"	f	class:CCSpawn
initWithVertexShaderByteArray	shaders/CCGLProgram.cpp	/^bool CCGLProgram::initWithVertexShaderByteArray(const GLchar* vShaderByteArray, const GLchar* fShaderByteArray)$/;"	f	class:CCGLProgram
initWithVertexShaderFilename	shaders/CCGLProgram.cpp	/^bool CCGLProgram::initWithVertexShaderFilename(const char* vShaderFilename, const char* fShaderFilename)$/;"	f	class:CCGLProgram
initWithWaves	actions/CCActionGrid3D.cpp	/^bool CCLiquid::initWithWaves(int wav, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCLiquid
initWithWaves	actions/CCActionGrid3D.cpp	/^bool CCWaves3D::initWithWaves(int wav, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCWaves3D
initWithWaves	actions/CCActionGrid3D.cpp	/^bool CCWaves::initWithWaves(int wav, float amp, bool h, bool v, const ccGridSize& gridSize, float duration)$/;"	f	class:CCWaves
initWithWaves	actions/CCActionTiledGrid.cpp	/^bool CCWavesTiles3D::initWithWaves(int wav, float amp, const ccGridSize& gridSize, float duration)$/;"	f	class:CCWavesTiles3D
initWithWidthAndHeight	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::initWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat)$/;"	f	class:CCRenderTexture
initWithWidthAndHeight	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::initWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)$/;"	f	class:CCRenderTexture
initWithXML	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^bool CCTMXTiledMap::initWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXTiledMap
initWithXML	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^bool CCTMXMapInfo::initWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXMapInfo
initXMLFilePath	support/CCUserDefault.cpp	/^void CCUserDefault::initXMLFilePath()$/;"	f	class:CCUserDefault
initialized	kazmath/src/GL/matrix.c	/^static unsigned char initialized = 0;$/;"	v	file:
insertChild	base_nodes/CCNode.cpp	/^void CCNode::insertChild(CCNode* child, int z)$/;"	f	class:CCNode
insertChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::insertChild(CCParticleSystem* pSystem, unsigned int index)$/;"	f	class:CCParticleBatchNode
insertChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::insertChild(CCSprite *pSprite, unsigned int uIndex)$/;"	f	class:CCSpriteBatchNode
insertControlPoint	actions/CCActionCatmullRom.cpp	/^void CCPointArray::insertControlPoint(CCPoint &controlPoint, unsigned int index)$/;"	f	class:CCPointArray
insertObject	cocoa/CCArray.cpp	/^void CCArray::insertObject(CCObject* object, unsigned int index)$/;"	f	class:CCArray
insertQuad	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::insertQuad(ccV3F_C4B_T2F_Quad *quad, unsigned int index)$/;"	f	class:CCTextureAtlas
insertQuadFromIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::insertQuadFromIndex(unsigned int oldIndex, unsigned int newIndex)$/;"	f	class:CCTextureAtlas
insertQuadFromSprite	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::insertQuadFromSprite(CCSprite *sprite, unsigned int index)$/;"	f	class:CCSpriteBatchNode
insertQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::insertQuads(ccV3F_C4B_T2F_Quad* quads, unsigned int index, unsigned int amount)$/;"	f	class:CCTextureAtlas
insertText	text_input_node/CCIMEDelegate.h	/^    virtual void insertText(const char * text, int len) {CC_UNUSED_PARAM(text);CC_UNUSED_PARAM(len);}$/;"	f	class:CCIMEDelegate
insertText	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::insertText(const char * text, int len)$/;"	f	class:CCTextFieldTTF
insertTileForGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite * CCTMXLayer::insertTileForGID(unsigned int gid, const CCPoint& pos)$/;"	f	class:CCTMXLayer
intValue	cocoa/CCString.cpp	/^int CCString::intValue() const$/;"	f	class:CCString
integerWithInt	cocoa/CCInteger.h	/^    CC_DEPRECATED_ATTRIBUTE static CCInteger* integerWithInt(int v)$/;"	f	class:CCInteger
internalFormat	textures/CCTexturePVR.h	/^	GLenum internalFormat;$/;"	m	struct:_ccPVRTexturePixelFormatInfo
internalInit	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::internalInit(const char* tmxFileName, const char* resourcePath)$/;"	f	class:CCTMXMapInfo
internal_fa	support/zip_support/unzip.h	/^    uLong internal_fa;          \/* internal file attributes        2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
internal_fa	support/zip_support/unzip.h	/^    uLong internal_fa;          \/* internal file attributes        2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
intersectsRect	cocoa/CCGeometry.cpp	/^bool CCRect::intersectsRect(const CCRect& rect) const$/;"	f	class:CCRect
is64bitOpenFunction	support/zip_support/unzip.cpp	/^    int is64bitOpenFunction;$/;"	m	struct:cocos2d::__anon38	file:
isAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::isAccelerometerEnabled()$/;"	f	class:CCLayer
isActive	effects/CCGrid.h	/^    inline bool isActive(void) { return m_bActive; }$/;"	f	class:CCGridBase
isActive	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::isActive()$/;"	f	class:CCParticleSystem
isAutoDraw	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::isAutoDraw() const$/;"	f	class:CCRenderTexture
isAutoRemoveOnFinish	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::isAutoRemoveOnFinish()$/;"	f	class:CCParticleSystem
isBlendAdditive	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::isBlendAdditive()$/;"	f	class:CCParticleSystem
isBoundarySet	actions/CCAction.h	/^    inline bool isBoundarySet(void) { return m_bBoundarySet; }$/;"	f	class:CCFollow
isCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayerGradient::isCompressedInterpolation()$/;"	f	class:CCLayerGradient
isDirty	CCCamera.h	/^    inline bool isDirty(void) { return m_bDirty; }$/;"	f	class:CCCamera
isDirty	sprite_nodes/CCSprite.h	/^    inline virtual bool isDirty(void) { return m_bDirty; }$/;"	f	class:CCSprite
isDispatchEvents	touch_dispatcher/CCTouchDispatcher.cpp	/^bool CCTouchDispatcher::isDispatchEvents(void)$/;"	f	class:CCTouchDispatcher
isDisplayStats	CCDirector.h	/^    inline bool isDisplayStats(void) { return m_bDisplayStats; }$/;"	f	class:CCDirector
isDone	actions/CCAction.cpp	/^bool CCAction::isDone()$/;"	f	class:CCAction
isDone	actions/CCAction.cpp	/^bool CCFollow::isDone()$/;"	f	class:CCFollow
isDone	actions/CCAction.cpp	/^bool CCSpeed::isDone()$/;"	f	class:CCSpeed
isDone	actions/CCActionInstant.cpp	/^bool CCActionInstant::isDone() {$/;"	f	class:CCActionInstant
isDone	actions/CCActionInterval.cpp	/^bool CCActionInterval::isDone(void)$/;"	f	class:CCActionInterval
isDone	actions/CCActionInterval.cpp	/^bool CCRepeat::isDone(void)$/;"	f	class:CCRepeat
isDone	actions/CCActionInterval.cpp	/^bool CCRepeatForever::isDone()$/;"	f	class:CCRepeatForever
isEnabled	menu_nodes/CCMenu.h	/^    virtual bool isEnabled() { return m_bEnabled; }$/;"	f	class:CCMenu
isEnabled	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItem::isEnabled()$/;"	f	class:CCMenuItem
isEqual	cocoa/CCObject.cpp	/^bool CCObject::isEqual(const CCObject *pObject)$/;"	f	class:CCObject
isEqual	cocoa/CCString.cpp	/^bool CCString::isEqual(const CCObject* pObject)$/;"	f	class:CCString
isEqualToArray	cocoa/CCArray.cpp	/^bool CCArray::isEqualToArray(CCArray* otherArray)$/;"	f	class:CCArray
isFastMode	misc_nodes/CCMotionStreak.h	/^    inline bool isFastMode() { return m_bFastMode; }$/;"	f	class:CCMotionStreak
isFlipX	sprite_nodes/CCSprite.cpp	/^bool CCSprite::isFlipX(void)$/;"	f	class:CCSprite
isFlipY	sprite_nodes/CCSprite.cpp	/^bool CCSprite::isFlipY(void)$/;"	f	class:CCSprite
isFrameDisplayed	sprite_nodes/CCSprite.cpp	/^bool CCSprite::isFrameDisplayed(CCSpriteFrame *pFrame)$/;"	f	class:CCSprite
isFull	particle_nodes/CCParticleSystem.cpp	/^bool CCParticleSystem::isFull()$/;"	f	class:CCParticleSystem
isIgnoreAnchorPointForPosition	base_nodes/CCNode.cpp	/^bool CCNode::isIgnoreAnchorPointForPosition()$/;"	f	class:CCNode
isInverted	misc_nodes/CCClippingNode.cpp	/^bool CCClippingNode::isInverted() const$/;"	f	class:CCClippingNode
isKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::isKeypadEnabled()$/;"	f	class:CCLayer
isMarkedForDeletion	script_support/CCScriptSupport.h	/^    bool isMarkedForDeletion(void) {$/;"	f	class:CCSchedulerScriptHandlerEntry
isMultiTouches	script_support/CCScriptSupport.h	/^    bool isMultiTouches(void) {$/;"	f	class:CCTouchScriptHandlerEntry
isNextDeltaTimeZero	CCDirector.h	/^    inline bool isNextDeltaTimeZero(void) { return m_bNextDeltaTimeZero; }$/;"	f	class:CCDirector
isOpacityModifyRGB	base_nodes/CCAtlasNode.cpp	/^bool CCAtlasNode::isOpacityModifyRGB()$/;"	f	class:CCAtlasNode
isOpacityModifyRGB	label_nodes/CCLabelBMFont.cpp	/^bool CCLabelBMFont::isOpacityModifyRGB()$/;"	f	class:CCLabelBMFont
isOpacityModifyRGB	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCLayerColor
isOpacityModifyRGB	menu_nodes/CCMenu.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCMenu
isOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCMenuItemLabel
isOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCMenuItemSprite
isOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual bool isOpacityModifyRGB(void) { return false;}$/;"	f	class:CCMenuItemToggle
isOpacityModifyRGB	misc_nodes/CCMotionStreak.cpp	/^bool CCMotionStreak::isOpacityModifyRGB(void)$/;"	f	class:CCMotionStreak
isOpacityModifyRGB	misc_nodes/CCProgressTimer.cpp	/^bool CCProgressTimer::isOpacityModifyRGB(void)$/;"	f	class:CCProgressTimer
isOpacityModifyRGB	sprite_nodes/CCSprite.cpp	/^bool CCSprite::isOpacityModifyRGB(void)$/;"	f	class:CCSprite
isPaused	CCDirector.h	/^    inline bool isPaused(void) { return m_bPaused; }$/;"	f	class:CCDirector
isPaused	script_support/CCScriptSupport.h	/^    bool isPaused(void) {$/;"	f	class:CCSchedulerScriptHandlerEntry
isPopupNotify	platform/CCFileUtilsCommon_cpp.h	/^bool CCFileUtils::isPopupNotify()$/;"	f	class:CCFileUtils
isPremultipliedAlpha	platform/CCImage.h	/^    bool isPremultipliedAlpha()         { return m_bPreMulti; }$/;"	f	class:CCImage
isReloading	textures/CCTextureCache.cpp	/^bool VolatileTexture::isReloading = false;$/;"	m	class:VolatileTexture	file:
isReloading	textures/CCTextureCache.h	/^    static bool isReloading;$/;"	m	class:VolatileTexture
isRetainName	textures/CCTexturePVR.h	/^    inline bool isRetainName() { return m_bRetainName; }$/;"	f	class:CCTexturePVR
isReverseDirection	misc_nodes/CCProgressTimer.h	/^    inline bool isReverseDirection() { return m_bReverseDirection; };$/;"	f	class:CCProgressTimer
isRotated	sprite_nodes/CCSpriteFrame.h	/^    inline bool isRotated(void) { return m_bRotated; }$/;"	f	class:CCSpriteFrame
isRunning	base_nodes/CCNode.cpp	/^bool CCNode::isRunning()$/;"	f	class:CCNode
isSelected	menu_nodes/CCMenuItem.cpp	/^bool CCMenuItem::isSelected()$/;"	f	class:CCMenuItem
isSendCleanupToScene	CCDirector.h	/^    inline bool isSendCleanupToScene(void) { return m_bSendCleanupToScene; }$/;"	f	class:CCDirector
isSingleReference	cocoa/CCObject.cpp	/^bool CCObject::isSingleReference(void)$/;"	f	class:CCObject
isStartingPositionInitialized	misc_nodes/CCMotionStreak.h	/^    inline bool isStartingPositionInitialized() { return m_bStartingPositionInitialized; }$/;"	f	class:CCMotionStreak
isSwallowsTouches	touch_dispatcher/CCTouchHandler.cpp	/^bool CCTargetedTouchHandler::isSwallowsTouches(void)$/;"	f	class:CCTargetedTouchHandler
isTargetPaused	CCScheduler.cpp	/^bool CCScheduler::isTargetPaused(CCObject *pTarget)$/;"	f	class:CCScheduler
isTextureFlipped	effects/CCGrid.h	/^    inline bool isTextureFlipped(void) { return m_bIsTextureFlipped; }$/;"	f	class:CCGridBase
isTextureRectRotated	sprite_nodes/CCSprite.h	/^    inline bool isTextureRectRotated(void) { return m_bRectRotated; }$/;"	f	class:CCSprite
isTouchEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^bool CCLayer::isTouchEnabled()$/;"	f	class:CCLayer
isVisible	base_nodes/CCNode.cpp	/^bool CCNode::isVisible()$/;"	f	class:CCNode
isXMLFileExist	support/CCUserDefault.cpp	/^bool CCUserDefault::isXMLFileExist()$/;"	f	class:CCUserDefault
isZip64	support/zip_support/unzip.cpp	/^    int isZip64;$/;"	m	struct:cocos2d::__anon38	file:
isspace_unicode	label_nodes/CCLabelBMFont.cpp	/^static bool isspace_unicode(unsigned short ch)$/;"	f	file:
itemForTouch	menu_nodes/CCMenu.cpp	/^CCMenuItem* CCMenu::itemForTouch(CCTouch *touch)$/;"	f	class:CCMenu
itemWithItem	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle* CCMenuItemToggle::itemWithItem(CCMenuItem *item)$/;"	f	class:CCMenuItemToggle
itemWithLabel	menu_nodes/CCMenuItem.cpp	/^CCMenuItemLabel * CCMenuItemLabel::itemWithLabel(CCNode*label, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemLabel
itemWithLabel	menu_nodes/CCMenuItem.cpp	/^CCMenuItemLabel* CCMenuItemLabel::itemWithLabel(CCNode *label)$/;"	f	class:CCMenuItemLabel
itemWithNormalImage	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::itemWithNormalImage(const char *normalImage, const char *selectedImage)$/;"	f	class:CCMenuItemImage
itemWithNormalImage	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::itemWithNormalImage(const char *normalImage, const char *selectedImage, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemImage
itemWithNormalImage	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::itemWithNormalImage(const char *normalImage, const char *selectedImage, const char *disabledImage)$/;"	f	class:CCMenuItemImage
itemWithNormalImage	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage * CCMenuItemImage::itemWithNormalImage(const char *normalImage, const char *selectedImage, const char *disabledImage, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemImage
itemWithNormalSprite	menu_nodes/CCMenuItem.cpp	/^CCMenuItemSprite * CCMenuItemSprite::itemWithNormalSprite(CCNode *normalSprite, CCNode *selectedSprite, CCNode *disabledSprite, CCObject *target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemSprite
itemWithNormalSprite	menu_nodes/CCMenuItem.cpp	/^CCMenuItemSprite * CCMenuItemSprite::itemWithNormalSprite(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite)$/;"	f	class:CCMenuItemSprite
itemWithNormalSprite	menu_nodes/CCMenuItem.cpp	/^CCMenuItemSprite * CCMenuItemSprite::itemWithNormalSprite(CCNode* normalSprite, CCNode* selectedSprite, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemSprite
itemWithString	menu_nodes/CCMenuItem.cpp	/^CCMenuItemAtlasFont * CCMenuItemAtlasFont::itemWithString(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap)$/;"	f	class:CCMenuItemAtlasFont
itemWithString	menu_nodes/CCMenuItem.cpp	/^CCMenuItemAtlasFont * CCMenuItemAtlasFont::itemWithString(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemAtlasFont
itemWithString	menu_nodes/CCMenuItem.cpp	/^CCMenuItemFont * CCMenuItemFont::itemWithString(const char *value)$/;"	f	class:CCMenuItemFont
itemWithString	menu_nodes/CCMenuItem.cpp	/^CCMenuItemFont * CCMenuItemFont::itemWithString(const char *value, CCObject* target, SEL_MenuHandler selector)$/;"	f	class:CCMenuItemFont
itemWithTarget	menu_nodes/CCMenuItem.cpp	/^CCMenuItem* CCMenuItem::itemWithTarget(CCObject *rec, SEL_MenuHandler selector)$/;"	f	class:CCMenuItem
itemWithTarget	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle * CCMenuItemToggle::itemWithTarget(CCObject* target, SEL_MenuHandler selector, CCMenuItem* item, ...)$/;"	f	class:CCMenuItemToggle
item_count	kazmath/include/kazmath/GL/mat4stack.h	/^    int item_count; \/\/The number of items$/;"	m	struct:km_mat4_stack
kAlignBottom	platform/CCImage.h	/^        kAlignBottom        = 0x23, \/\/\/< Horizontal center and vertical bottom.$/;"	e	enum:CCImage::__anon29
kAlignBottomLeft	platform/CCImage.h	/^        kAlignBottomLeft    = 0x21, \/\/\/< Horizontal left and vertical bottom.$/;"	e	enum:CCImage::__anon29
kAlignBottomRight	platform/CCImage.h	/^        kAlignBottomRight   = 0x22, \/\/\/< Horizontal right and vertical bottom.$/;"	e	enum:CCImage::__anon29
kAlignCenter	platform/CCImage.h	/^        kAlignCenter        = 0x33, \/\/\/< Horizontal center and vertical center.$/;"	e	enum:CCImage::__anon29
kAlignLeft	platform/CCImage.h	/^        kAlignLeft          = 0x31, \/\/\/< Horizontal left and vertical center.$/;"	e	enum:CCImage::__anon29
kAlignRight	platform/CCImage.h	/^        kAlignRight         = 0x32, \/\/\/< Horizontal right and vertical center.$/;"	e	enum:CCImage::__anon29
kAlignTop	platform/CCImage.h	/^        kAlignTop           = 0x13, \/\/\/< Horizontal center and vertical top.$/;"	e	enum:CCImage::__anon29
kAlignTopLeft	platform/CCImage.h	/^        kAlignTopLeft       = 0x11, \/\/\/< Horizontal left and vertical top.$/;"	e	enum:CCImage::__anon29
kAlignTopRight	platform/CCImage.h	/^        kAlignTopRight      = 0x12, \/\/\/< Horizontal right and vertical top.$/;"	e	enum:CCImage::__anon29
kCCActionTagInvalid	actions/CCAction.h	/^    kCCActionTagInvalid = -1,$/;"	e	enum:__anon2
kCCAttributeNameColor	shaders/CCGLProgram.h	85;"	d
kCCAttributeNamePosition	shaders/CCGLProgram.h	86;"	d
kCCAttributeNameTexCoord	shaders/CCGLProgram.h	87;"	d
kCCBlendFuncDisable	include/ccTypes.h	/^static const ccBlendFunc kCCBlendFuncDisable = {GL_ONE, GL_ZERO};$/;"	v
kCCDictInt	cocoa/CCDictionary.h	/^        kCCDictInt$/;"	e	enum:CCDictionary::CCDictType
kCCDictStr	cocoa/CCDictionary.h	/^        kCCDictStr,$/;"	e	enum:CCDictionary::CCDictType
kCCDictUnknown	cocoa/CCDictionary.h	/^        kCCDictUnknown = 0,$/;"	e	enum:CCDictionary::CCDictType
kCCDirectorProjection2D	CCDirector.h	/^    kCCDirectorProjection2D,$/;"	e	enum:__anon1
kCCDirectorProjection3D	CCDirector.h	/^    kCCDirectorProjection3D,$/;"	e	enum:__anon1
kCCDirectorProjectionCustom	CCDirector.h	/^    kCCDirectorProjectionCustom,$/;"	e	enum:__anon1
kCCDirectorProjectionDefault	CCDirector.h	/^    kCCDirectorProjectionDefault = kCCDirectorProjection3D,$/;"	e	enum:__anon1
kCCFlipedAll	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    kCCFlipedAll                    = (kCCTMXTileHorizontalFlag|kCCTMXTileVerticalFlag|kCCTMXTileDiagonalFlag),$/;"	e	enum:ccTMXTileFlags_
kCCFlippedMask	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    kCCFlippedMask                    = ~(kCCFlipedAll)$/;"	e	enum:ccTMXTileFlags_
kCCImageFormatJPEG	misc_nodes/CCRenderTexture.h	/^    kCCImageFormatJPEG      = 0,$/;"	e	enum:eImageFormat
kCCImageFormatPNG	misc_nodes/CCRenderTexture.h	/^    kCCImageFormatPNG       = 1,$/;"	e	enum:eImageFormat
kCCItemSize	menu_nodes/CCMenuItem.h	40;"	d
kCCLabelAutomaticWidth	label_nodes/CCLabelBMFont.h	/^    kCCLabelAutomaticWidth = -1,$/;"	e	enum:__anon10
kCCMaxActiveTexture	shaders/ccGLStateCache.cpp	46;"	d	file:
kCCMenuHandlerPriority	menu_nodes/CCMenu.h	/^    kCCMenuHandlerPriority = -128,$/;"	e	enum:__anon16
kCCMenuStateTrackingTouch	menu_nodes/CCMenu.h	/^    kCCMenuStateTrackingTouch$/;"	e	enum:__anon15
kCCMenuStateWaiting	menu_nodes/CCMenu.h	/^    kCCMenuStateWaiting,$/;"	e	enum:__anon15
kCCNodeOnCleanup	base_nodes/CCNode.h	/^    kCCNodeOnCleanup$/;"	e	enum:__anon5
kCCNodeOnEnter	base_nodes/CCNode.h	/^    kCCNodeOnEnter,$/;"	e	enum:__anon5
kCCNodeOnEnterTransitionDidFinish	base_nodes/CCNode.h	/^    kCCNodeOnEnterTransitionDidFinish,$/;"	e	enum:__anon5
kCCNodeOnExit	base_nodes/CCNode.h	/^    kCCNodeOnExit,$/;"	e	enum:__anon5
kCCNodeOnExitTransitionDidStart	base_nodes/CCNode.h	/^    kCCNodeOnExitTransitionDidStart,$/;"	e	enum:__anon5
kCCNodeTagInvalid	base_nodes/CCNode.h	/^    kCCNodeTagInvalid = -1,$/;"	e	enum:__anon4
kCCParticleDefaultCapacity	particle_nodes/CCParticleBatchNode.h	46;"	d
kCCParticleDurationInfinity	particle_nodes/CCParticleSystem.h	/^    kCCParticleDurationInfinity = -1,$/;"	e	enum:__anon18
kCCParticleModeGravity	particle_nodes/CCParticleSystem.h	/^    kCCParticleModeGravity,$/;"	e	enum:__anon19
kCCParticleModeRadius	particle_nodes/CCParticleSystem.h	/^    kCCParticleModeRadius,    $/;"	e	enum:__anon19
kCCParticleStartRadiusEqualToEndRadius	particle_nodes/CCParticleSystem.h	/^    kCCParticleStartRadiusEqualToEndRadius = -1,$/;"	e	enum:__anon18
kCCParticleStartSizeEqualToEndSize	particle_nodes/CCParticleSystem.h	/^    kCCParticleStartSizeEqualToEndSize = -1,$/;"	e	enum:__anon18
kCCPointEpsilon	support/CCPointExtension.cpp	33;"	d	file:
kCCPositionTypeFree	particle_nodes/CCParticleSystem.h	/^    kCCPositionTypeFree,$/;"	e	enum:__anon20
kCCPositionTypeGrouped	particle_nodes/CCParticleSystem.h	/^    kCCPositionTypeGrouped,$/;"	e	enum:__anon20
kCCPositionTypeRelative	particle_nodes/CCParticleSystem.h	/^    kCCPositionTypeRelative,$/;"	e	enum:__anon20
kCCPriorityNonSystemMin	CCScheduler.h	44;"	d
kCCPrioritySystem	CCScheduler.h	41;"	d
kCCProfilerCategoryBatchSprite	support/CCProfiling.cpp	/^bool kCCProfilerCategoryBatchSprite = false;$/;"	v
kCCProfilerCategoryParticles	support/CCProfiling.cpp	/^bool kCCProfilerCategoryParticles = false;$/;"	v
kCCProgressTextureCoords	misc_nodes/CCProgressTimer.cpp	/^const char kCCProgressTextureCoords = 0x4b;$/;"	v
kCCProgressTimerTypeBar	misc_nodes/CCProgressTimer.h	/^    kCCProgressTimerTypeBar,$/;"	e	enum:__anon17
kCCProgressTimerTypeRadial	misc_nodes/CCProgressTimer.h	/^    kCCProgressTimerTypeRadial,$/;"	e	enum:__anon17
kCCRepeatForever	include/ccMacros.h	72;"	d
kCCSceneRadial	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^    kCCSceneRadial = 0xc001,$/;"	e	enum:__anon13	file:
kCCShaderType_MAX	shaders/CCShaderCache.cpp	/^    kCCShaderType_MAX,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionColor	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionColor,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionLengthTexureColor	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionLengthTexureColor,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionTexture	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionTexture,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionTextureA8Color	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionTextureA8Color,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionTextureColor	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionTextureColor,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionTextureColorAlphaTest	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionTextureColorAlphaTest,$/;"	e	enum:__anon35	file:
kCCShaderType_PositionTexture_uColor	shaders/CCShaderCache.cpp	/^    kCCShaderType_PositionTexture_uColor,$/;"	e	enum:__anon35	file:
kCCShaderType_Position_uColor	shaders/CCShaderCache.cpp	/^    kCCShaderType_Position_uColor,$/;"	e	enum:__anon35	file:
kCCShader_PositionColor	shaders/CCGLProgram.h	66;"	d
kCCShader_PositionLengthTexureColor	shaders/CCGLProgram.h	71;"	d
kCCShader_PositionTexture	shaders/CCGLProgram.h	67;"	d
kCCShader_PositionTextureA8Color	shaders/CCGLProgram.h	69;"	d
kCCShader_PositionTextureColor	shaders/CCGLProgram.h	64;"	d
kCCShader_PositionTextureColorAlphaTest	shaders/CCGLProgram.h	65;"	d
kCCShader_PositionTexture_uColor	shaders/CCGLProgram.h	68;"	d
kCCShader_Position_uColor	shaders/CCGLProgram.h	70;"	d
kCCTMXTileDiagonalFlag	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    kCCTMXTileDiagonalFlag            = 0x20000000,$/;"	e	enum:ccTMXTileFlags_
kCCTMXTileHorizontalFlag	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    kCCTMXTileHorizontalFlag        = 0x80000000,$/;"	e	enum:ccTMXTileFlags_
kCCTMXTileVerticalFlag	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    kCCTMXTileVerticalFlag            = 0x40000000,$/;"	e	enum:ccTMXTileFlags_
kCCTextAlignmentCenter	include/ccTypes.h	/^    kCCTextAlignmentCenter,$/;"	e	enum:__anon7
kCCTextAlignmentLeft	include/ccTypes.h	/^    kCCTextAlignmentLeft,$/;"	e	enum:__anon7
kCCTextAlignmentRight	include/ccTypes.h	/^    kCCTextAlignmentRight,$/;"	e	enum:__anon7
kCCTexture2DPixelFormat_A8	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_A8,$/;"	e	enum:__anon41
kCCTexture2DPixelFormat_AI88	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_AI88,$/;"	e	enum:__anon41
kCCTexture2DPixelFormat_Default	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_Default = kCCTexture2DPixelFormat_RGBA8888,$/;"	e	enum:__anon41
kCCTexture2DPixelFormat_I8	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_I8,$/;"	e	enum:__anon41
kCCTexture2DPixelFormat_PVRTC2	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_PVRTC2,$/;"	e	enum:__anon41
kCCTexture2DPixelFormat_PVRTC4	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_PVRTC4,$/;"	e	enum:__anon41
kCCTexture2DPixelFormat_RGB565	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_RGB565,$/;"	e	enum:__anon41
kCCTexture2DPixelFormat_RGB5A1	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_RGB5A1,    $/;"	e	enum:__anon41
kCCTexture2DPixelFormat_RGB888	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_RGB888,$/;"	e	enum:__anon41
kCCTexture2DPixelFormat_RGBA4444	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_RGBA4444,$/;"	e	enum:__anon41
kCCTexture2DPixelFormat_RGBA8888	textures/CCTexture2D.h	/^    kCCTexture2DPixelFormat_RGBA8888,$/;"	e	enum:__anon41
kCCTouchesAllAtOnce	layers_scenes_transitions_nodes/CCLayer.h	/^	kCCTouchesAllAtOnce,$/;"	e	enum:__anon11
kCCTouchesOneByOne	layers_scenes_transitions_nodes/CCLayer.h	/^	kCCTouchesOneByOne,$/;"	e	enum:__anon11
kCCTransitionOrientationDownOver	layers_scenes_transitions_nodes/CCTransition.h	/^	kCCTransitionOrientationDownOver = 1,$/;"	e	enum:__anon12
kCCTransitionOrientationLeftOver	layers_scenes_transitions_nodes/CCTransition.h	/^	kCCTransitionOrientationLeftOver = 0,$/;"	e	enum:__anon12
kCCTransitionOrientationRightOver	layers_scenes_transitions_nodes/CCTransition.h	/^	kCCTransitionOrientationRightOver = 1,$/;"	e	enum:__anon12
kCCTransitionOrientationUpOver	layers_scenes_transitions_nodes/CCTransition.h	/^	kCCTransitionOrientationUpOver = 0,$/;"	e	enum:__anon12
kCCUniformAlphaTestValue	shaders/CCGLProgram.h	82;"	d
kCCUniformCosTime	shaders/CCGLProgram.h	/^	kCCUniformCosTime,$/;"	e	enum:__anon32
kCCUniformCosTime_s	shaders/CCGLProgram.h	79;"	d
kCCUniformMVMatrix	shaders/CCGLProgram.h	/^	kCCUniformMVMatrix,$/;"	e	enum:__anon32
kCCUniformMVMatrix_s	shaders/CCGLProgram.h	75;"	d
kCCUniformMVPMatrix	shaders/CCGLProgram.h	/^	kCCUniformMVPMatrix,$/;"	e	enum:__anon32
kCCUniformMVPMatrix_s	shaders/CCGLProgram.h	76;"	d
kCCUniformPMatrix	shaders/CCGLProgram.h	/^	kCCUniformPMatrix,$/;"	e	enum:__anon32
kCCUniformPMatrix_s	shaders/CCGLProgram.h	74;"	d
kCCUniformRandom01	shaders/CCGLProgram.h	/^	kCCUniformRandom01,$/;"	e	enum:__anon32
kCCUniformRandom01_s	shaders/CCGLProgram.h	80;"	d
kCCUniformSampler	shaders/CCGLProgram.h	/^	kCCUniformSampler,$/;"	e	enum:__anon32
kCCUniformSampler_s	shaders/CCGLProgram.h	81;"	d
kCCUniformSinTime	shaders/CCGLProgram.h	/^	kCCUniformSinTime,$/;"	e	enum:__anon32
kCCUniformSinTime_s	shaders/CCGLProgram.h	78;"	d
kCCUniformTime	shaders/CCGLProgram.h	/^	kCCUniformTime,$/;"	e	enum:__anon32
kCCUniformTime_s	shaders/CCGLProgram.h	77;"	d
kCCUniform_MAX	shaders/CCGLProgram.h	/^	kCCUniform_MAX,$/;"	e	enum:__anon32
kCCVertexAttribFlag_Color	shaders/ccGLStateCache.h	/^    kCCVertexAttribFlag_Color       = 1 << 1,$/;"	e	enum:__anon33
kCCVertexAttribFlag_None	shaders/ccGLStateCache.h	/^    kCCVertexAttribFlag_None        = 0,$/;"	e	enum:__anon33
kCCVertexAttribFlag_PosColorTex	shaders/ccGLStateCache.h	/^    kCCVertexAttribFlag_PosColorTex = ( kCCVertexAttribFlag_Position | kCCVertexAttribFlag_Color | kCCVertexAttribFlag_TexCoords ),$/;"	e	enum:__anon33
kCCVertexAttribFlag_Position	shaders/ccGLStateCache.h	/^    kCCVertexAttribFlag_Position    = 1 << 0,$/;"	e	enum:__anon33
kCCVertexAttribFlag_TexCoords	shaders/ccGLStateCache.h	/^    kCCVertexAttribFlag_TexCoords   = 1 << 2,$/;"	e	enum:__anon33
kCCVertexAttrib_Color	shaders/CCGLProgram.h	/^    kCCVertexAttrib_Color,$/;"	e	enum:__anon31
kCCVertexAttrib_MAX	shaders/CCGLProgram.h	/^    kCCVertexAttrib_MAX,$/;"	e	enum:__anon31
kCCVertexAttrib_Position	shaders/CCGLProgram.h	/^    kCCVertexAttrib_Position,$/;"	e	enum:__anon31
kCCVertexAttrib_TexCoords	shaders/CCGLProgram.h	/^    kCCVertexAttrib_TexCoords,$/;"	e	enum:__anon31
kCCVerticalTextAlignmentBottom	include/ccTypes.h	/^    kCCVerticalTextAlignmentBottom,$/;"	e	enum:__anon6
kCCVerticalTextAlignmentCenter	include/ccTypes.h	/^    kCCVerticalTextAlignmentCenter,$/;"	e	enum:__anon6
kCCVerticalTextAlignmentTop	include/ccTypes.h	/^    kCCVerticalTextAlignmentTop,$/;"	e	enum:__anon6
kCurrentItem	menu_nodes/CCMenuItem.cpp	/^const unsigned int    kCurrentItem = 0xc0c05001;$/;"	v
kDefaultFPS	CCDirector.cpp	78;"	d	file:
kDefaultPadding	menu_nodes/CCMenu.cpp	/^    kDefaultPadding =  5,$/;"	e	enum:__anon14	file:
kDefaultSpriteBatchCapacity	sprite_nodes/CCSpriteBatchNode.h	44;"	d
kDisableTag	menu_nodes/CCMenuItem.cpp	/^const unsigned int    kDisableTag = 0x3;$/;"	v
kFmtJpg	platform/CCImage.h	/^        kFmtJpg = 0,$/;"	e	enum:CCImage::__anon28
kFmtPng	platform/CCImage.h	/^        kFmtPng,$/;"	e	enum:CCImage::__anon28
kFmtRawData	platform/CCImage.h	/^        kFmtRawData,$/;"	e	enum:CCImage::__anon28
kFmtTiff	platform/CCImage.h	/^        kFmtTiff,$/;"	e	enum:CCImage::__anon28
kFmtUnKnown	platform/CCImage.h	/^        kFmtUnKnown$/;"	e	enum:CCImage::__anon28
kImage	textures/CCTextureCache.h	/^    kImage,$/;"	e	enum:VolatileTexture::__anon42
kImageData	textures/CCTextureCache.h	/^    kImageData,$/;"	e	enum:VolatileTexture::__anon42
kImageFile	textures/CCTextureCache.h	/^    kImageFile,$/;"	e	enum:VolatileTexture::__anon42
kInvalid	textures/CCTextureCache.h	/^    kInvalid = 0,$/;"	e	enum:VolatileTexture::__anon42
kLanguageChinese	platform/CCCommon.h	/^    kLanguageChinese,$/;"	e	enum:LanguageType
kLanguageEnglish	platform/CCCommon.h	/^    kLanguageEnglish = 0,$/;"	e	enum:LanguageType
kLanguageFrench	platform/CCCommon.h	/^    kLanguageFrench,$/;"	e	enum:LanguageType
kLanguageGerman	platform/CCCommon.h	/^    kLanguageGerman,$/;"	e	enum:LanguageType
kLanguageItalian	platform/CCCommon.h	/^    kLanguageItalian,$/;"	e	enum:LanguageType
kLanguageKorean	platform/CCCommon.h	/^    kLanguageKorean$/;"	e	enum:LanguageType
kLanguageRussian	platform/CCCommon.h	/^    kLanguageRussian,$/;"	e	enum:LanguageType
kLanguageSpanish	platform/CCCommon.h	/^    kLanguageSpanish,$/;"	e	enum:LanguageType
kMaxLogLen	platform/CCCommon.h	/^static const int kMaxLogLen = 16*1024;$/;"	v
kMaxStringLen	cocoa/CCString.cpp	9;"	d	file:
kNormalTag	menu_nodes/CCMenuItem.cpp	/^const unsigned int    kNormalTag = 0x1;$/;"	v
kPVR2TexturePixelFormat_AI_88	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_AI_88,$/;"	e	enum:__anon48	file:
kPVR2TexturePixelFormat_A_8	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_A_8,$/;"	e	enum:__anon48	file:
kPVR2TexturePixelFormat_BGRA_8888	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_BGRA_8888,$/;"	e	enum:__anon48	file:
kPVR2TexturePixelFormat_I_8	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_I_8,$/;"	e	enum:__anon48	file:
kPVR2TexturePixelFormat_PVRTC_2BPP_RGBA	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_PVRTC_2BPP_RGBA,$/;"	e	enum:__anon48	file:
kPVR2TexturePixelFormat_PVRTC_4BPP_RGBA	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_PVRTC_4BPP_RGBA,$/;"	e	enum:__anon48	file:
kPVR2TexturePixelFormat_RGBA_4444	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_RGBA_4444= 0x10,$/;"	e	enum:__anon48	file:
kPVR2TexturePixelFormat_RGBA_5551	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_RGBA_5551,$/;"	e	enum:__anon48	file:
kPVR2TexturePixelFormat_RGBA_8888	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_RGBA_8888,$/;"	e	enum:__anon48	file:
kPVR2TexturePixelFormat_RGB_555	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_RGB_555,				\/\/ unsupported$/;"	e	enum:__anon48	file:
kPVR2TexturePixelFormat_RGB_565	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_RGB_565,$/;"	e	enum:__anon48	file:
kPVR2TexturePixelFormat_RGB_888	textures/CCTexturePVR.cpp	/^	kPVR2TexturePixelFormat_RGB_888,$/;"	e	enum:__anon48	file:
kPVR3TexturePixelFormat_A_8	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_A_8 = 0x0000000800000061,$/;"	e	enum:__anon49	file:
kPVR3TexturePixelFormat_BGRA_8888	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_BGRA_8888 = 0x0808080861726762,$/;"	e	enum:__anon49	file:
kPVR3TexturePixelFormat_LA_88	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_LA_88 = 0x000008080000616c,$/;"	e	enum:__anon49	file:
kPVR3TexturePixelFormat_L_8	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_L_8 = 0x000000080000006c,$/;"	e	enum:__anon49	file:
kPVR3TexturePixelFormat_PVRTC_2BPP_RGB	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_PVRTC_2BPP_RGB = 0,$/;"	e	enum:__anon49	file:
kPVR3TexturePixelFormat_PVRTC_2BPP_RGBA	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_PVRTC_2BPP_RGBA = 1,$/;"	e	enum:__anon49	file:
kPVR3TexturePixelFormat_PVRTC_4BPP_RGB	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_PVRTC_4BPP_RGB = 2,$/;"	e	enum:__anon49	file:
kPVR3TexturePixelFormat_PVRTC_4BPP_RGBA	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_PVRTC_4BPP_RGBA = 3,$/;"	e	enum:__anon49	file:
kPVR3TexturePixelFormat_RGBA_4444	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_RGBA_4444 = 0x0404040461626772,$/;"	e	enum:__anon49	file:
kPVR3TexturePixelFormat_RGBA_5551	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_RGBA_5551 = 0x0105050561626772,$/;"	e	enum:__anon49	file:
kPVR3TexturePixelFormat_RGBA_8888	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_RGBA_8888 = 0x0808080861626772,$/;"	e	enum:__anon49	file:
kPVR3TexturePixelFormat_RGB_565	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_RGB_565 = 0x0005060500626772,$/;"	e	enum:__anon49	file:
kPVR3TexturePixelFormat_RGB_888	textures/CCTexturePVR.cpp	/^	kPVR3TexturePixelFormat_RGB_888 = 0x0008080800626772,$/;"	e	enum:__anon49	file:
kPVRTextureFlagAlpha	textures/CCTexturePVR.cpp	/^    kPVRTextureFlagAlpha          = (1<<15),       \/\/ v2.1 is there transparency info in the texture$/;"	e	enum:__anon47	file:
kPVRTextureFlagBumpmap	textures/CCTexturePVR.cpp	/^    kPVRTextureFlagBumpmap        = (1<<10),       \/\/ has normals encoded for a bump map$/;"	e	enum:__anon47	file:
kPVRTextureFlagCubemap	textures/CCTexturePVR.cpp	/^    kPVRTextureFlagCubemap        = (1<<12),       \/\/ is a cubemap\/skybox$/;"	e	enum:__anon47	file:
kPVRTextureFlagFalseMipCol	textures/CCTexturePVR.cpp	/^    kPVRTextureFlagFalseMipCol    = (1<<13),       \/\/ are there false colored MIP levels$/;"	e	enum:__anon47	file:
kPVRTextureFlagMipmap	textures/CCTexturePVR.cpp	/^    kPVRTextureFlagMipmap         = (1<<8),        \/\/ has mip map levels$/;"	e	enum:__anon47	file:
kPVRTextureFlagTiling	textures/CCTexturePVR.cpp	/^    kPVRTextureFlagTiling         = (1<<11),       \/\/ is bordered for tiled pvr$/;"	e	enum:__anon47	file:
kPVRTextureFlagTwiddle	textures/CCTexturePVR.cpp	/^    kPVRTextureFlagTwiddle        = (1<<9),        \/\/ is twiddled$/;"	e	enum:__anon47	file:
kPVRTextureFlagVerticalFlip	textures/CCTexturePVR.cpp	/^    kPVRTextureFlagVerticalFlip   = (1<<16),       \/\/ v2.1 is the texture vertically flipped$/;"	e	enum:__anon47	file:
kPVRTextureFlagVolume	textures/CCTexturePVR.cpp	/^    kPVRTextureFlagVolume         = (1<<14),       \/\/ is this a volume texture$/;"	e	enum:__anon47	file:
kParticleDurationInfinity	particle_nodes/CCParticleSystem.h	/^    kParticleDurationInfinity = kCCParticleDurationInfinity,$/;"	e	enum:__anon18
kParticleStartSizeEqualToEndSize	particle_nodes/CCParticleSystem.h	/^    kParticleStartSizeEqualToEndSize = kCCParticleStartSizeEqualToEndSize,$/;"	e	enum:__anon18
kPositionTypeFree	particle_nodes/CCParticleSystem.h	/^    kPositionTypeFree = kCCPositionTypeFree,$/;"	e	enum:__anon21
kPositionTypeGrouped	particle_nodes/CCParticleSystem.h	/^    kPositionTypeGrouped = kCCPositionTypeGrouped,$/;"	e	enum:__anon21
kProgressTextureCoordsCount	misc_nodes/CCProgressTimer.cpp	43;"	d	file:
kProgressTimerCast	actions/CCActionProgressTimer.cpp	31;"	d	file:
kQuadSize	particle_nodes/CCParticleSystemQuad.cpp	474;"	d	file:
kQuadSize	sprite_nodes/CCSprite.cpp	602;"	d	file:
kQuadSize	textures/CCTextureAtlas.cpp	259;"	d	file:
kResolutionExactFit	platform/CCEGLViewProtocol.h	/^    kResolutionExactFit,$/;"	e	enum:ResolutionPolicy
kResolutionNoBorder	platform/CCEGLViewProtocol.h	/^    kResolutionNoBorder,$/;"	e	enum:ResolutionPolicy
kResolutionShowAll	platform/CCEGLViewProtocol.h	/^    kResolutionShowAll,$/;"	e	enum:ResolutionPolicy
kResolutionUnKnown	platform/CCEGLViewProtocol.h	/^    kResolutionUnKnown,$/;"	e	enum:ResolutionPolicy
kSceneFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^const unsigned int kSceneFade = 0xFADEFADE;$/;"	v
kScriptTypeJavascript	script_support/CCScriptSupport.h	/^    kScriptTypeJavascript$/;"	e	enum:ccScriptType
kScriptTypeLua	script_support/CCScriptSupport.h	/^    kScriptTypeLua,$/;"	e	enum:ccScriptType
kScriptTypeNone	script_support/CCScriptSupport.h	/^    kScriptTypeNone = 0,$/;"	e	enum:ccScriptType
kSelectedTag	menu_nodes/CCMenuItem.cpp	/^const unsigned int    kSelectedTag = 0x2;$/;"	v
kString	textures/CCTextureCache.h	/^    kString,$/;"	e	enum:VolatileTexture::__anon42
kTargetAndroid	platform/CCApplicationProtocol.h	/^    kTargetAndroid,$/;"	e	enum:TargetPlatform
kTargetBlackBerry	platform/CCApplicationProtocol.h	/^    kTargetBlackBerry,$/;"	e	enum:TargetPlatform
kTargetIpad	platform/CCApplicationProtocol.h	/^    kTargetIpad,$/;"	e	enum:TargetPlatform
kTargetIphone	platform/CCApplicationProtocol.h	/^    kTargetIphone,$/;"	e	enum:TargetPlatform
kTargetLinux	platform/CCApplicationProtocol.h	/^    kTargetLinux,$/;"	e	enum:TargetPlatform
kTargetMacOS	platform/CCApplicationProtocol.h	/^    kTargetMacOS,$/;"	e	enum:TargetPlatform
kTargetWindows	platform/CCApplicationProtocol.h	/^    kTargetWindows,$/;"	e	enum:TargetPlatform
kTexture2DPixelFormat_A8	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_A8 = kCCTexture2DPixelFormat_A8,$/;"	e	enum:__anon41
kTexture2DPixelFormat_Default	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_Default = kCCTexture2DPixelFormat_Default$/;"	e	enum:__anon41
kTexture2DPixelFormat_RGB565	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_RGB565 = kCCTexture2DPixelFormat_RGB565,$/;"	e	enum:__anon41
kTexture2DPixelFormat_RGB5A1	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_RGB5A1 = kCCTexture2DPixelFormat_RGB5A1,$/;"	e	enum:__anon41
kTexture2DPixelFormat_RGB888	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_RGB888 = kCCTexture2DPixelFormat_RGB888,$/;"	e	enum:__anon41
kTexture2DPixelFormat_RGBA4444	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_RGBA4444 = kCCTexture2DPixelFormat_RGBA4444,$/;"	e	enum:__anon41
kTexture2DPixelFormat_RGBA8888	textures/CCTexture2D.h	/^    kTexture2DPixelFormat_RGBA8888 = kCCTexture2DPixelFormat_RGBA8888,$/;"	e	enum:__anon41
kTypeBackClicked	keypad_dispatcher/CCKeypadDispatcher.h	/^    kTypeBackClicked = 1,$/;"	e	enum:__anon9
kTypeMenuClicked	keypad_dispatcher/CCKeypadDispatcher.h	/^    kTypeMenuClicked,$/;"	e	enum:__anon9
kZoomActionTag	menu_nodes/CCMenuItem.cpp	/^const unsigned int    kZoomActionTag = 0xc0c05002;$/;"	v
keepData	textures/CCTexture2D.cpp	/^void* CCTexture2D::keepData(void *data, unsigned int length)$/;"	f	class:CCTexture2D
kerningAmountForFirst	label_nodes/CCLabelBMFont.cpp	/^int CCLabelBMFont::kerningAmountForFirst(unsigned short first, unsigned short second)$/;"	f	class:CCLabelBMFont
key	label_nodes/CCLabelBMFont.h	/^	int				key;		\/\/ key for the hash. 16-bit for 1st element, 16-bit for 2nd element$/;"	m	struct:_KerningHashElement
key	label_nodes/CCLabelBMFont.h	/^	unsigned int	key;		\/\/ key. Font Unicode value$/;"	m	struct:_FontDefHashElement
key	support/data_support/uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle
keyBackClicked	keypad_dispatcher/CCKeypadDelegate.h	/^    virtual void keyBackClicked() {}$/;"	f	class:CCKeypadDelegate
keyBackClicked	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::keyBackClicked(void)$/;"	f	class:CCLayer
keyMenuClicked	keypad_dispatcher/CCKeypadDelegate.h	/^    virtual void keyMenuClicked() {};$/;"	f	class:CCKeypadDelegate
keyMenuClicked	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::keyMenuClicked(void)$/;"	f	class:CCLayer
keyboardDidHide	text_input_node/CCIMEDelegate.h	/^    virtual void keyboardDidHide(CCIMEKeyboardNotificationInfo& info)    {CC_UNUSED_PARAM(info);}$/;"	f	class:CCIMEDelegate
keyboardDidShow	text_input_node/CCIMEDelegate.h	/^    virtual void keyboardDidShow(CCIMEKeyboardNotificationInfo& info)    {CC_UNUSED_PARAM(info);}$/;"	f	class:CCIMEDelegate
keyboardWillHide	text_input_node/CCIMEDelegate.h	/^    virtual void keyboardWillHide(CCIMEKeyboardNotificationInfo& info)   {CC_UNUSED_PARAM(info);}$/;"	f	class:CCIMEDelegate
keyboardWillShow	text_input_node/CCIMEDelegate.h	/^    virtual void keyboardWillShow(CCIMEKeyboardNotificationInfo& info)   {CC_UNUSED_PARAM(info);}$/;"	f	class:CCIMEDelegate
keylen	support/data_support/uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle
keys	support/zip_support/unzip.cpp	/^    unsigned long keys[3];     \/* keys defining the pseudo-random sequence *\/$/;"	m	struct:cocos2d::__anon38	file:
kmAABB	kazmath/include/kazmath/aabb.h	/^typedef struct kmAABB {$/;"	s
kmAABB	kazmath/include/kazmath/aabb.h	/^} kmAABB;$/;"	t	typeref:struct:kmAABB
kmAABBAssign	kazmath/src/aabb.c	/^kmAABB* const kmAABBAssign(kmAABB* pOut, const kmAABB* pIn)$/;"	f
kmAABBContainsPoint	kazmath/src/aabb.c	/^const int kmAABBContainsPoint(const kmVec3* pPoint, const kmAABB* pBox)$/;"	f
kmAABBScale	kazmath/src/aabb.c	/^kmAABB* const kmAABBScale(kmAABB* pOut, const kmAABB* pIn, kmScalar s)$/;"	f
kmAlmostEqual	kazmath/src/utility.c	/^kmBool kmAlmostEqual(kmScalar lhs, kmScalar rhs) {$/;"	f
kmBool	kazmath/include/kazmath/utility.h	37;"	d
kmDegreesToRadians	kazmath/src/utility.c	/^kmScalar kmDegreesToRadians(kmScalar degrees) {$/;"	f
kmEnum	kazmath/include/kazmath/utility.h	41;"	d
kmEpsilon	kazmath/include/kazmath/utility.h	55;"	d
kmGLEnum	kazmath/include/kazmath/GL/matrix.h	/^typedef unsigned int kmGLEnum;$/;"	t
kmGLFreeAll	kazmath/src/GL/matrix.c	/^void kmGLFreeAll()$/;"	f
kmGLGetMatrix	kazmath/src/GL/matrix.c	/^void kmGLGetMatrix(kmGLEnum mode, kmMat4* pOut)$/;"	f
kmGLLoadIdentity	kazmath/src/GL/matrix.c	/^void kmGLLoadIdentity()$/;"	f
kmGLLoadMatrix	kazmath/src/GL/matrix.c	/^void kmGLLoadMatrix(const kmMat4* pIn)$/;"	f
kmGLMatrixMode	kazmath/src/GL/matrix.c	/^void kmGLMatrixMode(kmGLEnum mode)$/;"	f
kmGLMultMatrix	kazmath/src/GL/matrix.c	/^void kmGLMultMatrix(const kmMat4* pIn)$/;"	f
kmGLPopMatrix	kazmath/src/GL/matrix.c	/^void kmGLPopMatrix(void)$/;"	f
kmGLPushMatrix	kazmath/src/GL/matrix.c	/^void kmGLPushMatrix(void)$/;"	f
kmGLRotatef	kazmath/src/GL/matrix.c	/^void kmGLRotatef(float angle, float x, float y, float z)$/;"	f
kmGLScalef	kazmath/src/GL/matrix.c	/^void kmGLScalef(float x, float y, float z)$/;"	f
kmGLTranslatef	kazmath/src/GL/matrix.c	/^void kmGLTranslatef(float x, float y, float z)$/;"	f
kmMat3	kazmath/include/kazmath/mat3.h	/^typedef struct kmMat3{$/;"	s
kmMat3	kazmath/include/kazmath/mat3.h	/^} kmMat3;$/;"	t	typeref:struct:kmMat3
kmMat3Adjugate	kazmath/src/mat3.c	/^kmMat3* const kmMat3Adjugate(kmMat3* pOut, const kmMat3* pIn)$/;"	f
kmMat3AreEqual	kazmath/src/mat3.c	/^const int kmMat3AreEqual(const kmMat3* pMat1, const kmMat3* pMat2)$/;"	f
kmMat3Assign	kazmath/src/mat3.c	/^kmMat3* const kmMat3Assign(kmMat3* pOut, const kmMat3* pIn)$/;"	f
kmMat3Determinant	kazmath/src/mat3.c	/^const kmScalar kmMat3Determinant(const kmMat3* pIn)$/;"	f
kmMat3Fill	kazmath/src/mat3.c	/^kmMat3* const kmMat3Fill(kmMat3* pOut, const kmScalar* pMat)$/;"	f
kmMat3Identity	kazmath/src/mat3.c	/^kmMat3* const kmMat3Identity(kmMat3* pOut)$/;"	f
kmMat3Inverse	kazmath/src/mat3.c	/^kmMat3* const kmMat3Inverse(kmMat3* pOut, const kmScalar pDeterminate, const kmMat3* pM)$/;"	f
kmMat3IsIdentity	kazmath/src/mat3.c	/^const int kmMat3IsIdentity(const kmMat3* pIn)$/;"	f
kmMat3Multiply	kazmath/src/mat3.c	/^kmMat3* const kmMat3Multiply(kmMat3* pOut, const kmMat3* pM1, const kmMat3* pM2)$/;"	f
kmMat3Rotation	kazmath/src/mat3.c	/^kmMat3* const kmMat3Rotation(kmMat3* pOut, const float radians)$/;"	f
kmMat3RotationAxisAngle	kazmath/src/mat3.c	/^kmMat3* const kmMat3RotationAxisAngle(kmMat3* pOut, const struct kmVec3* axis, kmScalar radians)$/;"	f
kmMat3RotationQuaternion	kazmath/src/mat3.c	/^kmMat3* const kmMat3RotationQuaternion(kmMat3* pOut, const kmQuaternion* pIn)$/;"	f
kmMat3RotationToAxisAngle	kazmath/src/mat3.c	/^kmVec3* const kmMat3RotationToAxisAngle(kmVec3* pAxis, kmScalar* radians, const kmMat3* pIn)$/;"	f
kmMat3RotationX	kazmath/src/mat3.c	/^kmMat3* const kmMat3RotationX(kmMat3* pOut, const float radians)$/;"	f
kmMat3RotationY	kazmath/src/mat3.c	/^kmMat3* const kmMat3RotationY(kmMat3* pOut, const float radians)$/;"	f
kmMat3RotationZ	kazmath/src/mat3.c	/^kmMat3* const kmMat3RotationZ(kmMat3* pOut, const float radians)$/;"	f
kmMat3ScalarMultiply	kazmath/src/mat3.c	/^kmMat3* const kmMat3ScalarMultiply(kmMat3* pOut, const kmMat3* pM, const kmScalar pFactor)$/;"	f
kmMat3Scaling	kazmath/src/mat3.c	/^kmMat3* const kmMat3Scaling(kmMat3* pOut, const kmScalar x, const kmScalar y)$/;"	f
kmMat3Translation	kazmath/src/mat3.c	/^kmMat3* const kmMat3Translation(kmMat3* pOut, const kmScalar x, const kmScalar y)$/;"	f
kmMat3Transpose	kazmath/src/mat3.c	/^kmMat3* const kmMat3Transpose(kmMat3* pOut, const kmMat3* pIn)$/;"	f
kmMat4	kazmath/include/kazmath/mat4.h	/^typedef struct kmMat4 {$/;"	s
kmMat4	kazmath/include/kazmath/mat4.h	/^} kmMat4;$/;"	t	typeref:struct:kmMat4
kmMat4AreEqual	kazmath/src/mat4.c	/^const int kmMat4AreEqual(const kmMat4* pMat1, const kmMat4* pMat2)$/;"	f
kmMat4Assign	kazmath/src/mat4.c	/^kmMat4* const kmMat4Assign(kmMat4* pOut, const kmMat4* pIn)$/;"	f
kmMat4ExtractPlane	kazmath/src/mat4.c	/^kmPlane* const kmMat4ExtractPlane(kmPlane* pOut, const kmMat4* pIn, const kmEnum plane)$/;"	f
kmMat4ExtractRotation	kazmath/src/mat4.c	/^kmMat3* const kmMat4ExtractRotation(kmMat3* pOut, const kmMat4* pIn)$/;"	f
kmMat4Fill	kazmath/src/mat4.c	/^kmMat4* const kmMat4Fill(kmMat4* pOut, const kmScalar* pMat)$/;"	f
kmMat4GetForwardVec3	kazmath/src/mat4.c	/^kmVec3* const kmMat4GetForwardVec3(kmVec3* pOut, const kmMat4* pIn)$/;"	f
kmMat4GetRightVec3	kazmath/src/mat4.c	/^kmVec3* const kmMat4GetRightVec3(kmVec3* pOut, const kmMat4* pIn)$/;"	f
kmMat4GetUpVec3	kazmath/src/mat4.c	/^kmVec3* const kmMat4GetUpVec3(kmVec3* pOut, const kmMat4* pIn)$/;"	f
kmMat4Identity	kazmath/src/mat4.c	/^kmMat4* const kmMat4Identity(kmMat4* pOut)$/;"	f
kmMat4Inverse	kazmath/src/mat4.c	/^kmMat4* const kmMat4Inverse(kmMat4* pOut, const kmMat4* pM)$/;"	f
kmMat4IsIdentity	kazmath/src/mat4.c	/^const int  kmMat4IsIdentity(const kmMat4* pIn)$/;"	f
kmMat4LookAt	kazmath/src/mat4.c	/^kmMat4* const kmMat4LookAt(kmMat4* pOut, const kmVec3* pEye,$/;"	f
kmMat4Multiply	kazmath/src/mat4.c	/^kmMat4* const kmMat4Multiply(kmMat4* pOut, const kmMat4* pM1, const kmMat4* pM2)$/;"	f
kmMat4OrthographicProjection	kazmath/src/mat4.c	/^kmMat4* const kmMat4OrthographicProjection(kmMat4* pOut, kmScalar left,$/;"	f
kmMat4PerspectiveProjection	kazmath/src/mat4.c	/^kmMat4* const kmMat4PerspectiveProjection(kmMat4* pOut, kmScalar fovY,$/;"	f
kmMat4RotationAxisAngle	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationAxisAngle(kmMat4* pOut, const kmVec3* axis, kmScalar radians)$/;"	f
kmMat4RotationPitchYawRoll	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationPitchYawRoll(kmMat4* pOut, const kmScalar pitch, const kmScalar yaw, const kmScalar roll)$/;"	f
kmMat4RotationQuaternion	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationQuaternion(kmMat4* pOut, const kmQuaternion* pQ)$/;"	f
kmMat4RotationToAxisAngle	kazmath/src/mat4.c	/^kmVec3* const kmMat4RotationToAxisAngle(kmVec3* pAxis, kmScalar* radians, const kmMat4* pIn)$/;"	f
kmMat4RotationTranslation	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationTranslation(kmMat4* pOut, const kmMat3* rotation, const kmVec3* translation)$/;"	f
kmMat4RotationX	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationX(kmMat4* pOut, const float radians)$/;"	f
kmMat4RotationY	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationY(kmMat4* pOut, const float radians)$/;"	f
kmMat4RotationZ	kazmath/src/mat4.c	/^kmMat4* const kmMat4RotationZ(kmMat4* pOut, const float radians)$/;"	f
kmMat4Scaling	kazmath/src/mat4.c	/^kmMat4* const kmMat4Scaling(kmMat4* pOut, const kmScalar x, const kmScalar y,$/;"	f
kmMat4Translation	kazmath/src/mat4.c	/^kmMat4* const kmMat4Translation(kmMat4* pOut, const kmScalar x,$/;"	f
kmMat4Transpose	kazmath/src/mat4.c	/^kmMat4* const kmMat4Transpose(kmMat4* pOut, const kmMat4* pIn)$/;"	f
kmMax	kazmath/src/utility.c	/^kmScalar kmMax(kmScalar lhs, kmScalar rhs) {$/;"	f
kmMin	kazmath/src/utility.c	/^kmScalar kmMin(kmScalar lhs, kmScalar rhs) {$/;"	f
kmPI	kazmath/include/kazmath/utility.h	52;"	d
kmPIOver180	kazmath/include/kazmath/utility.h	53;"	d
kmPIUnder180	kazmath/include/kazmath/utility.h	54;"	d
kmPlane	kazmath/include/kazmath/plane.h	/^typedef struct kmPlane {$/;"	s
kmPlane	kazmath/include/kazmath/plane.h	/^} kmPlane;$/;"	t	typeref:struct:kmPlane
kmPlaneClassifyPoint	kazmath/src/plane.c	/^const POINT_CLASSIFICATION kmPlaneClassifyPoint(const kmPlane* pIn, const kmVec3* pP)$/;"	f
kmPlaneDot	kazmath/src/plane.c	/^const kmScalar kmPlaneDot(const kmPlane* pP, const kmVec4* pV)$/;"	f
kmPlaneDotCoord	kazmath/src/plane.c	/^const kmScalar kmPlaneDotCoord(const kmPlane* pP, const kmVec3* pV)$/;"	f
kmPlaneDotNormal	kazmath/src/plane.c	/^const kmScalar kmPlaneDotNormal(const kmPlane* pP, const kmVec3* pV)$/;"	f
kmPlaneFromPointNormal	kazmath/src/plane.c	/^kmPlane* const kmPlaneFromPointNormal(kmPlane* pOut, const kmVec3* pPoint, const kmVec3* pNormal)$/;"	f
kmPlaneFromPoints	kazmath/src/plane.c	/^kmPlane* const kmPlaneFromPoints(kmPlane* pOut, const kmVec3* p1, const kmVec3* p2, const kmVec3* p3)$/;"	f
kmPlaneIntersectLine	kazmath/src/plane.c	/^kmVec3* const kmPlaneIntersectLine(kmVec3* pOut, const kmPlane* pP, const kmVec3* pV1, const kmVec3* pV2)$/;"	f
kmPlaneNormalize	kazmath/src/plane.c	/^kmPlane* const kmPlaneNormalize(kmPlane* pOut, const kmPlane* pP)$/;"	f
kmPlaneScale	kazmath/src/plane.c	/^kmPlane* const kmPlaneScale(kmPlane* pOut, const kmPlane* pP, kmScalar s)$/;"	f
kmQuaternion	kazmath/include/kazmath/quaternion.h	/^typedef struct kmQuaternion {$/;"	s
kmQuaternion	kazmath/include/kazmath/quaternion.h	/^} kmQuaternion;$/;"	t	typeref:struct:kmQuaternion
kmQuaternionAdd	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionAdd(kmQuaternion* pOut, const kmQuaternion* pQ1, const kmQuaternion* pQ2)$/;"	f
kmQuaternionAssign	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionAssign(kmQuaternion* pOut, const kmQuaternion* pIn)$/;"	f
kmQuaternionConjugate	kazmath/src/quaternion.c	/^kmQuaternion* const kmQuaternionConjugate(kmQuaternion* pOut, const kmQuaternion* pIn)$/;"	f
kmQuaternionDot	kazmath/src/quaternion.c	/^const kmScalar kmQuaternionDot(const kmQuaternion* q1, const kmQuaternion* q2)$/;"	f
kmQuaternionExp	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionExp(kmQuaternion* pOut, const kmQuaternion* pIn)$/;"	f
kmQuaternionIdentity	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionIdentity(kmQuaternion* pOut)$/;"	f
kmQuaternionInverse	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionInverse(kmQuaternion* pOut,$/;"	f
kmQuaternionIsIdentity	kazmath/src/quaternion.c	/^int kmQuaternionIsIdentity(const kmQuaternion* pIn)$/;"	f
kmQuaternionLength	kazmath/src/quaternion.c	/^kmScalar kmQuaternionLength(const kmQuaternion* pIn)$/;"	f
kmQuaternionLengthSq	kazmath/src/quaternion.c	/^kmScalar kmQuaternionLengthSq(const kmQuaternion* pIn)$/;"	f
kmQuaternionLn	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionLn(kmQuaternion* pOut,$/;"	f
kmQuaternionMultiply	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionMultiply(kmQuaternion* pOut,$/;"	f
kmQuaternionMultiplyVec3	kazmath/src/quaternion.c	/^kmVec3* kmQuaternionMultiplyVec3(kmVec3* pOut, const kmQuaternion* q, const kmVec3* v) {$/;"	f
kmQuaternionNormalize	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionNormalize(kmQuaternion* pOut,$/;"	f
kmQuaternionRotationAxis	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionRotationAxis(kmQuaternion* pOut,$/;"	f
kmQuaternionRotationBetweenVec3	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionRotationBetweenVec3(kmQuaternion* pOut, const kmVec3* vec1, const kmVec3* vec2, const kmVec3* fallback) {$/;"	f
kmQuaternionRotationMatrix	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionRotationMatrix(kmQuaternion* pOut,$/;"	f
kmQuaternionRotationYawPitchRoll	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionRotationYawPitchRoll(kmQuaternion* pOut,$/;"	f
kmQuaternionScale	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionScale(kmQuaternion* pOut,$/;"	f
kmQuaternionSlerp	kazmath/src/quaternion.c	/^kmQuaternion* kmQuaternionSlerp(kmQuaternion* pOut,$/;"	f
kmQuaternionToAxisAngle	kazmath/src/quaternion.c	/^void kmQuaternionToAxisAngle(const kmQuaternion* pIn,$/;"	f
kmRadiansToDegrees	kazmath/src/utility.c	/^kmScalar kmRadiansToDegrees(kmScalar radians) {$/;"	f
kmRay2	kazmath/include/kazmath/ray2.h	/^typedef struct kmRay2 {$/;"	s
kmRay2	kazmath/include/kazmath/ray2.h	/^} kmRay2;$/;"	t	typeref:struct:kmRay2
kmRay2Fill	kazmath/src/ray2.c	/^void kmRay2Fill(kmRay2* ray, kmScalar px, kmScalar py, kmScalar vx, kmScalar vy) {$/;"	f
kmRay2IntersectCircle	kazmath/src/ray2.c	/^kmBool kmRay2IntersectCircle(const kmRay2* ray, const kmVec2 centre, const kmScalar radius, kmVec2* intersection) {$/;"	f
kmRay2IntersectLineSegment	kazmath/src/ray2.c	/^kmBool kmRay2IntersectLineSegment(const kmRay2* ray, const kmVec2* p1, const kmVec2* p2, kmVec2* intersection) {$/;"	f
kmRay2IntersectTriangle	kazmath/src/ray2.c	/^kmBool kmRay2IntersectTriangle(const kmRay2* ray, const kmVec2* p1, const kmVec2* p2, const kmVec2* p3, kmVec2* intersection, kmVec2* normal_out) {$/;"	f
kmSQR	kazmath/src/utility.c	/^kmScalar kmSQR(kmScalar s) {$/;"	f
kmScalar	kazmath/include/kazmath/utility.h	33;"	d
kmScalar	kazmath/include/kazmath/vec2.h	34;"	d
kmScalar	kazmath/include/kazmath/vec3.h	33;"	d
kmVec2	kazmath/include/kazmath/vec2.h	/^typedef struct kmVec2 {$/;"	s
kmVec2	kazmath/include/kazmath/vec2.h	/^} kmVec2;$/;"	t	typeref:struct:kmVec2
kmVec2Add	kazmath/src/vec2.c	/^kmVec2* kmVec2Add(kmVec2* pOut, const kmVec2* pV1, const kmVec2* pV2)$/;"	f
kmVec2AreEqual	kazmath/src/vec2.c	/^int kmVec2AreEqual(const kmVec2* p1, const kmVec2* p2)$/;"	f
kmVec2Dot	kazmath/src/vec2.c	/^kmScalar kmVec2Dot(const kmVec2* pV1, const kmVec2* pV2)$/;"	f
kmVec2Fill	kazmath/src/vec2.c	/^kmVec2* kmVec2Fill(kmVec2* pOut, kmScalar x, kmScalar y)$/;"	f
kmVec2Length	kazmath/src/vec2.c	/^kmScalar kmVec2Length(const kmVec2* pIn)$/;"	f
kmVec2LengthSq	kazmath/src/vec2.c	/^kmScalar kmVec2LengthSq(const kmVec2* pIn)$/;"	f
kmVec2Normalize	kazmath/src/vec2.c	/^kmVec2* kmVec2Normalize(kmVec2* pOut, const kmVec2* pIn)$/;"	f
kmVec2Scale	kazmath/src/vec2.c	/^kmVec2* kmVec2Scale(kmVec2* pOut, const kmVec2* pIn, const kmScalar s)$/;"	f
kmVec2Subtract	kazmath/src/vec2.c	/^kmVec2* kmVec2Subtract(kmVec2* pOut, const kmVec2* pV1, const kmVec2* pV2)$/;"	f
kmVec2Transform	kazmath/src/vec2.c	/^kmVec2* kmVec2Transform(kmVec2* pOut, const kmVec2* pV, const kmMat3* pM)$/;"	f
kmVec2TransformCoord	kazmath/src/vec2.c	/^kmVec2* kmVec2TransformCoord(kmVec2* pOut, const kmVec2* pV, const kmMat3* pM)$/;"	f
kmVec3	kazmath/include/kazmath/vec3.h	/^typedef struct kmVec3 {$/;"	s
kmVec3	kazmath/include/kazmath/vec3.h	/^} kmVec3;$/;"	t	typeref:struct:kmVec3
kmVec3Add	kazmath/src/vec3.c	/^kmVec3* kmVec3Add(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2)$/;"	f
kmVec3AreEqual	kazmath/src/vec3.c	/^int kmVec3AreEqual(const kmVec3* p1, const kmVec3* p2)$/;"	f
kmVec3Assign	kazmath/src/vec3.c	/^kmVec3* kmVec3Assign(kmVec3* pOut, const kmVec3* pIn) {$/;"	f
kmVec3Cross	kazmath/src/vec3.c	/^kmVec3* kmVec3Cross(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2)$/;"	f
kmVec3Dot	kazmath/src/vec3.c	/^kmScalar kmVec3Dot(const kmVec3* pV1, const kmVec3* pV2)$/;"	f
kmVec3Fill	kazmath/src/vec3.c	/^kmVec3* kmVec3Fill(kmVec3* pOut, kmScalar x, kmScalar y, kmScalar z)$/;"	f
kmVec3InverseTransform	kazmath/src/vec3.c	/^kmVec3* kmVec3InverseTransform(kmVec3* pOut, const kmVec3* pVect, const kmMat4* pM)$/;"	f
kmVec3InverseTransformNormal	kazmath/src/vec3.c	/^kmVec3* kmVec3InverseTransformNormal(kmVec3* pOut, const kmVec3* pVect, const kmMat4* pM)$/;"	f
kmVec3Length	kazmath/src/vec3.c	/^kmScalar kmVec3Length(const kmVec3* pIn)$/;"	f
kmVec3LengthSq	kazmath/src/vec3.c	/^kmScalar kmVec3LengthSq(const kmVec3* pIn)$/;"	f
kmVec3Normalize	kazmath/src/vec3.c	/^kmVec3* kmVec3Normalize(kmVec3* pOut, const kmVec3* pIn)$/;"	f
kmVec3Scale	kazmath/src/vec3.c	/^kmVec3* kmVec3Scale(kmVec3* pOut, const kmVec3* pIn, const kmScalar s)$/;"	f
kmVec3Subtract	kazmath/src/vec3.c	/^kmVec3* kmVec3Subtract(kmVec3* pOut, const kmVec3* pV1, const kmVec3* pV2)$/;"	f
kmVec3Transform	kazmath/src/vec3.c	/^kmVec3* kmVec3Transform(kmVec3* pOut, const kmVec3* pV, const kmMat4* pM)$/;"	f
kmVec3TransformCoord	kazmath/src/vec3.c	/^kmVec3* kmVec3TransformCoord(kmVec3* pOut, const kmVec3* pV, const kmMat4* pM)$/;"	f
kmVec3TransformNormal	kazmath/src/vec3.c	/^kmVec3* kmVec3TransformNormal(kmVec3* pOut, const kmVec3* pV, const kmMat4* pM)$/;"	f
kmVec3Zero	kazmath/src/vec3.c	/^kmVec3* kmVec3Zero(kmVec3* pOut) {$/;"	f
kmVec4	kazmath/include/kazmath/vec4.h	/^typedef struct kmVec4 {$/;"	s
kmVec4	kazmath/include/kazmath/vec4.h	/^} kmVec4;$/;"	t	typeref:struct:kmVec4
kmVec4Add	kazmath/src/vec4.c	/^kmVec4* kmVec4Add(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2) {$/;"	f
kmVec4AreEqual	kazmath/src/vec4.c	/^int kmVec4AreEqual(const kmVec4* p1, const kmVec4* p2) {$/;"	f
kmVec4Assign	kazmath/src/vec4.c	/^kmVec4* kmVec4Assign(kmVec4* pOut, const kmVec4* pIn) {$/;"	f
kmVec4Dot	kazmath/src/vec4.c	/^kmScalar kmVec4Dot(const kmVec4* pV1, const kmVec4* pV2) {$/;"	f
kmVec4Fill	kazmath/src/vec4.c	/^kmVec4* kmVec4Fill(kmVec4* pOut, kmScalar x, kmScalar y, kmScalar z, kmScalar w)$/;"	f
kmVec4Length	kazmath/src/vec4.c	/^kmScalar kmVec4Length(const kmVec4* pIn) {$/;"	f
kmVec4LengthSq	kazmath/src/vec4.c	/^kmScalar kmVec4LengthSq(const kmVec4* pIn) {$/;"	f
kmVec4Lerp	kazmath/src/vec4.c	/^kmVec4* kmVec4Lerp(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2, kmScalar t) {$/;"	f
kmVec4Normalize	kazmath/src/vec4.c	/^kmVec4* kmVec4Normalize(kmVec4* pOut, const kmVec4* pIn) {$/;"	f
kmVec4Scale	kazmath/src/vec4.c	/^kmVec4* kmVec4Scale(kmVec4* pOut, const kmVec4* pIn, const kmScalar s) {$/;"	f
kmVec4Subtract	kazmath/src/vec4.c	/^kmVec4* kmVec4Subtract(kmVec4* pOut, const kmVec4* pV1, const kmVec4* pV2) {$/;"	f
kmVec4Transform	kazmath/src/vec4.c	/^kmVec4* kmVec4Transform(kmVec4* pOut, const kmVec4* pV, const kmMat4* pM) {$/;"	f
kmVec4TransformArray	kazmath/src/vec4.c	/^kmVec4* kmVec4TransformArray(kmVec4* pOut, unsigned int outStride,$/;"	f
km_mat4_stack	kazmath/include/kazmath/GL/mat4stack.h	/^typedef struct km_mat4_stack {$/;"	s
km_mat4_stack	kazmath/include/kazmath/GL/mat4stack.h	/^} km_mat4_stack;$/;"	t	typeref:struct:km_mat4_stack
km_mat4_stack_initialize	kazmath/src/GL/mat4stack.c	/^void km_mat4_stack_initialize(km_mat4_stack* stack) {$/;"	f
km_mat4_stack_pop	kazmath/src/GL/mat4stack.c	/^void km_mat4_stack_pop(km_mat4_stack* stack, kmMat4* pOut)$/;"	f
km_mat4_stack_push	kazmath/src/GL/mat4stack.c	/^void km_mat4_stack_push(km_mat4_stack* stack, const kmMat4* item)$/;"	f
km_mat4_stack_release	kazmath/src/GL/mat4stack.c	/^void km_mat4_stack_release(km_mat4_stack* stack) {$/;"	f
labelWithString	label_nodes/CCLabelAtlas.cpp	/^CCLabelAtlas* CCLabelAtlas::labelWithString(const char *string, const char *charMapFile, unsigned int itemWidth, int unsigned itemHeight, unsigned int startCharMap)$/;"	f	class:CCLabelAtlas
labelWithString	label_nodes/CCLabelAtlas.cpp	/^CCLabelAtlas* CCLabelAtlas::labelWithString(const char *string, const char *fntFile)$/;"	f	class:CCLabelAtlas
labelWithString	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont *CCLabelBMFont::labelWithString(const char *str, const char *fntFile, float width\/* = kCCLabelAutomaticWidth*\/, CCTextAlignment alignment\/* = kCCTextAlignmentLeft*\/, CCPoint imageOffset\/* = CCPointZero*\/)$/;"	f	class:CCLabelBMFont
labelWithString	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF * CCLabelTTF::labelWithString(const char *string, const CCSize& dimensions, CCTextAlignment hAlignment, const char *fontName, float fontSize)$/;"	f	class:CCLabelTTF
labelWithString	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF * CCLabelTTF::labelWithString(const char *string, const char *fontName, float fontSize)$/;"	f	class:CCLabelTTF
labelWithString	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF* CCLabelTTF::labelWithString(const char *string, const cocos2d::CCSize &dimensions, $/;"	f	class:CCLabelTTF
lastObject	cocoa/CCArray.cpp	/^CCObject* CCArray::lastObject()$/;"	f	class:CCArray
layerNamed	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXLayer * CCTMXTiledMap::layerNamed(const char *layerName)$/;"	f	class:CCTMXTiledMap
layerWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor * CCLayerColor::layerWithColor(const ccColor4B& color)$/;"	f	class:CCLayerColor
layerWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor * CCLayerColor::layerWithColor(const ccColor4B& color, GLfloat width, GLfloat height)$/;"	f	class:CCLayerColor
layerWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerGradient* CCLayerGradient::layerWithColor(const ccColor4B& start, const ccColor4B& end)$/;"	f	class:CCLayerGradient
layerWithColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerGradient* CCLayerGradient::layerWithColor(const ccColor4B& start, const ccColor4B& end, const CCPoint& v)$/;"	f	class:CCLayerGradient
layerWithLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex * CCLayerMultiplex::layerWithLayer(CCLayer* layer)$/;"	f	class:CCLayerMultiplex
layerWithLayers	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex * CCLayerMultiplex::layerWithLayers(CCLayer * layer, ...)$/;"	f	class:CCLayerMultiplex
layerWithTilesetInfo	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXLayer * CCTMXLayer::layerWithTilesetInfo(CCTMXTilesetInfo *tilesetInfo, CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXLayer
lazyInitialize	kazmath/src/GL/matrix.c	/^void lazyInitialize()$/;"	f
lazy_init	draw_nodes/CCDrawingPrimitives.cpp	/^static void lazy_init( void )$/;"	f	file:
left	label_nodes/CCLabelBMFont.h	/^    int    left;$/;"	m	struct:_BMFontPadding
len	support/zip_support/ZipUtils.h	/^        unsigned int            len;                \/\/ size of the uncompressed file$/;"	m	struct:cocos2d::CCZHeader
len	textures/CCTexturePVR.h	/^    unsigned int len;$/;"	m	struct:CCPVRMipmap
length	cocoa/CCString.cpp	/^unsigned int CCString::length() const$/;"	f	class:CCString
less	touch_dispatcher/CCTouchDispatcher.cpp	/^static int less(const CCObject* p1, const CCObject* p2)$/;"	f	file:
link	shaders/CCGLProgram.cpp	/^bool CCGLProgram::link()$/;"	f	class:CCGLProgram
list	CCScheduler.cpp	/^    tListEntry            **list;        \/\/ Which list does it belong to ?$/;"	m	struct:_hashUpdateEntry	file:
listenBackToForeground	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::listenBackToForeground(CCObject *obj)$/;"	f	class:CCParticleSystemQuad
listenBackToForeground	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::listenBackToForeground(CCObject *obj)$/;"	f	class:CCTextureAtlas
listenToBackground	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::listenToBackground(cocos2d::CCObject *obj)$/;"	f	class:CCRenderTexture
loadDefaultShader	shaders/CCShaderCache.cpp	/^void CCShaderCache::loadDefaultShader(CCGLProgram *p, int type)$/;"	f	class:CCShaderCache
loadDefaultShaders	shaders/CCShaderCache.cpp	/^void CCShaderCache::loadDefaultShaders()$/;"	f	class:CCShaderCache
loadImage	textures/CCTextureCache.cpp	/^static void* loadImage(void* data)$/;"	f	file:
loadTGAfile	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::loadTGAfile(const char *file)$/;"	f	class:CCTileMapAtlas
local	support/zip_support/unzip.cpp	92;"	d	file:
locate	CCCamera.cpp	/^void CCCamera::locate(void)$/;"	f	class:CCCamera
location	shaders/CCGLProgram.cpp	/^    unsigned int    location;    \/\/ Key$/;"	m	struct:_hashUniformEntry	file:
locationInView	touch_dispatcher/CCTouch.h	/^    CC_DEPRECATED_ATTRIBUTE CCPoint locationInView()  { return m_point; }$/;"	f	class:CCTouch
log2_num_buckets	support/data_support/uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
logForOpenGLObject	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::logForOpenGLObject(GLuint object, GLInfoFunction infoFunc, GLLogFunction logFunc)$/;"	f	class:CCGLProgram
lowestAtlasIndexInChild	sprite_nodes/CCSpriteBatchNode.cpp	/^unsigned int CCSpriteBatchNode::lowestAtlasIndexInChild(CCSprite *pSprite)$/;"	f	class:CCSpriteBatchNode
lua_State	script_support/CCScriptSupport.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
m_ColorSpaceHolder	text_input_node/CCTextFieldTTF.h	/^    ccColor3B m_ColorSpaceHolder;$/;"	m	class:CCTextFieldTTF
m_DelegateList	text_input_node/CCIMEDispatcher.cpp	/^    DelegateList    m_DelegateList;$/;"	m	class:CCIMEDispatcher::Impl	file:
m_DelegateWithIme	text_input_node/CCIMEDispatcher.cpp	/^    CCIMEDelegate*  m_DelegateWithIme;$/;"	m	class:CCIMEDispatcher::Impl	file:
m_FmtImage	textures/CCTextureCache.h	/^    CCImage::EImageFormat m_FmtImage;$/;"	m	class:VolatileTexture
m_NameStr	support/CCProfiling.h	/^    std::string m_NameStr;$/;"	m	class:CCProfilingTimer
m_PixelFormat	textures/CCTextureCache.h	/^    CCTexture2DPixelFormat m_PixelFormat;$/;"	m	class:VolatileTexture
m_TextureSize	textures/CCTextureCache.h	/^    CCSize m_TextureSize;$/;"	m	class:VolatileTexture
m_alignment	textures/CCTextureCache.h	/^    CCTextAlignment m_alignment;$/;"	m	class:VolatileTexture
m_asMipmaps	textures/CCTexturePVR.h	/^    struct CCPVRMipmap m_asMipmaps[CC_PVRMIPMAP_MAX];   \/\/ pointer to mipmap images    $/;"	m	class:CCTexturePVR	typeref:struct:CCTexturePVR::CCPVRMipmap
m_bAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    bool m_bAccelerometerEnabled;$/;"	m	class:CCLayer
m_bActionInstant	actions/CCActionInterval.h	/^    bool m_bActionInstant;$/;"	m	class:CCRepeat
m_bActive	effects/CCGrid.h	/^    bool m_bActive;$/;"	m	class:CCGridBase
m_bAutoDraw	misc_nodes/CCRenderTexture.h	/^    bool         m_bAutoDraw;$/;"	m	class:CCRenderTexture
m_bBack	layers_scenes_transitions_nodes/CCTransitionPageTurn.h	/^    bool    m_bBack;$/;"	m	class:CCTransitionPageTurn
m_bBoundaryFullyCovered	actions/CCAction.h	/^    bool m_bBoundaryFullyCovered;$/;"	m	class:CCFollow
m_bBoundarySet	actions/CCAction.h	/^    bool m_bBoundarySet;$/;"	m	class:CCFollow
m_bCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.h	/^    bool m_bCompressedInterpolation;$/;"	m	class:CCLayerGradient
m_bCurrentTargetSalvaged	CCScheduler.h	/^    bool m_bCurrentTargetSalvaged;$/;"	m	class:CCScheduler
m_bCurrentTargetSalvaged	actions/CCActionManager.h	/^    bool            m_bCurrentTargetSalvaged;$/;"	m	class:CCActionManager
m_bDirty	CCCamera.h	/^    bool m_bDirty;$/;"	m	class:CCCamera
m_bDirty	actions/CCActionGrid3D.h	/^    bool    m_bDirty;$/;"	m	class:CCLens3D
m_bDirty	draw_nodes/CCDrawNode.h	/^    bool            m_bDirty;$/;"	m	class:CCDrawNode
m_bDirty	sprite_nodes/CCSprite.h	/^    bool                m_bDirty;                \/\/ Sprite needs to be updated$/;"	m	class:CCSprite
m_bDirty	textures/CCTextureAtlas.h	/^    bool                m_bDirty; \/\/indicates whether or not the array buffer of the VBO needs to be updated$/;"	m	class:CCTextureAtlas
m_bDispatchEvents	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bDispatchEvents;$/;"	m	class:CCTouchDispatcher
m_bDisplayStats	CCDirector.h	/^    bool m_bDisplayStats;$/;"	m	class:CCDirector
m_bEnabled	menu_nodes/CCMenu.h	/^    bool m_bEnabled;$/;"	m	class:CCMenu
m_bFastMode	misc_nodes/CCMotionStreak.h	/^    bool m_bFastMode;$/;"	m	class:CCMotionStreak
m_bFirstTick	actions/CCActionInterval.h	/^    bool   m_bFirstTick;$/;"	m	class:CCActionInterval
m_bFlipX	actions/CCActionInstant.h	/^    bool    m_bFlipX;$/;"	m	class:CCFlipX
m_bFlipX	sprite_nodes/CCSprite.h	/^    bool m_bFlipX;$/;"	m	class:CCSprite
m_bFlipY	actions/CCActionInstant.h	/^    bool    m_bFlipY;$/;"	m	class:CCFlipY
m_bFlipY	sprite_nodes/CCSprite.h	/^    bool m_bFlipY;$/;"	m	class:CCSprite
m_bHasAlpha	platform/CCImage.h	/^    bool m_bHasAlpha;$/;"	m	class:CCImage
m_bHasAlpha	textures/CCTexturePVR.h	/^    bool m_bHasAlpha;$/;"	m	class:CCTexturePVR
m_bHasChildren	sprite_nodes/CCSprite.h	/^    bool                m_bHasChildren;            \/\/ optimization to check if it contain children$/;"	m	class:CCSprite
m_bHasMipmaps	textures/CCTexture2D.h	/^    bool m_bHasMipmaps;$/;"	m	class:CCTexture2D
m_bHasPremultipliedAlpha	textures/CCTexture2D.h	/^    bool m_bHasPremultipliedAlpha;$/;"	m	class:CCTexture2D
m_bHorizontal	actions/CCActionGrid3D.h	/^    bool m_bHorizontal;$/;"	m	class:CCWaves
m_bIgnoreAnchorPointForPosition	base_nodes/CCNode.h	/^    bool m_bIgnoreAnchorPointForPosition;$/;"	m	class:CCNode
m_bInvalid	CCDirector.h	/^    bool m_bInvalid;$/;"	m	class:CCDisplayLinkDirector
m_bInverseDirty	base_nodes/CCNode.h	/^    bool m_bInverseDirty;$/;"	m	class:CCNode
m_bInverted	misc_nodes/CCClippingNode.h	/^    bool    m_bInverted;$/;"	m	class:CCClippingNode
m_bIsActive	particle_nodes/CCParticleSystem.h	/^    bool m_bIsActive;$/;"	m	class:CCParticleSystem
m_bIsAutoRemoveOnFinish	particle_nodes/CCParticleSystem.h	/^    bool m_bIsAutoRemoveOnFinish;$/;"	m	class:CCParticleSystem
m_bIsBlendAdditive	particle_nodes/CCParticleSystem.h	/^    bool m_bIsBlendAdditive;$/;"	m	class:CCParticleSystem
m_bIsEnabled	menu_nodes/CCMenuItem.h	/^    bool m_bIsEnabled;$/;"	m	class:CCMenuItem
m_bIsInSceneOnTop	layers_scenes_transitions_nodes/CCTransition.h	/^    bool    m_bIsInSceneOnTop;$/;"	m	class:CCTransitionScene
m_bIsMultiTouches	script_support/CCScriptSupport.h	/^    bool    m_bIsMultiTouches;$/;"	m	class:CCTouchScriptHandlerEntry
m_bIsOpacityModifyRGB	base_nodes/CCAtlasNode.h	/^    bool m_bIsOpacityModifyRGB;$/;"	m	class:CCAtlasNode
m_bIsOpacityModifyRGB	label_nodes/CCLabelBMFont.h	/^    bool m_bIsOpacityModifyRGB;$/;"	m	class:CCLabelBMFont
m_bIsSelected	menu_nodes/CCMenuItem.h	/^    bool m_bIsSelected;$/;"	m	class:CCMenuItem
m_bIsSendCleanupToScene	layers_scenes_transitions_nodes/CCTransition.h	/^    bool    m_bIsSendCleanupToScene;$/;"	m	class:CCTransitionScene
m_bIsTextureFlipped	effects/CCGrid.h	/^    bool m_bIsTextureFlipped;$/;"	m	class:CCGridBase
m_bKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    bool m_bKeypadEnabled;$/;"	m	class:CCLayer
m_bLandscape	CCDirector.h	/^    bool m_bLandscape;$/;"	m	class:CCDirector
m_bLineBreakWithoutSpaces	label_nodes/CCLabelBMFont.h	/^    bool m_bLineBreakWithoutSpaces;$/;"	m	class:CCLabelBMFont
m_bLocked	keypad_dispatcher/CCKeypadDispatcher.h	/^    bool m_bLocked;$/;"	m	class:CCKeypadDispatcher
m_bLocked	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bLocked;$/;"	m	class:CCTouchDispatcher
m_bMarkedForDeletion	script_support/CCScriptSupport.h	/^    bool                m_bMarkedForDeletion;$/;"	m	class:CCSchedulerScriptHandlerEntry
m_bNextDeltaTimeZero	CCDirector.h	/^    bool m_bNextDeltaTimeZero;$/;"	m	class:CCDirector
m_bOnce	actions/CCActionTiledGrid.h	/^    bool m_bOnce;$/;"	m	class:CCShatteredTiles3D
m_bOpacityModifyRGB	sprite_nodes/CCSprite.h	/^    bool m_bOpacityModifyRGB;$/;"	m	class:CCSprite
m_bOriginalState	actions/CCActionInterval.h	/^    bool m_bOriginalState;$/;"	m	class:CCBlink
m_bOwnTiles	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool                m_bOwnTiles;$/;"	m	class:CCTMXLayerInfo
m_bPVRHaveAlphaPremultiplied	textures/CCTexture2D.h	/^    bool m_bPVRHaveAlphaPremultiplied;$/;"	m	class:CCTexture2D
m_bPaused	CCDirector.h	/^    bool m_bPaused;$/;"	m	class:CCDirector
m_bPaused	script_support/CCScriptSupport.h	/^    bool                m_bPaused;$/;"	m	class:CCSchedulerScriptHandlerEntry
m_bPreMulti	platform/CCImage.h	/^    bool m_bPreMulti;$/;"	m	class:CCImage
m_bPurgeDirecotorInNextLoop	CCDirector.h	/^    bool m_bPurgeDirecotorInNextLoop; \/\/ this flag will be set to true in end()$/;"	m	class:CCDirector
m_bRectRotated	sprite_nodes/CCSprite.h	/^    bool   m_bRectRotated;$/;"	m	class:CCSprite
m_bRecursiveDirty	sprite_nodes/CCSprite.h	/^    bool                m_bRecursiveDirty;        \/\/ Subchildren needs to be updated$/;"	m	class:CCSprite
m_bReorderChildDirty	base_nodes/CCNode.h	/^    bool m_bReorderChildDirty;$/;"	m	class:CCNode
m_bRetainName	textures/CCTexturePVR.h	/^    bool m_bRetainName;$/;"	m	class:CCTexturePVR
m_bReverseDirection	misc_nodes/CCProgressTimer.h	/^    bool m_bReverseDirection;$/;"	m	class:CCProgressTimer
m_bRotated	sprite_nodes/CCSpriteFrame.h	/^    bool   m_bRotated;$/;"	m	class:CCSpriteFrame
m_bRunForever	CCScheduler.h	/^    bool m_bRunForever;$/;"	m	class:CCTimer
m_bRunning	base_nodes/CCNode.h	/^    bool m_bRunning;$/;"	m	class:CCNode
m_bSendCleanupToScene	CCDirector.h	/^    bool    m_bSendCleanupToScene;$/;"	m	class:CCDirector
m_bShakeZ	actions/CCActionGrid3D.h	/^    bool m_bShakeZ;$/;"	m	class:CCShaky3D
m_bShakeZ	actions/CCActionTiledGrid.h	/^    bool m_bShakeZ;$/;"	m	class:CCShakyTiles3D
m_bShatterZ	actions/CCActionTiledGrid.h	/^    bool m_bShatterZ;$/;"	m	class:CCShatteredTiles3D
m_bShouldBeHidden	sprite_nodes/CCSprite.h	/^    bool                m_bShouldBeHidden;        \/\/ should not be drawn because one of the ancestors is not visible$/;"	m	class:CCSprite
m_bStartingPositionInitialized	misc_nodes/CCMotionStreak.h	/^    bool m_bStartingPositionInitialized;$/;"	m	class:CCMotionStreak
m_bSupportsBGRA8888	CCConfiguration.h	/^    bool            m_bSupportsBGRA8888;$/;"	m	class:CCConfiguration
m_bSupportsDiscardFramebuffer	CCConfiguration.h	/^    bool            m_bSupportsDiscardFramebuffer;$/;"	m	class:CCConfiguration
m_bSupportsNPOT	CCConfiguration.h	/^    bool            m_bSupportsNPOT;$/;"	m	class:CCConfiguration
m_bSupportsPVRTC	CCConfiguration.h	/^    bool            m_bSupportsPVRTC;$/;"	m	class:CCConfiguration
m_bSupportsShareableVAO	CCConfiguration.h	/^    bool            m_bSupportsShareableVAO;$/;"	m	class:CCConfiguration
m_bSwallowsTouches	script_support/CCScriptSupport.h	/^    bool    m_bSwallowsTouches;$/;"	m	class:CCTouchScriptHandlerEntry
m_bSwallowsTouches	touch_dispatcher/CCTouchHandler.h	/^    bool m_bSwallowsTouches;$/;"	m	class:CCTargetedTouchHandler
m_bToAdd	keypad_dispatcher/CCKeypadDispatcher.h	/^    bool m_bToAdd;$/;"	m	class:CCKeypadDispatcher
m_bToAdd	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bToAdd;$/;"	m	class:CCTouchDispatcher
m_bToQuit	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bToQuit;$/;"	m	class:CCTouchDispatcher
m_bToRemove	keypad_dispatcher/CCKeypadDispatcher.h	/^    bool m_bToRemove;$/;"	m	class:CCKeypadDispatcher
m_bToRemove	touch_dispatcher/CCTouchDispatcher.h	/^    bool m_bToRemove;$/;"	m	class:CCTouchDispatcher
m_bTouchEnabled	layers_scenes_transitions_nodes/CCLayer.h	/^    bool m_bTouchEnabled;$/;"	m	class:CCLayer
m_bTransformDirty	base_nodes/CCNode.h	/^    bool m_bTransformDirty;$/;"	m	class:CCNode
m_bTransformSystemDirty	particle_nodes/CCParticleSystem.h	/^    bool m_bTransformSystemDirty;$/;"	m	class:CCParticleSystem
m_bUpdateHashLocked	CCScheduler.h	/^    bool m_bUpdateHashLocked;$/;"	m	class:CCScheduler
m_bUseAutomaticVertexZ	tilemap_parallax_nodes/CCTMXLayer.h	/^    bool                m_bUseAutomaticVertexZ;$/;"	m	class:CCTMXLayer
m_bUseDelay	CCScheduler.h	/^    bool m_bUseDelay;$/;"	m	class:CCTimer
m_bUsesTime	shaders/CCGLProgram.h	/^    bool              m_bUsesTime;$/;"	m	class:CCGLProgram
m_bVertical	actions/CCActionGrid3D.h	/^    bool m_bVertical;$/;"	m	class:CCWaves
m_bVisible	base_nodes/CCNode.h	/^    bool m_bVisible;$/;"	m	class:CCNode
m_bVisible	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    bool                m_bVisible;$/;"	m	class:CCTMXLayerInfo
m_blendFunc	sprite_nodes/CCSpriteBatchNode.h	/^    ccBlendFunc m_blendFunc;$/;"	m	class:CCSpriteBatchNode
m_cOpacity	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned char        m_cOpacity;$/;"	m	class:CCTMXLayer
m_cOpacity	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned char        m_cOpacity;$/;"	m	class:CCTMXLayerInfo
m_dAnimationInterval	CCDirector.h	/^    double m_dAnimationInterval;$/;"	m	class:CCDirector
m_dAverageTime	support/CCProfiling.h	/^    double m_dAverageTime;$/;"	m	class:CCProfilingTimer
m_dOldAnimationInterval	CCDirector.h	/^    double m_dOldAnimationInterval;$/;"	m	class:CCDirector
m_data	support/zip_support/ZipUtils.h	/^        ZipFilePrivate *m_data;$/;"	m	class:cocos2d::ZipFile
m_delta	actions/CCActionInterval.h	/^    CCPoint            m_delta;$/;"	m	class:CCJumpBy
m_delta	actions/CCActionInterval.h	/^    CCPoint m_delta;$/;"	m	class:CCMoveTo
m_deltaB	actions/CCActionInterval.h	/^    GLshort m_deltaB;$/;"	m	class:CCTintBy
m_deltaG	actions/CCActionInterval.h	/^    GLshort m_deltaG;$/;"	m	class:CCTintBy
m_deltaR	actions/CCActionInterval.h	/^    GLshort m_deltaR;$/;"	m	class:CCTintBy
m_directorProjection	effects/CCGrid.h	/^    ccDirectorProjection m_directorProjection;$/;"	m	class:CCGridBase
m_eCashedImageType	textures/CCTextureCache.h	/^    ccCachedImageType m_eCashedImageType;$/;"	m	class:VolatileTexture
m_eDictType	cocoa/CCDictionary.h	/^    CCDictType m_eDictType;$/;"	m	class:CCDictionary
m_eFormat	textures/CCTexturePVR.h	/^    CCTexture2DPixelFormat m_eFormat;$/;"	m	class:CCTexturePVR
m_eGLServerState	base_nodes/CCNode.h	/^    ccGLServerState m_eGLServerState;$/;"	m	class:CCNode
m_eOldDictType	cocoa/CCDictionary.h	/^    CCDictType m_eOldDictType;$/;"	m	class:CCDictionary
m_eOrientation	layers_scenes_transitions_nodes/CCTransition.h	/^    tOrientation m_eOrientation;$/;"	m	class:CCTransitionSceneOriented
m_ePixelFormat	misc_nodes/CCRenderTexture.h	/^    GLenum       m_ePixelFormat;$/;"	m	class:CCRenderTexture
m_eProjection	CCDirector.h	/^    ccDirectorProjection m_eProjection;$/;"	m	class:CCDirector
m_eResolutionPolicy	platform/CCEGLViewProtocol.h	/^    ResolutionPolicy m_eResolutionPolicy;$/;"	m	class:CCEGLViewProtocol
m_eResultType	platform/CCFileUtilsCommon_cpp.h	/^    CCSAXResult m_eResultType;$/;"	m	class:CCDictMaker
m_eScriptType	base_nodes/CCNode.h	/^    ccScriptType m_eScriptType;$/;"	m	class:CCNode
m_eState	menu_nodes/CCMenu.h	/^    tCCMenuState m_eState;$/;"	m	class:CCMenu
m_eTouchMode	layers_scenes_transitions_nodes/CCLayer.h	/^    ccTouchesMode m_eTouchMode;$/;"	m	class:CCLayer
m_eType	misc_nodes/CCProgressTimer.h	/^    CCProgressTimerType m_eType;$/;"	m	class:CCProgressTimer
m_elapsed	actions/CCActionInterval.h	/^    float m_elapsed;$/;"	m	class:CCActionInterval
m_endPosition	actions/CCActionInterval.h	/^    CCPoint m_endPosition;$/;"	m	class:CCMoveTo
m_fAccumDt	CCDirector.h	/^    float m_fAccumDt;$/;"	m	class:CCDirector
m_fAlphaThreshold	misc_nodes/CCClippingNode.h	/^    GLfloat m_fAlphaThreshold;$/;"	m	class:CCClippingNode
m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCLiquid
m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCRipple3D
m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCTwirl
m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCWaves
m_fAmplitude	actions/CCActionGrid3D.h	/^    float m_fAmplitude;$/;"	m	class:CCWaves3D
m_fAmplitude	actions/CCActionTiledGrid.h	/^    float m_fAmplitude;$/;"	m	class:CCJumpTiles3D
m_fAmplitude	actions/CCActionTiledGrid.h	/^    float m_fAmplitude;$/;"	m	class:CCWavesTiles3D
m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCLiquid
m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCRipple3D
m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCTwirl
m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCWaves
m_fAmplitudeRate	actions/CCActionGrid3D.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCWaves3D
m_fAmplitudeRate	actions/CCActionTiledGrid.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCJumpTiles3D
m_fAmplitudeRate	actions/CCActionTiledGrid.h	/^    float m_fAmplitudeRate;$/;"	m	class:CCWavesTiles3D
m_fAngleX	actions/CCActionCamera.h	/^    float m_fAngleX;$/;"	m	class:CCOrbitCamera
m_fAngleX	actions/CCActionInterval.h	/^    float m_fAngleX;$/;"	m	class:CCRotateBy
m_fAngleY	actions/CCActionInterval.h	/^    float m_fAngleY;$/;"	m	class:CCRotateBy
m_fAngleZ	actions/CCActionCamera.h	/^    float m_fAngleZ;$/;"	m	class:CCOrbitCamera
m_fBottomBoundary	actions/CCAction.h	/^    float m_fBottomBoundary;$/;"	m	class:CCFollow
m_fCenterX	CCCamera.h	/^    float m_fCenterX;$/;"	m	class:CCCamera
m_fCenterXOrig	actions/CCActionCamera.h	/^    float m_fCenterXOrig;$/;"	m	class:CCActionCamera
m_fCenterY	CCCamera.h	/^    float m_fCenterY;$/;"	m	class:CCCamera
m_fCenterYOrig	actions/CCActionCamera.h	/^    float m_fCenterYOrig;$/;"	m	class:CCActionCamera
m_fCenterZ	CCCamera.h	/^    float m_fCenterZ;$/;"	m	class:CCCamera
m_fCenterZOrig	actions/CCActionCamera.h	/^    float m_fCenterZOrig;$/;"	m	class:CCActionCamera
m_fContentScaleFactor	CCDirector.h	/^    float    m_fContentScaleFactor;$/;"	m	class:CCDirector
m_fContentScaleFactor	tilemap_parallax_nodes/CCTMXLayer.h	/^    float               m_fContentScaleFactor;            $/;"	m	class:CCTMXLayer
m_fDelay	CCScheduler.h	/^    float m_fDelay;$/;"	m	class:CCTimer
m_fDelta	actions/CCActionTween.h	/^    float            m_fDelta;$/;"	m	class:CCActionTween
m_fDeltaAngleX	actions/CCActionCamera.h	/^    float m_fDeltaAngleX;$/;"	m	class:CCOrbitCamera
m_fDeltaAngleZ	actions/CCActionCamera.h	/^    float m_fDeltaAngleZ;$/;"	m	class:CCOrbitCamera
m_fDeltaRadius	actions/CCActionCamera.h	/^    float m_fDeltaRadius;$/;"	m	class:CCOrbitCamera
m_fDeltaT	actions/CCActionCatmullRom.h	/^    float m_fDeltaT;$/;"	m	class:CCCardinalSplineTo
m_fDeltaTime	CCDirector.h	/^    float m_fDeltaTime;$/;"	m	class:CCDirector
m_fDeltaX	actions/CCActionInterval.h	/^    float m_fDeltaX;$/;"	m	class:CCScaleTo
m_fDeltaX	actions/CCActionInterval.h	/^    float m_fDeltaX;$/;"	m	class:CCSkewTo
m_fDeltaY	actions/CCActionInterval.h	/^    float m_fDeltaY;$/;"	m	class:CCScaleTo
m_fDeltaY	actions/CCActionInterval.h	/^    float m_fDeltaY;$/;"	m	class:CCSkewTo
m_fDiffAngleX	actions/CCActionInterval.h	/^    float m_fDiffAngleX;$/;"	m	class:CCRotateTo
m_fDiffAngleY	actions/CCActionInterval.h	/^    float m_fDiffAngleY;$/;"	m	class:CCRotateTo
m_fDlearDepth	misc_nodes/CCRenderTexture.h	/^    GLclampf     m_fDlearDepth;$/;"	m	class:CCRenderTexture
m_fDstAngleX	actions/CCActionInterval.h	/^    float m_fDstAngleX;$/;"	m	class:CCRotateTo
m_fDstAngleY	actions/CCActionInterval.h	/^    float m_fDstAngleY;$/;"	m	class:CCRotateTo
m_fDuration	actions/CCAction.h	/^    float m_fDuration;$/;"	m	class:CCFiniteTimeAction
m_fDuration	layers_scenes_transitions_nodes/CCTransition.h	/^    float    m_fDuration;$/;"	m	class:CCTransitionScene
m_fElapsed	CCScheduler.h	/^    float m_fElapsed;$/;"	m	class:CCTimer
m_fElapsed	particle_nodes/CCParticleSystem.h	/^    float m_fElapsed;$/;"	m	class:CCParticleSystem
m_fEmitCounter	particle_nodes/CCParticleSystem.h	/^    float m_fEmitCounter;$/;"	m	class:CCParticleSystem
m_fEndScaleX	actions/CCActionInterval.h	/^    float m_fEndScaleX;$/;"	m	class:CCScaleTo
m_fEndScaleY	actions/CCActionInterval.h	/^    float m_fEndScaleY;$/;"	m	class:CCScaleTo
m_fEndSkewX	actions/CCActionInterval.h	/^    float m_fEndSkewX;$/;"	m	class:CCSkewTo
m_fEndSkewY	actions/CCActionInterval.h	/^    float m_fEndSkewY;$/;"	m	class:CCSkewTo
m_fEyeX	CCCamera.h	/^    float m_fEyeX;$/;"	m	class:CCCamera
m_fEyeXOrig	actions/CCActionCamera.h	/^    float m_fEyeXOrig;$/;"	m	class:CCActionCamera
m_fEyeY	CCCamera.h	/^    float m_fEyeY;$/;"	m	class:CCCamera
m_fEyeYOrig	actions/CCActionCamera.h	/^    float m_fEyeYOrig;$/;"	m	class:CCActionCamera
m_fEyeZ	CCCamera.h	/^    float m_fEyeZ;$/;"	m	class:CCCamera
m_fEyeZOrig	actions/CCActionCamera.h	/^    float m_fEyeZOrig;$/;"	m	class:CCActionCamera
m_fFadeDelta	misc_nodes/CCMotionStreak.h	/^    float m_fFadeDelta;$/;"	m	class:CCMotionStreak
m_fFontSize	label_nodes/CCLabelTTF.h	/^    float m_fFontSize;$/;"	m	class:CCLabelTTF
m_fFontSize	textures/CCTextureCache.h	/^    float           m_fFontSize;$/;"	m	class:VolatileTexture
m_fFrameRate	CCDirector.h	/^    float m_fFrameRate;$/;"	m	class:CCDirector
m_fFrom	actions/CCActionProgressTimer.h	/^    float m_fFrom;$/;"	m	class:CCProgressFromTo
m_fFrom	actions/CCActionProgressTimer.h	/^    float m_fFrom;$/;"	m	class:CCProgressTo
m_fFrom	actions/CCActionTween.h	/^    float            m_fFrom, m_fTo;$/;"	m	class:CCActionTween
m_fFrom	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    float m_fFrom;$/;"	m	class:CCTransitionProgress
m_fInterval	CCScheduler.h	/^    float m_fInterval;$/;"	m	class:CCTimer
m_fLeftBoundary	actions/CCAction.h	/^    float m_fLeftBoundary;$/;"	m	class:CCFollow
m_fLensEffect	actions/CCActionGrid3D.h	/^    float m_fLensEffect;$/;"	m	class:CCLens3D
m_fMinSeg	misc_nodes/CCMotionStreak.h	/^    float m_fMinSeg;$/;"	m	class:CCMotionStreak
m_fNextDt	actions/CCActionInterval.h	/^    float m_fNextDt;$/;"	m	class:CCRepeat
m_fOriginalScale	menu_nodes/CCMenuItem.h	/^    float        m_fOriginalScale;$/;"	m	class:CCMenuItemLabel
m_fPercentage	misc_nodes/CCProgressTimer.h	/^    float m_fPercentage;$/;"	m	class:CCProgressTimer
m_fPeriod	actions/CCActionEase.h	/^    float m_fPeriod;$/;"	m	class:CCEaseElastic
m_fRadDeltaX	actions/CCActionCamera.h	/^    float m_fRadDeltaX;$/;"	m	class:CCOrbitCamera
m_fRadDeltaZ	actions/CCActionCamera.h	/^    float m_fRadDeltaZ;$/;"	m	class:CCOrbitCamera
m_fRadX	actions/CCActionCamera.h	/^    float m_fRadX;$/;"	m	class:CCOrbitCamera
m_fRadZ	actions/CCActionCamera.h	/^    float m_fRadZ;$/;"	m	class:CCOrbitCamera
m_fRadius	actions/CCActionCamera.h	/^    float m_fRadius;$/;"	m	class:CCOrbitCamera
m_fRadius	actions/CCActionGrid3D.h	/^    float m_fRadius;$/;"	m	class:CCLens3D
m_fRadius	actions/CCActionGrid3D.h	/^    float m_fRadius;$/;"	m	class:CCRipple3D
m_fRate	actions/CCActionEase.h	/^    float m_fRate;$/;"	m	class:CCEaseRateAction
m_fRate	actions/CCActionGrid.h	/^    float m_fRate;$/;"	m	class:CCAccelAmplitude
m_fRate	actions/CCActionGrid.h	/^    float m_fRate;$/;"	m	class:CCAccelDeccelAmplitude
m_fRate	actions/CCActionGrid.h	/^    float m_fRate;$/;"	m	class:CCDeccelAmplitude
m_fRightBoundary	actions/CCAction.h	/^    float m_fRightBoundary;$/;"	m	class:CCFollow
m_fRotationX	base_nodes/CCNode.h	/^    float m_fRotationX, m_fRotationY;$/;"	m	class:CCNode
m_fRotationY	base_nodes/CCNode.h	/^    float m_fRotationX, m_fRotationY;$/;"	m	class:CCNode
m_fScaleX	actions/CCActionInterval.h	/^    float m_fScaleX;$/;"	m	class:CCScaleTo
m_fScaleX	base_nodes/CCNode.h	/^    float m_fScaleX, m_fScaleY;$/;"	m	class:CCNode
m_fScaleX	platform/CCEGLViewProtocol.h	/^    float  m_fScaleX;$/;"	m	class:CCEGLViewProtocol
m_fScaleY	actions/CCActionInterval.h	/^    float m_fScaleY;$/;"	m	class:CCScaleTo
m_fScaleY	base_nodes/CCNode.h	/^    float m_fScaleX, m_fScaleY;$/;"	m	class:CCNode
m_fScaleY	platform/CCEGLViewProtocol.h	/^    float  m_fScaleY;$/;"	m	class:CCEGLViewProtocol
m_fSecondsPerFrame	CCDirector.h	/^    float m_fSecondsPerFrame;$/;"	m	class:CCDirector
m_fSkewX	actions/CCActionInterval.h	/^    float m_fSkewX;$/;"	m	class:CCSkewTo
m_fSkewX	base_nodes/CCNode.h	/^    float m_fSkewX, m_fSkewY;$/;"	m	class:CCNode
m_fSkewY	actions/CCActionInterval.h	/^    float m_fSkewY;$/;"	m	class:CCSkewTo
m_fSkewY	base_nodes/CCNode.h	/^    float m_fSkewX, m_fSkewY;$/;"	m	class:CCNode
m_fSpeed	actions/CCAction.h	/^    float m_fSpeed;$/;"	m	class:CCSpeed
m_fStartAngleX	actions/CCActionInterval.h	/^    float m_fStartAngleX;$/;"	m	class:CCRotateBy
m_fStartAngleX	actions/CCActionInterval.h	/^    float m_fStartAngleX;$/;"	m	class:CCRotateTo
m_fStartAngleY	actions/CCActionInterval.h	/^    float m_fStartAngleY;$/;"	m	class:CCRotateBy
m_fStartAngleY	actions/CCActionInterval.h	/^    float m_fStartAngleY;$/;"	m	class:CCRotateTo
m_fStartScaleX	actions/CCActionInterval.h	/^    float m_fStartScaleX;$/;"	m	class:CCScaleTo
m_fStartScaleY	actions/CCActionInterval.h	/^    float m_fStartScaleY;$/;"	m	class:CCScaleTo
m_fStartSkewX	actions/CCActionInterval.h	/^    float m_fStartSkewX;$/;"	m	class:CCSkewTo
m_fStartSkewY	actions/CCActionInterval.h	/^    float m_fStartSkewY;$/;"	m	class:CCSkewTo
m_fStroke	misc_nodes/CCMotionStreak.h	/^    float m_fStroke;$/;"	m	class:CCMotionStreak
m_fTension	actions/CCActionCatmullRom.h	/^    float m_fTension;$/;"	m	class:CCCardinalSplineTo
m_fTimeScale	CCScheduler.h	/^    float m_fTimeScale;$/;"	m	class:CCScheduler
m_fTo	actions/CCActionProgressTimer.h	/^    float m_fTo;$/;"	m	class:CCProgressFromTo
m_fTo	actions/CCActionProgressTimer.h	/^    float m_fTo;$/;"	m	class:CCProgressTo
m_fTo	actions/CCActionTween.h	/^    float            m_fFrom, m_fTo;$/;"	m	class:CCActionTween
m_fTo	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    float m_fTo;$/;"	m	class:CCTransitionProgress
m_fTopBoundary	actions/CCAction.h	/^    float m_fTopBoundary;$/;"	m	class:CCFollow
m_fUpX	CCCamera.h	/^    float m_fUpX;$/;"	m	class:CCCamera
m_fUpXOrig	actions/CCActionCamera.h	/^    float m_fUpXOrig;$/;"	m	class:CCActionCamera
m_fUpY	CCCamera.h	/^    float m_fUpY;$/;"	m	class:CCCamera
m_fUpYOrig	actions/CCActionCamera.h	/^    float m_fUpYOrig;$/;"	m	class:CCActionCamera
m_fUpZ	CCCamera.h	/^    float m_fUpZ;$/;"	m	class:CCCamera
m_fUpZOrig	actions/CCActionCamera.h	/^    float m_fUpZOrig;$/;"	m	class:CCActionCamera
m_fVertexZ	base_nodes/CCNode.h	/^    float m_fVertexZ;$/;"	m	class:CCNode
m_fWidth	label_nodes/CCLabelBMFont.h	/^    float m_fWidth;$/;"	m	class:CCLabelBMFont
m_fbo	effects/CCGrabber.h	/^    GLuint m_fbo;$/;"	m	class:CCGrabber
m_from	actions/CCActionInterval.h	/^    ccColor3B m_from;$/;"	m	class:CCTintTo
m_fromB	actions/CCActionInterval.h	/^    GLshort m_fromB;$/;"	m	class:CCTintBy
m_fromG	actions/CCActionInterval.h	/^    GLshort m_fromG;$/;"	m	class:CCTintBy
m_fromOpacity	actions/CCActionInterval.h	/^    GLubyte m_fromOpacity;$/;"	m	class:CCFadeTo
m_fromR	actions/CCActionInterval.h	/^    GLshort m_fromR;$/;"	m	class:CCTintBy
m_hAlignment	label_nodes/CCLabelTTF.h	/^    CCTextAlignment         m_hAlignment;$/;"	m	class:CCLabelTTF
m_height	actions/CCActionInterval.h	/^    float            m_height;$/;"	m	class:CCJumpBy
m_iKey	cocoa/CCDictionary.h	/^    intptr_t  m_iKey;   \/** hash key of integer type *\/$/;"	m	class:CCDictElement
m_last	actions/CCActionInterval.h	/^    int m_last;$/;"	m	class:CCSequence
m_lookupMatrix	CCCamera.h	/^    kmMat4    m_lookupMatrix;$/;"	m	class:CCCamera
m_nBufferCount	draw_nodes/CCDrawNode.h	/^    GLsizei         m_nBufferCount;$/;"	m	class:CCDrawNode
m_nClearStencil	misc_nodes/CCRenderTexture.h	/^    GLint        m_nClearStencil;$/;"	m	class:CCRenderTexture
m_nCols	actions/CCActionTiledGrid.h	/^    int m_nCols;$/;"	m	class:CCSplitCols
m_nCommonHeight	label_nodes/CCLabelBMFont.h	/^    int m_nCommonHeight;$/;"	m	class:CCBMFontConfiguration
m_nEnabledLayer	layers_scenes_transitions_nodes/CCLayer.h	/^    unsigned int m_nEnabledLayer;$/;"	m	class:CCLayerMultiplex
m_nEnabledSelectors	touch_dispatcher/CCTouchHandler.h	/^    int m_nEnabledSelectors;$/;"	m	class:CCTouchHandler
m_nEntryId	script_support/CCScriptSupport.h	/^    int m_nEntryId;$/;"	m	class:CCScriptHandlerEntry
m_nHandler	script_support/CCScriptSupport.h	/^    int m_nHandler;$/;"	m	class:CCScriptHandlerEntry
m_nId	touch_dispatcher/CCTouch.h	/^    int m_nId;$/;"	m	class:CCTouch
m_nItemsToRender	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    int m_nItemsToRender;$/;"	m	class:CCTileMapAtlas
m_nJumps	actions/CCActionInterval.h	/^    unsigned int    m_nJumps;$/;"	m	class:CCJumpBy
m_nJumps	actions/CCActionTiledGrid.h	/^    int m_nJumps;$/;"	m	class:CCJumpTiles3D
m_nLuaID	cocoa/CCObject.h	/^    int                 m_nLuaID;$/;"	m	class:CCObject
m_nMaxModelviewStackDepth	CCConfiguration.h	/^    GLint           m_nMaxModelviewStackDepth;$/;"	m	class:CCConfiguration
m_nMaxSamplesAllowed	CCConfiguration.h	/^    GLint           m_nMaxSamplesAllowed;$/;"	m	class:CCConfiguration
m_nMaxTextureSize	CCConfiguration.h	/^    GLint           m_nMaxTextureSize;$/;"	m	class:CCConfiguration
m_nMaxTextureUnits	CCConfiguration.h	/^    GLint           m_nMaxTextureUnits;$/;"	m	class:CCConfiguration
m_nNextFrame	actions/CCActionInterval.h	/^    int                m_nNextFrame;$/;"	m	class:CCAnimate
m_nOldFBO	misc_nodes/CCRenderTexture.h	/^    GLint        m_nOldFBO;$/;"	m	class:CCRenderTexture
m_nPriority	script_support/CCScriptSupport.h	/^    int     m_nPriority;$/;"	m	class:CCTouchScriptHandlerEntry
m_nPriority	touch_dispatcher/CCTouchHandler.h	/^    int m_nPriority;$/;"	m	class:CCTouchHandler
m_nRandrange	actions/CCActionGrid3D.h	/^    int m_nRandrange;$/;"	m	class:CCShaky3D
m_nRandrange	actions/CCActionTiledGrid.h	/^    int m_nRandrange;$/;"	m	class:CCShakyTiles3D
m_nRandrange	actions/CCActionTiledGrid.h	/^    int m_nRandrange;$/;"	m	class:CCShatteredTiles3D
m_nReuseGrid	effects/CCGrid.h	/^    int  m_nReuseGrid;$/;"	m	class:CCGridBase
m_nRows	actions/CCActionTiledGrid.h	/^    int m_nRows;$/;"	m	class:CCSplitRows
m_nScriptHandler	CCScheduler.h	/^    int m_nScriptHandler;$/;"	m	class:CCTimer
m_nScriptHandler	actions/CCActionInstant.h	/^	int m_nScriptHandler;$/;"	m	class:CCCallFunc
m_nScriptHandler	base_nodes/CCNode.h	/^    int m_nScriptHandler;$/;"	m	class:CCNode
m_nScriptTapHandler	menu_nodes/CCMenuItem.h	/^    int             m_nScriptTapHandler;$/;"	m	class:CCMenuItem
m_nSeed	actions/CCActionTiledGrid.h	/^    int                m_nSeed;$/;"	m	class:CCTurnOffTiles
m_nSeed	actions/CCActionTiledGrid.h	/^    int             m_nSeed;$/;"	m	class:CCShuffleTiles
m_nTag	actions/CCAction.h	/^    int     m_nTag;$/;"	m	class:CCAction
m_nTag	base_nodes/CCNode.h	/^    int m_nTag;$/;"	m	class:CCNode
m_nTilesCount	actions/CCActionTiledGrid.h	/^    unsigned int    m_nTilesCount;$/;"	m	class:CCTurnOffTiles
m_nTilesCount	actions/CCActionTiledGrid.h	/^    unsigned int m_nTilesCount;$/;"	m	class:CCShuffleTiles
m_nTimes	actions/CCActionGrid.h	/^    int m_nTimes;$/;"	m	class:CCReuseGrid
m_nTimes	actions/CCActionInterval.h	/^    unsigned int m_nTimes;$/;"	m	class:CCBlink
m_nTouchPriority	layers_scenes_transitions_nodes/CCLayer.h	/^    int m_nTouchPriority;$/;"	m	class:CCLayer
m_nTwirls	actions/CCActionGrid3D.h	/^    int m_nTwirls;$/;"	m	class:CCTwirl
m_nUniformColor	base_nodes/CCAtlasNode.h	/^    GLint    m_nUniformColor;$/;"	m	class:CCAtlasNode
m_nValue	cocoa/CCInteger.h	/^    int m_nValue;$/;"	m	class:CCInteger
m_nVertexDataCount	misc_nodes/CCProgressTimer.h	/^    int m_nVertexDataCount;$/;"	m	class:CCProgressTimer
m_nVertexZvalue	tilemap_parallax_nodes/CCTMXLayer.h	/^    int                    m_nVertexZvalue;$/;"	m	class:CCTMXLayer
m_nWaves	actions/CCActionGrid3D.h	/^    int m_nWaves;$/;"	m	class:CCLiquid
m_nWaves	actions/CCActionGrid3D.h	/^    int m_nWaves;$/;"	m	class:CCRipple3D
m_nWaves	actions/CCActionGrid3D.h	/^    int m_nWaves;$/;"	m	class:CCWaves
m_nWaves	actions/CCActionGrid3D.h	/^    int m_nWaves;$/;"	m	class:CCWaves3D
m_nWaves	actions/CCActionTiledGrid.h	/^    int m_nWaves;$/;"	m	class:CCWavesTiles3D
m_nZOrder	base_nodes/CCNode.h	/^    int m_nZOrder;$/;"	m	class:CCNode
m_obAnchorPoint	base_nodes/CCNode.h	/^    CCPoint m_obAnchorPoint;$/;"	m	class:CCNode
m_obAnchorPointInPoints	base_nodes/CCNode.h	/^    CCPoint m_obAnchorPointInPoints;$/;"	m	class:CCNode
m_obContentSize	base_nodes/CCNode.h	/^    CCSize m_obContentSize;$/;"	m	class:CCNode
m_obDesignResolutionSize	platform/CCEGLViewProtocol.h	/^    CCSize m_obDesignResolutionSize;$/;"	m	class:CCEGLViewProtocol
m_obDirectory	platform/CCFileUtils.h	/^    std::string m_obDirectory;$/;"	m	class:CCFileUtils
m_obFullScreenSize	actions/CCAction.h	/^    CCPoint m_obFullScreenSize;$/;"	m	class:CCFollow
m_obHalfScreenSize	actions/CCAction.h	/^    CCPoint m_obHalfScreenSize;$/;"	m	class:CCFollow
m_obOffset	sprite_nodes/CCSpriteFrame.h	/^    CCPoint m_obOffset;$/;"	m	class:CCSpriteFrame
m_obOffsetInPixels	sprite_nodes/CCSpriteFrame.h	/^    CCPoint m_obOffsetInPixels;$/;"	m	class:CCSpriteFrame
m_obOffsetPosition	sprite_nodes/CCSprite.h	/^    CCPoint m_obOffsetPosition;$/;"	m	class:CCSprite
m_obOriginalSize	sprite_nodes/CCSpriteFrame.h	/^    CCSize m_obOriginalSize;$/;"	m	class:CCSpriteFrame
m_obOriginalSizeInPixels	sprite_nodes/CCSpriteFrame.h	/^    CCSize m_obOriginalSizeInPixels;$/;"	m	class:CCSpriteFrame
m_obPosition	base_nodes/CCNode.h	/^    CCPoint m_obPosition;$/;"	m	class:CCNode
m_obRect	sprite_nodes/CCSprite.h	/^    CCRect m_obRect;$/;"	m	class:CCSprite
m_obRect	sprite_nodes/CCSpriteFrame.h	/^    CCRect m_obRect;$/;"	m	class:CCSpriteFrame
m_obRectInPixels	sprite_nodes/CCSpriteFrame.h	/^    CCRect m_obRectInPixels;$/;"	m	class:CCSpriteFrame
m_obScreenSize	platform/CCEGLViewProtocol.h	/^    CCSize m_obScreenSize;$/;"	m	class:CCEGLViewProtocol
m_obStep	effects/CCGrid.h	/^    CCPoint m_obStep;$/;"	m	class:CCGridBase
m_obUnflippedOffsetPositionFromCenter	sprite_nodes/CCSprite.h	/^    CCPoint m_obUnflippedOffsetPositionFromCenter;$/;"	m	class:CCSprite
m_obViewPortRect	platform/CCEGLViewProtocol.h	/^    CCRect m_obViewPortRect;$/;"	m	class:CCEGLViewProtocol
m_obWinSizeInPoints	CCDirector.h	/^    CCSize    m_obWinSizeInPoints;$/;"	m	class:CCDirector
m_observers	support/CCNotificationCenter.h	/^    CCArray *m_observers;$/;"	m	class:CCNotificationCenter
m_oldClearColor	effects/CCGrabber.h	/^    GLfloat    m_oldClearColor[4];$/;"	m	class:CCGrabber
m_oldFBO	effects/CCGrabber.h	/^    GLint m_oldFBO;$/;"	m	class:CCGrabber
m_pAction	actions/CCActionInterval.h	/^    CCFiniteTimeAction* m_pAction;$/;"	m	class:CCTargetedAction
m_pActionManager	base_nodes/CCNode.h	/^    CCActionManager *m_pActionManager;$/;"	m	class:CCNode
m_pActions	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pActions[2];$/;"	m	class:CCSequence
m_pActiveTimers	support/CCProfiling.h	/^    CCDictionary* m_pActiveTimers;$/;"	m	class:CCProfiler
m_pAlignment	label_nodes/CCLabelBMFont.h	/^    CCTextAlignment m_pAlignment;$/;"	m	class:CCLabelBMFont
m_pAnimations	sprite_nodes/CCAnimationCache.h	/^    CCDictionary* m_pAnimations;$/;"	m	class:CCAnimationCache
m_pArray	platform/CCFileUtilsCommon_cpp.h	/^    CCArray* m_pArray;$/;"	m	class:CCDictMaker
m_pAtlasIndexArray	tilemap_parallax_nodes/CCTMXLayer.h	/^    ccCArray            *m_pAtlasIndexArray;$/;"	m	class:CCTMXLayer
m_pAutoreasePool	platform/CCThread.h	/^    void *m_pAutoreasePool;$/;"	m	class:CCThread
m_pBuffer	draw_nodes/CCDrawNode.h	/^    ccV2F_C4B_T2F   *m_pBuffer;$/;"	m	class:CCDrawNode
m_pBuffersVBO	particle_nodes/CCParticleSystemQuad.h	/^    GLuint                m_pBuffersVBO[2]; \/\/0: vertex  1: indices$/;"	m	class:CCParticleSystemQuad
m_pBuffersVBO	textures/CCTextureAtlas.h	/^    GLuint              m_pBuffersVBO[2]; \/\/0: vertex  1: indices$/;"	m	class:CCTextureAtlas
m_pCallFunc	actions/CCActionInstant.h	/^        SEL_CallFunc    m_pCallFunc;$/;"	m	union:CCCallFunc::__anon3
m_pCallFuncN	actions/CCActionInstant.h	/^        SEL_CallFuncN    m_pCallFuncN;$/;"	m	union:CCCallFunc::__anon3
m_pCallFuncND	actions/CCActionInstant.h	/^        SEL_CallFuncND    m_pCallFuncND;$/;"	m	union:CCCallFunc::__anon3
m_pCallFuncO	actions/CCActionInstant.h	/^        SEL_CallFuncO   m_pCallFuncO;$/;"	m	union:CCCallFunc::__anon3
m_pCamera	base_nodes/CCNode.h	/^    CCCamera *m_pCamera;$/;"	m	class:CCNode
m_pCharacterSet	label_nodes/CCLabelBMFont.h	/^    std::set<unsigned int> *m_pCharacterSet;$/;"	m	class:CCBMFontConfiguration
m_pChildren	base_nodes/CCNode.h	/^    CCArray *m_pChildren;$/;"	m	class:CCNode
m_pClaimedTouches	touch_dispatcher/CCTouchHandler.h	/^    CCSet *m_pClaimedTouches;$/;"	m	class:CCTargetedTouchHandler
m_pColorPointer	misc_nodes/CCMotionStreak.h	/^    GLubyte* m_pColorPointer;$/;"	m	class:CCMotionStreak
m_pConfiguration	label_nodes/CCLabelBMFont.h	/^    CCBMFontConfiguration *m_pConfiguration;$/;"	m	class:CCLabelBMFont
m_pControlPoints	actions/CCActionCatmullRom.h	/^    CCArray *m_pControlPoints;$/;"	m	class:CCPointArray
m_pCopyObject	cocoa/CCZone.h	/^    CCObject *m_pCopyObject;$/;"	m	class:CCZone
m_pCurDict	platform/CCFileUtilsCommon_cpp.h	/^    CCDictionary *m_pCurDict;$/;"	m	class:CCDictMaker
m_pCurReleasePool	cocoa/CCAutoreleasePool.h	/^    CCAutoreleasePool*                    m_pCurReleasePool;$/;"	m	class:CCPoolManager
m_pCurrentTarget	CCScheduler.h	/^    struct _hashSelectorEntry *m_pCurrentTarget;$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_hashSelectorEntry
m_pCurrentTarget	actions/CCActionManager.h	/^    struct _hashElement    *m_pCurrentTarget;$/;"	m	class:CCActionManager	typeref:struct:CCActionManager::_hashElement
m_pData	actions/CCActionInstant.h	/^    void            *m_pData;$/;"	m	class:CCCallFuncND
m_pData	platform/CCImage.h	/^    unsigned char *m_pData;$/;"	m	class:CCImage
m_pDelegate	keypad_dispatcher/CCKeypadDelegate.h	/^    CCKeypadDelegate* m_pDelegate;$/;"	m	class:CCKeypadHandler
m_pDelegate	platform/CCEGLViewProtocol.h	/^    EGLTouchDelegate* m_pDelegate;$/;"	m	class:CCEGLViewProtocol
m_pDelegate	touch_dispatcher/CCTouchHandler.h	/^    CCTouchDelegate *m_pDelegate;$/;"	m	class:CCTouchHandler
m_pDelegates	keypad_dispatcher/CCKeypadDispatcher.h	/^    CCArray* m_pDelegates;$/;"	m	class:CCKeypadDispatcher
m_pDelegator	platform/CCSAXParser.h	/^    CCSAXDelegator*    m_pDelegator;$/;"	m	class:CCSAXParser
m_pDrawsLabel	CCDirector.h	/^    CCLabelTTF *m_pDrawsLabel;$/;"	m	class:CCDirector
m_pElements	cocoa/CCDictionary.h	/^    CCDictElement* m_pElements;$/;"	m	class:CCDictionary
m_pFPSLabel	CCDirector.h	/^    CCLabelTTF *m_pFPSLabel;$/;"	m	class:CCDirector
m_pFontDefDictionary	label_nodes/CCLabelBMFont.h	/^    tCCFontDefHashElement *m_pFontDefDictionary;$/;"	m	class:CCBMFontConfiguration
m_pFontName	label_nodes/CCLabelTTF.h	/^    std::string * m_pFontName;$/;"	m	class:CCLabelTTF
m_pGlExtensions	CCConfiguration.h	/^    char *          m_pGlExtensions;$/;"	m	class:CCConfiguration
m_pGrabber	effects/CCGrid.h	/^    CCGrabber *m_pGrabber;$/;"	m	class:CCGridBase
m_pGrid	base_nodes/CCNode.h	/^    CCGridBase *m_pGrid;$/;"	m	class:CCNode
m_pHandlersToAdd	keypad_dispatcher/CCKeypadDispatcher.h	/^    struct _ccCArray *m_pHandlersToAdd;$/;"	m	class:CCKeypadDispatcher	typeref:struct:CCKeypadDispatcher::_ccCArray
m_pHandlersToAdd	touch_dispatcher/CCTouchDispatcher.h	/^     CCArray* m_pHandlersToAdd;$/;"	m	class:CCTouchDispatcher
m_pHandlersToRemove	keypad_dispatcher/CCKeypadDispatcher.h	/^    struct _ccCArray *m_pHandlersToRemove;$/;"	m	class:CCKeypadDispatcher	typeref:struct:CCKeypadDispatcher::_ccCArray
m_pHandlersToRemove	touch_dispatcher/CCTouchDispatcher.h	/^    struct _ccCArray *m_pHandlersToRemove;$/;"	m	class:CCTouchDispatcher	typeref:struct:CCTouchDispatcher::_ccCArray
m_pHashForTimers	CCScheduler.h	/^    struct _hashSelectorEntry *m_pHashForTimers;$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_hashSelectorEntry
m_pHashForUniforms	shaders/CCGLProgram.h	/^    struct _hashUniformEntry* m_pHashForUniforms;$/;"	m	class:CCGLProgram	typeref:struct:CCGLProgram::_hashUniformEntry
m_pHashForUpdates	CCScheduler.h	/^    struct _hashUpdateEntry *m_pHashForUpdates; \/\/ hash used to fetch quickly the list entries for pause,delete,etc$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_hashUpdateEntry
m_pImpl	text_input_node/CCIMEDispatcher.h	/^    Impl * m_pImpl;$/;"	m	class:CCIMEDispatcher
m_pInScene	layers_scenes_transitions_nodes/CCTransition.h	/^    CCScene    * m_pInScene;$/;"	m	class:CCTransitionScene
m_pIndices	effects/CCGrid.h	/^    GLushort *m_pIndices;$/;"	m	class:CCGrid3D
m_pIndices	effects/CCGrid.h	/^    GLushort *m_pIndices;$/;"	m	class:CCTiledGrid3D
m_pIndices	particle_nodes/CCParticleSystemQuad.h	/^    GLushort            *m_pIndices;    \/\/ indices$/;"	m	class:CCParticleSystemQuad
m_pIndices	textures/CCTextureAtlas.h	/^    GLushort*           m_pIndices;$/;"	m	class:CCTextureAtlas
m_pInnerAction	actions/CCAction.h	/^    CCActionInterval *m_pInnerAction;$/;"	m	class:CCSpeed
m_pInnerAction	actions/CCActionInterval.h	/^    CCActionInterval *m_pInnerAction;$/;"	m	class:CCRepeatForever
m_pInnerAction	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pInnerAction;$/;"	m	class:CCRepeat
m_pInputText	text_input_node/CCTextFieldTTF.h	/^    std::string * m_pInputText;$/;"	m	class:CCTextFieldTTF
m_pKerningDictionary	label_nodes/CCLabelBMFont.h	/^    tCCKerningHashElement *m_pKerningDictionary;$/;"	m	class:CCBMFontConfiguration
m_pLastUpdate	CCDirector.h	/^    struct cc_timeval *m_pLastUpdate;$/;"	m	class:CCDirector	typeref:struct:CCDirector::cc_timeval
m_pLayers	layers_scenes_transitions_nodes/CCLayer.h	/^    CCArray*     m_pLayers;$/;"	m	class:CCLayerMultiplex
m_pLens	text_input_node/CCTextFieldTTF.h	/^    LengthStack * m_pLens;$/;"	m	class:CCTextFieldTTF
m_pListener	menu_nodes/CCMenuItem.h	/^    CCObject*       m_pListener;$/;"	m	class:CCMenuItem
m_pLoadedFileNames	sprite_nodes/CCSpriteFrameCache.h	/^    std::set<std::string>*  m_pLoadedFileNames;$/;"	m	class:CCSpriteFrameCache
m_pManagedObjectArray	cocoa/CCAutoreleasePool.h	/^    CCArray*    m_pManagedObjectArray;    $/;"	m	class:CCAutoreleasePool
m_pNextScene	CCDirector.h	/^    CCScene *m_pNextScene;$/;"	m	class:CCDirector
m_pNotificationNode	CCDirector.h	/^    CCNode *m_pNotificationNode;$/;"	m	class:CCDirector
m_pObject	actions/CCActionInstant.h	/^    CCObject* m_pObject;$/;"	m	class:CCCallFuncO
m_pObject	cocoa/CCDictionary.h	/^    CCObject* m_pObject;\/** hash value *\/$/;"	m	class:CCDictElement
m_pOne	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pOne;$/;"	m	class:CCSpawn
m_pOrigFrame	actions/CCActionInterval.h	/^    CCSpriteFrame*  m_pOrigFrame;$/;"	m	class:CCAnimate
m_pOriginalTarget	actions/CCAction.h	/^    CCNode    *m_pOriginalTarget;$/;"	m	class:CCAction
m_pOriginalVertices	effects/CCGrid.h	/^    GLvoid *m_pOriginalVertices;$/;"	m	class:CCGrid3D
m_pOriginalVertices	effects/CCGrid.h	/^    GLvoid *m_pOriginalVertices;$/;"	m	class:CCTiledGrid3D
m_pOther	actions/CCActionEase.h	/^    CCActionInterval *m_pOther;$/;"	m	class:CCActionEase
m_pOther	actions/CCActionGrid.h	/^    CCActionInterval *m_pOther;$/;"	m	class:CCAccelAmplitude
m_pOther	actions/CCActionGrid.h	/^    CCActionInterval *m_pOther;$/;"	m	class:CCAccelDeccelAmplitude
m_pOther	actions/CCActionGrid.h	/^    CCActionInterval *m_pOther;$/;"	m	class:CCDeccelAmplitude
m_pOther	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pOther;$/;"	m	class:CCReverseTime
m_pOutScene	layers_scenes_transitions_nodes/CCTransition.h	/^    CCScene    * m_pOutScene;$/;"	m	class:CCTransitionScene
m_pParent	base_nodes/CCNode.h	/^    CCNode *m_pParent;$/;"	m	class:CCNode
m_pParticles	particle_nodes/CCParticleSystem.h	/^    tCCParticle *m_pParticles;$/;"	m	class:CCParticleSystem
m_pPixelFormatInfo	textures/CCTexturePVR.h	/^   const ccPVRTexturePixelFormatInfo *m_pPixelFormatInfo;$/;"	m	class:CCTexturePVR
m_pPlaceHolder	text_input_node/CCTextFieldTTF.h	/^    std::string * m_pPlaceHolder;$/;"	m	class:CCTextFieldTTF
m_pPointState	misc_nodes/CCMotionStreak.h	/^    float* m_pPointState;$/;"	m	class:CCMotionStreak
m_pPointVertexes	misc_nodes/CCMotionStreak.h	/^    CCPoint* m_pPointVertexes;$/;"	m	class:CCMotionStreak
m_pPoints	actions/CCActionCatmullRom.h	/^    CCPointArray *m_pPoints;$/;"	m	class:CCCardinalSplineTo
m_pPosToAtlasIndex	tilemap_parallax_nodes/CCTileMapAtlas.h	/^    CCDictionary* m_pPosToAtlasIndex;$/;"	m	class:CCTileMapAtlas
m_pPrograms	shaders/CCShaderCache.h	/^    CCDictionary* m_pPrograms;$/;"	m	class:CCShaderCache
m_pProjectionDelegate	CCDirector.h	/^    CCDirectorDelegate *m_pProjectionDelegate;$/;"	m	class:CCDirector
m_pQuads	particle_nodes/CCParticleSystemQuad.h	/^    ccV3F_C4B_T2F_Quad    *m_pQuads;        \/\/ quads to be rendered$/;"	m	class:CCParticleSystemQuad
m_pReleasePoolStack	cocoa/CCAutoreleasePool.h	/^    CCArray*    m_pReleasePoolStack;    $/;"	m	class:CCPoolManager
m_pReusedChar	label_nodes/CCLabelBMFont.h	/^    CCSprite *m_pReusedChar;$/;"	m	class:CCLabelBMFont
m_pReusedTile	tilemap_parallax_nodes/CCTMXLayer.h	/^    CCSprite            *m_pReusedTile;$/;"	m	class:CCTMXLayer
m_pRootArray	platform/CCFileUtilsCommon_cpp.h	/^    CCArray* m_pRootArray;$/;"	m	class:CCDictMaker
m_pRootDict	platform/CCFileUtilsCommon_cpp.h	/^    CCDictionary *m_pRootDict;$/;"	m	class:CCDictMaker
m_pRunningScene	CCDirector.h	/^    CCScene *m_pRunningScene;$/;"	m	class:CCDirector
m_pSPFLabel	CCDirector.h	/^    CCLabelTTF *m_pSPFLabel;$/;"	m	class:CCDirector
m_pSceneToBeModified	layers_scenes_transitions_nodes/CCTransitionProgress.h	/^    CCScene* m_pSceneToBeModified;$/;"	m	class:CCTransitionProgress
m_pScheduler	base_nodes/CCNode.h	/^    CCScheduler *m_pScheduler;$/;"	m	class:CCNode
m_pScriptAccelerateHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    CCScriptHandlerEntry* m_pScriptAccelerateHandlerEntry;$/;"	m	class:CCLayer
m_pScriptEngine	script_support/CCScriptSupport.h	/^    CCScriptEngineProtocol *m_pScriptEngine;$/;"	m	class:CCScriptEngineManager
m_pScriptHandlerEntries	CCScheduler.h	/^    CCArray* m_pScriptHandlerEntries;$/;"	m	class:CCScheduler
m_pScriptKeypadHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    CCScriptHandlerEntry* m_pScriptKeypadHandlerEntry;$/;"	m	class:CCLayer
m_pScriptTouchHandlerEntry	layers_scenes_transitions_nodes/CCLayer.h	/^    CCTouchScriptHandlerEntry* m_pScriptTouchHandlerEntry;$/;"	m	class:CCLayer
m_pSelectedItem	menu_nodes/CCMenu.h	/^    CCMenuItem *m_pSelectedItem;$/;"	m	class:CCMenu
m_pSelectorTarget	actions/CCActionInstant.h	/^    CCObject*   m_pSelectorTarget;$/;"	m	class:CCCallFunc
m_pSet	cocoa/CCSet.h	/^    std::set<CCObject *> *m_pSet;$/;"	m	class:CCSet
m_pShaderProgram	base_nodes/CCNode.h	/^    CCGLProgram *m_pShaderProgram;$/;"	m	class:CCNode
m_pShaderProgram	effects/CCGrid.h	/^    CCGLProgram* m_pShaderProgram;$/;"	m	class:CCGridBase
m_pSplitTimes	actions/CCActionInterval.h	/^    std::vector<float>* m_pSplitTimes;$/;"	m	class:CCAnimate
m_pSprite	misc_nodes/CCProgressTimer.h	/^    CCSprite *m_pSprite;$/;"	m	class:CCProgressTimer
m_pSpriteFrames	sprite_nodes/CCSpriteFrameCache.h	/^    CCDictionary* m_pSpriteFrames;$/;"	m	class:CCSpriteFrameCache
m_pSpriteFramesAliases	sprite_nodes/CCSpriteFrameCache.h	/^    CCDictionary* m_pSpriteFramesAliases;$/;"	m	class:CCSpriteFrameCache
m_pSquareColors	layers_scenes_transitions_nodes/CCLayer.h	/^    ccColor4F  m_pSquareColors[4];$/;"	m	class:CCLayerColor
m_pSquareVertices	layers_scenes_transitions_nodes/CCLayer.h	/^    ccVertex2F m_pSquareVertices[4];$/;"	m	class:CCLayerColor
m_pStandardHandlers	touch_dispatcher/CCTouchDispatcher.h	/^     CCArray* m_pStandardHandlers;$/;"	m	class:CCTouchDispatcher
m_pStencil	misc_nodes/CCClippingNode.h	/^    CCNode* m_pStencil;$/;"	m	class:CCClippingNode
m_pTarget	CCScheduler.h	/^    CCObject *m_pTarget;$/;"	m	class:CCTimer
m_pTarget	actions/CCAction.h	/^    CCNode    *m_pTarget;$/;"	m	class:CCAction
m_pTargetedHandlers	touch_dispatcher/CCTouchDispatcher.h	/^     CCArray* m_pTargetedHandlers;$/;"	m	class:CCTouchDispatcher
m_pTargets	actions/CCActionManager.h	/^    struct _hashElement    *m_pTargets;$/;"	m	class:CCActionManager	typeref:struct:CCActionManager::_hashElement
m_pTexCoordinates	effects/CCGrid.h	/^    GLvoid *m_pTexCoordinates;$/;"	m	class:CCGrid3D
m_pTexCoordinates	effects/CCGrid.h	/^    GLvoid *m_pTexCoordinates;$/;"	m	class:CCTiledGrid3D
m_pTexCoords	misc_nodes/CCMotionStreak.h	/^    ccTex2F* m_pTexCoords;$/;"	m	class:CCMotionStreak
m_pTexture	effects/CCGrid.h	/^    CCTexture2D *m_pTexture;$/;"	m	class:CCGridBase
m_pTexture	misc_nodes/CCMotionStreak.h	/^    CCTexture2D* m_pTexture;$/;"	m	class:CCMotionStreak
m_pTexture	misc_nodes/CCRenderTexture.h	/^    CCTexture2D* m_pTexture;$/;"	m	class:CCRenderTexture
m_pTextureCopy	misc_nodes/CCRenderTexture.h	/^    CCTexture2D* m_pTextureCopy;    \/\/ a copy of m_pTexture$/;"	m	class:CCRenderTexture
m_pTextureData	textures/CCTextureCache.h	/^    void *m_pTextureData;$/;"	m	class:VolatileTexture
m_pTextures	textures/CCTextureCache.h	/^    CCDictionary* m_pTextures;$/;"	m	class:CCTextureCache
m_pTileProperties	tilemap_parallax_nodes/CCTMXTiledMap.h	/^    CCDictionary* m_pTileProperties;$/;"	m	class:CCTMXTiledMap
m_pTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCDictionary* m_pTileProperties;$/;"	m	class:CCTMXMapInfo
m_pTiles	actions/CCActionTiledGrid.h	/^    Tile         *m_pTiles;$/;"	m	class:CCShuffleTiles
m_pTiles	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int        *m_pTiles;$/;"	m	class:CCTMXLayerInfo
m_pTilesOrder	actions/CCActionTiledGrid.h	/^    int                *m_pTilesOrder;$/;"	m	class:CCTurnOffTiles
m_pTilesOrder	actions/CCActionTiledGrid.h	/^    int             *m_pTilesOrder;$/;"	m	class:CCShuffleTiles
m_pTimer	script_support/CCScriptSupport.h	/^    cocos2d::CCTimer*   m_pTimer;$/;"	m	class:CCSchedulerScriptHandlerEntry
m_pTwo	actions/CCActionInterval.h	/^    CCFiniteTimeAction *m_pTwo;$/;"	m	class:CCSpawn
m_pUITextureImage	misc_nodes/CCRenderTexture.h	/^    CCImage*     m_pUITextureImage;$/;"	m	class:CCRenderTexture
m_pUpdates0List	CCScheduler.h	/^    struct _listEntry *m_pUpdates0List;            \/\/ list priority == 0$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_listEntry
m_pUpdatesNegList	CCScheduler.h	/^    struct _listEntry *m_pUpdatesNegList;        \/\/ list of priority < 0$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_listEntry
m_pUpdatesPosList	CCScheduler.h	/^    struct _listEntry *m_pUpdatesPosList;        \/\/ list priority > 0$/;"	m	class:CCScheduler	typeref:struct:CCScheduler::_listEntry
m_pUserData	base_nodes/CCNode.h	/^    void *m_pUserData;$/;"	m	class:CCNode
m_pUserObject	base_nodes/CCNode.h	/^    CCObject *m_pUserObject;$/;"	m	class:CCNode
m_pVertexData	misc_nodes/CCProgressTimer.h	/^    ccV2F_C4B_T2F *m_pVertexData;$/;"	m	class:CCProgressTimer
m_pVertices	effects/CCGrid.h	/^    GLvoid *m_pVertices;$/;"	m	class:CCGrid3D
m_pVertices	effects/CCGrid.h	/^    GLvoid *m_pVertices;$/;"	m	class:CCTiledGrid3D
m_pVertices	misc_nodes/CCMotionStreak.h	/^    ccVertex2F* m_pVertices;$/;"	m	class:CCMotionStreak
m_pfnSelector	CCScheduler.h	/^    SEL_SCHEDULE m_pfnSelector;$/;"	m	class:CCTimer
m_pfnSelector	menu_nodes/CCMenuItem.h	/^    SEL_MenuHandler    m_pfnSelector;$/;"	m	class:CCMenuItem
m_pobBatchNode	sprite_nodes/CCSprite.h	/^    CCSpriteBatchNode*  m_pobBatchNode;        \/\/ Used batch node (weak reference)$/;"	m	class:CCSprite
m_pobDescendants	sprite_nodes/CCSpriteBatchNode.h	/^    CCArray* m_pobDescendants;$/;"	m	class:CCSpriteBatchNode
m_pobFollowedNode	actions/CCAction.h	/^    CCNode *m_pobFollowedNode;$/;"	m	class:CCFollow
m_pobOpenGLView	CCDirector.h	/^    CCEGLView    *m_pobOpenGLView;$/;"	m	class:CCDirector
m_pobScenesStack	CCDirector.h	/^    CCArray* m_pobScenesStack;$/;"	m	class:CCDirector
m_pobTexture	sprite_nodes/CCSprite.h	/^    CCTexture2D*       m_pobTexture;\/\/ Texture used to render the sprite$/;"	m	class:CCSprite
m_pobTexture	sprite_nodes/CCSpriteFrame.h	/^    CCTexture2D *m_pobTexture;$/;"	m	class:CCSpriteFrame
m_pobTextureAtlas	sprite_nodes/CCSprite.h	/^    CCTextureAtlas*     m_pobTextureAtlas;        \/\/ Sprite Sheet texture atlas (weak reference)$/;"	m	class:CCSprite
m_pobTextureAtlas	sprite_nodes/CCSpriteBatchNode.h	/^    CCTextureAtlas *m_pobTextureAtlas;$/;"	m	class:CCSpriteBatchNode
m_point	touch_dispatcher/CCTouch.h	/^    CCPoint m_point;$/;"	m	class:CCTouch
m_position	actions/CCActionGrid3D.h	/^    CCPoint m_position;$/;"	m	class:CCLens3D
m_position	actions/CCActionGrid3D.h	/^    CCPoint m_position;$/;"	m	class:CCRipple3D
m_position	actions/CCActionGrid3D.h	/^    CCPoint m_position;$/;"	m	class:CCTwirl
m_prevPoint	touch_dispatcher/CCTouch.h	/^    CCPoint m_prevPoint;$/;"	m	class:CCTouch
m_pszFPS	CCDirector.h	/^    char *m_pszFPS;$/;"	m	class:CCDirector
m_sAtlasName	label_nodes/CCLabelBMFont.h	/^    std::string m_sAtlasName;$/;"	m	class:CCBMFontConfiguration
m_sBlendFunc	draw_nodes/CCDrawNode.h	/^    ccBlendFunc     m_sBlendFunc;$/;"	m	class:CCDrawNode
m_sBlendFunc	sprite_nodes/CCSprite.h	/^    ccBlendFunc        m_sBlendFunc;    \/\/ Needed for the texture protocol$/;"	m	class:CCSprite
m_sClearColor	misc_nodes/CCRenderTexture.h	/^    ccColor4F    m_sClearColor;$/;"	m	class:CCRenderTexture
m_sColorUnmodified	sprite_nodes/CCSprite.h	/^    ccColor3B m_sColorUnmodified;$/;"	m	class:CCSprite
m_sConfig	actions/CCActionInterval.h	/^    ccBezierConfig m_sConfig;$/;"	m	class:CCBezierBy
m_sCurKey	platform/CCFileUtilsCommon_cpp.h	/^    std::string m_sCurKey;   \/\/\/< parsed key$/;"	m	class:CCDictMaker
m_sCurValue	platform/CCFileUtilsCommon_cpp.h	/^    std::string m_sCurValue; \/\/ parsed value$/;"	m	class:CCDictMaker
m_sCurrentString	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string m_sCurrentString;$/;"	m	class:CCTMXMapInfo
m_sFilePath	support/CCUserDefault.cpp	/^string CCUserDefault::m_sFilePath = string("");$/;"	m	class:CCUserDefault	file:
m_sFilePath	support/CCUserDefault.h	/^    static std::string m_sFilePath;$/;"	m	class:CCUserDefault
m_sFntFile	label_nodes/CCLabelBMFont.h	/^    std::string m_sFntFile;$/;"	m	class:CCLabelBMFont
m_sGridSize	actions/CCActionGrid.h	/^    ccGridSize m_sGridSize;$/;"	m	class:CCGridAction
m_sGridSize	effects/CCGrid.h	/^    ccGridSize m_sGridSize;$/;"	m	class:CCGridBase
m_sGroupName	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    std::string m_sGroupName;$/;"	m	class:CCTMXObjectGroup
m_sHandlerHelperData	touch_dispatcher/CCTouchDispatcher.h	/^    struct ccTouchHandlerHelperData m_sHandlerHelperData[ccTouchMax];$/;"	m	class:CCTouchDispatcher	typeref:struct:CCTouchDispatcher::ccTouchHandlerHelperData
m_sInitialString	label_nodes/CCLabelBMFont.h	/^    std::string m_sInitialString;$/;"	m	class:CCLabelBMFont
m_sInverse	base_nodes/CCNode.h	/^    CCAffineTransform m_sTransform, m_sInverse;$/;"	m	class:CCNode
m_sLayerName	tilemap_parallax_nodes/CCTMXLayer.h	/^    std::string m_sLayerName;$/;"	m	class:CCTMXLayer
m_sName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string            m_sName;$/;"	m	class:CCTMXLayerInfo
m_sName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string        m_sName;$/;"	m	class:CCTMXTilesetInfo
m_sPlistFile	particle_nodes/CCParticleSystem.h	/^    std::string m_sPlistFile;$/;"	m	class:CCParticleSystem
m_sQuad	sprite_nodes/CCSprite.h	/^    ccV3F_C4B_T2F_Quad m_sQuad;$/;"	m	class:CCSprite
m_sResources	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string m_sResources;$/;"	m	class:CCTMXMapInfo
m_sSourceImage	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string        m_sSourceImage;$/;"	m	class:CCTMXTilesetInfo
m_sStartTime	support/CCProfiling.h	/^    struct cc_timeval m_sStartTime;$/;"	m	class:CCProfilingTimer	typeref:struct:CCProfilingTimer::cc_timeval
m_sString	cocoa/CCString.h	/^    std::string m_sString;$/;"	m	class:CCString
m_sString	label_nodes/CCLabelAtlas.h	/^    std::string m_sString;$/;"	m	class:CCLabelAtlas
m_sString	label_nodes/CCLabelBMFont.h	/^    unsigned short* m_sString;$/;"	m	class:CCLabelBMFont
m_sTMXFileName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    std::string m_sTMXFileName;$/;"	m	class:CCTMXMapInfo
m_sToConfig	actions/CCActionInterval.h	/^    ccBezierConfig m_sToConfig;$/;"	m	class:CCBezierTo
m_sTransform	base_nodes/CCNode.h	/^    CCAffineTransform m_sTransform, m_sInverse;$/;"	m	class:CCNode
m_sbIsFilePathInitialized	support/CCUserDefault.cpp	/^bool CCUserDefault::m_sbIsFilePathInitialized = false;$/;"	m	class:CCUserDefault	file:
m_sbIsFilePathInitialized	support/CCUserDefault.h	/^    static bool m_sbIsFilePathInitialized;$/;"	m	class:CCUserDefault
m_scriptHandler	support/CCNotificationCenter.h	/^    int     m_scriptHandler;$/;"	m	class:CCNotificationCenter
m_size	textures/CCTextureCache.h	/^    CCSize          m_size;$/;"	m	class:VolatileTexture
m_spUserDefault	support/CCUserDefault.cpp	/^CCUserDefault* CCUserDefault::m_spUserDefault = 0;$/;"	m	class:CCUserDefault	file:
m_spUserDefault	support/CCUserDefault.h	/^    static CCUserDefault* m_spUserDefault;$/;"	m	class:CCUserDefault
m_split	actions/CCActionInterval.h	/^    float m_split;$/;"	m	class:CCSequence
m_startPosition	actions/CCActionCatmullRom.h	/^    CCPoint m_startPosition;$/;"	m	class:CCCardinalSplineBy
m_startPosition	actions/CCActionInterval.h	/^    CCPoint            m_startPosition;$/;"	m	class:CCJumpBy
m_startPosition	actions/CCActionInterval.h	/^    CCPoint m_startPosition;$/;"	m	class:CCBezierBy
m_startPosition	actions/CCActionInterval.h	/^    CCPoint m_startPosition;$/;"	m	class:CCMoveTo
m_strFileName	textures/CCTextureCache.h	/^    std::string m_strFileName;$/;"	m	class:VolatileTexture
m_strFontName	menu_nodes/CCMenuItem.h	/^    std::string m_strFontName;$/;"	m	class:CCMenuItemFont
m_strFontName	textures/CCTextureCache.h	/^    std::string     m_strFontName;$/;"	m	class:VolatileTexture
m_strKey	actions/CCActionTween.h	/^    std::string        m_strKey;$/;"	m	class:CCActionTween
m_strText	textures/CCTextureCache.h	/^    std::string     m_strText;$/;"	m	class:VolatileTexture
m_strTextureFilename	sprite_nodes/CCSpriteFrame.h	/^    std::string  m_strTextureFilename;$/;"	m	class:CCSpriteFrame
m_string	label_nodes/CCLabelTTF.h	/^    std::string m_string;$/;"	m	class:CCLabelTTF
m_szKey	cocoa/CCDictionary.h	/^    char m_szKey[MAX_KEY_LEN+1];  \/** hash key of string type*\/$/;"	m	class:CCDictElement
m_szViewName	platform/CCEGLViewProtocol.h	/^    char   m_szViewName[50];$/;"	m	class:CCEGLViewProtocol
m_tArrayStack	platform/CCFileUtilsCommon_cpp.h	/^    std::stack<CCArray*> m_tArrayStack;$/;"	m	class:CCDictMaker
m_tBlendFunc	misc_nodes/CCMotionStreak.h	/^    ccBlendFunc m_tBlendFunc;$/;"	m	class:CCMotionStreak
m_tBlendFunc	particle_nodes/CCParticleBatchNode.h	/^    ccBlendFunc m_tBlendFunc;$/;"	m	class:CCParticleBatchNode
m_tColor	layers_scenes_transitions_nodes/CCTransition.h	/^    ccColor4B    m_tColor;$/;"	m	class:CCTransitionFade
m_tColor	misc_nodes/CCMotionStreak.h	/^    ccColor3B m_tColor;$/;"	m	class:CCMotionStreak
m_tColorBackup	menu_nodes/CCMenuItem.h	/^    ccColor3B    m_tColorBackup;$/;"	m	class:CCMenuItemLabel
m_tColorUnmodified	base_nodes/CCAtlasNode.h	/^    ccColor3B    m_tColorUnmodified;$/;"	m	class:CCAtlasNode
m_tDictStack	platform/CCFileUtilsCommon_cpp.h	/^    std::stack<CCDictionary*> m_tDictStack;$/;"	m	class:CCDictMaker
m_tDimensions	label_nodes/CCLabelTTF.h	/^    CCSize m_tDimensions;$/;"	m	class:CCLabelTTF
m_tImageOffset	label_nodes/CCLabelBMFont.h	/^    CCPoint    m_tImageOffset;$/;"	m	class:CCLabelBMFont
m_tImageSize	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCSize            m_tImageSize;$/;"	m	class:CCTMXTilesetInfo
m_tLastPosition	tilemap_parallax_nodes/CCParallaxNode.h	/^    CCPoint    m_tLastPosition;$/;"	m	class:CCParallaxNode
m_tLayerSize	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCSize                m_tLayerSize;$/;"	m	class:CCTMXLayerInfo
m_tOffset	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCPoint                m_tOffset;$/;"	m	class:CCTMXLayerInfo
m_tPadding	label_nodes/CCLabelBMFont.h	/^    ccBMFontPadding    m_tPadding;$/;"	m	class:CCBMFontConfiguration
m_tPosition	actions/CCActionInstant.h	/^    CCPoint m_tPosition;$/;"	m	class:CCPlace
m_tPositionR	misc_nodes/CCMotionStreak.h	/^    CCPoint m_tPositionR;$/;"	m	class:CCMotionStreak
m_tState	platform/CCFileUtilsCommon_cpp.h	/^    CCSAXState m_tState;$/;"	m	class:CCDictMaker
m_tStateStack	platform/CCFileUtilsCommon_cpp.h	/^    std::stack<CCSAXState>  m_tStateStack;$/;"	m	class:CCDictMaker
m_tTileSize	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    CCSize            m_tTileSize;$/;"	m	class:CCTMXTilesetInfo
m_texParams	textures/CCTextureCache.h	/^    ccTexParams     m_texParams;$/;"	m	class:VolatileTexture
m_to	actions/CCActionInterval.h	/^    ccColor3B m_to;$/;"	m	class:CCTintTo
m_toOpacity	actions/CCActionInterval.h	/^    GLubyte m_toOpacity;$/;"	m	class:CCFadeTo
m_transformToBatch	sprite_nodes/CCSprite.h	/^    CCAffineTransform   m_transformToBatch;        \/\/$/;"	m	class:CCSprite
m_type	touch_dispatcher/CCTouchDispatcher.h	/^    int  m_type;$/;"	m	struct:ccTouchHandlerHelperData
m_uAllocatedParticles	particle_nodes/CCParticleSystem.h	/^    unsigned int m_uAllocatedParticles;$/;"	m	class:CCParticleSystem
m_uAtlasIndex	sprite_nodes/CCSprite.h	/^    unsigned int        m_uAtlasIndex;            \/\/ Absolute (real) Index on the SpriteSheet$/;"	m	class:CCSprite
m_uAutoReleaseCount	cocoa/CCObject.h	/^    unsigned int        m_uAutoReleaseCount;$/;"	m	class:CCObject
m_uBufferCapacity	draw_nodes/CCDrawNode.h	/^    unsigned int    m_uBufferCapacity;$/;"	m	class:CCDrawNode
m_uClearFlags	misc_nodes/CCRenderTexture.h	/^    GLbitfield   m_uClearFlags;$/;"	m	class:CCRenderTexture
m_uDepthRenderBufffer	misc_nodes/CCRenderTexture.h	/^    GLuint       m_uDepthRenderBufffer;$/;"	m	class:CCRenderTexture
m_uExecutedLoops	actions/CCActionInterval.h	/^       unsigned int    m_uExecutedLoops;$/;"	m	class:CCAnimate
m_uFBO	misc_nodes/CCRenderTexture.h	/^    GLuint       m_uFBO;$/;"	m	class:CCRenderTexture
m_uFirstGid	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int    m_uFirstGid;$/;"	m	class:CCTMXTilesetInfo
m_uFontSize	menu_nodes/CCMenuItem.h	/^    unsigned int m_uFontSize;$/;"	m	class:CCMenuItemFont
m_uFragShader	shaders/CCGLProgram.h	/^    GLuint            m_uFragShader;$/;"	m	class:CCGLProgram
m_uFrames	CCDirector.h	/^    unsigned int m_uFrames;$/;"	m	class:CCDirector
m_uHeight	textures/CCTexturePVR.h	/^    unsigned int m_uWidth, m_uHeight;$/;"	m	class:CCTexturePVR
m_uID	cocoa/CCObject.h	/^    unsigned int        m_uID;$/;"	m	class:CCObject
m_uItemHeight	base_nodes/CCAtlasNode.h	/^    unsigned int    m_uItemHeight;$/;"	m	class:CCAtlasNode
m_uItemWidth	base_nodes/CCAtlasNode.h	/^    unsigned int    m_uItemWidth;$/;"	m	class:CCAtlasNode
m_uItemsPerColumn	base_nodes/CCAtlasNode.h	/^    unsigned int m_uItemsPerColumn;$/;"	m	class:CCAtlasNode
m_uItemsPerRow	base_nodes/CCAtlasNode.h	/^    unsigned int m_uItemsPerRow;$/;"	m	class:CCAtlasNode
m_uMapStartChar	label_nodes/CCLabelAtlas.h	/^    unsigned int m_uMapStartChar;$/;"	m	class:CCLabelAtlas
m_uMargin	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int    m_uMargin;$/;"	m	class:CCTMXTilesetInfo
m_uMaxGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int        m_uMaxGID;$/;"	m	class:CCTMXLayer
m_uMaxGID	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int        m_uMaxGID;$/;"	m	class:CCTMXLayerInfo
m_uMaxPoints	misc_nodes/CCMotionStreak.h	/^    unsigned int m_uMaxPoints;$/;"	m	class:CCMotionStreak
m_uMinGID	tilemap_parallax_nodes/CCTMXLayer.h	/^    unsigned int        m_uMinGID;$/;"	m	class:CCTMXLayer
m_uMinGID	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int        m_uMinGID;$/;"	m	class:CCTMXLayerInfo
m_uName	textures/CCTexturePVR.h	/^    GLuint m_uName;$/;"	m	class:CCTexturePVR
m_uNuPoints	misc_nodes/CCMotionStreak.h	/^    unsigned int m_uNuPoints;$/;"	m	class:CCMotionStreak
m_uNumberOfMipmaps	textures/CCTexturePVR.h	/^    unsigned int m_uNumberOfMipmaps;                    \/\/ number of mipmap used$/;"	m	class:CCTexturePVR
m_uOrderOfArrival	base_nodes/CCNode.h	/^    unsigned int m_uOrderOfArrival;$/;"	m	class:CCNode
m_uParticleIdx	particle_nodes/CCParticleSystem.h	/^    unsigned int m_uParticleIdx;$/;"	m	class:CCParticleSystem
m_uPreviousNuPoints	misc_nodes/CCMotionStreak.h	/^    unsigned int m_uPreviousNuPoints;$/;"	m	class:CCMotionStreak
m_uProgram	shaders/CCGLProgram.h	/^    GLuint            m_uProgram;$/;"	m	class:CCGLProgram
m_uReference	cocoa/CCObject.h	/^    unsigned int        m_uReference;$/;"	m	class:CCObject
m_uRepeat	CCScheduler.h	/^    unsigned int m_uRepeat; \/\/0 = once, 1 is 2 x executed$/;"	m	class:CCTimer
m_uSpacing	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    unsigned int    m_uSpacing;$/;"	m	class:CCTMXTilesetInfo
m_uTimes	actions/CCActionInterval.h	/^    unsigned int m_uTimes;$/;"	m	class:CCRepeat
m_uTimesExecuted	CCScheduler.h	/^    unsigned int m_uTimesExecuted;$/;"	m	class:CCTimer
m_uTotal	actions/CCActionInterval.h	/^    unsigned int m_uTotal;$/;"	m	class:CCRepeat
m_uTotalFrames	CCDirector.h	/^    unsigned int m_uTotalFrames;$/;"	m	class:CCDirector
m_uUniforms	shaders/CCGLProgram.h	/^    GLint             m_uUniforms[kCCUniform_MAX];$/;"	m	class:CCGLProgram
m_uVAOname	particle_nodes/CCParticleSystemQuad.h	/^    GLuint                m_uVAOname;$/;"	m	class:CCParticleSystemQuad
m_uVAOname	textures/CCTextureAtlas.h	/^    GLuint              m_uVAOname;$/;"	m	class:CCTextureAtlas
m_uVao	draw_nodes/CCDrawNode.h	/^    GLuint      m_uVao;$/;"	m	class:CCDrawNode
m_uVbo	draw_nodes/CCDrawNode.h	/^    GLuint      m_uVbo;$/;"	m	class:CCDrawNode
m_uVertShader	shaders/CCGLProgram.h	/^    GLuint            m_uVertShader;$/;"	m	class:CCGLProgram
m_uWidth	textures/CCTexturePVR.h	/^    unsigned int m_uWidth, m_uHeight;$/;"	m	class:CCTexturePVR
m_vAlignment	label_nodes/CCLabelTTF.h	/^    CCVerticalTextAlignment m_vAlignment;$/;"	m	class:CCLabelTTF
m_vAlignment	textures/CCTextureCache.h	/^    CCVerticalTextAlignment m_vAlignment;$/;"	m	class:VolatileTexture
m_winSize	actions/CCActionTiledGrid.h	/^    CCSize m_winSize;$/;"	m	class:CCSplitCols
m_winSize	actions/CCActionTiledGrid.h	/^    CCSize m_winSize;$/;"	m	class:CCSplitRows
magFilter	textures/CCTexture2D.h	/^    GLuint    magFilter;$/;"	m	struct:_ccTexParams
mainLoop	CCDirector.cpp	/^void CCDisplayLinkDirector::mainLoop(void)$/;"	f	class:CCDisplayLinkDirector
mapBuffers	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::mapBuffers()$/;"	f	class:CCTextureAtlas
markedForDeletion	CCScheduler.cpp	/^    bool                markedForDeletion; \/\/ selector will no longer be called and entry will be removed at end of the next tick$/;"	m	struct:_listEntry	file:
markedForDeletion	script_support/CCScriptSupport.h	/^    void markedForDeletion(void) {$/;"	f	class:CCSchedulerScriptHandlerEntry
mat	kazmath/include/kazmath/mat3.h	/^    kmScalar mat[9];$/;"	m	struct:kmMat3
mat	kazmath/include/kazmath/mat4.h	/^    kmScalar mat[16];$/;"	m	struct:kmMat4
max	kazmath/include/kazmath/aabb.h	/^    kmVec3 max; \/** The min corner of the box *\/$/;"	m	struct:kmAABB
max	support/data_support/ccCArray.h	/^	unsigned int num, max;$/;"	m	struct:_ccArray
max	support/data_support/ccCArray.h	/^    unsigned int num, max;$/;"	m	struct:_ccCArray
maxTime	support/CCProfiling.h	/^    double            maxTime;$/;"	m	class:CCProfilingTimer
menuWithArray	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::menuWithArray(CCArray* pArrayOfItems)$/;"	f	class:CCMenu
menuWithItem	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::menuWithItem(CCMenuItem* item)$/;"	f	class:CCMenu
menuWithItems	menu_nodes/CCMenu.cpp	/^CCMenu * CCMenu::menuWithItems(CCMenuItem* item, ...)$/;"	f	class:CCMenu
menu_selector	cocoa/CCObject.h	92;"	d
metadataLength	textures/CCTexturePVR.cpp	/^	uint32_t metadataLength;$/;"	m	struct:__anon50	file:
min	kazmath/include/kazmath/aabb.h	/^    kmVec3 min; \/** The max corner of the box *\/$/;"	m	struct:kmAABB
minFilter	textures/CCTexture2D.h	/^    GLuint    minFilter;$/;"	m	struct:_ccTexParams
minTime	support/CCProfiling.h	/^    double            minTime;$/;"	m	class:CCProfilingTimer
modeA	particle_nodes/CCParticleSystem.h	/^    } modeA;$/;"	m	class:CCParticleSystem	typeref:struct:CCParticleSystem::__anon24
modeA	particle_nodes/CCParticleSystem.h	/^    } modeA;$/;"	m	struct:sCCParticle	typeref:struct:sCCParticle::__anon22
modeB	particle_nodes/CCParticleSystem.h	/^    } modeB;$/;"	m	class:CCParticleSystem	typeref:struct:CCParticleSystem::__anon25
modeB	particle_nodes/CCParticleSystem.h	/^    } modeB;$/;"	m	struct:sCCParticle	typeref:struct:sCCParticle::__anon23
modelview_matrix_stack	kazmath/src/GL/matrix.c	/^km_mat4_stack modelview_matrix_stack;$/;"	v
moveQuadsFromIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::moveQuadsFromIndex(unsigned int index, unsigned int newIndex)$/;"	f	class:CCTextureAtlas
moveQuadsFromIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::moveQuadsFromIndex(unsigned int oldIndex, unsigned int amount, unsigned int newIndex)$/;"	f	class:CCTextureAtlas
mutableCopy	cocoa/CCSet.cpp	/^CCSet* CCSet::mutableCopy(void)$/;"	f	class:CCSet
my_error_exit	platform/CCImageCommon_cpp.h	/^my_error_exit (j_common_ptr cinfo)$/;"	f
my_error_mgr	platform/CCImageCommon_cpp.h	/^struct my_error_mgr {$/;"	s
my_error_ptr	platform/CCImageCommon_cpp.h	/^typedef struct my_error_mgr * my_error_ptr;$/;"	t	typeref:struct:my_error_mgr
need_quit	textures/CCTextureCache.cpp	/^static bool need_quit = false;$/;"	v	file:
newCCImage	misc_nodes/CCRenderTexture.cpp	/^CCImage* CCRenderTexture::newCCImage()$/;"	f	class:CCRenderTexture
next	CCScheduler.cpp	/^    struct    _listEntry    *prev, *next;$/;"	m	struct:_listEntry	typeref:struct:_listEntry::	file:
next	support/data_support/uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle
node	base_nodes/CCNode.cpp	/^CCNode * CCNode::node(void)$/;"	f	class:CCNode
node	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont * CCLabelBMFont::node()$/;"	f	class:CCLabelBMFont
node	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF * CCLabelTTF::node()$/;"	f	class:CCLabelTTF
node	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayer *CCLayer::node()$/;"	f	class:CCLayer
node	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor* CCLayerColor::node()$/;"	f	class:CCLayerColor
node	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerGradient* CCLayerGradient::node()$/;"	f	class:CCLayerGradient
node	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex* CCLayerMultiplex::node()$/;"	f	class:CCLayerMultiplex
node	layers_scenes_transitions_nodes/CCScene.cpp	/^CCScene *CCScene::node()$/;"	f	class:CCScene
node	menu_nodes/CCMenu.cpp	/^CCMenu* CCMenu::node()$/;"	f	class:CCMenu
node	menu_nodes/CCMenuItem.cpp	/^CCMenuItemImage* CCMenuItemImage::node()$/;"	f	class:CCMenuItemImage
node	particle_nodes/CCParticleExamples.cpp	/^CCParticleExplosion* CCParticleExplosion::node()$/;"	f	class:CCParticleExplosion
node	particle_nodes/CCParticleExamples.cpp	/^CCParticleFire* CCParticleFire::node()$/;"	f	class:CCParticleFire
node	particle_nodes/CCParticleExamples.cpp	/^CCParticleFireworks* CCParticleFireworks::node()$/;"	f	class:CCParticleFireworks
node	particle_nodes/CCParticleExamples.cpp	/^CCParticleFlower* CCParticleFlower::node()$/;"	f	class:CCParticleFlower
node	particle_nodes/CCParticleExamples.cpp	/^CCParticleGalaxy* CCParticleGalaxy::node()$/;"	f	class:CCParticleGalaxy
node	particle_nodes/CCParticleExamples.cpp	/^CCParticleMeteor * CCParticleMeteor::node()$/;"	f	class:CCParticleMeteor
node	particle_nodes/CCParticleExamples.cpp	/^CCParticleRain* CCParticleRain::node()$/;"	f	class:CCParticleRain
node	particle_nodes/CCParticleExamples.cpp	/^CCParticleSmoke* CCParticleSmoke::node()$/;"	f	class:CCParticleSmoke
node	particle_nodes/CCParticleExamples.cpp	/^CCParticleSnow* CCParticleSnow::node()$/;"	f	class:CCParticleSnow
node	particle_nodes/CCParticleExamples.cpp	/^CCParticleSpiral* CCParticleSpiral::node()$/;"	f	class:CCParticleSpiral
node	particle_nodes/CCParticleExamples.cpp	/^CCParticleSun* CCParticleSun::node()$/;"	f	class:CCParticleSun
node	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad * CCParticleSystemQuad::node()$/;"	f	class:CCParticleSystemQuad
node	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::node()$/;"	f	class:CCSprite
node	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCParallaxNode * CCParallaxNode::node()$/;"	f	class:CCParallaxNode
nodeToParentTransform	base_nodes/CCNode.cpp	/^CCAffineTransform CCNode::nodeToParentTransform(void)$/;"	f	class:CCNode
nodeToWorldTransform	base_nodes/CCNode.cpp	/^CCAffineTransform CCNode::nodeToWorldTransform()$/;"	f	class:CCNode
noexpand	support/data_support/uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
nonideal_items	support/data_support/uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table
num	support/data_support/ccCArray.h	/^	unsigned int num, max;$/;"	m	struct:_ccArray
num	support/data_support/ccCArray.h	/^    unsigned int num, max;$/;"	m	struct:_ccCArray
numMipmaps	textures/CCTexturePVR.cpp	/^    unsigned int numMipmaps;$/;"	m	struct:_PVRTexHeader	file:
numSurfs	textures/CCTexturePVR.cpp	/^    unsigned int numSurfs;$/;"	m	struct:_PVRTexHeader	file:
num_buckets	support/data_support/uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
num_file	support/zip_support/unzip.cpp	/^    ZPOS64_T num_file;             \/* number of the current file in the zipfile*\/$/;"	m	struct:cocos2d::__anon38	file:
num_items	support/data_support/uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table
num_of_file	support/zip_support/unzip.h	/^    ZPOS64_T num_of_file;            \/* # of file *\/$/;"	m	struct:cocos2d::unz64_file_pos_s
num_of_file	support/zip_support/unzip.h	/^    uLong num_of_file;            \/* # of file *\/$/;"	m	struct:cocos2d::unz_file_pos_s
numberOfCalls	support/CCProfiling.h	/^    unsigned int    numberOfCalls;$/;"	m	class:CCProfilingTimer
numberOfFaces	textures/CCTexturePVR.cpp	/^	uint32_t numberOfFaces;$/;"	m	struct:__anon50	file:
numberOfMipmaps	textures/CCTexturePVR.cpp	/^	uint32_t numberOfMipmaps;$/;"	m	struct:__anon50	file:
numberOfRunningActions	base_nodes/CCNode.cpp	/^unsigned int CCNode::numberOfRunningActions()$/;"	f	class:CCNode
numberOfRunningActionsInTarget	actions/CCActionManager.cpp	/^unsigned int CCActionManager::numberOfRunningActionsInTarget(CCObject *pTarget)$/;"	f	class:CCActionManager
numberOfSurfaces	textures/CCTexturePVR.cpp	/^	uint32_t numberOfSurfaces;$/;"	m	struct:__anon50	file:
number_entry	support/zip_support/unzip.h	/^    ZPOS64_T number_entry;         \/* total number of entries in$/;"	m	struct:cocos2d::unz_global_info64_s
number_entry	support/zip_support/unzip.h	/^    uLong number_entry;         \/* total number of entries in$/;"	m	struct:cocos2d::unz_global_info_s
objectAtIndex	cocoa/CCArray.cpp	/^CCObject* CCArray::objectAtIndex(unsigned int index)$/;"	f	class:CCArray
objectForKey	cocoa/CCDictionary.cpp	/^CCObject* CCDictionary::objectForKey(const std::string& key)$/;"	f	class:CCDictionary
objectForKey	cocoa/CCDictionary.cpp	/^CCObject* CCDictionary::objectForKey(int key)$/;"	f	class:CCDictionary
objectGroupNamed	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXObjectGroup * CCTMXTiledMap::objectGroupNamed(const char *groupName)$/;"	f	class:CCTMXTiledMap
objectNamed	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCDictionary* CCTMXObjectGroup::objectNamed(const char *objectName)$/;"	f	class:CCTMXObjectGroup
observerExisted	support/CCNotificationCenter.cpp	/^bool CCNotificationCenter::observerExisted(CCObject *target,const char *name)$/;"	f	class:CCNotificationCenter
offset	platform/CCImageCommon_cpp.h	/^    int offset;$/;"	m	struct:__anon30
offset_central_dir	support/zip_support/unzip.cpp	/^    ZPOS64_T offset_central_dir;   \/* offset of start of central directory with$/;"	m	struct:cocos2d::__anon38	file:
offset_curfile	support/zip_support/unzip.cpp	/^    ZPOS64_T offset_curfile;\/* relative offset of local header 8 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_internal_s	file:
offset_local_extrafield	support/zip_support/unzip.cpp	/^    ZPOS64_T offset_local_extrafield;\/* offset of the local extra field *\/$/;"	m	struct:cocos2d::__anon37	file:
onDraw	text_input_node/CCTextFieldTTF.h	/^    virtual bool onDraw(CCTextFieldTTF * sender)$/;"	f	class:CCTextFieldDelegate
onEnter	base_nodes/CCNode.cpp	/^void CCNode::onEnter()$/;"	f	class:CCNode
onEnter	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::onEnter()$/;"	f	class:CCLayer
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionCrossFade::onEnter()$/;"	f	class:CCTransitionCrossFade
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFade :: onEnter()$/;"	f	class:CCTransitionFade
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFadeTR::onEnter()$/;"	f	class:CCTransitionFadeTR
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFlipAngular::onEnter()$/;"	f	class:CCTransitionFlipAngular
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFlipX::onEnter()$/;"	f	class:CCTransitionFlipX
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFlipY::onEnter()$/;"	f	class:CCTransitionFlipY
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionJumpZoom::onEnter()$/;"	f	class:CCTransitionJumpZoom
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionMoveInL::onEnter()$/;"	f	class:CCTransitionMoveInL
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionRotoZoom:: onEnter()$/;"	f	class:CCTransitionRotoZoom
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::onEnter()$/;"	f	class:CCTransitionScene
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionShrinkGrow::onEnter()$/;"	f	class:CCTransitionShrinkGrow
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInL::onEnter()$/;"	f	class:CCTransitionSlideInL
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSplitCols::onEnter()$/;"	f	class:CCTransitionSplitCols
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionTurnOffTiles::onEnter()$/;"	f	class:CCTransitionTurnOffTiles
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionZoomFlipAngular::onEnter()$/;"	f	class:CCTransitionZoomFlipAngular
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionZoomFlipX::onEnter()$/;"	f	class:CCTransitionZoomFlipX
onEnter	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionZoomFlipY::onEnter()$/;"	f	class:CCTransitionZoomFlipY
onEnter	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^void CCTransitionPageTurn::onEnter()$/;"	f	class:CCTransitionPageTurn
onEnter	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgress::onEnter()$/;"	f	class:CCTransitionProgress
onEnter	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::onEnter()$/;"	f	class:CCClippingNode
onEnterTransitionDidFinish	base_nodes/CCNode.cpp	/^void CCNode::onEnterTransitionDidFinish()$/;"	f	class:CCNode
onEnterTransitionDidFinish	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::onEnterTransitionDidFinish()$/;"	f	class:CCLayer
onEnterTransitionDidFinish	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::onEnterTransitionDidFinish()$/;"	f	class:CCClippingNode
onExit	base_nodes/CCNode.cpp	/^void CCNode::onExit()$/;"	f	class:CCNode
onExit	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::onExit()$/;"	f	class:CCLayer
onExit	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionCrossFade::onExit()$/;"	f	class:CCTransitionCrossFade
onExit	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFade::onExit()$/;"	f	class:CCTransitionFade
onExit	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::onExit()$/;"	f	class:CCTransitionScene
onExit	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgress::onExit()$/;"	f	class:CCTransitionProgress
onExit	menu_nodes/CCMenu.cpp	/^void CCMenu::onExit()$/;"	f	class:CCMenu
onExit	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::onExit()$/;"	f	class:CCClippingNode
onExitTransitionDidStart	base_nodes/CCNode.cpp	/^void CCNode::onExitTransitionDidStart()$/;"	f	class:CCNode
onExitTransitionDidStart	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::onExitTransitionDidStart()$/;"	f	class:CCClippingNode
onTextFieldAttachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool onTextFieldAttachWithIME(CCTextFieldTTF * sender)$/;"	f	class:CCTextFieldDelegate
onTextFieldDeleteBackward	text_input_node/CCTextFieldTTF.h	/^    virtual bool onTextFieldDeleteBackward(CCTextFieldTTF * sender, const char * delText, int nLen)$/;"	f	class:CCTextFieldDelegate
onTextFieldDetachWithIME	text_input_node/CCTextFieldTTF.h	/^    virtual bool onTextFieldDetachWithIME(CCTextFieldTTF * sender)$/;"	f	class:CCTextFieldDelegate
onTextFieldInsertText	text_input_node/CCTextFieldTTF.h	/^    virtual bool onTextFieldInsertText(CCTextFieldTTF * sender, const char * text, int nLen)$/;"	f	class:CCTextFieldDelegate
opaque	support/zip_support/ioapi.h	/^    voidpf              opaque;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s
opaque	support/zip_support/ioapi.h	/^    voidpf              opaque;$/;"	m	struct:cocos2d::zlib_filefunc_def_s
operator ()	cocoa/CCString.h	/^        bool operator() (CCString * a, CCString * b) const {$/;"	f	struct:CCStringCompare
operator =	cocoa/CCGeometry.cpp	/^CCPoint& CCPoint::operator= (const CCPoint& other)$/;"	f	class:CCPoint
operator =	cocoa/CCGeometry.cpp	/^CCRect& CCRect::operator= (const CCRect& other)$/;"	f	class:CCRect
operator =	cocoa/CCGeometry.cpp	/^CCSize& CCSize::operator= (const CCSize& other)$/;"	f	class:CCSize
operator =	cocoa/CCString.cpp	/^CCString& CCString::operator= (const CCString& other)$/;"	f	class:CCString
origin	cocoa/CCGeometry.h	/^    CCPoint origin;$/;"	m	class:CCRect
originalTile	actions/CCActionGrid.cpp	/^ccQuad3 CCTiledGrid3DAction::originalTile(const ccGridSize& pos)$/;"	f	class:CCTiledGrid3DAction
originalTile	effects/CCGrid.cpp	/^ccQuad3 CCTiledGrid3D::originalTile(const ccGridSize& pos)$/;"	f	class:CCTiledGrid3D
originalVertex	actions/CCActionGrid.cpp	/^ccVertex3F CCGrid3DAction::originalVertex(const ccGridSize& pos)$/;"	f	class:CCGrid3DAction
originalVertex	effects/CCGrid.cpp	/^ccVertex3F CCGrid3D::originalVertex(const ccGridSize& pos)$/;"	f	class:CCGrid3D
pSharedSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.cpp	/^static CCSpriteFrameCache *pSharedSpriteFrameCache = NULL;$/;"	v	file:
parentToNodeTransform	base_nodes/CCNode.cpp	/^CCAffineTransform CCNode::parentToNodeTransform(void)$/;"	f	class:CCNode
parse	platform/CCSAXParser.cpp	/^bool CCSAXParser::parse(const char *pszFile)$/;"	f	class:CCSAXParser
parse	platform/CCSAXParser.cpp	/^bool CCSAXParser::parse(const char* pXMLData, unsigned int uDataLength)$/;"	f	class:CCSAXParser
parseCharacterDefinition	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseCharacterDefinition(std::string line, ccBMFontDef *characterDefinition)$/;"	f	class:CCBMFontConfiguration
parseCommonArguments	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseCommonArguments(std::string line)$/;"	f	class:CCBMFontConfiguration
parseConfigFile	label_nodes/CCLabelBMFont.cpp	/^std::set<unsigned int>* CCBMFontConfiguration::parseConfigFile(const char *controlFile)$/;"	f	class:CCBMFontConfiguration
parseImageFileName	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseImageFileName(std::string line, const char *fntFile)$/;"	f	class:CCBMFontConfiguration
parseInfoArguments	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseInfoArguments(std::string line)$/;"	f	class:CCBMFontConfiguration
parseInternalProperties	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::parseInternalProperties()$/;"	f	class:CCTMXLayer
parseKerningEntry	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::parseKerningEntry(std::string line)$/;"	f	class:CCBMFontConfiguration
parseLayer	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXLayer * CCTMXTiledMap::parseLayer(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXTiledMap
parseVersion1	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::parseVersion1(CCDictionary* animations)$/;"	f	class:CCAnimationCache
parseVersion2	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::parseVersion2(CCDictionary* animations)$/;"	f	class:CCAnimationCache
parseXMLFile	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^bool CCTMXMapInfo::parseXMLFile(const char *xmlFilename)$/;"	f	class:CCTMXMapInfo
parseXMLString	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^bool CCTMXMapInfo::parseXMLString(const char *xmlString)$/;"	f	class:CCTMXMapInfo
particleWithFile	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem * CCParticleSystem::particleWithFile(const char *plistFile)$/;"	f	class:CCParticleSystem
particleWithFile	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad * CCParticleSystemQuad::particleWithFile(const char *plistFile)$/;"	f	class:CCParticleSystemQuad
pause	CCDirector.cpp	/^void CCDirector::pause(void)$/;"	f	class:CCDirector
pauseAllRunningActions	actions/CCActionManager.cpp	/^CCSet* CCActionManager::pauseAllRunningActions()$/;"	f	class:CCActionManager
pauseAllTargets	CCScheduler.cpp	/^CCSet* CCScheduler::pauseAllTargets()$/;"	f	class:CCScheduler
pauseAllTargetsWithMinPriority	CCScheduler.cpp	/^CCSet* CCScheduler::pauseAllTargetsWithMinPriority(int nMinPriority)$/;"	f	class:CCScheduler
pauseSchedulerAndActions	base_nodes/CCNode.cpp	/^void CCNode::pauseSchedulerAndActions()$/;"	f	class:CCNode
pauseTarget	CCScheduler.cpp	/^void CCScheduler::pauseTarget(CCObject *pTarget)$/;"	f	class:CCScheduler
pauseTarget	actions/CCActionManager.cpp	/^void CCActionManager::pauseTarget(CCObject *pTarget)$/;"	f	class:CCActionManager
paused	CCScheduler.cpp	/^    bool                        paused;$/;"	m	struct:_hashSelectorEntry	file:
paused	CCScheduler.cpp	/^    bool                paused;$/;"	m	struct:_listEntry	file:
paused	actions/CCActionManager.cpp	/^    bool                        paused;$/;"	m	struct:_hashElement	file:
pcrc_32_tab	support/zip_support/unzip.cpp	/^    const unsigned long* pcrc_32_tab;$/;"	m	struct:cocos2d::__anon38	file:
performSelector	support/CCNotificationCenter.cpp	/^void CCNotificationObserver::performSelector(CCObject *obj)$/;"	f	class:CCNotificationObserver
pfile_in_zip_read	support/zip_support/unzip.cpp	/^    file_in_zip64_read_info_s* pfile_in_zip_read; \/* structure about the current$/;"	m	struct:cocos2d::__anon38	file:
pixelDepth	support/image_support/TGAlib.h	/^    unsigned char type, pixelDepth;$/;"	m	struct:cocos2d::sImageTGA
pixelFormat	textures/CCTexturePVR.cpp	/^	uint64_t pixelFormat;$/;"	m	struct:__anon50	file:
pixelFormat	textures/CCTexturePVR.cpp	/^	uint64_t pixelFormat;$/;"	m	struct:_pixelformat_hash	file:
pixelFormatInfo	textures/CCTexturePVR.cpp	/^	const ccPVRTexturePixelFormatInfo * pixelFormatInfo;$/;"	m	struct:_pixelformat_hash	file:
placeTile	actions/CCActionTiledGrid.cpp	/^void CCShuffleTiles::placeTile(const ccGridSize& pos, Tile *t)$/;"	f	class:CCShuffleTiles
pngReadCallback	platform/CCImageCommon_cpp.h	/^static void pngReadCallback(png_structp png_ptr, png_bytep data, png_size_t length)$/;"	f
pointWithCCPoint	tilemap_parallax_nodes/CCParallaxNode.cpp	/^    static CCPointObject * pointWithCCPoint(CCPoint ratio, CCPoint offset)$/;"	f	class:CCPointObject	file:
pop	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::pop()$/;"	f	class:CCPoolManager
popScene	CCDirector.cpp	/^void CCDirector::popScene(void)$/;"	f	class:CCDirector
popToRootScene	CCDirector.cpp	/^void CCDirector::popToRootScene(void)$/;"	f	class:CCDirector
pos	include/ccTypes.h	/^    ccVertex2F    pos;        \/\/ 8 bytes$/;"	m	struct:_ccPointSprite
pos	particle_nodes/CCParticleSystem.h	/^    CCPoint     pos;$/;"	m	struct:sCCParticle
pos	support/zip_support/ZipUtils.cpp	/^    unz_file_pos pos;$/;"	m	struct:ZipEntryInfo	file:
pos_in_central_dir	support/zip_support/unzip.cpp	/^    ZPOS64_T pos_in_central_dir;   \/* pos of the current file in the central dir*\/$/;"	m	struct:cocos2d::__anon38	file:
pos_in_zip_directory	support/zip_support/unzip.h	/^    ZPOS64_T pos_in_zip_directory;   \/* offset in zip file directory *\/$/;"	m	struct:cocos2d::unz64_file_pos_s
pos_in_zip_directory	support/zip_support/unzip.h	/^    uLong pos_in_zip_directory;   \/* offset in zip file directory *\/$/;"	m	struct:cocos2d::unz_file_pos_s
pos_in_zipfile	support/zip_support/unzip.cpp	/^    ZPOS64_T pos_in_zipfile;       \/* position in byte on the zipfile, for fseek*\/$/;"	m	struct:cocos2d::__anon37	file:
pos_local_extrafield	support/zip_support/unzip.cpp	/^    ZPOS64_T pos_local_extrafield;   \/* position in the local extra field in read*\/$/;"	m	struct:cocos2d::__anon37	file:
position	actions/CCActionTiledGrid.cpp	/^    CCPoint    position;$/;"	m	struct:Tile	file:
positionAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::positionAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer
positionForHexAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::positionForHexAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer
positionForIsoAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::positionForIsoAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer
positionForOrthoAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCPoint CCTMXLayer::positionForOrthoAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer
postNotification	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::postNotification(const char *name)$/;"	f	class:CCNotificationCenter
postNotification	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::postNotification(const char *name, CCObject *object)$/;"	f	class:CCNotificationCenter
postStep	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::postStep()$/;"	f	class:CCParticleSystem
postStep	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::postStep()$/;"	f	class:CCParticleSystemQuad
prev	CCScheduler.cpp	/^    struct    _listEntry    *prev, *next;$/;"	m	struct:_listEntry	typeref:struct:_listEntry::_listEntry	file:
prev	support/data_support/uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle
previousLocationInView	touch_dispatcher/CCTouch.h	/^    CC_DEPRECATED_ATTRIBUTE CCPoint previousLocationInView() { return m_prevPoint; }$/;"	f	class:CCTouch
priority	CCScheduler.cpp	/^    int                    priority;$/;"	m	struct:_listEntry	file:
priorityIn	CCScheduler.cpp	/^void CCScheduler::priorityIn(tListEntry **ppList, CCObject *pTarget, int nPriority, bool bPaused)$/;"	f	class:CCScheduler
programForKey	shaders/CCShaderCache.cpp	/^CCGLProgram* CCShaderCache::programForKey(const char* key)$/;"	f	class:CCShaderCache
programLog	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::programLog()$/;"	f	class:CCGLProgram
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgress::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgress
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressHorizontal::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressHorizontal
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressInOut::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressInOut
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressOutIn::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressOutIn
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressRadialCCW::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressRadialCCW
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressRadialCW::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressRadialCW
progressTimerNodeWithRenderTexture	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCProgressTimer* CCTransitionProgressVertical::progressTimerNodeWithRenderTexture(CCRenderTexture* texture)$/;"	f	class:CCTransitionProgressVertical
progressWithSprite	misc_nodes/CCProgressTimer.cpp	/^CCProgressTimer* CCProgressTimer::progressWithSprite(CCSprite* sp)$/;"	f	class:CCProgressTimer
projection_matrix_stack	kazmath/src/GL/matrix.c	/^km_mat4_stack projection_matrix_stack;$/;"	v
propertiesForGID	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCDictionary* CCTMXTiledMap::propertiesForGID(int GID)$/;"	f	class:CCTMXTiledMap
propertyNamed	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCString* CCTMXLayer::propertyNamed(const char *propertyName)$/;"	f	class:CCTMXLayer
propertyNamed	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCString* CCTMXObjectGroup::propertyNamed(const char* propertyName)$/;"	f	class:CCTMXObjectGroup
propertyNamed	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCString* CCTMXTiledMap::propertyNamed(const char *propertyName)$/;"	f	class:CCTMXTiledMap
pub	platform/CCImageCommon_cpp.h	/^  struct jpeg_error_mgr pub;	\/* "public" fields *\/$/;"	m	struct:my_error_mgr	typeref:struct:my_error_mgr::jpeg_error_mgr
purgeCachedData	CCDirector.cpp	/^void CCDirector::purgeCachedData(void)$/;"	f	class:CCDirector
purgeCachedData	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::purgeCachedData()$/;"	f	class:CCLabelBMFont
purgeConfiguration	CCConfiguration.cpp	/^void CCConfiguration::purgeConfiguration(void)$/;"	f	class:CCConfiguration
purgeDirector	CCDirector.cpp	/^void CCDirector::purgeDirector()$/;"	f	class:CCDirector
purgeFontDefDictionary	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::purgeFontDefDictionary()$/;"	f	class:CCBMFontConfiguration
purgeKerningDictionary	label_nodes/CCLabelBMFont.cpp	/^void CCBMFontConfiguration::purgeKerningDictionary()$/;"	f	class:CCBMFontConfiguration
purgeNotificationCenter	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::purgeNotificationCenter(void)$/;"	f	class:CCNotificationCenter
purgePoolManager	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::purgePoolManager()$/;"	f	class:CCPoolManager
purgeSharedAnimationCache	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::purgeSharedAnimationCache(void)$/;"	f	class:CCAnimationCache
purgeSharedManager	script_support/CCScriptSupport.cpp	/^void CCScriptEngineManager::purgeSharedManager(void)$/;"	f	class:CCScriptEngineManager
purgeSharedShaderCache	shaders/CCShaderCache.cpp	/^void CCShaderCache::purgeSharedShaderCache()$/;"	f	class:CCShaderCache
purgeSharedSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::purgeSharedSpriteFrameCache(void)$/;"	f	class:CCSpriteFrameCache
purgeSharedTextureCache	textures/CCTextureCache.cpp	/^void CCTextureCache::purgeSharedTextureCache()$/;"	f	class:CCTextureCache
purgeSharedUserDefault	support/CCUserDefault.cpp	/^void CCUserDefault::purgeSharedUserDefault()$/;"	f	class:CCUserDefault
push	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::push()$/;"	f	class:CCPoolManager
pushScene	CCDirector.cpp	/^void CCDirector::pushScene(CCScene *pScene)$/;"	f	class:CCDirector
pvrTag	textures/CCTexturePVR.cpp	/^    unsigned int pvrTag;$/;"	m	struct:_PVRTexHeader	file:
r	include/ccTypes.h	/^    GLfloat r;$/;"	m	struct:_ccColor4F
r	include/ccTypes.h	/^    GLubyte    r;$/;"	m	struct:_ccColor3B
r	include/ccTypes.h	/^    GLubyte r;$/;"	m	struct:_ccColor4B
radialAccel	particle_nodes/CCParticleSystem.h	/^        float        radialAccel;$/;"	m	struct:sCCParticle::__anon22
radialAccel	particle_nodes/CCParticleSystem.h	/^        float radialAccel;$/;"	m	struct:CCParticleSystem::__anon24
radialAccelVar	particle_nodes/CCParticleSystem.h	/^        float radialAccelVar;$/;"	m	struct:CCParticleSystem::__anon24
radius	particle_nodes/CCParticleSystem.h	/^        float        radius;$/;"	m	struct:sCCParticle::__anon23
randomObject	cocoa/CCArray.cpp	/^CCObject* CCArray::randomObject()$/;"	f	class:CCArray
raw	support/zip_support/unzip.cpp	/^    int   raw;$/;"	m	struct:cocos2d::__anon37	file:
read_buffer	support/zip_support/unzip.cpp	/^    char  *read_buffer;         \/* internal buffer for compressed data *\/$/;"	m	struct:cocos2d::__anon37	file:
rearrangeHandlers	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::rearrangeHandlers(CCArray *pArray)$/;"	f	class:CCTouchDispatcher
rebuildIndexInOrder	sprite_nodes/CCSpriteBatchNode.cpp	/^unsigned int CCSpriteBatchNode::rebuildIndexInOrder(CCSprite *pobParent, unsigned int uIndex)$/;"	f	class:CCSpriteBatchNode
recreateLabel	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::recreateLabel()$/;"	f	class:CCMenuItemFont
rect	label_nodes/CCLabelBMFont.h	/^    CCRect rect;$/;"	m	struct:_BMFontDef
rect	menu_nodes/CCMenuItem.cpp	/^CCRect CCMenuItem::rect()$/;"	f	class:CCMenuItem
rectForGID	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCRect CCTMXTilesetInfo::rectForGID(unsigned int gid)$/;"	f	class:CCTMXTilesetInfo
reduceMemoryFootprint	cocoa/CCArray.cpp	/^void CCArray::reduceMemoryFootprint()$/;"	f	class:CCArray
registerScriptAccelerateHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::registerScriptAccelerateHandler(int nHandler)$/;"	f	class:CCLayer
registerScriptHandler	base_nodes/CCNode.cpp	/^void CCNode::registerScriptHandler(int nHandler)$/;"	f	class:CCNode
registerScriptKeypadHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::registerScriptKeypadHandler(int nHandler)$/;"	f	class:CCLayer
registerScriptObserver	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::registerScriptObserver(int handler)$/;"	f	class:CCNotificationCenter
registerScriptTapHandler	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::registerScriptTapHandler(int nHandler)$/;"	f	class:CCMenuItem
registerScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::registerScriptTouchHandler(int nHandler, bool bIsMultiTouches, int nPriority, bool bSwallowsTouches)$/;"	f	class:CCLayer
registerWithTouchDispatcher	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::registerWithTouchDispatcher()$/;"	f	class:CCLayer
registerWithTouchDispatcher	menu_nodes/CCMenu.cpp	/^void CCMenu::registerWithTouchDispatcher()$/;"	f	class:CCMenu
release	cocoa/CCObject.cpp	/^void CCObject::release(void)$/;"	f	class:CCObject
releaseAllTimers	support/CCProfiling.cpp	/^void CCProfiler::releaseAllTimers()$/;"	f	class:CCProfiler
releaseData	textures/CCTexture2D.cpp	/^void CCTexture2D::releaseData(void *data)$/;"	f	class:CCTexture2D
releaseMap	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::releaseMap()$/;"	f	class:CCTMXLayer
releaseMap	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::releaseMap()$/;"	f	class:CCTileMapAtlas
releaseTimer	support/CCProfiling.cpp	/^void CCProfiler::releaseTimer(const char* timerName)$/;"	f	class:CCProfiler
reloadAllTextures	textures/CCTextureCache.cpp	/^void CCTextureCache::reloadAllTextures()$/;"	f	class:CCTextureCache
reloadAllTextures	textures/CCTextureCache.cpp	/^void VolatileTexture::reloadAllTextures()$/;"	f	class:VolatileTexture
reloadDefaultShaders	shaders/CCShaderCache.cpp	/^void CCShaderCache::reloadDefaultShaders()$/;"	f	class:CCShaderCache
removeAction	actions/CCActionManager.cpp	/^void CCActionManager::removeAction(CCAction *pAction)$/;"	f	class:CCActionManager
removeActionAtIndex	actions/CCActionManager.cpp	/^void CCActionManager::removeActionAtIndex(unsigned int uIndex, tHashElement *pElement)$/;"	f	class:CCActionManager
removeActionByTag	actions/CCActionManager.cpp	/^void CCActionManager::removeActionByTag(unsigned int tag, CCObject *pTarget)$/;"	f	class:CCActionManager
removeAllActions	actions/CCActionManager.cpp	/^void CCActionManager::removeAllActions(void)$/;"	f	class:CCActionManager
removeAllActionsFromTarget	actions/CCActionManager.cpp	/^void CCActionManager::removeAllActionsFromTarget(CCObject *pTarget)$/;"	f	class:CCActionManager
removeAllChildren	base_nodes/CCNode.cpp	/^void CCNode::removeAllChildren()$/;"	f	class:CCNode
removeAllChildrenWithCleanup	base_nodes/CCNode.cpp	/^void CCNode::removeAllChildrenWithCleanup(bool cleanup)$/;"	f	class:CCNode
removeAllChildrenWithCleanup	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::removeAllChildrenWithCleanup(bool doCleanup)$/;"	f	class:CCParticleBatchNode
removeAllChildrenWithCleanup	sprite_nodes/CCSprite.cpp	/^void CCSprite::removeAllChildrenWithCleanup(bool bCleanup)$/;"	f	class:CCSprite
removeAllChildrenWithCleanup	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::removeAllChildrenWithCleanup(bool bCleanup)$/;"	f	class:CCSpriteBatchNode
removeAllChildrenWithCleanup	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::removeAllChildrenWithCleanup(bool cleanup)$/;"	f	class:CCParallaxNode
removeAllDelegates	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::removeAllDelegates(void)$/;"	f	class:CCTouchDispatcher
removeAllObjects	cocoa/CCArray.cpp	/^void CCArray::removeAllObjects()$/;"	f	class:CCArray
removeAllObjects	cocoa/CCDictionary.cpp	/^void CCDictionary::removeAllObjects()$/;"	f	class:CCDictionary
removeAllQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::removeAllQuads()$/;"	f	class:CCTextureAtlas
removeAllTextures	textures/CCTextureCache.cpp	/^void CCTextureCache::removeAllTextures()$/;"	f	class:CCTextureCache
removeAnimationByName	sprite_nodes/CCAnimationCache.cpp	/^void CCAnimationCache::removeAnimationByName(const char* name)$/;"	f	class:CCAnimationCache
removeChild	base_nodes/CCNode.cpp	/^void CCNode::removeChild(CCNode* child)$/;"	f	class:CCNode
removeChild	base_nodes/CCNode.cpp	/^void CCNode::removeChild(CCNode* child, bool cleanup)$/;"	f	class:CCNode
removeChild	particle_nodes/CCParticleBatchNode.cpp	/^void  CCParticleBatchNode::removeChild(CCNode* child, bool cleanup)$/;"	f	class:CCParticleBatchNode
removeChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::removeChild(CCNode *pChild, bool bCleanup)$/;"	f	class:CCSprite
removeChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::removeChild(CCNode *child, bool cleanup)$/;"	f	class:CCSpriteBatchNode
removeChild	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::removeChild(CCNode* child, bool cleanup)$/;"	f	class:CCParallaxNode
removeChild	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::removeChild(CCNode* node, bool cleanup)$/;"	f	class:CCTMXLayer
removeChildAtIndex	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::removeChildAtIndex(unsigned int index, bool doCleanup)$/;"	f	class:CCParticleBatchNode
removeChildAtIndex	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::removeChildAtIndex(unsigned int uIndex, bool bDoCleanup)$/;"	f	class:CCSpriteBatchNode
removeChildByTag	base_nodes/CCNode.cpp	/^void CCNode::removeChildByTag(int tag)$/;"	f	class:CCNode
removeChildByTag	base_nodes/CCNode.cpp	/^void CCNode::removeChildByTag(int tag, bool cleanup)$/;"	f	class:CCNode
removeControlPointAtIndex	actions/CCActionCatmullRom.cpp	/^void CCPointArray::removeControlPointAtIndex(unsigned int index)$/;"	f	class:CCPointArray
removeDelegate	keypad_dispatcher/CCKeypadDispatcher.cpp	/^void CCKeypadDispatcher::removeDelegate(CCKeypadDelegate* pDelegate)$/;"	f	class:CCKeypadDispatcher
removeDelegate	text_input_node/CCIMEDispatcher.cpp	/^void CCIMEDispatcher::removeDelegate(CCIMEDelegate* pDelegate)$/;"	f	class:CCIMEDispatcher
removeDelegate	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::removeDelegate(CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher
removeFromParent	base_nodes/CCNode.cpp	/^void CCNode::removeFromParent()$/;"	f	class:CCNode
removeFromParentAndCleanup	base_nodes/CCNode.cpp	/^void CCNode::removeFromParentAndCleanup(bool cleanup)$/;"	f	class:CCNode
removeHashElement	CCScheduler.cpp	/^void CCScheduler::removeHashElement(_hashSelectorEntry *pElement)$/;"	f	class:CCScheduler
removeLastObject	cocoa/CCArray.cpp	/^void CCArray::removeLastObject(bool bReleaseObj)$/;"	f	class:CCArray
removeObject	cocoa/CCArray.cpp	/^void CCArray::removeObject(CCObject* object, bool bReleaseObj\/* = true*\/)$/;"	f	class:CCArray
removeObject	cocoa/CCAutoreleasePool.cpp	/^void CCAutoreleasePool::removeObject(CCObject* pObject)$/;"	f	class:CCAutoreleasePool
removeObject	cocoa/CCAutoreleasePool.cpp	/^void CCPoolManager::removeObject(CCObject* pObject)$/;"	f	class:CCPoolManager
removeObject	cocoa/CCSet.cpp	/^void CCSet::removeObject(CCObject *pObject)$/;"	f	class:CCSet
removeObjectAtIndex	cocoa/CCArray.cpp	/^void CCArray::removeObjectAtIndex(unsigned int index, bool bReleaseObj)$/;"	f	class:CCArray
removeObjectForElememt	cocoa/CCDictionary.cpp	/^void CCDictionary::removeObjectForElememt(CCDictElement* pElement)$/;"	f	class:CCDictionary
removeObjectForKey	cocoa/CCDictionary.cpp	/^void CCDictionary::removeObjectForKey(const std::string& key)$/;"	f	class:CCDictionary
removeObjectForKey	cocoa/CCDictionary.cpp	/^void CCDictionary::removeObjectForKey(int key)$/;"	f	class:CCDictionary
removeObjectsForKeys	cocoa/CCDictionary.cpp	/^void CCDictionary::removeObjectsForKeys(CCArray* pKeyArray)$/;"	f	class:CCDictionary
removeObjectsInArray	cocoa/CCArray.cpp	/^void CCArray::removeObjectsInArray(CCArray* otherArray)$/;"	f	class:CCArray
removeObserver	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::removeObserver(CCObject *target,const char *name)$/;"	f	class:CCNotificationCenter
removeQuadAtIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::removeQuadAtIndex(unsigned int index)$/;"	f	class:CCTextureAtlas
removeQuadsAtIndex	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::removeQuadsAtIndex(unsigned int index, unsigned int amount)$/;"	f	class:CCTextureAtlas
removeScriptEngine	script_support/CCScriptSupport.cpp	/^void CCScriptEngineManager::removeScriptEngine(void)$/;"	f	class:CCScriptEngineManager
removeScriptHandler	script_support/CCScriptSupport.h	/^    virtual void removeScriptHandler(int nHandler) {};$/;"	f	class:CCScriptEngineProtocol
removeSpriteFrameByName	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFrameByName(const char *pszName)$/;"	f	class:CCSpriteFrameCache
removeSpriteFrames	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFrames(void)$/;"	f	class:CCSpriteFrameCache
removeSpriteFramesFromDictionary	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFramesFromDictionary(CCDictionary* dictionary)$/;"	f	class:CCSpriteFrameCache
removeSpriteFramesFromFile	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFramesFromFile(const char* plist)$/;"	f	class:CCSpriteFrameCache
removeSpriteFramesFromTexture	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeSpriteFramesFromTexture(CCTexture2D* texture)$/;"	f	class:CCSpriteFrameCache
removeSpriteFromAtlas	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::removeSpriteFromAtlas(CCSprite *pobSprite)$/;"	f	class:CCSpriteBatchNode
removeTexture	textures/CCTextureCache.cpp	/^void CCTextureCache::removeTexture(CCTexture2D* texture)$/;"	f	class:CCTextureCache
removeTexture	textures/CCTextureCache.cpp	/^void VolatileTexture::removeTexture(CCTexture2D *t) $/;"	f	class:VolatileTexture
removeTextureForKey	textures/CCTextureCache.cpp	/^void CCTextureCache::removeTextureForKey(const char *textureKeyName)$/;"	f	class:CCTextureCache
removeTileAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::removeTileAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer
removeUnusedSpriteFrames	sprite_nodes/CCSpriteFrameCache.cpp	/^void CCSpriteFrameCache::removeUnusedSpriteFrames(void)$/;"	f	class:CCSpriteFrameCache
removeUnusedTextures	textures/CCTextureCache.cpp	/^void CCTextureCache::removeUnusedTextures()$/;"	f	class:CCTextureCache
removeUpdateFromHash	CCScheduler.cpp	/^void CCScheduler::removeUpdateFromHash(struct _listEntry *entry)$/;"	f	class:CCScheduler
removeUsedIndexBit	platform/CCEGLViewProtocol.cpp	/^static void removeUsedIndexBit(int index)$/;"	f	file:
render	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::render()$/;"	f	class:CCDrawNode
renderTextureWithWidthAndHeight	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture * CCRenderTexture::renderTextureWithWidthAndHeight(int w ,int h, CCTexture2DPixelFormat eFormat, GLuint uDepthStencilFormat)$/;"	f	class:CCRenderTexture
renderTextureWithWidthAndHeight	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture * CCRenderTexture::renderTextureWithWidthAndHeight(int w, int h)$/;"	f	class:CCRenderTexture
renderTextureWithWidthAndHeight	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture * CCRenderTexture::renderTextureWithWidthAndHeight(int w, int h, CCTexture2DPixelFormat eFormat)$/;"	f	class:CCRenderTexture
reorderBatch	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::reorderBatch(bool reorder)$/;"	f	class:CCSpriteBatchNode
reorderChild	base_nodes/CCNode.cpp	/^void CCNode::reorderChild(CCNode *child, int zOrder)$/;"	f	class:CCNode
reorderChild	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::reorderChild(CCNode * child, int zOrder)$/;"	f	class:CCParticleBatchNode
reorderChild	sprite_nodes/CCSprite.cpp	/^void CCSprite::reorderChild(CCNode *pChild, int zOrder)$/;"	f	class:CCSprite
reorderChild	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::reorderChild(CCNode *child, int zOrder)$/;"	f	class:CCSpriteBatchNode
replaceControlPoint	actions/CCActionCatmullRom.cpp	/^void CCPointArray::replaceControlPoint(cocos2d::CCPoint &controlPoint, unsigned int index)$/;"	f	class:CCPointArray
replaceObjectAtIndex	cocoa/CCArray.cpp	/^void CCArray::replaceObjectAtIndex(unsigned int index, CCObject* pObject, bool bReleaseObject\/* = true*\/)$/;"	f	class:CCArray
replaceScene	CCDirector.cpp	/^void CCDirector::replaceScene(CCScene *pScene)$/;"	f	class:CCDirector
reserved	support/zip_support/ZipUtils.h	/^        unsigned int             reserved;            \/\/ Reserved for users.$/;"	m	struct:cocos2d::CCZHeader
reset	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::reset()$/;"	f	class:CCMotionStreak
reset	shaders/CCGLProgram.cpp	/^void CCGLProgram::reset()$/;"	f	class:CCGLProgram
reset	support/CCProfiling.cpp	/^void CCProfilingTimer::reset()$/;"	f	class:CCProfilingTimer
resetSystem	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::resetSystem()$/;"	f	class:CCParticleSystem
resizeCapacity	textures/CCTextureAtlas.cpp	/^bool CCTextureAtlas::resizeCapacity(unsigned int newCapacity)$/;"	f	class:CCTextureAtlas
rest_read_compressed	support/zip_support/unzip.cpp	/^    ZPOS64_T rest_read_compressed; \/* number of byte to be decompressed *\/$/;"	m	struct:cocos2d::__anon37	file:
rest_read_uncompressed	support/zip_support/unzip.cpp	/^    ZPOS64_T rest_read_uncompressed;\/*number of byte to be obtained after decomp*\/$/;"	m	struct:cocos2d::__anon37	file:
restore	CCCamera.cpp	/^void CCCamera::restore(void)$/;"	f	class:CCCamera
resume	CCDirector.cpp	/^void CCDirector::resume(void)$/;"	f	class:CCDirector
resumeSchedulerAndActions	base_nodes/CCNode.cpp	/^void CCNode::resumeSchedulerAndActions()$/;"	f	class:CCNode
resumeTarget	CCScheduler.cpp	/^void CCScheduler::resumeTarget(CCObject *pTarget)$/;"	f	class:CCScheduler
resumeTarget	actions/CCActionManager.cpp	/^void CCActionManager::resumeTarget(CCObject *pTarget)$/;"	f	class:CCActionManager
resumeTargets	CCScheduler.cpp	/^void CCScheduler::resumeTargets(CCSet* pTargetsToResume)$/;"	f	class:CCScheduler
resumeTargets	actions/CCActionManager.cpp	/^void CCActionManager::resumeTargets(cocos2d::CCSet *targetsToResume)$/;"	f	class:CCActionManager
retain	cocoa/CCObject.cpp	/^void CCObject::retain(void)$/;"	f	class:CCObject
retainCount	cocoa/CCObject.cpp	/^unsigned int CCObject::retainCount(void)$/;"	f	class:CCObject
reuse	effects/CCGrid.cpp	/^void CCGrid3D::reuse(void)$/;"	f	class:CCGrid3D
reuse	effects/CCGrid.cpp	/^void CCGridBase::reuse(void)$/;"	f	class:CCGridBase
reuse	effects/CCGrid.cpp	/^void CCTiledGrid3D::reuse(void)$/;"	f	class:CCTiledGrid3D
reusedTileWithRect	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite* CCTMXLayer::reusedTileWithRect(CCRect rect)$/;"	f	class:CCTMXLayer
reverse	actions/CCAction.cpp	/^CCActionInterval *CCSpeed::reverse()$/;"	f	class:CCSpeed
reverse	actions/CCAction.cpp	/^CCFiniteTimeAction *CCFiniteTimeAction::reverse()$/;"	f	class:CCFiniteTimeAction
reverse	actions/CCActionCamera.cpp	/^CCActionInterval * CCActionCamera::reverse()$/;"	f	class:CCActionCamera
reverse	actions/CCActionCatmullRom.cpp	/^CCActionInterval* CCCardinalSplineBy::reverse()$/;"	f	class:CCCardinalSplineBy
reverse	actions/CCActionCatmullRom.cpp	/^CCActionInterval* CCCardinalSplineTo::reverse()$/;"	f	class:CCCardinalSplineTo
reverse	actions/CCActionCatmullRom.cpp	/^CCPointArray* CCPointArray::reverse()$/;"	f	class:CCPointArray
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCActionEase::reverse(void)$/;"	f	class:CCActionEase
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBackIn::reverse(void)$/;"	f	class:CCEaseBackIn
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBackInOut::reverse()$/;"	f	class:CCEaseBackInOut
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBackOut::reverse(void)$/;"	f	class:CCEaseBackOut
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBounce::reverse()$/;"	f	class:CCEaseBounce
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBounceIn::reverse(void)$/;"	f	class:CCEaseBounceIn
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBounceInOut::reverse()$/;"	f	class:CCEaseBounceInOut
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseBounceOut::reverse(void)$/;"	f	class:CCEaseBounceOut
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseElastic::reverse(void)$/;"	f	class:CCEaseElastic
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseElasticIn::reverse(void)$/;"	f	class:CCEaseElasticIn
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseElasticInOut::reverse(void)$/;"	f	class:CCEaseElasticInOut
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseElasticOut::reverse(void)$/;"	f	class:CCEaseElasticOut
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseExponentialIn::reverse(void)$/;"	f	class:CCEaseExponentialIn
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseExponentialInOut::reverse()$/;"	f	class:CCEaseExponentialInOut
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseExponentialOut::reverse(void)$/;"	f	class:CCEaseExponentialOut
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseIn::reverse(void)$/;"	f	class:CCEaseIn
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseInOut::reverse(void)$/;"	f	class:CCEaseInOut
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseOut::reverse()$/;"	f	class:CCEaseOut
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseRateAction::reverse(void)$/;"	f	class:CCEaseRateAction
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseSineIn::reverse(void)$/;"	f	class:CCEaseSineIn
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseSineInOut::reverse()$/;"	f	class:CCEaseSineInOut
reverse	actions/CCActionEase.cpp	/^CCActionInterval* CCEaseSineOut::reverse(void)$/;"	f	class:CCEaseSineOut
reverse	actions/CCActionGrid.cpp	/^CCActionInterval* CCAccelAmplitude::reverse(void)$/;"	f	class:CCAccelAmplitude
reverse	actions/CCActionGrid.cpp	/^CCActionInterval* CCAccelDeccelAmplitude::reverse(void)$/;"	f	class:CCAccelDeccelAmplitude
reverse	actions/CCActionGrid.cpp	/^CCActionInterval* CCDeccelAmplitude::reverse(void)$/;"	f	class:CCDeccelAmplitude
reverse	actions/CCActionGrid.cpp	/^CCActionInterval* CCGridAction::reverse(void)$/;"	f	class:CCGridAction
reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction * CCActionInstant::reverse() {$/;"	f	class:CCActionInstant
reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction *CCHide::reverse() {$/;"	f	class:CCHide
reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction* CCFlipX::reverse() {$/;"	f	class:CCFlipX
reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction* CCFlipY::reverse() {$/;"	f	class:CCFlipY
reverse	actions/CCActionInstant.cpp	/^CCFiniteTimeAction* CCShow::reverse() {$/;"	f	class:CCShow
reverse	actions/CCActionInterval.cpp	/^CCActionInterval *CCRepeatForever::reverse()$/;"	f	class:CCRepeatForever
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCActionInterval::reverse(void)$/;"	f	class:CCActionInterval
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCAnimate::reverse(void)$/;"	f	class:CCAnimate
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCBezierBy::reverse(void)$/;"	f	class:CCBezierBy
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCBlink::reverse(void)$/;"	f	class:CCBlink
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCDelayTime::reverse(void)$/;"	f	class:CCDelayTime
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCFadeIn::reverse(void)$/;"	f	class:CCFadeIn
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCFadeOut::reverse(void)$/;"	f	class:CCFadeOut
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCJumpBy::reverse(void)$/;"	f	class:CCJumpBy
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCMoveBy::reverse(void)$/;"	f	class:CCMoveBy
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCRepeat::reverse(void)$/;"	f	class:CCRepeat
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCReverseTime::reverse(void)$/;"	f	class:CCReverseTime
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCRotateBy::reverse(void)$/;"	f	class:CCRotateBy
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCScaleBy::reverse(void)$/;"	f	class:CCScaleBy
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCSequence::reverse(void)$/;"	f	class:CCSequence
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCSkewBy::reverse()$/;"	f	class:CCSkewBy
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCSpawn::reverse(void)$/;"	f	class:CCSpawn
reverse	actions/CCActionInterval.cpp	/^CCActionInterval* CCTintBy::reverse(void)$/;"	f	class:CCTintBy
reverse	actions/CCActionProgressTimer.cpp	/^CCActionInterval* CCProgressFromTo::reverse(void)$/;"	f	class:CCProgressFromTo
reverse	actions/CCActionTween.cpp	/^CCActionInterval* CCActionTween::reverse()$/;"	f	class:CCActionTween
reverseInline	actions/CCActionCatmullRom.cpp	/^void CCPointArray::reverseInline()$/;"	f	class:CCPointArray
reverseObjects	cocoa/CCArray.cpp	/^void CCArray::reverseObjects()$/;"	f	class:CCArray
right	label_nodes/CCLabelBMFont.h	/^    int right;$/;"	m	struct:_BMFontPadding
rotatePerSecond	particle_nodes/CCParticleSystem.h	/^        float rotatePerSecond;$/;"	m	struct:CCParticleSystem::__anon25
rotatePerSecondVar	particle_nodes/CCParticleSystem.h	/^        float rotatePerSecondVar;$/;"	m	struct:CCParticleSystem::__anon25
rotation	particle_nodes/CCParticleSystem.h	/^    float        rotation;$/;"	m	struct:sCCParticle
runAction	base_nodes/CCNode.cpp	/^CCAction * CCNode::runAction(CCAction* action)$/;"	f	class:CCNode
runWithScene	CCDirector.cpp	/^void CCDirector::runWithScene(CCScene *pScene)$/;"	f	class:CCDirector
sCCParticle	particle_nodes/CCParticleSystem.h	/^typedef struct sCCParticle {$/;"	s
sImageTGA	support/image_support/TGAlib.h	/^typedef struct sImageTGA {$/;"	s	namespace:cocos2d
s_ImageInfoMutex	textures/CCTextureCache.cpp	/^static pthread_mutex_t      s_ImageInfoMutex;$/;"	v	file:
s_SharedDirector	CCDirector.cpp	/^static CCDisplayLinkDirector *s_SharedDirector = NULL;$/;"	v	file:
s_TouchesIntergerDict	platform/CCEGLViewProtocol.cpp	/^static CCDictionary s_TouchesIntergerDict;$/;"	v	file:
s_asyncStructQueueMutex	textures/CCTextureCache.cpp	/^static pthread_mutex_t      s_asyncStructQueueMutex;$/;"	v	file:
s_bInitialized	draw_nodes/CCDrawingPrimitives.cpp	/^static bool s_bInitialized = false;$/;"	v	file:
s_bPopupNotify	platform/CCFileUtilsCommon_cpp.h	/^static bool s_bPopupNotify = true;$/;"	v
s_bVertexAttribColor	shaders/ccGLStateCache.cpp	/^static bool        s_bVertexAttribColor = false;$/;"	v	file:
s_bVertexAttribPosition	shaders/ccGLStateCache.cpp	/^static bool        s_bVertexAttribPosition = false;$/;"	v	file:
s_bVertexAttribTexCoords	shaders/ccGLStateCache.cpp	/^static bool        s_bVertexAttribTexCoords = false;$/;"	v	file:
s_eBlendingDest	shaders/ccGLStateCache.cpp	/^static GLenum    s_eBlendingDest = -1;$/;"	v	file:
s_eBlendingSource	shaders/ccGLStateCache.cpp	/^static GLenum    s_eBlendingSource = -1;$/;"	v	file:
s_eGLServerState	shaders/ccGLStateCache.cpp	/^static int       s_eGLServerState = 0;$/;"	v	file:
s_fPointSize	draw_nodes/CCDrawingPrimitives.cpp	/^static GLfloat s_fPointSize = 1.0f;$/;"	v	file:
s_gSharedConfiguration	CCConfiguration.h	/^    static CCConfiguration *s_gSharedConfiguration;$/;"	m	class:CCConfiguration
s_globalOrderOfArrival	base_nodes/CCNode.cpp	/^static int s_globalOrderOfArrival = 1;$/;"	v	file:
s_indexBitsUsed	platform/CCEGLViewProtocol.cpp	/^static unsigned int s_indexBitsUsed = 0;$/;"	v	file:
s_loadingThread	textures/CCTextureCache.cpp	/^static pthread_t s_loadingThread;$/;"	v	file:
s_nAsyncRefCount	textures/CCTextureCache.cpp	/^static unsigned long s_nAsyncRefCount = 0;$/;"	v	file:
s_nColorLocation	draw_nodes/CCDrawingPrimitives.cpp	/^static int s_nColorLocation = -1;$/;"	v	file:
s_nPointSizeLocation	draw_nodes/CCDrawingPrimitives.cpp	/^static int s_nPointSizeLocation = -1;$/;"	v	file:
s_pAsyncStructQueue	textures/CCTextureCache.cpp	/^static std::queue<AsyncStruct*>* s_pAsyncStructQueue = NULL;$/;"	v	file:
s_pConfigurations	label_nodes/CCLabelBMFont.cpp	/^static CCDictionary* s_pConfigurations = NULL;$/;"	v	file:
s_pImageQueue	textures/CCTextureCache.cpp	/^static std::queue<ImageInfo*>*   s_pImageQueue = NULL;$/;"	v	file:
s_pPoolManager	cocoa/CCAutoreleasePool.cpp	/^static CCPoolManager* s_pPoolManager = NULL;$/;"	v	file:
s_pSem	textures/CCTextureCache.cpp	/^static sem_t* s_pSem = NULL;$/;"	v	file:
s_pShader	draw_nodes/CCDrawingPrimitives.cpp	/^static CCGLProgram* s_pShader = NULL;$/;"	v	file:
s_pSharedAnimationCache	sprite_nodes/CCAnimationCache.h	/^    static CCAnimationCache* s_pSharedAnimationCache;$/;"	m	class:CCAnimationCache
s_pSharedScriptEngineManager	script_support/CCScriptSupport.cpp	/^static CCScriptEngineManager* s_pSharedScriptEngineManager = NULL;$/;"	v	file:
s_pTouches	platform/CCEGLViewProtocol.cpp	/^static CCTouch* s_pTouches[CC_MAX_TOUCHES] = { NULL };$/;"	v	file:
s_sem	textures/CCTextureCache.cpp	/^    static sem_t s_sem;$/;"	v	file:
s_sharedNotifCenter	support/CCNotificationCenter.cpp	/^static CCNotificationCenter *s_sharedNotifCenter = NULL;$/;"	v	file:
s_tColor	draw_nodes/CCDrawingPrimitives.cpp	/^static ccColor4F s_tColor = {1.0f,1.0f,1.0f,1.0f};$/;"	v	file:
s_uCurrentBoundTexture	shaders/ccGLStateCache.cpp	/^static GLuint    s_uCurrentBoundTexture[kCCMaxActiveTexture] =  {(GLuint)-1,(GLuint)-1,(GLuint)-1,(GLuint)-1, (GLuint)-1,(GLuint)-1,(GLuint)-1,(GLuint)-1, (GLuint)-1,(GLuint)-1,(GLuint)-1,(GLuint)-1, (GLuint)-1,(GLuint)-1,(GLuint)-1,(GLuint)-1, };$/;"	v	file:
s_uCurrentProjectionMatrix	shaders/ccGLStateCache.cpp	/^static GLuint      s_uCurrentProjectionMatrix = -1;$/;"	v	file:
s_uCurrentShaderProgram	shaders/ccGLStateCache.cpp	/^static GLuint    s_uCurrentShaderProgram = -1;$/;"	v	file:
s_uVAO	shaders/ccGLStateCache.cpp	/^static GLuint    s_uVAO = 0;$/;"	v	file:
saveToFile	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::saveToFile(const char *fileName, tCCImageFormat format)$/;"	f	class:CCRenderTexture
saveToFile	misc_nodes/CCRenderTexture.cpp	/^bool CCRenderTexture::saveToFile(const char *szFilePath)$/;"	f	class:CCRenderTexture
saveToFile	platform/CCImageCommon_cpp.h	/^bool CCImage::saveToFile(const char *pszFilePath, bool bIsToRGB)$/;"	f	class:CCImage
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionFadeTR::sceneOrder()$/;"	f	class:CCTransitionFadeTR
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::sceneOrder()$/;"	f	class:CCTransitionScene
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInB::sceneOrder()$/;"	f	class:CCTransitionSlideInB
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInL::sceneOrder()$/;"	f	class:CCTransitionSlideInL
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInR::sceneOrder()$/;"	f	class:CCTransitionSlideInR
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionSlideInT::sceneOrder()$/;"	f	class:CCTransitionSlideInT
sceneOrder	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionTurnOffTiles::sceneOrder()$/;"	f	class:CCTransitionTurnOffTiles
sceneOrder	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^void CCTransitionPageTurn::sceneOrder()$/;"	f	class:CCTransitionPageTurn
sceneOrder	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgress::sceneOrder()$/;"	f	class:CCTransitionProgress
sceneOrder	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgressInOut::sceneOrder()$/;"	f	class:CCTransitionProgressInOut
schedule	base_nodes/CCNode.cpp	/^void CCNode::schedule(SEL_SCHEDULE selector)$/;"	f	class:CCNode
schedule	base_nodes/CCNode.cpp	/^void CCNode::schedule(SEL_SCHEDULE selector, float interval)$/;"	f	class:CCNode
schedule	base_nodes/CCNode.cpp	/^void CCNode::schedule(SEL_SCHEDULE selector, float interval, unsigned int repeat, float delay)$/;"	f	class:CCNode
scheduleOnce	base_nodes/CCNode.cpp	/^void CCNode::scheduleOnce(SEL_SCHEDULE selector, float delay)$/;"	f	class:CCNode
scheduleScriptFunc	CCScheduler.cpp	/^unsigned int CCScheduler::scheduleScriptFunc(unsigned int nHandler, float fInterval, bool bPaused)$/;"	f	class:CCScheduler
scheduleSelector	CCScheduler.cpp	/^void CCScheduler::scheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, bool bPaused)$/;"	f	class:CCScheduler
scheduleSelector	CCScheduler.cpp	/^void CCScheduler::scheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget, float fInterval, unsigned int repeat, float delay, bool bPaused)$/;"	f	class:CCScheduler
scheduleUpdate	base_nodes/CCNode.cpp	/^void CCNode::scheduleUpdate()$/;"	f	class:CCNode
scheduleUpdateForTarget	CCScheduler.cpp	/^void CCScheduler::scheduleUpdateForTarget(CCObject *pTarget, int nPriority, bool bPaused)$/;"	f	class:CCScheduler
scheduleUpdateWithPriority	base_nodes/CCNode.cpp	/^void CCNode::scheduleUpdateWithPriority(int priority)$/;"	f	class:CCNode
schedule_selector	cocoa/CCObject.h	87;"	d
searchNewPositionInChildrenForZ	particle_nodes/CCParticleBatchNode.cpp	/^unsigned int CCParticleBatchNode::searchNewPositionInChildrenForZ(int z)$/;"	f	class:CCParticleBatchNode
seek64_file_func	support/zip_support/ioapi.h	/^typedef long     (ZCALLBACK *seek64_file_func)    OF((voidpf opaque, voidpf stream, ZPOS64_T offset, int origin));$/;"	t	namespace:cocos2d
seek_file_func	support/zip_support/ioapi.h	/^typedef long     (ZCALLBACK *seek_file_func)      OF((voidpf opaque, voidpf stream, uLong offset, int origin));$/;"	t	namespace:cocos2d
selected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::selected()$/;"	f	class:CCMenuItem
selected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::selected()$/;"	f	class:CCMenuItemLabel
selected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::selected()$/;"	f	class:CCMenuItemSprite
selected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::selected()$/;"	f	class:CCMenuItemToggle
selectedItem	menu_nodes/CCMenuItem.cpp	/^CCMenuItem* CCMenuItemToggle::selectedItem()$/;"	f	class:CCMenuItemToggle
selector	textures/CCTextureCache.cpp	/^    SEL_CallFuncO        selector;$/;"	m	struct:_AsyncStruct	file:
set	kazmath/src/mat4.c	/^void set(kmMat4 * pIn, int row, int col, float value)$/;"	f
set2DProjection	effects/CCGrid.cpp	/^void CCGridBase::set2DProjection()$/;"	f	class:CCGridBase
setAccelerometer	CCDirector.cpp	/^void CCDirector::setAccelerometer(CCAccelerometer* pAccelerometer)$/;"	f	class:CCDirector
setAccelerometerEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setAccelerometerEnabled(bool enabled)$/;"	f	class:CCLayer
setAccelerometerInterval	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setAccelerometerInterval(double interval) {$/;"	f	class:CCLayer
setActionManager	CCDirector.cpp	/^void CCDirector::setActionManager(CCActionManager* pActionManager)$/;"	f	class:CCDirector
setActionManager	base_nodes/CCNode.cpp	/^void CCNode::setActionManager(CCActionManager* actionManager)$/;"	f	class:CCNode
setActive	effects/CCGrid.cpp	/^void CCGridBase::setActive(bool bActive)$/;"	f	class:CCGridBase
setAliasTexParameters	textures/CCTexture2D.cpp	/^void CCTexture2D::setAliasTexParameters()$/;"	f	class:CCTexture2D
setAlignment	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setAlignment(CCTextAlignment alignment)$/;"	f	class:CCLabelBMFont
setAlphaBlending	CCDirector.cpp	/^void CCDirector::setAlphaBlending(bool bOn)$/;"	f	class:CCDirector
setAlphaThreshold	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::setAlphaThreshold(GLfloat fAlphaThreshold)$/;"	f	class:CCClippingNode
setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCLiquid
setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCRipple3D
setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCTwirl
setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCWaves
setAmplitude	actions/CCActionGrid3D.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCWaves3D
setAmplitude	actions/CCActionTiledGrid.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCJumpTiles3D
setAmplitude	actions/CCActionTiledGrid.h	/^    inline void setAmplitude(float fAmplitude) { m_fAmplitude = fAmplitude; }$/;"	f	class:CCWavesTiles3D
setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCLiquid
setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCRipple3D
setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCTwirl
setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCWaves
setAmplitudeRate	actions/CCActionGrid3D.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCWaves3D
setAmplitudeRate	actions/CCActionInterval.cpp	/^void CCActionInterval::setAmplitudeRate(float amp)$/;"	f	class:CCActionInterval
setAmplitudeRate	actions/CCActionTiledGrid.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCJumpTiles3D
setAmplitudeRate	actions/CCActionTiledGrid.h	/^    inline void setAmplitudeRate(float fAmplitudeRate) { m_fAmplitudeRate = fAmplitudeRate; }$/;"	f	class:CCWavesTiles3D
setAnchorPoint	base_nodes/CCNode.cpp	/^void CCNode::setAnchorPoint(const CCPoint& point)$/;"	f	class:CCNode
setAnchorPoint	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setAnchorPoint(const CCPoint& point)$/;"	f	class:CCLabelBMFont
setAnchorPoint	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setAnchorPoint(CCPoint anchorPoint)$/;"	f	class:CCProgressTimer
setAnchorPoint	sprite_nodes/CCSprite.cpp	/^void CCSprite::setAnchorPoint(const CCPoint& anchor)$/;"	f	class:CCSprite
setAngle	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setAngle(float var)$/;"	f	class:CCParticleSystem
setAngleVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setAngleVar(float var)$/;"	f	class:CCParticleSystem
setAnimationInterval	CCDirector.cpp	/^void CCDisplayLinkDirector::setAnimationInterval(double dValue)$/;"	f	class:CCDisplayLinkDirector
setAntiAliasTexParameters	textures/CCTexture2D.cpp	/^void CCTexture2D::setAntiAliasTexParameters()$/;"	f	class:CCTexture2D
setAtlasIndex	sprite_nodes/CCSprite.h	/^    inline void setAtlasIndex(unsigned int uAtlasIndex) { m_uAtlasIndex = uAtlasIndex; }$/;"	f	class:CCSprite
setAtlasName	label_nodes/CCLabelBMFont.h	/^    inline void setAtlasName(const char* atlasName) { m_sAtlasName = atlasName; }$/;"	f	class:CCBMFontConfiguration
setAutoDraw	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setAutoDraw(bool bAutoDraw)$/;"	f	class:CCRenderTexture
setAutoRemoveOnFinish	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setAutoRemoveOnFinish(bool var)$/;"	f	class:CCParticleSystem
setAverageTime	support/CCProfiling.h	/^    inline void setAverageTime(double value) { m_dAverageTime = value; }$/;"	f	class:CCProfilingTimer
setBatchNode	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setBatchNode(CCParticleBatchNode* batchNode)$/;"	f	class:CCParticleSystem
setBatchNode	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setBatchNode(CCParticleBatchNode * batchNode)$/;"	f	class:CCParticleSystemQuad
setBatchNode	sprite_nodes/CCSprite.cpp	/^void CCSprite::setBatchNode(CCSpriteBatchNode *pobSpriteBatchNode)$/;"	f	class:CCSprite
setBlendAdditive	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setBlendAdditive(bool additive)$/;"	f	class:CCParticleSystem
setBlendFunc	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCAtlasNode
setBlendFunc	draw_nodes/CCDrawNode.cpp	/^void CCDrawNode::setBlendFunc(const ccBlendFunc &blendFunc)$/;"	f	class:CCDrawNode
setBlendFunc	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::setBlendFunc(ccBlendFunc var)$/;"	f	class:CCLayerColor
setBlendFunc	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCMotionStreak
setBlendFunc	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCParticleBatchNode
setBlendFunc	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCParticleSystem
setBlendFunc	sprite_nodes/CCSprite.h	/^    inline void setBlendFunc(ccBlendFunc blendFunc) { m_sBlendFunc = blendFunc; }$/;"	f	class:CCSprite
setBlendFunc	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::setBlendFunc(ccBlendFunc blendFunc)$/;"	f	class:CCSpriteBatchNode
setBoolForKey	support/CCUserDefault.cpp	/^void CCUserDefault::setBoolForKey(const char* pKey, bool value)$/;"	f	class:CCUserDefault
setBoudarySet	actions/CCAction.h	/^    inline void setBoudarySet(bool bValue) { m_bBoundarySet = bValue; }$/;"	f	class:CCFollow
setCString	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setCString(const char *label)$/;"	f	class:CCLabelBMFont
setCenterXYZ	CCCamera.cpp	/^void CCCamera::setCenterXYZ(float fCenterX, float fCenterY, float fCenterZ)$/;"	f	class:CCCamera
setClearColor	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setClearColor(const ccColor4F &clearColor)$/;"	f	class:CCRenderTexture
setClearDepth	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setClearDepth(float fClearDepth)$/;"	f	class:CCRenderTexture
setClearFlags	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setClearFlags(unsigned int uClearFlags)$/;"	f	class:CCRenderTexture
setClearStencil	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setClearStencil(float fClearStencil)$/;"	f	class:CCRenderTexture
setColor	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setColor(const ccColor3B& color3)$/;"	f	class:CCAtlasNode
setColor	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setColor(const ccColor3B& var)$/;"	f	class:CCLabelBMFont
setColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::setColor(const ccColor3B& var)$/;"	f	class:CCLayerColor
setColor	menu_nodes/CCMenu.cpp	/^void CCMenu::setColor(const ccColor3B& var)$/;"	f	class:CCMenu
setColor	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setColor(const ccColor3B& color)$/;"	f	class:CCMenuItemLabel
setColor	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setColor(const ccColor3B& color)$/;"	f	class:CCMenuItemSprite
setColor	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::setColor(const ccColor3B& color)$/;"	f	class:CCMenuItemToggle
setColor	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setColor(const ccColor3B& color)$/;"	f	class:CCMotionStreak
setColor	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setColor(const ccColor3B& color)$/;"	f	class:CCProgressTimer
setColor	sprite_nodes/CCSprite.cpp	/^void CCSprite::setColor(const ccColor3B& color3)$/;"	f	class:CCSprite
setColorSpaceHolder	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::setColorSpaceHolder(const ccColor3B& color)$/;"	f	class:CCTextFieldTTF
setCompressedInterpolation	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setCompressedInterpolation(bool compress)$/;"	f	class:CCLayerGradient
setContentScaleFactor	CCDirector.cpp	/^void CCDirector::setContentScaleFactor(float scaleFactor)$/;"	f	class:CCDirector
setContentSize	base_nodes/CCNode.cpp	/^void CCNode::setContentSize(const CCSize & size)$/;"	f	class:CCNode
setContentSize	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::setContentSize(const CCSize & size)$/;"	f	class:CCLayerColor
setControlPoints	actions/CCActionCatmullRom.h	/^    inline void setControlPoints(CCArray *controlPoints)$/;"	f	class:CCPointArray
setCurrentString	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    inline void setCurrentString(const char *currentString){ m_sCurrentString = currentString; }$/;"	f	class:CCTMXMapInfo
setDefaultAlphaPixelFormat	textures/CCTexture2D.cpp	/^void CCTexture2D::setDefaultAlphaPixelFormat(CCTexture2DPixelFormat format)$/;"	f	class:CCTexture2D
setDelegate	CCDirector.cpp	/^void CCDirector::setDelegate(CCDirectorDelegate* pDelegate)$/;"	f	class:CCDirector
setDelegate	keypad_dispatcher/CCKeypadDelegate.cpp	/^void CCKeypadHandler::setDelegate(CCKeypadDelegate *pDelegate)$/;"	f	class:CCKeypadHandler
setDelegate	touch_dispatcher/CCTouchHandler.cpp	/^void CCTouchHandler::setDelegate(CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchHandler
setDelegator	platform/CCSAXParser.cpp	/^void CCSAXParser::setDelegator(CCSAXDelegator* pDelegator)$/;"	f	class:CCSAXParser
setDepthTest	CCDirector.cpp	/^void CCDirector::setDepthTest(bool bOn)$/;"	f	class:CCDirector
setDesignResolutionSize	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy)$/;"	f	class:CCEGLViewProtocol
setDimensions	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setDimensions(const CCSize &dim)$/;"	f	class:CCLabelTTF
setDirty	CCCamera.h	/^    inline void setDirty(bool bValue) { m_bDirty = bValue; }$/;"	f	class:CCCamera
setDirty	sprite_nodes/CCSprite.h	/^    inline virtual void setDirty(bool bDirty) { m_bDirty = bDirty; }$/;"	f	class:CCSprite
setDirtyRecursively	sprite_nodes/CCSprite.cpp	/^void CCSprite::setDirtyRecursively(bool bValue)$/;"	f	class:CCSprite
setDisabledColor	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setDisabledColor(const ccColor3B& var)$/;"	f	class:CCMenuItemLabel
setDisabledImage	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setDisabledImage(CCNode* pImage)$/;"	f	class:CCMenuItemSprite
setDisabledSpriteFrame	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemImage::setDisabledSpriteFrame(CCSpriteFrame * frame)$/;"	f	class:CCMenuItemImage
setDispatchEvents	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::setDispatchEvents(bool bDispatchEvents)$/;"	f	class:CCTouchDispatcher
setDisplayFrame	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setDisplayFrame(CCSpriteFrame *spriteFrame)$/;"	f	class:CCParticleSystemQuad
setDisplayFrame	sprite_nodes/CCSprite.cpp	/^void CCSprite::setDisplayFrame(CCSpriteFrame *pNewFrame)$/;"	f	class:CCSprite
setDisplayFrameWithAnimationName	sprite_nodes/CCSprite.cpp	/^void CCSprite::setDisplayFrameWithAnimationName(const char *animationName, int frameIndex)$/;"	f	class:CCSprite
setDisplayStats	CCDirector.h	/^    inline void setDisplayStats(bool bDisplayStats) { m_bDisplayStats = bDisplayStats; }$/;"	f	class:CCDirector
setDoubleForKey	support/CCUserDefault.cpp	/^void CCUserDefault::setDoubleForKey(const char* pKey, double value)$/;"	f	class:CCUserDefault
setDuration	actions/CCAction.h	/^    inline void setDuration(float duration) { m_fDuration = duration; }$/;"	f	class:CCFiniteTimeAction
setDuration	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setDuration(float var)$/;"	f	class:CCParticleSystem
setEmissionRate	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEmissionRate(float var)$/;"	f	class:CCParticleSystem
setEmitterMode	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEmitterMode(int var)$/;"	f	class:CCParticleSystem
setEnabled	menu_nodes/CCMenu.h	/^    virtual void setEnabled(bool value) { m_bEnabled = value; };$/;"	f	class:CCMenu
setEnabled	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::setEnabled(bool enabled)$/;"	f	class:CCMenuItem
setEnabled	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setEnabled(bool enabled)$/;"	f	class:CCMenuItemLabel
setEnabled	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setEnabled(bool bEnabled)$/;"	f	class:CCMenuItemSprite
setEnabled	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::setEnabled(bool enabled)$/;"	f	class:CCMenuItemToggle
setEnalbedSelectors	touch_dispatcher/CCTouchHandler.cpp	/^void CCTouchHandler::setEnalbedSelectors(int nValue)$/;"	f	class:CCTouchHandler
setEndColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setEndColor(const ccColor3B& color)$/;"	f	class:CCLayerGradient
setEndColor	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndColor(const ccColor4F& var)$/;"	f	class:CCParticleSystem
setEndColorVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndColorVar(const ccColor4F& var)$/;"	f	class:CCParticleSystem
setEndOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setEndOpacity(GLubyte o)$/;"	f	class:CCLayerGradient
setEndRadius	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndRadius(float endRadius)$/;"	f	class:CCParticleSystem
setEndRadiusVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndRadiusVar(float endRadiusVar)$/;"	f	class:CCParticleSystem
setEndSize	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndSize(float var)$/;"	f	class:CCParticleSystem
setEndSizeVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndSizeVar(float var)$/;"	f	class:CCParticleSystem
setEndSpin	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndSpin(float var)$/;"	f	class:CCParticleSystem
setEndSpinVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setEndSpinVar(float var)$/;"	f	class:CCParticleSystem
setEyeXYZ	CCCamera.cpp	/^void CCCamera::setEyeXYZ(float fEyeX, float fEyeY, float fEyeZ)$/;"	f	class:CCCamera
setFastMode	misc_nodes/CCMotionStreak.h	/^    inline void setFastMode(bool bFastMode) { m_bFastMode = bFastMode; }$/;"	f	class:CCMotionStreak
setFilter	support/zip_support/ZipUtils.cpp	/^bool ZipFile::setFilter(const std::string &filter)$/;"	f	class:ZipFile
setFlipX	sprite_nodes/CCSprite.cpp	/^void CCSprite::setFlipX(bool bFlipX)$/;"	f	class:CCSprite
setFlipY	sprite_nodes/CCSprite.cpp	/^void CCSprite::setFlipY(bool bFlipY)$/;"	f	class:CCSprite
setFloatForKey	support/CCUserDefault.cpp	/^void CCUserDefault::setFloatForKey(const char* pKey, float value)$/;"	f	class:CCUserDefault
setFntFile	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setFntFile(const char* fntFile)$/;"	f	class:CCLabelBMFont
setFontName	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setFontName(const char *fontName)$/;"	f	class:CCLabelTTF
setFontName	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::setFontName(const char *name)$/;"	f	class:CCMenuItemFont
setFontNameObj	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::setFontNameObj(const char* name)$/;"	f	class:CCMenuItemFont
setFontSize	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setFontSize(float fontSize)$/;"	f	class:CCLabelTTF
setFontSize	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::setFontSize(unsigned int s)$/;"	f	class:CCMenuItemFont
setFontSizeObj	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemFont::setFontSizeObj(unsigned int s)$/;"	f	class:CCMenuItemFont
setFrameSize	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setFrameSize(float width, float height)$/;"	f	class:CCEGLViewProtocol
setGLDefaultValues	CCDirector.cpp	/^void CCDirector::setGLDefaultValues(void)$/;"	f	class:CCDirector
setGLServerState	base_nodes/CCNode.cpp	/^void CCNode::setGLServerState(ccGLServerState glServerState)$/;"	f	class:CCNode
setGravity	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setGravity(const CCPoint& g)$/;"	f	class:CCParticleSystem
setGrid	base_nodes/CCNode.cpp	/^void CCNode::setGrid(CCGridBase* pGrid)$/;"	f	class:CCNode
setGridSize	effects/CCGrid.h	/^    inline void setGridSize(const ccGridSize& gridSize) { m_sGridSize = gridSize; }$/;"	f	class:CCGridBase
setGroupName	tilemap_parallax_nodes/CCTMXObjectGroup.h	/^    inline void setGroupName(const char *groupName){ m_sGroupName = groupName; }$/;"	f	class:CCTMXObjectGroup
setHandlerPriority	menu_nodes/CCMenu.cpp	/^void CCMenu::setHandlerPriority(int newPriority)$/;"	f	class:CCMenu
setHorizontalAlignment	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setHorizontalAlignment(CCTextAlignment alignment)$/;"	f	class:CCLabelTTF
setInnerAction	actions/CCAction.cpp	/^void CCSpeed::setInnerAction(CCActionInterval *pAction)$/;"	f	class:CCSpeed
setInnerAction	actions/CCActionInterval.h	/^    inline void setInnerAction(CCActionInterval *pAction)$/;"	f	class:CCRepeatForever
setInnerAction	actions/CCActionInterval.h	/^    inline void setInnerAction(CCFiniteTimeAction *pAction)$/;"	f	class:CCRepeat
setIntegerForKey	support/CCUserDefault.cpp	/^void CCUserDefault::setIntegerForKey(const char* pKey, int value)$/;"	f	class:CCUserDefault
setInterval	CCScheduler.cpp	/^void CCTimer::setInterval(float fInterval)$/;"	f	class:CCTimer
setInverted	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::setInverted(bool bInverted)$/;"	f	class:CCClippingNode
setKeypadDispatcher	CCDirector.cpp	/^void CCDirector::setKeypadDispatcher(CCKeypadDispatcher* pKeypadDispatcher)$/;"	f	class:CCDirector
setKeypadEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setKeypadEnabled(bool enabled)$/;"	f	class:CCLayer
setLabel	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setLabel(CCNode* var)$/;"	f	class:CCMenuItemLabel
setLayerName	tilemap_parallax_nodes/CCTMXLayer.h	/^    inline void setLayerName(const char *layerName){ m_sLayerName = layerName; }$/;"	f	class:CCTMXLayer
setLayers	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setLayers(CCArray* var)$/;"	f	class:CCTMXMapInfo
setLensEffect	actions/CCActionGrid3D.h	/^    inline void setLensEffect(float fLensEffect) { m_fLensEffect = fLensEffect; }$/;"	f	class:CCLens3D
setLife	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setLife(float var)$/;"	f	class:CCParticleSystem
setLifeVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setLifeVar(float var)$/;"	f	class:CCParticleSystem
setLineBreakWithoutSpace	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setLineBreakWithoutSpace( bool breakWithoutSpace )$/;"	f	class:CCLabelBMFont
setMaxS	textures/CCTexture2D.cpp	/^void CCTexture2D::setMaxS(GLfloat maxS)$/;"	f	class:CCTexture2D
setMaxT	textures/CCTexture2D.cpp	/^void CCTexture2D::setMaxT(GLfloat maxT)$/;"	f	class:CCTexture2D
setMidpoint	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setMidpoint(CCPoint midPoint)$/;"	f	class:CCProgressTimer
setNewScene	layers_scenes_transitions_nodes/CCTransition.cpp	/^void CCTransitionScene::setNewScene(float dt)$/;"	f	class:CCTransitionScene
setNextDeltaTimeZero	CCDirector.cpp	/^void CCDirector::setNextDeltaTimeZero(bool bNextDeltaTimeZero)$/;"	f	class:CCDirector
setNextScene	CCDirector.cpp	/^void CCDirector::setNextScene(void)$/;"	f	class:CCDirector
setNormalImage	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setNormalImage(CCNode* pImage)$/;"	f	class:CCMenuItemSprite
setNormalSpriteFrame	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemImage::setNormalSpriteFrame(CCSpriteFrame * frame)$/;"	f	class:CCMenuItemImage
setNotificationNode	CCDirector.cpp	/^void CCDirector::setNotificationNode(CCNode *node)$/;"	f	class:CCDirector
setObject	actions/CCActionInstant.h	/^    inline void setObject(CCObject* pObj)$/;"	f	class:CCCallFuncO
setObject	cocoa/CCDictionary.cpp	/^void CCDictionary::setObject(CCObject* pObject, const std::string& key)$/;"	f	class:CCDictionary
setObject	cocoa/CCDictionary.cpp	/^void CCDictionary::setObject(CCObject* pObject, int key)$/;"	f	class:CCDictionary
setObjectGroups	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^void CCTMXTiledMap::setObjectGroups(CCArray* var)$/;"	f	class:CCTMXTiledMap
setObjectGroups	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setObjectGroups(CCArray* var)$/;"	f	class:CCTMXMapInfo
setObjectUnSafe	cocoa/CCDictionary.cpp	/^void CCDictionary::setObjectUnSafe(CCObject* pObject, const int key)$/;"	f	class:CCDictionary
setObjectUnSafe	cocoa/CCDictionary.cpp	/^void CCDictionary::setObjectUnSafe(CCObject* pObject, const std::string& key)$/;"	f	class:CCDictionary
setObjects	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^void CCTMXObjectGroup::setObjects(CCArray* objects)$/;"	f	class:CCTMXObjectGroup
setOffset	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setOffset(const CCPoint& offsets)$/;"	f	class:CCSpriteFrame
setOffsetInPixels	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setOffsetInPixels(const CCPoint& offsetInPixels)$/;"	f	class:CCSpriteFrame
setOpacity	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setOpacity(GLubyte opacity)$/;"	f	class:CCAtlasNode
setOpacity	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setOpacity(GLubyte var)$/;"	f	class:CCLabelBMFont
setOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::setOpacity(GLubyte var)$/;"	f	class:CCLayerColor
setOpacity	menu_nodes/CCMenu.cpp	/^void CCMenu::setOpacity(GLubyte var)$/;"	f	class:CCMenu
setOpacity	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setOpacity(GLubyte opacity)$/;"	f	class:CCMenuItemLabel
setOpacity	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setOpacity(GLubyte opacity)$/;"	f	class:CCMenuItemSprite
setOpacity	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::setOpacity(GLubyte opacity)$/;"	f	class:CCMenuItemToggle
setOpacity	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setOpacity(GLubyte opacity)$/;"	f	class:CCMotionStreak
setOpacity	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setOpacity(GLubyte opacity)$/;"	f	class:CCProgressTimer
setOpacity	sprite_nodes/CCSprite.cpp	/^void CCSprite::setOpacity(GLubyte opacity)$/;"	f	class:CCSprite
setOpacityModifyRGB	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setOpacityModifyRGB(bool bValue)$/;"	f	class:CCAtlasNode
setOpacityModifyRGB	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setOpacityModifyRGB(bool var)$/;"	f	class:CCLabelBMFont
setOpacityModifyRGB	layers_scenes_transitions_nodes/CCLayer.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCLayerColor
setOpacityModifyRGB	menu_nodes/CCMenu.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCMenu
setOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCMenuItemLabel
setOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCMenuItemSprite
setOpacityModifyRGB	menu_nodes/CCMenuItem.h	/^    virtual void setOpacityModifyRGB(bool bValue) {CC_UNUSED_PARAM(bValue);}$/;"	f	class:CCMenuItemToggle
setOpacityModifyRGB	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setOpacityModifyRGB(bool bValue)$/;"	f	class:CCMotionStreak
setOpacityModifyRGB	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setOpacityModifyRGB(bool bValue)$/;"	f	class:CCProgressTimer
setOpacityModifyRGB	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setOpacityModifyRGB(bool bOpacityModifyRGB)$/;"	f	class:CCParticleSystem
setOpacityModifyRGB	sprite_nodes/CCSprite.cpp	/^void CCSprite::setOpacityModifyRGB(bool bValue)$/;"	f	class:CCSprite
setOpenGLView	CCDirector.cpp	/^void CCDirector::setOpenGLView(CCEGLView *pobOpenGLView)$/;"	f	class:CCDirector
setOrderOfArrival	base_nodes/CCNode.cpp	/^void CCNode::setOrderOfArrival(unsigned int uOrderOfArrival)$/;"	f	class:CCNode
setOriginalSize	sprite_nodes/CCSpriteFrame.h	/^    inline void setOriginalSize(const CCSize& sizeInPixels) { m_obOriginalSize = sizeInPixels; }$/;"	f	class:CCSpriteFrame
setOriginalSizeInPixels	sprite_nodes/CCSpriteFrame.h	/^    inline void setOriginalSizeInPixels(const CCSize& sizeInPixels) { m_obOriginalSizeInPixels = sizeInPixels; }$/;"	f	class:CCSpriteFrame
setOriginalTarget	actions/CCAction.h	/^    inline void setOriginalTarget(CCNode *pOriginalTarget) { m_pOriginalTarget = pOriginalTarget; }$/;"	f	class:CCAction
setParent	base_nodes/CCNode.cpp	/^void CCNode::setParent(CCNode * var)$/;"	f	class:CCNode
setPercentage	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setPercentage(float fPercentage)$/;"	f	class:CCProgressTimer
setPeriod	actions/CCActionEase.h	/^    inline void setPeriod(float fPeriod) { m_fPeriod = fPeriod; }$/;"	f	class:CCEaseElastic
setPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::setPlaceHolder(const char * text)$/;"	f	class:CCTextFieldTTF
setPoint	cocoa/CCGeometry.cpp	/^void CCPoint::setPoint(float x, float y)$/;"	f	class:CCPoint
setPoints	actions/CCActionCatmullRom.h	/^    inline void  setPoints(CCPointArray* points) $/;"	f	class:CCCardinalSplineTo
setPopupNotify	platform/CCFileUtilsCommon_cpp.h	/^void CCFileUtils::setPopupNotify(bool bNotify)$/;"	f	class:CCFileUtils
setPosVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setPosVar(const CCPoint& var)$/;"	f	class:CCParticleSystem
setPosition	actions/CCActionGrid3D.cpp	/^void CCLens3D::setPosition(const CCPoint& pos)$/;"	f	class:CCLens3D
setPosition	actions/CCActionGrid3D.cpp	/^void CCRipple3D::setPosition(const CCPoint& position)$/;"	f	class:CCRipple3D
setPosition	actions/CCActionGrid3D.cpp	/^void CCTwirl::setPosition(const CCPoint& position)$/;"	f	class:CCTwirl
setPosition	base_nodes/CCNode.cpp	/^void CCNode::setPosition(const CCPoint& newPosition)$/;"	f	class:CCNode
setPosition	base_nodes/CCNode.cpp	/^void CCNode::setPosition(float x, float y)$/;"	f	class:CCNode
setPosition	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setPosition(const CCPoint& position)$/;"	f	class:CCMotionStreak
setPosition	sprite_nodes/CCSprite.cpp	/^void CCSprite::setPosition(const CCPoint& pos)$/;"	f	class:CCSprite
setPositionType	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setPositionType(tCCPositionType var)$/;"	f	class:CCParticleSystem
setPositionX	base_nodes/CCNode.cpp	/^void CCNode::setPositionX(float x)$/;"	f	class:CCNode
setPositionY	base_nodes/CCNode.cpp	/^void CCNode::setPositionY(float y)$/;"	f	class:CCNode
setPriority	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::setPriority(int nPriority, CCTouchDelegate *pDelegate)$/;"	f	class:CCTouchDispatcher
setPriority	touch_dispatcher/CCTouchHandler.cpp	/^void CCTouchHandler::setPriority(int nPriority)$/;"	f	class:CCTouchHandler
setProgram	misc_nodes/CCClippingNode.cpp	/^static void setProgram(CCNode *n, CCGLProgram *p)$/;"	f	file:
setProjection	CCDirector.cpp	/^void CCDirector::setProjection(ccDirectorProjection kProjection)$/;"	f	class:CCDirector
setProperties	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setProperties(CCDictionary* var)$/;"	f	class:CCTMXLayer
setProperties	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^void CCTMXObjectGroup::setProperties(CCDictionary * properties)$/;"	f	class:CCTMXObjectGroup
setProperties	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^void CCTMXTiledMap::setProperties(CCDictionary* var)$/;"	f	class:CCTMXTiledMap
setProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXLayerInfo::setProperties(CCDictionary* var)$/;"	f	class:CCTMXLayerInfo
setProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setProperties(CCDictionary* var)$/;"	f	class:CCTMXMapInfo
setQuads	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setQuads(ccV3F_C4B_T2F_Quad *var)$/;"	f	class:CCTextureAtlas
setQuadsToDraw	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setQuadsToDraw(unsigned int uQuadsToDraw)$/;"	f	class:CCAtlasNode
setRadialAccel	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRadialAccel(float t)$/;"	f	class:CCParticleSystem
setRadialAccelVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRadialAccelVar(float t)$/;"	f	class:CCParticleSystem
setRate	actions/CCActionEase.h	/^    inline void setRate(float rate) { m_fRate = rate; }$/;"	f	class:CCEaseRateAction
setRate	actions/CCActionGrid.h	/^    inline void setRate(float fRate) { m_fRate = fRate; }$/;"	f	class:CCAccelAmplitude
setRate	actions/CCActionGrid.h	/^    inline void setRate(float fRate) { m_fRate = fRate; }$/;"	f	class:CCAccelDeccelAmplitude
setRate	actions/CCActionGrid.h	/^    inline void setRate(float fRate) { m_fRate = fRate; }$/;"	f	class:CCDeccelAmplitude
setRect	cocoa/CCGeometry.cpp	/^void CCRect::setRect(float x, float y, float width, float height)$/;"	f	class:CCRect
setRect	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setRect(const CCRect& rect)$/;"	f	class:CCSpriteFrame
setRectInPixels	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setRectInPixels(const CCRect& rectInPixels)$/;"	f	class:CCSpriteFrame
setReorderChildDirtyRecursively	sprite_nodes/CCSprite.cpp	/^void CCSprite::setReorderChildDirtyRecursively(void)$/;"	f	class:CCSprite
setResourceDirectory	platform/CCFileUtilsCommon_cpp.h	/^void CCFileUtils::setResourceDirectory(const char* pszResourceDirectory)$/;"	f	class:CCFileUtils
setRetainName	textures/CCTexturePVR.h	/^    inline void setRetainName(bool retainName) { m_bRetainName = retainName; }$/;"	f	class:CCTexturePVR
setReuseGrid	effects/CCGrid.h	/^    inline void setReuseGrid(int nReuseGrid) { m_nReuseGrid = nReuseGrid; }$/;"	f	class:CCGridBase
setReverseDirection	misc_nodes/CCProgressTimer.h	/^    inline void setReverseDirection(bool value) { m_bReverseDirection = value; };$/;"	f	class:CCProgressTimer
setReverseProgress	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setReverseProgress(bool reverse)$/;"	f	class:CCProgressTimer
setRotatePerSecond	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRotatePerSecond(float degrees)$/;"	f	class:CCParticleSystem
setRotatePerSecondVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRotatePerSecondVar(float degrees)$/;"	f	class:CCParticleSystem
setRotated	sprite_nodes/CCSpriteFrame.h	/^    inline void setRotated(bool bRotated) { m_bRotated = bRotated; }$/;"	f	class:CCSpriteFrame
setRotation	base_nodes/CCNode.cpp	/^void CCNode::setRotation(float newRotation)$/;"	f	class:CCNode
setRotation	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setRotation(float newRotation)$/;"	f	class:CCParticleSystem
setRotation	sprite_nodes/CCSprite.cpp	/^void CCSprite::setRotation(float fRotation)$/;"	f	class:CCSprite
setRotationX	base_nodes/CCNode.cpp	/^void CCNode::setRotationX(float fRotationX)$/;"	f	class:CCNode
setRotationX	sprite_nodes/CCSprite.cpp	/^void CCSprite::setRotationX(float fRotationX)$/;"	f	class:CCSprite
setRotationY	base_nodes/CCNode.cpp	/^void CCNode::setRotationY(float fRotationY)$/;"	f	class:CCNode
setRotationY	sprite_nodes/CCSprite.cpp	/^void CCSprite::setRotationY(float fRotationY)$/;"	f	class:CCSprite
setScale	base_nodes/CCNode.cpp	/^void CCNode::setScale(float scale)$/;"	f	class:CCNode
setScale	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setScale(float scale)$/;"	f	class:CCLabelBMFont
setScale	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setScale(float s)$/;"	f	class:CCParticleSystem
setScale	sprite_nodes/CCSprite.cpp	/^void CCSprite::setScale(float fScale)$/;"	f	class:CCSprite
setScaleX	base_nodes/CCNode.cpp	/^void CCNode::setScaleX(float newScaleX)$/;"	f	class:CCNode
setScaleX	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setScaleX(float scaleX)$/;"	f	class:CCLabelBMFont
setScaleX	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setScaleX(float newScaleX)$/;"	f	class:CCParticleSystem
setScaleX	sprite_nodes/CCSprite.cpp	/^void CCSprite::setScaleX(float fScaleX)$/;"	f	class:CCSprite
setScaleY	base_nodes/CCNode.cpp	/^void CCNode::setScaleY(float newScaleY)$/;"	f	class:CCNode
setScaleY	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setScaleY(float scaleY)$/;"	f	class:CCLabelBMFont
setScaleY	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setScaleY(float newScaleY)$/;"	f	class:CCParticleSystem
setScaleY	sprite_nodes/CCSprite.cpp	/^void CCSprite::setScaleY(float fScaleY)$/;"	f	class:CCSprite
setScheduler	CCDirector.cpp	/^void CCDirector::setScheduler(CCScheduler* pScheduler)$/;"	f	class:CCDirector
setScheduler	base_nodes/CCNode.cpp	/^void CCNode::setScheduler(CCScheduler* scheduler)$/;"	f	class:CCNode
setScissorInPoints	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setScissorInPoints(float x , float y , float w , float h)$/;"	f	class:CCEGLViewProtocol
setScriptEngine	script_support/CCScriptSupport.cpp	/^void CCScriptEngineManager::setScriptEngine(CCScriptEngineProtocol *pScriptEngine)$/;"	f	class:CCScriptEngineManager
setSelectedImage	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::setSelectedImage(CCNode* pImage)$/;"	f	class:CCMenuItemSprite
setSelectedIndex	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::setSelectedIndex(unsigned int index)$/;"	f	class:CCMenuItemToggle
setSelectedSpriteFrame	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemImage::setSelectedSpriteFrame(CCSpriteFrame * frame)$/;"	f	class:CCMenuItemImage
setShaderProgram	base_nodes/CCNode.cpp	/^void CCNode::setShaderProgram(CCGLProgram *pShaderProgram)$/;"	f	class:CCNode
setShaderProgram	textures/CCTexture2D.cpp	/^void CCTexture2D::setShaderProgram(CCGLProgram* pShaderProgram)$/;"	f	class:CCTexture2D
setSize	cocoa/CCGeometry.cpp	/^void CCSize::setSize(float width, float height)$/;"	f	class:CCSize
setSkewX	base_nodes/CCNode.cpp	/^void CCNode::setSkewX(float newSkewX)$/;"	f	class:CCNode
setSkewX	sprite_nodes/CCSprite.cpp	/^void CCSprite::setSkewX(float sx)$/;"	f	class:CCSprite
setSkewY	base_nodes/CCNode.cpp	/^void CCNode::setSkewY(float newSkewY)$/;"	f	class:CCNode
setSkewY	sprite_nodes/CCSprite.cpp	/^void CCSprite::setSkewY(float sy)$/;"	f	class:CCSprite
setSourcePosition	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setSourcePosition(const CCPoint& var)$/;"	f	class:CCParticleSystem
setSpeed	actions/CCAction.h	/^    inline void setSpeed(float fSpeed) { m_fSpeed = fSpeed; }$/;"	f	class:CCSpeed
setSpeed	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setSpeed(float speed)$/;"	f	class:CCParticleSystem
setSpeedVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setSpeedVar(float speedVar)$/;"	f	class:CCParticleSystem
setSprite	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setSprite(CCSprite *pSprite)$/;"	f	class:CCProgressTimer
setSprite	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::setSprite(CCSprite* var)$/;"	f	class:CCRenderTexture
setStartColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setStartColor(const ccColor3B& color)$/;"	f	class:CCLayerGradient
setStartColor	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartColor(const ccColor4F& var)$/;"	f	class:CCParticleSystem
setStartColorVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartColorVar(const ccColor4F& var)$/;"	f	class:CCParticleSystem
setStartOpacity	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setStartOpacity(GLubyte o)$/;"	f	class:CCLayerGradient
setStartRadius	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartRadius(float startRadius)$/;"	f	class:CCParticleSystem
setStartRadiusVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartRadiusVar(float startRadiusVar)$/;"	f	class:CCParticleSystem
setStartSize	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartSize(float var)$/;"	f	class:CCParticleSystem
setStartSizeVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartSizeVar(float var)$/;"	f	class:CCParticleSystem
setStartSpin	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartSpin(float var)$/;"	f	class:CCParticleSystem
setStartSpinVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setStartSpinVar(float var)$/;"	f	class:CCParticleSystem
setStartingPositionInitialized	misc_nodes/CCMotionStreak.h	/^    inline void setStartingPositionInitialized(bool bStartingPositionInitialized) $/;"	f	class:CCMotionStreak
setStencil	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::setStencil(CCNode *pStencil)$/;"	f	class:CCClippingNode
setStep	effects/CCGrid.h	/^    inline void setStep(const CCPoint& step) { m_obStep = step; }$/;"	f	class:CCGridBase
setString	label_nodes/CCLabelAtlas.cpp	/^void CCLabelAtlas::setString(const char *label)$/;"	f	class:CCLabelAtlas
setString	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setString(const char *newString)$/;"	f	class:CCLabelBMFont
setString	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setString(const char *newString, bool fromUpdate)$/;"	f	class:CCLabelBMFont
setString	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setString(const char *string)$/;"	f	class:CCLabelTTF
setString	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::setString(const char * label)$/;"	f	class:CCMenuItemLabel
setString	text_input_node/CCTextFieldTTF.cpp	/^void CCTextFieldTTF::setString(const char *text)$/;"	f	class:CCTextFieldTTF
setStringForKey	support/CCUserDefault.cpp	/^void CCUserDefault::setStringForKey(const char* pKey, const std::string & value)$/;"	f	class:CCUserDefault
setSubItems	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::setSubItems(CCArray* var)$/;"	f	class:CCMenuItemToggle
setSwallowsTouches	touch_dispatcher/CCTouchHandler.cpp	/^void CCTargetedTouchHandler::setSwallowsTouches(bool bSwallowsTouches)$/;"	f	class:CCTargetedTouchHandler
setTGAInfo	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::setTGAInfo(struct sImageTGA* var)$/;"	f	class:CCTileMapAtlas
setTMXFileName	tilemap_parallax_nodes/CCTMXXMLParser.h	/^    inline void setTMXFileName(const char *fileName){ m_sTMXFileName = fileName; }$/;"	f	class:CCTMXMapInfo
setTag	actions/CCAction.h	/^    inline void setTag(int nTag) { m_nTag = nTag; }$/;"	f	class:CCAction
setTag	base_nodes/CCNode.cpp	/^void CCNode::setTag(int var)$/;"	f	class:CCNode
setTangentialAccel	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setTangentialAccel(float t)$/;"	f	class:CCParticleSystem
setTangentialAccelVar	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setTangentialAccelVar(float t)$/;"	f	class:CCParticleSystem
setTarget	actions/CCAction.h	/^    inline void setTarget(CCNode *pTarget) { m_pTarget = pTarget; }$/;"	f	class:CCAction
setTarget	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::setTarget(CCObject *rec, SEL_MenuHandler selector)$/;"	f	class:CCMenuItem
setTargetCallback	actions/CCActionInstant.h	/^    inline void setTargetCallback(CCObject* pSel)$/;"	f	class:CCCallFunc
setTexParameters	textures/CCTexture2D.cpp	/^void CCTexture2D::setTexParameters(ccTexParams *texParams)$/;"	f	class:CCTexture2D
setTexParameters	textures/CCTextureCache.cpp	/^void VolatileTexture::setTexParameters(CCTexture2D *t, ccTexParams *texParams) $/;"	f	class:VolatileTexture
setTexture	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setTexture(CCTexture2D *texture)$/;"	f	class:CCAtlasNode
setTexture	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::setTexture(CCTexture2D *texture)$/;"	f	class:CCMotionStreak
setTexture	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::setTexture(CCTexture2D* texture)$/;"	f	class:CCParticleBatchNode
setTexture	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setTexture(CCTexture2D* var)$/;"	f	class:CCParticleSystem
setTexture	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setTexture(CCTexture2D* texture)$/;"	f	class:CCParticleSystemQuad
setTexture	sprite_nodes/CCSprite.cpp	/^void CCSprite::setTexture(CCTexture2D *texture)$/;"	f	class:CCSprite
setTexture	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::setTexture(CCTexture2D *texture)$/;"	f	class:CCSpriteBatchNode
setTexture	sprite_nodes/CCSpriteFrame.cpp	/^void CCSpriteFrame::setTexture(CCTexture2D * texture)$/;"	f	class:CCSpriteFrame
setTexture	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setTexture(CCTexture2D * var)$/;"	f	class:CCTextureAtlas
setTextureAtlas	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::setTextureAtlas(CCTextureAtlas* var)$/;"	f	class:CCAtlasNode
setTextureAtlas	sprite_nodes/CCSprite.h	/^    inline void setTextureAtlas(CCTextureAtlas *pobTextureAtlas) { m_pobTextureAtlas = pobTextureAtlas; }$/;"	f	class:CCSprite
setTextureAtlas	sprite_nodes/CCSpriteBatchNode.h	/^    inline void setTextureAtlas(CCTextureAtlas* textureAtlas) $/;"	f	class:CCSpriteBatchNode
setTextureCoords	sprite_nodes/CCSprite.cpp	/^void CCSprite::setTextureCoords(CCRect rect)$/;"	f	class:CCSprite
setTextureFlipped	effects/CCGrid.cpp	/^void CCGridBase::setTextureFlipped(bool bFlipped)$/;"	f	class:CCGridBase
setTextureRect	sprite_nodes/CCSprite.cpp	/^void CCSprite::setTextureRect(const CCRect& rect)$/;"	f	class:CCSprite
setTextureRect	sprite_nodes/CCSprite.cpp	/^void CCSprite::setTextureRect(const CCRect& rect, bool rotated, const CCSize& untrimmedSize)$/;"	f	class:CCSprite
setTextureWithRect	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setTextureWithRect(CCTexture2D *texture, const CCRect& rect)$/;"	f	class:CCParticleSystemQuad
setTile	actions/CCActionGrid.cpp	/^void CCTiledGrid3DAction::setTile(const ccGridSize& pos, const ccQuad3& coords)$/;"	f	class:CCTiledGrid3DAction
setTile	effects/CCGrid.cpp	/^void CCTiledGrid3D::setTile(const ccGridSize& pos, const ccQuad3& coords)$/;"	f	class:CCTiledGrid3D
setTile	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::setTile(const ccColor3B& tile, const ccGridSize& position)$/;"	f	class:CCTileMapAtlas
setTileGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setTileGID(unsigned int gid, const CCPoint& pos)$/;"	f	class:CCTMXLayer
setTileGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setTileGID(unsigned int gid, const CCPoint& pos, ccTMXTileFlags flags)$/;"	f	class:CCTMXLayer
setTileProperties	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setTileProperties(CCDictionary* tileProperties)$/;"	f	class:CCTMXMapInfo
setTileSet	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setTileSet(CCTMXTilesetInfo* var)$/;"	f	class:CCTMXLayer
setTilesets	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::setTilesets(CCArray* var)$/;"	f	class:CCTMXMapInfo
setTimeScale	CCScheduler.h	/^    inline void setTimeScale(float fTimeScale) { m_fTimeScale = fTimeScale; }$/;"	f	class:CCScheduler
setTotalParticles	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::setTotalParticles(unsigned int var)$/;"	f	class:CCParticleSystem
setTotalParticles	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setTotalParticles(unsigned int tp)$/;"	f	class:CCParticleSystemQuad
setTouchDelegate	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setTouchDelegate(EGLTouchDelegate * pDelegate)$/;"	f	class:CCEGLViewProtocol
setTouchDispatcher	CCDirector.cpp	/^void CCDirector::setTouchDispatcher(CCTouchDispatcher* pTouchDispatcher)$/;"	f	class:CCDirector
setTouchEnabled	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setTouchEnabled(bool enabled)$/;"	f	class:CCLayer
setTouchInfo	touch_dispatcher/CCTouch.h	/^    void setTouchInfo(int id, float x, float y)$/;"	f	class:CCTouch
setTouchMode	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setTouchMode(ccTouchesMode mode)$/;"	f	class:CCLayer
setTouchPriority	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::setTouchPriority(int priority)$/;"	f	class:CCLayer
setType	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::setType(CCProgressTimerType type)$/;"	f	class:CCProgressTimer
setUniformForModelViewProjectionMatrix	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformForModelViewProjectionMatrix()$/;"	f	class:CCGLProgram
setUniformLocationWith1f	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith1f(GLint location, GLfloat f1)$/;"	f	class:CCGLProgram
setUniformLocationWith1i	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith1i(GLint location, GLint i1)$/;"	f	class:CCGLProgram
setUniformLocationWith2f	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith2f(GLint location, GLfloat f1, GLfloat f2)$/;"	f	class:CCGLProgram
setUniformLocationWith2fv	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith2fv(GLint location, GLfloat* floats, unsigned int numberOfArrays)$/;"	f	class:CCGLProgram
setUniformLocationWith3f	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith3f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3)$/;"	f	class:CCGLProgram
setUniformLocationWith3fv	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith3fv(GLint location, GLfloat* floats, unsigned int numberOfArrays)$/;"	f	class:CCGLProgram
setUniformLocationWith4f	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith4f(GLint location, GLfloat f1, GLfloat f2, GLfloat f3, GLfloat f4)$/;"	f	class:CCGLProgram
setUniformLocationWith4fv	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWith4fv(GLint location, GLfloat* floats, unsigned int numberOfArrays)$/;"	f	class:CCGLProgram
setUniformLocationWithMatrix4fv	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformLocationWithMatrix4fv(GLint location, GLfloat* matrixArray, unsigned int numberOfMatrices)$/;"	f	class:CCGLProgram
setUniformsForBuiltins	shaders/CCGLProgram.cpp	/^void CCGLProgram::setUniformsForBuiltins()$/;"	f	class:CCGLProgram
setUpXYZ	CCCamera.cpp	/^void CCCamera::setUpXYZ(float fUpX, float fUpY, float fUpZ)$/;"	f	class:CCCamera
setUserData	base_nodes/CCNode.cpp	/^void CCNode::setUserData(void *var)$/;"	f	class:CCNode
setUserObject	base_nodes/CCNode.cpp	/^void CCNode::setUserObject(CCObject *pUserObject)$/;"	f	class:CCNode
setValueForKey	support/CCUserDefault.cpp	/^static void setValueForKey(const char* pKey, const char* pValue)$/;"	f	file:
setVector	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::setVector(const CCPoint& var)$/;"	f	class:CCLayerGradient
setVertex	actions/CCActionGrid.cpp	/^void CCGrid3DAction::setVertex(const ccGridSize& pos, const ccVertex3F& vertex)$/;"	f	class:CCGrid3DAction
setVertex	effects/CCGrid.cpp	/^void CCGrid3D::setVertex(const ccGridSize& pos, const ccVertex3F& vertex)$/;"	f	class:CCGrid3D
setVertexRect	sprite_nodes/CCSprite.cpp	/^void CCSprite::setVertexRect(const CCRect& rect)$/;"	f	class:CCSprite
setVertexZ	base_nodes/CCNode.cpp	/^void CCNode::setVertexZ(float var)$/;"	f	class:CCNode
setVertexZ	sprite_nodes/CCSprite.cpp	/^void CCSprite::setVertexZ(float fVertexZ)$/;"	f	class:CCSprite
setVerticalAlignment	label_nodes/CCLabelTTF.cpp	/^void CCLabelTTF::setVerticalAlignment(CCVerticalTextAlignment verticalAlignment)$/;"	f	class:CCLabelTTF
setViewName	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setViewName(const char* pszViewName)$/;"	f	class:CCEGLViewProtocol
setViewPortInPoints	platform/CCEGLViewProtocol.cpp	/^void CCEGLViewProtocol::setViewPortInPoints(float x , float y , float w , float h)$/;"	f	class:CCEGLViewProtocol
setVisible	base_nodes/CCNode.cpp	/^void CCNode::setVisible(bool var)$/;"	f	class:CCNode
setVisible	sprite_nodes/CCSprite.cpp	/^void CCSprite::setVisible(bool bVisible)$/;"	f	class:CCSprite
setWidth	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::setWidth(float width)$/;"	f	class:CCLabelBMFont
setZOrder	base_nodes/CCNode.cpp	/^void CCNode::setZOrder(int z)$/;"	f	class:CCNode
setjmp_buffer	platform/CCImageCommon_cpp.h	/^  jmp_buf setjmp_buffer;	\/* for return to caller *\/$/;"	m	struct:my_error_mgr
setupIndices	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setupIndices()$/;"	f	class:CCParticleSystemQuad
setupIndices	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setupIndices()$/;"	f	class:CCTextureAtlas
setupTileSprite	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setupTileSprite(CCSprite* sprite, CCPoint pos, unsigned int gid)$/;"	f	class:CCTMXLayer
setupTiles	tilemap_parallax_nodes/CCTMXLayer.cpp	/^void CCTMXLayer::setupTiles()$/;"	f	class:CCTMXLayer
setupTransition	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgress::setupTransition()$/;"	f	class:CCTransitionProgress
setupTransition	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^void CCTransitionProgressInOut::setupTransition()$/;"	f	class:CCTransitionProgressInOut
setupVBO	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setupVBO()$/;"	f	class:CCParticleSystemQuad
setupVBO	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setupVBO()$/;"	f	class:CCTextureAtlas
setupVBOandVAO	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::setupVBOandVAO()$/;"	f	class:CCParticleSystemQuad
setupVBOandVAO	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::setupVBOandVAO()$/;"	f	class:CCTextureAtlas
sharedAnimationCache	sprite_nodes/CCAnimationCache.cpp	/^CCAnimationCache* CCAnimationCache::sharedAnimationCache(void)$/;"	f	class:CCAnimationCache
sharedConfiguration	CCConfiguration.cpp	/^CCConfiguration* CCConfiguration::sharedConfiguration(void)$/;"	f	class:CCConfiguration
sharedDirector	CCDirector.cpp	/^CCDirector* CCDirector::sharedDirector(void)$/;"	f	class:CCDirector
sharedDispatcher	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDispatcher* CCIMEDispatcher::sharedDispatcher()$/;"	f	class:CCIMEDispatcher
sharedManager	script_support/CCScriptSupport.cpp	/^CCScriptEngineManager* CCScriptEngineManager::sharedManager(void)$/;"	f	class:CCScriptEngineManager
sharedNotificationCenter	support/CCNotificationCenter.cpp	/^CCNotificationCenter *CCNotificationCenter::sharedNotificationCenter(void)$/;"	f	class:CCNotificationCenter
sharedPoolManager	cocoa/CCAutoreleasePool.cpp	/^CCPoolManager* CCPoolManager::sharedPoolManager()$/;"	f	class:CCPoolManager
sharedProfiler	support/CCProfiling.cpp	/^CCProfiler* CCProfiler::sharedProfiler(void)$/;"	f	class:CCProfiler
sharedShaderCache	shaders/CCShaderCache.cpp	/^CCShaderCache* CCShaderCache::sharedShaderCache()$/;"	f	class:CCShaderCache
sharedSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.cpp	/^CCSpriteFrameCache* CCSpriteFrameCache::sharedSpriteFrameCache(void)$/;"	f	class:CCSpriteFrameCache
sharedTextureCache	textures/CCTextureCache.cpp	/^CCTextureCache * CCTextureCache::sharedTextureCache()$/;"	f	class:CCTextureCache
sharedUserDefault	support/CCUserDefault.cpp	/^CCUserDefault* CCUserDefault::sharedUserDefault()$/;"	f	class:CCUserDefault
showStats	CCDirector.cpp	/^void CCDirector::showStats(void)$/;"	f	class:CCDirector
shuffle	actions/CCActionTiledGrid.cpp	/^void CCShuffleTiles::shuffle(int *pArray, unsigned int nLen)$/;"	f	class:CCShuffleTiles
shuffle	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::shuffle(int *pArray, unsigned int nLen)$/;"	f	class:CCTurnOffTiles
sig	support/zip_support/ZipUtils.h	/^        unsigned char            sig[4];                \/\/ signature. Should be 'CCZ!' 4 bytes$/;"	m	struct:cocos2d::CCZHeader
signature	support/data_support/uthash.h	/^   unsigned int signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table
size	cocoa/CCGeometry.h	/^    CCSize  size;$/;"	m	class:CCRect
size	include/ccTypes.h	/^    CCSize size; $/;"	m	struct:__anon8
size	include/ccTypes.h	/^    GLfloat        size;        \/\/ 4 bytes$/;"	m	struct:_ccPointSprite
size	particle_nodes/CCParticleSystem.h	/^    float        size;$/;"	m	struct:sCCParticle
size	platform/CCImageCommon_cpp.h	/^    int size;$/;"	m	struct:__anon30
size_central_dir	support/zip_support/unzip.cpp	/^    ZPOS64_T size_central_dir;     \/* size of the central directory  *\/$/;"	m	struct:cocos2d::__anon38	file:
size_comment	support/zip_support/unzip.h	/^    uLong size_comment;         \/* size of the global comment of the zipfile *\/$/;"	m	struct:cocos2d::unz_global_info64_s
size_comment	support/zip_support/unzip.h	/^    uLong size_comment;         \/* size of the global comment of the zipfile *\/$/;"	m	struct:cocos2d::unz_global_info_s
size_file_comment	support/zip_support/unzip.h	/^    uLong size_file_comment;    \/* file comment length             2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
size_file_comment	support/zip_support/unzip.h	/^    uLong size_file_comment;    \/* file comment length             2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
size_file_extra	support/zip_support/unzip.h	/^    uLong size_file_extra;      \/* extra field length              2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
size_file_extra	support/zip_support/unzip.h	/^    uLong size_file_extra;      \/* extra field length              2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
size_filename	support/zip_support/unzip.h	/^    uLong size_filename;        \/* filename length                 2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
size_filename	support/zip_support/unzip.h	/^    uLong size_filename;        \/* filename length                 2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
size_local_extrafield	support/zip_support/unzip.cpp	/^    uInt  size_local_extrafield;\/* size of the local extra field *\/$/;"	m	struct:cocos2d::__anon37	file:
snapshotTextures	textures/CCTextureCache.cpp	/^CCDictionary* CCTextureCache::snapshotTextures()$/;"	f	class:CCTextureCache
sortAllChildren	base_nodes/CCNode.cpp	/^void CCNode::sortAllChildren()$/;"	f	class:CCNode
sortAllChildren	sprite_nodes/CCSprite.cpp	/^void CCSprite::sortAllChildren()$/;"	f	class:CCSprite
sortAllChildren	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::sortAllChildren()$/;"	f	class:CCSpriteBatchNode
speed	particle_nodes/CCParticleSystem.h	/^        float speed;$/;"	m	struct:CCParticleSystem::__anon24
speedVar	particle_nodes/CCParticleSystem.h	/^        float speedVar;$/;"	m	struct:CCParticleSystem::__anon24
sphericalRadius	actions/CCActionCamera.cpp	/^void CCOrbitCamera::sphericalRadius(float *newRadius, float *zenith, float *azimuth)$/;"	f	class:CCOrbitCamera
split	cocoa/CCNS.cpp	/^static inline void split(std::string src, const char* token, strArray& vect)$/;"	f	file:
splitWithForm	cocoa/CCNS.cpp	/^static bool splitWithForm(const char* pStr, strArray& strs)$/;"	f	file:
spriteFrameByName	sprite_nodes/CCSpriteFrameCache.cpp	/^CCSpriteFrame* CCSpriteFrameCache::spriteFrameByName(const char *pszName)$/;"	f	class:CCSpriteFrameCache
spriteWithFile	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::spriteWithFile(const char *pszFileName)$/;"	f	class:CCSprite
spriteWithFile	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::spriteWithFile(const char *pszFileName, const CCRect& rect)$/;"	f	class:CCSprite
spriteWithSpriteFrame	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::spriteWithSpriteFrame(CCSpriteFrame *pSpriteFrame)$/;"	f	class:CCSprite
spriteWithSpriteFrameName	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::spriteWithSpriteFrameName(const char *pszSpriteFrameName)$/;"	f	class:CCSprite
spriteWithTexture	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::spriteWithTexture(CCTexture2D *pTexture)$/;"	f	class:CCSprite
spriteWithTexture	sprite_nodes/CCSprite.cpp	/^CCSprite* CCSprite::spriteWithTexture(CCTexture2D *pTexture, const CCRect& rect)$/;"	f	class:CCSprite
src	include/ccTypes.h	/^    GLenum src;$/;"	m	struct:_ccBlendFunc
stack	kazmath/include/kazmath/GL/mat4stack.h	/^    kmMat4* stack;$/;"	m	struct:km_mat4_stack
start	kazmath/include/kazmath/ray2.h	/^    kmVec2 start;$/;"	m	struct:kmRay2
startAnimation	CCDirector.cpp	/^void CCDisplayLinkDirector::startAnimation(void)$/;"	f	class:CCDisplayLinkDirector
startElement	platform/CCFileUtilsCommon_cpp.h	/^    void startElement(void *ctx, const char *name, const char **atts)$/;"	f	class:CCDictMaker
startElement	platform/CCSAXParser.cpp	/^void CCSAXParser::startElement(void *ctx, const CC_XML_CHAR *name, const CC_XML_CHAR **atts)$/;"	f	class:CCSAXParser
startElement	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::startElement(void *ctx, const char *name, const char **atts)$/;"	f	class:CCTMXMapInfo
startPos	particle_nodes/CCParticleSystem.h	/^    CCPoint     startPos;$/;"	m	struct:sCCParticle
startPosition	actions/CCActionTiledGrid.cpp	/^    CCPoint    startPosition;$/;"	m	struct:Tile	file:
startRadius	particle_nodes/CCParticleSystem.h	/^        float startRadius;$/;"	m	struct:CCParticleSystem::__anon25
startRadiusVar	particle_nodes/CCParticleSystem.h	/^        float startRadiusVar;$/;"	m	struct:CCParticleSystem::__anon25
startWithTarget	actions/CCAction.cpp	/^void CCAction::startWithTarget(CCNode *aTarget)$/;"	f	class:CCAction
startWithTarget	actions/CCAction.cpp	/^void CCSpeed::startWithTarget(CCNode* pTarget)$/;"	f	class:CCSpeed
startWithTarget	actions/CCActionCamera.cpp	/^void CCActionCamera::startWithTarget(CCNode *pTarget)$/;"	f	class:CCActionCamera
startWithTarget	actions/CCActionCamera.cpp	/^void CCOrbitCamera::startWithTarget(CCNode *pTarget)$/;"	f	class:CCOrbitCamera
startWithTarget	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineBy::startWithTarget(cocos2d::CCNode *pTarget)$/;"	f	class:CCCardinalSplineBy
startWithTarget	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineTo::startWithTarget(cocos2d::CCNode *pTarget)$/;"	f	class:CCCardinalSplineTo
startWithTarget	actions/CCActionEase.cpp	/^void CCActionEase::startWithTarget(CCNode *pTarget)$/;"	f	class:CCActionEase
startWithTarget	actions/CCActionGrid.cpp	/^void CCAccelAmplitude::startWithTarget(CCNode *pTarget)$/;"	f	class:CCAccelAmplitude
startWithTarget	actions/CCActionGrid.cpp	/^void CCAccelDeccelAmplitude::startWithTarget(CCNode *pTarget)$/;"	f	class:CCAccelDeccelAmplitude
startWithTarget	actions/CCActionGrid.cpp	/^void CCDeccelAmplitude::startWithTarget(CCNode *pTarget)$/;"	f	class:CCDeccelAmplitude
startWithTarget	actions/CCActionGrid.cpp	/^void CCGridAction::startWithTarget(CCNode *pTarget)$/;"	f	class:CCGridAction
startWithTarget	actions/CCActionGrid.cpp	/^void CCReuseGrid::startWithTarget(CCNode *pTarget)$/;"	f	class:CCReuseGrid
startWithTarget	actions/CCActionGrid.cpp	/^void CCStopGrid::startWithTarget(CCNode *pTarget)$/;"	f	class:CCStopGrid
startWithTarget	actions/CCActionInterval.cpp	/^void CCActionInterval::startWithTarget(CCNode *pTarget)$/;"	f	class:CCActionInterval
startWithTarget	actions/CCActionInterval.cpp	/^void CCAnimate::startWithTarget(CCNode *pTarget)$/;"	f	class:CCAnimate
startWithTarget	actions/CCActionInterval.cpp	/^void CCBezierBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCBezierBy
startWithTarget	actions/CCActionInterval.cpp	/^void CCBezierTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCBezierTo
startWithTarget	actions/CCActionInterval.cpp	/^void CCBlink::startWithTarget(CCNode *pTarget)$/;"	f	class:CCBlink
startWithTarget	actions/CCActionInterval.cpp	/^void CCFadeTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCFadeTo
startWithTarget	actions/CCActionInterval.cpp	/^void CCJumpBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCJumpBy
startWithTarget	actions/CCActionInterval.cpp	/^void CCJumpTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCJumpTo
startWithTarget	actions/CCActionInterval.cpp	/^void CCMoveBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCMoveBy
startWithTarget	actions/CCActionInterval.cpp	/^void CCMoveTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCMoveTo
startWithTarget	actions/CCActionInterval.cpp	/^void CCRepeat::startWithTarget(CCNode *pTarget)$/;"	f	class:CCRepeat
startWithTarget	actions/CCActionInterval.cpp	/^void CCRepeatForever::startWithTarget(CCNode* pTarget)$/;"	f	class:CCRepeatForever
startWithTarget	actions/CCActionInterval.cpp	/^void CCReverseTime::startWithTarget(CCNode *pTarget)$/;"	f	class:CCReverseTime
startWithTarget	actions/CCActionInterval.cpp	/^void CCRotateBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCRotateBy
startWithTarget	actions/CCActionInterval.cpp	/^void CCRotateTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCRotateTo
startWithTarget	actions/CCActionInterval.cpp	/^void CCScaleBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCScaleBy
startWithTarget	actions/CCActionInterval.cpp	/^void CCScaleTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCScaleTo
startWithTarget	actions/CCActionInterval.cpp	/^void CCSequence::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSequence
startWithTarget	actions/CCActionInterval.cpp	/^void CCSkewBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSkewBy
startWithTarget	actions/CCActionInterval.cpp	/^void CCSkewTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSkewTo
startWithTarget	actions/CCActionInterval.cpp	/^void CCSpawn::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSpawn
startWithTarget	actions/CCActionInterval.cpp	/^void CCTargetedAction::startWithTarget(CCNode *pTarget)$/;"	f	class:CCTargetedAction
startWithTarget	actions/CCActionInterval.cpp	/^void CCTintBy::startWithTarget(CCNode *pTarget)$/;"	f	class:CCTintBy
startWithTarget	actions/CCActionInterval.cpp	/^void CCTintTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCTintTo
startWithTarget	actions/CCActionProgressTimer.cpp	/^void CCProgressFromTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCProgressFromTo
startWithTarget	actions/CCActionProgressTimer.cpp	/^void CCProgressTo::startWithTarget(CCNode *pTarget)$/;"	f	class:CCProgressTo
startWithTarget	actions/CCActionTiledGrid.cpp	/^void CCShuffleTiles::startWithTarget(CCNode *pTarget)$/;"	f	class:CCShuffleTiles
startWithTarget	actions/CCActionTiledGrid.cpp	/^void CCSplitCols::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSplitCols
startWithTarget	actions/CCActionTiledGrid.cpp	/^void CCSplitRows::startWithTarget(CCNode *pTarget)$/;"	f	class:CCSplitRows
startWithTarget	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::startWithTarget(CCNode *pTarget)$/;"	f	class:CCTurnOffTiles
startWithTarget	actions/CCActionTween.cpp	/^void CCActionTween::startWithTarget(CCNode *pTarget)$/;"	f	class:CCActionTween
status	support/image_support/TGAlib.h	/^    int status;$/;"	m	struct:cocos2d::sImageTGA
step	actions/CCAction.cpp	/^void CCAction::step(float dt)$/;"	f	class:CCAction
step	actions/CCAction.cpp	/^void CCFollow::step(float dt)$/;"	f	class:CCFollow
step	actions/CCAction.cpp	/^void CCSpeed::step(float dt)$/;"	f	class:CCSpeed
step	actions/CCActionInstant.cpp	/^void CCActionInstant::step(float dt) {$/;"	f	class:CCActionInstant
step	actions/CCActionInterval.cpp	/^void CCActionInterval::step(float dt)$/;"	f	class:CCActionInterval
step	actions/CCActionInterval.cpp	/^void CCRepeatForever::step(float dt)$/;"	f	class:CCRepeatForever
stop	actions/CCAction.cpp	/^void CCAction::stop()$/;"	f	class:CCAction
stop	actions/CCAction.cpp	/^void CCFollow::stop()$/;"	f	class:CCFollow
stop	actions/CCAction.cpp	/^void CCSpeed::stop()$/;"	f	class:CCSpeed
stop	actions/CCActionEase.cpp	/^void CCActionEase::stop(void)$/;"	f	class:CCActionEase
stop	actions/CCActionInterval.cpp	/^void CCAnimate::stop(void)$/;"	f	class:CCAnimate
stop	actions/CCActionInterval.cpp	/^void CCBlink::stop()$/;"	f	class:CCBlink
stop	actions/CCActionInterval.cpp	/^void CCRepeat::stop(void)$/;"	f	class:CCRepeat
stop	actions/CCActionInterval.cpp	/^void CCReverseTime::stop(void)$/;"	f	class:CCReverseTime
stop	actions/CCActionInterval.cpp	/^void CCSequence::stop(void)$/;"	f	class:CCSequence
stop	actions/CCActionInterval.cpp	/^void CCSpawn::stop(void)$/;"	f	class:CCSpawn
stop	actions/CCActionInterval.cpp	/^void CCTargetedAction::stop(void)$/;"	f	class:CCTargetedAction
stopAction	base_nodes/CCNode.cpp	/^void CCNode::stopAction(CCAction* action)$/;"	f	class:CCNode
stopActionByTag	base_nodes/CCNode.cpp	/^void CCNode::stopActionByTag(int tag)$/;"	f	class:CCNode
stopAllActions	base_nodes/CCNode.cpp	/^void CCNode::stopAllActions()$/;"	f	class:CCNode
stopAnimation	CCDirector.cpp	/^void CCDisplayLinkDirector::stopAnimation(void)$/;"	f	class:CCDisplayLinkDirector
stopSystem	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::stopSystem()$/;"	f	class:CCParticleSystem
strArray	cocoa/CCNS.cpp	/^typedef std::vector<std::string> strArray;$/;"	t	file:
strcmpcasenosensitive_internal	support/zip_support/unzip.cpp	/^local int strcmpcasenosensitive_internal (const char* fileName1, const char* fileName2)$/;"	f	namespace:cocos2d
streakWithFade	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak* CCMotionStreak::streakWithFade(float fade, float minSeg, float stroke, ccColor3B color, CCTexture2D* texture)$/;"	f	class:CCMotionStreak
streakWithFade	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak* CCMotionStreak::streakWithFade(float fade, float minSeg, float stroke, ccColor3B color, const char* path)$/;"	f	class:CCMotionStreak
stream	support/zip_support/unzip.cpp	/^    z_stream stream;            \/* zLib stream structure for inflate *\/$/;"	m	struct:cocos2d::__anon37	file:
stream_initialised	support/zip_support/unzip.cpp	/^    uLong stream_initialised;   \/* flag set if stream structure is initialized*\/$/;"	m	struct:cocos2d::__anon37	file:
stringForFormat	textures/CCTexture2D.cpp	/^const char* CCTexture2D::stringForFormat()$/;"	f	class:CCTexture2D
stringWithCString	cocoa/CCString.cpp	/^CCString* CCString::stringWithCString(const char* pStr)$/;"	f	class:CCString
stringWithContentsOfFile	cocoa/CCString.cpp	/^CCString* CCString::stringWithContentsOfFile(const char* pszFileName)$/;"	f	class:CCString
stringWithData	cocoa/CCString.cpp	/^CCString* CCString::stringWithData(const unsigned char* pData, unsigned long nLen)$/;"	f	class:CCString
stringWithFormat	cocoa/CCString.cpp	/^CCString* CCString::stringWithFormat(const char* format, ...)$/;"	f	class:CCString
stringWithString	cocoa/CCString.cpp	/^CCString* CCString::stringWithString(const std::string& pStr)$/;"	f	class:CCString
supportsBGRA8888	CCConfiguration.h	/^    inline bool supportsBGRA8888(void)$/;"	f	class:CCConfiguration
supportsDiscardFramebuffer	CCConfiguration.h	/^    inline bool supportsDiscardFramebuffer(void)$/;"	f	class:CCConfiguration
supportsNPOT	CCConfiguration.h	/^    inline bool supportsNPOT(void)$/;"	f	class:CCConfiguration
supportsPVRTC	CCConfiguration.h	/^    inline bool supportsPVRTC(void)$/;"	f	class:CCConfiguration
supportsShareableVAO	CCConfiguration.h	/^    inline bool supportsShareableVAO(void)$/;"	f	class:CCConfiguration
swap	kazmath/src/mat4.c	/^void swap(kmMat4 * pIn, int r1, int c1, int r2, int c2)$/;"	f
swap	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::swap(int oldIndex, int newIndex)$/;"	f	class:CCSpriteBatchNode
switchTo	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerMultiplex::switchTo(unsigned int n)$/;"	f	class:CCLayerMultiplex
switchToAndReleaseMe	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerMultiplex::switchToAndReleaseMe(unsigned int n)$/;"	f	class:CCLayerMultiplex
tCCFontDefHashElement	label_nodes/CCLabelBMFont.h	/^} tCCFontDefHashElement;$/;"	t	typeref:struct:_FontDefHashElement
tCCImageFormat	misc_nodes/CCRenderTexture.h	/^} tCCImageFormat;$/;"	t	typeref:enum:eImageFormat
tCCKerningHashElement	label_nodes/CCLabelBMFont.h	/^} tCCKerningHashElement;$/;"	t	typeref:struct:_KerningHashElement
tCCMenuState	menu_nodes/CCMenu.h	/^} tCCMenuState;$/;"	t	typeref:enum:__anon15
tCCParticle	particle_nodes/CCParticleSystem.h	/^}tCCParticle;$/;"	t	typeref:struct:sCCParticle
tCCPositionType	particle_nodes/CCParticleSystem.h	/^}tCCPositionType;$/;"	t	typeref:enum:__anon20
tHashElement	actions/CCActionManager.cpp	/^} tHashElement;$/;"	t	typeref:struct:_hashElement	file:
tHashTimerEntry	CCScheduler.cpp	/^} tHashTimerEntry;$/;"	t	typeref:struct:_hashSelectorEntry	file:
tHashUniformEntry	shaders/CCGLProgram.cpp	/^} tHashUniformEntry;$/;"	t	typeref:struct:_hashUniformEntry	file:
tHashUpdateEntry	CCScheduler.cpp	/^} tHashUpdateEntry;$/;"	t	typeref:struct:_hashUpdateEntry	file:
tImageSource	platform/CCImageCommon_cpp.h	/^}tImageSource;$/;"	t	typeref:struct:__anon30
tImageTGA	support/image_support/TGAlib.h	/^} tImageTGA;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::sImageTGA
tListEntry	CCScheduler.cpp	/^} tListEntry;$/;"	t	typeref:struct:_listEntry	file:
tOrientation	layers_scenes_transitions_nodes/CCTransition.h	/^} tOrientation;$/;"	t	typeref:enum:__anon12
tail	support/data_support/uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle
tangentialAccel	particle_nodes/CCParticleSystem.h	/^        float        tangentialAccel;$/;"	m	struct:sCCParticle::__anon22
tangentialAccel	particle_nodes/CCParticleSystem.h	/^        float tangentialAccel;$/;"	m	struct:CCParticleSystem::__anon24
tangentialAccelVar	particle_nodes/CCParticleSystem.h	/^        float tangentialAccelVar;$/;"	m	struct:CCParticleSystem::__anon24
target	CCScheduler.cpp	/^    CCObject            *target;    \/\/ hash key (retained)$/;"	m	struct:_hashSelectorEntry	file:
target	CCScheduler.cpp	/^    CCObject    *target;        \/\/ hash key (retained)$/;"	m	struct:_hashUpdateEntry	file:
target	CCScheduler.cpp	/^    CCObject    *target;        \/\/ not retained (retained by hashUpdateEntry)$/;"	m	struct:_listEntry	file:
target	actions/CCActionManager.cpp	/^    CCObject                    *target;$/;"	m	struct:_hashElement	file:
target	textures/CCTextureCache.cpp	/^    CCObject    *target;$/;"	m	struct:_AsyncStruct	file:
tbl	support/data_support/uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table
tell_file_func	support/zip_support/ioapi.h	/^typedef long     (ZCALLBACK *tell_file_func)      OF((voidpf opaque, voidpf stream));$/;"	t	namespace:cocos2d
testFunc	actions/CCActionTiledGrid.cpp	/^float CCFadeOutBLTiles::testFunc(const ccGridSize& pos, float time)$/;"	f	class:CCFadeOutBLTiles
testFunc	actions/CCActionTiledGrid.cpp	/^float CCFadeOutDownTiles::testFunc(const ccGridSize& pos, float time)$/;"	f	class:CCFadeOutDownTiles
testFunc	actions/CCActionTiledGrid.cpp	/^float CCFadeOutTRTiles::testFunc(const ccGridSize& pos, float time)$/;"	f	class:CCFadeOutTRTiles
testFunc	actions/CCActionTiledGrid.cpp	/^float CCFadeOutUpTiles::testFunc(const ccGridSize& pos, float time)$/;"	f	class:CCFadeOutUpTiles
testerror_file_func	support/zip_support/ioapi.h	/^typedef int      (ZCALLBACK *testerror_file_func) OF((voidpf opaque, voidpf stream));$/;"	t	namespace:cocos2d
tex2	include/ccTypes.h	/^static inline ccTex2F tex2(const float u, const float v)$/;"	f
texCoords	include/ccTypes.h	/^    ccT2F_Quad texCoords;$/;"	m	struct:__anon8
texCoords	include/ccTypes.h	/^    ccTex2F            texCoords;            \/\/ 8 bytes$/;"	m	struct:_ccV3F_C4B_T2F
texCoords	include/ccTypes.h	/^    ccTex2F            texCoords;$/;"	m	struct:_ccV2F_C4B_T2F
texCoords	include/ccTypes.h	/^    ccTex2F            texCoords;$/;"	m	struct:_ccV2F_C4F_T2F
textFieldWithPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^CCTextFieldTTF * CCTextFieldTTF::textFieldWithPlaceHolder(const char *placeholder, const CCSize& dimensions, CCTextAlignment alignment, const char *fontName, float fontSize)$/;"	f	class:CCTextFieldTTF
textFieldWithPlaceHolder	text_input_node/CCTextFieldTTF.cpp	/^CCTextFieldTTF * CCTextFieldTTF::textFieldWithPlaceHolder(const char *placeholder, const char *fontName, float fontSize)$/;"	f	class:CCTextFieldTTF
textHandler	platform/CCFileUtilsCommon_cpp.h	/^    void textHandler(void *ctx, const char *ch, int len)$/;"	f	class:CCDictMaker
textHandler	platform/CCSAXParser.cpp	/^void CCSAXParser::textHandler(void *ctx, const CC_XML_CHAR *name, int len)$/;"	f	class:CCSAXParser
textHandler	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^void CCTMXMapInfo::textHandler(void *ctx, const char *ch, int len)$/;"	f	class:CCTMXMapInfo
texture	textures/CCTextureCache.h	/^    CCTexture2D *texture;$/;"	m	class:VolatileTexture
textureAtlasWithFile	textures/CCTextureAtlas.cpp	/^CCTextureAtlas * CCTextureAtlas::textureAtlasWithFile(const char* file, unsigned int capacity)$/;"	f	class:CCTextureAtlas
textureAtlasWithTexture	textures/CCTextureAtlas.cpp	/^CCTextureAtlas * CCTextureAtlas::textureAtlasWithTexture(CCTexture2D *texture, unsigned int capacity)$/;"	f	class:CCTextureAtlas
textureCoordFromAlphaPoint	misc_nodes/CCProgressTimer.cpp	/^ccTex2F CCProgressTimer::textureCoordFromAlphaPoint(CCPoint alpha)$/;"	f	class:CCProgressTimer
textureForKey	textures/CCTextureCache.cpp	/^CCTexture2D* CCTextureCache::textureForKey(const char* key)$/;"	f	class:CCTextureCache
texture_matrix_stack	kazmath/src/GL/matrix.c	/^km_mat4_stack texture_matrix_stack;$/;"	v
textures	textures/CCTextureCache.cpp	/^std::list<VolatileTexture*> VolatileTexture::textures;$/;"	m	class:VolatileTexture	file:
textures	textures/CCTextureCache.h	/^    static std::list<VolatileTexture*> textures;$/;"	m	class:VolatileTexture
tgaDestroy	support/image_support/TGAlib.cpp	/^void tgaDestroy(tImageTGA *psInfo) {$/;"	f	namespace:cocos2d
tgaFlipImage	support/image_support/TGAlib.cpp	/^void tgaFlipImage( tImageTGA *psInfo )$/;"	f	namespace:cocos2d
tgaLoad	support/image_support/TGAlib.cpp	/^tImageTGA * tgaLoad(const char *pszFilename)$/;"	f	namespace:cocos2d
tgaLoadHeader	support/image_support/TGAlib.cpp	/^bool tgaLoadHeader(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo)$/;"	f	namespace:cocos2d
tgaLoadImageData	support/image_support/TGAlib.cpp	/^bool tgaLoadImageData(unsigned char *Buffer, unsigned long bufSize, tImageTGA *psInfo)$/;"	f	namespace:cocos2d
tgaLoadRLEImageData	support/image_support/TGAlib.cpp	/^static bool tgaLoadRLEImageData(unsigned char* Buffer, unsigned long bufSize, tImageTGA *psInfo)$/;"	f	namespace:cocos2d
tgaRGBtogreyscale	support/image_support/TGAlib.cpp	/^void tgaRGBtogreyscale(tImageTGA *psInfo) {$/;"	f	namespace:cocos2d
tile	actions/CCActionGrid.cpp	/^ccQuad3 CCTiledGrid3DAction::tile(const ccGridSize& pos)$/;"	f	class:CCTiledGrid3DAction
tile	effects/CCGrid.cpp	/^ccQuad3 CCTiledGrid3D::tile(const ccGridSize& pos)$/;"	f	class:CCTiledGrid3D
tileAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite * CCTMXLayer::tileAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer
tileAt	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^ccColor3B CCTileMapAtlas::tileAt(const ccGridSize& position)$/;"	f	class:CCTileMapAtlas
tileGIDAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^unsigned int CCTMXLayer::tileGIDAt(const CCPoint& pos)$/;"	f	class:CCTMXLayer
tileGIDAt	tilemap_parallax_nodes/CCTMXLayer.cpp	/^unsigned int CCTMXLayer::tileGIDAt(const CCPoint& pos, ccTMXTileFlags* flags)$/;"	f	class:CCTMXLayer
tileMapAtlasWithTileFile	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^CCTileMapAtlas * CCTileMapAtlas::tileMapAtlasWithTileFile(const char *tile, const char *mapFile, int tileWidth, int tileHeight)$/;"	f	class:CCTileMapAtlas
tiledMapWithTMXFile	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap * CCTMXTiledMap::tiledMapWithTMXFile(const char *tmxFile)$/;"	f	class:CCTMXTiledMap
tiledMapWithXML	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap* CCTMXTiledMap::tiledMapWithXML(const char* tmxString, const char* resourcePath)$/;"	f	class:CCTMXTiledMap
tilesetForLayer	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTilesetInfo * CCTMXTiledMap::tilesetForLayer(CCTMXLayerInfo *layerInfo, CCTMXMapInfo *mapInfo)$/;"	f	class:CCTMXTiledMap
timeToLive	particle_nodes/CCParticleSystem.h	/^    float        timeToLive;$/;"	m	struct:sCCParticle
timerIndex	CCScheduler.cpp	/^    unsigned int                timerIndex;$/;"	m	struct:_hashSelectorEntry	file:
timerWithScriptHandler	CCScheduler.cpp	/^CCTimer* CCTimer::timerWithScriptHandler(int nHandler, float fSeconds)$/;"	f	class:CCTimer
timerWithTarget	CCScheduler.cpp	/^CCTimer* CCTimer::timerWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector)$/;"	f	class:CCTimer
timerWithTarget	CCScheduler.cpp	/^CCTimer* CCTimer::timerWithTarget(CCObject *pTarget, SEL_SCHEDULE pfnSelector, float fSeconds)$/;"	f	class:CCTimer
timers	CCScheduler.cpp	/^    ccArray                      *timers;$/;"	m	struct:_hashSelectorEntry	file:
timersubCocos2d	platform/platform.cpp	/^double CCTime::timersubCocos2d(struct cc_timeval *start, struct cc_timeval *end)$/;"	f	class:CCTime
timestamp	platform/CCAccelerometerDelegate.h	/^    double timestamp;$/;"	m	class:CCAcceleration
tintWithColor	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::tintWithColor(ccColor3B colors)$/;"	f	class:CCMotionStreak
tl	include/ccTypes.h	/^    ccTex2F    tl;$/;"	m	struct:_ccT2F_Quad
tl	include/ccTypes.h	/^    ccV2F_C4B_T2F    tl;$/;"	m	struct:_ccV2F_C4B_T2F_Quad
tl	include/ccTypes.h	/^    ccV2F_C4F_T2F    tl;$/;"	m	struct:_ccV2F_C4F_T2F_Quad
tl	include/ccTypes.h	/^    ccV3F_C4B_T2F    tl;$/;"	m	struct:_ccV3F_C4B_T2F_Quad
tl	include/ccTypes.h	/^    ccVertex2F        tl;$/;"	m	struct:_ccQuad2
tl	include/ccTypes.h	/^    ccVertex3F        tl;$/;"	m	struct:_ccQuad3
tm_hour	support/zip_support/unzip.h	/^    uInt tm_hour;           \/* hours since midnight - [0,23] *\/$/;"	m	struct:cocos2d::tm_unz_s
tm_mday	support/zip_support/unzip.h	/^    uInt tm_mday;           \/* day of the month - [1,31] *\/$/;"	m	struct:cocos2d::tm_unz_s
tm_min	support/zip_support/unzip.h	/^    uInt tm_min;            \/* minutes after the hour - [0,59] *\/$/;"	m	struct:cocos2d::tm_unz_s
tm_mon	support/zip_support/unzip.h	/^    uInt tm_mon;            \/* months since January - [0,11] *\/$/;"	m	struct:cocos2d::tm_unz_s
tm_sec	support/zip_support/unzip.h	/^    uInt tm_sec;            \/* seconds after the minute - [0,59] *\/$/;"	m	struct:cocos2d::tm_unz_s
tm_unz	support/zip_support/unzip.h	/^} tm_unz;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::tm_unz_s
tm_unz_s	support/zip_support/unzip.h	/^typedef struct tm_unz_s$/;"	s	namespace:cocos2d
tm_year	support/zip_support/unzip.h	/^    uInt tm_year;           \/* years - [1980..2044] *\/$/;"	m	struct:cocos2d::tm_unz_s
tmu_date	support/zip_support/unzip.h	/^    tm_unz tmu_date;$/;"	m	struct:cocos2d::unz_file_info64_s
tmu_date	support/zip_support/unzip.h	/^    tm_unz tmu_date;$/;"	m	struct:cocos2d::unz_file_info_s
top	kazmath/include/kazmath/GL/mat4stack.h	/^    kmMat4* top;$/;"	m	struct:km_mat4_stack
top	label_nodes/CCLabelBMFont.h	/^    int top;$/;"	m	struct:_BMFontPadding
totalTime	support/CCProfiling.h	/^    double            totalTime;$/;"	m	class:CCProfilingTimer
total_out_64	support/zip_support/unzip.cpp	/^    ZPOS64_T total_out_64;$/;"	m	struct:cocos2d::__anon37	file:
touches	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touches(CCSet *pTouches, CCEvent *pEvent, unsigned int uIndex)$/;"	f	class:CCTouchDispatcher
touchesBegan	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touchesBegan(CCSet *touches, CCEvent *pEvent)$/;"	f	class:CCTouchDispatcher
touchesCancelled	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touchesCancelled(CCSet *touches, CCEvent *pEvent)$/;"	f	class:CCTouchDispatcher
touchesEnded	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touchesEnded(CCSet *touches, CCEvent *pEvent)$/;"	f	class:CCTouchDispatcher
touchesMoved	touch_dispatcher/CCTouchDispatcher.cpp	/^void CCTouchDispatcher::touchesMoved(CCSet *touches, CCEvent *pEvent)$/;"	f	class:CCTouchDispatcher
tr	include/ccTypes.h	/^    ccTex2F    tr;$/;"	m	struct:_ccT2F_Quad
tr	include/ccTypes.h	/^    ccV2F_C4B_T2F    tr;$/;"	m	struct:_ccV2F_C4B_T2F_Quad
tr	include/ccTypes.h	/^    ccV2F_C4F_T2F    tr;$/;"	m	struct:_ccV2F_C4F_T2F_Quad
tr	include/ccTypes.h	/^    ccV3F_C4B_T2F    tr;$/;"	m	struct:_ccV3F_C4B_T2F_Quad
tr	include/ccTypes.h	/^    ccVertex2F        tr;$/;"	m	struct:_ccQuad2
tr	include/ccTypes.h	/^    ccVertex3F        tr;$/;"	m	struct:_ccQuad3
transform	base_nodes/CCNode.cpp	/^void CCNode::transform()$/;"	f	class:CCNode
transformAncestors	base_nodes/CCNode.cpp	/^void CCNode::transformAncestors()$/;"	f	class:CCNode
transformTile	actions/CCActionTiledGrid.cpp	/^void CCFadeOutTRTiles::transformTile(const ccGridSize& pos, float distance)$/;"	f	class:CCFadeOutTRTiles
transformTile	actions/CCActionTiledGrid.cpp	/^void CCFadeOutUpTiles::transformTile(const ccGridSize& pos, float distance)$/;"	f	class:CCFadeOutUpTiles
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionCrossFade* CCTransitionCrossFade::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionCrossFade
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade * CCTransitionFade::transitionWithDuration(float duration, CCScene *scene, const ccColor3B& color)$/;"	f	class:CCTransitionFade
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeBL* CCTransitionFadeBL::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeBL
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeDown* CCTransitionFadeDown::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeDown
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeTR* CCTransitionFadeTR::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeTR
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeUp* CCTransitionFadeUp::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionFadeUp
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular* CCTransitionFlipAngular::transitionWithDuration(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionFlipAngular
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX* CCTransitionFlipX::transitionWithDuration(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionFlipX
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY* CCTransitionFlipY::transitionWithDuration(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionFlipY
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionJumpZoom* CCTransitionJumpZoom::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionJumpZoom
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInB* CCTransitionMoveInB::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInB
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInL* CCTransitionMoveInL::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInL
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInR* CCTransitionMoveInR::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInR
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInT* CCTransitionMoveInT::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionMoveInT
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionRotoZoom* CCTransitionRotoZoom::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionRotoZoom
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionScene * CCTransitionScene::transitionWithDuration(float t, CCScene *scene)$/;"	f	class:CCTransitionScene
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSceneOriented * CCTransitionSceneOriented::transitionWithDuration(float t, CCScene *scene, tOrientation orientation)$/;"	f	class:CCTransitionSceneOriented
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionShrinkGrow* CCTransitionShrinkGrow::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionShrinkGrow
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInB* CCTransitionSlideInB::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInB
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInL* CCTransitionSlideInL::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInL
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInR* CCTransitionSlideInR::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInR
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInT* CCTransitionSlideInT::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionSlideInT
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitCols* CCTransitionSplitCols::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionSplitCols
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitRows* CCTransitionSplitRows::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionSplitRows
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionTurnOffTiles* CCTransitionTurnOffTiles::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionTurnOffTiles
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular* CCTransitionZoomFlipAngular::transitionWithDuration(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionZoomFlipAngular
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX* CCTransitionZoomFlipX::transitionWithDuration(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionZoomFlipX
transitionWithDuration	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY* CCTransitionZoomFlipY::transitionWithDuration(float t, CCScene* s, tOrientation o)$/;"	f	class:CCTransitionZoomFlipY
transitionWithDuration	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCTransitionPageTurn * CCTransitionPageTurn::transitionWithDuration(float t, CCScene *scene, bool backwards)$/;"	f	class:CCTransitionPageTurn
transitionWithDuration	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgress* CCTransitionProgress::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionProgress
transitionWithDuration	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressHorizontal* CCTransitionProgressHorizontal::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressHorizontal
transitionWithDuration	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressInOut* CCTransitionProgressInOut::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressInOut
transitionWithDuration	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressOutIn* CCTransitionProgressOutIn::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressOutIn
transitionWithDuration	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressRadialCCW* CCTransitionProgressRadialCCW::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressRadialCCW
transitionWithDuration	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressRadialCW* CCTransitionProgressRadialCW::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressRadialCW
transitionWithDuration	layers_scenes_transitions_nodes/CCTransitionProgress.cpp	/^CCTransitionProgressVertical* CCTransitionProgressVertical::transitionWithDuration(float t, CCScene* scene)$/;"	f	class:CCTransitionProgressVertical
turnOffTile	actions/CCActionTiledGrid.cpp	/^void CCFadeOutTRTiles::turnOffTile(const ccGridSize& pos)$/;"	f	class:CCFadeOutTRTiles
turnOffTile	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::turnOffTile(const ccGridSize& pos)$/;"	f	class:CCTurnOffTiles
turnOnTile	actions/CCActionTiledGrid.cpp	/^void CCFadeOutTRTiles::turnOnTile(const ccGridSize& pos)$/;"	f	class:CCFadeOutTRTiles
turnOnTile	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::turnOnTile(const ccGridSize& pos)$/;"	f	class:CCTurnOffTiles
tv_sec	platform/platform.h	/^    long    tv_sec;        \/\/ seconds$/;"	m	struct:cc_timeval
tv_usec	platform/platform.h	/^    long    tv_usec;    \/\/ microSeconds$/;"	m	struct:cc_timeval
tx	cocoa/CCAffineTransform.h	/^  float tx, ty;$/;"	m	struct:CCAffineTransform
ty	cocoa/CCAffineTransform.h	/^  float tx, ty;$/;"	m	struct:CCAffineTransform
type	support/image_support/TGAlib.h	/^    unsigned char type, pixelDepth;$/;"	m	struct:cocos2d::sImageTGA
type	textures/CCTexturePVR.h	/^	GLenum type;$/;"	m	struct:_ccPVRTexturePixelFormatInfo
u	include/ccTypes.h	/^     GLfloat u;$/;"	m	struct:_ccTex2F
uiImage	textures/CCTextureCache.h	/^    CCImage *uiImage;$/;"	m	class:VolatileTexture
uintValue	cocoa/CCString.cpp	/^unsigned int CCString::uintValue() const$/;"	f	class:CCString
uncompressed_size	support/zip_support/ZipUtils.cpp	/^    uLong uncompressed_size;$/;"	m	struct:ZipEntryInfo	file:
uncompressed_size	support/zip_support/unzip.h	/^    ZPOS64_T uncompressed_size; \/* uncompressed size               8 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
uncompressed_size	support/zip_support/unzip.h	/^    uLong uncompressed_size;    \/* uncompressed size               4 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
unregisterScriptAccelerateHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::unregisterScriptAccelerateHandler(void)$/;"	f	class:CCLayer
unregisterScriptHandler	base_nodes/CCNode.cpp	/^void CCNode::unregisterScriptHandler(void)$/;"	f	class:CCNode
unregisterScriptKeypadHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::unregisterScriptKeypadHandler(void)$/;"	f	class:CCLayer
unregisterScriptObserver	support/CCNotificationCenter.cpp	/^void CCNotificationCenter::unregisterScriptObserver(void)$/;"	f	class:CCNotificationCenter
unregisterScriptTapHandler	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::unregisterScriptTapHandler(void)$/;"	f	class:CCMenuItem
unregisterScriptTouchHandler	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayer::unregisterScriptTouchHandler(void)$/;"	f	class:CCLayer
unschedule	base_nodes/CCNode.cpp	/^void CCNode::unschedule(SEL_SCHEDULE selector)$/;"	f	class:CCNode
unscheduleAll	CCScheduler.cpp	/^void CCScheduler::unscheduleAll(void)$/;"	f	class:CCScheduler
unscheduleAllForTarget	CCScheduler.cpp	/^void CCScheduler::unscheduleAllForTarget(CCObject *pTarget)$/;"	f	class:CCScheduler
unscheduleAllSelectors	base_nodes/CCNode.cpp	/^void CCNode::unscheduleAllSelectors()$/;"	f	class:CCNode
unscheduleAllWithMinPriority	CCScheduler.cpp	/^void CCScheduler::unscheduleAllWithMinPriority(int nMinPriority)$/;"	f	class:CCScheduler
unscheduleScriptEntry	CCScheduler.cpp	/^void CCScheduler::unscheduleScriptEntry(unsigned int uScheduleScriptEntryID)$/;"	f	class:CCScheduler
unscheduleSelector	CCScheduler.cpp	/^void CCScheduler::unscheduleSelector(SEL_SCHEDULE pfnSelector, CCObject *pTarget)$/;"	f	class:CCScheduler
unscheduleUpdate	base_nodes/CCNode.cpp	/^void CCNode::unscheduleUpdate()$/;"	f	class:CCNode
unscheduleUpdateForTarget	CCScheduler.cpp	/^void CCScheduler::unscheduleUpdateForTarget(const CCObject *pTarget)$/;"	f	class:CCScheduler
unselected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItem::unselected()$/;"	f	class:CCMenuItem
unselected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemLabel::unselected()$/;"	f	class:CCMenuItemLabel
unselected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::unselected()$/;"	f	class:CCMenuItemSprite
unselected	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemToggle::unselected()$/;"	f	class:CCMenuItemToggle
unused	support/zip_support/unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	m	struct:TagunzFile__
unz64_file_pos	support/zip_support/unzip.h	/^} unz64_file_pos;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz64_file_pos_s
unz64_file_pos_s	support/zip_support/unzip.h	/^typedef struct unz64_file_pos_s$/;"	s	namespace:cocos2d
unz64_s	support/zip_support/unzip.cpp	/^} unz64_s;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::__anon38	file:
unz64local_CheckCurrentFileCoherencyHeader	support/zip_support/unzip.cpp	/^local int unz64local_CheckCurrentFileCoherencyHeader (unz64_s* s, uInt* piSizeVar,$/;"	f	namespace:cocos2d
unz64local_DosDateToTmuDate	support/zip_support/unzip.cpp	/^local void unz64local_DosDateToTmuDate (ZPOS64_T ulDosDate, tm_unz* ptm)$/;"	f	namespace:cocos2d
unz64local_GetCurrentFileInfoInternal	support/zip_support/unzip.cpp	/^local int unz64local_GetCurrentFileInfoInternal (unzFile file,$/;"	f	namespace:cocos2d
unz64local_SearchCentralDir	support/zip_support/unzip.cpp	/^local ZPOS64_T unz64local_SearchCentralDir(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream)$/;"	f	namespace:cocos2d
unz64local_SearchCentralDir64	support/zip_support/unzip.cpp	/^local ZPOS64_T unz64local_SearchCentralDir64(const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	namespace:cocos2d
unz64local_getByte	support/zip_support/unzip.cpp	/^local int unz64local_getByte(const zlib_filefunc64_32_def* pzlib_filefunc_def, voidpf filestream, int *pi)$/;"	f	namespace:cocos2d
unz64local_getLong	support/zip_support/unzip.cpp	/^local int unz64local_getLong (const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	namespace:cocos2d
unz64local_getLong64	support/zip_support/unzip.cpp	/^local int unz64local_getLong64 (const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	namespace:cocos2d
unz64local_getShort	support/zip_support/unzip.cpp	/^local int unz64local_getShort (const zlib_filefunc64_32_def* pzlib_filefunc_def,$/;"	f	namespace:cocos2d
unzClose	support/zip_support/unzip.cpp	/^int ZEXPORT unzClose (unzFile file)$/;"	f	namespace:cocos2d
unzCloseCurrentFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzCloseCurrentFile (unzFile file)$/;"	f	namespace:cocos2d
unzFile	support/zip_support/unzip.h	/^typedef unzFile__ *unzFile;$/;"	t
unzFile	support/zip_support/unzip.h	/^typedef voidp unzFile;$/;"	t
unzFile__	support/zip_support/unzip.h	/^typedef struct TagunzFile__ { int unused; } unzFile__;$/;"	t	typeref:struct:TagunzFile__
unzGetCurrentFileInfo	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetCurrentFileInfo (unzFile file,$/;"	f	namespace:cocos2d
unzGetCurrentFileInfo64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetCurrentFileInfo64 (unzFile file,$/;"	f	namespace:cocos2d
unzGetCurrentFileZStreamPos64	support/zip_support/unzip.cpp	/^ZPOS64_T ZEXPORT unzGetCurrentFileZStreamPos64( unzFile file)$/;"	f	namespace:cocos2d
unzGetFilePos	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetFilePos($/;"	f	namespace:cocos2d
unzGetFilePos64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetFilePos64(unzFile file, unz64_file_pos*  file_pos)$/;"	f	namespace:cocos2d
unzGetGlobalComment	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetGlobalComment (unzFile file, char * szComment, uLong uSizeBuf)$/;"	f	namespace:cocos2d
unzGetGlobalInfo	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetGlobalInfo (unzFile file, unz_global_info* pglobal_info32)$/;"	f	namespace:cocos2d
unzGetGlobalInfo64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetGlobalInfo64 (unzFile file, unz_global_info64* pglobal_info)$/;"	f	namespace:cocos2d
unzGetLocalExtrafield	support/zip_support/unzip.cpp	/^int ZEXPORT unzGetLocalExtrafield (unzFile file, voidp buf, unsigned len)$/;"	f	namespace:cocos2d
unzGetOffset	support/zip_support/unzip.cpp	/^uLong ZEXPORT unzGetOffset (unzFile file)$/;"	f	namespace:cocos2d
unzGetOffset64	support/zip_support/unzip.cpp	/^ZPOS64_T ZEXPORT unzGetOffset64(unzFile file)$/;"	f	namespace:cocos2d
unzGoToFilePos	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToFilePos($/;"	f	namespace:cocos2d
unzGoToFilePos64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToFilePos64(unzFile file, const unz64_file_pos* file_pos)$/;"	f	namespace:cocos2d
unzGoToFirstFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToFirstFile (unzFile file)$/;"	f	namespace:cocos2d
unzGoToFirstFile64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToFirstFile64 (unzFile file,$/;"	f	namespace:cocos2d
unzGoToNextFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToNextFile (unzFile  file)$/;"	f	namespace:cocos2d
unzGoToNextFile64	support/zip_support/unzip.cpp	/^int ZEXPORT unzGoToNextFile64 (unzFile file,$/;"	f	namespace:cocos2d
unzLocateFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzLocateFile (unzFile file, const char *szFileName, int iCaseSensitivity)$/;"	f	namespace:cocos2d
unzOpen	support/zip_support/unzip.cpp	/^unzFile ZEXPORT unzOpen (const char *path)$/;"	f	namespace:cocos2d
unzOpen2	support/zip_support/unzip.cpp	/^unzFile ZEXPORT unzOpen2 (const char *path,$/;"	f	namespace:cocos2d
unzOpen2_64	support/zip_support/unzip.cpp	/^unzFile ZEXPORT unzOpen2_64 (const void *path,$/;"	f	namespace:cocos2d
unzOpen64	support/zip_support/unzip.cpp	/^unzFile ZEXPORT unzOpen64 (const void *path)$/;"	f	namespace:cocos2d
unzOpenCurrentFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzOpenCurrentFile (unzFile file)$/;"	f	namespace:cocos2d
unzOpenCurrentFile2	support/zip_support/unzip.cpp	/^int ZEXPORT unzOpenCurrentFile2 (unzFile file, int* method, int* level, int raw)$/;"	f	namespace:cocos2d
unzOpenCurrentFile3	support/zip_support/unzip.cpp	/^int ZEXPORT unzOpenCurrentFile3 (unzFile file, int* method,$/;"	f	namespace:cocos2d
unzOpenCurrentFilePassword	support/zip_support/unzip.cpp	/^int ZEXPORT unzOpenCurrentFilePassword (unzFile file, const char*  password)$/;"	f	namespace:cocos2d
unzOpenInternal	support/zip_support/unzip.cpp	/^local unzFile unzOpenInternal (const void *path,$/;"	f	namespace:cocos2d
unzReadCurrentFile	support/zip_support/unzip.cpp	/^int ZEXPORT unzReadCurrentFile  (unzFile file, voidp buf, unsigned len)$/;"	f	namespace:cocos2d
unzSetOffset	support/zip_support/unzip.cpp	/^int ZEXPORT unzSetOffset (unzFile file, uLong pos)$/;"	f	namespace:cocos2d
unzSetOffset64	support/zip_support/unzip.cpp	/^int ZEXPORT unzSetOffset64(unzFile file, ZPOS64_T pos)$/;"	f	namespace:cocos2d
unzStringFileNameCompare	support/zip_support/unzip.cpp	/^int ZEXPORT unzStringFileNameCompare (const char*  fileName1,$/;"	f	namespace:cocos2d
unz_copyright	support/zip_support/unzip.cpp	/^const char unz_copyright[] =$/;"	m	namespace:cocos2d	file:
unz_file_info	support/zip_support/unzip.h	/^} unz_file_info;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_file_info_s
unz_file_info64	support/zip_support/unzip.h	/^} unz_file_info64;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_file_info64_s
unz_file_info64_internal	support/zip_support/unzip.cpp	/^} unz_file_info64_internal;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_file_info64_internal_s	file:
unz_file_info64_internal_s	support/zip_support/unzip.cpp	/^typedef struct unz_file_info64_internal_s$/;"	s	namespace:cocos2d	file:
unz_file_info64_s	support/zip_support/unzip.h	/^typedef struct unz_file_info64_s$/;"	s	namespace:cocos2d
unz_file_info_s	support/zip_support/unzip.h	/^typedef struct unz_file_info_s$/;"	s	namespace:cocos2d
unz_file_pos	support/zip_support/unzip.h	/^} unz_file_pos;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_file_pos_s
unz_file_pos_s	support/zip_support/unzip.h	/^typedef struct unz_file_pos_s$/;"	s	namespace:cocos2d
unz_global_info	support/zip_support/unzip.h	/^} unz_global_info;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_global_info_s
unz_global_info64	support/zip_support/unzip.h	/^} unz_global_info64;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::unz_global_info64_s
unz_global_info64_s	support/zip_support/unzip.h	/^typedef struct unz_global_info64_s$/;"	s	namespace:cocos2d
unz_global_info_s	support/zip_support/unzip.h	/^typedef struct unz_global_info_s$/;"	s	namespace:cocos2d
unzeof	support/zip_support/unzip.cpp	/^int ZEXPORT unzeof (unzFile file)$/;"	f	namespace:cocos2d
unztell	support/zip_support/unzip.cpp	/^z_off_t ZEXPORT unztell (unzFile file)$/;"	f	namespace:cocos2d
unztell64	support/zip_support/unzip.cpp	/^ZPOS64_T ZEXPORT unztell64 (unzFile file)$/;"	f	namespace:cocos2d
update	CCScheduler.cpp	/^void CCScheduler::update(float dt)$/;"	f	class:CCScheduler
update	CCScheduler.cpp	/^void CCTimer::update(float dt)$/;"	f	class:CCTimer
update	actions/CCAction.cpp	/^void CCAction::update(float time)$/;"	f	class:CCAction
update	actions/CCActionCamera.cpp	/^void CCOrbitCamera::update(float dt)$/;"	f	class:CCOrbitCamera
update	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineTo::update(float time)$/;"	f	class:CCCardinalSplineTo
update	actions/CCActionEase.cpp	/^void CCActionEase::update(float time)$/;"	f	class:CCActionEase
update	actions/CCActionEase.cpp	/^void CCEaseBackIn::update(float time)$/;"	f	class:CCEaseBackIn
update	actions/CCActionEase.cpp	/^void CCEaseBackInOut::update(float time)$/;"	f	class:CCEaseBackInOut
update	actions/CCActionEase.cpp	/^void CCEaseBackOut::update(float time)$/;"	f	class:CCEaseBackOut
update	actions/CCActionEase.cpp	/^void CCEaseBounceIn::update(float time)$/;"	f	class:CCEaseBounceIn
update	actions/CCActionEase.cpp	/^void CCEaseBounceInOut::update(float time)$/;"	f	class:CCEaseBounceInOut
update	actions/CCActionEase.cpp	/^void CCEaseBounceOut::update(float time)$/;"	f	class:CCEaseBounceOut
update	actions/CCActionEase.cpp	/^void CCEaseElasticIn::update(float time)$/;"	f	class:CCEaseElasticIn
update	actions/CCActionEase.cpp	/^void CCEaseElasticInOut::update(float time)$/;"	f	class:CCEaseElasticInOut
update	actions/CCActionEase.cpp	/^void CCEaseElasticOut::update(float time)$/;"	f	class:CCEaseElasticOut
update	actions/CCActionEase.cpp	/^void CCEaseExponentialIn::update(float time)$/;"	f	class:CCEaseExponentialIn
update	actions/CCActionEase.cpp	/^void CCEaseExponentialInOut::update(float time)$/;"	f	class:CCEaseExponentialInOut
update	actions/CCActionEase.cpp	/^void CCEaseExponentialOut::update(float time)$/;"	f	class:CCEaseExponentialOut
update	actions/CCActionEase.cpp	/^void CCEaseIn::update(float time)$/;"	f	class:CCEaseIn
update	actions/CCActionEase.cpp	/^void CCEaseInOut::update(float time)$/;"	f	class:CCEaseInOut
update	actions/CCActionEase.cpp	/^void CCEaseOut::update(float time)$/;"	f	class:CCEaseOut
update	actions/CCActionEase.cpp	/^void CCEaseSineIn::update(float time)$/;"	f	class:CCEaseSineIn
update	actions/CCActionEase.cpp	/^void CCEaseSineInOut::update(float time)$/;"	f	class:CCEaseSineInOut
update	actions/CCActionEase.cpp	/^void CCEaseSineOut::update(float time)$/;"	f	class:CCEaseSineOut
update	actions/CCActionGrid.cpp	/^void CCAccelAmplitude::update(float time)$/;"	f	class:CCAccelAmplitude
update	actions/CCActionGrid.cpp	/^void CCAccelDeccelAmplitude::update(float time)$/;"	f	class:CCAccelDeccelAmplitude
update	actions/CCActionGrid.cpp	/^void CCDeccelAmplitude::update(float time)$/;"	f	class:CCDeccelAmplitude
update	actions/CCActionGrid3D.cpp	/^void CCFlipX3D::update(float time)$/;"	f	class:CCFlipX3D
update	actions/CCActionGrid3D.cpp	/^void CCFlipY3D::update(float time)$/;"	f	class:CCFlipY3D
update	actions/CCActionGrid3D.cpp	/^void CCLens3D::update(float time)$/;"	f	class:CCLens3D
update	actions/CCActionGrid3D.cpp	/^void CCLiquid::update(float time)$/;"	f	class:CCLiquid
update	actions/CCActionGrid3D.cpp	/^void CCRipple3D::update(float time)$/;"	f	class:CCRipple3D
update	actions/CCActionGrid3D.cpp	/^void CCShaky3D::update(float time)$/;"	f	class:CCShaky3D
update	actions/CCActionGrid3D.cpp	/^void CCTwirl::update(float time)$/;"	f	class:CCTwirl
update	actions/CCActionGrid3D.cpp	/^void CCWaves3D::update(float time)$/;"	f	class:CCWaves3D
update	actions/CCActionGrid3D.cpp	/^void CCWaves::update(float time)$/;"	f	class:CCWaves
update	actions/CCActionInstant.cpp	/^void CCActionInstant::update(float time) {$/;"	f	class:CCActionInstant
update	actions/CCActionInstant.cpp	/^void CCCallFunc::update(float time) {$/;"	f	class:CCCallFunc
update	actions/CCActionInstant.cpp	/^void CCFlipX::update(float time) {$/;"	f	class:CCFlipX
update	actions/CCActionInstant.cpp	/^void CCFlipY::update(float time) {$/;"	f	class:CCFlipY
update	actions/CCActionInstant.cpp	/^void CCHide::update(float time) {$/;"	f	class:CCHide
update	actions/CCActionInstant.cpp	/^void CCPlace::update(float time) {$/;"	f	class:CCPlace
update	actions/CCActionInstant.cpp	/^void CCShow::update(float time) {$/;"	f	class:CCShow
update	actions/CCActionInstant.cpp	/^void CCToggleVisibility::update(float time) $/;"	f	class:CCToggleVisibility
update	actions/CCActionInterval.cpp	/^void CCAnimate::update(float t)$/;"	f	class:CCAnimate
update	actions/CCActionInterval.cpp	/^void CCBezierBy::update(float time)$/;"	f	class:CCBezierBy
update	actions/CCActionInterval.cpp	/^void CCBlink::update(float time)$/;"	f	class:CCBlink
update	actions/CCActionInterval.cpp	/^void CCDelayTime::update(float time)$/;"	f	class:CCDelayTime
update	actions/CCActionInterval.cpp	/^void CCFadeIn::update(float time)$/;"	f	class:CCFadeIn
update	actions/CCActionInterval.cpp	/^void CCFadeOut::update(float time)$/;"	f	class:CCFadeOut
update	actions/CCActionInterval.cpp	/^void CCFadeTo::update(float time)$/;"	f	class:CCFadeTo
update	actions/CCActionInterval.cpp	/^void CCJumpBy::update(float time)$/;"	f	class:CCJumpBy
update	actions/CCActionInterval.cpp	/^void CCMoveTo::update(float time)$/;"	f	class:CCMoveTo
update	actions/CCActionInterval.cpp	/^void CCRepeat::update(float dt)$/;"	f	class:CCRepeat
update	actions/CCActionInterval.cpp	/^void CCReverseTime::update(float time)$/;"	f	class:CCReverseTime
update	actions/CCActionInterval.cpp	/^void CCRotateBy::update(float time)$/;"	f	class:CCRotateBy
update	actions/CCActionInterval.cpp	/^void CCRotateTo::update(float time)$/;"	f	class:CCRotateTo
update	actions/CCActionInterval.cpp	/^void CCScaleTo::update(float time)$/;"	f	class:CCScaleTo
update	actions/CCActionInterval.cpp	/^void CCSequence::update(float t)$/;"	f	class:CCSequence
update	actions/CCActionInterval.cpp	/^void CCSkewTo::update(float t)$/;"	f	class:CCSkewTo
update	actions/CCActionInterval.cpp	/^void CCSpawn::update(float time)$/;"	f	class:CCSpawn
update	actions/CCActionInterval.cpp	/^void CCTargetedAction::update(float time)$/;"	f	class:CCTargetedAction
update	actions/CCActionInterval.cpp	/^void CCTintBy::update(float time)$/;"	f	class:CCTintBy
update	actions/CCActionInterval.cpp	/^void CCTintTo::update(float time)$/;"	f	class:CCTintTo
update	actions/CCActionManager.cpp	/^void CCActionManager::update(float dt)$/;"	f	class:CCActionManager
update	actions/CCActionPageTurn3D.cpp	/^void CCPageTurn3D::update(float time)$/;"	f	class:CCPageTurn3D
update	actions/CCActionProgressTimer.cpp	/^void CCProgressFromTo::update(float time)$/;"	f	class:CCProgressFromTo
update	actions/CCActionProgressTimer.cpp	/^void CCProgressTo::update(float time)$/;"	f	class:CCProgressTo
update	actions/CCActionTiledGrid.cpp	/^void CCFadeOutTRTiles::update(float time)$/;"	f	class:CCFadeOutTRTiles
update	actions/CCActionTiledGrid.cpp	/^void CCJumpTiles3D::update(float time)$/;"	f	class:CCJumpTiles3D
update	actions/CCActionTiledGrid.cpp	/^void CCShakyTiles3D::update(float time)$/;"	f	class:CCShakyTiles3D
update	actions/CCActionTiledGrid.cpp	/^void CCShatteredTiles3D::update(float time)$/;"	f	class:CCShatteredTiles3D
update	actions/CCActionTiledGrid.cpp	/^void CCShuffleTiles::update(float time)$/;"	f	class:CCShuffleTiles
update	actions/CCActionTiledGrid.cpp	/^void CCSplitCols::update(float time)$/;"	f	class:CCSplitCols
update	actions/CCActionTiledGrid.cpp	/^void CCSplitRows::update(float time)$/;"	f	class:CCSplitRows
update	actions/CCActionTiledGrid.cpp	/^void CCTurnOffTiles::update(float time)$/;"	f	class:CCTurnOffTiles
update	actions/CCActionTiledGrid.cpp	/^void CCWavesTiles3D::update(float time)$/;"	f	class:CCWavesTiles3D
update	actions/CCActionTween.cpp	/^void CCActionTween::update(float dt)$/;"	f	class:CCActionTween
update	base_nodes/CCNode.cpp	/^void CCNode::update(float fDelta)$/;"	f	class:CCNode
update	cocoa/CCObject.h	/^    virtual void update(float dt) {CC_UNUSED_PARAM(dt);};$/;"	f	class:CCObject
update	misc_nodes/CCMotionStreak.cpp	/^void CCMotionStreak::update(float delta)$/;"	f	class:CCMotionStreak
update	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::update(float dt)$/;"	f	class:CCParticleSystem
updateAllAtlasIndexes	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::updateAllAtlasIndexes()$/;"	f	class:CCParticleBatchNode
updateAtlasIndex	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::updateAtlasIndex(CCSprite* sprite, int* curIndex)$/;"	f	class:CCSpriteBatchNode
updateAtlasValueAt	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::updateAtlasValueAt(const ccGridSize& pos, const ccColor3B& value, unsigned int index)$/;"	f	class:CCTileMapAtlas
updateAtlasValues	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::updateAtlasValues()$/;"	f	class:CCAtlasNode
updateAtlasValues	label_nodes/CCLabelAtlas.cpp	/^void CCLabelAtlas::updateAtlasValues()$/;"	f	class:CCLabelAtlas
updateAtlasValues	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^void CCTileMapAtlas::updateAtlasValues()$/;"	f	class:CCTileMapAtlas
updateBar	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::updateBar(void)$/;"	f	class:CCProgressTimer
updateBlendFunc	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::updateBlendFunc()$/;"	f	class:CCAtlasNode
updateBlendFunc	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::updateBlendFunc(void)$/;"	f	class:CCParticleBatchNode
updateBlendFunc	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::updateBlendFunc()$/;"	f	class:CCParticleSystem
updateBlendFunc	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateBlendFunc(void)$/;"	f	class:CCSprite
updateBlendFunc	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::updateBlendFunc(void)$/;"	f	class:CCSpriteBatchNode
updateColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerColor::updateColor()$/;"	f	class:CCLayerColor
updateColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^void CCLayerGradient::updateColor()$/;"	f	class:CCLayerGradient
updateColor	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::updateColor(void)$/;"	f	class:CCProgressTimer
updateColor	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateColor(void)$/;"	f	class:CCSprite
updateImagesVisibility	menu_nodes/CCMenuItem.cpp	/^void CCMenuItemSprite::updateImagesVisibility()$/;"	f	class:CCMenuItemSprite
updateLabel	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::updateLabel()$/;"	f	class:CCLabelBMFont
updateOpacityModifyRGB	base_nodes/CCAtlasNode.cpp	/^void CCAtlasNode::updateOpacityModifyRGB()$/;"	f	class:CCAtlasNode
updatePosition	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineBy::updatePosition(cocos2d::CCPoint &newPos)$/;"	f	class:CCCardinalSplineBy
updatePosition	actions/CCActionCatmullRom.cpp	/^void CCCardinalSplineTo::updatePosition(cocos2d::CCPoint &newPos)$/;"	f	class:CCCardinalSplineTo
updateProgress	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::updateProgress(void)$/;"	f	class:CCProgressTimer
updateQuad	textures/CCTextureAtlas.cpp	/^void CCTextureAtlas::updateQuad(ccV3F_C4B_T2F_Quad *quad, unsigned int index)$/;"	f	class:CCTextureAtlas
updateQuadFromSprite	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::updateQuadFromSprite(CCSprite *sprite, unsigned int index)$/;"	f	class:CCSpriteBatchNode
updateQuadWithParticle	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::updateQuadWithParticle(tCCParticle* particle, const CCPoint& newPosition)$/;"	f	class:CCParticleSystem
updateQuadWithParticle	particle_nodes/CCParticleSystemQuad.cpp	/^void CCParticleSystemQuad::updateQuadWithParticle(tCCParticle* particle, const CCPoint& newPosition)$/;"	f	class:CCParticleSystemQuad
updateRadial	misc_nodes/CCProgressTimer.cpp	/^void CCProgressTimer::updateRadial(void)$/;"	f	class:CCProgressTimer
updateString	label_nodes/CCLabelBMFont.cpp	/^void CCLabelBMFont::updateString(bool fromUpdate)$/;"	f	class:CCLabelBMFont
updateTexture	label_nodes/CCLabelTTF.cpp	/^bool CCLabelTTF::updateTexture()$/;"	f	class:CCLabelTTF
updateTileForGID	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCSprite * CCTMXLayer::updateTileForGID(unsigned int gid, const CCPoint& pos)    $/;"	f	class:CCTMXLayer
updateTransform	base_nodes/CCNode.cpp	/^void CCNode::updateTransform()$/;"	f	class:CCNode
updateTransform	sprite_nodes/CCSprite.cpp	/^void CCSprite::updateTransform(void)$/;"	f	class:CCSprite
updateUniformLocation	shaders/CCGLProgram.cpp	/^bool CCGLProgram::updateUniformLocation(GLint location, GLvoid* data, unsigned int bytes)$/;"	f	class:CCGLProgram
updateUniforms	shaders/CCGLProgram.cpp	/^void CCGLProgram::updateUniforms()$/;"	f	class:CCGLProgram
updateWithNoTime	particle_nodes/CCParticleSystem.cpp	/^void CCParticleSystem::updateWithNoTime(void)$/;"	f	class:CCParticleSystem
use	shaders/CCGLProgram.cpp	/^void CCGLProgram::use()$/;"	f	class:CCGLProgram
utf8_skip_data	label_nodes/CCLabelBMFont.cpp	/^static const char utf8_skip_data[256] = {$/;"	v	file:
uthash_expand_fyi	support/data_support/uthash.h	85;"	d
uthash_fatal	support/data_support/uthash.h	80;"	d
uthash_free	support/data_support/uthash.h	82;"	d
uthash_malloc	support/data_support/uthash.h	81;"	d
uthash_noexpand_fyi	support/data_support/uthash.h	84;"	d
v	include/ccTypes.h	/^     GLfloat v;$/;"	m	struct:_ccTex2F
v2_pixelformat_hash	textures/CCTexturePVR.cpp	/^static struct _pixelformat_hash v2_pixelformat_hash[] = {$/;"	v	typeref:struct:_pixelformat_hash	file:
v2f	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2f(float x, float y)$/;"	f	file:
v2fadd	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fadd(const ccVertex2F &v0, const ccVertex2F &v1)$/;"	f	file:
v2fdot	draw_nodes/CCDrawNode.cpp	/^static inline float v2fdot(const ccVertex2F &p0, const ccVertex2F &p1)$/;"	f	file:
v2fforangle	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fforangle(float _a_)$/;"	f	file:
v2fmult	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fmult(const ccVertex2F &v, float s)$/;"	f	file:
v2fneg	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fneg(const ccVertex2F &p0)$/;"	f	file:
v2fnormalize	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fnormalize(const ccVertex2F &p)$/;"	f	file:
v2fperp	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fperp(const ccVertex2F &p0)$/;"	f	file:
v2fsub	draw_nodes/CCDrawNode.cpp	/^static inline ccVertex2F v2fsub(const ccVertex2F &v0, const ccVertex2F &v1)$/;"	f	file:
v2fzero	draw_nodes/CCDrawNode.cpp	/^static ccVertex2F v2fzero = {0.0f,0.0f};$/;"	v	file:
v3_pixelformat_hash	textures/CCTexturePVR.cpp	/^struct _pixelformat_hash v3_pixelformat_hash[] = {$/;"	v	typeref:struct:_pixelformat_hash
value	shaders/CCGLProgram.cpp	/^    GLvoid*         value;       \/\/ value$/;"	m	struct:_hashUniformEntry	file:
valueForKey	cocoa/CCDictionary.cpp	/^const CCString* CCDictionary::valueForKey(const std::string& key)$/;"	f	class:CCDictionary
valueForKey	cocoa/CCDictionary.cpp	/^const CCString* CCDictionary::valueForKey(int key)$/;"	f	class:CCDictionary
valueForKey	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^static const char* valueForKey(const char *key, std::map<std::string, std::string>* dict)$/;"	f	file:
version	support/zip_support/ZipUtils.h	/^        unsigned short            version;            \/\/ should be 2 (although version type==1 is also supported)$/;"	m	struct:cocos2d::CCZHeader
version	support/zip_support/unzip.h	/^    uLong version;              \/* version made by                 2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
version	support/zip_support/unzip.h	/^    uLong version;              \/* version made by                 2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
version	textures/CCTexturePVR.cpp	/^	uint32_t version;$/;"	m	struct:__anon50	file:
version_needed	support/zip_support/unzip.h	/^    uLong version_needed;       \/* version needed to extract       2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info64_s
version_needed	support/zip_support/unzip.h	/^    uLong version_needed;       \/* version needed to extract       2 bytes *\/$/;"	m	struct:cocos2d::unz_file_info_s
vertex	actions/CCActionGrid.cpp	/^ccVertex3F CCGrid3DAction::vertex(const ccGridSize& pos)$/;"	f	class:CCGrid3DAction
vertex	effects/CCGrid.cpp	/^ccVertex3F CCGrid3D::vertex(const ccGridSize& pos)$/;"	f	class:CCGrid3D
vertex2	include/ccTypes.h	/^static inline ccVertex2F vertex2(const float x, const float y)$/;"	f
vertex3	include/ccTypes.h	/^static inline ccVertex3F vertex3(const float x, const float y, const float z)$/;"	f
vertexFromAlphaPoint	misc_nodes/CCProgressTimer.cpp	/^ccVertex2F CCProgressTimer::vertexFromAlphaPoint(CCPoint alpha)$/;"	f	class:CCProgressTimer
vertexShaderLog	shaders/CCGLProgram.cpp	/^const char* CCGLProgram::vertexShaderLog()$/;"	f	class:CCGLProgram
vertexZForPos	tilemap_parallax_nodes/CCTMXLayer.cpp	/^int CCTMXLayer::vertexZForPos(const CCPoint& pos)$/;"	f	class:CCTMXLayer
vertices	include/ccTypes.h	/^    ccVertex2F        vertices;$/;"	m	struct:_ccV2F_C4B_T2F
vertices	include/ccTypes.h	/^    ccVertex2F        vertices;$/;"	m	struct:_ccV2F_C4F_T2F
vertices	include/ccTypes.h	/^    ccVertex3F        vertices;            \/\/ 12 bytes$/;"	m	struct:_ccV3F_C4B_T2F
visit	base_nodes/CCNode.cpp	/^void CCNode::visit()$/;"	f	class:CCNode
visit	misc_nodes/CCClippingNode.cpp	/^void CCClippingNode::visit()$/;"	f	class:CCClippingNode
visit	misc_nodes/CCRenderTexture.cpp	/^void CCRenderTexture::visit()$/;"	f	class:CCRenderTexture
visit	particle_nodes/CCParticleBatchNode.cpp	/^void CCParticleBatchNode::visit()$/;"	f	class:CCParticleBatchNode
visit	sprite_nodes/CCSpriteBatchNode.cpp	/^void CCSpriteBatchNode::visit(void)$/;"	f	class:CCSpriteBatchNode
visit	tilemap_parallax_nodes/CCParallaxNode.cpp	/^void CCParallaxNode::visit()$/;"	f	class:CCParallaxNode
w	kazmath/include/kazmath/quaternion.h	/^    kmScalar w;$/;"	m	struct:kmQuaternion
w	kazmath/include/kazmath/vec4.h	/^    kmScalar w;$/;"	m	struct:kmVec4
width	cocoa/CCGeometry.h	/^    float width;$/;"	m	class:CCSize
width	support/image_support/TGAlib.h	/^    signed short width;$/;"	m	struct:cocos2d::sImageTGA
width	textures/CCTexturePVR.cpp	/^	uint32_t width;$/;"	m	struct:__anon50	file:
width	textures/CCTexturePVR.cpp	/^    unsigned int width;$/;"	m	struct:_PVRTexHeader	file:
worldToNodeTransform	base_nodes/CCNode.cpp	/^CCAffineTransform CCNode::worldToNodeTransform(void)$/;"	f	class:CCNode
wrapS	textures/CCTexture2D.h	/^    GLuint    wrapS;$/;"	m	struct:_ccTexParams
wrapT	textures/CCTexture2D.h	/^    GLuint    wrapT;$/;"	m	struct:_ccTexParams
x	cocoa/CCGeometry.h	/^    float x;$/;"	m	class:CCPoint
x	include/ccTypes.h	/^    GLfloat x;$/;"	m	struct:_ccVertex2F
x	include/ccTypes.h	/^    GLfloat x;$/;"	m	struct:_ccVertex3F
x	include/ccTypes.h	/^    int    x;$/;"	m	struct:_ccGridSize
x	kazmath/include/kazmath/quaternion.h	/^    kmScalar x;$/;"	m	struct:kmQuaternion
x	kazmath/include/kazmath/vec2.h	/^    kmScalar x;$/;"	m	struct:kmVec2
x	kazmath/include/kazmath/vec3.h	/^    kmScalar x;$/;"	m	struct:kmVec3
x	kazmath/include/kazmath/vec4.h	/^    kmScalar x;$/;"	m	struct:kmVec4
x	platform/CCAccelerometerDelegate.h	/^    double x;$/;"	m	class:CCAcceleration
xAdvance	label_nodes/CCLabelBMFont.h	/^    short xAdvance;$/;"	m	struct:_BMFontDef
xOffset	label_nodes/CCLabelBMFont.h	/^    short xOffset;$/;"	m	struct:_BMFontDef
y	cocoa/CCGeometry.h	/^    float y;$/;"	m	class:CCPoint
y	include/ccTypes.h	/^    GLfloat y;$/;"	m	struct:_ccVertex2F
y	include/ccTypes.h	/^    GLfloat y;$/;"	m	struct:_ccVertex3F
y	include/ccTypes.h	/^    int    y;$/;"	m	struct:_ccGridSize
y	kazmath/include/kazmath/quaternion.h	/^    kmScalar y;$/;"	m	struct:kmQuaternion
y	kazmath/include/kazmath/vec2.h	/^    kmScalar y;$/;"	m	struct:kmVec2
y	kazmath/include/kazmath/vec3.h	/^    kmScalar y;$/;"	m	struct:kmVec3
y	kazmath/include/kazmath/vec4.h	/^    kmScalar y;$/;"	m	struct:kmVec4
y	platform/CCAccelerometerDelegate.h	/^    double y;$/;"	m	class:CCAcceleration
yOffset	label_nodes/CCLabelBMFont.h	/^    short yOffset;$/;"	m	struct:_BMFontDef
z	include/ccTypes.h	/^    GLfloat z;$/;"	m	struct:_ccVertex3F
z	kazmath/include/kazmath/quaternion.h	/^    kmScalar z;$/;"	m	struct:kmQuaternion
z	kazmath/include/kazmath/vec3.h	/^    kmScalar z;$/;"	m	struct:kmVec3
z	kazmath/include/kazmath/vec4.h	/^    kmScalar z;$/;"	m	struct:kmVec4
z	platform/CCAccelerometerDelegate.h	/^    double z;$/;"	m	class:CCAcceleration
z_filefunc	support/zip_support/unzip.cpp	/^    zlib_filefunc64_32_def z_filefunc;$/;"	m	struct:cocos2d::__anon37	file:
z_filefunc	support/zip_support/unzip.cpp	/^    zlib_filefunc64_32_def z_filefunc;$/;"	m	struct:cocos2d::__anon38	file:
zclose_file	support/zip_support/ioapi.h	/^    close_file_func     zclose_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s
zclose_file	support/zip_support/ioapi.h	/^    close_file_func     zclose_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s
zerror_file	support/zip_support/ioapi.h	/^    testerror_file_func zerror_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s
zerror_file	support/zip_support/ioapi.h	/^    testerror_file_func zerror_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s
zfile_func64	support/zip_support/ioapi.h	/^    zlib_filefunc64_def zfile_func64;$/;"	m	struct:cocos2d::zlib_filefunc64_32_def_s
zipFile	support/zip_support/ZipUtils.cpp	/^    unzFile zipFile;$/;"	m	class:ZipFilePrivate	file:
zlib_filefunc64_32_def	support/zip_support/ioapi.h	/^} zlib_filefunc64_32_def;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::zlib_filefunc64_32_def_s
zlib_filefunc64_32_def_s	support/zip_support/ioapi.h	/^typedef struct zlib_filefunc64_32_def_s$/;"	s	namespace:cocos2d
zlib_filefunc64_def	support/zip_support/ioapi.h	/^} zlib_filefunc64_def;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::zlib_filefunc64_def_s
zlib_filefunc64_def_s	support/zip_support/ioapi.h	/^typedef struct zlib_filefunc64_def_s$/;"	s	namespace:cocos2d
zlib_filefunc_def	support/zip_support/ioapi.h	/^} zlib_filefunc_def;$/;"	t	namespace:cocos2d	typeref:struct:cocos2d::zlib_filefunc_def_s
zlib_filefunc_def_s	support/zip_support/ioapi.h	/^typedef struct zlib_filefunc_def_s$/;"	s	namespace:cocos2d
zopen32_file	support/zip_support/ioapi.h	/^    open_file_func      zopen32_file;$/;"	m	struct:cocos2d::zlib_filefunc64_32_def_s
zopen64_file	support/zip_support/ioapi.h	/^    open64_file_func    zopen64_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s
zopen_file	support/zip_support/ioapi.h	/^    open_file_func      zopen_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s
zread_file	support/zip_support/ioapi.h	/^    read_file_func      zread_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s
zread_file	support/zip_support/ioapi.h	/^    read_file_func      zread_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s
zseek32_file	support/zip_support/ioapi.h	/^    seek_file_func      zseek32_file;$/;"	m	struct:cocos2d::zlib_filefunc64_32_def_s
zseek64_file	support/zip_support/ioapi.h	/^    seek64_file_func    zseek64_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s
zseek_file	support/zip_support/ioapi.h	/^    seek_file_func      zseek_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s
ztell32_file	support/zip_support/ioapi.h	/^    tell_file_func      ztell32_file;$/;"	m	struct:cocos2d::zlib_filefunc64_32_def_s
ztell64_file	support/zip_support/ioapi.h	/^    tell64_file_func    ztell64_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s
ztell_file	support/zip_support/ioapi.h	/^    tell_file_func      ztell_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s
zwrite_file	support/zip_support/ioapi.h	/^    write_file_func     zwrite_file;$/;"	m	struct:cocos2d::zlib_filefunc64_def_s
zwrite_file	support/zip_support/ioapi.h	/^    write_file_func     zwrite_file;$/;"	m	struct:cocos2d::zlib_filefunc_def_s
~CCAccelAmplitude	actions/CCActionGrid.cpp	/^CCAccelAmplitude::~CCAccelAmplitude(void)$/;"	f	class:CCAccelAmplitude
~CCAccelDeccelAmplitude	actions/CCActionGrid.cpp	/^CCAccelDeccelAmplitude::~CCAccelDeccelAmplitude(void)$/;"	f	class:CCAccelDeccelAmplitude
~CCAction	actions/CCAction.cpp	/^CCAction::~CCAction()$/;"	f	class:CCAction
~CCActionCamera	actions/CCActionCamera.h	/^    virtual ~CCActionCamera(){}$/;"	f	class:CCActionCamera
~CCActionEase	actions/CCActionEase.cpp	/^CCActionEase::~CCActionEase(void)$/;"	f	class:CCActionEase
~CCActionInstant	actions/CCActionInstant.h	/^    virtual ~CCActionInstant(){}$/;"	f	class:CCActionInstant
~CCActionManager	actions/CCActionManager.cpp	/^CCActionManager::~CCActionManager(void)$/;"	f	class:CCActionManager
~CCActionTweenDelegate	actions/CCActionTween.h	/^    virtual ~CCActionTweenDelegate() {}$/;"	f	class:CCActionTweenDelegate
~CCAnimate	actions/CCActionInterval.cpp	/^CCAnimate::~CCAnimate()$/;"	f	class:CCAnimate
~CCAnimation	sprite_nodes/CCAnimation.cpp	/^CCAnimation::~CCAnimation(void)$/;"	f	class:CCAnimation
~CCAnimationCache	sprite_nodes/CCAnimationCache.cpp	/^CCAnimationCache::~CCAnimationCache()$/;"	f	class:CCAnimationCache
~CCAnimationFrame	sprite_nodes/CCAnimation.cpp	/^CCAnimationFrame::~CCAnimationFrame()$/;"	f	class:CCAnimationFrame
~CCApplicationProtocol	platform/CCApplicationProtocol.h	/^    virtual ~CCApplicationProtocol() {}$/;"	f	class:CCApplicationProtocol
~CCArray	cocoa/CCArray.cpp	/^CCArray::~CCArray()$/;"	f	class:CCArray
~CCAtlasNode	base_nodes/CCAtlasNode.cpp	/^CCAtlasNode::~CCAtlasNode()$/;"	f	class:CCAtlasNode
~CCAutoreleasePool	cocoa/CCAutoreleasePool.cpp	/^CCAutoreleasePool::~CCAutoreleasePool(void)$/;"	f	class:CCAutoreleasePool
~CCBMFontConfiguration	label_nodes/CCLabelBMFont.cpp	/^CCBMFontConfiguration::~CCBMFontConfiguration()$/;"	f	class:CCBMFontConfiguration
~CCCallFunc	actions/CCActionInstant.cpp	/^CCCallFunc::~CCCallFunc(void)$/;"	f	class:CCCallFunc
~CCCallFuncN	actions/CCActionInstant.h	/^    virtual ~CCCallFuncN(){}$/;"	f	class:CCCallFuncN
~CCCallFuncO	actions/CCActionInstant.cpp	/^CCCallFuncO::~CCCallFuncO() {$/;"	f	class:CCCallFuncO
~CCCamera	CCCamera.cpp	/^CCCamera::~CCCamera(void)$/;"	f	class:CCCamera
~CCCardinalSplineTo	actions/CCActionCatmullRom.cpp	/^CCCardinalSplineTo::~CCCardinalSplineTo()$/;"	f	class:CCCardinalSplineTo
~CCClippingNode	misc_nodes/CCClippingNode.cpp	/^CCClippingNode::~CCClippingNode()$/;"	f	class:CCClippingNode
~CCDeccelAmplitude	actions/CCActionGrid.cpp	/^CCDeccelAmplitude::~CCDeccelAmplitude(void)$/;"	f	class:CCDeccelAmplitude
~CCDictMaker	platform/CCFileUtilsCommon_cpp.h	/^    ~CCDictMaker()$/;"	f	class:CCDictMaker
~CCDictionary	cocoa/CCDictionary.cpp	/^CCDictionary::~CCDictionary()$/;"	f	class:CCDictionary
~CCDirector	CCDirector.cpp	/^CCDirector::~CCDirector(void)$/;"	f	class:CCDirector
~CCDrawNode	draw_nodes/CCDrawNode.cpp	/^CCDrawNode::~CCDrawNode()$/;"	f	class:CCDrawNode
~CCEGLViewProtocol	platform/CCEGLViewProtocol.cpp	/^CCEGLViewProtocol::~CCEGLViewProtocol()$/;"	f	class:CCEGLViewProtocol
~CCEaseRateAction	actions/CCActionEase.cpp	/^CCEaseRateAction::~CCEaseRateAction(void)$/;"	f	class:CCEaseRateAction
~CCFiniteTimeAction	actions/CCAction.h	/^    virtual ~CCFiniteTimeAction(){}$/;"	f	class:CCFiniteTimeAction
~CCFlipX	actions/CCActionInstant.h	/^    virtual ~CCFlipX(){}$/;"	f	class:CCFlipX
~CCFlipY	actions/CCActionInstant.h	/^    virtual ~CCFlipY(){}$/;"	f	class:CCFlipY
~CCFollow	actions/CCAction.cpp	/^CCFollow::~CCFollow()$/;"	f	class:CCFollow
~CCGLProgram	shaders/CCGLProgram.cpp	/^CCGLProgram::~CCGLProgram()$/;"	f	class:CCGLProgram
~CCGrabber	effects/CCGrabber.cpp	/^CCGrabber::~CCGrabber()$/;"	f	class:CCGrabber
~CCGrid3D	effects/CCGrid.cpp	/^CCGrid3D::~CCGrid3D(void)$/;"	f	class:CCGrid3D
~CCGridBase	effects/CCGrid.cpp	/^CCGridBase::~CCGridBase(void)$/;"	f	class:CCGridBase
~CCHide	actions/CCActionInstant.h	/^    virtual ~CCHide(){}$/;"	f	class:CCHide
~CCIMEDelegate	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDelegate::~CCIMEDelegate()$/;"	f	class:CCIMEDelegate
~CCIMEDispatcher	text_input_node/CCIMEDispatcher.cpp	/^CCIMEDispatcher::~CCIMEDispatcher()$/;"	f	class:CCIMEDispatcher
~CCImage	platform/CCImageCommon_cpp.h	/^CCImage::~CCImage()$/;"	f	class:CCImage
~CCKeypadDispatcher	keypad_dispatcher/CCKeypadDispatcher.cpp	/^CCKeypadDispatcher::~CCKeypadDispatcher()$/;"	f	class:CCKeypadDispatcher
~CCKeypadHandler	keypad_dispatcher/CCKeypadDelegate.cpp	/^CCKeypadHandler::~CCKeypadHandler()$/;"	f	class:CCKeypadHandler
~CCLabelAtlas	label_nodes/CCLabelAtlas.h	/^    virtual ~CCLabelAtlas()$/;"	f	class:CCLabelAtlas
~CCLabelBMFont	label_nodes/CCLabelBMFont.cpp	/^CCLabelBMFont::~CCLabelBMFont()$/;"	f	class:CCLabelBMFont
~CCLabelTTF	label_nodes/CCLabelTTF.cpp	/^CCLabelTTF::~CCLabelTTF()$/;"	f	class:CCLabelTTF
~CCLayer	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayer::~CCLayer()$/;"	f	class:CCLayer
~CCLayerColor	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerColor::~CCLayerColor()$/;"	f	class:CCLayerColor
~CCLayerMultiplex	layers_scenes_transitions_nodes/CCLayer.cpp	/^CCLayerMultiplex::~CCLayerMultiplex()$/;"	f	class:CCLayerMultiplex
~CCMenu	menu_nodes/CCMenu.h	/^    virtual ~CCMenu(){}$/;"	f	class:CCMenu
~CCMenuItem	menu_nodes/CCMenuItem.cpp	/^CCMenuItem::~CCMenuItem()$/;"	f	class:CCMenuItem
~CCMenuItemAtlasFont	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemAtlasFont(){}$/;"	f	class:CCMenuItemAtlasFont
~CCMenuItemFont	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemFont(){}$/;"	f	class:CCMenuItemFont
~CCMenuItemImage	menu_nodes/CCMenuItem.h	/^    virtual ~CCMenuItemImage(){}$/;"	f	class:CCMenuItemImage
~CCMenuItemLabel	menu_nodes/CCMenuItem.cpp	/^CCMenuItemLabel::~CCMenuItemLabel()$/;"	f	class:CCMenuItemLabel
~CCMenuItemToggle	menu_nodes/CCMenuItem.cpp	/^CCMenuItemToggle::~CCMenuItemToggle()$/;"	f	class:CCMenuItemToggle
~CCMotionStreak	misc_nodes/CCMotionStreak.cpp	/^CCMotionStreak::~CCMotionStreak()$/;"	f	class:CCMotionStreak
~CCNode	base_nodes/CCNode.cpp	/^CCNode::~CCNode(void)$/;"	f	class:CCNode
~CCNotificationCenter	support/CCNotificationCenter.cpp	/^CCNotificationCenter::~CCNotificationCenter()$/;"	f	class:CCNotificationCenter
~CCNotificationObserver	support/CCNotificationCenter.cpp	/^CCNotificationObserver::~CCNotificationObserver()$/;"	f	class:CCNotificationObserver
~CCObject	cocoa/CCObject.cpp	/^CCObject::~CCObject(void)$/;"	f	class:CCObject
~CCOrbitCamera	actions/CCActionCamera.h	/^    ~CCOrbitCamera(){}$/;"	f	class:CCOrbitCamera
~CCParallaxNode	tilemap_parallax_nodes/CCParallaxNode.cpp	/^CCParallaxNode::~CCParallaxNode()$/;"	f	class:CCParallaxNode
~CCParticleBatchNode	particle_nodes/CCParticleBatchNode.cpp	/^CCParticleBatchNode::~CCParticleBatchNode()$/;"	f	class:CCParticleBatchNode
~CCParticleExplosion	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleExplosion(){}$/;"	f	class:CCParticleExplosion
~CCParticleFire	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleFire(){}$/;"	f	class:CCParticleFire
~CCParticleFireworks	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleFireworks(){}$/;"	f	class:CCParticleFireworks
~CCParticleFlower	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleFlower(){}$/;"	f	class:CCParticleFlower
~CCParticleGalaxy	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleGalaxy(){}$/;"	f	class:CCParticleGalaxy
~CCParticleMeteor	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleMeteor(){}$/;"	f	class:CCParticleMeteor
~CCParticleRain	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleRain(){}$/;"	f	class:CCParticleRain
~CCParticleSmoke	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleSmoke(){}$/;"	f	class:CCParticleSmoke
~CCParticleSnow	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleSnow(){}$/;"	f	class:CCParticleSnow
~CCParticleSpiral	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleSpiral(){}$/;"	f	class:CCParticleSpiral
~CCParticleSun	particle_nodes/CCParticleExamples.h	/^    virtual ~CCParticleSun(){}$/;"	f	class:CCParticleSun
~CCParticleSystem	particle_nodes/CCParticleSystem.cpp	/^CCParticleSystem::~CCParticleSystem()$/;"	f	class:CCParticleSystem
~CCParticleSystemQuad	particle_nodes/CCParticleSystemQuad.cpp	/^CCParticleSystemQuad::~CCParticleSystemQuad()$/;"	f	class:CCParticleSystemQuad
~CCPlace	actions/CCActionInstant.h	/^    virtual ~CCPlace(){}$/;"	f	class:CCPlace
~CCPointArray	actions/CCActionCatmullRom.cpp	/^CCPointArray::~CCPointArray()$/;"	f	class:CCPointArray
~CCPoolManager	cocoa/CCAutoreleasePool.cpp	/^CCPoolManager::~CCPoolManager()$/;"	f	class:CCPoolManager
~CCProfiler	support/CCProfiling.cpp	/^CCProfiler::~CCProfiler(void)$/;"	f	class:CCProfiler
~CCProfilingTimer	support/CCProfiling.cpp	/^CCProfilingTimer::~CCProfilingTimer(void)$/;"	f	class:CCProfilingTimer
~CCProgressTimer	misc_nodes/CCProgressTimer.cpp	/^CCProgressTimer::~CCProgressTimer(void)$/;"	f	class:CCProgressTimer
~CCRenderTexture	misc_nodes/CCRenderTexture.cpp	/^CCRenderTexture::~CCRenderTexture()$/;"	f	class:CCRenderTexture
~CCRepeat	actions/CCActionInterval.cpp	/^CCRepeat::~CCRepeat(void)$/;"	f	class:CCRepeat
~CCRepeatForever	actions/CCActionInterval.cpp	/^CCRepeatForever::~CCRepeatForever()$/;"	f	class:CCRepeatForever
~CCReverseTime	actions/CCActionInterval.cpp	/^CCReverseTime::~CCReverseTime(void)$/;"	f	class:CCReverseTime
~CCSAXParser	platform/CCSAXParser.cpp	/^CCSAXParser::~CCSAXParser(void)$/;"	f	class:CCSAXParser
~CCScene	layers_scenes_transitions_nodes/CCScene.cpp	/^CCScene::~CCScene()$/;"	f	class:CCScene
~CCScheduler	CCScheduler.cpp	/^CCScheduler::~CCScheduler(void)$/;"	f	class:CCScheduler
~CCSchedulerScriptHandlerEntry	script_support/CCScriptSupport.cpp	/^CCSchedulerScriptHandlerEntry::~CCSchedulerScriptHandlerEntry(void)$/;"	f	class:CCSchedulerScriptHandlerEntry
~CCScriptEngineManager	script_support/CCScriptSupport.cpp	/^CCScriptEngineManager::~CCScriptEngineManager(void)$/;"	f	class:CCScriptEngineManager
~CCScriptEngineProtocol	script_support/CCScriptSupport.h	/^    virtual ~CCScriptEngineProtocol() {};$/;"	f	class:CCScriptEngineProtocol
~CCScriptHandlerEntry	script_support/CCScriptSupport.cpp	/^CCScriptHandlerEntry::~CCScriptHandlerEntry(void)$/;"	f	class:CCScriptHandlerEntry
~CCSequence	actions/CCActionInterval.cpp	/^CCSequence::~CCSequence(void)$/;"	f	class:CCSequence
~CCSet	cocoa/CCSet.cpp	/^CCSet::~CCSet(void)$/;"	f	class:CCSet
~CCShaderCache	shaders/CCShaderCache.cpp	/^CCShaderCache::~CCShaderCache()$/;"	f	class:CCShaderCache
~CCShow	actions/CCActionInstant.h	/^    virtual ~CCShow(){}$/;"	f	class:CCShow
~CCShuffleTiles	actions/CCActionTiledGrid.cpp	/^CCShuffleTiles::~CCShuffleTiles(void)$/;"	f	class:CCShuffleTiles
~CCSpawn	actions/CCActionInterval.cpp	/^CCSpawn::~CCSpawn(void)$/;"	f	class:CCSpawn
~CCSpeed	actions/CCAction.cpp	/^CCSpeed::~CCSpeed()$/;"	f	class:CCSpeed
~CCSprite	sprite_nodes/CCSprite.cpp	/^CCSprite::~CCSprite(void)$/;"	f	class:CCSprite
~CCSpriteBatchNode	sprite_nodes/CCSpriteBatchNode.cpp	/^CCSpriteBatchNode::~CCSpriteBatchNode()$/;"	f	class:CCSpriteBatchNode
~CCSpriteFrame	sprite_nodes/CCSpriteFrame.cpp	/^CCSpriteFrame::~CCSpriteFrame(void)$/;"	f	class:CCSpriteFrame
~CCSpriteFrameCache	sprite_nodes/CCSpriteFrameCache.cpp	/^CCSpriteFrameCache::~CCSpriteFrameCache(void)$/;"	f	class:CCSpriteFrameCache
~CCString	cocoa/CCString.cpp	/^CCString::~CCString()$/;"	f	class:CCString
~CCTMXLayer	tilemap_parallax_nodes/CCTMXLayer.cpp	/^CCTMXLayer::~CCTMXLayer()$/;"	f	class:CCTMXLayer
~CCTMXLayerInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXLayerInfo::~CCTMXLayerInfo()$/;"	f	class:CCTMXLayerInfo
~CCTMXMapInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXMapInfo::~CCTMXMapInfo()$/;"	f	class:CCTMXMapInfo
~CCTMXObjectGroup	tilemap_parallax_nodes/CCTMXObjectGroup.cpp	/^CCTMXObjectGroup::~CCTMXObjectGroup()$/;"	f	class:CCTMXObjectGroup
~CCTMXTiledMap	tilemap_parallax_nodes/CCTMXTiledMap.cpp	/^CCTMXTiledMap::~CCTMXTiledMap()$/;"	f	class:CCTMXTiledMap
~CCTMXTilesetInfo	tilemap_parallax_nodes/CCTMXXMLParser.cpp	/^CCTMXTilesetInfo::~CCTMXTilesetInfo()$/;"	f	class:CCTMXTilesetInfo
~CCTargetedAction	actions/CCActionInterval.cpp	/^CCTargetedAction::~CCTargetedAction()$/;"	f	class:CCTargetedAction
~CCTargetedTouchHandler	touch_dispatcher/CCTouchHandler.cpp	/^CCTargetedTouchHandler::~CCTargetedTouchHandler(void)$/;"	f	class:CCTargetedTouchHandler
~CCTextFieldTTF	text_input_node/CCTextFieldTTF.cpp	/^CCTextFieldTTF::~CCTextFieldTTF()$/;"	f	class:CCTextFieldTTF
~CCTexture2D	textures/CCTexture2D.cpp	/^CCTexture2D::~CCTexture2D()$/;"	f	class:CCTexture2D
~CCTextureAtlas	textures/CCTextureAtlas.cpp	/^CCTextureAtlas::~CCTextureAtlas()$/;"	f	class:CCTextureAtlas
~CCTextureCache	textures/CCTextureCache.cpp	/^CCTextureCache::~CCTextureCache()$/;"	f	class:CCTextureCache
~CCThread	platform/CCThread.cpp	/^CCThread::~CCThread()$/;"	f	class:CCThread
~CCTileMapAtlas	tilemap_parallax_nodes/CCTileMapAtlas.cpp	/^CCTileMapAtlas::~CCTileMapAtlas()$/;"	f	class:CCTileMapAtlas
~CCTiledGrid3D	effects/CCGrid.cpp	/^CCTiledGrid3D::~CCTiledGrid3D(void)$/;"	f	class:CCTiledGrid3D
~CCToggleVisibility	actions/CCActionInstant.h	/^    virtual ~CCToggleVisibility(){}$/;"	f	class:CCToggleVisibility
~CCTouchDelegate	touch_dispatcher/CCTouchDelegateProtocol.h	/^    virtual ~CCTouchDelegate()$/;"	f	class:CCTouchDelegate
~CCTouchDispatcher	touch_dispatcher/CCTouchDispatcher.cpp	/^CCTouchDispatcher::~CCTouchDispatcher(void)$/;"	f	class:CCTouchDispatcher
~CCTouchHandler	touch_dispatcher/CCTouchHandler.cpp	/^CCTouchHandler::~CCTouchHandler(void)$/;"	f	class:CCTouchHandler
~CCTouchScriptHandlerEntry	script_support/CCScriptSupport.cpp	/^CCTouchScriptHandlerEntry::~CCTouchScriptHandlerEntry(void)$/;"	f	class:CCTouchScriptHandlerEntry
~CCTransitionCrossFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionCrossFade::~CCTransitionCrossFade()$/;"	f	class:CCTransitionCrossFade
~CCTransitionFade	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFade::~CCTransitionFade()$/;"	f	class:CCTransitionFade
~CCTransitionFadeBL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeBL::~CCTransitionFadeBL()$/;"	f	class:CCTransitionFadeBL
~CCTransitionFadeDown	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeDown::~CCTransitionFadeDown()$/;"	f	class:CCTransitionFadeDown
~CCTransitionFadeTR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeTR::~CCTransitionFadeTR()$/;"	f	class:CCTransitionFadeTR
~CCTransitionFadeUp	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFadeUp::~CCTransitionFadeUp()$/;"	f	class:CCTransitionFadeUp
~CCTransitionFlipAngular	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipAngular::~CCTransitionFlipAngular()$/;"	f	class:CCTransitionFlipAngular
~CCTransitionFlipX	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipX::~CCTransitionFlipX()$/;"	f	class:CCTransitionFlipX
~CCTransitionFlipY	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionFlipY::~CCTransitionFlipY()$/;"	f	class:CCTransitionFlipY
~CCTransitionJumpZoom	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionJumpZoom::~CCTransitionJumpZoom()$/;"	f	class:CCTransitionJumpZoom
~CCTransitionMoveInB	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInB::~CCTransitionMoveInB()$/;"	f	class:CCTransitionMoveInB
~CCTransitionMoveInL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInL::~CCTransitionMoveInL()$/;"	f	class:CCTransitionMoveInL
~CCTransitionMoveInR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInR::~CCTransitionMoveInR()$/;"	f	class:CCTransitionMoveInR
~CCTransitionMoveInT	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionMoveInT::~CCTransitionMoveInT()$/;"	f	class:CCTransitionMoveInT
~CCTransitionPageTurn	layers_scenes_transitions_nodes/CCTransitionPageTurn.cpp	/^CCTransitionPageTurn::~CCTransitionPageTurn()$/;"	f	class:CCTransitionPageTurn
~CCTransitionRotoZoom	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionRotoZoom::~CCTransitionRotoZoom()$/;"	f	class:CCTransitionRotoZoom
~CCTransitionScene	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionScene::~CCTransitionScene()$/;"	f	class:CCTransitionScene
~CCTransitionSceneOriented	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSceneOriented::~CCTransitionSceneOriented()$/;"	f	class:CCTransitionSceneOriented
~CCTransitionShrinkGrow	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionShrinkGrow::~CCTransitionShrinkGrow()$/;"	f	class:CCTransitionShrinkGrow
~CCTransitionSlideInB	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInB::~CCTransitionSlideInB()$/;"	f	class:CCTransitionSlideInB
~CCTransitionSlideInL	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInL::~CCTransitionSlideInL()$/;"	f	class:CCTransitionSlideInL
~CCTransitionSlideInR	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInR::~CCTransitionSlideInR()$/;"	f	class:CCTransitionSlideInR
~CCTransitionSlideInT	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSlideInT::~CCTransitionSlideInT()$/;"	f	class:CCTransitionSlideInT
~CCTransitionSplitCols	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitCols::~CCTransitionSplitCols()$/;"	f	class:CCTransitionSplitCols
~CCTransitionSplitRows	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionSplitRows::~CCTransitionSplitRows()$/;"	f	class:CCTransitionSplitRows
~CCTransitionTurnOffTiles	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionTurnOffTiles::~CCTransitionTurnOffTiles()$/;"	f	class:CCTransitionTurnOffTiles
~CCTransitionZoomFlipAngular	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipAngular::~CCTransitionZoomFlipAngular()$/;"	f	class:CCTransitionZoomFlipAngular
~CCTransitionZoomFlipX	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipX::~CCTransitionZoomFlipX()$/;"	f	class:CCTransitionZoomFlipX
~CCTransitionZoomFlipY	layers_scenes_transitions_nodes/CCTransition.cpp	/^CCTransitionZoomFlipY::~CCTransitionZoomFlipY()$/;"	f	class:CCTransitionZoomFlipY
~CCTurnOffTiles	actions/CCActionTiledGrid.cpp	/^CCTurnOffTiles::~CCTurnOffTiles(void)$/;"	f	class:CCTurnOffTiles
~CCUserDefault	support/CCUserDefault.cpp	/^CCUserDefault::~CCUserDefault()$/;"	f	class:CCUserDefault
~EGLTouchDelegate	touch_dispatcher/CCTouchDispatcher.h	/^    virtual ~EGLTouchDelegate() {}$/;"	f	class:EGLTouchDelegate
~Impl	text_input_node/CCIMEDispatcher.cpp	/^    ~Impl()$/;"	f	class:CCIMEDispatcher::Impl
~VolatileTexture	textures/CCTextureCache.cpp	/^VolatileTexture::~VolatileTexture()$/;"	f	class:VolatileTexture
~ZipFile	support/zip_support/ZipUtils.cpp	/^ZipFile::~ZipFile()$/;"	f	class:ZipFile
