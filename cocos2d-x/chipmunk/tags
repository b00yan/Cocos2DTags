!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	src/cpBBTree.c	/^#define A /;"	d	file:
B	src/cpBBTree.c	/^#define B /;"	d	file:
BBQuery	src/cpSpaceQuery.c	/^BBQuery(struct BBQueryContext *context, cpShape *shape, void *data)$/;"	f	file:	signature:(struct BBQueryContext *context, cpShape *shape, void *data)
BBQueryContext	src/cpSpaceQuery.c	/^struct BBQueryContext {$/;"	s	file:
BBQueryContext::bb	src/cpSpaceQuery.c	/^	cpBB bb;$/;"	m	struct:BBQueryContext	file:	access:public
BBQueryContext::func	src/cpSpaceQuery.c	/^	cpSpaceBBQueryFunc func;$/;"	m	struct:BBQueryContext	file:	access:public
BBQueryContext::group	src/cpSpaceQuery.c	/^	cpGroup group;$/;"	m	struct:BBQueryContext	file:	access:public
BBQueryContext::layers	src/cpSpaceQuery.c	/^	cpLayers layers;$/;"	m	struct:BBQueryContext	file:	access:public
BBToBounds	src/cpSweep1D.c	/^BBToBounds(cpSweep1D *sweep, cpBB bb)$/;"	f	file:	signature:(cpSweep1D *sweep, cpBB bb)
BodyIteratorFunc	src/chipmunk.c	/^static void BodyIteratorFunc(cpBody *body, void *ptr, void (^block)(void *ptr)){block(ptr);}$/;"	f	file:	signature:(cpBody *body, void *ptr, void (^block)(void *ptr))
Bounds	src/cpSweep1D.c	/^typedef struct Bounds {$/;"	s	file:
Bounds	src/cpSweep1D.c	/^} Bounds;$/;"	t	typeref:struct:Bounds	file:
Bounds::max	src/cpSweep1D.c	/^	cpFloat min, max;$/;"	m	struct:Bounds	file:	access:public
Bounds::min	src/cpSweep1D.c	/^	cpFloat min, max;$/;"	m	struct:Bounds	file:	access:public
BoundsOverlap	src/cpSweep1D.c	/^BoundsOverlap(Bounds a, Bounds b)$/;"	f	file:	signature:(Bounds a, Bounds b)
Bytes	include/chipmunk/chipmunk_types.h	/^			unsigned __int8 Bytes[4];$/;"	m	union:MSVC_EVIL_FLOAT_HACK	access:public
CHIPMUNK_HEADER	include/chipmunk/chipmunk.h	/^#define CHIPMUNK_HEADER$/;"	d
CHIPMUNK_UNSAFE_HEADER	include/chipmunk/chipmunk_unsafe.h	/^#define CHIPMUNK_UNSAFE_HEADER$/;"	d
CP_ALLOW_PRIVATE_ACCESS	include/chipmunk/chipmunk.h	/^	#define CP_ALLOW_PRIVATE_ACCESS /;"	d
CP_ALLOW_PRIVATE_ACCESS	include/chipmunk/chipmunk_private.h	/^#define CP_ALLOW_PRIVATE_ACCESS /;"	d
CP_ALL_LAYERS	include/chipmunk/chipmunk_types.h	/^	#define CP_ALL_LAYERS /;"	d
CP_ARBITER_GET_BODIES	include/chipmunk/cpArbiter.h	/^#define CP_ARBITER_GET_BODIES(/;"	d
CP_ARBITER_GET_SHAPES	include/chipmunk/cpArbiter.h	/^#define CP_ARBITER_GET_SHAPES(/;"	d
CP_BODY_FOREACH_ARBITER	include/chipmunk/chipmunk_private.h	/^#define CP_BODY_FOREACH_ARBITER(/;"	d
CP_BODY_FOREACH_COMPONENT	include/chipmunk/chipmunk_private.h	/^#define CP_BODY_FOREACH_COMPONENT(/;"	d
CP_BODY_FOREACH_CONSTRAINT	include/chipmunk/chipmunk_private.h	/^#define CP_BODY_FOREACH_CONSTRAINT(/;"	d
CP_BODY_FOREACH_SHAPE	include/chipmunk/chipmunk_private.h	/^#define CP_BODY_FOREACH_SHAPE(/;"	d
CP_BUFFER_BYTES	include/chipmunk/chipmunk.h	/^	#define CP_BUFFER_BYTES /;"	d
CP_CIRCLE_SHAPE	include/chipmunk/cpShape.h	/^	CP_CIRCLE_SHAPE,$/;"	e	enum:cpShapeType
CP_CONTACTS_BUFFER_SIZE	src/cpSpaceStep.c	/^#define CP_CONTACTS_BUFFER_SIZE /;"	d	file:
CP_CONVEX_HULL	include/chipmunk/chipmunk.h	/^#define CP_CONVEX_HULL(/;"	d
CP_DeclareShapeGetter	include/chipmunk/cpShape.h	/^#define CP_DeclareShapeGetter(/;"	d
CP_DefineArbiterStructGetter	include/chipmunk/cpArbiter.h	/^#define CP_DefineArbiterStructGetter(/;"	d
CP_DefineArbiterStructProperty	include/chipmunk/cpArbiter.h	/^#define CP_DefineArbiterStructProperty(/;"	d
CP_DefineArbiterStructSetter	include/chipmunk/cpArbiter.h	/^#define CP_DefineArbiterStructSetter(/;"	d
CP_DefineBodyStructGetter	include/chipmunk/cpBody.h	/^#define CP_DefineBodyStructGetter(/;"	d
CP_DefineBodyStructProperty	include/chipmunk/cpBody.h	/^#define CP_DefineBodyStructProperty(/;"	d
CP_DefineBodyStructSetter	include/chipmunk/cpBody.h	/^#define CP_DefineBodyStructSetter(/;"	d
CP_DefineClassGetter	include/chipmunk/constraints/util.h	/^#define CP_DefineClassGetter(/;"	d
CP_DefineClassGetter	src/constraints/cpDampedRotarySpring.c	/^CP_DefineClassGetter(cpDampedRotarySpring)$/;"	f
CP_DefineClassGetter	src/constraints/cpDampedSpring.c	/^CP_DefineClassGetter(cpDampedSpring)$/;"	f
CP_DefineClassGetter	src/constraints/cpGearJoint.c	/^CP_DefineClassGetter(cpGearJoint)$/;"	f
CP_DefineClassGetter	src/constraints/cpGrooveJoint.c	/^CP_DefineClassGetter(cpGrooveJoint)$/;"	f
CP_DefineClassGetter	src/constraints/cpPinJoint.c	/^CP_DefineClassGetter(cpPinJoint)$/;"	f
CP_DefineClassGetter	src/constraints/cpPivotJoint.c	/^CP_DefineClassGetter(cpPivotJoint)$/;"	f
CP_DefineClassGetter	src/constraints/cpRatchetJoint.c	/^CP_DefineClassGetter(cpRatchetJoint)$/;"	f
CP_DefineClassGetter	src/constraints/cpRotaryLimitJoint.c	/^CP_DefineClassGetter(cpRotaryLimitJoint)$/;"	f
CP_DefineClassGetter	src/constraints/cpSimpleMotor.c	/^CP_DefineClassGetter(cpSimpleMotor)$/;"	f
CP_DefineClassGetter	src/constraints/cpSlideJoint.c	/^CP_DefineClassGetter(cpSlideJoint)$/;"	f
CP_DefineConstraintGetter	include/chipmunk/constraints/cpConstraint.h	/^#define CP_DefineConstraintGetter(/;"	d
CP_DefineConstraintProperty	include/chipmunk/constraints/cpConstraint.h	/^#define CP_DefineConstraintProperty(/;"	d
CP_DefineConstraintSetter	include/chipmunk/constraints/cpConstraint.h	/^#define CP_DefineConstraintSetter(/;"	d
CP_DefineConstraintStructGetter	include/chipmunk/constraints/cpConstraint.h	/^#define CP_DefineConstraintStructGetter(/;"	d
CP_DefineConstraintStructProperty	include/chipmunk/constraints/cpConstraint.h	/^#define CP_DefineConstraintStructProperty(/;"	d
CP_DefineConstraintStructSetter	include/chipmunk/constraints/cpConstraint.h	/^#define CP_DefineConstraintStructSetter(/;"	d
CP_DefineShapeGetter	src/cpShape.c	/^#define CP_DefineShapeGetter(/;"	d	file:
CP_DefineShapeGetter	src/cpShape.c	/^CP_DefineShapeGetter(cpCircleShape, cpVect, c, Offset)$/;"	f
CP_DefineShapeGetter	src/cpShape.c	/^CP_DefineShapeGetter(cpSegmentShape, cpVect, a, A)$/;"	f
CP_DefineShapeStructGetter	include/chipmunk/cpShape.h	/^#define CP_DefineShapeStructGetter(/;"	d
CP_DefineShapeStructProperty	include/chipmunk/cpShape.h	/^#define CP_DefineShapeStructProperty(/;"	d
CP_DefineShapeStructSetter	include/chipmunk/cpShape.h	/^#define CP_DefineShapeStructSetter(/;"	d
CP_DefineSpaceStructGetter	include/chipmunk/cpSpace.h	/^#define CP_DefineSpaceStructGetter(/;"	d
CP_DefineSpaceStructProperty	include/chipmunk/cpSpace.h	/^#define CP_DefineSpaceStructProperty(/;"	d
CP_DefineSpaceStructSetter	include/chipmunk/cpSpace.h	/^#define CP_DefineSpaceStructSetter(/;"	d
CP_HASH_COEF	include/chipmunk/chipmunk_private.h	/^#define CP_HASH_COEF /;"	d
CP_HASH_PAIR	include/chipmunk/chipmunk_private.h	/^#define CP_HASH_PAIR(/;"	d
CP_MAX_CONTACTS_PER_ARBITER	include/chipmunk/cpArbiter.h	/^#define CP_MAX_CONTACTS_PER_ARBITER /;"	d
CP_NO_GROUP	include/chipmunk/chipmunk_types.h	/^	#define CP_NO_GROUP /;"	d
CP_NUM_SHAPES	include/chipmunk/cpShape.h	/^	CP_NUM_SHAPES$/;"	e	enum:cpShapeType
CP_POLY_SHAPE	include/chipmunk/cpShape.h	/^	CP_POLY_SHAPE,$/;"	e	enum:cpShapeType
CP_PRIVATE	include/chipmunk/chipmunk.h	/^	#define CP_PRIVATE(/;"	d
CP_PRIVATE	include/chipmunk/constraints/cpConstraint.h	/^	CP_PRIVATE(const cpConstraintClass *klass);$/;"	p	struct:cpConstraint	access:public	signature:(const cpConstraintClass *klass)
CP_PRIVATE	include/chipmunk/constraints/cpConstraint.h	/^	CP_PRIVATE(cpConstraint *next_a);$/;"	p	struct:cpConstraint	access:public	signature:(cpConstraint *next_a)
CP_PRIVATE	include/chipmunk/constraints/cpConstraint.h	/^	CP_PRIVATE(cpConstraint *next_b);$/;"	p	struct:cpConstraint	access:public	signature:(cpConstraint *next_b)
CP_PRIVATE	include/chipmunk/constraints/cpConstraint.h	/^	CP_PRIVATE(cpSpace *space);$/;"	p	struct:cpConstraint	access:public	signature:(cpSpace *space)
CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpArbiterState state);$/;"	p	struct:cpArbiter	access:public	signature:(cpArbiterState state)
CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpBody *body_a);$/;"	p	struct:cpArbiter	access:public	signature:(cpBody *body_a)
CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpBody *body_b);$/;"	p	struct:cpArbiter	access:public	signature:(cpBody *body_b)
CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpBool swappedColl);$/;"	p	struct:cpArbiter	access:public	signature:(cpBool swappedColl)
CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpCollisionHandler *handler);$/;"	p	struct:cpArbiter	access:public	signature:(cpCollisionHandler *handler)
CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpContact *contacts);$/;"	p	struct:cpArbiter	access:public	signature:(cpContact *contacts)
CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpShape *a);$/;"	p	struct:cpArbiter	access:public	signature:(cpShape *a)
CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpShape *b);$/;"	p	struct:cpArbiter	access:public	signature:(cpShape *b)
CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpTimestamp stamp);$/;"	p	struct:cpArbiter	access:public	signature:(cpTimestamp stamp)
CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(int numContacts);$/;"	p	struct:cpArbiter	access:public	signature:(int numContacts)
CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(struct cpArbiterThread thread_a);$/;"	p	struct:cpArbiter	access:public	signature:(struct cpArbiterThread thread_a)
CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(struct cpArbiterThread thread_b);$/;"	p	struct:cpArbiter	access:public	signature:(struct cpArbiterThread thread_b)
CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpArbiter *arbiterList);$/;"	p	struct:cpBody	access:public	signature:(cpArbiter *arbiterList)
CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpComponentNode node);$/;"	p	struct:cpBody	access:public	signature:(cpComponentNode node)
CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpConstraint *constraintList);$/;"	p	struct:cpBody	access:public	signature:(cpConstraint *constraintList)
CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpFloat w_bias);$/;"	p	struct:cpBody	access:public	signature:(cpFloat w_bias)
CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpShape *shapeList);$/;"	p	struct:cpBody	access:public	signature:(cpShape *shapeList)
CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpSpace *space);$/;"	p	struct:cpBody	access:public	signature:(cpSpace *space)
CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpVect v_bias);$/;"	p	struct:cpBody	access:public	signature:(cpVect v_bias)
CP_PRIVATE	include/chipmunk/cpShape.h	/^	CP_PRIVATE(const cpShapeClass *klass);$/;"	p	struct:cpShape	access:public	signature:(const cpShapeClass *klass)
CP_PRIVATE	include/chipmunk/cpShape.h	/^	CP_PRIVATE(cpHashValue hashid);$/;"	p	struct:cpShape	access:public	signature:(cpHashValue hashid)
CP_PRIVATE	include/chipmunk/cpShape.h	/^	CP_PRIVATE(cpShape *next);$/;"	p	struct:cpShape	access:public	signature:(cpShape *next)
CP_PRIVATE	include/chipmunk/cpShape.h	/^	CP_PRIVATE(cpShape *prev);$/;"	p	struct:cpShape	access:public	signature:(cpShape *prev)
CP_PRIVATE	include/chipmunk/cpShape.h	/^	CP_PRIVATE(cpSpace *space);$/;"	p	struct:cpShape	access:public	signature:(cpSpace *space)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *allocatedBuffers);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *allocatedBuffers)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *arbiters);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *arbiters)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *bodies);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *bodies)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *constraints);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *constraints)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *pooledArbiters);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *pooledArbiters)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *postStepCallbacks);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *postStepCallbacks)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *rousedBodies);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *rousedBodies)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *sleepingComponents);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *sleepingComponents)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpBody _staticBody);$/;"	p	struct:cpSpace	access:public	signature:(cpBody _staticBody)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpBool skipPostStep);$/;"	p	struct:cpSpace	access:public	signature:(cpBool skipPostStep)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpCollisionHandler defaultHandler);$/;"	p	struct:cpSpace	access:public	signature:(cpCollisionHandler defaultHandler)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpContactBufferHeader *contactBuffersHead);$/;"	p	struct:cpSpace	access:public	signature:(cpContactBufferHeader *contactBuffersHead)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpFloat curr_dt);$/;"	p	struct:cpSpace	access:public	signature:(cpFloat curr_dt)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpHashSet *cachedArbiters);$/;"	p	struct:cpSpace	access:public	signature:(cpHashSet *cachedArbiters)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpHashSet *collisionHandlers);$/;"	p	struct:cpSpace	access:public	signature:(cpHashSet *collisionHandlers)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpSpatialIndex *activeShapes);$/;"	p	struct:cpSpace	access:public	signature:(cpSpatialIndex *activeShapes)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpSpatialIndex *staticShapes);$/;"	p	struct:cpSpace	access:public	signature:(cpSpatialIndex *staticShapes)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpTimestamp stamp);$/;"	p	struct:cpSpace	access:public	signature:(cpTimestamp stamp)
CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(int locked);$/;"	p	struct:cpSpace	access:public	signature:(int locked)
CP_SEGMENT_SHAPE	include/chipmunk/cpShape.h	/^	CP_SEGMENT_SHAPE,$/;"	e	enum:cpShapeType
CP_USE_CGPOINTS	include/chipmunk/chipmunk_types.h	/^	#define CP_USE_CGPOINTS /;"	d
CP_USE_DOUBLES	include/chipmunk/chipmunk_types.h	/^		#define CP_USE_DOUBLES /;"	d
CP_USE_DOUBLES	include/chipmunk/chipmunk_types.h	/^	#define CP_USE_DOUBLES /;"	d
CP_VERSION_MAJOR	include/chipmunk/chipmunk.h	/^#define CP_VERSION_MAJOR /;"	d
CP_VERSION_MINOR	include/chipmunk/chipmunk.h	/^#define CP_VERSION_MINOR /;"	d
CP_VERSION_RELEASE	include/chipmunk/chipmunk.h	/^#define CP_VERSION_RELEASE /;"	d
ComponentActivate	src/cpSpaceComponent.c	/^ComponentActivate(cpBody *root)$/;"	f	file:	signature:(cpBody *root)
ComponentActive	src/cpSpaceComponent.c	/^ComponentActive(cpBody *root, cpFloat threshold)$/;"	f	file:	signature:(cpBody *root, cpFloat threshold)
ComponentAdd	src/cpSpaceComponent.c	/^ComponentAdd(cpBody *root, cpBody *body){$/;"	f	file:	signature:(cpBody *root, cpBody *body)
ComponentRoot	src/cpSpaceComponent.c	/^ComponentRoot(cpBody *body)$/;"	f	file:	signature:(cpBody *body)
FloodFillComponent	src/cpSpaceComponent.c	/^FloodFillComponent(cpBody *root, cpBody *body)$/;"	f	file:	signature:(cpBody *root, cpBody *body)
GetBB	src/cpBBTree.c	/^GetBB(cpBBTree *tree, void *obj)$/;"	f	file:	signature:(cpBBTree *tree, void *obj)
GetMasterTree	src/cpBBTree.c	/^GetMasterTree(cpBBTree *tree)$/;"	f	file:	signature:(cpBBTree *tree)
GetRootIfTree	src/cpBBTree.c	/^GetRootIfTree(cpSpatialIndex *index){$/;"	f	file:	signature:(cpSpatialIndex *index)
GetTree	src/cpBBTree.c	/^GetTree(cpSpatialIndex *index)$/;"	f	file:	signature:(cpSpatialIndex *index)
INFINITY	include/chipmunk/chipmunk_types.h	/^		#define INFINITY /;"	d
INFINITY_HACK	include/chipmunk/chipmunk_types.h	/^		static union MSVC_EVIL_FLOAT_HACK INFINITY_HACK = {{0x00, 0x00, 0x80, 0x7F}};$/;"	v	typeref:union:MSVC_EVIL_FLOAT_HACK
IncrementStamp	src/cpBBTree.c	/^IncrementStamp(cpBBTree *tree)$/;"	f	file:	signature:(cpBBTree *tree)
IteratorFunc	src/chipmunk.c	/^static void IteratorFunc(void *ptr, void (^block)(void *ptr)){block(ptr);}$/;"	f	file:	signature:(void *ptr, void (^block)(void *ptr))
Klass	src/cpBBTree.c	/^static inline cpSpatialIndexClass *Klass();$/;"	p	file:
Klass	src/cpBBTree.c	/^static inline cpSpatialIndexClass *Klass(){return &klass;}$/;"	f	file:
Klass	src/cpSpaceHash.c	/^static inline cpSpatialIndexClass *Klass();$/;"	p	file:
Klass	src/cpSpaceHash.c	/^static inline cpSpatialIndexClass *Klass(){return &klass;}$/;"	f	file:
Klass	src/cpSweep1D.c	/^static inline cpSpatialIndexClass *Klass();$/;"	p	file:
Klass	src/cpSweep1D.c	/^static inline cpSpatialIndexClass *Klass(){return &klass;}$/;"	f	file:
LeafAddPairs	src/cpBBTree.c	/^LeafAddPairs(Node *leaf, cpBBTree *tree)$/;"	f	file:	signature:(Node *leaf, cpBBTree *tree)
LeafNew	src/cpBBTree.c	/^LeafNew(cpBBTree *tree, void *obj, cpBB bb)$/;"	f	file:	signature:(cpBBTree *tree, void *obj, cpBB bb)
LeafUpdate	src/cpBBTree.c	/^LeafUpdate(Node *leaf, cpBBTree *tree)$/;"	f	file:	signature:(Node *leaf, cpBBTree *tree)
MAKE_PROPERTIES_REF	include/chipmunk/chipmunk_ffi.h	/^#define MAKE_PROPERTIES_REF(/;"	d
MAKE_REF	include/chipmunk/chipmunk_ffi.h	/^  #define MAKE_REF(/;"	d
MAKE_REF	include/chipmunk/chipmunk_ffi.h	/^ #define MAKE_REF(/;"	d
MSVC_EVIL_FLOAT_HACK	include/chipmunk/chipmunk_types.h	/^		union MSVC_EVIL_FLOAT_HACK$/;"	u
MSVC_EVIL_FLOAT_HACK::Bytes	include/chipmunk/chipmunk_types.h	/^			unsigned __int8 Bytes[4];$/;"	m	union:MSVC_EVIL_FLOAT_HACK	access:public
MSVC_EVIL_FLOAT_HACK::Value	include/chipmunk/chipmunk_types.h	/^			float Value;$/;"	m	union:MSVC_EVIL_FLOAT_HACK	access:public
M_E	include/chipmunk/chipmunk_types.h	/^	#define M_E /;"	d
M_PI	include/chipmunk/chipmunk_types.h	/^	#define M_PI /;"	d
MakeTableCell	src/cpSweep1D.c	/^MakeTableCell(cpSweep1D *sweep, void *obj)$/;"	f	file:	signature:(cpSweep1D *sweep, void *obj)
MarkContext	src/cpBBTree.c	/^typedef struct MarkContext {$/;"	s	file:
MarkContext	src/cpBBTree.c	/^} MarkContext;$/;"	t	typeref:struct:MarkContext	file:
MarkContext::data	src/cpBBTree.c	/^	void *data;$/;"	m	struct:MarkContext	file:	access:public
MarkContext::func	src/cpBBTree.c	/^	cpSpatialIndexQueryFunc func;$/;"	m	struct:MarkContext	file:	access:public
MarkContext::staticRoot	src/cpBBTree.c	/^	Node *staticRoot;$/;"	m	struct:MarkContext	file:	access:public
MarkContext::tree	src/cpBBTree.c	/^	cpBBTree *tree;$/;"	m	struct:MarkContext	file:	access:public
MarkLeaf	src/cpBBTree.c	/^MarkLeaf(Node *leaf, MarkContext *context)$/;"	f	file:	signature:(Node *leaf, MarkContext *context)
MarkLeafQuery	src/cpBBTree.c	/^MarkLeafQuery(Node *subtree, Node *leaf, cpBool left, MarkContext *context)$/;"	f	file:	signature:(Node *subtree, Node *leaf, cpBool left, MarkContext *context)
MarkSubtree	src/cpBBTree.c	/^MarkSubtree(Node *subtree, MarkContext *context)$/;"	f	file:	signature:(Node *subtree, MarkContext *context)
NearestPointQuery	src/cpSpaceQuery.c	/^NearestPointQuery(struct NearestPointQueryContext *context, cpShape *shape, void *data)$/;"	f	file:	signature:(struct NearestPointQueryContext *context, cpShape *shape, void *data)
NearestPointQueryContext	src/cpSpaceQuery.c	/^struct NearestPointQueryContext {$/;"	s	file:
NearestPointQueryContext::func	src/cpSpaceQuery.c	/^	cpSpaceNearestPointQueryFunc func;$/;"	m	struct:NearestPointQueryContext	file:	access:public
NearestPointQueryContext::group	src/cpSpaceQuery.c	/^	cpGroup group;$/;"	m	struct:NearestPointQueryContext	file:	access:public
NearestPointQueryContext::layers	src/cpSpaceQuery.c	/^	cpLayers layers;$/;"	m	struct:NearestPointQueryContext	file:	access:public
NearestPointQueryContext::maxDistance	src/cpSpaceQuery.c	/^	cpFloat maxDistance;$/;"	m	struct:NearestPointQueryContext	file:	access:public
NearestPointQueryContext::point	src/cpSpaceQuery.c	/^	cpVect point;$/;"	m	struct:NearestPointQueryContext	file:	access:public
NearestPointQueryIteratorFunc	src/chipmunk.c	/^static void NearestPointQueryIteratorFunc(cpShape *shape, cpFloat distance, cpVect point, cpSpaceNearestPointQueryBlock block){block(shape, distance, point);}$/;"	f	file:	signature:(cpShape *shape, cpFloat distance, cpVect point, cpSpaceNearestPointQueryBlock block)
NearestPointQueryNearest	src/cpSpaceQuery.c	/^NearestPointQueryNearest(struct NearestPointQueryContext *context, cpShape *shape, cpNearestPointQueryInfo *out)$/;"	f	file:	signature:(struct NearestPointQueryContext *context, cpShape *shape, cpNearestPointQueryInfo *out)
Node	src/cpBBTree.c	/^struct Node {$/;"	s	file:
Node	src/cpBBTree.c	/^typedef struct Node Node;$/;"	t	typeref:struct:Node	file:
Node::__anon2::__anon3::a	src/cpBBTree.c	/^		struct { Node *a, *b; } children;$/;"	m	struct:Node::__anon2::__anon3	file:	access:public
Node::__anon2::__anon3::b	src/cpBBTree.c	/^		struct { Node *a, *b; } children;$/;"	m	struct:Node::__anon2::__anon3	file:	access:public
Node::__anon2::__anon4::pairs	src/cpBBTree.c	/^			Pair *pairs;$/;"	m	struct:Node::__anon2::__anon4	file:	access:public
Node::__anon2::__anon4::stamp	src/cpBBTree.c	/^			cpTimestamp stamp;$/;"	m	struct:Node::__anon2::__anon4	file:	access:public
Node::__anon2::children	src/cpBBTree.c	/^		struct { Node *a, *b; } children;$/;"	m	union:Node::__anon2	typeref:struct:Node::__anon2::__anon3	file:	access:public
Node::__anon2::leaf	src/cpBBTree.c	/^		} leaf;$/;"	m	union:Node::__anon2	typeref:struct:Node::__anon2::__anon4	file:	access:public
Node::bb	src/cpBBTree.c	/^	cpBB bb;$/;"	m	struct:Node	file:	access:public
Node::node	src/cpBBTree.c	/^	} node;$/;"	m	struct:Node	typeref:union:Node::__anon2	file:	access:public
Node::obj	src/cpBBTree.c	/^	void *obj;$/;"	m	struct:Node	file:	access:public
Node::parent	src/cpBBTree.c	/^	Node *parent;$/;"	m	struct:Node	file:	access:public
NodeFromPool	src/cpBBTree.c	/^NodeFromPool(cpBBTree *tree)$/;"	f	file:	signature:(cpBBTree *tree)
NodeIsLeaf	src/cpBBTree.c	/^NodeIsLeaf(Node *node)$/;"	f	file:	signature:(Node *node)
NodeNew	src/cpBBTree.c	/^NodeNew(cpBBTree *tree, Node *a, Node *b)$/;"	f	file:	signature:(cpBBTree *tree, Node *a, Node *b)
NodeOther	src/cpBBTree.c	/^NodeOther(Node *node, Node *child)$/;"	f	file:	signature:(Node *node, Node *child)
NodeRecycle	src/cpBBTree.c	/^NodeRecycle(cpBBTree *tree, Node *node)$/;"	f	file:	signature:(cpBBTree *tree, Node *node)
NodeRender	src/cpBBTree.c	/^NodeRender(Node *node, int depth)$/;"	f	file:	signature:(Node *node, int depth)
NodeReplaceChild	src/cpBBTree.c	/^NodeReplaceChild(Node *parent, Node *child, Node *value, cpBBTree *tree)$/;"	f	file:	signature:(Node *parent, Node *child, Node *value, cpBBTree *tree)
NodeSetA	src/cpBBTree.c	/^NodeSetA(Node *node, Node *value)$/;"	f	file:	signature:(Node *node, Node *value)
NodeSetB	src/cpBBTree.c	/^NodeSetB(Node *node, Node *value)$/;"	f	file:	signature:(Node *node, Node *value)
PAIRS	src/cpBBTree.c	/^#define PAIRS /;"	d	file:
Pair	src/cpBBTree.c	/^struct Pair { Thread a, b; };$/;"	s	file:
Pair	src/cpBBTree.c	/^typedef struct Pair Pair;$/;"	t	typeref:struct:Pair	file:
Pair::a	src/cpBBTree.c	/^struct Pair { Thread a, b; };$/;"	m	struct:Pair	file:	access:public
Pair::b	src/cpBBTree.c	/^struct Pair { Thread a, b; };$/;"	m	struct:Pair	file:	access:public
PairFromPool	src/cpBBTree.c	/^PairFromPool(cpBBTree *tree)$/;"	f	file:	signature:(cpBBTree *tree)
PairInsert	src/cpBBTree.c	/^PairInsert(Node *a, Node *b, cpBBTree *tree)$/;"	f	file:	signature:(Node *a, Node *b, cpBBTree *tree)
PairRecycle	src/cpBBTree.c	/^PairRecycle(cpBBTree *tree, Pair *pair)$/;"	f	file:	signature:(cpBBTree *tree, Pair *pair)
PairsClear	src/cpBBTree.c	/^PairsClear(Node *leaf, cpBBTree *tree)$/;"	f	file:	signature:(Node *leaf, cpBBTree *tree)
PointQuery	src/cpSpaceQuery.c	/^PointQuery(struct PointQueryContext *context, cpShape *shape, void *data)$/;"	f	file:	signature:(struct PointQueryContext *context, cpShape *shape, void *data)
PointQueryContext	src/cpSpaceQuery.c	/^struct PointQueryContext {$/;"	s	file:
PointQueryContext::data	src/cpSpaceQuery.c	/^	void *data;$/;"	m	struct:PointQueryContext	file:	access:public
PointQueryContext::func	src/cpSpaceQuery.c	/^	cpSpacePointQueryFunc func;$/;"	m	struct:PointQueryContext	file:	access:public
PointQueryContext::group	src/cpSpaceQuery.c	/^	cpGroup group;$/;"	m	struct:PointQueryContext	file:	access:public
PointQueryContext::layers	src/cpSpaceQuery.c	/^	cpLayers layers;$/;"	m	struct:PointQueryContext	file:	access:public
PointQueryContext::point	src/cpSpaceQuery.c	/^	cpVect point;$/;"	m	struct:PointQueryContext	file:	access:public
PointQueryFirst	src/cpSpaceQuery.c	/^PointQueryFirst(cpShape *shape, cpShape **outShape)$/;"	f	file:	signature:(cpShape *shape, cpShape **outShape)
PostStepDoNothing	src/cpSpaceStep.c	/^static void PostStepDoNothing(cpSpace *space, void *obj, void *data){}$/;"	f	file:	signature:(cpSpace *space, void *obj, void *data)
QHullPartition	src/chipmunk.c	/^QHullPartition(cpVect *verts, int count, cpVect a, cpVect b, cpFloat tol)$/;"	f	file:	signature:(cpVect *verts, int count, cpVect a, cpVect b, cpFloat tol)
QHullReduce	src/chipmunk.c	/^QHullReduce(cpFloat tol, cpVect *verts, int count, cpVect a, cpVect pivot, cpVect b, cpVect *result)$/;"	f	file:	signature:(cpFloat tol, cpVect *verts, int count, cpVect a, cpVect pivot, cpVect b, cpVect *result)
ResizeTable	src/cpSweep1D.c	/^ResizeTable(cpSweep1D *sweep, int size)$/;"	f	file:	signature:(cpSweep1D *sweep, int size)
STAMP	src/cpBBTree.c	/^#define STAMP /;"	d	file:
STR	src/chipmunk.c	/^#define STR(/;"	d	file:
SWAP	src/chipmunk.c	/^#define SWAP(/;"	d	file:
SegmentQuery	src/cpSpaceQuery.c	/^SegmentQuery(struct SegmentQueryContext *context, cpShape *shape, void *data)$/;"	f	file:	signature:(struct SegmentQueryContext *context, cpShape *shape, void *data)
SegmentQueryContext	src/cpSpaceQuery.c	/^struct SegmentQueryContext {$/;"	s	file:
SegmentQueryContext::end	src/cpSpaceQuery.c	/^	cpVect start, end;$/;"	m	struct:SegmentQueryContext	file:	access:public
SegmentQueryContext::func	src/cpSpaceQuery.c	/^	cpSpaceSegmentQueryFunc func;$/;"	m	struct:SegmentQueryContext	file:	access:public
SegmentQueryContext::group	src/cpSpaceQuery.c	/^	cpGroup group;$/;"	m	struct:SegmentQueryContext	file:	access:public
SegmentQueryContext::layers	src/cpSpaceQuery.c	/^	cpLayers layers;$/;"	m	struct:SegmentQueryContext	file:	access:public
SegmentQueryContext::start	src/cpSpaceQuery.c	/^	cpVect start, end;$/;"	m	struct:SegmentQueryContext	file:	access:public
SegmentQueryFirst	src/cpSpaceQuery.c	/^SegmentQueryFirst(struct SegmentQueryContext *context, cpShape *shape, cpSegmentQueryInfo *out)$/;"	f	file:	signature:(struct SegmentQueryContext *context, cpShape *shape, cpSegmentQueryInfo *out)
SegmentQueryIteratorFunc	src/chipmunk.c	/^static void SegmentQueryIteratorFunc(cpShape *shape, cpFloat t, cpVect n, cpSpaceSegmentQueryBlock block){block(shape, t, n);}$/;"	f	file:	signature:(cpShape *shape, cpFloat t, cpVect n, cpSpaceSegmentQueryBlock block)
ShapeQuery	src/cpSpaceQuery.c	/^ShapeQuery(cpShape *a, cpShape *b, struct ShapeQueryContext *context)$/;"	f	file:	signature:(cpShape *a, cpShape *b, struct ShapeQueryContext *context)
ShapeQueryContext	src/cpSpaceQuery.c	/^struct ShapeQueryContext {$/;"	s	file:
ShapeQueryContext::anyCollision	src/cpSpaceQuery.c	/^	cpBool anyCollision;$/;"	m	struct:ShapeQueryContext	file:	access:public
ShapeQueryContext::data	src/cpSpaceQuery.c	/^	void *data;$/;"	m	struct:ShapeQueryContext	file:	access:public
ShapeQueryContext::func	src/cpSpaceQuery.c	/^	cpSpaceShapeQueryFunc func;$/;"	m	struct:ShapeQueryContext	file:	access:public
ShapeQueryIteratorFunc	src/chipmunk.c	/^static void ShapeQueryIteratorFunc(cpShape *shape, cpContactPointSet *points, cpSpaceShapeQueryBlock block){block(shape, points);}$/;"	f	file:	signature:(cpShape *shape, cpContactPointSet *points, cpSpaceShapeQueryBlock block)
SubtreeInsert	src/cpBBTree.c	/^SubtreeInsert(Node *subtree, Node *leaf, cpBBTree *tree)$/;"	f	file:	signature:(Node *subtree, Node *leaf, cpBBTree *tree)
SubtreeQuery	src/cpBBTree.c	/^SubtreeQuery(Node *subtree, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data)$/;"	f	file:	signature:(Node *subtree, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data)
SubtreeRecycle	src/cpBBTree.c	/^SubtreeRecycle(cpBBTree *tree, Node *node)$/;"	f	file:	signature:(cpBBTree *tree, Node *node)
SubtreeRemove	src/cpBBTree.c	/^SubtreeRemove(Node *subtree, Node *leaf, cpBBTree *tree)$/;"	f	file:	signature:(Node *subtree, Node *leaf, cpBBTree *tree)
SubtreeSegmentQuery	src/cpBBTree.c	/^SubtreeSegmentQuery(Node *subtree, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data)$/;"	f	file:	signature:(Node *subtree, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data)
TableCell	src/cpSweep1D.c	/^typedef struct TableCell {$/;"	s	file:
TableCell	src/cpSweep1D.c	/^} TableCell;$/;"	t	typeref:struct:TableCell	file:
TableCell::bounds	src/cpSweep1D.c	/^	Bounds bounds;$/;"	m	struct:TableCell	file:	access:public
TableCell::obj	src/cpSweep1D.c	/^	void *obj;$/;"	m	struct:TableCell	file:	access:public
TableSort	src/cpSweep1D.c	/^TableSort(TableCell *a, TableCell *b)$/;"	f	file:	signature:(TableCell *a, TableCell *b)
Thread	src/cpBBTree.c	/^typedef struct Thread {$/;"	s	file:
Thread	src/cpBBTree.c	/^} Thread;$/;"	t	typeref:struct:Thread	file:
Thread::leaf	src/cpBBTree.c	/^	Node *leaf;$/;"	m	struct:Thread	file:	access:public
Thread::next	src/cpBBTree.c	/^	Pair *next;$/;"	m	struct:Thread	file:	access:public
Thread::prev	src/cpBBTree.c	/^	Pair *prev;$/;"	m	struct:Thread	file:	access:public
ThreadUnlink	src/cpBBTree.c	/^ThreadUnlink(Thread thread)$/;"	f	file:	signature:(Thread thread)
Value	include/chipmunk/chipmunk_types.h	/^			float Value;$/;"	m	union:MSVC_EVIL_FLOAT_HACK	access:public
VoidQueryFunc	src/cpBBTree.c	/^static void VoidQueryFunc(void *obj1, void *obj2, void *data){}$/;"	f	file:	signature:(void *obj1, void *obj2, void *data)
XSTR	src/chipmunk.c	/^#define XSTR(/;"	d	file:
a	include/chipmunk/chipmunk_types.h	/^	cpFloat a, b, c, d;$/;"	m	struct:cpMat2x2	access:public
a	include/chipmunk/constraints/cpConstraint.h	/^	cpBody *a;$/;"	m	struct:cpConstraint	access:public
a	include/chipmunk/cpArbiter.h	/^	cpCollisionType a;$/;"	m	struct:cpCollisionHandler	access:public
a	include/chipmunk/cpBody.h	/^	cpFloat a;$/;"	m	struct:cpBody	access:public
a	include/chipmunk/cpShape.h	/^	cpVect a, b, n;$/;"	m	struct:cpSegmentShape	access:public
a	src/cpBBTree.c	/^		struct { Node *a, *b; } children;$/;"	m	struct:Node::__anon2::__anon3	file:	access:public
a	src/cpBBTree.c	/^struct Pair { Thread a, b; };$/;"	m	struct:Pair	file:	access:public
a_tangent	include/chipmunk/cpShape.h	/^	cpVect a_tangent, b_tangent;$/;"	m	struct:cpSegmentShape	access:public
activateTouchingHelper	src/cpSpaceComponent.c	/^activateTouchingHelper(cpShape *shape, cpContactPointSet *points, cpShape *other){$/;"	f	file:	signature:(cpShape *shape, cpContactPointSet *points, cpShape *other)
allocatedBuffers	src/cpBBTree.c	/^	cpArray *allocatedBuffers;$/;"	m	struct:cpBBTree	file:	access:public
allocatedBuffers	src/cpHashSet.c	/^	cpArray *allocatedBuffers;$/;"	m	struct:cpHashSet	file:	access:public
allocatedBuffers	src/cpSpaceHash.c	/^	cpArray *allocatedBuffers;$/;"	m	struct:cpSpaceHash	file:	access:public
alwaysCollide	src/cpSpace.c	/^static cpBool alwaysCollide(cpArbiter *arb, cpSpace *space, void *data){return 1;}$/;"	f	file:	signature:(cpArbiter *arb, cpSpace *space, void *data)
anchr1	include/chipmunk/constraints/cpDampedSpring.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpDampedSpring	access:public
anchr1	include/chipmunk/constraints/cpPinJoint.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpPinJoint	access:public
anchr1	include/chipmunk/constraints/cpPivotJoint.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpPivotJoint	access:public
anchr1	include/chipmunk/constraints/cpSlideJoint.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpSlideJoint	access:public
anchr2	include/chipmunk/constraints/cpDampedSpring.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpDampedSpring	access:public
anchr2	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect  anchr2;$/;"	m	struct:cpGrooveJoint	access:public
anchr2	include/chipmunk/constraints/cpPinJoint.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpPinJoint	access:public
anchr2	include/chipmunk/constraints/cpPivotJoint.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpPivotJoint	access:public
anchr2	include/chipmunk/constraints/cpSlideJoint.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpSlideJoint	access:public
angle	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpFloat angle, phase, ratchet;$/;"	m	struct:cpRatchetJoint	access:public
anyCollision	src/cpSpaceQuery.c	/^	cpBool anyCollision;$/;"	m	struct:ShapeQueryContext	file:	access:public
applyCachedImpulse	include/chipmunk/constraints/cpConstraint.h	/^	cpConstraintApplyCachedImpulseImpl applyCachedImpulse;$/;"	m	struct:cpConstraintClass	access:public
applyCachedImpulse	src/constraints/cpDampedRotarySpring.c	/^static void applyCachedImpulse(cpDampedRotarySpring *spring, cpFloat dt_coef){}$/;"	f	file:	signature:(cpDampedRotarySpring *spring, cpFloat dt_coef)
applyCachedImpulse	src/constraints/cpDampedSpring.c	/^static void applyCachedImpulse(cpDampedSpring *spring, cpFloat dt_coef){}$/;"	f	file:	signature:(cpDampedSpring *spring, cpFloat dt_coef)
applyCachedImpulse	src/constraints/cpGearJoint.c	/^applyCachedImpulse(cpGearJoint *joint, cpFloat dt_coef)$/;"	f	file:	signature:(cpGearJoint *joint, cpFloat dt_coef)
applyCachedImpulse	src/constraints/cpGrooveJoint.c	/^applyCachedImpulse(cpGrooveJoint *joint, cpFloat dt_coef)$/;"	f	file:	signature:(cpGrooveJoint *joint, cpFloat dt_coef)
applyCachedImpulse	src/constraints/cpPinJoint.c	/^applyCachedImpulse(cpPinJoint *joint, cpFloat dt_coef)$/;"	f	file:	signature:(cpPinJoint *joint, cpFloat dt_coef)
applyCachedImpulse	src/constraints/cpPivotJoint.c	/^applyCachedImpulse(cpPivotJoint *joint, cpFloat dt_coef)$/;"	f	file:	signature:(cpPivotJoint *joint, cpFloat dt_coef)
applyCachedImpulse	src/constraints/cpRatchetJoint.c	/^applyCachedImpulse(cpRatchetJoint *joint, cpFloat dt_coef)$/;"	f	file:	signature:(cpRatchetJoint *joint, cpFloat dt_coef)
applyCachedImpulse	src/constraints/cpRotaryLimitJoint.c	/^applyCachedImpulse(cpRotaryLimitJoint *joint, cpFloat dt_coef)$/;"	f	file:	signature:(cpRotaryLimitJoint *joint, cpFloat dt_coef)
applyCachedImpulse	src/constraints/cpSimpleMotor.c	/^applyCachedImpulse(cpSimpleMotor *joint, cpFloat dt_coef)$/;"	f	file:	signature:(cpSimpleMotor *joint, cpFloat dt_coef)
applyCachedImpulse	src/constraints/cpSlideJoint.c	/^applyCachedImpulse(cpSlideJoint *joint, cpFloat dt_coef)$/;"	f	file:	signature:(cpSlideJoint *joint, cpFloat dt_coef)
applyImpulse	include/chipmunk/constraints/cpConstraint.h	/^	cpConstraintApplyImpulseImpl applyImpulse;$/;"	m	struct:cpConstraintClass	access:public
applyImpulse	src/constraints/cpDampedRotarySpring.c	/^applyImpulse(cpDampedRotarySpring *spring, cpFloat dt)$/;"	f	file:	signature:(cpDampedRotarySpring *spring, cpFloat dt)
applyImpulse	src/constraints/cpDampedSpring.c	/^applyImpulse(cpDampedSpring *spring, cpFloat dt)$/;"	f	file:	signature:(cpDampedSpring *spring, cpFloat dt)
applyImpulse	src/constraints/cpGearJoint.c	/^applyImpulse(cpGearJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpGearJoint *joint, cpFloat dt)
applyImpulse	src/constraints/cpGrooveJoint.c	/^applyImpulse(cpGrooveJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpGrooveJoint *joint, cpFloat dt)
applyImpulse	src/constraints/cpPinJoint.c	/^applyImpulse(cpPinJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpPinJoint *joint, cpFloat dt)
applyImpulse	src/constraints/cpPivotJoint.c	/^applyImpulse(cpPivotJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpPivotJoint *joint, cpFloat dt)
applyImpulse	src/constraints/cpRatchetJoint.c	/^applyImpulse(cpRatchetJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpRatchetJoint *joint, cpFloat dt)
applyImpulse	src/constraints/cpRotaryLimitJoint.c	/^applyImpulse(cpRotaryLimitJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpRotaryLimitJoint *joint, cpFloat dt)
applyImpulse	src/constraints/cpSimpleMotor.c	/^applyImpulse(cpSimpleMotor *joint, cpFloat dt)$/;"	f	file:	signature:(cpSimpleMotor *joint, cpFloat dt)
applyImpulse	src/constraints/cpSlideJoint.c	/^applyImpulse(cpSlideJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpSlideJoint *joint, cpFloat dt)
apply_bias_impulse	include/chipmunk/constraints/util.h	/^apply_bias_impulse(cpBody *body, cpVect j, cpVect r)$/;"	f	signature:(cpBody *body, cpVect j, cpVect r)
apply_bias_impulses	include/chipmunk/constraints/util.h	/^apply_bias_impulses(cpBody *a , cpBody *b, cpVect r1, cpVect r2, cpVect j)$/;"	f	signature:(cpBody *a , cpBody *b, cpVect r1, cpVect r2, cpVect j)
apply_impulse	include/chipmunk/constraints/util.h	/^apply_impulse(cpBody *body, cpVect j, cpVect r){$/;"	f	signature:(cpBody *body, cpVect j, cpVect r)
apply_impulses	include/chipmunk/constraints/util.h	/^apply_impulses(cpBody *a , cpBody *b, cpVect r1, cpVect r2, cpVect j)$/;"	f	signature:(cpBody *a , cpBody *b, cpVect r1, cpVect r2, cpVect j)
arbiterFilterContext	src/cpSpace.c	/^struct arbiterFilterContext {$/;"	s	file:
arbiterFilterContext::body	src/cpSpace.c	/^	cpBody *body;$/;"	m	struct:arbiterFilterContext	file:	access:public
arbiterFilterContext::shape	src/cpSpace.c	/^	cpShape *shape;$/;"	m	struct:arbiterFilterContext	file:	access:public
arbiterFilterContext::space	src/cpSpace.c	/^	cpSpace *space;$/;"	m	struct:arbiterFilterContext	file:	access:public
arbiterSetEql	src/cpSpace.c	/^arbiterSetEql(cpShape **shapes, cpArbiter *arb)$/;"	f	file:	signature:(cpShape **shapes, cpArbiter *arb)
arr	include/chipmunk/chipmunk_private.h	/^	void **arr;$/;"	m	struct:cpArray	access:public
b	include/chipmunk/chipmunk_types.h	/^	cpFloat a, b, c, d;$/;"	m	struct:cpMat2x2	access:public
b	include/chipmunk/constraints/cpConstraint.h	/^	cpBody *b;$/;"	m	struct:cpConstraint	access:public
b	include/chipmunk/cpArbiter.h	/^	cpCollisionType b;$/;"	m	struct:cpCollisionHandler	access:public
b	include/chipmunk/cpBB.h	/^	cpFloat l, b, r ,t;$/;"	m	struct:cpBB	access:public
b	include/chipmunk/cpShape.h	/^	cpVect a, b, n;$/;"	m	struct:cpSegmentShape	access:public
b	src/cpBBTree.c	/^		struct { Node *a, *b; } children;$/;"	m	struct:Node::__anon2::__anon3	file:	access:public
b	src/cpBBTree.c	/^struct Pair { Thread a, b; };$/;"	m	struct:Pair	file:	access:public
b_tangent	include/chipmunk/cpShape.h	/^	cpVect a_tangent, b_tangent;$/;"	m	struct:cpSegmentShape	access:public
bb	include/chipmunk/cpShape.h	/^	cpBB bb;$/;"	m	struct:cpShape	access:public
bb	src/cpBBTree.c	/^	cpBB bb;$/;"	m	struct:Node	file:	access:public
bb	src/cpSpaceQuery.c	/^	cpBB bb;$/;"	m	struct:BBQueryContext	file:	access:public
bbfunc	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexBBFunc bbfunc;$/;"	m	struct:cpSpatialIndex	access:public
bbfunc	src/cpSpatialIndex.c	/^	cpSpatialIndexBBFunc bbfunc;$/;"	m	struct:dynamicToStaticContext	file:	access:public
begin	include/chipmunk/cpArbiter.h	/^	cpCollisionBeginFunc begin;$/;"	m	struct:cpCollisionHandler	access:public
bias	include/chipmunk/chipmunk_private.h	/^	cpFloat bias;$/;"	m	struct:cpContact	access:public
bias	include/chipmunk/constraints/cpGearJoint.h	/^	cpFloat bias;$/;"	m	struct:cpGearJoint	access:public
bias	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect bias;$/;"	m	struct:cpGrooveJoint	access:public
bias	include/chipmunk/constraints/cpPinJoint.h	/^	cpFloat bias;$/;"	m	struct:cpPinJoint	access:public
bias	include/chipmunk/constraints/cpPivotJoint.h	/^	cpVect bias;$/;"	m	struct:cpPivotJoint	access:public
bias	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpFloat bias;$/;"	m	struct:cpRatchetJoint	access:public
bias	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^	cpFloat bias;$/;"	m	struct:cpRotaryLimitJoint	access:public
bias	include/chipmunk/constraints/cpSlideJoint.h	/^	cpFloat bias;$/;"	m	struct:cpSlideJoint	access:public
bias_coef	include/chipmunk/constraints/util.h	/^bias_coef(cpFloat errorBias, cpFloat dt)$/;"	f	signature:(cpFloat errorBias, cpFloat dt)
body	include/chipmunk/cpShape.h	/^	cpBody *body;$/;"	m	struct:cpShape	access:public
body	src/cpSpace.c	/^	cpBody *body;$/;"	m	struct:arbiterFilterContext	file:	access:public
bounce	include/chipmunk/chipmunk_private.h	/^	cpFloat nMass, tMass, bounce;$/;"	m	struct:cpContact	access:public
bounds	src/cpSweep1D.c	/^	Bounds bounds;$/;"	m	struct:TableCell	file:	access:public
builtinCollisionFuncs	src/cpCollision.c	/^static const collisionFunc builtinCollisionFuncs[9] = {$/;"	v	file:
c	include/chipmunk/chipmunk_types.h	/^	cpFloat a, b, c, d;$/;"	m	struct:cpMat2x2	access:public
c	include/chipmunk/cpShape.h	/^	cpVect c, tc;$/;"	m	struct:cpCircleShape	access:public
cacheData	include/chipmunk/cpShape.h	/^	cpShapeCacheDataImpl cacheData;$/;"	m	struct:cpShapeClass	access:public
cachedArbitersFilter	src/cpSpace.c	/^cachedArbitersFilter(cpArbiter *arb, struct arbiterFilterContext *context)$/;"	f	file:	signature:(cpArbiter *arb, struct arbiterFilterContext *context)
celldim	src/cpSpaceHash.c	/^	cpFloat celldim;$/;"	m	struct:cpSpaceHash	file:	access:public
children	src/cpBBTree.c	/^		struct { Node *a, *b; } children;$/;"	m	union:Node::__anon2	typeref:struct:Node::__anon2::__anon3	file:	access:public
circle2circle	src/cpCollision.c	/^circle2circle(const cpShape *shape1, const cpShape *shape2, cpContact *arr)$/;"	f	file:	signature:(const cpShape *shape1, const cpShape *shape2, cpContact *arr)
circle2circleQuery	src/cpCollision.c	/^circle2circleQuery(const cpVect p1, const cpVect p2, const cpFloat r1, const cpFloat r2, cpContact *con)$/;"	f	file:	signature:(const cpVect p1, const cpVect p2, const cpFloat r1, const cpFloat r2, cpContact *con)
circle2poly	src/cpCollision.c	/^circle2poly(const cpShape *shape1, const cpShape *shape2, cpContact *con)$/;"	f	file:	signature:(const cpShape *shape1, const cpShape *shape2, cpContact *con)
circle2segment	src/cpCollision.c	/^circle2segment(const cpCircleShape *circleShape, const cpSegmentShape *segmentShape, cpContact *con)$/;"	f	file:	signature:(const cpCircleShape *circleShape, const cpSegmentShape *segmentShape, cpContact *con)
circleSegmentQuery	src/cpShape.c	/^circleSegmentQuery(cpShape *shape, cpVect center, cpFloat r, cpVect a, cpVect b, cpSegmentQueryInfo *info)$/;"	f	file:	signature:(cpShape *shape, cpVect center, cpFloat r, cpVect a, cpVect b, cpSegmentQueryInfo *info)
clamp	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpFloat clamp;$/;"	m	struct:cpGrooveJoint	access:public
clearTable	src/cpSpaceHash.c	/^clearTable(cpSpaceHash *hash)$/;"	f	file:	signature:(cpSpaceHash *hash)
clearTableCell	src/cpSpaceHash.c	/^clearTableCell(cpSpaceHash *hash, int idx)$/;"	f	file:	signature:(cpSpaceHash *hash, int idx)
colfuncs	src/cpCollision.c	/^static const collisionFunc *colfuncs = builtinCollisionFuncs;$/;"	v	file:
collisionBias	include/chipmunk/cpSpace.h	/^	cpFloat collisionBias;$/;"	m	struct:cpSpace	access:public
collisionFunc	src/cpCollision.c	/^typedef int (*collisionFunc)(const cpShape *, const cpShape *, cpContact *);$/;"	t	file:
collisionPersistence	include/chipmunk/cpSpace.h	/^	cpTimestamp collisionPersistence;$/;"	m	struct:cpSpace	access:public
collisionSlop	include/chipmunk/cpSpace.h	/^	cpFloat collisionSlop;$/;"	m	struct:cpSpace	access:public
collision_type	include/chipmunk/cpShape.h	/^	cpCollisionType collision_type;$/;"	m	struct:cpShape	access:public
constraint	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpConstraint constraint;$/;"	m	struct:cpDampedRotarySpring	access:public
constraint	include/chipmunk/constraints/cpDampedSpring.h	/^	cpConstraint constraint;$/;"	m	struct:cpDampedSpring	access:public
constraint	include/chipmunk/constraints/cpGearJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpGearJoint	access:public
constraint	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpGrooveJoint	access:public
constraint	include/chipmunk/constraints/cpPinJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpPinJoint	access:public
constraint	include/chipmunk/constraints/cpPivotJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpPivotJoint	access:public
constraint	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpRatchetJoint	access:public
constraint	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpRotaryLimitJoint	access:public
constraint	include/chipmunk/constraints/cpSimpleMotor.h	/^	cpConstraint constraint;$/;"	m	struct:cpSimpleMotor	access:public
constraint	include/chipmunk/constraints/cpSlideJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpSlideJoint	access:public
contacts	src/cpSpaceStep.c	/^	cpContact contacts[CP_CONTACTS_BUFFER_SIZE];$/;"	m	struct:cpContactBuffer	file:	access:public
contains	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexContainsImpl contains;$/;"	m	struct:cpSpatialIndexClass	access:public
containsHandle	src/cpSpaceHash.c	/^containsHandle(cpSpaceHashBin *bin, cpHandle *hand)$/;"	f	file:	signature:(cpSpaceHashBin *bin, cpHandle *hand)
copyShapes	src/cpSpace.c	/^copyShapes(cpShape *shape, cpSpatialIndex *index)$/;"	f	file:	signature:(cpShape *shape, cpSpatialIndex *index)
count	include/chipmunk/cpArbiter.h	/^	int count;$/;"	m	struct:cpContactPointSet	access:public
count	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexCountImpl count;$/;"	m	struct:cpSpatialIndexClass	access:public
cpArbiter	include/chipmunk/chipmunk.h	/^typedef struct cpArbiter cpArbiter;$/;"	t	typeref:struct:cpArbiter
cpArbiter	include/chipmunk/cpArbiter.h	/^struct cpArbiter {$/;"	s
cpArbiter::CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpArbiterState state);$/;"	p	struct:cpArbiter	access:public	signature:(cpArbiterState state)
cpArbiter::CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpBody *body_a);$/;"	p	struct:cpArbiter	access:public	signature:(cpBody *body_a)
cpArbiter::CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpBody *body_b);$/;"	p	struct:cpArbiter	access:public	signature:(cpBody *body_b)
cpArbiter::CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpBool swappedColl);$/;"	p	struct:cpArbiter	access:public	signature:(cpBool swappedColl)
cpArbiter::CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpCollisionHandler *handler);$/;"	p	struct:cpArbiter	access:public	signature:(cpCollisionHandler *handler)
cpArbiter::CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpContact *contacts);$/;"	p	struct:cpArbiter	access:public	signature:(cpContact *contacts)
cpArbiter::CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpShape *a);$/;"	p	struct:cpArbiter	access:public	signature:(cpShape *a)
cpArbiter::CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpShape *b);$/;"	p	struct:cpArbiter	access:public	signature:(cpShape *b)
cpArbiter::CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(cpTimestamp stamp);$/;"	p	struct:cpArbiter	access:public	signature:(cpTimestamp stamp)
cpArbiter::CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(int numContacts);$/;"	p	struct:cpArbiter	access:public	signature:(int numContacts)
cpArbiter::CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(struct cpArbiterThread thread_a);$/;"	p	struct:cpArbiter	access:public	signature:(struct cpArbiterThread thread_a)
cpArbiter::CP_PRIVATE	include/chipmunk/cpArbiter.h	/^	CP_PRIVATE(struct cpArbiterThread thread_b);$/;"	p	struct:cpArbiter	access:public	signature:(struct cpArbiterThread thread_b)
cpArbiter::data	include/chipmunk/cpArbiter.h	/^	cpDataPointer data;$/;"	m	struct:cpArbiter	access:public
cpArbiter::e	include/chipmunk/cpArbiter.h	/^	cpFloat e;$/;"	m	struct:cpArbiter	access:public
cpArbiter::surface_vr	include/chipmunk/cpArbiter.h	/^	cpVect surface_vr;$/;"	m	struct:cpArbiter	access:public
cpArbiter::u	include/chipmunk/cpArbiter.h	/^	cpFloat u;$/;"	m	struct:cpArbiter	access:public
cpArbiterApplyCachedImpulse	include/chipmunk/chipmunk_private.h	/^void cpArbiterApplyCachedImpulse(cpArbiter *arb, cpFloat dt_coef);$/;"	p	signature:(cpArbiter *arb, cpFloat dt_coef)
cpArbiterApplyCachedImpulse	src/cpArbiter.c	/^cpArbiterApplyCachedImpulse(cpArbiter *arb, cpFloat dt_coef)$/;"	f	signature:(cpArbiter *arb, cpFloat dt_coef)
cpArbiterApplyImpulse	include/chipmunk/chipmunk_private.h	/^void cpArbiterApplyImpulse(cpArbiter *arb);$/;"	p	signature:(cpArbiter *arb)
cpArbiterApplyImpulse	src/cpArbiter.c	/^cpArbiterApplyImpulse(cpArbiter *arb)$/;"	f	signature:(cpArbiter *arb)
cpArbiterCallSeparate	include/chipmunk/chipmunk_private.h	/^cpArbiterCallSeparate(cpArbiter *arb, cpSpace *space)$/;"	f	signature:(cpArbiter *arb, cpSpace *space)
cpArbiterGetBodies	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpArbiterGetBodies);$/;"	v
cpArbiterGetBodies	include/chipmunk/cpArbiter.h	/^static inline void cpArbiterGetBodies(const cpArbiter *arb, cpBody **a, cpBody **b)$/;"	f	signature:(const cpArbiter *arb, cpBody **a, cpBody **b)
cpArbiterGetContactPointSet	include/chipmunk/cpArbiter.h	/^cpContactPointSet cpArbiterGetContactPointSet(const cpArbiter *arb);$/;"	p	signature:(const cpArbiter *arb)
cpArbiterGetContactPointSet	src/cpArbiter.c	/^cpArbiterGetContactPointSet(const cpArbiter *arb)$/;"	f	signature:(const cpArbiter *arb)
cpArbiterGetCount	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpArbiterGetCount);$/;"	v
cpArbiterGetCount	include/chipmunk/cpArbiter.h	/^int cpArbiterGetCount(const cpArbiter *arb);$/;"	p	signature:(const cpArbiter *arb)
cpArbiterGetCount	src/cpArbiter.c	/^int cpArbiterGetCount(const cpArbiter *arb)$/;"	f	signature:(const cpArbiter *arb)
cpArbiterGetDepth	include/chipmunk/cpArbiter.h	/^cpFloat cpArbiterGetDepth(const cpArbiter *arb, int i);$/;"	p	signature:(const cpArbiter *arb, int i)
cpArbiterGetDepth	src/cpArbiter.c	/^cpArbiterGetDepth(const cpArbiter *arb, int i)$/;"	f	signature:(const cpArbiter *arb, int i)
cpArbiterGetNormal	include/chipmunk/cpArbiter.h	/^cpVect cpArbiterGetNormal(const cpArbiter *arb, int i);$/;"	p	signature:(const cpArbiter *arb, int i)
cpArbiterGetNormal	src/cpArbiter.c	/^cpArbiterGetNormal(const cpArbiter *arb, int i)$/;"	f	signature:(const cpArbiter *arb, int i)
cpArbiterGetPoint	include/chipmunk/cpArbiter.h	/^cpVect cpArbiterGetPoint(const cpArbiter *arb, int i);$/;"	p	signature:(const cpArbiter *arb, int i)
cpArbiterGetPoint	src/cpArbiter.c	/^cpArbiterGetPoint(const cpArbiter *arb, int i)$/;"	f	signature:(const cpArbiter *arb, int i)
cpArbiterGetShapes	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpArbiterGetShapes);$/;"	v
cpArbiterGetShapes	include/chipmunk/cpArbiter.h	/^static inline void cpArbiterGetShapes(const cpArbiter *arb, cpShape **a, cpShape **b)$/;"	f	signature:(const cpArbiter *arb, cpShape **a, cpShape **b)
cpArbiterIgnore	include/chipmunk/cpArbiter.h	/^void cpArbiterIgnore(cpArbiter *arb);$/;"	p	signature:(cpArbiter *arb)
cpArbiterIgnore	src/cpArbiter.c	/^cpArbiterIgnore(cpArbiter *arb)$/;"	f	signature:(cpArbiter *arb)
cpArbiterInit	include/chipmunk/chipmunk_private.h	/^cpArbiter* cpArbiterInit(cpArbiter *arb, cpShape *a, cpShape *b);$/;"	p	signature:(cpArbiter *arb, cpShape *a, cpShape *b)
cpArbiterInit	src/cpArbiter.c	/^cpArbiterInit(cpArbiter *arb, cpShape *a, cpShape *b)$/;"	f	signature:(cpArbiter *arb, cpShape *a, cpShape *b)
cpArbiterIsFirstContact	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpArbiterIsFirstContact);$/;"	v
cpArbiterIsFirstContact	include/chipmunk/cpArbiter.h	/^cpBool cpArbiterIsFirstContact(const cpArbiter *arb);$/;"	p	signature:(const cpArbiter *arb)
cpArbiterIsFirstContact	src/cpArbiter.c	/^cpBool cpArbiterIsFirstContact(const cpArbiter *arb)$/;"	f	signature:(const cpArbiter *arb)
cpArbiterNext	include/chipmunk/chipmunk_private.h	/^cpArbiterNext(cpArbiter *node, cpBody *body)$/;"	f	signature:(cpArbiter *node, cpBody *body)
cpArbiterPreStep	include/chipmunk/chipmunk_private.h	/^void cpArbiterPreStep(cpArbiter *arb, cpFloat dt, cpFloat bias, cpFloat slop);$/;"	p	signature:(cpArbiter *arb, cpFloat dt, cpFloat bias, cpFloat slop)
cpArbiterPreStep	src/cpArbiter.c	/^cpArbiterPreStep(cpArbiter *arb, cpFloat dt, cpFloat slop, cpFloat bias)$/;"	f	signature:(cpArbiter *arb, cpFloat dt, cpFloat slop, cpFloat bias)
cpArbiterState	include/chipmunk/cpArbiter.h	/^typedef enum cpArbiterState {$/;"	g
cpArbiterState	include/chipmunk/cpArbiter.h	/^} cpArbiterState;$/;"	t	typeref:enum:cpArbiterState
cpArbiterStateCached	include/chipmunk/cpArbiter.h	/^	cpArbiterStateCached,$/;"	e	enum:cpArbiterState
cpArbiterStateFirstColl	include/chipmunk/cpArbiter.h	/^	cpArbiterStateFirstColl,$/;"	e	enum:cpArbiterState
cpArbiterStateIgnore	include/chipmunk/cpArbiter.h	/^	cpArbiterStateIgnore,$/;"	e	enum:cpArbiterState
cpArbiterStateNormal	include/chipmunk/cpArbiter.h	/^	cpArbiterStateNormal,$/;"	e	enum:cpArbiterState
cpArbiterThread	include/chipmunk/cpArbiter.h	/^struct cpArbiterThread {$/;"	s
cpArbiterThread::next	include/chipmunk/cpArbiter.h	/^	struct cpArbiter *next, *prev;$/;"	m	struct:cpArbiterThread	typeref:struct:cpArbiterThread::cpArbiter	access:public
cpArbiterThread::prev	include/chipmunk/cpArbiter.h	/^	struct cpArbiter *next, *prev;$/;"	m	struct:cpArbiterThread	typeref:struct:cpArbiterThread::	access:public
cpArbiterThreadForBody	include/chipmunk/chipmunk_private.h	/^cpArbiterThreadForBody(cpArbiter *arb, cpBody *body)$/;"	f	signature:(cpArbiter *arb, cpBody *body)
cpArbiterTotalImpulse	include/chipmunk/cpArbiter.h	/^cpVect cpArbiterTotalImpulse(const cpArbiter *arb);$/;"	p	signature:(const cpArbiter *arb)
cpArbiterTotalImpulse	src/cpArbiter.c	/^cpArbiterTotalImpulse(const cpArbiter *arb)$/;"	f	signature:(const cpArbiter *arb)
cpArbiterTotalImpulseWithFriction	include/chipmunk/cpArbiter.h	/^cpVect cpArbiterTotalImpulseWithFriction(const cpArbiter *arb);$/;"	p	signature:(const cpArbiter *arb)
cpArbiterTotalImpulseWithFriction	src/cpArbiter.c	/^cpArbiterTotalImpulseWithFriction(const cpArbiter *arb)$/;"	f	signature:(const cpArbiter *arb)
cpArbiterTotalKE	include/chipmunk/cpArbiter.h	/^cpFloat cpArbiterTotalKE(const cpArbiter *arb);$/;"	p	signature:(const cpArbiter *arb)
cpArbiterTotalKE	src/cpArbiter.c	/^cpArbiterTotalKE(const cpArbiter *arb)$/;"	f	signature:(const cpArbiter *arb)
cpArbiterUnthread	include/chipmunk/chipmunk_private.h	/^void cpArbiterUnthread(cpArbiter *arb);$/;"	p	signature:(cpArbiter *arb)
cpArbiterUnthread	src/cpArbiter.c	/^cpArbiterUnthread(cpArbiter *arb)$/;"	f	signature:(cpArbiter *arb)
cpArbiterUpdate	include/chipmunk/chipmunk_private.h	/^void cpArbiterUpdate(cpArbiter *arb, cpContact *contacts, int numContacts, struct cpCollisionHandler *handler, cpShape *a, cpShape *b);$/;"	p	signature:(cpArbiter *arb, cpContact *contacts, int numContacts, struct cpCollisionHandler *handler, cpShape *a, cpShape *b)
cpArbiterUpdate	src/cpArbiter.c	/^cpArbiterUpdate(cpArbiter *arb, cpContact *contacts, int numContacts, cpCollisionHandler *handler, cpShape *a, cpShape *b)$/;"	f	signature:(cpArbiter *arb, cpContact *contacts, int numContacts, cpCollisionHandler *handler, cpShape *a, cpShape *b)
cpAreaForCircle	include/chipmunk/chipmunk.h	/^cpFloat cpAreaForCircle(cpFloat r1, cpFloat r2);$/;"	p	signature:(cpFloat r1, cpFloat r2)
cpAreaForCircle	src/chipmunk.c	/^cpAreaForCircle(cpFloat r1, cpFloat r2)$/;"	f	signature:(cpFloat r1, cpFloat r2)
cpAreaForPoly	include/chipmunk/chipmunk.h	/^cpFloat cpAreaForPoly(const int numVerts, const cpVect *verts);$/;"	p	signature:(const int numVerts, const cpVect *verts)
cpAreaForPoly	src/chipmunk.c	/^cpAreaForPoly(const int numVerts, const cpVect *verts)$/;"	f	signature:(const int numVerts, const cpVect *verts)
cpAreaForSegment	include/chipmunk/chipmunk.h	/^cpFloat cpAreaForSegment(cpVect a, cpVect b, cpFloat r);$/;"	p	signature:(cpVect a, cpVect b, cpFloat r)
cpAreaForSegment	src/chipmunk.c	/^cpAreaForSegment(cpVect a, cpVect b, cpFloat r)$/;"	f	signature:(cpVect a, cpVect b, cpFloat r)
cpArray	include/chipmunk/chipmunk.h	/^typedef struct cpArray cpArray;$/;"	t	typeref:struct:cpArray
cpArray	include/chipmunk/chipmunk_private.h	/^struct cpArray {$/;"	s
cpArray::arr	include/chipmunk/chipmunk_private.h	/^	void **arr;$/;"	m	struct:cpArray	access:public
cpArray::max	include/chipmunk/chipmunk_private.h	/^	int num, max;$/;"	m	struct:cpArray	access:public
cpArray::num	include/chipmunk/chipmunk_private.h	/^	int num, max;$/;"	m	struct:cpArray	access:public
cpArrayContains	include/chipmunk/chipmunk_private.h	/^cpBool cpArrayContains(cpArray *arr, void *ptr);$/;"	p	signature:(cpArray *arr, void *ptr)
cpArrayContains	src/cpArray.c	/^cpArrayContains(cpArray *arr, void *ptr)$/;"	f	signature:(cpArray *arr, void *ptr)
cpArrayDeleteObj	include/chipmunk/chipmunk_private.h	/^void cpArrayDeleteObj(cpArray *arr, void *obj);$/;"	p	signature:(cpArray *arr, void *obj)
cpArrayDeleteObj	src/cpArray.c	/^cpArrayDeleteObj(cpArray *arr, void *obj)$/;"	f	signature:(cpArray *arr, void *obj)
cpArrayFree	include/chipmunk/chipmunk_private.h	/^void cpArrayFree(cpArray *arr);$/;"	p	signature:(cpArray *arr)
cpArrayFree	src/cpArray.c	/^cpArrayFree(cpArray *arr)$/;"	f	signature:(cpArray *arr)
cpArrayFreeEach	include/chipmunk/chipmunk_private.h	/^void cpArrayFreeEach(cpArray *arr, void (freeFunc)(void*));$/;"	p	signature:(cpArray *arr, void (freeFunc)(void*))
cpArrayFreeEach	src/cpArray.c	/^cpArrayFreeEach(cpArray *arr, void (freeFunc)(void*))$/;"	f	signature:(cpArray *arr, void (freeFunc)(void*))
cpArrayNew	include/chipmunk/chipmunk_private.h	/^cpArray *cpArrayNew(int size);$/;"	p	signature:(int size)
cpArrayNew	src/cpArray.c	/^cpArrayNew(int size)$/;"	f	signature:(int size)
cpArrayPop	include/chipmunk/chipmunk_private.h	/^void *cpArrayPop(cpArray *arr);$/;"	p	signature:(cpArray *arr)
cpArrayPop	src/cpArray.c	/^cpArrayPop(cpArray *arr)$/;"	f	signature:(cpArray *arr)
cpArrayPush	include/chipmunk/chipmunk_private.h	/^void cpArrayPush(cpArray *arr, void *object);$/;"	p	signature:(cpArray *arr, void *object)
cpArrayPush	src/cpArray.c	/^cpArrayPush(cpArray *arr, void *object)$/;"	f	signature:(cpArray *arr, void *object)
cpAssertHard	include/chipmunk/chipmunk.h	/^#define cpAssertHard(/;"	d
cpAssertSoft	include/chipmunk/chipmunk.h	/^	#define	cpAssertSoft(/;"	d
cpAssertSoft	include/chipmunk/chipmunk.h	/^	#define cpAssertSoft(/;"	d
cpAssertSpaceUnlocked	src/cpSpace.c	/^#define cpAssertSpaceUnlocked(/;"	d	file:
cpAssertWarn	include/chipmunk/chipmunk.h	/^	#define	cpAssertWarn(/;"	d
cpAssertWarn	include/chipmunk/chipmunk.h	/^	#define cpAssertWarn(/;"	d
cpBB	include/chipmunk/cpBB.h	/^typedef struct cpBB{$/;"	s
cpBB	include/chipmunk/cpBB.h	/^} cpBB;$/;"	t	typeref:struct:cpBB
cpBB::b	include/chipmunk/cpBB.h	/^	cpFloat l, b, r ,t;$/;"	m	struct:cpBB	access:public
cpBB::l	include/chipmunk/cpBB.h	/^	cpFloat l, b, r ,t;$/;"	m	struct:cpBB	access:public
cpBB::r	include/chipmunk/cpBB.h	/^	cpFloat l, b, r ,t;$/;"	m	struct:cpBB	access:public
cpBB::t	include/chipmunk/cpBB.h	/^	cpFloat l, b, r ,t;$/;"	m	struct:cpBB	access:public
cpBBArea	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBBArea);$/;"	v
cpBBArea	include/chipmunk/cpBB.h	/^static inline cpFloat cpBBArea(cpBB bb)$/;"	f	signature:(cpBB bb)
cpBBClampVect	include/chipmunk/cpBB.h	/^cpBBClampVect(const cpBB bb, const cpVect v)$/;"	f	signature:(const cpBB bb, const cpVect v)
cpBBContainsBB	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBBContainsBB);$/;"	v
cpBBContainsBB	include/chipmunk/cpBB.h	/^static inline cpBool cpBBContainsBB(const cpBB bb, const cpBB other)$/;"	f	signature:(const cpBB bb, const cpBB other)
cpBBContainsVect	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBBContainsVect);$/;"	v
cpBBContainsVect	include/chipmunk/cpBB.h	/^static inline cpBool cpBBContainsVect(const cpBB bb, const cpVect v)$/;"	f	signature:(const cpBB bb, const cpVect v)
cpBBExpand	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBBExpand);$/;"	v
cpBBExpand	include/chipmunk/cpBB.h	/^static inline cpBB cpBBExpand(const cpBB bb, const cpVect v){$/;"	f	signature:(const cpBB bb, const cpVect v)
cpBBIntersects	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBBIntersects);$/;"	v
cpBBIntersects	include/chipmunk/cpBB.h	/^static inline cpBool cpBBIntersects(const cpBB a, const cpBB b)$/;"	f	signature:(const cpBB a, const cpBB b)
cpBBIntersectsSegment	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBBIntersectsSegment);$/;"	v
cpBBIntersectsSegment	include/chipmunk/cpBB.h	/^static inline cpBool cpBBIntersectsSegment(cpBB bb, cpVect a, cpVect b)$/;"	f	signature:(cpBB bb, cpVect a, cpVect b)
cpBBMerge	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBBMerge);$/;"	v
cpBBMerge	include/chipmunk/cpBB.h	/^static inline cpBB cpBBMerge(const cpBB a, const cpBB b){$/;"	f	signature:(const cpBB a, const cpBB b)
cpBBMergedArea	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBBMergedArea);$/;"	v
cpBBMergedArea	include/chipmunk/cpBB.h	/^static inline cpFloat cpBBMergedArea(cpBB a, cpBB b)$/;"	f	signature:(cpBB a, cpBB b)
cpBBNew	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBBNew);$/;"	v
cpBBNew	include/chipmunk/cpBB.h	/^static inline cpBB cpBBNew(const cpFloat l, const cpFloat b, const cpFloat r, const cpFloat t)$/;"	f	signature:(const cpFloat l, const cpFloat b, const cpFloat r, const cpFloat t)
cpBBNewForCircle	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBBNewForCircle);$/;"	v
cpBBNewForCircle	include/chipmunk/cpBB.h	/^static inline cpBB cpBBNewForCircle(const cpVect p, const cpFloat r)$/;"	f	signature:(const cpVect p, const cpFloat r)
cpBBProximity	src/cpBBTree.c	/^cpBBProximity(cpBB a, cpBB b)$/;"	f	file:	signature:(cpBB a, cpBB b)
cpBBSegmentQuery	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBBSegmentQuery);$/;"	v
cpBBSegmentQuery	include/chipmunk/cpBB.h	/^static inline cpFloat cpBBSegmentQuery(cpBB bb, cpVect a, cpVect b)$/;"	f	signature:(cpBB bb, cpVect a, cpVect b)
cpBBTree	include/chipmunk/cpSpatialIndex.h	/^typedef struct cpBBTree cpBBTree;$/;"	t	typeref:struct:cpBBTree
cpBBTree	src/cpBBTree.c	/^struct cpBBTree {$/;"	s	file:
cpBBTree::allocatedBuffers	src/cpBBTree.c	/^	cpArray *allocatedBuffers;$/;"	m	struct:cpBBTree	file:	access:public
cpBBTree::leaves	src/cpBBTree.c	/^	cpHashSet *leaves;$/;"	m	struct:cpBBTree	file:	access:public
cpBBTree::pooledNodes	src/cpBBTree.c	/^	Node *pooledNodes;$/;"	m	struct:cpBBTree	file:	access:public
cpBBTree::pooledPairs	src/cpBBTree.c	/^	Pair *pooledPairs;$/;"	m	struct:cpBBTree	file:	access:public
cpBBTree::root	src/cpBBTree.c	/^	Node *root;$/;"	m	struct:cpBBTree	file:	access:public
cpBBTree::spatialIndex	src/cpBBTree.c	/^	cpSpatialIndex spatialIndex;$/;"	m	struct:cpBBTree	file:	access:public
cpBBTree::stamp	src/cpBBTree.c	/^	cpTimestamp stamp;$/;"	m	struct:cpBBTree	file:	access:public
cpBBTree::velocityFunc	src/cpBBTree.c	/^	cpBBTreeVelocityFunc velocityFunc;$/;"	m	struct:cpBBTree	file:	access:public
cpBBTreeAlloc	include/chipmunk/cpSpatialIndex.h	/^cpBBTree* cpBBTreeAlloc(void);$/;"	p	signature:(void)
cpBBTreeAlloc	src/cpBBTree.c	/^cpBBTreeAlloc(void)$/;"	f	signature:(void)
cpBBTreeContains	src/cpBBTree.c	/^cpBBTreeContains(cpBBTree *tree, void *obj, cpHashValue hashid)$/;"	f	file:	signature:(cpBBTree *tree, void *obj, cpHashValue hashid)
cpBBTreeCount	src/cpBBTree.c	/^cpBBTreeCount(cpBBTree *tree)$/;"	f	file:	signature:(cpBBTree *tree)
cpBBTreeDestroy	src/cpBBTree.c	/^cpBBTreeDestroy(cpBBTree *tree)$/;"	f	file:	signature:(cpBBTree *tree)
cpBBTreeEach	src/cpBBTree.c	/^cpBBTreeEach(cpBBTree *tree, cpSpatialIndexIteratorFunc func, void *data)$/;"	f	file:	signature:(cpBBTree *tree, cpSpatialIndexIteratorFunc func, void *data)
cpBBTreeInit	include/chipmunk/cpSpatialIndex.h	/^cpSpatialIndex* cpBBTreeInit(cpBBTree *tree, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);$/;"	p	signature:(cpBBTree *tree, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpBBTreeInit	src/cpBBTree.c	/^cpBBTreeInit(cpBBTree *tree, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)$/;"	f	signature:(cpBBTree *tree, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpBBTreeInsert	src/cpBBTree.c	/^cpBBTreeInsert(cpBBTree *tree, void *obj, cpHashValue hashid)$/;"	f	file:	signature:(cpBBTree *tree, void *obj, cpHashValue hashid)
cpBBTreeNew	include/chipmunk/cpSpatialIndex.h	/^cpSpatialIndex* cpBBTreeNew(cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);$/;"	p	signature:(cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpBBTreeNew	src/cpBBTree.c	/^cpBBTreeNew(cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)$/;"	f	signature:(cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpBBTreeOptimize	include/chipmunk/cpSpatialIndex.h	/^void cpBBTreeOptimize(cpSpatialIndex *index);$/;"	p	signature:(cpSpatialIndex *index)
cpBBTreeOptimize	src/cpBBTree.c	/^cpBBTreeOptimize(cpSpatialIndex *index)$/;"	f	signature:(cpSpatialIndex *index)
cpBBTreeQuery	src/cpBBTree.c	/^cpBBTreeQuery(cpBBTree *tree, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data)$/;"	f	file:	signature:(cpBBTree *tree, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data)
cpBBTreeReindex	src/cpBBTree.c	/^cpBBTreeReindex(cpBBTree *tree)$/;"	f	file:	signature:(cpBBTree *tree)
cpBBTreeReindexObject	src/cpBBTree.c	/^cpBBTreeReindexObject(cpBBTree *tree, void *obj, cpHashValue hashid)$/;"	f	file:	signature:(cpBBTree *tree, void *obj, cpHashValue hashid)
cpBBTreeReindexQuery	src/cpBBTree.c	/^cpBBTreeReindexQuery(cpBBTree *tree, cpSpatialIndexQueryFunc func, void *data)$/;"	f	file:	signature:(cpBBTree *tree, cpSpatialIndexQueryFunc func, void *data)
cpBBTreeRemove	src/cpBBTree.c	/^cpBBTreeRemove(cpBBTree *tree, void *obj, cpHashValue hashid)$/;"	f	file:	signature:(cpBBTree *tree, void *obj, cpHashValue hashid)
cpBBTreeRenderDebug	src/cpBBTree.c	/^cpBBTreeRenderDebug(cpSpatialIndex *index){$/;"	f	signature:(cpSpatialIndex *index)
cpBBTreeSegmentQuery	src/cpBBTree.c	/^cpBBTreeSegmentQuery(cpBBTree *tree, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data)$/;"	f	file:	signature:(cpBBTree *tree, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data)
cpBBTreeSetVelocityFunc	include/chipmunk/cpSpatialIndex.h	/^void cpBBTreeSetVelocityFunc(cpSpatialIndex *index, cpBBTreeVelocityFunc func);$/;"	p	signature:(cpSpatialIndex *index, cpBBTreeVelocityFunc func)
cpBBTreeSetVelocityFunc	src/cpBBTree.c	/^cpBBTreeSetVelocityFunc(cpSpatialIndex *index, cpBBTreeVelocityFunc func)$/;"	f	signature:(cpSpatialIndex *index, cpBBTreeVelocityFunc func)
cpBBTreeVelocityFunc	include/chipmunk/cpSpatialIndex.h	/^typedef cpVect (*cpBBTreeVelocityFunc)(void *obj);$/;"	t
cpBBWrapVect	include/chipmunk/cpBB.h	/^cpVect cpBBWrapVect(const cpBB bb, const cpVect v); \/\/ wrap a vector to a bbox$/;"	p	signature:(const cpBB bb, const cpVect v)
cpBBWrapVect	src/cpBB.c	/^cpBBWrapVect(const cpBB bb, const cpVect v)$/;"	f	signature:(const cpBB bb, const cpVect v)
cpBody	include/chipmunk/chipmunk.h	/^typedef struct cpBody cpBody;$/;"	t	typeref:struct:cpBody
cpBody	include/chipmunk/cpBody.h	/^struct cpBody {$/;"	s
cpBody::CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpArbiter *arbiterList);$/;"	p	struct:cpBody	access:public	signature:(cpArbiter *arbiterList)
cpBody::CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpComponentNode node);$/;"	p	struct:cpBody	access:public	signature:(cpComponentNode node)
cpBody::CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpConstraint *constraintList);$/;"	p	struct:cpBody	access:public	signature:(cpConstraint *constraintList)
cpBody::CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpFloat w_bias);$/;"	p	struct:cpBody	access:public	signature:(cpFloat w_bias)
cpBody::CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpShape *shapeList);$/;"	p	struct:cpBody	access:public	signature:(cpShape *shapeList)
cpBody::CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpSpace *space);$/;"	p	struct:cpBody	access:public	signature:(cpSpace *space)
cpBody::CP_PRIVATE	include/chipmunk/cpBody.h	/^	CP_PRIVATE(cpVect v_bias);$/;"	p	struct:cpBody	access:public	signature:(cpVect v_bias)
cpBody::a	include/chipmunk/cpBody.h	/^	cpFloat a;$/;"	m	struct:cpBody	access:public
cpBody::data	include/chipmunk/cpBody.h	/^	cpDataPointer data;$/;"	m	struct:cpBody	access:public
cpBody::f	include/chipmunk/cpBody.h	/^	cpVect f;$/;"	m	struct:cpBody	access:public
cpBody::i	include/chipmunk/cpBody.h	/^	cpFloat i;$/;"	m	struct:cpBody	access:public
cpBody::i_inv	include/chipmunk/cpBody.h	/^	cpFloat i_inv;$/;"	m	struct:cpBody	access:public
cpBody::m	include/chipmunk/cpBody.h	/^	cpFloat m;$/;"	m	struct:cpBody	access:public
cpBody::m_inv	include/chipmunk/cpBody.h	/^	cpFloat m_inv;$/;"	m	struct:cpBody	access:public
cpBody::p	include/chipmunk/cpBody.h	/^	cpVect p;$/;"	m	struct:cpBody	access:public
cpBody::position_func	include/chipmunk/cpBody.h	/^	cpBodyPositionFunc position_func;$/;"	m	struct:cpBody	access:public
cpBody::rot	include/chipmunk/cpBody.h	/^	cpVect rot;$/;"	m	struct:cpBody	access:public
cpBody::t	include/chipmunk/cpBody.h	/^	cpFloat t;$/;"	m	struct:cpBody	access:public
cpBody::v	include/chipmunk/cpBody.h	/^	cpVect v;$/;"	m	struct:cpBody	access:public
cpBody::v_limit	include/chipmunk/cpBody.h	/^	cpFloat v_limit;$/;"	m	struct:cpBody	access:public
cpBody::velocity_func	include/chipmunk/cpBody.h	/^	cpBodyVelocityFunc velocity_func;$/;"	m	struct:cpBody	access:public
cpBody::w	include/chipmunk/cpBody.h	/^	cpFloat w;$/;"	m	struct:cpBody	access:public
cpBody::w_limit	include/chipmunk/cpBody.h	/^	cpFloat w_limit;$/;"	m	struct:cpBody	access:public
cpBodyActivate	include/chipmunk/cpBody.h	/^void cpBodyActivate(cpBody *body);$/;"	p	signature:(cpBody *body)
cpBodyActivate	src/cpSpaceComponent.c	/^cpBodyActivate(cpBody *body)$/;"	f	signature:(cpBody *body)
cpBodyActivateStatic	include/chipmunk/cpBody.h	/^void cpBodyActivateStatic(cpBody *body, cpShape *filter);$/;"	p	signature:(cpBody *body, cpShape *filter)
cpBodyActivateStatic	src/cpSpaceComponent.c	/^cpBodyActivateStatic(cpBody *body, cpShape *filter)$/;"	f	signature:(cpBody *body, cpShape *filter)
cpBodyAddShape	include/chipmunk/chipmunk_private.h	/^void cpBodyAddShape(cpBody *body, cpShape *shape);$/;"	p	signature:(cpBody *body, cpShape *shape)
cpBodyAddShape	src/cpBody.c	/^cpBodyAddShape(cpBody *body, cpShape *shape)$/;"	f	signature:(cpBody *body, cpShape *shape)
cpBodyAlloc	include/chipmunk/cpBody.h	/^cpBody* cpBodyAlloc(void);$/;"	p	signature:(void)
cpBodyAlloc	src/cpBody.c	/^cpBodyAlloc(void)$/;"	f	signature:(void)
cpBodyApplyForce	include/chipmunk/cpBody.h	/^void cpBodyApplyForce(cpBody *body, const cpVect f, const cpVect r);$/;"	p	signature:(cpBody *body, const cpVect f, const cpVect r)
cpBodyApplyForce	src/cpBody.c	/^cpBodyApplyForce(cpBody *body, cpVect force, cpVect r)$/;"	f	signature:(cpBody *body, cpVect force, cpVect r)
cpBodyApplyImpulse	include/chipmunk/cpBody.h	/^void cpBodyApplyImpulse(cpBody *body, const cpVect j, const cpVect r);$/;"	p	signature:(cpBody *body, const cpVect j, const cpVect r)
cpBodyApplyImpulse	src/cpBody.c	/^cpBodyApplyImpulse(cpBody *body, const cpVect j, const cpVect r)$/;"	f	signature:(cpBody *body, const cpVect j, const cpVect r)
cpBodyArbiterIteratorFunc	include/chipmunk/cpBody.h	/^typedef void (*cpBodyArbiterIteratorFunc)(cpBody *body, cpArbiter *arbiter, void *data);$/;"	t
cpBodyAssertSane	include/chipmunk/cpBody.h	/^	#define	cpBodyAssertSane(/;"	d
cpBodyConstraintIteratorFunc	include/chipmunk/cpBody.h	/^typedef void (*cpBodyConstraintIteratorFunc)(cpBody *body, cpConstraint *constraint, void *data);$/;"	t
cpBodyDestroy	include/chipmunk/cpBody.h	/^void cpBodyDestroy(cpBody *body);$/;"	p	signature:(cpBody *body)
cpBodyDestroy	src/cpBody.c	/^void cpBodyDestroy(cpBody *body){}$/;"	f	signature:(cpBody *body)
cpBodyEachArbiter	include/chipmunk/cpBody.h	/^void cpBodyEachArbiter(cpBody *body, cpBodyArbiterIteratorFunc func, void *data);$/;"	p	signature:(cpBody *body, cpBodyArbiterIteratorFunc func, void *data)
cpBodyEachArbiter	src/cpBody.c	/^cpBodyEachArbiter(cpBody *body, cpBodyArbiterIteratorFunc func, void *data)$/;"	f	signature:(cpBody *body, cpBodyArbiterIteratorFunc func, void *data)
cpBodyEachArbiter_b	include/chipmunk/chipmunk.h	/^void cpBodyEachArbiter_b(cpBody *body, void (^block)(cpArbiter *arbiter));$/;"	p	signature:(cpBody *body, void (^block)(cpArbiter *arbiter))
cpBodyEachArbiter_b	src/chipmunk.c	/^void cpBodyEachArbiter_b(cpBody *body, void (^block)(cpArbiter *arbiter)){$/;"	f	signature:(cpBody *body, void (^block)(cpArbiter *arbiter))
cpBodyEachConstraint	include/chipmunk/cpBody.h	/^void cpBodyEachConstraint(cpBody *body, cpBodyConstraintIteratorFunc func, void *data);$/;"	p	signature:(cpBody *body, cpBodyConstraintIteratorFunc func, void *data)
cpBodyEachConstraint	src/cpBody.c	/^cpBodyEachConstraint(cpBody *body, cpBodyConstraintIteratorFunc func, void *data)$/;"	f	signature:(cpBody *body, cpBodyConstraintIteratorFunc func, void *data)
cpBodyEachConstraint_b	include/chipmunk/chipmunk.h	/^void cpBodyEachConstraint_b(cpBody *body, void (^block)(cpConstraint *constraint));$/;"	p	signature:(cpBody *body, void (^block)(cpConstraint *constraint))
cpBodyEachConstraint_b	src/chipmunk.c	/^void cpBodyEachConstraint_b(cpBody *body, void (^block)(cpConstraint *constraint)){$/;"	f	signature:(cpBody *body, void (^block)(cpConstraint *constraint))
cpBodyEachShape	include/chipmunk/cpBody.h	/^void cpBodyEachShape(cpBody *body, cpBodyShapeIteratorFunc func, void *data);$/;"	p	signature:(cpBody *body, cpBodyShapeIteratorFunc func, void *data)
cpBodyEachShape	src/cpBody.c	/^cpBodyEachShape(cpBody *body, cpBodyShapeIteratorFunc func, void *data)$/;"	f	signature:(cpBody *body, cpBodyShapeIteratorFunc func, void *data)
cpBodyEachShape_b	include/chipmunk/chipmunk.h	/^void cpBodyEachShape_b(cpBody *body, void (^block)(cpShape *shape));$/;"	p	signature:(cpBody *body, void (^block)(cpShape *shape))
cpBodyEachShape_b	src/chipmunk.c	/^void cpBodyEachShape_b(cpBody *body, void (^block)(cpShape *shape)){$/;"	f	signature:(cpBody *body, void (^block)(cpShape *shape))
cpBodyFree	include/chipmunk/cpBody.h	/^void cpBodyFree(cpBody *body);$/;"	p	signature:(cpBody *body)
cpBodyFree	src/cpBody.c	/^cpBodyFree(cpBody *body)$/;"	f	signature:(cpBody *body)
cpBodyGetAngle	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBodyGetAngle);$/;"	v
cpBodyGetMass	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBodyGetMass);$/;"	v
cpBodyGetMoment	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBodyGetMoment);$/;"	v
cpBodyGetPos	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBodyGetPos);$/;"	v
cpBodyGetRot	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBodyGetRot);$/;"	v
cpBodyGetVelAtLocalPoint	include/chipmunk/cpBody.h	/^cpVect cpBodyGetVelAtLocalPoint(cpBody *body, cpVect point);$/;"	p	signature:(cpBody *body, cpVect point)
cpBodyGetVelAtLocalPoint	src/cpBody.c	/^cpBodyGetVelAtLocalPoint(cpBody *body, cpVect point)$/;"	f	signature:(cpBody *body, cpVect point)
cpBodyGetVelAtPoint	src/cpBody.c	/^cpBodyGetVelAtPoint(cpBody *body, cpVect r)$/;"	f	file:	signature:(cpBody *body, cpVect r)
cpBodyGetVelAtWorldPoint	include/chipmunk/cpBody.h	/^cpVect cpBodyGetVelAtWorldPoint(cpBody *body, cpVect point);$/;"	p	signature:(cpBody *body, cpVect point)
cpBodyGetVelAtWorldPoint	src/cpBody.c	/^cpBodyGetVelAtWorldPoint(cpBody *body, cpVect point)$/;"	f	signature:(cpBody *body, cpVect point)
cpBodyInit	include/chipmunk/cpBody.h	/^cpBody* cpBodyInit(cpBody *body, cpFloat m, cpFloat i);$/;"	p	signature:(cpBody *body, cpFloat m, cpFloat i)
cpBodyInit	src/cpBody.c	/^cpBodyInit(cpBody *body, cpFloat m, cpFloat i)$/;"	f	signature:(cpBody *body, cpFloat m, cpFloat i)
cpBodyInitStatic	include/chipmunk/cpBody.h	/^cpBody* cpBodyInitStatic(cpBody *body);$/;"	p	signature:(cpBody *body)
cpBodyInitStatic	src/cpBody.c	/^cpBodyInitStatic(cpBody *body)$/;"	f	signature:(cpBody *body)
cpBodyIsRogue	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBodyIsRogue);$/;"	v
cpBodyIsRogue	include/chipmunk/cpBody.h	/^static inline cpBool cpBodyIsRogue(const cpBody *body)$/;"	f	signature:(const cpBody *body)
cpBodyIsSleeping	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBodyIsSleeping);$/;"	v
cpBodyIsSleeping	include/chipmunk/cpBody.h	/^static inline cpBool cpBodyIsSleeping(const cpBody *body)$/;"	f	signature:(const cpBody *body)
cpBodyIsStatic	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBodyIsStatic);$/;"	v
cpBodyIsStatic	include/chipmunk/cpBody.h	/^static inline cpBool cpBodyIsStatic(const cpBody *body)$/;"	f	signature:(const cpBody *body)
cpBodyKineticEnergy	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBodyKineticEnergy);$/;"	v
cpBodyKineticEnergy	include/chipmunk/cpBody.h	/^static inline cpFloat cpBodyKineticEnergy(const cpBody *body)$/;"	f	signature:(const cpBody *body)
cpBodyLocal2World	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBodyLocal2World);$/;"	v
cpBodyLocal2World	include/chipmunk/cpBody.h	/^static inline cpVect cpBodyLocal2World(const cpBody *body, const cpVect v)$/;"	f	signature:(const cpBody *body, const cpVect v)
cpBodyNew	include/chipmunk/cpBody.h	/^cpBody* cpBodyNew(cpFloat m, cpFloat i);$/;"	p	signature:(cpFloat m, cpFloat i)
cpBodyNew	src/cpBody.c	/^cpBodyNew(cpFloat m, cpFloat i)$/;"	f	signature:(cpFloat m, cpFloat i)
cpBodyNewStatic	include/chipmunk/cpBody.h	/^cpBody* cpBodyNewStatic(void);$/;"	p	signature:(void)
cpBodyNewStatic	src/cpBody.c	/^cpBodyNewStatic(void)$/;"	f	signature:(void)
cpBodyPositionFunc	include/chipmunk/cpBody.h	/^typedef void (*cpBodyPositionFunc)(cpBody *body, cpFloat dt);$/;"	t
cpBodyPushArbiter	src/cpSpaceComponent.c	/^cpBodyPushArbiter(cpBody *body, cpArbiter *arb)$/;"	f	file:	signature:(cpBody *body, cpArbiter *arb)
cpBodyRemoveConstraint	include/chipmunk/chipmunk_private.h	/^void cpBodyRemoveConstraint(cpBody *body, cpConstraint *constraint);$/;"	p	signature:(cpBody *body, cpConstraint *constraint)
cpBodyRemoveConstraint	src/cpBody.c	/^cpBodyRemoveConstraint(cpBody *body, cpConstraint *constraint)$/;"	f	signature:(cpBody *body, cpConstraint *constraint)
cpBodyRemoveShape	include/chipmunk/chipmunk_private.h	/^void cpBodyRemoveShape(cpBody *body, cpShape *shape);$/;"	p	signature:(cpBody *body, cpShape *shape)
cpBodyRemoveShape	src/cpBody.c	/^cpBodyRemoveShape(cpBody *body, cpShape *shape)$/;"	f	signature:(cpBody *body, cpShape *shape)
cpBodyResetForces	include/chipmunk/cpBody.h	/^void cpBodyResetForces(cpBody *body);$/;"	p	signature:(cpBody *body)
cpBodyResetForces	src/cpBody.c	/^cpBodyResetForces(cpBody *body)$/;"	f	signature:(cpBody *body)
cpBodySanityCheck	include/chipmunk/cpBody.h	/^	void cpBodySanityCheck(cpBody *body);$/;"	p	signature:(cpBody *body)
cpBodySanityCheck	src/cpBody.c	/^cpBodySanityCheck(cpBody *body)$/;"	f	signature:(cpBody *body)
cpBodySetAngle	include/chipmunk/cpBody.h	/^void cpBodySetAngle(cpBody *body, cpFloat a);$/;"	p	signature:(cpBody *body, cpFloat a)
cpBodySetAngle	src/cpBody.c	/^cpBodySetAngle(cpBody *body, cpFloat angle)$/;"	f	signature:(cpBody *body, cpFloat angle)
cpBodySetMass	include/chipmunk/cpBody.h	/^void cpBodySetMass(cpBody *body, cpFloat m);$/;"	p	signature:(cpBody *body, cpFloat m)
cpBodySetMass	src/cpBody.c	/^cpBodySetMass(cpBody *body, cpFloat mass)$/;"	f	signature:(cpBody *body, cpFloat mass)
cpBodySetMoment	include/chipmunk/cpBody.h	/^void cpBodySetMoment(cpBody *body, cpFloat i);$/;"	p	signature:(cpBody *body, cpFloat i)
cpBodySetMoment	src/cpBody.c	/^cpBodySetMoment(cpBody *body, cpFloat moment)$/;"	f	signature:(cpBody *body, cpFloat moment)
cpBodySetPos	include/chipmunk/cpBody.h	/^void cpBodySetPos(cpBody *body, cpVect pos);$/;"	p	signature:(cpBody *body, cpVect pos)
cpBodySetPos	src/cpBody.c	/^cpBodySetPos(cpBody *body, cpVect pos)$/;"	f	signature:(cpBody *body, cpVect pos)
cpBodyShapeIteratorFunc	include/chipmunk/cpBody.h	/^typedef void (*cpBodyShapeIteratorFunc)(cpBody *body, cpShape *shape, void *data);$/;"	t
cpBodySleep	include/chipmunk/cpBody.h	/^void cpBodySleep(cpBody *body);$/;"	p	signature:(cpBody *body)
cpBodySleep	src/cpSpaceComponent.c	/^cpBodySleep(cpBody *body)$/;"	f	signature:(cpBody *body)
cpBodySleepWithGroup	include/chipmunk/cpBody.h	/^void cpBodySleepWithGroup(cpBody *body, cpBody *group);$/;"	p	signature:(cpBody *body, cpBody *group)
cpBodySleepWithGroup	src/cpSpaceComponent.c	/^cpBodySleepWithGroup(cpBody *body, cpBody *group){$/;"	f	signature:(cpBody *body, cpBody *group)
cpBodyUpdatePosition	include/chipmunk/cpBody.h	/^void cpBodyUpdatePosition(cpBody *body, cpFloat dt);$/;"	p	signature:(cpBody *body, cpFloat dt)
cpBodyUpdatePosition	src/cpBody.c	/^cpBodyUpdatePosition(cpBody *body, cpFloat dt)$/;"	f	signature:(cpBody *body, cpFloat dt)
cpBodyUpdateVelocity	include/chipmunk/cpBody.h	/^void cpBodyUpdateVelocity(cpBody *body, cpVect gravity, cpFloat damping, cpFloat dt);$/;"	p	signature:(cpBody *body, cpVect gravity, cpFloat damping, cpFloat dt)
cpBodyUpdateVelocity	src/cpBody.c	/^cpBodyUpdateVelocity(cpBody *body, cpVect gravity, cpFloat damping, cpFloat dt)$/;"	f	signature:(cpBody *body, cpVect gravity, cpFloat damping, cpFloat dt)
cpBodyVelocityFunc	include/chipmunk/cpBody.h	/^typedef void (*cpBodyVelocityFunc)(cpBody *body, cpVect gravity, cpFloat damping, cpFloat dt);$/;"	t
cpBodyWorld2Local	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpBodyWorld2Local);$/;"	v
cpBodyWorld2Local	include/chipmunk/cpBody.h	/^static inline cpVect cpBodyWorld2Local(const cpBody *body, const cpVect v)$/;"	f	signature:(const cpBody *body, const cpVect v)
cpBool	include/chipmunk/chipmunk_types.h	/^	typedef CP_BOOL_TYPE cpBool;$/;"	t
cpBool	include/chipmunk/chipmunk_types.h	/^	typedef int cpBool;$/;"	t
cpBoxShapeInit	include/chipmunk/cpPolyShape.h	/^cpPolyShape* cpBoxShapeInit(cpPolyShape *poly, cpBody *body, cpFloat width, cpFloat height);$/;"	p	signature:(cpPolyShape *poly, cpBody *body, cpFloat width, cpFloat height)
cpBoxShapeInit	src/cpPolyShape.c	/^cpBoxShapeInit(cpPolyShape *poly, cpBody *body, cpFloat width, cpFloat height)$/;"	f	signature:(cpPolyShape *poly, cpBody *body, cpFloat width, cpFloat height)
cpBoxShapeInit2	include/chipmunk/cpPolyShape.h	/^cpPolyShape* cpBoxShapeInit2(cpPolyShape *poly, cpBody *body, cpBB box);$/;"	p	signature:(cpPolyShape *poly, cpBody *body, cpBB box)
cpBoxShapeInit2	src/cpPolyShape.c	/^cpBoxShapeInit2(cpPolyShape *poly, cpBody *body, cpBB box)$/;"	f	signature:(cpPolyShape *poly, cpBody *body, cpBB box)
cpBoxShapeNew	include/chipmunk/cpPolyShape.h	/^cpShape* cpBoxShapeNew(cpBody *body, cpFloat width, cpFloat height);$/;"	p	signature:(cpBody *body, cpFloat width, cpFloat height)
cpBoxShapeNew	src/cpPolyShape.c	/^cpBoxShapeNew(cpBody *body, cpFloat width, cpFloat height)$/;"	f	signature:(cpBody *body, cpFloat width, cpFloat height)
cpBoxShapeNew2	include/chipmunk/cpPolyShape.h	/^cpShape* cpBoxShapeNew2(cpBody *body, cpBB box);$/;"	p	signature:(cpBody *body, cpBB box)
cpBoxShapeNew2	src/cpPolyShape.c	/^cpBoxShapeNew2(cpBody *body, cpBB box)$/;"	f	signature:(cpBody *body, cpBB box)
cpCentroidForPoly	include/chipmunk/chipmunk.h	/^cpVect cpCentroidForPoly(const int numVerts, const cpVect *verts);$/;"	p	signature:(const int numVerts, const cpVect *verts)
cpCentroidForPoly	src/chipmunk.c	/^cpCentroidForPoly(const int numVerts, const cpVect *verts)$/;"	f	signature:(const int numVerts, const cpVect *verts)
cpCicleShapeNearestPointQuery	src/cpShape.c	/^cpCicleShapeNearestPointQuery(cpCircleShape *circle, cpVect p, cpNearestPointQueryInfo *info)$/;"	f	file:	signature:(cpCircleShape *circle, cpVect p, cpNearestPointQueryInfo *info)
cpCircleShape	include/chipmunk/cpShape.h	/^typedef struct cpCircleShape {$/;"	s
cpCircleShape	include/chipmunk/cpShape.h	/^} cpCircleShape;$/;"	t	typeref:struct:cpCircleShape
cpCircleShape::c	include/chipmunk/cpShape.h	/^	cpVect c, tc;$/;"	m	struct:cpCircleShape	access:public
cpCircleShape::r	include/chipmunk/cpShape.h	/^	cpFloat r;$/;"	m	struct:cpCircleShape	access:public
cpCircleShape::shape	include/chipmunk/cpShape.h	/^	cpShape shape;$/;"	m	struct:cpCircleShape	access:public
cpCircleShape::tc	include/chipmunk/cpShape.h	/^	cpVect c, tc;$/;"	m	struct:cpCircleShape	access:public
cpCircleShapeAlloc	include/chipmunk/cpShape.h	/^cpCircleShape* cpCircleShapeAlloc(void);$/;"	p	signature:(void)
cpCircleShapeAlloc	src/cpShape.c	/^cpCircleShapeAlloc(void)$/;"	f	signature:(void)
cpCircleShapeCacheData	src/cpShape.c	/^cpCircleShapeCacheData(cpCircleShape *circle, cpVect p, cpVect rot)$/;"	f	file:	signature:(cpCircleShape *circle, cpVect p, cpVect rot)
cpCircleShapeClass	src/cpShape.c	/^static const cpShapeClass cpCircleShapeClass = {$/;"	v	file:
cpCircleShapeInit	include/chipmunk/cpShape.h	/^cpCircleShape* cpCircleShapeInit(cpCircleShape *circle, cpBody *body, cpFloat radius, cpVect offset);$/;"	p	signature:(cpCircleShape *circle, cpBody *body, cpFloat radius, cpVect offset)
cpCircleShapeInit	src/cpShape.c	/^cpCircleShapeInit(cpCircleShape *circle, cpBody *body, cpFloat radius, cpVect offset)$/;"	f	signature:(cpCircleShape *circle, cpBody *body, cpFloat radius, cpVect offset)
cpCircleShapeNew	include/chipmunk/cpShape.h	/^cpShape* cpCircleShapeNew(cpBody *body, cpFloat radius, cpVect offset);$/;"	p	signature:(cpBody *body, cpFloat radius, cpVect offset)
cpCircleShapeNew	src/cpShape.c	/^cpCircleShapeNew(cpBody *body, cpFloat radius, cpVect offset)$/;"	f	signature:(cpBody *body, cpFloat radius, cpVect offset)
cpCircleShapeSegmentQuery	src/cpShape.c	/^cpCircleShapeSegmentQuery(cpCircleShape *circle, cpVect a, cpVect b, cpSegmentQueryInfo *info)$/;"	f	file:	signature:(cpCircleShape *circle, cpVect a, cpVect b, cpSegmentQueryInfo *info)
cpCircleShapeSetOffset	include/chipmunk/chipmunk_unsafe.h	/^void cpCircleShapeSetOffset(cpShape *shape, cpVect offset);$/;"	p	signature:(cpShape *shape, cpVect offset)
cpCircleShapeSetOffset	src/cpShape.c	/^cpCircleShapeSetOffset(cpShape *shape, cpVect offset)$/;"	f	signature:(cpShape *shape, cpVect offset)
cpCircleShapeSetRadius	include/chipmunk/chipmunk_unsafe.h	/^void cpCircleShapeSetRadius(cpShape *shape, cpFloat radius);$/;"	p	signature:(cpShape *shape, cpFloat radius)
cpCircleShapeSetRadius	src/cpShape.c	/^cpCircleShapeSetRadius(cpShape *shape, cpFloat radius)$/;"	f	signature:(cpShape *shape, cpFloat radius)
cpClosetPointOnSegment	include/chipmunk/chipmunk_private.h	/^cpClosetPointOnSegment(const cpVect p, const cpVect a, const cpVect b)$/;"	f	signature:(const cpVect p, const cpVect a, const cpVect b)
cpCollideShapes	include/chipmunk/chipmunk_private.h	/^int cpCollideShapes(const cpShape *a, const cpShape *b, cpContact *arr);$/;"	p	signature:(const cpShape *a, const cpShape *b, cpContact *arr)
cpCollideShapes	src/cpCollision.c	/^cpCollideShapes(const cpShape *a, const cpShape *b, cpContact *arr)$/;"	f	signature:(const cpShape *a, const cpShape *b, cpContact *arr)
cpCollisionBeginFunc	include/chipmunk/cpArbiter.h	/^typedef cpBool (*cpCollisionBeginFunc)(cpArbiter *arb, cpSpace *space, void *data);$/;"	t
cpCollisionHandler	include/chipmunk/chipmunk.h	/^typedef struct cpCollisionHandler cpCollisionHandler;$/;"	t	typeref:struct:cpCollisionHandler
cpCollisionHandler	include/chipmunk/cpArbiter.h	/^struct cpCollisionHandler {$/;"	s
cpCollisionHandler::a	include/chipmunk/cpArbiter.h	/^	cpCollisionType a;$/;"	m	struct:cpCollisionHandler	access:public
cpCollisionHandler::b	include/chipmunk/cpArbiter.h	/^	cpCollisionType b;$/;"	m	struct:cpCollisionHandler	access:public
cpCollisionHandler::begin	include/chipmunk/cpArbiter.h	/^	cpCollisionBeginFunc begin;$/;"	m	struct:cpCollisionHandler	access:public
cpCollisionHandler::data	include/chipmunk/cpArbiter.h	/^	void *data;$/;"	m	struct:cpCollisionHandler	access:public
cpCollisionHandler::postSolve	include/chipmunk/cpArbiter.h	/^	cpCollisionPostSolveFunc postSolve;$/;"	m	struct:cpCollisionHandler	access:public
cpCollisionHandler::preSolve	include/chipmunk/cpArbiter.h	/^	cpCollisionPreSolveFunc preSolve;$/;"	m	struct:cpCollisionHandler	access:public
cpCollisionHandler::separate	include/chipmunk/cpArbiter.h	/^	cpCollisionSeparateFunc separate;$/;"	m	struct:cpCollisionHandler	access:public
cpCollisionPostSolveFunc	include/chipmunk/cpArbiter.h	/^typedef void (*cpCollisionPostSolveFunc)(cpArbiter *arb, cpSpace *space, void *data);$/;"	t
cpCollisionPreSolveFunc	include/chipmunk/cpArbiter.h	/^typedef cpBool (*cpCollisionPreSolveFunc)(cpArbiter *arb, cpSpace *space, void *data);$/;"	t
cpCollisionSeparateFunc	include/chipmunk/cpArbiter.h	/^typedef void (*cpCollisionSeparateFunc)(cpArbiter *arb, cpSpace *space, void *data);$/;"	t
cpCollisionType	include/chipmunk/chipmunk_types.h	/^	typedef CP_COLLISION_TYPE_TYPE cpCollisionType;$/;"	t
cpCollisionType	include/chipmunk/chipmunk_types.h	/^	typedef uintptr_t cpCollisionType;$/;"	t
cpComponentNode	include/chipmunk/cpBody.h	/^typedef struct cpComponentNode {$/;"	s
cpComponentNode	include/chipmunk/cpBody.h	/^} cpComponentNode;$/;"	t	typeref:struct:cpComponentNode
cpComponentNode::idleTime	include/chipmunk/cpBody.h	/^	cpFloat idleTime;$/;"	m	struct:cpComponentNode	access:public
cpComponentNode::next	include/chipmunk/cpBody.h	/^	cpBody *next;$/;"	m	struct:cpComponentNode	access:public
cpComponentNode::root	include/chipmunk/cpBody.h	/^	cpBody *root;$/;"	m	struct:cpComponentNode	access:public
cpConstraint	include/chipmunk/chipmunk.h	/^typedef struct cpConstraint cpConstraint;$/;"	t	typeref:struct:cpConstraint
cpConstraint	include/chipmunk/constraints/cpConstraint.h	/^struct cpConstraint {$/;"	s
cpConstraint::CP_PRIVATE	include/chipmunk/constraints/cpConstraint.h	/^	CP_PRIVATE(const cpConstraintClass *klass);$/;"	p	struct:cpConstraint	access:public	signature:(const cpConstraintClass *klass)
cpConstraint::CP_PRIVATE	include/chipmunk/constraints/cpConstraint.h	/^	CP_PRIVATE(cpConstraint *next_a);$/;"	p	struct:cpConstraint	access:public	signature:(cpConstraint *next_a)
cpConstraint::CP_PRIVATE	include/chipmunk/constraints/cpConstraint.h	/^	CP_PRIVATE(cpConstraint *next_b);$/;"	p	struct:cpConstraint	access:public	signature:(cpConstraint *next_b)
cpConstraint::CP_PRIVATE	include/chipmunk/constraints/cpConstraint.h	/^	CP_PRIVATE(cpSpace *space);$/;"	p	struct:cpConstraint	access:public	signature:(cpSpace *space)
cpConstraint::a	include/chipmunk/constraints/cpConstraint.h	/^	cpBody *a;$/;"	m	struct:cpConstraint	access:public
cpConstraint::b	include/chipmunk/constraints/cpConstraint.h	/^	cpBody *b;$/;"	m	struct:cpConstraint	access:public
cpConstraint::data	include/chipmunk/constraints/cpConstraint.h	/^	cpDataPointer data;$/;"	m	struct:cpConstraint	access:public
cpConstraint::errorBias	include/chipmunk/constraints/cpConstraint.h	/^	cpFloat errorBias;$/;"	m	struct:cpConstraint	access:public
cpConstraint::maxBias	include/chipmunk/constraints/cpConstraint.h	/^	cpFloat maxBias;$/;"	m	struct:cpConstraint	access:public
cpConstraint::maxForce	include/chipmunk/constraints/cpConstraint.h	/^	cpFloat maxForce;$/;"	m	struct:cpConstraint	access:public
cpConstraint::postSolve	include/chipmunk/constraints/cpConstraint.h	/^	cpConstraintPostSolveFunc postSolve;$/;"	m	struct:cpConstraint	access:public
cpConstraint::preSolve	include/chipmunk/constraints/cpConstraint.h	/^	cpConstraintPreSolveFunc preSolve;$/;"	m	struct:cpConstraint	access:public
cpConstraintActivateBodies	include/chipmunk/constraints/cpConstraint.h	/^static inline void cpConstraintActivateBodies(cpConstraint *constraint)$/;"	f	signature:(cpConstraint *constraint)
cpConstraintApplyCachedImpulseImpl	include/chipmunk/constraints/cpConstraint.h	/^typedef void (*cpConstraintApplyCachedImpulseImpl)(cpConstraint *constraint, cpFloat dt_coef);$/;"	t
cpConstraintApplyImpulseImpl	include/chipmunk/constraints/cpConstraint.h	/^typedef void (*cpConstraintApplyImpulseImpl)(cpConstraint *constraint, cpFloat dt);$/;"	t
cpConstraintCheckCast	include/chipmunk/constraints/cpConstraint.h	/^#define cpConstraintCheckCast(/;"	d
cpConstraintClass	include/chipmunk/constraints/cpConstraint.h	/^struct cpConstraintClass {$/;"	s
cpConstraintClass	include/chipmunk/constraints/cpConstraint.h	/^typedef struct cpConstraintClass cpConstraintClass;$/;"	t	typeref:struct:cpConstraintClass
cpConstraintClass::applyCachedImpulse	include/chipmunk/constraints/cpConstraint.h	/^	cpConstraintApplyCachedImpulseImpl applyCachedImpulse;$/;"	m	struct:cpConstraintClass	access:public
cpConstraintClass::applyImpulse	include/chipmunk/constraints/cpConstraint.h	/^	cpConstraintApplyImpulseImpl applyImpulse;$/;"	m	struct:cpConstraintClass	access:public
cpConstraintClass::getImpulse	include/chipmunk/constraints/cpConstraint.h	/^	cpConstraintGetImpulseImpl getImpulse;$/;"	m	struct:cpConstraintClass	access:public
cpConstraintClass::preStep	include/chipmunk/constraints/cpConstraint.h	/^	cpConstraintPreStepImpl preStep;$/;"	m	struct:cpConstraintClass	access:public
cpConstraintDestroy	include/chipmunk/constraints/cpConstraint.h	/^void cpConstraintDestroy(cpConstraint *constraint);$/;"	p	signature:(cpConstraint *constraint)
cpConstraintDestroy	src/constraints/cpConstraint.c	/^void cpConstraintDestroy(cpConstraint *constraint){}$/;"	f	signature:(cpConstraint *constraint)
cpConstraintFree	include/chipmunk/constraints/cpConstraint.h	/^void cpConstraintFree(cpConstraint *constraint);$/;"	p	signature:(cpConstraint *constraint)
cpConstraintFree	src/constraints/cpConstraint.c	/^cpConstraintFree(cpConstraint *constraint)$/;"	f	signature:(cpConstraint *constraint)
cpConstraintGetA	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpConstraintGetA);$/;"	v
cpConstraintGetB	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpConstraintGetB);$/;"	v
cpConstraintGetImpulse	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpConstraintGetImpulse);$/;"	v
cpConstraintGetImpulse	include/chipmunk/constraints/cpConstraint.h	/^static inline cpFloat cpConstraintGetImpulse(cpConstraint *constraint)$/;"	f	signature:(cpConstraint *constraint)
cpConstraintGetImpulseImpl	include/chipmunk/constraints/cpConstraint.h	/^typedef cpFloat (*cpConstraintGetImpulseImpl)(cpConstraint *constraint);$/;"	t
cpConstraintInit	include/chipmunk/constraints/util.h	/^void cpConstraintInit(cpConstraint *constraint, const cpConstraintClass *klass, cpBody *a, cpBody *b);$/;"	p	signature:(cpConstraint *constraint, const cpConstraintClass *klass, cpBody *a, cpBody *b)
cpConstraintInit	src/constraints/cpConstraint.c	/^cpConstraintInit(cpConstraint *constraint, const cpConstraintClass *klass, cpBody *a, cpBody *b)$/;"	f	signature:(cpConstraint *constraint, const cpConstraintClass *klass, cpBody *a, cpBody *b)
cpConstraintNext	include/chipmunk/chipmunk_private.h	/^cpConstraintNext(cpConstraint *node, cpBody *body)$/;"	f	signature:(cpConstraint *node, cpBody *body)
cpConstraintPostSolveFunc	include/chipmunk/constraints/cpConstraint.h	/^typedef void (*cpConstraintPostSolveFunc)(cpConstraint *constraint, cpSpace *space);$/;"	t
cpConstraintPreSolveFunc	include/chipmunk/constraints/cpConstraint.h	/^typedef void (*cpConstraintPreSolveFunc)(cpConstraint *constraint, cpSpace *space);$/;"	t
cpConstraintPreStepImpl	include/chipmunk/constraints/cpConstraint.h	/^typedef void (*cpConstraintPreStepImpl)(cpConstraint *constraint, cpFloat dt);$/;"	t
cpContact	include/chipmunk/chipmunk_private.h	/^struct cpContact {$/;"	s
cpContact	include/chipmunk/cpArbiter.h	/^typedef struct cpContact cpContact;$/;"	t	typeref:struct:cpContact
cpContact::bias	include/chipmunk/chipmunk_private.h	/^	cpFloat bias;$/;"	m	struct:cpContact	access:public
cpContact::bounce	include/chipmunk/chipmunk_private.h	/^	cpFloat nMass, tMass, bounce;$/;"	m	struct:cpContact	access:public
cpContact::dist	include/chipmunk/chipmunk_private.h	/^	cpFloat dist;$/;"	m	struct:cpContact	access:public
cpContact::hash	include/chipmunk/chipmunk_private.h	/^	cpHashValue hash;$/;"	m	struct:cpContact	access:public
cpContact::jBias	include/chipmunk/chipmunk_private.h	/^	cpFloat jnAcc, jtAcc, jBias;$/;"	m	struct:cpContact	access:public
cpContact::jnAcc	include/chipmunk/chipmunk_private.h	/^	cpFloat jnAcc, jtAcc, jBias;$/;"	m	struct:cpContact	access:public
cpContact::jtAcc	include/chipmunk/chipmunk_private.h	/^	cpFloat jnAcc, jtAcc, jBias;$/;"	m	struct:cpContact	access:public
cpContact::n	include/chipmunk/chipmunk_private.h	/^	cpVect p, n;$/;"	m	struct:cpContact	access:public
cpContact::nMass	include/chipmunk/chipmunk_private.h	/^	cpFloat nMass, tMass, bounce;$/;"	m	struct:cpContact	access:public
cpContact::p	include/chipmunk/chipmunk_private.h	/^	cpVect p, n;$/;"	m	struct:cpContact	access:public
cpContact::r1	include/chipmunk/chipmunk_private.h	/^	cpVect r1, r2;$/;"	m	struct:cpContact	access:public
cpContact::r2	include/chipmunk/chipmunk_private.h	/^	cpVect r1, r2;$/;"	m	struct:cpContact	access:public
cpContact::tMass	include/chipmunk/chipmunk_private.h	/^	cpFloat nMass, tMass, bounce;$/;"	m	struct:cpContact	access:public
cpContactBuffer	src/cpSpaceStep.c	/^typedef struct cpContactBuffer {$/;"	s	file:
cpContactBuffer	src/cpSpaceStep.c	/^} cpContactBuffer;$/;"	t	typeref:struct:cpContactBuffer	file:
cpContactBuffer::contacts	src/cpSpaceStep.c	/^	cpContact contacts[CP_CONTACTS_BUFFER_SIZE];$/;"	m	struct:cpContactBuffer	file:	access:public
cpContactBuffer::header	src/cpSpaceStep.c	/^	cpContactBufferHeader header;$/;"	m	struct:cpContactBuffer	file:	access:public
cpContactBufferGetArray	include/chipmunk/chipmunk_private.h	/^cpContact *cpContactBufferGetArray(cpSpace *space);$/;"	p	signature:(cpSpace *space)
cpContactBufferGetArray	src/cpSpaceStep.c	/^cpContactBufferGetArray(cpSpace *space)$/;"	f	signature:(cpSpace *space)
cpContactBufferHeader	include/chipmunk/cpSpace.h	/^typedef struct cpContactBufferHeader cpContactBufferHeader;$/;"	t	typeref:struct:cpContactBufferHeader
cpContactBufferHeader	src/cpSpaceStep.c	/^struct cpContactBufferHeader {$/;"	s	file:
cpContactBufferHeader::next	src/cpSpaceStep.c	/^	cpContactBufferHeader *next;$/;"	m	struct:cpContactBufferHeader	file:	access:public
cpContactBufferHeader::numContacts	src/cpSpaceStep.c	/^	unsigned int numContacts;$/;"	m	struct:cpContactBufferHeader	file:	access:public
cpContactBufferHeader::stamp	src/cpSpaceStep.c	/^	cpTimestamp stamp;$/;"	m	struct:cpContactBufferHeader	file:	access:public
cpContactBufferHeaderInit	src/cpSpaceStep.c	/^cpContactBufferHeaderInit(cpContactBufferHeader *header, cpTimestamp stamp, cpContactBufferHeader *splice)$/;"	f	file:	signature:(cpContactBufferHeader *header, cpTimestamp stamp, cpContactBufferHeader *splice)
cpContactInit	include/chipmunk/chipmunk_private.h	/^cpContact* cpContactInit(cpContact *con, cpVect p, cpVect n, cpFloat dist, cpHashValue hash);$/;"	p	signature:(cpContact *con, cpVect p, cpVect n, cpFloat dist, cpHashValue hash)
cpContactInit	src/cpArbiter.c	/^cpContactInit(cpContact *con, cpVect p, cpVect n, cpFloat dist, cpHashValue hash)$/;"	f	signature:(cpContact *con, cpVect p, cpVect n, cpFloat dist, cpHashValue hash)
cpContactPointSet	include/chipmunk/cpArbiter.h	/^typedef struct cpContactPointSet {$/;"	s
cpContactPointSet	include/chipmunk/cpArbiter.h	/^} cpContactPointSet;$/;"	t	typeref:struct:cpContactPointSet
cpContactPointSet::__anon1::dist	include/chipmunk/cpArbiter.h	/^		cpFloat dist;$/;"	m	struct:cpContactPointSet::__anon1	access:public
cpContactPointSet::__anon1::normal	include/chipmunk/cpArbiter.h	/^		cpVect normal;$/;"	m	struct:cpContactPointSet::__anon1	access:public
cpContactPointSet::__anon1::point	include/chipmunk/cpArbiter.h	/^		cpVect point;$/;"	m	struct:cpContactPointSet::__anon1	access:public
cpContactPointSet::count	include/chipmunk/cpArbiter.h	/^	int count;$/;"	m	struct:cpContactPointSet	access:public
cpContactPointSet::points	include/chipmunk/cpArbiter.h	/^	} points[CP_MAX_CONTACTS_PER_ARBITER];$/;"	m	struct:cpContactPointSet	typeref:struct:cpContactPointSet::__anon1	access:public
cpConvexHull	include/chipmunk/chipmunk.h	/^int cpConvexHull(int count, cpVect *verts, cpVect *result, int *first, cpFloat tol);$/;"	p	signature:(int count, cpVect *verts, cpVect *result, int *first, cpFloat tol)
cpConvexHull	src/chipmunk.c	/^cpConvexHull(int count, cpVect *verts, cpVect *result, int *first, cpFloat tol)$/;"	f	signature:(int count, cpVect *verts, cpVect *result, int *first, cpFloat tol)
cpDampedRotarySpring	include/chipmunk/constraints/cpDampedRotarySpring.h	/^typedef struct cpDampedRotarySpring {$/;"	s
cpDampedRotarySpring	include/chipmunk/constraints/cpDampedRotarySpring.h	/^} cpDampedRotarySpring;$/;"	t	typeref:struct:cpDampedRotarySpring
cpDampedRotarySpring::constraint	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpConstraint constraint;$/;"	m	struct:cpDampedRotarySpring	access:public
cpDampedRotarySpring::damping	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpFloat damping;$/;"	m	struct:cpDampedRotarySpring	access:public
cpDampedRotarySpring::iSum	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpFloat iSum;$/;"	m	struct:cpDampedRotarySpring	access:public
cpDampedRotarySpring::restAngle	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpFloat restAngle;$/;"	m	struct:cpDampedRotarySpring	access:public
cpDampedRotarySpring::springTorqueFunc	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpDampedRotarySpringTorqueFunc springTorqueFunc;$/;"	m	struct:cpDampedRotarySpring	access:public
cpDampedRotarySpring::stiffness	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpFloat stiffness;$/;"	m	struct:cpDampedRotarySpring	access:public
cpDampedRotarySpring::target_wrn	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpFloat target_wrn;$/;"	m	struct:cpDampedRotarySpring	access:public
cpDampedRotarySpring::w_coef	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpFloat w_coef;$/;"	m	struct:cpDampedRotarySpring	access:public
cpDampedRotarySpringAlloc	include/chipmunk/constraints/cpDampedRotarySpring.h	/^cpDampedRotarySpring* cpDampedRotarySpringAlloc(void);$/;"	p	signature:(void)
cpDampedRotarySpringGetClass	include/chipmunk/constraints/cpDampedRotarySpring.h	/^const cpConstraintClass *cpDampedRotarySpringGetClass(void);$/;"	p	signature:(void)
cpDampedRotarySpringInit	include/chipmunk/constraints/cpDampedRotarySpring.h	/^cpDampedRotarySpring* cpDampedRotarySpringInit(cpDampedRotarySpring *joint, cpBody *a, cpBody *b, cpFloat restAngle, cpFloat stiffness, cpFloat damping);$/;"	p	signature:(cpDampedRotarySpring *joint, cpBody *a, cpBody *b, cpFloat restAngle, cpFloat stiffness, cpFloat damping)
cpDampedRotarySpringInit	src/constraints/cpDampedRotarySpring.c	/^cpDampedRotarySpringInit(cpDampedRotarySpring *spring, cpBody *a, cpBody *b, cpFloat restAngle, cpFloat stiffness, cpFloat damping)$/;"	f	signature:(cpDampedRotarySpring *spring, cpBody *a, cpBody *b, cpFloat restAngle, cpFloat stiffness, cpFloat damping)
cpDampedRotarySpringNew	include/chipmunk/constraints/cpDampedRotarySpring.h	/^cpConstraint* cpDampedRotarySpringNew(cpBody *a, cpBody *b, cpFloat restAngle, cpFloat stiffness, cpFloat damping);$/;"	p	signature:(cpBody *a, cpBody *b, cpFloat restAngle, cpFloat stiffness, cpFloat damping)
cpDampedRotarySpringNew	src/constraints/cpDampedRotarySpring.c	/^cpDampedRotarySpringNew(cpBody *a, cpBody *b, cpFloat restAngle, cpFloat stiffness, cpFloat damping)$/;"	f	signature:(cpBody *a, cpBody *b, cpFloat restAngle, cpFloat stiffness, cpFloat damping)
cpDampedRotarySpringTorqueFunc	include/chipmunk/constraints/cpDampedRotarySpring.h	/^typedef cpFloat (*cpDampedRotarySpringTorqueFunc)(struct cpConstraint *spring, cpFloat relativeAngle);$/;"	t
cpDampedSpring	include/chipmunk/constraints/cpDampedSpring.h	/^struct cpDampedSpring {$/;"	s
cpDampedSpring	include/chipmunk/constraints/cpDampedSpring.h	/^typedef struct cpDampedSpring cpDampedSpring;$/;"	t	typeref:struct:cpDampedSpring
cpDampedSpring::anchr1	include/chipmunk/constraints/cpDampedSpring.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpring::anchr2	include/chipmunk/constraints/cpDampedSpring.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpring::constraint	include/chipmunk/constraints/cpDampedSpring.h	/^	cpConstraint constraint;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpring::damping	include/chipmunk/constraints/cpDampedSpring.h	/^	cpFloat damping;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpring::n	include/chipmunk/constraints/cpDampedSpring.h	/^	cpVect n;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpring::nMass	include/chipmunk/constraints/cpDampedSpring.h	/^	cpFloat nMass;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpring::r1	include/chipmunk/constraints/cpDampedSpring.h	/^	cpVect r1, r2;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpring::r2	include/chipmunk/constraints/cpDampedSpring.h	/^	cpVect r1, r2;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpring::restLength	include/chipmunk/constraints/cpDampedSpring.h	/^	cpFloat restLength;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpring::springForceFunc	include/chipmunk/constraints/cpDampedSpring.h	/^	cpDampedSpringForceFunc springForceFunc;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpring::stiffness	include/chipmunk/constraints/cpDampedSpring.h	/^	cpFloat stiffness;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpring::target_vrn	include/chipmunk/constraints/cpDampedSpring.h	/^	cpFloat target_vrn;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpring::v_coef	include/chipmunk/constraints/cpDampedSpring.h	/^	cpFloat v_coef;$/;"	m	struct:cpDampedSpring	access:public
cpDampedSpringAlloc	include/chipmunk/constraints/cpDampedSpring.h	/^cpDampedSpring* cpDampedSpringAlloc(void);$/;"	p	signature:(void)
cpDampedSpringForceFunc	include/chipmunk/constraints/cpDampedSpring.h	/^typedef cpFloat (*cpDampedSpringForceFunc)(cpConstraint *spring, cpFloat dist);$/;"	t
cpDampedSpringGetClass	include/chipmunk/constraints/cpDampedSpring.h	/^const cpConstraintClass *cpDampedSpringGetClass(void);$/;"	p	signature:(void)
cpDampedSpringInit	include/chipmunk/constraints/cpDampedSpring.h	/^cpDampedSpring* cpDampedSpringInit(cpDampedSpring *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat restLength, cpFloat stiffness, cpFloat damping);$/;"	p	signature:(cpDampedSpring *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat restLength, cpFloat stiffness, cpFloat damping)
cpDampedSpringInit	src/constraints/cpDampedSpring.c	/^cpDampedSpringInit(cpDampedSpring *spring, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat restLength, cpFloat stiffness, cpFloat damping)$/;"	f	signature:(cpDampedSpring *spring, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat restLength, cpFloat stiffness, cpFloat damping)
cpDampedSpringNew	include/chipmunk/constraints/cpDampedSpring.h	/^cpConstraint* cpDampedSpringNew(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat restLength, cpFloat stiffness, cpFloat damping);$/;"	p	signature:(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat restLength, cpFloat stiffness, cpFloat damping)
cpDampedSpringNew	src/constraints/cpDampedSpring.c	/^cpDampedSpringNew(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat restLength, cpFloat stiffness, cpFloat damping)$/;"	f	signature:(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat restLength, cpFloat stiffness, cpFloat damping)
cpDataPointer	include/chipmunk/chipmunk_types.h	/^	typedef CP_DATA_POINTER_TYPE cpDataPointer;$/;"	t
cpDataPointer	include/chipmunk/chipmunk_types.h	/^	typedef void * cpDataPointer;$/;"	t
cpDefaultCollisionHandler	src/cpSpace.c	/^cpCollisionHandler cpDefaultCollisionHandler = {0, 0, alwaysCollide, alwaysCollide, nothing, nothing, NULL};$/;"	v
cpEnableSegmentToSegmentCollisions	include/chipmunk/chipmunk.h	/^void cpEnableSegmentToSegmentCollisions(void);$/;"	p	signature:(void)
cpEnableSegmentToSegmentCollisions	src/cpCollision.c	/^cpEnableSegmentToSegmentCollisions(void)$/;"	f	signature:(void)
cpFalse	include/chipmunk/chipmunk_types.h	/^	#define cpFalse /;"	d
cpFloat	include/chipmunk/chipmunk_types.h	/^	typedef double cpFloat;$/;"	t
cpFloat	include/chipmunk/chipmunk_types.h	/^	typedef float cpFloat;$/;"	t
cpGearJoint	include/chipmunk/constraints/cpGearJoint.h	/^typedef struct cpGearJoint {$/;"	s
cpGearJoint	include/chipmunk/constraints/cpGearJoint.h	/^} cpGearJoint;$/;"	t	typeref:struct:cpGearJoint
cpGearJoint::bias	include/chipmunk/constraints/cpGearJoint.h	/^	cpFloat bias;$/;"	m	struct:cpGearJoint	access:public
cpGearJoint::constraint	include/chipmunk/constraints/cpGearJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpGearJoint	access:public
cpGearJoint::iSum	include/chipmunk/constraints/cpGearJoint.h	/^	cpFloat iSum;$/;"	m	struct:cpGearJoint	access:public
cpGearJoint::jAcc	include/chipmunk/constraints/cpGearJoint.h	/^	cpFloat jAcc;$/;"	m	struct:cpGearJoint	access:public
cpGearJoint::phase	include/chipmunk/constraints/cpGearJoint.h	/^	cpFloat phase, ratio;$/;"	m	struct:cpGearJoint	access:public
cpGearJoint::ratio	include/chipmunk/constraints/cpGearJoint.h	/^	cpFloat phase, ratio;$/;"	m	struct:cpGearJoint	access:public
cpGearJoint::ratio_inv	include/chipmunk/constraints/cpGearJoint.h	/^	cpFloat ratio_inv;$/;"	m	struct:cpGearJoint	access:public
cpGearJointAlloc	include/chipmunk/constraints/cpGearJoint.h	/^cpGearJoint* cpGearJointAlloc(void);$/;"	p	signature:(void)
cpGearJointGetClass	include/chipmunk/constraints/cpGearJoint.h	/^const cpConstraintClass *cpGearJointGetClass(void);$/;"	p	signature:(void)
cpGearJointGetRatio	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpGearJointGetRatio);$/;"	v
cpGearJointInit	include/chipmunk/constraints/cpGearJoint.h	/^cpGearJoint* cpGearJointInit(cpGearJoint *joint, cpBody *a, cpBody *b, cpFloat phase, cpFloat ratio);$/;"	p	signature:(cpGearJoint *joint, cpBody *a, cpBody *b, cpFloat phase, cpFloat ratio)
cpGearJointInit	src/constraints/cpGearJoint.c	/^cpGearJointInit(cpGearJoint *joint, cpBody *a, cpBody *b, cpFloat phase, cpFloat ratio)$/;"	f	signature:(cpGearJoint *joint, cpBody *a, cpBody *b, cpFloat phase, cpFloat ratio)
cpGearJointNew	include/chipmunk/constraints/cpGearJoint.h	/^cpConstraint* cpGearJointNew(cpBody *a, cpBody *b, cpFloat phase, cpFloat ratio);$/;"	p	signature:(cpBody *a, cpBody *b, cpFloat phase, cpFloat ratio)
cpGearJointNew	src/constraints/cpGearJoint.c	/^cpGearJointNew(cpBody *a, cpBody *b, cpFloat phase, cpFloat ratio)$/;"	f	signature:(cpBody *a, cpBody *b, cpFloat phase, cpFloat ratio)
cpGearJointSetRatio	include/chipmunk/constraints/cpGearJoint.h	/^void cpGearJointSetRatio(cpConstraint *constraint, cpFloat value);$/;"	p	signature:(cpConstraint *constraint, cpFloat value)
cpGearJointSetRatio	src/constraints/cpGearJoint.c	/^cpGearJointSetRatio(cpConstraint *constraint, cpFloat value)$/;"	f	signature:(cpConstraint *constraint, cpFloat value)
cpGrooveJoint	include/chipmunk/constraints/cpGrooveJoint.h	/^typedef struct cpGrooveJoint {$/;"	s
cpGrooveJoint	include/chipmunk/constraints/cpGrooveJoint.h	/^} cpGrooveJoint;$/;"	t	typeref:struct:cpGrooveJoint
cpGrooveJoint::anchr2	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect  anchr2;$/;"	m	struct:cpGrooveJoint	access:public
cpGrooveJoint::bias	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect bias;$/;"	m	struct:cpGrooveJoint	access:public
cpGrooveJoint::clamp	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpFloat clamp;$/;"	m	struct:cpGrooveJoint	access:public
cpGrooveJoint::constraint	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpGrooveJoint	access:public
cpGrooveJoint::grv_a	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect grv_n, grv_a, grv_b;$/;"	m	struct:cpGrooveJoint	access:public
cpGrooveJoint::grv_b	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect grv_n, grv_a, grv_b;$/;"	m	struct:cpGrooveJoint	access:public
cpGrooveJoint::grv_n	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect grv_n, grv_a, grv_b;$/;"	m	struct:cpGrooveJoint	access:public
cpGrooveJoint::grv_tn	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect grv_tn;$/;"	m	struct:cpGrooveJoint	access:public
cpGrooveJoint::jAcc	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect jAcc;$/;"	m	struct:cpGrooveJoint	access:public
cpGrooveJoint::k	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpMat2x2 k;$/;"	m	struct:cpGrooveJoint	access:public
cpGrooveJoint::r1	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpGrooveJoint	access:public
cpGrooveJoint::r2	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpGrooveJoint	access:public
cpGrooveJointAlloc	include/chipmunk/constraints/cpGrooveJoint.h	/^cpGrooveJoint* cpGrooveJointAlloc(void);$/;"	p	signature:(void)
cpGrooveJointGetClass	include/chipmunk/constraints/cpGrooveJoint.h	/^const cpConstraintClass *cpGrooveJointGetClass(void);$/;"	p	signature:(void)
cpGrooveJointGetGrooveA	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpGrooveJointGetGrooveA);$/;"	v
cpGrooveJointGetGrooveB	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpGrooveJointGetGrooveB);$/;"	v
cpGrooveJointInit	include/chipmunk/constraints/cpGrooveJoint.h	/^cpGrooveJoint* cpGrooveJointInit(cpGrooveJoint *joint, cpBody *a, cpBody *b, cpVect groove_a, cpVect groove_b, cpVect anchr2);$/;"	p	signature:(cpGrooveJoint *joint, cpBody *a, cpBody *b, cpVect groove_a, cpVect groove_b, cpVect anchr2)
cpGrooveJointInit	src/constraints/cpGrooveJoint.c	/^cpGrooveJointInit(cpGrooveJoint *joint, cpBody *a, cpBody *b, cpVect groove_a, cpVect groove_b, cpVect anchr2)$/;"	f	signature:(cpGrooveJoint *joint, cpBody *a, cpBody *b, cpVect groove_a, cpVect groove_b, cpVect anchr2)
cpGrooveJointNew	include/chipmunk/constraints/cpGrooveJoint.h	/^cpConstraint* cpGrooveJointNew(cpBody *a, cpBody *b, cpVect groove_a, cpVect groove_b, cpVect anchr2);$/;"	p	signature:(cpBody *a, cpBody *b, cpVect groove_a, cpVect groove_b, cpVect anchr2)
cpGrooveJointNew	src/constraints/cpGrooveJoint.c	/^cpGrooveJointNew(cpBody *a, cpBody *b, cpVect groove_a, cpVect groove_b, cpVect anchr2)$/;"	f	signature:(cpBody *a, cpBody *b, cpVect groove_a, cpVect groove_b, cpVect anchr2)
cpGrooveJointSetGrooveA	include/chipmunk/constraints/cpGrooveJoint.h	/^void cpGrooveJointSetGrooveA(cpConstraint *constraint, cpVect value);$/;"	p	signature:(cpConstraint *constraint, cpVect value)
cpGrooveJointSetGrooveA	src/constraints/cpGrooveJoint.c	/^cpGrooveJointSetGrooveA(cpConstraint *constraint, cpVect value)$/;"	f	signature:(cpConstraint *constraint, cpVect value)
cpGrooveJointSetGrooveB	include/chipmunk/constraints/cpGrooveJoint.h	/^void cpGrooveJointSetGrooveB(cpConstraint *constraint, cpVect value);$/;"	p	signature:(cpConstraint *constraint, cpVect value)
cpGrooveJointSetGrooveB	src/constraints/cpGrooveJoint.c	/^cpGrooveJointSetGrooveB(cpConstraint *constraint, cpVect value)$/;"	f	signature:(cpConstraint *constraint, cpVect value)
cpGroup	include/chipmunk/chipmunk_types.h	/^	typedef CP_GROUP_TYPE cpGroup;$/;"	t
cpGroup	include/chipmunk/chipmunk_types.h	/^	typedef uintptr_t cpGroup;$/;"	t
cpHandle	src/cpSpaceHash.c	/^struct cpHandle {$/;"	s	file:
cpHandle	src/cpSpaceHash.c	/^typedef struct cpHandle cpHandle;$/;"	t	typeref:struct:cpHandle	file:
cpHandle::obj	src/cpSpaceHash.c	/^	void *obj;$/;"	m	struct:cpHandle	file:	access:public
cpHandle::retain	src/cpSpaceHash.c	/^	int retain;$/;"	m	struct:cpHandle	file:	access:public
cpHandle::stamp	src/cpSpaceHash.c	/^	cpTimestamp stamp;$/;"	m	struct:cpHandle	file:	access:public
cpHandleInit	src/cpSpaceHash.c	/^cpHandleInit(cpHandle *hand, void *obj)$/;"	f	file:	signature:(cpHandle *hand, void *obj)
cpHandleRelease	src/cpSpaceHash.c	/^cpHandleRelease(cpHandle *hand, cpArray *pooledHandles)$/;"	f	file:	signature:(cpHandle *hand, cpArray *pooledHandles)
cpHandleRetain	src/cpSpaceHash.c	/^static inline void cpHandleRetain(cpHandle *hand){hand->retain++;}$/;"	f	file:	signature:(cpHandle *hand)
cpHashSet	include/chipmunk/chipmunk.h	/^typedef struct cpHashSet cpHashSet;$/;"	t	typeref:struct:cpHashSet
cpHashSet	src/cpHashSet.c	/^struct cpHashSet {$/;"	s	file:
cpHashSet::allocatedBuffers	src/cpHashSet.c	/^	cpArray *allocatedBuffers;$/;"	m	struct:cpHashSet	file:	access:public
cpHashSet::default_value	src/cpHashSet.c	/^	void *default_value;$/;"	m	struct:cpHashSet	file:	access:public
cpHashSet::entries	src/cpHashSet.c	/^	unsigned int entries, size;$/;"	m	struct:cpHashSet	file:	access:public
cpHashSet::eql	src/cpHashSet.c	/^	cpHashSetEqlFunc eql;$/;"	m	struct:cpHashSet	file:	access:public
cpHashSet::pooledBins	src/cpHashSet.c	/^	cpHashSetBin *pooledBins;$/;"	m	struct:cpHashSet	file:	access:public
cpHashSet::size	src/cpHashSet.c	/^	unsigned int entries, size;$/;"	m	struct:cpHashSet	file:	access:public
cpHashSet::table	src/cpHashSet.c	/^	cpHashSetBin **table;$/;"	m	struct:cpHashSet	file:	access:public
cpHashSetBin	src/cpHashSet.c	/^typedef struct cpHashSetBin {$/;"	s	file:
cpHashSetBin	src/cpHashSet.c	/^} cpHashSetBin;$/;"	t	typeref:struct:cpHashSetBin	file:
cpHashSetBin::elt	src/cpHashSet.c	/^	void *elt;$/;"	m	struct:cpHashSetBin	file:	access:public
cpHashSetBin::hash	src/cpHashSet.c	/^	cpHashValue hash;$/;"	m	struct:cpHashSetBin	file:	access:public
cpHashSetBin::next	src/cpHashSet.c	/^	struct cpHashSetBin *next;$/;"	m	struct:cpHashSetBin	typeref:struct:cpHashSetBin::cpHashSetBin	file:	access:public
cpHashSetCount	include/chipmunk/chipmunk_private.h	/^int cpHashSetCount(cpHashSet *set);$/;"	p	signature:(cpHashSet *set)
cpHashSetCount	src/cpHashSet.c	/^cpHashSetCount(cpHashSet *set)$/;"	f	signature:(cpHashSet *set)
cpHashSetEach	include/chipmunk/chipmunk_private.h	/^void cpHashSetEach(cpHashSet *set, cpHashSetIteratorFunc func, void *data);$/;"	p	signature:(cpHashSet *set, cpHashSetIteratorFunc func, void *data)
cpHashSetEach	src/cpHashSet.c	/^cpHashSetEach(cpHashSet *set, cpHashSetIteratorFunc func, void *data)$/;"	f	signature:(cpHashSet *set, cpHashSetIteratorFunc func, void *data)
cpHashSetEqlFunc	include/chipmunk/chipmunk_private.h	/^typedef cpBool (*cpHashSetEqlFunc)(void *ptr, void *elt);$/;"	t
cpHashSetFilter	include/chipmunk/chipmunk_private.h	/^void cpHashSetFilter(cpHashSet *set, cpHashSetFilterFunc func, void *data);$/;"	p	signature:(cpHashSet *set, cpHashSetFilterFunc func, void *data)
cpHashSetFilter	src/cpHashSet.c	/^cpHashSetFilter(cpHashSet *set, cpHashSetFilterFunc func, void *data)$/;"	f	signature:(cpHashSet *set, cpHashSetFilterFunc func, void *data)
cpHashSetFilterFunc	include/chipmunk/chipmunk_private.h	/^typedef cpBool (*cpHashSetFilterFunc)(void *elt, void *data);$/;"	t
cpHashSetFind	include/chipmunk/chipmunk_private.h	/^void *cpHashSetFind(cpHashSet *set, cpHashValue hash, void *ptr);$/;"	p	signature:(cpHashSet *set, cpHashValue hash, void *ptr)
cpHashSetFind	src/cpHashSet.c	/^cpHashSetFind(cpHashSet *set, cpHashValue hash, void *ptr)$/;"	f	signature:(cpHashSet *set, cpHashValue hash, void *ptr)
cpHashSetFree	include/chipmunk/chipmunk_private.h	/^void cpHashSetFree(cpHashSet *set);$/;"	p	signature:(cpHashSet *set)
cpHashSetFree	src/cpHashSet.c	/^cpHashSetFree(cpHashSet *set)$/;"	f	signature:(cpHashSet *set)
cpHashSetInsert	include/chipmunk/chipmunk_private.h	/^void *cpHashSetInsert(cpHashSet *set, cpHashValue hash, void *ptr, void *data, cpHashSetTransFunc trans);$/;"	p	signature:(cpHashSet *set, cpHashValue hash, void *ptr, void *data, cpHashSetTransFunc trans)
cpHashSetInsert	src/cpHashSet.c	/^cpHashSetInsert(cpHashSet *set, cpHashValue hash, void *ptr, void *data, cpHashSetTransFunc trans)$/;"	f	signature:(cpHashSet *set, cpHashValue hash, void *ptr, void *data, cpHashSetTransFunc trans)
cpHashSetIteratorFunc	include/chipmunk/chipmunk_private.h	/^typedef void (*cpHashSetIteratorFunc)(void *elt, void *data);$/;"	t
cpHashSetNew	include/chipmunk/chipmunk_private.h	/^cpHashSet *cpHashSetNew(int size, cpHashSetEqlFunc eqlFunc);$/;"	p	signature:(int size, cpHashSetEqlFunc eqlFunc)
cpHashSetNew	src/cpHashSet.c	/^cpHashSetNew(int size, cpHashSetEqlFunc eqlFunc)$/;"	f	signature:(int size, cpHashSetEqlFunc eqlFunc)
cpHashSetRemove	include/chipmunk/chipmunk_private.h	/^void *cpHashSetRemove(cpHashSet *set, cpHashValue hash, void *ptr);$/;"	p	signature:(cpHashSet *set, cpHashValue hash, void *ptr)
cpHashSetRemove	src/cpHashSet.c	/^cpHashSetRemove(cpHashSet *set, cpHashValue hash, void *ptr)$/;"	f	signature:(cpHashSet *set, cpHashValue hash, void *ptr)
cpHashSetResize	src/cpHashSet.c	/^cpHashSetResize(cpHashSet *set)$/;"	f	file:	signature:(cpHashSet *set)
cpHashSetSetDefaultValue	include/chipmunk/chipmunk_private.h	/^void cpHashSetSetDefaultValue(cpHashSet *set, void *default_value);$/;"	p	signature:(cpHashSet *set, void *default_value)
cpHashSetSetDefaultValue	src/cpHashSet.c	/^cpHashSetSetDefaultValue(cpHashSet *set, void *default_value)$/;"	f	signature:(cpHashSet *set, void *default_value)
cpHashSetTransFunc	include/chipmunk/chipmunk_private.h	/^typedef void *(*cpHashSetTransFunc)(void *ptr, void *data);$/;"	t
cpHashValue	include/chipmunk/chipmunk_types.h	/^typedef uintptr_t cpHashValue;$/;"	t
cpInitChipmunk	include/chipmunk/chipmunk.h	/^void cpInitChipmunk(void);$/;"	p	signature:(void)
cpInitChipmunk	src/chipmunk.c	/^cpInitChipmunk(void)$/;"	f	signature:(void)
cpLayers	include/chipmunk/chipmunk_types.h	/^	typedef CP_LAYERS_TYPE cpLayers;$/;"	t
cpLayers	include/chipmunk/chipmunk_types.h	/^	typedef unsigned int cpLayers;$/;"	t
cpLoopIndexes	include/chipmunk/chipmunk_private.h	/^void cpLoopIndexes(cpVect *verts, int count, int *start, int *end);$/;"	p	signature:(cpVect *verts, int count, int *start, int *end)
cpLoopIndexes	src/chipmunk.c	/^cpLoopIndexes(cpVect *verts, int count, int *start, int *end)$/;"	f	signature:(cpVect *verts, int count, int *start, int *end)
cpMat2x2	include/chipmunk/chipmunk_types.h	/^typedef struct cpMat2x2 {$/;"	s
cpMat2x2	include/chipmunk/chipmunk_types.h	/^} cpMat2x2;$/;"	t	typeref:struct:cpMat2x2
cpMat2x2::a	include/chipmunk/chipmunk_types.h	/^	cpFloat a, b, c, d;$/;"	m	struct:cpMat2x2	access:public
cpMat2x2::b	include/chipmunk/chipmunk_types.h	/^	cpFloat a, b, c, d;$/;"	m	struct:cpMat2x2	access:public
cpMat2x2::c	include/chipmunk/chipmunk_types.h	/^	cpFloat a, b, c, d;$/;"	m	struct:cpMat2x2	access:public
cpMat2x2::d	include/chipmunk/chipmunk_types.h	/^	cpFloat a, b, c, d;$/;"	m	struct:cpMat2x2	access:public
cpMat2x2New	include/chipmunk/cpVect.h	/^cpMat2x2New(cpFloat a, cpFloat b, cpFloat c, cpFloat d)$/;"	f	signature:(cpFloat a, cpFloat b, cpFloat c, cpFloat d)
cpMat2x2Transform	include/chipmunk/cpVect.h	/^cpMat2x2Transform(cpMat2x2 m, cpVect v)$/;"	f	signature:(cpMat2x2 m, cpVect v)
cpMessage	include/chipmunk/chipmunk.h	/^void cpMessage(const char *condition, const char *file, int line, int isError, int isHardError, const char *message, ...);$/;"	p	signature:(const char *condition, const char *file, int line, int isError, int isHardError, const char *message, ...)
cpMessage	src/chipmunk.c	/^cpMessage(const char *condition, const char *file, int line, cpBool isError, cpBool isHardError, const char *message, ...)$/;"	f	signature:(const char *condition, const char *file, int line, cpBool isError, cpBool isHardError, const char *message, ...)
cpMomentForBox	include/chipmunk/chipmunk.h	/^cpFloat cpMomentForBox(cpFloat m, cpFloat width, cpFloat height);$/;"	p	signature:(cpFloat m, cpFloat width, cpFloat height)
cpMomentForBox	src/chipmunk.c	/^cpMomentForBox(cpFloat m, cpFloat width, cpFloat height)$/;"	f	signature:(cpFloat m, cpFloat width, cpFloat height)
cpMomentForBox2	include/chipmunk/chipmunk.h	/^cpFloat cpMomentForBox2(cpFloat m, cpBB box);$/;"	p	signature:(cpFloat m, cpBB box)
cpMomentForBox2	src/chipmunk.c	/^cpMomentForBox2(cpFloat m, cpBB box)$/;"	f	signature:(cpFloat m, cpBB box)
cpMomentForCircle	include/chipmunk/chipmunk.h	/^cpFloat cpMomentForCircle(cpFloat m, cpFloat r1, cpFloat r2, cpVect offset);$/;"	p	signature:(cpFloat m, cpFloat r1, cpFloat r2, cpVect offset)
cpMomentForCircle	src/chipmunk.c	/^cpMomentForCircle(cpFloat m, cpFloat r1, cpFloat r2, cpVect offset)$/;"	f	signature:(cpFloat m, cpFloat r1, cpFloat r2, cpVect offset)
cpMomentForPoly	include/chipmunk/chipmunk.h	/^cpFloat cpMomentForPoly(cpFloat m, int numVerts, const cpVect *verts, cpVect offset);$/;"	p	signature:(cpFloat m, int numVerts, const cpVect *verts, cpVect offset)
cpMomentForPoly	src/chipmunk.c	/^cpMomentForPoly(cpFloat m, const int numVerts, const cpVect *verts, cpVect offset)$/;"	f	signature:(cpFloat m, const int numVerts, const cpVect *verts, cpVect offset)
cpMomentForSegment	include/chipmunk/chipmunk.h	/^cpFloat cpMomentForSegment(cpFloat m, cpVect a, cpVect b);$/;"	p	signature:(cpFloat m, cpVect a, cpVect b)
cpMomentForSegment	src/chipmunk.c	/^cpMomentForSegment(cpFloat m, cpVect a, cpVect b)$/;"	f	signature:(cpFloat m, cpVect a, cpVect b)
cpNearestPointQueryInfo	include/chipmunk/cpShape.h	/^typedef struct cpNearestPointQueryInfo {$/;"	s
cpNearestPointQueryInfo	include/chipmunk/cpShape.h	/^} cpNearestPointQueryInfo;$/;"	t	typeref:struct:cpNearestPointQueryInfo
cpNearestPointQueryInfo::d	include/chipmunk/cpShape.h	/^	cpFloat d;$/;"	m	struct:cpNearestPointQueryInfo	access:public
cpNearestPointQueryInfo::p	include/chipmunk/cpShape.h	/^	cpVect p;$/;"	m	struct:cpNearestPointQueryInfo	access:public
cpNearestPointQueryInfo::shape	include/chipmunk/cpShape.h	/^	cpShape *shape;$/;"	m	struct:cpNearestPointQueryInfo	access:public
cpPinJoint	include/chipmunk/constraints/cpPinJoint.h	/^typedef struct cpPinJoint {$/;"	s
cpPinJoint	include/chipmunk/constraints/cpPinJoint.h	/^} cpPinJoint;$/;"	t	typeref:struct:cpPinJoint
cpPinJoint::anchr1	include/chipmunk/constraints/cpPinJoint.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpPinJoint	access:public
cpPinJoint::anchr2	include/chipmunk/constraints/cpPinJoint.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpPinJoint	access:public
cpPinJoint::bias	include/chipmunk/constraints/cpPinJoint.h	/^	cpFloat bias;$/;"	m	struct:cpPinJoint	access:public
cpPinJoint::constraint	include/chipmunk/constraints/cpPinJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpPinJoint	access:public
cpPinJoint::dist	include/chipmunk/constraints/cpPinJoint.h	/^	cpFloat dist;$/;"	m	struct:cpPinJoint	access:public
cpPinJoint::jnAcc	include/chipmunk/constraints/cpPinJoint.h	/^	cpFloat jnAcc;$/;"	m	struct:cpPinJoint	access:public
cpPinJoint::n	include/chipmunk/constraints/cpPinJoint.h	/^	cpVect n;$/;"	m	struct:cpPinJoint	access:public
cpPinJoint::nMass	include/chipmunk/constraints/cpPinJoint.h	/^	cpFloat nMass;$/;"	m	struct:cpPinJoint	access:public
cpPinJoint::r1	include/chipmunk/constraints/cpPinJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpPinJoint	access:public
cpPinJoint::r2	include/chipmunk/constraints/cpPinJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpPinJoint	access:public
cpPinJointAlloc	include/chipmunk/constraints/cpPinJoint.h	/^cpPinJoint* cpPinJointAlloc(void);$/;"	p	signature:(void)
cpPinJointGetClass	include/chipmunk/constraints/cpPinJoint.h	/^const cpConstraintClass *cpPinJointGetClass(void);$/;"	p	signature:(void)
cpPinJointInit	include/chipmunk/constraints/cpPinJoint.h	/^cpPinJoint* cpPinJointInit(cpPinJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2);$/;"	p	signature:(cpPinJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)
cpPinJointInit	src/constraints/cpPinJoint.c	/^cpPinJointInit(cpPinJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)$/;"	f	signature:(cpPinJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)
cpPinJointNew	include/chipmunk/constraints/cpPinJoint.h	/^cpConstraint* cpPinJointNew(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2);$/;"	p	signature:(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)
cpPinJointNew	src/constraints/cpPinJoint.c	/^cpPinJointNew(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)$/;"	f	signature:(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)
cpPivotJoint	include/chipmunk/constraints/cpPivotJoint.h	/^typedef struct cpPivotJoint {$/;"	s
cpPivotJoint	include/chipmunk/constraints/cpPivotJoint.h	/^} cpPivotJoint;$/;"	t	typeref:struct:cpPivotJoint
cpPivotJoint::anchr1	include/chipmunk/constraints/cpPivotJoint.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpPivotJoint	access:public
cpPivotJoint::anchr2	include/chipmunk/constraints/cpPivotJoint.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpPivotJoint	access:public
cpPivotJoint::bias	include/chipmunk/constraints/cpPivotJoint.h	/^	cpVect bias;$/;"	m	struct:cpPivotJoint	access:public
cpPivotJoint::constraint	include/chipmunk/constraints/cpPivotJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpPivotJoint	access:public
cpPivotJoint::jAcc	include/chipmunk/constraints/cpPivotJoint.h	/^	cpVect jAcc;$/;"	m	struct:cpPivotJoint	access:public
cpPivotJoint::k	include/chipmunk/constraints/cpPivotJoint.h	/^	cpMat2x2 k;$/;"	m	struct:cpPivotJoint	access:public
cpPivotJoint::r1	include/chipmunk/constraints/cpPivotJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpPivotJoint	access:public
cpPivotJoint::r2	include/chipmunk/constraints/cpPivotJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpPivotJoint	access:public
cpPivotJointAlloc	include/chipmunk/constraints/cpPivotJoint.h	/^cpPivotJoint* cpPivotJointAlloc(void);$/;"	p	signature:(void)
cpPivotJointGetClass	include/chipmunk/constraints/cpPivotJoint.h	/^const cpConstraintClass *cpPivotJointGetClass(void);$/;"	p	signature:(void)
cpPivotJointInit	include/chipmunk/constraints/cpPivotJoint.h	/^cpPivotJoint* cpPivotJointInit(cpPivotJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2);$/;"	p	signature:(cpPivotJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)
cpPivotJointInit	src/constraints/cpPivotJoint.c	/^cpPivotJointInit(cpPivotJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)$/;"	f	signature:(cpPivotJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)
cpPivotJointNew	include/chipmunk/constraints/cpPivotJoint.h	/^cpConstraint* cpPivotJointNew(cpBody *a, cpBody *b, cpVect pivot);$/;"	p	signature:(cpBody *a, cpBody *b, cpVect pivot)
cpPivotJointNew	src/constraints/cpPivotJoint.c	/^cpPivotJointNew(cpBody *a, cpBody *b, cpVect pivot)$/;"	f	signature:(cpBody *a, cpBody *b, cpVect pivot)
cpPivotJointNew2	include/chipmunk/constraints/cpPivotJoint.h	/^cpConstraint* cpPivotJointNew2(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2);$/;"	p	signature:(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)
cpPivotJointNew2	src/constraints/cpPivotJoint.c	/^cpPivotJointNew2(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)$/;"	f	signature:(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2)
cpPolyShape	include/chipmunk/cpPolyShape.h	/^typedef struct cpPolyShape {$/;"	s
cpPolyShape	include/chipmunk/cpPolyShape.h	/^} cpPolyShape;$/;"	t	typeref:struct:cpPolyShape
cpPolyShape::numVerts	include/chipmunk/cpPolyShape.h	/^	int numVerts;$/;"	m	struct:cpPolyShape	access:public
cpPolyShape::planes	include/chipmunk/cpPolyShape.h	/^	cpSplittingPlane *planes, *tPlanes;$/;"	m	struct:cpPolyShape	access:public
cpPolyShape::shape	include/chipmunk/cpPolyShape.h	/^	cpShape shape;$/;"	m	struct:cpPolyShape	access:public
cpPolyShape::tPlanes	include/chipmunk/cpPolyShape.h	/^	cpSplittingPlane *planes, *tPlanes;$/;"	m	struct:cpPolyShape	access:public
cpPolyShape::tVerts	include/chipmunk/cpPolyShape.h	/^	cpVect *verts, *tVerts;$/;"	m	struct:cpPolyShape	access:public
cpPolyShape::verts	include/chipmunk/cpPolyShape.h	/^	cpVect *verts, *tVerts;$/;"	m	struct:cpPolyShape	access:public
cpPolyShapeAlloc	include/chipmunk/cpPolyShape.h	/^cpPolyShape* cpPolyShapeAlloc(void);$/;"	p	signature:(void)
cpPolyShapeAlloc	src/cpPolyShape.c	/^cpPolyShapeAlloc(void)$/;"	f	signature:(void)
cpPolyShapeCacheData	src/cpPolyShape.c	/^cpPolyShapeCacheData(cpPolyShape *poly, cpVect p, cpVect rot)$/;"	f	file:	signature:(cpPolyShape *poly, cpVect p, cpVect rot)
cpPolyShapeContainsVert	include/chipmunk/chipmunk_private.h	/^cpPolyShapeContainsVert(const cpPolyShape *poly, const cpVect v)$/;"	f	signature:(const cpPolyShape *poly, const cpVect v)
cpPolyShapeContainsVertPartial	include/chipmunk/chipmunk_private.h	/^cpPolyShapeContainsVertPartial(const cpPolyShape *poly, const cpVect v, const cpVect n)$/;"	f	signature:(const cpPolyShape *poly, const cpVect v, const cpVect n)
cpPolyShapeDestroy	src/cpPolyShape.c	/^cpPolyShapeDestroy(cpPolyShape *poly)$/;"	f	file:	signature:(cpPolyShape *poly)
cpPolyShapeGetNumVerts	include/chipmunk/cpPolyShape.h	/^int cpPolyShapeGetNumVerts(cpShape *shape);$/;"	p	signature:(cpShape *shape)
cpPolyShapeGetNumVerts	src/cpPolyShape.c	/^cpPolyShapeGetNumVerts(cpShape *shape)$/;"	f	signature:(cpShape *shape)
cpPolyShapeGetVert	include/chipmunk/cpPolyShape.h	/^cpVect cpPolyShapeGetVert(cpShape *shape, int idx);$/;"	p	signature:(cpShape *shape, int idx)
cpPolyShapeGetVert	src/cpPolyShape.c	/^cpPolyShapeGetVert(cpShape *shape, int idx)$/;"	f	signature:(cpShape *shape, int idx)
cpPolyShapeInit	include/chipmunk/cpPolyShape.h	/^cpPolyShape* cpPolyShapeInit(cpPolyShape *poly, cpBody *body, int numVerts, const cpVect *verts, cpVect offset);$/;"	p	signature:(cpPolyShape *poly, cpBody *body, int numVerts, const cpVect *verts, cpVect offset)
cpPolyShapeInit	src/cpPolyShape.c	/^cpPolyShapeInit(cpPolyShape *poly, cpBody *body, int numVerts, const cpVect *verts, cpVect offset)$/;"	f	signature:(cpPolyShape *poly, cpBody *body, int numVerts, const cpVect *verts, cpVect offset)
cpPolyShapeNearestPointQuery	src/cpPolyShape.c	/^cpPolyShapeNearestPointQuery(cpPolyShape *poly, cpVect p, cpNearestPointQueryInfo *info){$/;"	f	file:	signature:(cpPolyShape *poly, cpVect p, cpNearestPointQueryInfo *info)
cpPolyShapeNew	include/chipmunk/cpPolyShape.h	/^cpShape* cpPolyShapeNew(cpBody *body, int numVerts, cpVect *verts, cpVect offset);$/;"	p	signature:(cpBody *body, int numVerts, cpVect *verts, cpVect offset)
cpPolyShapeNew	src/cpPolyShape.c	/^cpPolyShapeNew(cpBody *body, int numVerts, cpVect *verts, cpVect offset)$/;"	f	signature:(cpBody *body, int numVerts, cpVect *verts, cpVect offset)
cpPolyShapeSegmentQuery	src/cpPolyShape.c	/^cpPolyShapeSegmentQuery(cpPolyShape *poly, cpVect a, cpVect b, cpSegmentQueryInfo *info)$/;"	f	file:	signature:(cpPolyShape *poly, cpVect a, cpVect b, cpSegmentQueryInfo *info)
cpPolyShapeSetVerts	include/chipmunk/chipmunk_unsafe.h	/^void cpPolyShapeSetVerts(cpShape *shape, int numVerts, cpVect *verts, cpVect offset);$/;"	p	signature:(cpShape *shape, int numVerts, cpVect *verts, cpVect offset)
cpPolyShapeSetVerts	src/cpPolyShape.c	/^cpPolyShapeSetVerts(cpShape *shape, int numVerts, cpVect *verts, cpVect offset)$/;"	f	signature:(cpShape *shape, int numVerts, cpVect *verts, cpVect offset)
cpPolyShapeTransformAxes	src/cpPolyShape.c	/^cpPolyShapeTransformAxes(cpPolyShape *poly, cpVect p, cpVect rot)$/;"	f	file:	signature:(cpPolyShape *poly, cpVect p, cpVect rot)
cpPolyShapeTransformVerts	src/cpPolyShape.c	/^cpPolyShapeTransformVerts(cpPolyShape *poly, cpVect p, cpVect rot)$/;"	f	file:	signature:(cpPolyShape *poly, cpVect p, cpVect rot)
cpPolyShapeValueOnAxis	include/chipmunk/chipmunk_private.h	/^cpPolyShapeValueOnAxis(const cpPolyShape *poly, const cpVect n, const cpFloat d)$/;"	f	signature:(const cpPolyShape *poly, const cpVect n, const cpFloat d)
cpPolyValidate	include/chipmunk/cpPolyShape.h	/^cpBool cpPolyValidate(const cpVect *verts, const int numVerts);$/;"	p	signature:(const cpVect *verts, const int numVerts)
cpPolyValidate	src/cpPolyShape.c	/^cpPolyValidate(const cpVect *verts, const int numVerts)$/;"	f	signature:(const cpVect *verts, const int numVerts)
cpPostStepCallback	include/chipmunk/chipmunk_private.h	/^typedef struct cpPostStepCallback {$/;"	s
cpPostStepCallback	include/chipmunk/chipmunk_private.h	/^} cpPostStepCallback;$/;"	t	typeref:struct:cpPostStepCallback
cpPostStepCallback::data	include/chipmunk/chipmunk_private.h	/^	void *data;$/;"	m	struct:cpPostStepCallback	access:public
cpPostStepCallback::func	include/chipmunk/chipmunk_private.h	/^	cpPostStepFunc func;$/;"	m	struct:cpPostStepCallback	access:public
cpPostStepCallback::key	include/chipmunk/chipmunk_private.h	/^	void *key;$/;"	m	struct:cpPostStepCallback	access:public
cpPostStepFunc	include/chipmunk/cpSpace.h	/^typedef void (*cpPostStepFunc)(cpSpace *space, void *key, void *data);$/;"	t
cpRatchetJoint	include/chipmunk/constraints/cpRatchetJoint.h	/^typedef struct cpRatchetJoint {$/;"	s
cpRatchetJoint	include/chipmunk/constraints/cpRatchetJoint.h	/^} cpRatchetJoint;$/;"	t	typeref:struct:cpRatchetJoint
cpRatchetJoint::angle	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpFloat angle, phase, ratchet;$/;"	m	struct:cpRatchetJoint	access:public
cpRatchetJoint::bias	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpFloat bias;$/;"	m	struct:cpRatchetJoint	access:public
cpRatchetJoint::constraint	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpRatchetJoint	access:public
cpRatchetJoint::iSum	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpFloat iSum;$/;"	m	struct:cpRatchetJoint	access:public
cpRatchetJoint::jAcc	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpFloat jAcc;$/;"	m	struct:cpRatchetJoint	access:public
cpRatchetJoint::phase	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpFloat angle, phase, ratchet;$/;"	m	struct:cpRatchetJoint	access:public
cpRatchetJoint::ratchet	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpFloat angle, phase, ratchet;$/;"	m	struct:cpRatchetJoint	access:public
cpRatchetJointAlloc	include/chipmunk/constraints/cpRatchetJoint.h	/^cpRatchetJoint* cpRatchetJointAlloc(void);$/;"	p	signature:(void)
cpRatchetJointGetClass	include/chipmunk/constraints/cpRatchetJoint.h	/^const cpConstraintClass *cpRatchetJointGetClass(void);$/;"	p	signature:(void)
cpRatchetJointInit	include/chipmunk/constraints/cpRatchetJoint.h	/^cpRatchetJoint* cpRatchetJointInit(cpRatchetJoint *joint, cpBody *a, cpBody *b, cpFloat phase, cpFloat ratchet);$/;"	p	signature:(cpRatchetJoint *joint, cpBody *a, cpBody *b, cpFloat phase, cpFloat ratchet)
cpRatchetJointInit	src/constraints/cpRatchetJoint.c	/^cpRatchetJointInit(cpRatchetJoint *joint, cpBody *a, cpBody *b, cpFloat phase, cpFloat ratchet)$/;"	f	signature:(cpRatchetJoint *joint, cpBody *a, cpBody *b, cpFloat phase, cpFloat ratchet)
cpRatchetJointNew	include/chipmunk/constraints/cpRatchetJoint.h	/^cpConstraint* cpRatchetJointNew(cpBody *a, cpBody *b, cpFloat phase, cpFloat ratchet);$/;"	p	signature:(cpBody *a, cpBody *b, cpFloat phase, cpFloat ratchet)
cpRatchetJointNew	src/constraints/cpRatchetJoint.c	/^cpRatchetJointNew(cpBody *a, cpBody *b, cpFloat phase, cpFloat ratchet)$/;"	f	signature:(cpBody *a, cpBody *b, cpFloat phase, cpFloat ratchet)
cpRecenterPoly	include/chipmunk/chipmunk.h	/^void cpRecenterPoly(const int numVerts, cpVect *verts);$/;"	p	signature:(const int numVerts, cpVect *verts)
cpRecenterPoly	src/chipmunk.c	/^cpRecenterPoly(const int numVerts, cpVect *verts){$/;"	f	signature:(const int numVerts, cpVect *verts)
cpResetShapeIdCounter	include/chipmunk/cpShape.h	/^void cpResetShapeIdCounter(void);$/;"	p	signature:(void)
cpResetShapeIdCounter	src/cpShape.c	/^cpResetShapeIdCounter(void)$/;"	f	signature:(void)
cpRotaryLimitJoint	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^typedef struct cpRotaryLimitJoint {$/;"	s
cpRotaryLimitJoint	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^} cpRotaryLimitJoint;$/;"	t	typeref:struct:cpRotaryLimitJoint
cpRotaryLimitJoint::bias	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^	cpFloat bias;$/;"	m	struct:cpRotaryLimitJoint	access:public
cpRotaryLimitJoint::constraint	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpRotaryLimitJoint	access:public
cpRotaryLimitJoint::iSum	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^	cpFloat iSum;$/;"	m	struct:cpRotaryLimitJoint	access:public
cpRotaryLimitJoint::jAcc	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^	cpFloat jAcc;$/;"	m	struct:cpRotaryLimitJoint	access:public
cpRotaryLimitJoint::max	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^	cpFloat min, max;$/;"	m	struct:cpRotaryLimitJoint	access:public
cpRotaryLimitJoint::min	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^	cpFloat min, max;$/;"	m	struct:cpRotaryLimitJoint	access:public
cpRotaryLimitJointAlloc	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^cpRotaryLimitJoint* cpRotaryLimitJointAlloc(void);$/;"	p	signature:(void)
cpRotaryLimitJointGetClass	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^const cpConstraintClass *cpRotaryLimitJointGetClass(void);$/;"	p	signature:(void)
cpRotaryLimitJointInit	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^cpRotaryLimitJoint* cpRotaryLimitJointInit(cpRotaryLimitJoint *joint, cpBody *a, cpBody *b, cpFloat min, cpFloat max);$/;"	p	signature:(cpRotaryLimitJoint *joint, cpBody *a, cpBody *b, cpFloat min, cpFloat max)
cpRotaryLimitJointInit	src/constraints/cpRotaryLimitJoint.c	/^cpRotaryLimitJointInit(cpRotaryLimitJoint *joint, cpBody *a, cpBody *b, cpFloat min, cpFloat max)$/;"	f	signature:(cpRotaryLimitJoint *joint, cpBody *a, cpBody *b, cpFloat min, cpFloat max)
cpRotaryLimitJointNew	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^cpConstraint* cpRotaryLimitJointNew(cpBody *a, cpBody *b, cpFloat min, cpFloat max);$/;"	p	signature:(cpBody *a, cpBody *b, cpFloat min, cpFloat max)
cpRotaryLimitJointNew	src/constraints/cpRotaryLimitJoint.c	/^cpRotaryLimitJointNew(cpBody *a, cpBody *b, cpFloat min, cpFloat max)$/;"	f	signature:(cpBody *a, cpBody *b, cpFloat min, cpFloat max)
cpSegmentQueryHitDist	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSegmentQueryHitDist);$/;"	v
cpSegmentQueryHitDist	include/chipmunk/cpShape.h	/^static inline cpFloat cpSegmentQueryHitDist(const cpVect start, const cpVect end, const cpSegmentQueryInfo info)$/;"	f	signature:(const cpVect start, const cpVect end, const cpSegmentQueryInfo info)
cpSegmentQueryHitPoint	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSegmentQueryHitPoint);$/;"	v
cpSegmentQueryHitPoint	include/chipmunk/cpShape.h	/^static inline cpVect cpSegmentQueryHitPoint(const cpVect start, const cpVect end, const cpSegmentQueryInfo info)$/;"	f	signature:(const cpVect start, const cpVect end, const cpSegmentQueryInfo info)
cpSegmentQueryInfo	include/chipmunk/cpShape.h	/^typedef struct cpSegmentQueryInfo {$/;"	s
cpSegmentQueryInfo	include/chipmunk/cpShape.h	/^} cpSegmentQueryInfo;$/;"	t	typeref:struct:cpSegmentQueryInfo
cpSegmentQueryInfo::n	include/chipmunk/cpShape.h	/^	cpVect n;$/;"	m	struct:cpSegmentQueryInfo	access:public
cpSegmentQueryInfo::shape	include/chipmunk/cpShape.h	/^	cpShape *shape;$/;"	m	struct:cpSegmentQueryInfo	access:public
cpSegmentQueryInfo::t	include/chipmunk/cpShape.h	/^	cpFloat t;$/;"	m	struct:cpSegmentQueryInfo	access:public
cpSegmentShape	include/chipmunk/cpShape.h	/^typedef struct cpSegmentShape {$/;"	s
cpSegmentShape	include/chipmunk/cpShape.h	/^} cpSegmentShape;$/;"	t	typeref:struct:cpSegmentShape
cpSegmentShape::a	include/chipmunk/cpShape.h	/^	cpVect a, b, n;$/;"	m	struct:cpSegmentShape	access:public
cpSegmentShape::a_tangent	include/chipmunk/cpShape.h	/^	cpVect a_tangent, b_tangent;$/;"	m	struct:cpSegmentShape	access:public
cpSegmentShape::b	include/chipmunk/cpShape.h	/^	cpVect a, b, n;$/;"	m	struct:cpSegmentShape	access:public
cpSegmentShape::b_tangent	include/chipmunk/cpShape.h	/^	cpVect a_tangent, b_tangent;$/;"	m	struct:cpSegmentShape	access:public
cpSegmentShape::n	include/chipmunk/cpShape.h	/^	cpVect a, b, n;$/;"	m	struct:cpSegmentShape	access:public
cpSegmentShape::r	include/chipmunk/cpShape.h	/^	cpFloat r;$/;"	m	struct:cpSegmentShape	access:public
cpSegmentShape::shape	include/chipmunk/cpShape.h	/^	cpShape shape;$/;"	m	struct:cpSegmentShape	access:public
cpSegmentShape::ta	include/chipmunk/cpShape.h	/^	cpVect ta, tb, tn;$/;"	m	struct:cpSegmentShape	access:public
cpSegmentShape::tb	include/chipmunk/cpShape.h	/^	cpVect ta, tb, tn;$/;"	m	struct:cpSegmentShape	access:public
cpSegmentShape::tn	include/chipmunk/cpShape.h	/^	cpVect ta, tb, tn;$/;"	m	struct:cpSegmentShape	access:public
cpSegmentShapeAlloc	include/chipmunk/cpShape.h	/^cpSegmentShape* cpSegmentShapeAlloc(void);$/;"	p	signature:(void)
cpSegmentShapeCacheData	src/cpShape.c	/^cpSegmentShapeCacheData(cpSegmentShape *seg, cpVect p, cpVect rot)$/;"	f	file:	signature:(cpSegmentShape *seg, cpVect p, cpVect rot)
cpSegmentShapeClass	src/cpShape.c	/^static const cpShapeClass cpSegmentShapeClass = {$/;"	v	file:
cpSegmentShapeInit	include/chipmunk/cpShape.h	/^cpSegmentShape* cpSegmentShapeInit(cpSegmentShape *seg, cpBody *body, cpVect a, cpVect b, cpFloat radius);$/;"	p	signature:(cpSegmentShape *seg, cpBody *body, cpVect a, cpVect b, cpFloat radius)
cpSegmentShapeInit	src/cpShape.c	/^cpSegmentShapeInit(cpSegmentShape *seg, cpBody *body, cpVect a, cpVect b, cpFloat r)$/;"	f	signature:(cpSegmentShape *seg, cpBody *body, cpVect a, cpVect b, cpFloat r)
cpSegmentShapeNearestPointQuery	src/cpShape.c	/^cpSegmentShapeNearestPointQuery(cpSegmentShape *seg, cpVect p, cpNearestPointQueryInfo *info)$/;"	f	file:	signature:(cpSegmentShape *seg, cpVect p, cpNearestPointQueryInfo *info)
cpSegmentShapeNew	include/chipmunk/cpShape.h	/^cpShape* cpSegmentShapeNew(cpBody *body, cpVect a, cpVect b, cpFloat radius);$/;"	p	signature:(cpBody *body, cpVect a, cpVect b, cpFloat radius)
cpSegmentShapeNew	src/cpShape.c	/^cpSegmentShapeNew(cpBody *body, cpVect a, cpVect b, cpFloat r)$/;"	f	signature:(cpBody *body, cpVect a, cpVect b, cpFloat r)
cpSegmentShapeSegmentQuery	src/cpShape.c	/^cpSegmentShapeSegmentQuery(cpSegmentShape *seg, cpVect a, cpVect b, cpSegmentQueryInfo *info)$/;"	f	file:	signature:(cpSegmentShape *seg, cpVect a, cpVect b, cpSegmentQueryInfo *info)
cpSegmentShapeSetEndpoints	include/chipmunk/chipmunk_unsafe.h	/^void cpSegmentShapeSetEndpoints(cpShape *shape, cpVect a, cpVect b);$/;"	p	signature:(cpShape *shape, cpVect a, cpVect b)
cpSegmentShapeSetEndpoints	src/cpShape.c	/^cpSegmentShapeSetEndpoints(cpShape *shape, cpVect a, cpVect b)$/;"	f	signature:(cpShape *shape, cpVect a, cpVect b)
cpSegmentShapeSetNeighbors	include/chipmunk/cpShape.h	/^void cpSegmentShapeSetNeighbors(cpShape *shape, cpVect prev, cpVect next);$/;"	p	signature:(cpShape *shape, cpVect prev, cpVect next)
cpSegmentShapeSetRadius	include/chipmunk/chipmunk_unsafe.h	/^void cpSegmentShapeSetRadius(cpShape *shape, cpFloat radius);$/;"	p	signature:(cpShape *shape, cpFloat radius)
cpSegmentShapeSetRadius	src/cpShape.c	/^cpSegmentShapeSetRadius(cpShape *shape, cpFloat radius)$/;"	f	signature:(cpShape *shape, cpFloat radius)
cpShape	include/chipmunk/chipmunk.h	/^typedef struct cpShape cpShape;$/;"	t	typeref:struct:cpShape
cpShape	include/chipmunk/cpShape.h	/^struct cpShape {$/;"	s
cpShape::CP_PRIVATE	include/chipmunk/cpShape.h	/^	CP_PRIVATE(const cpShapeClass *klass);$/;"	p	struct:cpShape	access:public	signature:(const cpShapeClass *klass)
cpShape::CP_PRIVATE	include/chipmunk/cpShape.h	/^	CP_PRIVATE(cpHashValue hashid);$/;"	p	struct:cpShape	access:public	signature:(cpHashValue hashid)
cpShape::CP_PRIVATE	include/chipmunk/cpShape.h	/^	CP_PRIVATE(cpShape *next);$/;"	p	struct:cpShape	access:public	signature:(cpShape *next)
cpShape::CP_PRIVATE	include/chipmunk/cpShape.h	/^	CP_PRIVATE(cpShape *prev);$/;"	p	struct:cpShape	access:public	signature:(cpShape *prev)
cpShape::CP_PRIVATE	include/chipmunk/cpShape.h	/^	CP_PRIVATE(cpSpace *space);$/;"	p	struct:cpShape	access:public	signature:(cpSpace *space)
cpShape::bb	include/chipmunk/cpShape.h	/^	cpBB bb;$/;"	m	struct:cpShape	access:public
cpShape::body	include/chipmunk/cpShape.h	/^	cpBody *body;$/;"	m	struct:cpShape	access:public
cpShape::collision_type	include/chipmunk/cpShape.h	/^	cpCollisionType collision_type;$/;"	m	struct:cpShape	access:public
cpShape::data	include/chipmunk/cpShape.h	/^	cpDataPointer data;$/;"	m	struct:cpShape	access:public
cpShape::e	include/chipmunk/cpShape.h	/^	cpFloat e;$/;"	m	struct:cpShape	access:public
cpShape::group	include/chipmunk/cpShape.h	/^	cpGroup group;$/;"	m	struct:cpShape	access:public
cpShape::layers	include/chipmunk/cpShape.h	/^	cpLayers layers;$/;"	m	struct:cpShape	access:public
cpShape::sensor	include/chipmunk/cpShape.h	/^	cpBool sensor;$/;"	m	struct:cpShape	access:public
cpShape::surface_v	include/chipmunk/cpShape.h	/^	cpVect surface_v;$/;"	m	struct:cpShape	access:public
cpShape::u	include/chipmunk/cpShape.h	/^	cpFloat u;$/;"	m	struct:cpShape	access:public
cpShapeActive	include/chipmunk/chipmunk_private.h	/^cpShapeActive(cpShape *shape)$/;"	f	signature:(cpShape *shape)
cpShapeCacheBB	include/chipmunk/cpShape.h	/^cpBB cpShapeCacheBB(cpShape *shape);$/;"	p	signature:(cpShape *shape)
cpShapeCacheBB	src/cpShape.c	/^cpShapeCacheBB(cpShape *shape)$/;"	f	signature:(cpShape *shape)
cpShapeCacheDataImpl	include/chipmunk/cpShape.h	/^typedef cpBB (*cpShapeCacheDataImpl)(cpShape *shape, cpVect p, cpVect rot);$/;"	t
cpShapeClass	include/chipmunk/cpShape.h	/^struct cpShapeClass {$/;"	s
cpShapeClass	include/chipmunk/cpShape.h	/^typedef struct cpShapeClass cpShapeClass;$/;"	t	typeref:struct:cpShapeClass
cpShapeClass::cacheData	include/chipmunk/cpShape.h	/^	cpShapeCacheDataImpl cacheData;$/;"	m	struct:cpShapeClass	access:public
cpShapeClass::destroy	include/chipmunk/cpShape.h	/^	cpShapeDestroyImpl destroy;$/;"	m	struct:cpShapeClass	access:public
cpShapeClass::nearestPointQuery	include/chipmunk/cpShape.h	/^	cpShapeNearestPointQueryImpl nearestPointQuery;$/;"	m	struct:cpShapeClass	access:public
cpShapeClass::segmentQuery	include/chipmunk/cpShape.h	/^	cpShapeSegmentQueryImpl segmentQuery;$/;"	m	struct:cpShapeClass	access:public
cpShapeClass::type	include/chipmunk/cpShape.h	/^	cpShapeType type;$/;"	m	struct:cpShapeClass	access:public
cpShapeDestroy	include/chipmunk/cpShape.h	/^void cpShapeDestroy(cpShape *shape);$/;"	p	signature:(cpShape *shape)
cpShapeDestroy	src/cpShape.c	/^cpShapeDestroy(cpShape *shape)$/;"	f	signature:(cpShape *shape)
cpShapeDestroyImpl	include/chipmunk/cpShape.h	/^typedef void (*cpShapeDestroyImpl)(cpShape *shape);$/;"	t
cpShapeFree	include/chipmunk/cpShape.h	/^void cpShapeFree(cpShape *shape);$/;"	p	signature:(cpShape *shape)
cpShapeFree	src/cpShape.c	/^cpShapeFree(cpShape *shape)$/;"	f	signature:(cpShape *shape)
cpShapeGetBB	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpShapeGetBB);$/;"	v
cpShapeIDCounter	src/cpShape.c	/^static cpHashValue cpShapeIDCounter = 0;$/;"	v	file:
cpShapeInit	include/chipmunk/chipmunk_private.h	/^cpShape* cpShapeInit(cpShape *shape, const cpShapeClass *klass, cpBody *body);$/;"	p	signature:(cpShape *shape, const cpShapeClass *klass, cpBody *body)
cpShapeInit	src/cpShape.c	/^cpShapeInit(cpShape *shape, const cpShapeClass *klass, cpBody *body)$/;"	f	signature:(cpShape *shape, const cpShapeClass *klass, cpBody *body)
cpShapeNearestPointQuery	include/chipmunk/cpShape.h	/^cpFloat cpShapeNearestPointQuery(cpShape *shape, cpVect p, cpNearestPointQueryInfo *out);$/;"	p	signature:(cpShape *shape, cpVect p, cpNearestPointQueryInfo *out)
cpShapeNearestPointQuery	src/cpShape.c	/^cpShapeNearestPointQuery(cpShape *shape, cpVect p, cpNearestPointQueryInfo *info)$/;"	f	signature:(cpShape *shape, cpVect p, cpNearestPointQueryInfo *info)
cpShapeNearestPointQueryImpl	include/chipmunk/cpShape.h	/^typedef void (*cpShapeNearestPointQueryImpl)(cpShape *shape, cpVect p, cpNearestPointQueryInfo *info);$/;"	t
cpShapePointQuery	include/chipmunk/cpShape.h	/^cpBool cpShapePointQuery(cpShape *shape, cpVect p);$/;"	p	signature:(cpShape *shape, cpVect p)
cpShapePointQuery	src/cpShape.c	/^cpShapePointQuery(cpShape *shape, cpVect p){$/;"	f	signature:(cpShape *shape, cpVect p)
cpShapeSegmentQuery	include/chipmunk/cpShape.h	/^cpBool cpShapeSegmentQuery(cpShape *shape, cpVect a, cpVect b, cpSegmentQueryInfo *info);$/;"	p	signature:(cpShape *shape, cpVect a, cpVect b, cpSegmentQueryInfo *info)
cpShapeSegmentQuery	src/cpShape.c	/^cpShapeSegmentQuery(cpShape *shape, cpVect a, cpVect b, cpSegmentQueryInfo *info){$/;"	f	signature:(cpShape *shape, cpVect a, cpVect b, cpSegmentQueryInfo *info)
cpShapeSegmentQueryImpl	include/chipmunk/cpShape.h	/^typedef void (*cpShapeSegmentQueryImpl)(cpShape *shape, cpVect a, cpVect b, cpSegmentQueryInfo *info);$/;"	t
cpShapeSetBody	include/chipmunk/cpShape.h	/^void cpShapeSetBody(cpShape *shape, cpBody *body);$/;"	p	signature:(cpShape *shape, cpBody *body)
cpShapeSetBody	src/cpShape.c	/^cpShapeSetBody(cpShape *shape, cpBody *body)$/;"	f	signature:(cpShape *shape, cpBody *body)
cpShapeType	include/chipmunk/cpShape.h	/^typedef enum cpShapeType{$/;"	g
cpShapeType	include/chipmunk/cpShape.h	/^} cpShapeType;$/;"	t	typeref:enum:cpShapeType
cpShapeUpdate	include/chipmunk/cpShape.h	/^cpBB cpShapeUpdate(cpShape *shape, cpVect pos, cpVect rot);$/;"	p	signature:(cpShape *shape, cpVect pos, cpVect rot)
cpShapeUpdate	src/cpShape.c	/^cpShapeUpdate(cpShape *shape, cpVect pos, cpVect rot)$/;"	f	signature:(cpShape *shape, cpVect pos, cpVect rot)
cpShapeUpdateFunc	include/chipmunk/chipmunk_private.h	/^void cpShapeUpdateFunc(cpShape *shape, void *unused);$/;"	p	signature:(cpShape *shape, void *unused)
cpShapeUpdateFunc	src/cpSpaceStep.c	/^cpShapeUpdateFunc(cpShape *shape, void *unused)$/;"	f	signature:(cpShape *shape, void *unused)
cpSimpleMotor	include/chipmunk/constraints/cpSimpleMotor.h	/^typedef struct cpSimpleMotor {$/;"	s
cpSimpleMotor	include/chipmunk/constraints/cpSimpleMotor.h	/^} cpSimpleMotor;$/;"	t	typeref:struct:cpSimpleMotor
cpSimpleMotor::constraint	include/chipmunk/constraints/cpSimpleMotor.h	/^	cpConstraint constraint;$/;"	m	struct:cpSimpleMotor	access:public
cpSimpleMotor::iSum	include/chipmunk/constraints/cpSimpleMotor.h	/^	cpFloat iSum;$/;"	m	struct:cpSimpleMotor	access:public
cpSimpleMotor::jAcc	include/chipmunk/constraints/cpSimpleMotor.h	/^	cpFloat jAcc;$/;"	m	struct:cpSimpleMotor	access:public
cpSimpleMotor::rate	include/chipmunk/constraints/cpSimpleMotor.h	/^	cpFloat rate;$/;"	m	struct:cpSimpleMotor	access:public
cpSimpleMotorAlloc	include/chipmunk/constraints/cpSimpleMotor.h	/^cpSimpleMotor* cpSimpleMotorAlloc(void);$/;"	p	signature:(void)
cpSimpleMotorGetClass	include/chipmunk/constraints/cpSimpleMotor.h	/^const cpConstraintClass *cpSimpleMotorGetClass(void);$/;"	p	signature:(void)
cpSimpleMotorInit	include/chipmunk/constraints/cpSimpleMotor.h	/^cpSimpleMotor* cpSimpleMotorInit(cpSimpleMotor *joint, cpBody *a, cpBody *b, cpFloat rate);$/;"	p	signature:(cpSimpleMotor *joint, cpBody *a, cpBody *b, cpFloat rate)
cpSimpleMotorInit	src/constraints/cpSimpleMotor.c	/^cpSimpleMotorInit(cpSimpleMotor *joint, cpBody *a, cpBody *b, cpFloat rate)$/;"	f	signature:(cpSimpleMotor *joint, cpBody *a, cpBody *b, cpFloat rate)
cpSimpleMotorNew	include/chipmunk/constraints/cpSimpleMotor.h	/^cpConstraint* cpSimpleMotorNew(cpBody *a, cpBody *b, cpFloat rate);$/;"	p	signature:(cpBody *a, cpBody *b, cpFloat rate)
cpSimpleMotorNew	src/constraints/cpSimpleMotor.c	/^cpSimpleMotorNew(cpBody *a, cpBody *b, cpFloat rate)$/;"	f	signature:(cpBody *a, cpBody *b, cpFloat rate)
cpSlideJoint	include/chipmunk/constraints/cpSlideJoint.h	/^typedef struct cpSlideJoint {$/;"	s
cpSlideJoint	include/chipmunk/constraints/cpSlideJoint.h	/^} cpSlideJoint;$/;"	t	typeref:struct:cpSlideJoint
cpSlideJoint::anchr1	include/chipmunk/constraints/cpSlideJoint.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpSlideJoint	access:public
cpSlideJoint::anchr2	include/chipmunk/constraints/cpSlideJoint.h	/^	cpVect anchr1, anchr2;$/;"	m	struct:cpSlideJoint	access:public
cpSlideJoint::bias	include/chipmunk/constraints/cpSlideJoint.h	/^	cpFloat bias;$/;"	m	struct:cpSlideJoint	access:public
cpSlideJoint::constraint	include/chipmunk/constraints/cpSlideJoint.h	/^	cpConstraint constraint;$/;"	m	struct:cpSlideJoint	access:public
cpSlideJoint::jnAcc	include/chipmunk/constraints/cpSlideJoint.h	/^	cpFloat jnAcc;$/;"	m	struct:cpSlideJoint	access:public
cpSlideJoint::max	include/chipmunk/constraints/cpSlideJoint.h	/^	cpFloat min, max;$/;"	m	struct:cpSlideJoint	access:public
cpSlideJoint::min	include/chipmunk/constraints/cpSlideJoint.h	/^	cpFloat min, max;$/;"	m	struct:cpSlideJoint	access:public
cpSlideJoint::n	include/chipmunk/constraints/cpSlideJoint.h	/^	cpVect n;$/;"	m	struct:cpSlideJoint	access:public
cpSlideJoint::nMass	include/chipmunk/constraints/cpSlideJoint.h	/^	cpFloat nMass;$/;"	m	struct:cpSlideJoint	access:public
cpSlideJoint::r1	include/chipmunk/constraints/cpSlideJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpSlideJoint	access:public
cpSlideJoint::r2	include/chipmunk/constraints/cpSlideJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpSlideJoint	access:public
cpSlideJointAlloc	include/chipmunk/constraints/cpSlideJoint.h	/^cpSlideJoint* cpSlideJointAlloc(void);$/;"	p	signature:(void)
cpSlideJointGetClass	include/chipmunk/constraints/cpSlideJoint.h	/^const cpConstraintClass *cpSlideJointGetClass(void);$/;"	p	signature:(void)
cpSlideJointInit	include/chipmunk/constraints/cpSlideJoint.h	/^cpSlideJoint* cpSlideJointInit(cpSlideJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat min, cpFloat max);$/;"	p	signature:(cpSlideJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat min, cpFloat max)
cpSlideJointInit	src/constraints/cpSlideJoint.c	/^cpSlideJointInit(cpSlideJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat min, cpFloat max)$/;"	f	signature:(cpSlideJoint *joint, cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat min, cpFloat max)
cpSlideJointNew	include/chipmunk/constraints/cpSlideJoint.h	/^cpConstraint* cpSlideJointNew(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat min, cpFloat max);$/;"	p	signature:(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat min, cpFloat max)
cpSlideJointNew	src/constraints/cpSlideJoint.c	/^cpSlideJointNew(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat min, cpFloat max)$/;"	f	signature:(cpBody *a, cpBody *b, cpVect anchr1, cpVect anchr2, cpFloat min, cpFloat max)
cpSpace	include/chipmunk/chipmunk.h	/^typedef struct cpSpace cpSpace;$/;"	t	typeref:struct:cpSpace
cpSpace	include/chipmunk/cpSpace.h	/^struct cpSpace {$/;"	s
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *allocatedBuffers);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *allocatedBuffers)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *arbiters);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *arbiters)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *bodies);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *bodies)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *constraints);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *constraints)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *pooledArbiters);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *pooledArbiters)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *postStepCallbacks);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *postStepCallbacks)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *rousedBodies);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *rousedBodies)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpArray *sleepingComponents);$/;"	p	struct:cpSpace	access:public	signature:(cpArray *sleepingComponents)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpBody _staticBody);$/;"	p	struct:cpSpace	access:public	signature:(cpBody _staticBody)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpBool skipPostStep);$/;"	p	struct:cpSpace	access:public	signature:(cpBool skipPostStep)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpCollisionHandler defaultHandler);$/;"	p	struct:cpSpace	access:public	signature:(cpCollisionHandler defaultHandler)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpContactBufferHeader *contactBuffersHead);$/;"	p	struct:cpSpace	access:public	signature:(cpContactBufferHeader *contactBuffersHead)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpFloat curr_dt);$/;"	p	struct:cpSpace	access:public	signature:(cpFloat curr_dt)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpHashSet *cachedArbiters);$/;"	p	struct:cpSpace	access:public	signature:(cpHashSet *cachedArbiters)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpHashSet *collisionHandlers);$/;"	p	struct:cpSpace	access:public	signature:(cpHashSet *collisionHandlers)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpSpatialIndex *activeShapes);$/;"	p	struct:cpSpace	access:public	signature:(cpSpatialIndex *activeShapes)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpSpatialIndex *staticShapes);$/;"	p	struct:cpSpace	access:public	signature:(cpSpatialIndex *staticShapes)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(cpTimestamp stamp);$/;"	p	struct:cpSpace	access:public	signature:(cpTimestamp stamp)
cpSpace::CP_PRIVATE	include/chipmunk/cpSpace.h	/^	CP_PRIVATE(int locked);$/;"	p	struct:cpSpace	access:public	signature:(int locked)
cpSpace::collisionBias	include/chipmunk/cpSpace.h	/^	cpFloat collisionBias;$/;"	m	struct:cpSpace	access:public
cpSpace::collisionPersistence	include/chipmunk/cpSpace.h	/^	cpTimestamp collisionPersistence;$/;"	m	struct:cpSpace	access:public
cpSpace::collisionSlop	include/chipmunk/cpSpace.h	/^	cpFloat collisionSlop;$/;"	m	struct:cpSpace	access:public
cpSpace::damping	include/chipmunk/cpSpace.h	/^	cpFloat damping;$/;"	m	struct:cpSpace	access:public
cpSpace::data	include/chipmunk/cpSpace.h	/^	cpDataPointer data;$/;"	m	struct:cpSpace	access:public
cpSpace::enableContactGraph	include/chipmunk/cpSpace.h	/^	cpBool enableContactGraph;$/;"	m	struct:cpSpace	access:public
cpSpace::gravity	include/chipmunk/cpSpace.h	/^	cpVect gravity;$/;"	m	struct:cpSpace	access:public
cpSpace::idleSpeedThreshold	include/chipmunk/cpSpace.h	/^	cpFloat idleSpeedThreshold;$/;"	m	struct:cpSpace	access:public
cpSpace::iterations	include/chipmunk/cpSpace.h	/^	int iterations;$/;"	m	struct:cpSpace	access:public
cpSpace::sleepTimeThreshold	include/chipmunk/cpSpace.h	/^	cpFloat sleepTimeThreshold;$/;"	m	struct:cpSpace	access:public
cpSpace::staticBody	include/chipmunk/cpSpace.h	/^	cpBody *staticBody;$/;"	m	struct:cpSpace	access:public
cpSpaceActivateBody	include/chipmunk/chipmunk_private.h	/^void cpSpaceActivateBody(cpSpace *space, cpBody *body);$/;"	p	signature:(cpSpace *space, cpBody *body)
cpSpaceActivateBody	src/cpSpaceComponent.c	/^cpSpaceActivateBody(cpSpace *space, cpBody *body)$/;"	f	signature:(cpSpace *space, cpBody *body)
cpSpaceActivateShapesTouchingShape	include/chipmunk/cpSpace.h	/^void cpSpaceActivateShapesTouchingShape(cpSpace *space, cpShape *shape);$/;"	p	signature:(cpSpace *space, cpShape *shape)
cpSpaceActivateShapesTouchingShape	src/cpSpaceComponent.c	/^cpSpaceActivateShapesTouchingShape(cpSpace *space, cpShape *shape){$/;"	f	signature:(cpSpace *space, cpShape *shape)
cpSpaceAddBody	include/chipmunk/cpSpace.h	/^cpBody* cpSpaceAddBody(cpSpace *space, cpBody *body);$/;"	p	signature:(cpSpace *space, cpBody *body)
cpSpaceAddBody	src/cpSpace.c	/^cpSpaceAddBody(cpSpace *space, cpBody *body)$/;"	f	signature:(cpSpace *space, cpBody *body)
cpSpaceAddCollisionHandler	include/chipmunk/cpSpace.h	/^void cpSpaceAddCollisionHandler($/;"	p	signature:( cpSpace *space, cpCollisionType a, cpCollisionType b, cpCollisionBeginFunc begin, cpCollisionPreSolveFunc preSolve, cpCollisionPostSolveFunc postSolve, cpCollisionSeparateFunc separate, void *data )
cpSpaceAddCollisionHandler	src/cpSpace.c	/^cpSpaceAddCollisionHandler($/;"	f	signature:( cpSpace *space, cpCollisionType a, cpCollisionType b, cpCollisionBeginFunc begin, cpCollisionPreSolveFunc preSolve, cpCollisionPostSolveFunc postSolve, cpCollisionSeparateFunc separate, void *data )
cpSpaceAddConstraint	include/chipmunk/cpSpace.h	/^cpConstraint* cpSpaceAddConstraint(cpSpace *space, cpConstraint *constraint);$/;"	p	signature:(cpSpace *space, cpConstraint *constraint)
cpSpaceAddConstraint	src/cpSpace.c	/^cpSpaceAddConstraint(cpSpace *space, cpConstraint *constraint)$/;"	f	signature:(cpSpace *space, cpConstraint *constraint)
cpSpaceAddPostStepCallback	include/chipmunk/cpSpace.h	/^cpBool cpSpaceAddPostStepCallback(cpSpace *space, cpPostStepFunc func, void *key, void *data);$/;"	p	signature:(cpSpace *space, cpPostStepFunc func, void *key, void *data)
cpSpaceAddPostStepCallback	src/cpSpaceStep.c	/^cpSpaceAddPostStepCallback(cpSpace *space, cpPostStepFunc func, void *key, void *data)$/;"	f	signature:(cpSpace *space, cpPostStepFunc func, void *key, void *data)
cpSpaceAddShape	include/chipmunk/cpSpace.h	/^cpShape* cpSpaceAddShape(cpSpace *space, cpShape *shape);$/;"	p	signature:(cpSpace *space, cpShape *shape)
cpSpaceAddShape	src/cpSpace.c	/^cpSpaceAddShape(cpSpace *space, cpShape *shape)$/;"	f	signature:(cpSpace *space, cpShape *shape)
cpSpaceAddStaticShape	include/chipmunk/cpSpace.h	/^cpShape* cpSpaceAddStaticShape(cpSpace *space, cpShape *shape);$/;"	p	signature:(cpSpace *space, cpShape *shape)
cpSpaceAddStaticShape	src/cpSpace.c	/^cpSpaceAddStaticShape(cpSpace *space, cpShape *shape)$/;"	f	signature:(cpSpace *space, cpShape *shape)
cpSpaceAlloc	include/chipmunk/cpSpace.h	/^cpSpace* cpSpaceAlloc(void);$/;"	p	signature:(void)
cpSpaceAlloc	src/cpSpace.c	/^cpSpaceAlloc(void)$/;"	f	signature:(void)
cpSpaceAllocContactBuffer	src/cpSpaceStep.c	/^cpSpaceAllocContactBuffer(cpSpace *space)$/;"	f	file:	signature:(cpSpace *space)
cpSpaceArbiterApplyImpulseFunc	include/chipmunk/cpSpace.h	/^typedef void (*cpSpaceArbiterApplyImpulseFunc)(cpArbiter *arb);$/;"	t
cpSpaceArbiterSetFilter	include/chipmunk/chipmunk_private.h	/^cpBool cpSpaceArbiterSetFilter(cpArbiter *arb, cpSpace *space);$/;"	p	signature:(cpArbiter *arb, cpSpace *space)
cpSpaceArbiterSetFilter	src/cpSpaceStep.c	/^cpSpaceArbiterSetFilter(cpArbiter *arb, cpSpace *space)$/;"	f	signature:(cpArbiter *arb, cpSpace *space)
cpSpaceArbiterSetTrans	src/cpSpaceStep.c	/^cpSpaceArbiterSetTrans(cpShape **shapes, cpSpace *space)$/;"	f	file:	signature:(cpShape **shapes, cpSpace *space)
cpSpaceBBQuery	include/chipmunk/cpSpace.h	/^void cpSpaceBBQuery(cpSpace *space, cpBB bb, cpLayers layers, cpGroup group, cpSpaceBBQueryFunc func, void *data);$/;"	p	signature:(cpSpace *space, cpBB bb, cpLayers layers, cpGroup group, cpSpaceBBQueryFunc func, void *data)
cpSpaceBBQuery	src/cpSpaceQuery.c	/^cpSpaceBBQuery(cpSpace *space, cpBB bb, cpLayers layers, cpGroup group, cpSpaceBBQueryFunc func, void *data)$/;"	f	signature:(cpSpace *space, cpBB bb, cpLayers layers, cpGroup group, cpSpaceBBQueryFunc func, void *data)
cpSpaceBBQueryFunc	include/chipmunk/cpSpace.h	/^typedef void (*cpSpaceBBQueryFunc)(cpShape *shape, void *data);$/;"	t
cpSpaceBBQuery_b	include/chipmunk/chipmunk.h	/^void cpSpaceBBQuery_b(cpSpace *space, cpBB bb, cpLayers layers, cpGroup group, cpSpaceBBQueryBlock block);$/;"	p	signature:(cpSpace *space, cpBB bb, cpLayers layers, cpGroup group, cpSpaceBBQueryBlock block)
cpSpaceBBQuery_b	src/chipmunk.c	/^void cpSpaceBBQuery_b(cpSpace *space, cpBB bb, cpLayers layers, cpGroup group, cpSpaceBBQueryBlock block){$/;"	f	signature:(cpSpace *space, cpBB bb, cpLayers layers, cpGroup group, cpSpaceBBQueryBlock block)
cpSpaceBodyIteratorFunc	include/chipmunk/cpSpace.h	/^typedef void (*cpSpaceBodyIteratorFunc)(cpBody *body, void *data);$/;"	t
cpSpaceCollideShapes	include/chipmunk/chipmunk_private.h	/^void cpSpaceCollideShapes(cpShape *a, cpShape *b, cpSpace *space);$/;"	p	signature:(cpShape *a, cpShape *b, cpSpace *space)
cpSpaceCollideShapes	src/cpSpaceStep.c	/^cpSpaceCollideShapes(cpShape *a, cpShape *b, cpSpace *space)$/;"	f	signature:(cpShape *a, cpShape *b, cpSpace *space)
cpSpaceConstraintIteratorFunc	include/chipmunk/cpSpace.h	/^typedef void (*cpSpaceConstraintIteratorFunc)(cpConstraint *constraint, void *data);$/;"	t
cpSpaceContainsBody	include/chipmunk/cpSpace.h	/^cpBool cpSpaceContainsBody(cpSpace *space, cpBody *body);$/;"	p	signature:(cpSpace *space, cpBody *body)
cpSpaceContainsBody	src/cpSpace.c	/^cpBool cpSpaceContainsBody(cpSpace *space, cpBody *body)$/;"	f	signature:(cpSpace *space, cpBody *body)
cpSpaceContainsConstraint	include/chipmunk/cpSpace.h	/^cpBool cpSpaceContainsConstraint(cpSpace *space, cpConstraint *constraint);$/;"	p	signature:(cpSpace *space, cpConstraint *constraint)
cpSpaceContainsConstraint	src/cpSpace.c	/^cpBool cpSpaceContainsConstraint(cpSpace *space, cpConstraint *constraint)$/;"	f	signature:(cpSpace *space, cpConstraint *constraint)
cpSpaceContainsShape	include/chipmunk/cpSpace.h	/^cpBool cpSpaceContainsShape(cpSpace *space, cpShape *shape);$/;"	p	signature:(cpSpace *space, cpShape *shape)
cpSpaceContainsShape	src/cpSpace.c	/^cpBool cpSpaceContainsShape(cpSpace *space, cpShape *shape)$/;"	f	signature:(cpSpace *space, cpShape *shape)
cpSpaceDeactivateBody	src/cpSpaceComponent.c	/^cpSpaceDeactivateBody(cpSpace *space, cpBody *body)$/;"	f	file:	signature:(cpSpace *space, cpBody *body)
cpSpaceDestroy	include/chipmunk/cpSpace.h	/^void cpSpaceDestroy(cpSpace *space);$/;"	p	signature:(cpSpace *space)
cpSpaceDestroy	src/cpSpace.c	/^cpSpaceDestroy(cpSpace *space)$/;"	f	signature:(cpSpace *space)
cpSpaceEachBody	include/chipmunk/cpSpace.h	/^void cpSpaceEachBody(cpSpace *space, cpSpaceBodyIteratorFunc func, void *data);$/;"	p	signature:(cpSpace *space, cpSpaceBodyIteratorFunc func, void *data)
cpSpaceEachBody	src/cpSpace.c	/^cpSpaceEachBody(cpSpace *space, cpSpaceBodyIteratorFunc func, void *data)$/;"	f	signature:(cpSpace *space, cpSpaceBodyIteratorFunc func, void *data)
cpSpaceEachBody_b	include/chipmunk/chipmunk.h	/^void cpSpaceEachBody_b(cpSpace *space, void (^block)(cpBody *body));$/;"	p	signature:(cpSpace *space, void (^block)(cpBody *body))
cpSpaceEachBody_b	src/chipmunk.c	/^void cpSpaceEachBody_b(cpSpace *space, void (^block)(cpBody *body)){$/;"	f	signature:(cpSpace *space, void (^block)(cpBody *body))
cpSpaceEachConstraint	include/chipmunk/cpSpace.h	/^void cpSpaceEachConstraint(cpSpace *space, cpSpaceConstraintIteratorFunc func, void *data);$/;"	p	signature:(cpSpace *space, cpSpaceConstraintIteratorFunc func, void *data)
cpSpaceEachConstraint	src/cpSpace.c	/^cpSpaceEachConstraint(cpSpace *space, cpSpaceConstraintIteratorFunc func, void *data)$/;"	f	signature:(cpSpace *space, cpSpaceConstraintIteratorFunc func, void *data)
cpSpaceEachConstraint_b	include/chipmunk/chipmunk.h	/^void cpSpaceEachConstraint_b(cpSpace *space, void (^block)(cpConstraint *constraint));$/;"	p	signature:(cpSpace *space, void (^block)(cpConstraint *constraint))
cpSpaceEachConstraint_b	src/chipmunk.c	/^void cpSpaceEachConstraint_b(cpSpace *space, void (^block)(cpConstraint *constraint)){$/;"	f	signature:(cpSpace *space, void (^block)(cpConstraint *constraint))
cpSpaceEachShape	include/chipmunk/cpSpace.h	/^void cpSpaceEachShape(cpSpace *space, cpSpaceShapeIteratorFunc func, void *data);$/;"	p	signature:(cpSpace *space, cpSpaceShapeIteratorFunc func, void *data)
cpSpaceEachShape	src/cpSpace.c	/^cpSpaceEachShape(cpSpace *space, cpSpaceShapeIteratorFunc func, void *data)$/;"	f	signature:(cpSpace *space, cpSpaceShapeIteratorFunc func, void *data)
cpSpaceEachShape_b	include/chipmunk/chipmunk.h	/^void cpSpaceEachShape_b(cpSpace *space, void (^block)(cpShape *shape));$/;"	p	signature:(cpSpace *space, void (^block)(cpShape *shape))
cpSpaceEachShape_b	src/chipmunk.c	/^void cpSpaceEachShape_b(cpSpace *space, void (^block)(cpShape *shape)){$/;"	f	signature:(cpSpace *space, void (^block)(cpShape *shape))
cpSpaceFilterArbiters	include/chipmunk/chipmunk_private.h	/^void cpSpaceFilterArbiters(cpSpace *space, cpBody *body, cpShape *filter);$/;"	p	signature:(cpSpace *space, cpBody *body, cpShape *filter)
cpSpaceFilterArbiters	src/cpSpace.c	/^cpSpaceFilterArbiters(cpSpace *space, cpBody *body, cpShape *filter)$/;"	f	signature:(cpSpace *space, cpBody *body, cpShape *filter)
cpSpaceFree	include/chipmunk/cpSpace.h	/^void cpSpaceFree(cpSpace *space);$/;"	p	signature:(cpSpace *space)
cpSpaceFree	src/cpSpace.c	/^cpSpaceFree(cpSpace *space)$/;"	f	signature:(cpSpace *space)
cpSpaceGetCurrentTimeStep	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpaceGetCurrentTimeStep);$/;"	v
cpSpaceGetPostStepCallback	include/chipmunk/chipmunk_private.h	/^cpPostStepCallback *cpSpaceGetPostStepCallback(cpSpace *space, void *key);$/;"	p	signature:(cpSpace *space, void *key)
cpSpaceGetPostStepCallback	src/cpSpaceStep.c	/^cpSpaceGetPostStepCallback(cpSpace *space, void *key)$/;"	f	signature:(cpSpace *space, void *key)
cpSpaceGetStaticBody	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpaceGetStaticBody);$/;"	v
cpSpaceHash	include/chipmunk/cpSpatialIndex.h	/^typedef struct cpSpaceHash cpSpaceHash;$/;"	t	typeref:struct:cpSpaceHash
cpSpaceHash	src/cpSpaceHash.c	/^struct cpSpaceHash {$/;"	s	file:
cpSpaceHash::allocatedBuffers	src/cpSpaceHash.c	/^	cpArray *allocatedBuffers;$/;"	m	struct:cpSpaceHash	file:	access:public
cpSpaceHash::celldim	src/cpSpaceHash.c	/^	cpFloat celldim;$/;"	m	struct:cpSpaceHash	file:	access:public
cpSpaceHash::handleSet	src/cpSpaceHash.c	/^	cpHashSet *handleSet;$/;"	m	struct:cpSpaceHash	file:	access:public
cpSpaceHash::numcells	src/cpSpaceHash.c	/^	int numcells;$/;"	m	struct:cpSpaceHash	file:	access:public
cpSpaceHash::pooledBins	src/cpSpaceHash.c	/^	cpSpaceHashBin *pooledBins;$/;"	m	struct:cpSpaceHash	file:	access:public
cpSpaceHash::pooledHandles	src/cpSpaceHash.c	/^	cpArray *pooledHandles;$/;"	m	struct:cpSpaceHash	file:	access:public
cpSpaceHash::spatialIndex	src/cpSpaceHash.c	/^	cpSpatialIndex spatialIndex;$/;"	m	struct:cpSpaceHash	file:	access:public
cpSpaceHash::stamp	src/cpSpaceHash.c	/^	cpTimestamp stamp;$/;"	m	struct:cpSpaceHash	file:	access:public
cpSpaceHash::table	src/cpSpaceHash.c	/^	cpSpaceHashBin **table;$/;"	m	struct:cpSpaceHash	file:	access:public
cpSpaceHashAlloc	include/chipmunk/cpSpatialIndex.h	/^cpSpaceHash* cpSpaceHashAlloc(void);$/;"	p	signature:(void)
cpSpaceHashAlloc	src/cpSpaceHash.c	/^cpSpaceHashAlloc(void)$/;"	f	signature:(void)
cpSpaceHashAllocTable	src/cpSpaceHash.c	/^cpSpaceHashAllocTable(cpSpaceHash *hash, int numcells)$/;"	f	file:	signature:(cpSpaceHash *hash, int numcells)
cpSpaceHashBin	src/cpSpaceHash.c	/^struct cpSpaceHashBin {$/;"	s	file:
cpSpaceHashBin	src/cpSpaceHash.c	/^typedef struct cpSpaceHashBin cpSpaceHashBin;$/;"	t	typeref:struct:cpSpaceHashBin	file:
cpSpaceHashBin::handle	src/cpSpaceHash.c	/^	cpHandle *handle;$/;"	m	struct:cpSpaceHashBin	file:	access:public
cpSpaceHashBin::next	src/cpSpaceHash.c	/^	cpSpaceHashBin *next;$/;"	m	struct:cpSpaceHashBin	file:	access:public
cpSpaceHashContains	src/cpSpaceHash.c	/^cpSpaceHashContains(cpSpaceHash *hash, void *obj, cpHashValue hashid)$/;"	f	file:	signature:(cpSpaceHash *hash, void *obj, cpHashValue hashid)
cpSpaceHashCount	src/cpSpaceHash.c	/^cpSpaceHashCount(cpSpaceHash *hash)$/;"	f	file:	signature:(cpSpaceHash *hash)
cpSpaceHashDestroy	src/cpSpaceHash.c	/^cpSpaceHashDestroy(cpSpaceHash *hash)$/;"	f	file:	signature:(cpSpaceHash *hash)
cpSpaceHashEach	src/cpSpaceHash.c	/^cpSpaceHashEach(cpSpaceHash *hash, cpSpatialIndexIteratorFunc func, void *data)$/;"	f	file:	signature:(cpSpaceHash *hash, cpSpatialIndexIteratorFunc func, void *data)
cpSpaceHashInit	include/chipmunk/cpSpatialIndex.h	/^cpSpatialIndex* cpSpaceHashInit(cpSpaceHash *hash, cpFloat celldim, int numcells, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);$/;"	p	signature:(cpSpaceHash *hash, cpFloat celldim, int numcells, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpSpaceHashInit	src/cpSpaceHash.c	/^cpSpaceHashInit(cpSpaceHash *hash, cpFloat celldim, int numcells, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)$/;"	f	signature:(cpSpaceHash *hash, cpFloat celldim, int numcells, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpSpaceHashInsert	src/cpSpaceHash.c	/^cpSpaceHashInsert(cpSpaceHash *hash, void *obj, cpHashValue hashid)$/;"	f	file:	signature:(cpSpaceHash *hash, void *obj, cpHashValue hashid)
cpSpaceHashNew	include/chipmunk/cpSpatialIndex.h	/^cpSpatialIndex* cpSpaceHashNew(cpFloat celldim, int cells, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);$/;"	p	signature:(cpFloat celldim, int cells, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpSpaceHashNew	src/cpSpaceHash.c	/^cpSpaceHashNew(cpFloat celldim, int cells, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)$/;"	f	signature:(cpFloat celldim, int cells, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpSpaceHashQuery	src/cpSpaceHash.c	/^cpSpaceHashQuery(cpSpaceHash *hash, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data)$/;"	f	file:	signature:(cpSpaceHash *hash, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data)
cpSpaceHashRehash	src/cpSpaceHash.c	/^cpSpaceHashRehash(cpSpaceHash *hash)$/;"	f	file:	signature:(cpSpaceHash *hash)
cpSpaceHashRehashObject	src/cpSpaceHash.c	/^cpSpaceHashRehashObject(cpSpaceHash *hash, void *obj, cpHashValue hashid)$/;"	f	file:	signature:(cpSpaceHash *hash, void *obj, cpHashValue hashid)
cpSpaceHashReindexQuery	src/cpSpaceHash.c	/^cpSpaceHashReindexQuery(cpSpaceHash *hash, cpSpatialIndexQueryFunc func, void *data)$/;"	f	file:	signature:(cpSpaceHash *hash, cpSpatialIndexQueryFunc func, void *data)
cpSpaceHashRemove	src/cpSpaceHash.c	/^cpSpaceHashRemove(cpSpaceHash *hash, void *obj, cpHashValue hashid)$/;"	f	file:	signature:(cpSpaceHash *hash, void *obj, cpHashValue hashid)
cpSpaceHashRenderDebug	src/cpSpaceHash.c	/^cpSpaceHashRenderDebug(cpSpatialIndex *index)$/;"	f	signature:(cpSpatialIndex *index)
cpSpaceHashResize	include/chipmunk/cpSpatialIndex.h	/^void cpSpaceHashResize(cpSpaceHash *hash, cpFloat celldim, int numcells);$/;"	p	signature:(cpSpaceHash *hash, cpFloat celldim, int numcells)
cpSpaceHashResize	src/cpSpaceHash.c	/^cpSpaceHashResize(cpSpaceHash *hash, cpFloat celldim, int numcells)$/;"	f	signature:(cpSpaceHash *hash, cpFloat celldim, int numcells)
cpSpaceHashSegmentQuery	src/cpSpaceHash.c	/^cpSpaceHashSegmentQuery(cpSpaceHash *hash, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data)$/;"	f	file:	signature:(cpSpaceHash *hash, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data)
cpSpaceInit	include/chipmunk/cpSpace.h	/^cpSpace* cpSpaceInit(cpSpace *space);$/;"	p	signature:(cpSpace *space)
cpSpaceInit	src/cpSpace.c	/^cpSpaceInit(cpSpace *space)$/;"	f	signature:(cpSpace *space)
cpSpaceIsLocked	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpaceIsLocked);$/;"	v
cpSpaceIsLocked	include/chipmunk/cpSpace.h	/^cpSpaceIsLocked(cpSpace *space)$/;"	f	signature:(cpSpace *space)
cpSpaceLock	include/chipmunk/chipmunk_private.h	/^void cpSpaceLock(cpSpace *space);$/;"	p	signature:(cpSpace *space)
cpSpaceLock	src/cpSpaceStep.c	/^cpSpaceLock(cpSpace *space)$/;"	f	signature:(cpSpace *space)
cpSpaceLookupHandler	include/chipmunk/chipmunk_private.h	/^cpSpaceLookupHandler(cpSpace *space, cpCollisionType a, cpCollisionType b)$/;"	f	signature:(cpSpace *space, cpCollisionType a, cpCollisionType b)
cpSpaceNearestPointQuery	include/chipmunk/cpSpace.h	/^void cpSpaceNearestPointQuery(cpSpace *space, cpVect point, cpFloat maxDistance, cpLayers layers, cpGroup group, cpSpaceNearestPointQueryFunc func, void *data);$/;"	p	signature:(cpSpace *space, cpVect point, cpFloat maxDistance, cpLayers layers, cpGroup group, cpSpaceNearestPointQueryFunc func, void *data)
cpSpaceNearestPointQuery	src/cpSpaceQuery.c	/^cpSpaceNearestPointQuery(cpSpace *space, cpVect point, cpFloat maxDistance, cpLayers layers, cpGroup group, cpSpaceNearestPointQueryFunc func, void *data)$/;"	f	signature:(cpSpace *space, cpVect point, cpFloat maxDistance, cpLayers layers, cpGroup group, cpSpaceNearestPointQueryFunc func, void *data)
cpSpaceNearestPointQueryFunc	include/chipmunk/cpSpace.h	/^typedef void (*cpSpaceNearestPointQueryFunc)(cpShape *shape, cpFloat distance, cpVect point, void *data);$/;"	t
cpSpaceNearestPointQueryNearest	include/chipmunk/cpSpace.h	/^cpShape *cpSpaceNearestPointQueryNearest(cpSpace *space, cpVect point, cpFloat maxDistance, cpLayers layers, cpGroup group, cpNearestPointQueryInfo *out);$/;"	p	signature:(cpSpace *space, cpVect point, cpFloat maxDistance, cpLayers layers, cpGroup group, cpNearestPointQueryInfo *out)
cpSpaceNearestPointQueryNearest	src/cpSpaceQuery.c	/^cpSpaceNearestPointQueryNearest(cpSpace *space, cpVect point, cpFloat maxDistance, cpLayers layers, cpGroup group, cpNearestPointQueryInfo *out)$/;"	f	signature:(cpSpace *space, cpVect point, cpFloat maxDistance, cpLayers layers, cpGroup group, cpNearestPointQueryInfo *out)
cpSpaceNearestPointQuery_b	include/chipmunk/chipmunk.h	/^void cpSpaceNearestPointQuery_b(cpSpace *space, cpVect point, cpFloat maxDistance, cpLayers layers, cpGroup group, cpSpaceNearestPointQueryBlock block);$/;"	p	signature:(cpSpace *space, cpVect point, cpFloat maxDistance, cpLayers layers, cpGroup group, cpSpaceNearestPointQueryBlock block)
cpSpaceNearestPointQuery_b	src/chipmunk.c	/^void cpSpaceNearestPointQuery_b(cpSpace *space, cpVect point, cpFloat maxDistance, cpLayers layers, cpGroup group, cpSpaceNearestPointQueryBlock block){$/;"	f	signature:(cpSpace *space, cpVect point, cpFloat maxDistance, cpLayers layers, cpGroup group, cpSpaceNearestPointQueryBlock block)
cpSpaceNew	include/chipmunk/cpSpace.h	/^cpSpace* cpSpaceNew(void);$/;"	p	signature:(void)
cpSpaceNew	src/cpSpace.c	/^cpSpaceNew(void)$/;"	f	signature:(void)
cpSpacePointQuery	include/chipmunk/cpSpace.h	/^void cpSpacePointQuery(cpSpace *space, cpVect point, cpLayers layers, cpGroup group, cpSpacePointQueryFunc func, void *data);$/;"	p	signature:(cpSpace *space, cpVect point, cpLayers layers, cpGroup group, cpSpacePointQueryFunc func, void *data)
cpSpacePointQuery	src/cpSpaceQuery.c	/^cpSpacePointQuery(cpSpace *space, cpVect point, cpLayers layers, cpGroup group, cpSpacePointQueryFunc func, void *data)$/;"	f	signature:(cpSpace *space, cpVect point, cpLayers layers, cpGroup group, cpSpacePointQueryFunc func, void *data)
cpSpacePointQueryFirst	include/chipmunk/cpSpace.h	/^cpShape *cpSpacePointQueryFirst(cpSpace *space, cpVect point, cpLayers layers, cpGroup group);$/;"	p	signature:(cpSpace *space, cpVect point, cpLayers layers, cpGroup group)
cpSpacePointQueryFirst	src/cpSpaceQuery.c	/^cpSpacePointQueryFirst(cpSpace *space, cpVect point, cpLayers layers, cpGroup group)$/;"	f	signature:(cpSpace *space, cpVect point, cpLayers layers, cpGroup group)
cpSpacePointQueryFunc	include/chipmunk/cpSpace.h	/^typedef void (*cpSpacePointQueryFunc)(cpShape *shape, void *data);$/;"	t
cpSpacePopContacts	src/cpSpaceStep.c	/^cpSpacePopContacts(cpSpace *space, int count){$/;"	f	file:	signature:(cpSpace *space, int count)
cpSpaceProcessComponents	include/chipmunk/chipmunk_private.h	/^void cpSpaceProcessComponents(cpSpace *space, cpFloat dt);$/;"	p	signature:(cpSpace *space, cpFloat dt)
cpSpaceProcessComponents	src/cpSpaceComponent.c	/^cpSpaceProcessComponents(cpSpace *space, cpFloat dt)$/;"	f	signature:(cpSpace *space, cpFloat dt)
cpSpacePushContacts	include/chipmunk/chipmunk_private.h	/^void cpSpacePushContacts(cpSpace *space, int count);$/;"	p	signature:(cpSpace *space, int count)
cpSpacePushContacts	src/cpSpaceStep.c	/^cpSpacePushContacts(cpSpace *space, int count)$/;"	f	signature:(cpSpace *space, int count)
cpSpacePushFreshContactBuffer	include/chipmunk/chipmunk_private.h	/^void cpSpacePushFreshContactBuffer(cpSpace *space);$/;"	p	signature:(cpSpace *space)
cpSpacePushFreshContactBuffer	src/cpSpaceStep.c	/^cpSpacePushFreshContactBuffer(cpSpace *space)$/;"	f	signature:(cpSpace *space)
cpSpaceReindexShape	include/chipmunk/cpSpace.h	/^void cpSpaceReindexShape(cpSpace *space, cpShape *shape);$/;"	p	signature:(cpSpace *space, cpShape *shape)
cpSpaceReindexShape	src/cpSpace.c	/^cpSpaceReindexShape(cpSpace *space, cpShape *shape)$/;"	f	signature:(cpSpace *space, cpShape *shape)
cpSpaceReindexShapesForBody	include/chipmunk/cpSpace.h	/^void cpSpaceReindexShapesForBody(cpSpace *space, cpBody *body);$/;"	p	signature:(cpSpace *space, cpBody *body)
cpSpaceReindexShapesForBody	src/cpSpace.c	/^cpSpaceReindexShapesForBody(cpSpace *space, cpBody *body)$/;"	f	signature:(cpSpace *space, cpBody *body)
cpSpaceReindexStatic	include/chipmunk/cpSpace.h	/^void cpSpaceReindexStatic(cpSpace *space);$/;"	p	signature:(cpSpace *space)
cpSpaceReindexStatic	src/cpSpace.c	/^cpSpaceReindexStatic(cpSpace *space)$/;"	f	signature:(cpSpace *space)
cpSpaceRemoveBody	include/chipmunk/cpSpace.h	/^void cpSpaceRemoveBody(cpSpace *space, cpBody *body);$/;"	p	signature:(cpSpace *space, cpBody *body)
cpSpaceRemoveBody	src/cpSpace.c	/^cpSpaceRemoveBody(cpSpace *space, cpBody *body)$/;"	f	signature:(cpSpace *space, cpBody *body)
cpSpaceRemoveCollisionHandler	include/chipmunk/cpSpace.h	/^void cpSpaceRemoveCollisionHandler(cpSpace *space, cpCollisionType a, cpCollisionType b);$/;"	p	signature:(cpSpace *space, cpCollisionType a, cpCollisionType b)
cpSpaceRemoveCollisionHandler	src/cpSpace.c	/^cpSpaceRemoveCollisionHandler(cpSpace *space, cpCollisionType a, cpCollisionType b)$/;"	f	signature:(cpSpace *space, cpCollisionType a, cpCollisionType b)
cpSpaceRemoveConstraint	include/chipmunk/cpSpace.h	/^void cpSpaceRemoveConstraint(cpSpace *space, cpConstraint *constraint);$/;"	p	signature:(cpSpace *space, cpConstraint *constraint)
cpSpaceRemoveConstraint	src/cpSpace.c	/^cpSpaceRemoveConstraint(cpSpace *space, cpConstraint *constraint)$/;"	f	signature:(cpSpace *space, cpConstraint *constraint)
cpSpaceRemoveShape	include/chipmunk/cpSpace.h	/^void cpSpaceRemoveShape(cpSpace *space, cpShape *shape);$/;"	p	signature:(cpSpace *space, cpShape *shape)
cpSpaceRemoveShape	src/cpSpace.c	/^cpSpaceRemoveShape(cpSpace *space, cpShape *shape)$/;"	f	signature:(cpSpace *space, cpShape *shape)
cpSpaceRemoveStaticShape	include/chipmunk/cpSpace.h	/^void cpSpaceRemoveStaticShape(cpSpace *space, cpShape *shape);$/;"	p	signature:(cpSpace *space, cpShape *shape)
cpSpaceRemoveStaticShape	src/cpSpace.c	/^cpSpaceRemoveStaticShape(cpSpace *space, cpShape *shape)$/;"	f	signature:(cpSpace *space, cpShape *shape)
cpSpaceSegmentQuery	include/chipmunk/cpSpace.h	/^void cpSpaceSegmentQuery(cpSpace *space, cpVect start, cpVect end, cpLayers layers, cpGroup group, cpSpaceSegmentQueryFunc func, void *data);$/;"	p	signature:(cpSpace *space, cpVect start, cpVect end, cpLayers layers, cpGroup group, cpSpaceSegmentQueryFunc func, void *data)
cpSpaceSegmentQuery	src/cpSpaceQuery.c	/^cpSpaceSegmentQuery(cpSpace *space, cpVect start, cpVect end, cpLayers layers, cpGroup group, cpSpaceSegmentQueryFunc func, void *data)$/;"	f	signature:(cpSpace *space, cpVect start, cpVect end, cpLayers layers, cpGroup group, cpSpaceSegmentQueryFunc func, void *data)
cpSpaceSegmentQueryFirst	include/chipmunk/cpSpace.h	/^cpShape *cpSpaceSegmentQueryFirst(cpSpace *space, cpVect start, cpVect end, cpLayers layers, cpGroup group, cpSegmentQueryInfo *out);$/;"	p	signature:(cpSpace *space, cpVect start, cpVect end, cpLayers layers, cpGroup group, cpSegmentQueryInfo *out)
cpSpaceSegmentQueryFirst	src/cpSpaceQuery.c	/^cpSpaceSegmentQueryFirst(cpSpace *space, cpVect start, cpVect end, cpLayers layers, cpGroup group, cpSegmentQueryInfo *out)$/;"	f	signature:(cpSpace *space, cpVect start, cpVect end, cpLayers layers, cpGroup group, cpSegmentQueryInfo *out)
cpSpaceSegmentQueryFunc	include/chipmunk/cpSpace.h	/^typedef void (*cpSpaceSegmentQueryFunc)(cpShape *shape, cpFloat t, cpVect n, void *data);$/;"	t
cpSpaceSegmentQuery_b	include/chipmunk/chipmunk.h	/^void cpSpaceSegmentQuery_b(cpSpace *space, cpVect start, cpVect end, cpLayers layers, cpGroup group, cpSpaceSegmentQueryBlock block);$/;"	p	signature:(cpSpace *space, cpVect start, cpVect end, cpLayers layers, cpGroup group, cpSpaceSegmentQueryBlock block)
cpSpaceSegmentQuery_b	src/chipmunk.c	/^void cpSpaceSegmentQuery_b(cpSpace *space, cpVect start, cpVect end, cpLayers layers, cpGroup group, cpSpaceSegmentQueryBlock block){$/;"	f	signature:(cpSpace *space, cpVect start, cpVect end, cpLayers layers, cpGroup group, cpSpaceSegmentQueryBlock block)
cpSpaceSetDefaultCollisionHandler	include/chipmunk/cpSpace.h	/^void cpSpaceSetDefaultCollisionHandler($/;"	p	signature:( cpSpace *space, cpCollisionBeginFunc begin, cpCollisionPreSolveFunc preSolve, cpCollisionPostSolveFunc postSolve, cpCollisionSeparateFunc separate, void *data )
cpSpaceSetDefaultCollisionHandler	src/cpSpace.c	/^cpSpaceSetDefaultCollisionHandler($/;"	f	signature:( cpSpace *space, cpCollisionBeginFunc begin, cpCollisionPreSolveFunc preSolve, cpCollisionPostSolveFunc postSolve, cpCollisionSeparateFunc separate, void *data )
cpSpaceShapeIteratorFunc	include/chipmunk/cpSpace.h	/^typedef void (*cpSpaceShapeIteratorFunc)(cpShape *shape, void *data);$/;"	t
cpSpaceShapeQuery	include/chipmunk/cpSpace.h	/^cpBool cpSpaceShapeQuery(cpSpace *space, cpShape *shape, cpSpaceShapeQueryFunc func, void *data);$/;"	p	signature:(cpSpace *space, cpShape *shape, cpSpaceShapeQueryFunc func, void *data)
cpSpaceShapeQuery	src/cpSpaceQuery.c	/^cpSpaceShapeQuery(cpSpace *space, cpShape *shape, cpSpaceShapeQueryFunc func, void *data)$/;"	f	signature:(cpSpace *space, cpShape *shape, cpSpaceShapeQueryFunc func, void *data)
cpSpaceShapeQueryFunc	include/chipmunk/cpSpace.h	/^typedef void (*cpSpaceShapeQueryFunc)(cpShape *shape, cpContactPointSet *points, void *data);$/;"	t
cpSpaceShapeQuery_b	include/chipmunk/chipmunk.h	/^cpBool cpSpaceShapeQuery_b(cpSpace *space, cpShape *shape, cpSpaceShapeQueryBlock block);$/;"	p	signature:(cpSpace *space, cpShape *shape, cpSpaceShapeQueryBlock block)
cpSpaceShapeQuery_b	src/chipmunk.c	/^cpBool cpSpaceShapeQuery_b(cpSpace *space, cpShape *shape, cpSpaceShapeQueryBlock block){$/;"	f	signature:(cpSpace *space, cpShape *shape, cpSpaceShapeQueryBlock block)
cpSpaceStep	include/chipmunk/cpSpace.h	/^void cpSpaceStep(cpSpace *space, cpFloat dt);$/;"	p	signature:(cpSpace *space, cpFloat dt)
cpSpaceStep	src/cpSpaceStep.c	/^cpSpaceStep(cpSpace *space, cpFloat dt)$/;"	f	signature:(cpSpace *space, cpFloat dt)
cpSpaceUncacheArbiter	include/chipmunk/chipmunk_private.h	/^cpSpaceUncacheArbiter(cpSpace *space, cpArbiter *arb)$/;"	f	signature:(cpSpace *space, cpArbiter *arb)
cpSpaceUnlock	include/chipmunk/chipmunk_private.h	/^void cpSpaceUnlock(cpSpace *space, cpBool runPostStep);$/;"	p	signature:(cpSpace *space, cpBool runPostStep)
cpSpaceUnlock	src/cpSpaceStep.c	/^cpSpaceUnlock(cpSpace *space, cpBool runPostStep)$/;"	f	signature:(cpSpace *space, cpBool runPostStep)
cpSpaceUseSpatialHash	include/chipmunk/cpSpace.h	/^void cpSpaceUseSpatialHash(cpSpace *space, cpFloat dim, int count);$/;"	p	signature:(cpSpace *space, cpFloat dim, int count)
cpSpaceUseSpatialHash	src/cpSpace.c	/^cpSpaceUseSpatialHash(cpSpace *space, cpFloat dim, int count)$/;"	f	signature:(cpSpace *space, cpFloat dim, int count)
cpSpatialIndex	include/chipmunk/cpSpatialIndex.h	/^struct cpSpatialIndex {$/;"	s
cpSpatialIndex	include/chipmunk/cpSpatialIndex.h	/^typedef struct cpSpatialIndex cpSpatialIndex;$/;"	t	typeref:struct:cpSpatialIndex
cpSpatialIndex::bbfunc	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexBBFunc bbfunc;$/;"	m	struct:cpSpatialIndex	access:public
cpSpatialIndex::dynamicIndex	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndex *staticIndex, *dynamicIndex;$/;"	m	struct:cpSpatialIndex	access:public
cpSpatialIndex::klass	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexClass *klass;$/;"	m	struct:cpSpatialIndex	access:public
cpSpatialIndex::staticIndex	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndex *staticIndex, *dynamicIndex;$/;"	m	struct:cpSpatialIndex	access:public
cpSpatialIndexBBFunc	include/chipmunk/cpSpatialIndex.h	/^typedef cpBB (*cpSpatialIndexBBFunc)(void *obj);$/;"	t
cpSpatialIndexClass	include/chipmunk/cpSpatialIndex.h	/^struct cpSpatialIndexClass {$/;"	s
cpSpatialIndexClass	include/chipmunk/cpSpatialIndex.h	/^typedef struct cpSpatialIndexClass cpSpatialIndexClass;$/;"	t	typeref:struct:cpSpatialIndexClass
cpSpatialIndexClass::contains	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexContainsImpl contains;$/;"	m	struct:cpSpatialIndexClass	access:public
cpSpatialIndexClass::count	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexCountImpl count;$/;"	m	struct:cpSpatialIndexClass	access:public
cpSpatialIndexClass::destroy	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexDestroyImpl destroy;$/;"	m	struct:cpSpatialIndexClass	access:public
cpSpatialIndexClass::each	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexEachImpl each;$/;"	m	struct:cpSpatialIndexClass	access:public
cpSpatialIndexClass::insert	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexInsertImpl insert;$/;"	m	struct:cpSpatialIndexClass	access:public
cpSpatialIndexClass::query	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexQueryImpl query;$/;"	m	struct:cpSpatialIndexClass	access:public
cpSpatialIndexClass::reindex	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexReindexImpl reindex;$/;"	m	struct:cpSpatialIndexClass	access:public
cpSpatialIndexClass::reindexObject	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexReindexObjectImpl reindexObject;$/;"	m	struct:cpSpatialIndexClass	access:public
cpSpatialIndexClass::reindexQuery	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexReindexQueryImpl reindexQuery;$/;"	m	struct:cpSpatialIndexClass	access:public
cpSpatialIndexClass::remove	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexRemoveImpl remove;$/;"	m	struct:cpSpatialIndexClass	access:public
cpSpatialIndexClass::segmentQuery	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexSegmentQueryImpl segmentQuery;$/;"	m	struct:cpSpatialIndexClass	access:public
cpSpatialIndexCollideStatic	include/chipmunk/cpSpatialIndex.h	/^void cpSpatialIndexCollideStatic(cpSpatialIndex *dynamicIndex, cpSpatialIndex *staticIndex, cpSpatialIndexQueryFunc func, void *data);$/;"	p	signature:(cpSpatialIndex *dynamicIndex, cpSpatialIndex *staticIndex, cpSpatialIndexQueryFunc func, void *data)
cpSpatialIndexCollideStatic	src/cpSpatialIndex.c	/^cpSpatialIndexCollideStatic(cpSpatialIndex *dynamicIndex, cpSpatialIndex *staticIndex, cpSpatialIndexQueryFunc func, void *data)$/;"	f	signature:(cpSpatialIndex *dynamicIndex, cpSpatialIndex *staticIndex, cpSpatialIndexQueryFunc func, void *data)
cpSpatialIndexContains	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexContains);$/;"	v
cpSpatialIndexContains	include/chipmunk/cpSpatialIndex.h	/^static inline cpBool cpSpatialIndexContains(cpSpatialIndex *index, void *obj, cpHashValue hashid)$/;"	f	signature:(cpSpatialIndex *index, void *obj, cpHashValue hashid)
cpSpatialIndexContainsImpl	include/chipmunk/cpSpatialIndex.h	/^typedef cpBool (*cpSpatialIndexContainsImpl)(cpSpatialIndex *index, void *obj, cpHashValue hashid);$/;"	t
cpSpatialIndexCount	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexCount);$/;"	v
cpSpatialIndexCount	include/chipmunk/cpSpatialIndex.h	/^static inline int cpSpatialIndexCount(cpSpatialIndex *index)$/;"	f	signature:(cpSpatialIndex *index)
cpSpatialIndexCountImpl	include/chipmunk/cpSpatialIndex.h	/^typedef int (*cpSpatialIndexCountImpl)(cpSpatialIndex *index);$/;"	t
cpSpatialIndexDestroy	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexDestroy);$/;"	v
cpSpatialIndexDestroy	include/chipmunk/cpSpatialIndex.h	/^static inline void cpSpatialIndexDestroy(cpSpatialIndex *index)$/;"	f	signature:(cpSpatialIndex *index)
cpSpatialIndexDestroyImpl	include/chipmunk/cpSpatialIndex.h	/^typedef void (*cpSpatialIndexDestroyImpl)(cpSpatialIndex *index);$/;"	t
cpSpatialIndexEach	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexEach);$/;"	v
cpSpatialIndexEach	include/chipmunk/cpSpatialIndex.h	/^static inline void cpSpatialIndexEach(cpSpatialIndex *index, cpSpatialIndexIteratorFunc func, void *data)$/;"	f	signature:(cpSpatialIndex *index, cpSpatialIndexIteratorFunc func, void *data)
cpSpatialIndexEachImpl	include/chipmunk/cpSpatialIndex.h	/^typedef void (*cpSpatialIndexEachImpl)(cpSpatialIndex *index, cpSpatialIndexIteratorFunc func, void *data);$/;"	t
cpSpatialIndexFree	include/chipmunk/cpSpatialIndex.h	/^void cpSpatialIndexFree(cpSpatialIndex *index);$/;"	p	signature:(cpSpatialIndex *index)
cpSpatialIndexFree	src/cpSpatialIndex.c	/^cpSpatialIndexFree(cpSpatialIndex *index)$/;"	f	signature:(cpSpatialIndex *index)
cpSpatialIndexInit	include/chipmunk/chipmunk_private.h	/^cpSpatialIndex *cpSpatialIndexInit(cpSpatialIndex *index, cpSpatialIndexClass *klass, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);$/;"	p	signature:(cpSpatialIndex *index, cpSpatialIndexClass *klass, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpSpatialIndexInit	src/cpSpatialIndex.c	/^cpSpatialIndexInit(cpSpatialIndex *index, cpSpatialIndexClass *klass, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)$/;"	f	signature:(cpSpatialIndex *index, cpSpatialIndexClass *klass, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpSpatialIndexInsert	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexInsert);$/;"	v
cpSpatialIndexInsert	include/chipmunk/cpSpatialIndex.h	/^static inline void cpSpatialIndexInsert(cpSpatialIndex *index, void *obj, cpHashValue hashid)$/;"	f	signature:(cpSpatialIndex *index, void *obj, cpHashValue hashid)
cpSpatialIndexInsertImpl	include/chipmunk/cpSpatialIndex.h	/^typedef void (*cpSpatialIndexInsertImpl)(cpSpatialIndex *index, void *obj, cpHashValue hashid);$/;"	t
cpSpatialIndexIteratorFunc	include/chipmunk/cpSpatialIndex.h	/^typedef void (*cpSpatialIndexIteratorFunc)(void *obj, void *data);$/;"	t
cpSpatialIndexQuery	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexQuery);$/;"	v
cpSpatialIndexQuery	include/chipmunk/cpSpatialIndex.h	/^static inline void cpSpatialIndexQuery(cpSpatialIndex *index, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data)$/;"	f	signature:(cpSpatialIndex *index, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data)
cpSpatialIndexQueryFunc	include/chipmunk/cpSpatialIndex.h	/^typedef void (*cpSpatialIndexQueryFunc)(void *obj1, void *obj2, void *data);$/;"	t
cpSpatialIndexQueryImpl	include/chipmunk/cpSpatialIndex.h	/^typedef void (*cpSpatialIndexQueryImpl)(cpSpatialIndex *index, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data);$/;"	t
cpSpatialIndexReindex	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexReindex);$/;"	v
cpSpatialIndexReindex	include/chipmunk/cpSpatialIndex.h	/^static inline void cpSpatialIndexReindex(cpSpatialIndex *index)$/;"	f	signature:(cpSpatialIndex *index)
cpSpatialIndexReindexImpl	include/chipmunk/cpSpatialIndex.h	/^typedef void (*cpSpatialIndexReindexImpl)(cpSpatialIndex *index);$/;"	t
cpSpatialIndexReindexObject	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexReindexObject);$/;"	v
cpSpatialIndexReindexObject	include/chipmunk/cpSpatialIndex.h	/^static inline void cpSpatialIndexReindexObject(cpSpatialIndex *index, void *obj, cpHashValue hashid)$/;"	f	signature:(cpSpatialIndex *index, void *obj, cpHashValue hashid)
cpSpatialIndexReindexObjectImpl	include/chipmunk/cpSpatialIndex.h	/^typedef void (*cpSpatialIndexReindexObjectImpl)(cpSpatialIndex *index, void *obj, cpHashValue hashid);$/;"	t
cpSpatialIndexReindexQuery	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexReindexQuery);$/;"	v
cpSpatialIndexReindexQuery	include/chipmunk/cpSpatialIndex.h	/^static inline void cpSpatialIndexReindexQuery(cpSpatialIndex *index, cpSpatialIndexQueryFunc func, void *data)$/;"	f	signature:(cpSpatialIndex *index, cpSpatialIndexQueryFunc func, void *data)
cpSpatialIndexReindexQueryImpl	include/chipmunk/cpSpatialIndex.h	/^typedef void (*cpSpatialIndexReindexQueryImpl)(cpSpatialIndex *index, cpSpatialIndexQueryFunc func, void *data);$/;"	t
cpSpatialIndexRemove	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexRemove);$/;"	v
cpSpatialIndexRemove	include/chipmunk/cpSpatialIndex.h	/^static inline void cpSpatialIndexRemove(cpSpatialIndex *index, void *obj, cpHashValue hashid)$/;"	f	signature:(cpSpatialIndex *index, void *obj, cpHashValue hashid)
cpSpatialIndexRemoveImpl	include/chipmunk/cpSpatialIndex.h	/^typedef void (*cpSpatialIndexRemoveImpl)(cpSpatialIndex *index, void *obj, cpHashValue hashid);$/;"	t
cpSpatialIndexSegmentQuery	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpSpatialIndexSegmentQuery);$/;"	v
cpSpatialIndexSegmentQuery	include/chipmunk/cpSpatialIndex.h	/^static inline void cpSpatialIndexSegmentQuery(cpSpatialIndex *index, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data)$/;"	f	signature:(cpSpatialIndex *index, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data)
cpSpatialIndexSegmentQueryFunc	include/chipmunk/cpSpatialIndex.h	/^typedef cpFloat (*cpSpatialIndexSegmentQueryFunc)(void *obj1, void *obj2, void *data);$/;"	t
cpSpatialIndexSegmentQueryImpl	include/chipmunk/cpSpatialIndex.h	/^typedef void (*cpSpatialIndexSegmentQueryImpl)(cpSpatialIndex *index, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data);$/;"	t
cpSplittingPlane	include/chipmunk/cpPolyShape.h	/^typedef struct cpSplittingPlane {$/;"	s
cpSplittingPlane	include/chipmunk/cpPolyShape.h	/^} cpSplittingPlane;$/;"	t	typeref:struct:cpSplittingPlane
cpSplittingPlane::d	include/chipmunk/cpPolyShape.h	/^	cpFloat d;$/;"	m	struct:cpSplittingPlane	access:public
cpSplittingPlane::n	include/chipmunk/cpPolyShape.h	/^	cpVect n;$/;"	m	struct:cpSplittingPlane	access:public
cpSplittingPlaneCompare	include/chipmunk/chipmunk_private.h	/^cpSplittingPlaneCompare(cpSplittingPlane plane, cpVect v)$/;"	f	signature:(cpSplittingPlane plane, cpVect v)
cpSplittingPlaneNew	include/chipmunk/chipmunk_private.h	/^cpSplittingPlaneNew(cpVect a, cpVect b)$/;"	f	signature:(cpVect a, cpVect b)
cpStaticBodySingleton	src/cpBody.c	/^cpBody cpStaticBodySingleton;$/;"	v
cpSweep1D	include/chipmunk/cpSpatialIndex.h	/^typedef struct cpSweep1D cpSweep1D;$/;"	t	typeref:struct:cpSweep1D
cpSweep1D	src/cpSweep1D.c	/^struct cpSweep1D$/;"	s	file:
cpSweep1D::max	src/cpSweep1D.c	/^	int max;$/;"	m	struct:cpSweep1D	file:	access:public
cpSweep1D::num	src/cpSweep1D.c	/^	int num;$/;"	m	struct:cpSweep1D	file:	access:public
cpSweep1D::spatialIndex	src/cpSweep1D.c	/^	cpSpatialIndex spatialIndex;$/;"	m	struct:cpSweep1D	file:	access:public
cpSweep1D::table	src/cpSweep1D.c	/^	TableCell *table;$/;"	m	struct:cpSweep1D	file:	access:public
cpSweep1DAlloc	include/chipmunk/cpSpatialIndex.h	/^cpSweep1D* cpSweep1DAlloc(void);$/;"	p	signature:(void)
cpSweep1DAlloc	src/cpSweep1D.c	/^cpSweep1DAlloc(void)$/;"	f	signature:(void)
cpSweep1DContains	src/cpSweep1D.c	/^cpSweep1DContains(cpSweep1D *sweep, void *obj, cpHashValue hashid)$/;"	f	file:	signature:(cpSweep1D *sweep, void *obj, cpHashValue hashid)
cpSweep1DCount	src/cpSweep1D.c	/^cpSweep1DCount(cpSweep1D *sweep)$/;"	f	file:	signature:(cpSweep1D *sweep)
cpSweep1DDestroy	src/cpSweep1D.c	/^cpSweep1DDestroy(cpSweep1D *sweep)$/;"	f	file:	signature:(cpSweep1D *sweep)
cpSweep1DEach	src/cpSweep1D.c	/^cpSweep1DEach(cpSweep1D *sweep, cpSpatialIndexIteratorFunc func, void *data)$/;"	f	file:	signature:(cpSweep1D *sweep, cpSpatialIndexIteratorFunc func, void *data)
cpSweep1DInit	include/chipmunk/cpSpatialIndex.h	/^cpSpatialIndex* cpSweep1DInit(cpSweep1D *sweep, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);$/;"	p	signature:(cpSweep1D *sweep, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpSweep1DInit	src/cpSweep1D.c	/^cpSweep1DInit(cpSweep1D *sweep, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)$/;"	f	signature:(cpSweep1D *sweep, cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpSweep1DInsert	src/cpSweep1D.c	/^cpSweep1DInsert(cpSweep1D *sweep, void *obj, cpHashValue hashid)$/;"	f	file:	signature:(cpSweep1D *sweep, void *obj, cpHashValue hashid)
cpSweep1DNew	include/chipmunk/cpSpatialIndex.h	/^cpSpatialIndex* cpSweep1DNew(cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex);$/;"	p	signature:(cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpSweep1DNew	src/cpSweep1D.c	/^cpSweep1DNew(cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)$/;"	f	signature:(cpSpatialIndexBBFunc bbfunc, cpSpatialIndex *staticIndex)
cpSweep1DQuery	src/cpSweep1D.c	/^cpSweep1DQuery(cpSweep1D *sweep, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data)$/;"	f	file:	signature:(cpSweep1D *sweep, void *obj, cpBB bb, cpSpatialIndexQueryFunc func, void *data)
cpSweep1DReindex	src/cpSweep1D.c	/^cpSweep1DReindex(cpSweep1D *sweep)$/;"	f	file:	signature:(cpSweep1D *sweep)
cpSweep1DReindexObject	src/cpSweep1D.c	/^cpSweep1DReindexObject(cpSweep1D *sweep, void *obj, cpHashValue hashid)$/;"	f	file:	signature:(cpSweep1D *sweep, void *obj, cpHashValue hashid)
cpSweep1DReindexQuery	src/cpSweep1D.c	/^cpSweep1DReindexQuery(cpSweep1D *sweep, cpSpatialIndexQueryFunc func, void *data)$/;"	f	file:	signature:(cpSweep1D *sweep, cpSpatialIndexQueryFunc func, void *data)
cpSweep1DRemove	src/cpSweep1D.c	/^cpSweep1DRemove(cpSweep1D *sweep, void *obj, cpHashValue hashid)$/;"	f	file:	signature:(cpSweep1D *sweep, void *obj, cpHashValue hashid)
cpSweep1DSegmentQuery	src/cpSweep1D.c	/^cpSweep1DSegmentQuery(cpSweep1D *sweep, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data)$/;"	f	file:	signature:(cpSweep1D *sweep, void *obj, cpVect a, cpVect b, cpFloat t_exit, cpSpatialIndexSegmentQueryFunc func, void *data)
cpTimestamp	include/chipmunk/chipmunk_types.h	/^	typedef CP_TIMESTAMP_TYPE cpTimestamp;$/;"	t
cpTimestamp	include/chipmunk/chipmunk_types.h	/^	typedef unsigned int cpTimestamp;$/;"	t
cpTrue	include/chipmunk/chipmunk_types.h	/^	#define cpTrue /;"	d
cpVect	include/chipmunk/chipmunk_types.h	/^	typedef CGPoint cpVect;$/;"	t
cpVect	include/chipmunk/chipmunk_types.h	/^	typedef struct cpVect{cpFloat x,y;} cpVect;$/;"	s
cpVect	include/chipmunk/chipmunk_types.h	/^	typedef struct cpVect{cpFloat x,y;} cpVect;$/;"	t	typeref:struct:cpVect
cpVect::x	include/chipmunk/chipmunk_types.h	/^	typedef struct cpVect{cpFloat x,y;} cpVect;$/;"	m	struct:cpVect	access:public
cpVect::y	include/chipmunk/chipmunk_types.h	/^	typedef struct cpVect{cpFloat x,y;} cpVect;$/;"	m	struct:cpVect	access:public
cpVersionString	src/chipmunk.c	/^const char *cpVersionString = XSTR(CP_VERSION_MAJOR)"."XSTR(CP_VERSION_MINOR)"."XSTR(CP_VERSION_RELEASE);$/;"	v
cpcalloc	include/chipmunk/chipmunk.h	/^	#define cpcalloc /;"	d
cpfabs	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpfabs);$/;"	v
cpfabs	include/chipmunk/chipmunk_types.h	/^static inline cpFloat cpfabs(cpFloat f)$/;"	f	signature:(cpFloat f)
cpfacos	include/chipmunk/chipmunk_types.h	/^	#define cpfacos /;"	d
cpfatan2	include/chipmunk/chipmunk_types.h	/^	#define cpfatan2 /;"	d
cpfceil	include/chipmunk/chipmunk_types.h	/^	#define cpfceil /;"	d
cpfclamp	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpfclamp);$/;"	v
cpfclamp	include/chipmunk/chipmunk_types.h	/^static inline cpFloat cpfclamp(cpFloat f, cpFloat min, cpFloat max)$/;"	f	signature:(cpFloat f, cpFloat min, cpFloat max)
cpfclamp01	include/chipmunk/chipmunk_types.h	/^static inline cpFloat cpfclamp01(cpFloat f)$/;"	f	signature:(cpFloat f)
cpfcompare	src/cpBBTree.c	/^cpfcompare(const cpFloat *a, const cpFloat *b){$/;"	f	file:	signature:(const cpFloat *a, const cpFloat *b)
cpfcos	include/chipmunk/chipmunk_types.h	/^	#define cpfcos /;"	d
cpfexp	include/chipmunk/chipmunk_types.h	/^	#define cpfexp /;"	d
cpffloor	include/chipmunk/chipmunk_types.h	/^	#define cpffloor /;"	d
cpflerp	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpflerp);$/;"	v
cpflerp	include/chipmunk/chipmunk_types.h	/^static inline cpFloat cpflerp(cpFloat f1, cpFloat f2, cpFloat t)$/;"	f	signature:(cpFloat f1, cpFloat f2, cpFloat t)
cpflerpconst	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpflerpconst);$/;"	v
cpflerpconst	include/chipmunk/chipmunk_types.h	/^static inline cpFloat cpflerpconst(cpFloat f1, cpFloat f2, cpFloat d)$/;"	f	signature:(cpFloat f1, cpFloat f2, cpFloat d)
cpfmax	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpfmax);$/;"	v
cpfmax	include/chipmunk/chipmunk_types.h	/^static inline cpFloat cpfmax(cpFloat a, cpFloat b)$/;"	f	signature:(cpFloat a, cpFloat b)
cpfmin	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpfmin);$/;"	v
cpfmin	include/chipmunk/chipmunk_types.h	/^static inline cpFloat cpfmin(cpFloat a, cpFloat b)$/;"	f	signature:(cpFloat a, cpFloat b)
cpfmod	include/chipmunk/chipmunk_types.h	/^	#define cpfmod /;"	d
cpfpow	include/chipmunk/chipmunk_types.h	/^	#define cpfpow /;"	d
cpfree	include/chipmunk/chipmunk.h	/^	#define cpfree /;"	d
cpfsin	include/chipmunk/chipmunk_types.h	/^	#define cpfsin /;"	d
cpfsqrt	include/chipmunk/chipmunk_types.h	/^	#define cpfsqrt /;"	d
cprealloc	include/chipmunk/chipmunk.h	/^	#define cprealloc /;"	d
cpv	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpv); \/\/ makes a variable named _cpv that contains the function pointer for cpv()$/;"	v
cpv	include/chipmunk/cpVect.h	/^static inline cpVect cpv(const cpFloat x, const cpFloat y)$/;"	f	signature:(const cpFloat x, const cpFloat y)
cpv_assert_infinite	src/cpBody.c	/^static void cpv_assert_infinite(cpVect v, char *message){cpAssertSoft(cpfabs(v.x) != INFINITY && cpfabs(v.y) != INFINITY, message);}$/;"	f	file:	signature:(cpVect v, char *message)
cpv_assert_nan	src/cpBody.c	/^static void cpv_assert_nan(cpVect v, char *message){cpAssertSoft(v.x == v.x && v.y == v.y, message);}$/;"	f	file:	signature:(cpVect v, char *message)
cpv_assert_sane	src/cpBody.c	/^static void cpv_assert_sane(cpVect v, char *message){cpv_assert_nan(v, message); cpv_assert_infinite(v, message);}$/;"	f	file:	signature:(cpVect v, char *message)
cpvadd	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvadd);$/;"	v
cpvadd	include/chipmunk/cpVect.h	/^static inline cpVect cpvadd(const cpVect v1, const cpVect v2)$/;"	f	signature:(const cpVect v1, const cpVect v2)
cpvclamp	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvclamp);$/;"	v
cpvclamp	include/chipmunk/cpVect.h	/^static inline cpVect cpvclamp(const cpVect v, const cpFloat len)$/;"	f	signature:(const cpVect v, const cpFloat len)
cpvcross	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvcross);$/;"	v
cpvcross	include/chipmunk/cpVect.h	/^static inline cpFloat cpvcross(const cpVect v1, const cpVect v2)$/;"	f	signature:(const cpVect v1, const cpVect v2)
cpvdist	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvdist);$/;"	v
cpvdist	include/chipmunk/cpVect.h	/^static inline cpFloat cpvdist(const cpVect v1, const cpVect v2)$/;"	f	signature:(const cpVect v1, const cpVect v2)
cpvdistsq	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvdistsq);$/;"	v
cpvdistsq	include/chipmunk/cpVect.h	/^static inline cpFloat cpvdistsq(const cpVect v1, const cpVect v2)$/;"	f	signature:(const cpVect v1, const cpVect v2)
cpvdot	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvdot);$/;"	v
cpvdot	include/chipmunk/cpVect.h	/^static inline cpFloat cpvdot(const cpVect v1, const cpVect v2)$/;"	f	signature:(const cpVect v1, const cpVect v2)
cpveql	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpveql);$/;"	v
cpveql	include/chipmunk/cpVect.h	/^static inline cpBool cpveql(const cpVect v1, const cpVect v2)$/;"	f	signature:(const cpVect v1, const cpVect v2)
cpvforangle	include/chipmunk/cpVect.h	/^static inline cpVect cpvforangle(const cpFloat a)$/;"	f	signature:(const cpFloat a)
cpvlength	include/chipmunk/cpVect.h	/^static inline cpFloat cpvlength(const cpVect v)$/;"	f	signature:(const cpVect v)
cpvlengthsq	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvlengthsq);$/;"	v
cpvlengthsq	include/chipmunk/cpVect.h	/^static inline cpFloat cpvlengthsq(const cpVect v)$/;"	f	signature:(const cpVect v)
cpvlerp	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvlerp);$/;"	v
cpvlerp	include/chipmunk/cpVect.h	/^static inline cpVect cpvlerp(const cpVect v1, const cpVect v2, const cpFloat t)$/;"	f	signature:(const cpVect v1, const cpVect v2, const cpFloat t)
cpvlerpconst	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvlerpconst);$/;"	v
cpvlerpconst	include/chipmunk/cpVect.h	/^static inline cpVect cpvlerpconst(cpVect v1, cpVect v2, cpFloat d)$/;"	f	signature:(cpVect v1, cpVect v2, cpFloat d)
cpvmult	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvmult);$/;"	v
cpvmult	include/chipmunk/cpVect.h	/^static inline cpVect cpvmult(const cpVect v, const cpFloat s)$/;"	f	signature:(const cpVect v, const cpFloat s)
cpvnear	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvnear);$/;"	v
cpvnear	include/chipmunk/cpVect.h	/^static inline cpBool cpvnear(const cpVect v1, const cpVect v2, const cpFloat dist)$/;"	f	signature:(const cpVect v1, const cpVect v2, const cpFloat dist)
cpvneg	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvneg);$/;"	v
cpvneg	include/chipmunk/cpVect.h	/^static inline cpVect cpvneg(const cpVect v)$/;"	f	signature:(const cpVect v)
cpvnormalize	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvnormalize);$/;"	v
cpvnormalize	include/chipmunk/cpVect.h	/^static inline cpVect cpvnormalize(const cpVect v)$/;"	f	signature:(const cpVect v)
cpvnormalize_safe	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvnormalize_safe);$/;"	v
cpvnormalize_safe	include/chipmunk/cpVect.h	/^static inline cpVect cpvnormalize_safe(const cpVect v)$/;"	f	signature:(const cpVect v)
cpvperp	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvperp);$/;"	v
cpvperp	include/chipmunk/cpVect.h	/^static inline cpVect cpvperp(const cpVect v)$/;"	f	signature:(const cpVect v)
cpvproject	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvproject);$/;"	v
cpvproject	include/chipmunk/cpVect.h	/^static inline cpVect cpvproject(const cpVect v1, const cpVect v2)$/;"	f	signature:(const cpVect v1, const cpVect v2)
cpvrotate	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvrotate);$/;"	v
cpvrotate	include/chipmunk/cpVect.h	/^static inline cpVect cpvrotate(const cpVect v1, const cpVect v2)$/;"	f	signature:(const cpVect v1, const cpVect v2)
cpvrperp	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvrperp);$/;"	v
cpvrperp	include/chipmunk/cpVect.h	/^static inline cpVect cpvrperp(const cpVect v)$/;"	f	signature:(const cpVect v)
cpvslerp	include/chipmunk/cpVect.h	/^cpVect cpvslerp(const cpVect v1, const cpVect v2, const cpFloat t);$/;"	p	signature:(const cpVect v1, const cpVect v2, const cpFloat t)
cpvslerp	src/cpVect.c	/^cpvslerp(const cpVect v1, const cpVect v2, const cpFloat t)$/;"	f	signature:(const cpVect v1, const cpVect v2, const cpFloat t)
cpvslerpconst	include/chipmunk/cpVect.h	/^cpVect cpvslerpconst(const cpVect v1, const cpVect v2, const cpFloat a);$/;"	p	signature:(const cpVect v1, const cpVect v2, const cpFloat a)
cpvslerpconst	src/cpVect.c	/^cpvslerpconst(const cpVect v1, const cpVect v2, const cpFloat a)$/;"	f	signature:(const cpVect v1, const cpVect v2, const cpFloat a)
cpvstr	include/chipmunk/cpVect.h	/^char* cpvstr(const cpVect v);$/;"	p	signature:(const cpVect v)
cpvstr	src/cpVect.c	/^cpvstr(const cpVect v)$/;"	f	signature:(const cpVect v)
cpvsub	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvsub);$/;"	v
cpvsub	include/chipmunk/cpVect.h	/^static inline cpVect cpvsub(const cpVect v1, const cpVect v2)$/;"	f	signature:(const cpVect v1, const cpVect v2)
cpvtoangle	include/chipmunk/cpVect.h	/^static inline cpFloat cpvtoangle(const cpVect v)$/;"	f	signature:(const cpVect v)
cpvunrotate	include/chipmunk/chipmunk_ffi.h	/^MAKE_REF(cpvunrotate);$/;"	v
cpvunrotate	include/chipmunk/cpVect.h	/^static inline cpVect cpvunrotate(const cpVect v1, const cpVect v2)$/;"	f	signature:(const cpVect v1, const cpVect v2)
cpvzero	include/chipmunk/cpVect.h	/^static const cpVect cpvzero = {0.0f,0.0f};$/;"	v
d	include/chipmunk/chipmunk_types.h	/^	cpFloat a, b, c, d;$/;"	m	struct:cpMat2x2	access:public
d	include/chipmunk/cpPolyShape.h	/^	cpFloat d;$/;"	m	struct:cpSplittingPlane	access:public
d	include/chipmunk/cpShape.h	/^	cpFloat d;$/;"	m	struct:cpNearestPointQueryInfo	access:public
damping	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpFloat damping;$/;"	m	struct:cpDampedRotarySpring	access:public
damping	include/chipmunk/constraints/cpDampedSpring.h	/^	cpFloat damping;$/;"	m	struct:cpDampedSpring	access:public
damping	include/chipmunk/cpSpace.h	/^	cpFloat damping;$/;"	m	struct:cpSpace	access:public
data	include/chipmunk/chipmunk_private.h	/^	void *data;$/;"	m	struct:cpPostStepCallback	access:public
data	include/chipmunk/constraints/cpConstraint.h	/^	cpDataPointer data;$/;"	m	struct:cpConstraint	access:public
data	include/chipmunk/cpArbiter.h	/^	cpDataPointer data;$/;"	m	struct:cpArbiter	access:public
data	include/chipmunk/cpArbiter.h	/^	void *data;$/;"	m	struct:cpCollisionHandler	access:public
data	include/chipmunk/cpBody.h	/^	cpDataPointer data;$/;"	m	struct:cpBody	access:public
data	include/chipmunk/cpShape.h	/^	cpDataPointer data;$/;"	m	struct:cpShape	access:public
data	include/chipmunk/cpSpace.h	/^	cpDataPointer data;$/;"	m	struct:cpSpace	access:public
data	src/cpBBTree.c	/^	void *data;$/;"	m	struct:MarkContext	file:	access:public
data	src/cpBBTree.c	/^	void *data;$/;"	m	struct:eachContext	file:	access:public
data	src/cpSpace.c	/^	void *data;$/;"	m	struct:spaceShapeContext	file:	access:public
data	src/cpSpaceHash.c	/^	void *data;$/;"	m	struct:eachContext	file:	access:public
data	src/cpSpaceHash.c	/^	void *data;$/;"	m	struct:queryRehashContext	file:	access:public
data	src/cpSpaceQuery.c	/^	void *data;$/;"	m	struct:PointQueryContext	file:	access:public
data	src/cpSpaceQuery.c	/^	void *data;$/;"	m	struct:ShapeQueryContext	file:	access:public
data	src/cpSpatialIndex.c	/^	void *data;$/;"	m	struct:dynamicToStaticContext	file:	access:public
defaultSpringForce	src/constraints/cpDampedSpring.c	/^defaultSpringForce(cpDampedSpring *spring, cpFloat dist){$/;"	f	file:	signature:(cpDampedSpring *spring, cpFloat dist)
defaultSpringTorque	src/constraints/cpDampedRotarySpring.c	/^defaultSpringTorque(cpDampedRotarySpring *spring, cpFloat relativeAngle){$/;"	f	file:	signature:(cpDampedRotarySpring *spring, cpFloat relativeAngle)
default_value	src/cpHashSet.c	/^	void *default_value;$/;"	m	struct:cpHashSet	file:	access:public
destroy	include/chipmunk/cpShape.h	/^	cpShapeDestroyImpl destroy;$/;"	m	struct:cpShapeClass	access:public
destroy	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexDestroyImpl destroy;$/;"	m	struct:cpSpatialIndexClass	access:public
dist	include/chipmunk/chipmunk_private.h	/^	cpFloat dist;$/;"	m	struct:cpContact	access:public
dist	include/chipmunk/constraints/cpPinJoint.h	/^	cpFloat dist;$/;"	m	struct:cpPinJoint	access:public
dist	include/chipmunk/cpArbiter.h	/^		cpFloat dist;$/;"	m	struct:cpContactPointSet::__anon1	access:public
distance	include/chipmunk/chipmunk.h	/^typedef void (^cpSpaceNearestPointQueryBlock)(cpShape *shape, cpFloat distance, cpVect point);$/;"	v
dynamicIndex	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndex *staticIndex, *dynamicIndex;$/;"	m	struct:cpSpatialIndex	access:public
dynamicToStaticContext	src/cpSpatialIndex.c	/^typedef struct dynamicToStaticContext {$/;"	s	file:
dynamicToStaticContext	src/cpSpatialIndex.c	/^} dynamicToStaticContext;$/;"	t	typeref:struct:dynamicToStaticContext	file:
dynamicToStaticContext::bbfunc	src/cpSpatialIndex.c	/^	cpSpatialIndexBBFunc bbfunc;$/;"	m	struct:dynamicToStaticContext	file:	access:public
dynamicToStaticContext::data	src/cpSpatialIndex.c	/^	void *data;$/;"	m	struct:dynamicToStaticContext	file:	access:public
dynamicToStaticContext::queryFunc	src/cpSpatialIndex.c	/^	cpSpatialIndexQueryFunc queryFunc;$/;"	m	struct:dynamicToStaticContext	file:	access:public
dynamicToStaticContext::staticIndex	src/cpSpatialIndex.c	/^	cpSpatialIndex *staticIndex;$/;"	m	struct:dynamicToStaticContext	file:	access:public
dynamicToStaticIter	src/cpSpatialIndex.c	/^dynamicToStaticIter(void *obj, dynamicToStaticContext *context)$/;"	f	file:	signature:(void *obj, dynamicToStaticContext *context)
e	include/chipmunk/cpArbiter.h	/^	cpFloat e;$/;"	m	struct:cpArbiter	access:public
e	include/chipmunk/cpShape.h	/^	cpFloat e;$/;"	m	struct:cpShape	access:public
each	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexEachImpl each;$/;"	m	struct:cpSpatialIndexClass	access:public
eachContext	src/cpBBTree.c	/^typedef struct eachContext {$/;"	s	file:
eachContext	src/cpBBTree.c	/^} eachContext;$/;"	t	typeref:struct:eachContext	file:
eachContext	src/cpSpaceHash.c	/^typedef struct eachContext {$/;"	s	file:
eachContext	src/cpSpaceHash.c	/^} eachContext;$/;"	t	typeref:struct:eachContext	file:
eachContext::data	src/cpBBTree.c	/^	void *data;$/;"	m	struct:eachContext	file:	access:public
eachContext::data	src/cpSpaceHash.c	/^	void *data;$/;"	m	struct:eachContext	file:	access:public
eachContext::func	src/cpBBTree.c	/^	cpSpatialIndexIteratorFunc func;$/;"	m	struct:eachContext	file:	access:public
eachContext::func	src/cpSpaceHash.c	/^	cpSpatialIndexIteratorFunc func;$/;"	m	struct:eachContext	file:	access:public
eachHelper	src/cpSpaceHash.c	/^static void eachHelper(cpHandle *hand, eachContext *context){context->func(hand->obj, context->data);}$/;"	f	file:	signature:(cpHandle *hand, eachContext *context)
each_helper	src/cpBBTree.c	/^static void each_helper(Node *node, eachContext *context){context->func(node->obj, context->data);}$/;"	f	file:	signature:(Node *node, eachContext *context)
elt	src/cpHashSet.c	/^	void *elt;$/;"	m	struct:cpHashSetBin	file:	access:public
enableContactGraph	include/chipmunk/cpSpace.h	/^	cpBool enableContactGraph;$/;"	m	struct:cpSpace	access:public
end	src/cpSpaceQuery.c	/^	cpVect start, end;$/;"	m	struct:SegmentQueryContext	file:	access:public
entries	src/cpHashSet.c	/^	unsigned int entries, size;$/;"	m	struct:cpHashSet	file:	access:public
eql	src/cpHashSet.c	/^	cpHashSetEqlFunc eql;$/;"	m	struct:cpHashSet	file:	access:public
errorBias	include/chipmunk/constraints/cpConstraint.h	/^	cpFloat errorBias;$/;"	m	struct:cpConstraint	access:public
f	include/chipmunk/cpBody.h	/^	cpVect f;$/;"	m	struct:cpBody	access:public
fillNodeArray	src/cpBBTree.c	/^fillNodeArray(Node *node, Node ***cursor){$/;"	f	file:	signature:(Node *node, Node ***cursor)
filterConstraints	src/cpBody.c	/^filterConstraints(cpConstraint *node, cpBody *body, cpConstraint *filter)$/;"	f	file:	signature:(cpConstraint *node, cpBody *body, cpConstraint *filter)
findMSA	src/cpCollision.c	/^findMSA(const cpPolyShape *poly, const cpSplittingPlane *planes, const int num, cpFloat *min_out)$/;"	f	file:	signature:(const cpPolyShape *poly, const cpSplittingPlane *planes, const int num, cpFloat *min_out)
findPointsBehindSeg	src/cpCollision.c	/^findPointsBehindSeg(cpContact *arr, int *num, const cpSegmentShape *seg, const cpPolyShape *poly, const cpFloat pDist, const cpFloat coef) $/;"	f	file:	signature:(cpContact *arr, int *num, const cpSegmentShape *seg, const cpPolyShape *poly, const cpFloat pDist, const cpFloat coef)
findVerts	src/cpCollision.c	/^findVerts(cpContact *arr, const cpPolyShape *poly1, const cpPolyShape *poly2, const cpVect n, const cpFloat dist)$/;"	f	file:	signature:(cpContact *arr, const cpPolyShape *poly1, const cpPolyShape *poly2, const cpVect n, const cpFloat dist)
findVertsFallback	src/cpCollision.c	/^findVertsFallback(cpContact *arr, const cpPolyShape *poly1, const cpPolyShape *poly2, const cpVect n, const cpFloat dist)$/;"	f	file:	signature:(cpContact *arr, const cpPolyShape *poly1, const cpPolyShape *poly2, const cpVect n, const cpFloat dist)
floor_int	src/cpSpaceHash.c	/^floor_int(cpFloat f)$/;"	f	file:	signature:(cpFloat f)
freeWrap	src/cpSpace.c	/^static void freeWrap(void *ptr, void *unused){cpfree(ptr);}$/;"	f	file:	signature:(void *ptr, void *unused)
func	include/chipmunk/chipmunk_private.h	/^	cpPostStepFunc func;$/;"	m	struct:cpPostStepCallback	access:public
func	src/cpBBTree.c	/^	cpSpatialIndexIteratorFunc func;$/;"	m	struct:eachContext	file:	access:public
func	src/cpBBTree.c	/^	cpSpatialIndexQueryFunc func;$/;"	m	struct:MarkContext	file:	access:public
func	src/cpSpace.c	/^	cpSpaceShapeIteratorFunc func;$/;"	m	struct:spaceShapeContext	file:	access:public
func	src/cpSpaceHash.c	/^	cpSpatialIndexIteratorFunc func;$/;"	m	struct:eachContext	file:	access:public
func	src/cpSpaceHash.c	/^	cpSpatialIndexQueryFunc func;$/;"	m	struct:queryRehashContext	file:	access:public
func	src/cpSpaceQuery.c	/^	cpSpaceBBQueryFunc func;$/;"	m	struct:BBQueryContext	file:	access:public
func	src/cpSpaceQuery.c	/^	cpSpaceNearestPointQueryFunc func;$/;"	m	struct:NearestPointQueryContext	file:	access:public
func	src/cpSpaceQuery.c	/^	cpSpacePointQueryFunc func;$/;"	m	struct:PointQueryContext	file:	access:public
func	src/cpSpaceQuery.c	/^	cpSpaceSegmentQueryFunc func;$/;"	m	struct:SegmentQueryContext	file:	access:public
func	src/cpSpaceQuery.c	/^	cpSpaceShapeQueryFunc func;$/;"	m	struct:ShapeQueryContext	file:	access:public
getEmptyBin	src/cpSpaceHash.c	/^getEmptyBin(cpSpaceHash *hash)$/;"	f	file:	signature:(cpSpaceHash *hash)
getImpulse	include/chipmunk/constraints/cpConstraint.h	/^	cpConstraintGetImpulseImpl getImpulse;$/;"	m	struct:cpConstraintClass	access:public
getImpulse	src/constraints/cpDampedRotarySpring.c	/^getImpulse(cpConstraint *constraint)$/;"	f	file:	signature:(cpConstraint *constraint)
getImpulse	src/constraints/cpDampedSpring.c	/^getImpulse(cpConstraint *constraint)$/;"	f	file:	signature:(cpConstraint *constraint)
getImpulse	src/constraints/cpGearJoint.c	/^getImpulse(cpGearJoint *joint)$/;"	f	file:	signature:(cpGearJoint *joint)
getImpulse	src/constraints/cpGrooveJoint.c	/^getImpulse(cpGrooveJoint *joint)$/;"	f	file:	signature:(cpGrooveJoint *joint)
getImpulse	src/constraints/cpPinJoint.c	/^getImpulse(cpPinJoint *joint)$/;"	f	file:	signature:(cpPinJoint *joint)
getImpulse	src/constraints/cpPivotJoint.c	/^getImpulse(cpConstraint *joint)$/;"	f	file:	signature:(cpConstraint *joint)
getImpulse	src/constraints/cpRatchetJoint.c	/^getImpulse(cpRatchetJoint *joint)$/;"	f	file:	signature:(cpRatchetJoint *joint)
getImpulse	src/constraints/cpRotaryLimitJoint.c	/^getImpulse(cpRotaryLimitJoint *joint)$/;"	f	file:	signature:(cpRotaryLimitJoint *joint)
getImpulse	src/constraints/cpSimpleMotor.c	/^getImpulse(cpSimpleMotor *joint)$/;"	f	file:	signature:(cpSimpleMotor *joint)
getImpulse	src/constraints/cpSlideJoint.c	/^getImpulse(cpConstraint *joint)$/;"	f	file:	signature:(cpConstraint *joint)
getUnusedBin	src/cpHashSet.c	/^getUnusedBin(cpHashSet *set)$/;"	f	file:	signature:(cpHashSet *set)
gravity	include/chipmunk/cpSpace.h	/^	cpVect gravity;$/;"	m	struct:cpSpace	access:public
grooveConstrain	src/constraints/cpGrooveJoint.c	/^grooveConstrain(cpGrooveJoint *joint, cpVect j, cpFloat dt){$/;"	f	file:	signature:(cpGrooveJoint *joint, cpVect j, cpFloat dt)
group	include/chipmunk/cpShape.h	/^	cpGroup group;$/;"	m	struct:cpShape	access:public
group	src/cpSpaceQuery.c	/^	cpGroup group;$/;"	m	struct:BBQueryContext	file:	access:public
group	src/cpSpaceQuery.c	/^	cpGroup group;$/;"	m	struct:NearestPointQueryContext	file:	access:public
group	src/cpSpaceQuery.c	/^	cpGroup group;$/;"	m	struct:PointQueryContext	file:	access:public
group	src/cpSpaceQuery.c	/^	cpGroup group;$/;"	m	struct:SegmentQueryContext	file:	access:public
grv_a	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect grv_n, grv_a, grv_b;$/;"	m	struct:cpGrooveJoint	access:public
grv_b	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect grv_n, grv_a, grv_b;$/;"	m	struct:cpGrooveJoint	access:public
grv_n	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect grv_n, grv_a, grv_b;$/;"	m	struct:cpGrooveJoint	access:public
grv_tn	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect grv_tn;$/;"	m	struct:cpGrooveJoint	access:public
handle	src/cpSpaceHash.c	/^	cpHandle *handle;$/;"	m	struct:cpSpaceHashBin	file:	access:public
handleSet	src/cpSpaceHash.c	/^	cpHashSet *handleSet;$/;"	m	struct:cpSpaceHash	file:	access:public
handleSetEql	src/cpSpaceHash.c	/^static int handleSetEql(void *obj, cpHandle *hand){return (obj == hand->obj);}$/;"	f	file:	signature:(void *obj, cpHandle *hand)
handleSetTrans	src/cpSpaceHash.c	/^handleSetTrans(void *obj, cpSpaceHash *hash)$/;"	f	file:	signature:(void *obj, cpSpaceHash *hash)
handlerSetEql	src/cpSpace.c	/^handlerSetEql(cpCollisionHandler *check, cpCollisionHandler *pair)$/;"	f	file:	signature:(cpCollisionHandler *check, cpCollisionHandler *pair)
handlerSetTrans	src/cpSpace.c	/^handlerSetTrans(cpCollisionHandler *handler, void *unused)$/;"	f	file:	signature:(cpCollisionHandler *handler, void *unused)
hash	include/chipmunk/chipmunk_private.h	/^	cpHashValue hash;$/;"	m	struct:cpContact	access:public
hash	src/cpHashSet.c	/^	cpHashValue hash;$/;"	m	struct:cpHashSetBin	file:	access:public
hash	src/cpSpaceHash.c	/^	cpSpaceHash *hash;$/;"	m	struct:queryRehashContext	file:	access:public
hashHandle	src/cpSpaceHash.c	/^hashHandle(cpSpaceHash *hash, cpHandle *hand, cpBB bb)$/;"	f	file:	signature:(cpSpaceHash *hash, cpHandle *hand, cpBB bb)
hash_func	src/cpSpaceHash.c	/^hash_func(cpHashValue x, cpHashValue y, cpHashValue n)$/;"	f	file:	signature:(cpHashValue x, cpHashValue y, cpHashValue n)
header	src/cpSpaceStep.c	/^	cpContactBufferHeader header;$/;"	m	struct:cpContactBuffer	file:	access:public
i	include/chipmunk/cpBody.h	/^	cpFloat i;$/;"	m	struct:cpBody	access:public
iSum	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpFloat iSum;$/;"	m	struct:cpDampedRotarySpring	access:public
iSum	include/chipmunk/constraints/cpGearJoint.h	/^	cpFloat iSum;$/;"	m	struct:cpGearJoint	access:public
iSum	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpFloat iSum;$/;"	m	struct:cpRatchetJoint	access:public
iSum	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^	cpFloat iSum;$/;"	m	struct:cpRotaryLimitJoint	access:public
iSum	include/chipmunk/constraints/cpSimpleMotor.h	/^	cpFloat iSum;$/;"	m	struct:cpSimpleMotor	access:public
i_inv	include/chipmunk/cpBody.h	/^	cpFloat i_inv;$/;"	m	struct:cpBody	access:public
idleSpeedThreshold	include/chipmunk/cpSpace.h	/^	cpFloat idleSpeedThreshold;$/;"	m	struct:cpSpace	access:public
idleTime	include/chipmunk/cpBody.h	/^	cpFloat idleTime;$/;"	m	struct:cpComponentNode	access:public
insert	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexInsertImpl insert;$/;"	m	struct:cpSpatialIndexClass	access:public
iterations	include/chipmunk/cpSpace.h	/^	int iterations;$/;"	m	struct:cpSpace	access:public
jAcc	include/chipmunk/constraints/cpGearJoint.h	/^	cpFloat jAcc;$/;"	m	struct:cpGearJoint	access:public
jAcc	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect jAcc;$/;"	m	struct:cpGrooveJoint	access:public
jAcc	include/chipmunk/constraints/cpPivotJoint.h	/^	cpVect jAcc;$/;"	m	struct:cpPivotJoint	access:public
jAcc	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpFloat jAcc;$/;"	m	struct:cpRatchetJoint	access:public
jAcc	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^	cpFloat jAcc;$/;"	m	struct:cpRotaryLimitJoint	access:public
jAcc	include/chipmunk/constraints/cpSimpleMotor.h	/^	cpFloat jAcc;$/;"	m	struct:cpSimpleMotor	access:public
jBias	include/chipmunk/chipmunk_private.h	/^	cpFloat jnAcc, jtAcc, jBias;$/;"	m	struct:cpContact	access:public
jnAcc	include/chipmunk/chipmunk_private.h	/^	cpFloat jnAcc, jtAcc, jBias;$/;"	m	struct:cpContact	access:public
jnAcc	include/chipmunk/constraints/cpPinJoint.h	/^	cpFloat jnAcc;$/;"	m	struct:cpPinJoint	access:public
jnAcc	include/chipmunk/constraints/cpSlideJoint.h	/^	cpFloat jnAcc;$/;"	m	struct:cpSlideJoint	access:public
jtAcc	include/chipmunk/chipmunk_private.h	/^	cpFloat jnAcc, jtAcc, jBias;$/;"	m	struct:cpContact	access:public
k	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpMat2x2 k;$/;"	m	struct:cpGrooveJoint	access:public
k	include/chipmunk/constraints/cpPivotJoint.h	/^	cpMat2x2 k;$/;"	m	struct:cpPivotJoint	access:public
k_scalar	include/chipmunk/constraints/util.h	/^k_scalar(cpBody *a, cpBody *b, cpVect r1, cpVect r2, cpVect n)$/;"	f	signature:(cpBody *a, cpBody *b, cpVect r1, cpVect r2, cpVect n)
k_scalar_body	include/chipmunk/constraints/util.h	/^k_scalar_body(cpBody *body, cpVect r, cpVect n)$/;"	f	signature:(cpBody *body, cpVect r, cpVect n)
k_tensor	include/chipmunk/constraints/util.h	/^k_tensor(cpBody *a, cpBody *b, cpVect r1, cpVect r2)$/;"	f	signature:(cpBody *a, cpBody *b, cpVect r1, cpVect r2)
key	include/chipmunk/chipmunk_private.h	/^	void *key;$/;"	m	struct:cpPostStepCallback	access:public
klass	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexClass *klass;$/;"	m	struct:cpSpatialIndex	access:public
klass	src/constraints/cpDampedRotarySpring.c	/^static const cpConstraintClass klass = {$/;"	v	file:
klass	src/constraints/cpDampedSpring.c	/^static const cpConstraintClass klass = {$/;"	v	file:
klass	src/constraints/cpGearJoint.c	/^static const cpConstraintClass klass = {$/;"	v	file:
klass	src/constraints/cpGrooveJoint.c	/^static const cpConstraintClass klass = {$/;"	v	file:
klass	src/constraints/cpPinJoint.c	/^static const cpConstraintClass klass = {$/;"	v	file:
klass	src/constraints/cpPivotJoint.c	/^static const cpConstraintClass klass = {$/;"	v	file:
klass	src/constraints/cpRatchetJoint.c	/^static const cpConstraintClass klass = {$/;"	v	file:
klass	src/constraints/cpRotaryLimitJoint.c	/^static const cpConstraintClass klass = {$/;"	v	file:
klass	src/constraints/cpSimpleMotor.c	/^static const cpConstraintClass klass = {$/;"	v	file:
klass	src/constraints/cpSlideJoint.c	/^static const cpConstraintClass klass = {$/;"	v	file:
klass	src/cpBBTree.c	/^static cpSpatialIndexClass klass = {$/;"	v	file:
klass	src/cpSpaceHash.c	/^static cpSpatialIndexClass klass = {$/;"	v	file:
klass	src/cpSweep1D.c	/^static cpSpatialIndexClass klass = {$/;"	v	file:
l	include/chipmunk/cpBB.h	/^	cpFloat l, b, r ,t;$/;"	m	struct:cpBB	access:public
layers	include/chipmunk/cpShape.h	/^	cpLayers layers;$/;"	m	struct:cpShape	access:public
layers	src/cpSpaceQuery.c	/^	cpLayers layers;$/;"	m	struct:BBQueryContext	file:	access:public
layers	src/cpSpaceQuery.c	/^	cpLayers layers;$/;"	m	struct:NearestPointQueryContext	file:	access:public
layers	src/cpSpaceQuery.c	/^	cpLayers layers;$/;"	m	struct:PointQueryContext	file:	access:public
layers	src/cpSpaceQuery.c	/^	cpLayers layers;$/;"	m	struct:SegmentQueryContext	file:	access:public
leaf	src/cpBBTree.c	/^		} leaf;$/;"	m	union:Node::__anon2	typeref:struct:Node::__anon2::__anon4	file:	access:public
leaf	src/cpBBTree.c	/^	Node *leaf;$/;"	m	struct:Thread	file:	access:public
leafSetEql	src/cpBBTree.c	/^leafSetEql(void *obj, Node *node)$/;"	f	file:	signature:(void *obj, Node *node)
leafSetTrans	src/cpBBTree.c	/^leafSetTrans(void *obj, cpBBTree *tree)$/;"	f	file:	signature:(void *obj, cpBBTree *tree)
leaves	src/cpBBTree.c	/^	cpHashSet *leaves;$/;"	m	struct:cpBBTree	file:	access:public
m	include/chipmunk/cpBody.h	/^	cpFloat m;$/;"	m	struct:cpBody	access:public
m_inv	include/chipmunk/cpBody.h	/^	cpFloat m_inv;$/;"	m	struct:cpBody	access:public
max	include/chipmunk/chipmunk_private.h	/^	int num, max;$/;"	m	struct:cpArray	access:public
max	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^	cpFloat min, max;$/;"	m	struct:cpRotaryLimitJoint	access:public
max	include/chipmunk/constraints/cpSlideJoint.h	/^	cpFloat min, max;$/;"	m	struct:cpSlideJoint	access:public
max	src/cpSweep1D.c	/^	cpFloat min, max;$/;"	m	struct:Bounds	file:	access:public
max	src/cpSweep1D.c	/^	int max;$/;"	m	struct:cpSweep1D	file:	access:public
maxBias	include/chipmunk/constraints/cpConstraint.h	/^	cpFloat maxBias;$/;"	m	struct:cpConstraint	access:public
maxDistance	src/cpSpaceQuery.c	/^	cpFloat maxDistance;$/;"	m	struct:NearestPointQueryContext	file:	access:public
maxForce	include/chipmunk/constraints/cpConstraint.h	/^	cpFloat maxForce;$/;"	m	struct:cpConstraint	access:public
min	include/chipmunk/constraints/cpRotaryLimitJoint.h	/^	cpFloat min, max;$/;"	m	struct:cpRotaryLimitJoint	access:public
min	include/chipmunk/constraints/cpSlideJoint.h	/^	cpFloat min, max;$/;"	m	struct:cpSlideJoint	access:public
min	src/cpSweep1D.c	/^	cpFloat min, max;$/;"	m	struct:Bounds	file:	access:public
n	include/chipmunk/chipmunk.h	/^typedef void (^cpSpaceSegmentQueryBlock)(cpShape *shape, cpFloat t, cpVect n);$/;"	v
n	include/chipmunk/chipmunk_private.h	/^	cpVect p, n;$/;"	m	struct:cpContact	access:public
n	include/chipmunk/constraints/cpDampedSpring.h	/^	cpVect n;$/;"	m	struct:cpDampedSpring	access:public
n	include/chipmunk/constraints/cpPinJoint.h	/^	cpVect n;$/;"	m	struct:cpPinJoint	access:public
n	include/chipmunk/constraints/cpSlideJoint.h	/^	cpVect n;$/;"	m	struct:cpSlideJoint	access:public
n	include/chipmunk/cpPolyShape.h	/^	cpVect n;$/;"	m	struct:cpSplittingPlane	access:public
n	include/chipmunk/cpShape.h	/^	cpVect a, b, n;$/;"	m	struct:cpSegmentShape	access:public
n	include/chipmunk/cpShape.h	/^	cpVect n;$/;"	m	struct:cpSegmentQueryInfo	access:public
nMass	include/chipmunk/chipmunk_private.h	/^	cpFloat nMass, tMass, bounce;$/;"	m	struct:cpContact	access:public
nMass	include/chipmunk/constraints/cpDampedSpring.h	/^	cpFloat nMass;$/;"	m	struct:cpDampedSpring	access:public
nMass	include/chipmunk/constraints/cpPinJoint.h	/^	cpFloat nMass;$/;"	m	struct:cpPinJoint	access:public
nMass	include/chipmunk/constraints/cpSlideJoint.h	/^	cpFloat nMass;$/;"	m	struct:cpSlideJoint	access:public
nearestPointQuery	include/chipmunk/cpShape.h	/^	cpShapeNearestPointQueryImpl nearestPointQuery;$/;"	m	struct:cpShapeClass	access:public
next	include/chipmunk/cpArbiter.h	/^	struct cpArbiter *next, *prev;$/;"	m	struct:cpArbiterThread	typeref:struct:cpArbiterThread::cpArbiter	access:public
next	include/chipmunk/cpBody.h	/^	cpBody *next;$/;"	m	struct:cpComponentNode	access:public
next	src/cpBBTree.c	/^	Pair *next;$/;"	m	struct:Thread	file:	access:public
next	src/cpHashSet.c	/^	struct cpHashSetBin *next;$/;"	m	struct:cpHashSetBin	typeref:struct:cpHashSetBin::cpHashSetBin	file:	access:public
next	src/cpSpaceHash.c	/^	cpSpaceHashBin *next;$/;"	m	struct:cpSpaceHashBin	file:	access:public
next	src/cpSpaceStep.c	/^	cpContactBufferHeader *next;$/;"	m	struct:cpContactBufferHeader	file:	access:public
nextContactPoint	src/cpCollision.c	/^nextContactPoint(cpContact *arr, int *numPtr)$/;"	f	file:	signature:(cpContact *arr, int *numPtr)
next_prime	src/prime.h	/^next_prime(int n)$/;"	f	signature:(int n)
node	src/cpBBTree.c	/^	} node;$/;"	m	struct:Node	typeref:union:Node::__anon2	file:	access:public
normal	include/chipmunk/cpArbiter.h	/^		cpVect normal;$/;"	m	struct:cpContactPointSet::__anon1	access:public
normal_relative_velocity	include/chipmunk/constraints/util.h	/^normal_relative_velocity(cpBody *a, cpBody *b, cpVect r1, cpVect r2, cpVect n){$/;"	f	signature:(cpBody *a, cpBody *b, cpVect r1, cpVect r2, cpVect n)
nothing	src/cpSpace.c	/^static void nothing(cpArbiter *arb, cpSpace *space, void *data){}$/;"	f	file:	signature:(cpArbiter *arb, cpSpace *space, void *data)
num	include/chipmunk/chipmunk_private.h	/^	int num, max;$/;"	m	struct:cpArray	access:public
num	src/cpSweep1D.c	/^	int num;$/;"	m	struct:cpSweep1D	file:	access:public
numContacts	src/cpSpaceStep.c	/^	unsigned int numContacts;$/;"	m	struct:cpContactBufferHeader	file:	access:public
numVerts	include/chipmunk/cpPolyShape.h	/^	int numVerts;$/;"	m	struct:cpPolyShape	access:public
numcells	src/cpSpaceHash.c	/^	int numcells;$/;"	m	struct:cpSpaceHash	file:	access:public
obj	src/cpBBTree.c	/^	void *obj;$/;"	m	struct:Node	file:	access:public
obj	src/cpSpaceHash.c	/^	void *obj;$/;"	m	struct:cpHandle	file:	access:public
obj	src/cpSweep1D.c	/^	void *obj;$/;"	m	struct:TableCell	file:	access:public
operator *	include/chipmunk/chipmunk.h	/^static inline cpVect operator *(const cpVect v, const cpFloat s){return cpvmult(v, s);}$/;"	f	signature:(const cpVect v, const cpFloat s)
operator +	include/chipmunk/chipmunk.h	/^static inline cpVect operator +(const cpVect v1, const cpVect v2){return cpvadd(v1, v2);}$/;"	f	signature:(const cpVect v1, const cpVect v2)
operator -	include/chipmunk/chipmunk.h	/^static inline cpVect operator -(const cpVect v){return cpvneg(v);}$/;"	f	signature:(const cpVect v)
operator -	include/chipmunk/chipmunk.h	/^static inline cpVect operator -(const cpVect v1, const cpVect v2){return cpvsub(v1, v2);}$/;"	f	signature:(const cpVect v1, const cpVect v2)
operator ==	include/chipmunk/chipmunk.h	/^static inline cpBool operator ==(const cpVect v1, const cpVect v2){return cpveql(v1, v2);}$/;"	f	signature:(const cpVect v1, const cpVect v2)
p	include/chipmunk/chipmunk_private.h	/^	cpVect p, n;$/;"	m	struct:cpContact	access:public
p	include/chipmunk/cpBody.h	/^	cpVect p;$/;"	m	struct:cpBody	access:public
p	include/chipmunk/cpShape.h	/^	cpVect p;$/;"	m	struct:cpNearestPointQueryInfo	access:public
pairs	src/cpBBTree.c	/^			Pair *pairs;$/;"	m	struct:Node::__anon2::__anon4	file:	access:public
parent	src/cpBBTree.c	/^	Node *parent;$/;"	m	struct:Node	file:	access:public
partitionNodes	src/cpBBTree.c	/^partitionNodes(cpBBTree *tree, Node **nodes, int count)$/;"	f	file:	signature:(cpBBTree *tree, Node **nodes, int count)
phase	include/chipmunk/constraints/cpGearJoint.h	/^	cpFloat phase, ratio;$/;"	m	struct:cpGearJoint	access:public
phase	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpFloat angle, phase, ratchet;$/;"	m	struct:cpRatchetJoint	access:public
planes	include/chipmunk/cpPolyShape.h	/^	cpSplittingPlane *planes, *tPlanes;$/;"	m	struct:cpPolyShape	access:public
point	include/chipmunk/chipmunk.h	/^typedef void (^cpSpaceNearestPointQueryBlock)(cpShape *shape, cpFloat distance, cpVect point);$/;"	v
point	include/chipmunk/cpArbiter.h	/^		cpVect point;$/;"	m	struct:cpContactPointSet::__anon1	access:public
point	src/cpSpaceQuery.c	/^	cpVect point;$/;"	m	struct:NearestPointQueryContext	file:	access:public
point	src/cpSpaceQuery.c	/^	cpVect point;$/;"	m	struct:PointQueryContext	file:	access:public
points	include/chipmunk/chipmunk.h	/^typedef void (^cpSpaceShapeQueryBlock)(cpShape *shape, cpContactPointSet *points);$/;"	v
points	include/chipmunk/cpArbiter.h	/^	} points[CP_MAX_CONTACTS_PER_ARBITER];$/;"	m	struct:cpContactPointSet	typeref:struct:cpContactPointSet::__anon1	access:public
poly2poly	src/cpCollision.c	/^poly2poly(const cpShape *shape1, const cpShape *shape2, cpContact *arr)$/;"	f	file:	signature:(const cpShape *shape1, const cpShape *shape2, cpContact *arr)
polyClass	src/cpPolyShape.c	/^static const cpShapeClass polyClass = {$/;"	v	file:
pooledBins	src/cpHashSet.c	/^	cpHashSetBin *pooledBins;$/;"	m	struct:cpHashSet	file:	access:public
pooledBins	src/cpSpaceHash.c	/^	cpSpaceHashBin *pooledBins;$/;"	m	struct:cpSpaceHash	file:	access:public
pooledHandles	src/cpSpaceHash.c	/^	cpArray *pooledHandles;$/;"	m	struct:cpSpaceHash	file:	access:public
pooledNodes	src/cpBBTree.c	/^	Node *pooledNodes;$/;"	m	struct:cpBBTree	file:	access:public
pooledPairs	src/cpBBTree.c	/^	Pair *pooledPairs;$/;"	m	struct:cpBBTree	file:	access:public
position_func	include/chipmunk/cpBody.h	/^	cpBodyPositionFunc position_func;$/;"	m	struct:cpBody	access:public
postSolve	include/chipmunk/constraints/cpConstraint.h	/^	cpConstraintPostSolveFunc postSolve;$/;"	m	struct:cpConstraint	access:public
postSolve	include/chipmunk/cpArbiter.h	/^	cpCollisionPostSolveFunc postSolve;$/;"	m	struct:cpCollisionHandler	access:public
preSolve	include/chipmunk/constraints/cpConstraint.h	/^	cpConstraintPreSolveFunc preSolve;$/;"	m	struct:cpConstraint	access:public
preSolve	include/chipmunk/cpArbiter.h	/^	cpCollisionPreSolveFunc preSolve;$/;"	m	struct:cpCollisionHandler	access:public
preStep	include/chipmunk/constraints/cpConstraint.h	/^	cpConstraintPreStepImpl preStep;$/;"	m	struct:cpConstraintClass	access:public
preStep	src/constraints/cpDampedRotarySpring.c	/^preStep(cpDampedRotarySpring *spring, cpFloat dt)$/;"	f	file:	signature:(cpDampedRotarySpring *spring, cpFloat dt)
preStep	src/constraints/cpDampedSpring.c	/^preStep(cpDampedSpring *spring, cpFloat dt)$/;"	f	file:	signature:(cpDampedSpring *spring, cpFloat dt)
preStep	src/constraints/cpGearJoint.c	/^preStep(cpGearJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpGearJoint *joint, cpFloat dt)
preStep	src/constraints/cpGrooveJoint.c	/^preStep(cpGrooveJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpGrooveJoint *joint, cpFloat dt)
preStep	src/constraints/cpPinJoint.c	/^preStep(cpPinJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpPinJoint *joint, cpFloat dt)
preStep	src/constraints/cpPivotJoint.c	/^preStep(cpPivotJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpPivotJoint *joint, cpFloat dt)
preStep	src/constraints/cpRatchetJoint.c	/^preStep(cpRatchetJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpRatchetJoint *joint, cpFloat dt)
preStep	src/constraints/cpRotaryLimitJoint.c	/^preStep(cpRotaryLimitJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpRotaryLimitJoint *joint, cpFloat dt)
preStep	src/constraints/cpSimpleMotor.c	/^preStep(cpSimpleMotor *joint, cpFloat dt)$/;"	f	file:	signature:(cpSimpleMotor *joint, cpFloat dt)
preStep	src/constraints/cpSlideJoint.c	/^preStep(cpSlideJoint *joint, cpFloat dt)$/;"	f	file:	signature:(cpSlideJoint *joint, cpFloat dt)
prev	include/chipmunk/cpArbiter.h	/^	struct cpArbiter *next, *prev;$/;"	m	struct:cpArbiterThread	typeref:struct:cpArbiterThread::	access:public
prev	src/cpBBTree.c	/^	Pair *prev;$/;"	m	struct:Thread	file:	access:public
primes	src/prime.h	/^static int primes[] = {$/;"	v
query	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexQueryImpl query;$/;"	m	struct:cpSpatialIndexClass	access:public
queryFunc	src/cpSpatialIndex.c	/^	cpSpatialIndexQueryFunc queryFunc;$/;"	m	struct:dynamicToStaticContext	file:	access:public
queryRehashContext	src/cpSpaceHash.c	/^typedef struct queryRehashContext {$/;"	s	file:
queryRehashContext	src/cpSpaceHash.c	/^} queryRehashContext;$/;"	t	typeref:struct:queryRehashContext	file:
queryRehashContext::data	src/cpSpaceHash.c	/^	void *data;$/;"	m	struct:queryRehashContext	file:	access:public
queryRehashContext::func	src/cpSpaceHash.c	/^	cpSpatialIndexQueryFunc func;$/;"	m	struct:queryRehashContext	file:	access:public
queryRehashContext::hash	src/cpSpaceHash.c	/^	cpSpaceHash *hash;$/;"	m	struct:queryRehashContext	file:	access:public
queryRehash_helper	src/cpSpaceHash.c	/^queryRehash_helper(cpHandle *hand, queryRehashContext *context)$/;"	f	file:	signature:(cpHandle *hand, queryRehashContext *context)
queryReject	src/cpSpaceStep.c	/^queryReject(cpShape *a, cpShape *b)$/;"	f	file:	signature:(cpShape *a, cpShape *b)
query_helper	src/cpSpaceHash.c	/^query_helper(cpSpaceHash *hash, cpSpaceHashBin **bin_ptr, void *obj, cpSpatialIndexQueryFunc func, void *data)$/;"	f	file:	signature:(cpSpaceHash *hash, cpSpaceHashBin **bin_ptr, void *obj, cpSpatialIndexQueryFunc func, void *data)
r	include/chipmunk/cpBB.h	/^	cpFloat l, b, r ,t;$/;"	m	struct:cpBB	access:public
r	include/chipmunk/cpShape.h	/^	cpFloat r;$/;"	m	struct:cpCircleShape	access:public
r	include/chipmunk/cpShape.h	/^	cpFloat r;$/;"	m	struct:cpSegmentShape	access:public
r1	include/chipmunk/chipmunk_private.h	/^	cpVect r1, r2;$/;"	m	struct:cpContact	access:public
r1	include/chipmunk/constraints/cpDampedSpring.h	/^	cpVect r1, r2;$/;"	m	struct:cpDampedSpring	access:public
r1	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpGrooveJoint	access:public
r1	include/chipmunk/constraints/cpPinJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpPinJoint	access:public
r1	include/chipmunk/constraints/cpPivotJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpPivotJoint	access:public
r1	include/chipmunk/constraints/cpSlideJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpSlideJoint	access:public
r2	include/chipmunk/chipmunk_private.h	/^	cpVect r1, r2;$/;"	m	struct:cpContact	access:public
r2	include/chipmunk/constraints/cpDampedSpring.h	/^	cpVect r1, r2;$/;"	m	struct:cpDampedSpring	access:public
r2	include/chipmunk/constraints/cpGrooveJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpGrooveJoint	access:public
r2	include/chipmunk/constraints/cpPinJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpPinJoint	access:public
r2	include/chipmunk/constraints/cpPivotJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpPivotJoint	access:public
r2	include/chipmunk/constraints/cpSlideJoint.h	/^	cpVect r1, r2;$/;"	m	struct:cpSlideJoint	access:public
ratchet	include/chipmunk/constraints/cpRatchetJoint.h	/^	cpFloat angle, phase, ratchet;$/;"	m	struct:cpRatchetJoint	access:public
rate	include/chipmunk/constraints/cpSimpleMotor.h	/^	cpFloat rate;$/;"	m	struct:cpSimpleMotor	access:public
ratio	include/chipmunk/constraints/cpGearJoint.h	/^	cpFloat phase, ratio;$/;"	m	struct:cpGearJoint	access:public
ratio_inv	include/chipmunk/constraints/cpGearJoint.h	/^	cpFloat ratio_inv;$/;"	m	struct:cpGearJoint	access:public
recycleBin	src/cpHashSet.c	/^recycleBin(cpHashSet *set, cpHashSetBin *bin)$/;"	f	file:	signature:(cpHashSet *set, cpHashSetBin *bin)
recycleBin	src/cpSpaceHash.c	/^recycleBin(cpSpaceHash *hash, cpSpaceHashBin *bin)$/;"	f	file:	signature:(cpSpaceHash *hash, cpSpaceHashBin *bin)
rehash_helper	src/cpSpaceHash.c	/^rehash_helper(cpHandle *hand, cpSpaceHash *hash)$/;"	f	file:	signature:(cpHandle *hand, cpSpaceHash *hash)
reindex	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexReindexImpl reindex;$/;"	m	struct:cpSpatialIndexClass	access:public
reindexObject	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexReindexObjectImpl reindexObject;$/;"	m	struct:cpSpatialIndexClass	access:public
reindexQuery	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexReindexQueryImpl reindexQuery;$/;"	m	struct:cpSpatialIndexClass	access:public
relative_velocity	include/chipmunk/constraints/util.h	/^relative_velocity(cpBody *a, cpBody *b, cpVect r1, cpVect r2){$/;"	f	signature:(cpBody *a, cpBody *b, cpVect r1, cpVect r2)
remove	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexRemoveImpl remove;$/;"	m	struct:cpSpatialIndexClass	access:public
remove_orphaned_handles	src/cpSpaceHash.c	/^remove_orphaned_handles(cpSpaceHash *hash, cpSpaceHashBin **bin_ptr)$/;"	f	file:	signature:(cpSpaceHash *hash, cpSpaceHashBin **bin_ptr)
restAngle	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpFloat restAngle;$/;"	m	struct:cpDampedRotarySpring	access:public
restLength	include/chipmunk/constraints/cpDampedSpring.h	/^	cpFloat restLength;$/;"	m	struct:cpDampedSpring	access:public
retain	src/cpSpaceHash.c	/^	int retain;$/;"	m	struct:cpHandle	file:	access:public
root	include/chipmunk/cpBody.h	/^	cpBody *root;$/;"	m	struct:cpComponentNode	access:public
root	src/cpBBTree.c	/^	Node *root;$/;"	m	struct:cpBBTree	file:	access:public
rot	include/chipmunk/cpBody.h	/^	cpVect rot;$/;"	m	struct:cpBody	access:public
seg2poly	src/cpCollision.c	/^seg2poly(const cpShape *shape1, const cpShape *shape2, cpContact *arr)$/;"	f	file:	signature:(const cpShape *shape1, const cpShape *shape2, cpContact *arr)
seg2seg	src/cpCollision.c	/^seg2seg(const cpShape* shape1, const cpShape* shape2, cpContact* con)$/;"	f	file:	signature:(const cpShape* shape1, const cpShape* shape2, cpContact* con)
segValueOnAxis	src/cpCollision.c	/^segValueOnAxis(const cpSegmentShape *seg, const cpVect n, const cpFloat d)$/;"	f	file:	signature:(const cpSegmentShape *seg, const cpVect n, const cpFloat d)
segmentCollisions	src/cpCollision.c	/^static const collisionFunc segmentCollisions[9] = {$/;"	v	file:
segmentQuery	include/chipmunk/cpShape.h	/^	cpShapeSegmentQueryImpl segmentQuery;$/;"	m	struct:cpShapeClass	access:public
segmentQuery	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndexSegmentQueryImpl segmentQuery;$/;"	m	struct:cpSpatialIndexClass	access:public
segmentQuery_helper	src/cpSpaceHash.c	/^segmentQuery_helper(cpSpaceHash *hash, cpSpaceHashBin **bin_ptr, void *obj, cpSpatialIndexSegmentQueryFunc func, void *data)$/;"	f	file:	signature:(cpSpaceHash *hash, cpSpaceHashBin **bin_ptr, void *obj, cpSpatialIndexSegmentQueryFunc func, void *data)
sensor	include/chipmunk/cpShape.h	/^	cpBool sensor;$/;"	m	struct:cpShape	access:public
separate	include/chipmunk/cpArbiter.h	/^	cpCollisionSeparateFunc separate;$/;"	m	struct:cpCollisionHandler	access:public
setAngle	src/cpBody.c	/^setAngle(cpBody *body, cpFloat angle)$/;"	f	file:	signature:(cpBody *body, cpFloat angle)
setIsFull	src/cpHashSet.c	/^setIsFull(cpHashSet *set)$/;"	f	file:	signature:(cpHashSet *set)
setUpVerts	src/cpPolyShape.c	/^setUpVerts(cpPolyShape *poly, int numVerts, const cpVect *verts, cpVect offset)$/;"	f	file:	signature:(cpPolyShape *poly, int numVerts, const cpVect *verts, cpVect offset)
shape	include/chipmunk/chipmunk.h	/^typedef void (^cpSpaceBBQueryBlock)(cpShape *shape);$/;"	v
shape	include/chipmunk/chipmunk.h	/^typedef void (^cpSpaceNearestPointQueryBlock)(cpShape *shape, cpFloat distance, cpVect point);$/;"	v
shape	include/chipmunk/chipmunk.h	/^typedef void (^cpSpaceSegmentQueryBlock)(cpShape *shape, cpFloat t, cpVect n);$/;"	v
shape	include/chipmunk/chipmunk.h	/^typedef void (^cpSpaceShapeQueryBlock)(cpShape *shape, cpContactPointSet *points);$/;"	v
shape	include/chipmunk/cpPolyShape.h	/^	cpShape shape;$/;"	m	struct:cpPolyShape	access:public
shape	include/chipmunk/cpShape.h	/^	cpShape *shape;$/;"	m	struct:cpNearestPointQueryInfo	access:public
shape	include/chipmunk/cpShape.h	/^	cpShape *shape;$/;"	m	struct:cpSegmentQueryInfo	access:public
shape	include/chipmunk/cpShape.h	/^	cpShape shape;$/;"	m	struct:cpCircleShape	access:public
shape	include/chipmunk/cpShape.h	/^	cpShape shape;$/;"	m	struct:cpSegmentShape	access:public
shape	src/cpSpace.c	/^	cpShape *shape;$/;"	m	struct:arbiterFilterContext	file:	access:public
shapeVelocityFunc	src/cpSpace.c	/^static cpVect shapeVelocityFunc(cpShape *shape){return shape->body->v;}$/;"	f	file:	signature:(cpShape *shape)
size	src/cpHashSet.c	/^	unsigned int entries, size;$/;"	m	struct:cpHashSet	file:	access:public
sleepTimeThreshold	include/chipmunk/cpSpace.h	/^	cpFloat sleepTimeThreshold;$/;"	m	struct:cpSpace	access:public
space	src/cpSpace.c	/^	cpSpace *space;$/;"	m	struct:arbiterFilterContext	file:	access:public
spaceEachShapeIterator	src/cpSpace.c	/^spaceEachShapeIterator(cpShape *shape, spaceShapeContext *context)$/;"	f	file:	signature:(cpShape *shape, spaceShapeContext *context)
spaceShapeContext	src/cpSpace.c	/^typedef struct spaceShapeContext {$/;"	s	file:
spaceShapeContext	src/cpSpace.c	/^} spaceShapeContext;$/;"	t	typeref:struct:spaceShapeContext	file:
spaceShapeContext::data	src/cpSpace.c	/^	void *data;$/;"	m	struct:spaceShapeContext	file:	access:public
spaceShapeContext::func	src/cpSpace.c	/^	cpSpaceShapeIteratorFunc func;$/;"	m	struct:spaceShapeContext	file:	access:public
spatialIndex	src/cpBBTree.c	/^	cpSpatialIndex spatialIndex;$/;"	m	struct:cpBBTree	file:	access:public
spatialIndex	src/cpSpaceHash.c	/^	cpSpatialIndex spatialIndex;$/;"	m	struct:cpSpaceHash	file:	access:public
spatialIndex	src/cpSweep1D.c	/^	cpSpatialIndex spatialIndex;$/;"	m	struct:cpSweep1D	file:	access:public
springForceFunc	include/chipmunk/constraints/cpDampedSpring.h	/^	cpDampedSpringForceFunc springForceFunc;$/;"	m	struct:cpDampedSpring	access:public
springTorqueFunc	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpDampedRotarySpringTorqueFunc springTorqueFunc;$/;"	m	struct:cpDampedRotarySpring	access:public
stamp	src/cpBBTree.c	/^			cpTimestamp stamp;$/;"	m	struct:Node::__anon2::__anon4	file:	access:public
stamp	src/cpBBTree.c	/^	cpTimestamp stamp;$/;"	m	struct:cpBBTree	file:	access:public
stamp	src/cpSpaceHash.c	/^	cpTimestamp stamp;$/;"	m	struct:cpHandle	file:	access:public
stamp	src/cpSpaceHash.c	/^	cpTimestamp stamp;$/;"	m	struct:cpSpaceHash	file:	access:public
stamp	src/cpSpaceStep.c	/^	cpTimestamp stamp;$/;"	m	struct:cpContactBufferHeader	file:	access:public
start	src/cpSpaceQuery.c	/^	cpVect start, end;$/;"	m	struct:SegmentQueryContext	file:	access:public
staticBody	include/chipmunk/cpSpace.h	/^	cpBody *staticBody;$/;"	m	struct:cpSpace	access:public
staticIndex	include/chipmunk/cpSpatialIndex.h	/^	cpSpatialIndex *staticIndex, *dynamicIndex;$/;"	m	struct:cpSpatialIndex	access:public
staticIndex	src/cpSpatialIndex.c	/^	cpSpatialIndex *staticIndex;$/;"	m	struct:dynamicToStaticContext	file:	access:public
staticRoot	src/cpBBTree.c	/^	Node *staticRoot;$/;"	m	struct:MarkContext	file:	access:public
stiffness	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpFloat stiffness;$/;"	m	struct:cpDampedRotarySpring	access:public
stiffness	include/chipmunk/constraints/cpDampedSpring.h	/^	cpFloat stiffness;$/;"	m	struct:cpDampedSpring	access:public
surface_v	include/chipmunk/cpShape.h	/^	cpVect surface_v;$/;"	m	struct:cpShape	access:public
surface_vr	include/chipmunk/cpArbiter.h	/^	cpVect surface_vr;$/;"	m	struct:cpArbiter	access:public
t	include/chipmunk/chipmunk.h	/^typedef void (^cpSpaceSegmentQueryBlock)(cpShape *shape, cpFloat t, cpVect n);$/;"	v
t	include/chipmunk/cpBB.h	/^	cpFloat l, b, r ,t;$/;"	m	struct:cpBB	access:public
t	include/chipmunk/cpBody.h	/^	cpFloat t;$/;"	m	struct:cpBody	access:public
t	include/chipmunk/cpShape.h	/^	cpFloat t;$/;"	m	struct:cpSegmentQueryInfo	access:public
tMass	include/chipmunk/chipmunk_private.h	/^	cpFloat nMass, tMass, bounce;$/;"	m	struct:cpContact	access:public
tPlanes	include/chipmunk/cpPolyShape.h	/^	cpSplittingPlane *planes, *tPlanes;$/;"	m	struct:cpPolyShape	access:public
tVerts	include/chipmunk/cpPolyShape.h	/^	cpVect *verts, *tVerts;$/;"	m	struct:cpPolyShape	access:public
ta	include/chipmunk/cpShape.h	/^	cpVect ta, tb, tn;$/;"	m	struct:cpSegmentShape	access:public
table	src/cpHashSet.c	/^	cpHashSetBin **table;$/;"	m	struct:cpHashSet	file:	access:public
table	src/cpSpaceHash.c	/^	cpSpaceHashBin **table;$/;"	m	struct:cpSpaceHash	file:	access:public
table	src/cpSweep1D.c	/^	TableCell *table;$/;"	m	struct:cpSweep1D	file:	access:public
target_vrn	include/chipmunk/constraints/cpDampedSpring.h	/^	cpFloat target_vrn;$/;"	m	struct:cpDampedSpring	access:public
target_wrn	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpFloat target_wrn;$/;"	m	struct:cpDampedRotarySpring	access:public
tb	include/chipmunk/cpShape.h	/^	cpVect ta, tb, tn;$/;"	m	struct:cpSegmentShape	access:public
tc	include/chipmunk/cpShape.h	/^	cpVect c, tc;$/;"	m	struct:cpCircleShape	access:public
tn	include/chipmunk/cpShape.h	/^	cpVect ta, tb, tn;$/;"	m	struct:cpSegmentShape	access:public
tree	src/cpBBTree.c	/^	cpBBTree *tree;$/;"	m	struct:MarkContext	file:	access:public
type	include/chipmunk/cpShape.h	/^	cpShapeType type;$/;"	m	struct:cpShapeClass	access:public
u	include/chipmunk/cpArbiter.h	/^	cpFloat u;$/;"	m	struct:cpArbiter	access:public
u	include/chipmunk/cpShape.h	/^	cpFloat u;$/;"	m	struct:cpShape	access:public
unthreadHelper	src/cpArbiter.c	/^unthreadHelper(cpArbiter *arb, cpBody *body)$/;"	f	file:	signature:(cpArbiter *arb, cpBody *body)
updateBBCache	src/cpSpace.c	/^updateBBCache(cpShape *shape, void *unused)$/;"	f	file:	signature:(cpShape *shape, void *unused)
v	include/chipmunk/cpBody.h	/^	cpVect v;$/;"	m	struct:cpBody	access:public
v_coef	include/chipmunk/constraints/cpDampedSpring.h	/^	cpFloat v_coef;$/;"	m	struct:cpDampedSpring	access:public
v_limit	include/chipmunk/cpBody.h	/^	cpFloat v_limit;$/;"	m	struct:cpBody	access:public
velocityFunc	src/cpBBTree.c	/^	cpBBTreeVelocityFunc velocityFunc;$/;"	m	struct:cpBBTree	file:	access:public
velocity_func	include/chipmunk/cpBody.h	/^	cpBodyVelocityFunc velocity_func;$/;"	m	struct:cpBody	access:public
verts	include/chipmunk/cpPolyShape.h	/^	cpVect *verts, *tVerts;$/;"	m	struct:cpPolyShape	access:public
w	include/chipmunk/cpBody.h	/^	cpFloat w;$/;"	m	struct:cpBody	access:public
w_coef	include/chipmunk/constraints/cpDampedRotarySpring.h	/^	cpFloat w_coef;$/;"	m	struct:cpDampedRotarySpring	access:public
w_limit	include/chipmunk/cpBody.h	/^	cpFloat w_limit;$/;"	m	struct:cpBody	access:public
x	include/chipmunk/chipmunk_types.h	/^	typedef struct cpVect{cpFloat x,y;} cpVect;$/;"	m	struct:cpVect	access:public
y	include/chipmunk/chipmunk_types.h	/^	typedef struct cpVect{cpFloat x,y;} cpVect;$/;"	m	struct:cpVect	access:public
