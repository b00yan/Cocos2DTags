!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Add	Dynamics/b2Island.h	/^    void Add(b2Body* body)$/;"	f	class:b2Island
Add	Dynamics/b2Island.h	/^    void Add(b2Contact* contact)$/;"	f	class:b2Island
Add	Dynamics/b2Island.h	/^    void Add(b2Joint* joint)$/;"	f	class:b2Island
AddPair	Dynamics/b2ContactManager.cpp	/^void b2ContactManager::AddPair(void* proxyUserDataA, void* proxyUserDataB)$/;"	f	class:b2ContactManager
AddType	Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::AddType(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destoryFcn,$/;"	f	class:b2Contact
Advance	Common/b2Math.h	/^inline void b2Sweep::Advance(float32 alpha)$/;"	f	class:b2Sweep
Advance	Dynamics/b2Body.h	/^inline void b2Body::Advance(float32 alpha)$/;"	f	class:b2Body
Allocate	Common/b2BlockAllocator.cpp	/^void* b2BlockAllocator::Allocate(int32 size)$/;"	f	class:b2BlockAllocator
Allocate	Common/b2StackAllocator.cpp	/^void* b2StackAllocator::Allocate(int32 size)$/;"	f	class:b2StackAllocator
AllocateNode	Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::AllocateNode()$/;"	f	class:b2DynamicTree
AppendFlags	Common/b2Draw.cpp	/^void b2Draw::AppendFlags(uint32 flags)$/;"	f	class:b2Draw
ApplyAngularImpulse	Dynamics/b2Body.h	/^inline void b2Body::ApplyAngularImpulse(float32 impulse)$/;"	f	class:b2Body
ApplyForce	Dynamics/b2Body.h	/^inline void b2Body::ApplyForce(const b2Vec2& force, const b2Vec2& point)$/;"	f	class:b2Body
ApplyForceToCenter	Dynamics/b2Body.h	/^inline void b2Body::ApplyForceToCenter(const b2Vec2& force)$/;"	f	class:b2Body
ApplyLinearImpulse	Dynamics/b2Body.h	/^inline void b2Body::ApplyLinearImpulse(const b2Vec2& impulse, const b2Vec2& point)$/;"	f	class:b2Body
ApplyTorque	Dynamics/b2Body.h	/^inline void b2Body::ApplyTorque(float32 torque)$/;"	f	class:b2Body
B2_BLOCK_ALLOCATOR_H	Common/b2BlockAllocator.h	20;"	d
B2_BODY_H	Dynamics/b2Body.h	20;"	d
B2_BROAD_PHASE_H	Collision/b2BroadPhase.h	20;"	d
B2_CHAIN_AND_CIRCLE_CONTACT_H	Dynamics/Contacts/b2ChainAndCircleContact.h	20;"	d
B2_CHAIN_AND_POLYGON_CONTACT_H	Dynamics/Contacts/b2ChainAndPolygonContact.h	20;"	d
B2_CHAIN_SHAPE_H	Collision/Shapes/b2ChainShape.h	20;"	d
B2_CIRCLE_CONTACT_H	Dynamics/Contacts/b2CircleContact.h	20;"	d
B2_CIRCLE_SHAPE_H	Collision/Shapes/b2CircleShape.h	20;"	d
B2_COLLISION_H	Collision/b2Collision.h	20;"	d
B2_CONTACT_H	Dynamics/Contacts/b2Contact.h	20;"	d
B2_CONTACT_MANAGER_H	Dynamics/b2ContactManager.h	20;"	d
B2_CONTACT_SOLVER_H	Dynamics/Contacts/b2ContactSolver.h	20;"	d
B2_DEBUG_SOLVER	Dynamics/Contacts/b2ContactSolver.cpp	27;"	d	file:
B2_DISTANCE_H	Collision/b2Distance.h	21;"	d
B2_DISTANCE_JOINT_H	Dynamics/Joints/b2DistanceJoint.h	20;"	d
B2_DYNAMIC_TREE_H	Collision/b2DynamicTree.h	20;"	d
B2_EDGE_AND_CIRCLE_CONTACT_H	Dynamics/Contacts/b2EdgeAndCircleContact.h	20;"	d
B2_EDGE_AND_POLYGON_CONTACT_H	Dynamics/Contacts/b2EdgeAndPolygonContact.h	20;"	d
B2_EDGE_SHAPE_H	Collision/Shapes/b2EdgeShape.h	20;"	d
B2_FIXTURE_H	Dynamics/b2Fixture.h	20;"	d
B2_FRICTION_JOINT_H	Dynamics/Joints/b2FrictionJoint.h	20;"	d
B2_GEAR_JOINT_H	Dynamics/Joints/b2GearJoint.h	20;"	d
B2_GROWABLE_STACK_H	Common/b2GrowableStack.h	20;"	d
B2_ISLAND_H	Dynamics/b2Island.h	20;"	d
B2_JOINT_H	Dynamics/Joints/b2Joint.h	20;"	d
B2_MATH_H	Common/b2Math.h	20;"	d
B2_MOUSE_JOINT_H	Dynamics/Joints/b2MouseJoint.h	20;"	d
B2_NOT_USED	Common/b2Settings.h	25;"	d
B2_POLYGON_AND_CIRCLE_CONTACT_H	Dynamics/Contacts/b2PolygonAndCircleContact.h	20;"	d
B2_POLYGON_CONTACT_H	Dynamics/Contacts/b2PolygonContact.h	20;"	d
B2_POLYGON_SHAPE_H	Collision/Shapes/b2PolygonShape.h	20;"	d
B2_PRISMATIC_JOINT_H	Dynamics/Joints/b2PrismaticJoint.h	20;"	d
B2_PULLEY_JOINT_H	Dynamics/Joints/b2PulleyJoint.h	20;"	d
B2_REVOLUTE_JOINT_H	Dynamics/Joints/b2RevoluteJoint.h	20;"	d
B2_ROPE_H	Rope/b2Rope.h	20;"	d
B2_ROPE_JOINT_H	Dynamics/Joints/b2RopeJoint.h	20;"	d
B2_SETTINGS_H	Common/b2Settings.h	20;"	d
B2_SHAPE_H	Collision/Shapes/b2Shape.h	20;"	d
B2_STACK_ALLOCATOR_H	Common/b2StackAllocator.h	20;"	d
B2_TIME_OF_IMPACT_H	Collision/b2TimeOfImpact.h	20;"	d
B2_TIME_STEP_H	Dynamics/b2TimeStep.h	20;"	d
B2_WELD_JOINT_H	Dynamics/Joints/b2WeldJoint.h	20;"	d
B2_WHEEL_JOINT_H	Dynamics/Joints/b2WheelJoint.h	20;"	d
B2_WORLD_CALLBACKS_H	Dynamics/b2WorldCallbacks.h	20;"	d
B2_WORLD_H	Dynamics/b2World.h	20;"	d
BOX2D_H	Box2D.h	20;"	d
Balance	Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::Balance(int32 iA)$/;"	f	class:b2DynamicTree
BeginContact	Dynamics/b2WorldCallbacks.h	/^    virtual void BeginContact(b2Contact* contact) { B2_NOT_USED(contact); }$/;"	f	class:b2ContactListener
BufferMove	Collision/b2BroadPhase.cpp	/^void b2BroadPhase::BufferMove(int32 proxyId)$/;"	f	class:b2BroadPhase
Clear	Common/b2BlockAllocator.cpp	/^void b2BlockAllocator::Clear()$/;"	f	class:b2BlockAllocator
Clear	Dynamics/b2Island.h	/^    void Clear()$/;"	f	class:b2Island
ClearFlags	Common/b2Draw.cpp	/^void b2Draw::ClearFlags(uint32 flags)$/;"	f	class:b2Draw
ClearForces	Dynamics/b2World.cpp	/^void b2World::ClearForces()$/;"	f	class:b2World
Clone	Collision/Shapes/b2ChainShape.cpp	/^b2Shape* b2ChainShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2ChainShape
Clone	Collision/Shapes/b2CircleShape.cpp	/^b2Shape* b2CircleShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2CircleShape
Clone	Collision/Shapes/b2EdgeShape.cpp	/^b2Shape* b2EdgeShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2EdgeShape
Clone	Collision/Shapes/b2PolygonShape.cpp	/^b2Shape* b2PolygonShape::Clone(b2BlockAllocator* allocator) const$/;"	f	class:b2PolygonShape
Collide	Collision/b2CollideEdge.cpp	/^void b2EPCollider::Collide(b2Manifold* manifold, const b2EdgeShape* edgeA, const b2Transform& xfA,$/;"	f	class:b2EPCollider
Collide	Dynamics/b2ContactManager.cpp	/^void b2ContactManager::Collide()$/;"	f	class:b2ContactManager
Combine	Collision/b2Collision.h	/^    void Combine(const b2AABB& aabb)$/;"	f	struct:b2AABB
Combine	Collision/b2Collision.h	/^    void Combine(const b2AABB& aabb1, const b2AABB& aabb2)$/;"	f	struct:b2AABB
ComputeAABB	Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2ChainShape
ComputeAABB	Collision/Shapes/b2CircleShape.cpp	/^void b2CircleShape::ComputeAABB(b2AABB* aabb, const b2Transform& transform, int32 childIndex) const$/;"	f	class:b2CircleShape
ComputeAABB	Collision/Shapes/b2EdgeShape.cpp	/^void b2EdgeShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2EdgeShape
ComputeAABB	Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::ComputeAABB(b2AABB* aabb, const b2Transform& xf, int32 childIndex) const$/;"	f	class:b2PolygonShape
ComputeCentroid	Collision/Shapes/b2PolygonShape.cpp	/^static b2Vec2 ComputeCentroid(const b2Vec2* vs, int32 count)$/;"	f	file:
ComputeEdgeSeparation	Collision/b2CollideEdge.cpp	/^b2EPAxis b2EPCollider::ComputeEdgeSeparation()$/;"	f	class:b2EPCollider
ComputeHeight	Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::ComputeHeight() const$/;"	f	class:b2DynamicTree
ComputeHeight	Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::ComputeHeight(int32 nodeId) const$/;"	f	class:b2DynamicTree
ComputeMass	Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2ChainShape
ComputeMass	Collision/Shapes/b2CircleShape.cpp	/^void b2CircleShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2CircleShape
ComputeMass	Collision/Shapes/b2EdgeShape.cpp	/^void b2EdgeShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2EdgeShape
ComputeMass	Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::ComputeMass(b2MassData* massData, float32 density) const$/;"	f	class:b2PolygonShape
ComputePolygonSeparation	Collision/b2CollideEdge.cpp	/^b2EPAxis b2EPCollider::ComputePolygonSeparation()$/;"	f	class:b2EPCollider
Contains	Collision/b2Collision.h	/^    bool Contains(const b2AABB& aabb) const$/;"	f	struct:b2AABB
Create	Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^b2Contact* b2ChainAndCircleContact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndCircleContact
Create	Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^b2Contact* b2ChainAndPolygonContact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndPolygonContact
Create	Dynamics/Contacts/b2CircleContact.cpp	/^b2Contact* b2CircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2CircleContact
Create	Dynamics/Contacts/b2Contact.cpp	/^b2Contact* b2Contact::Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, b2BlockAllocator* allocator)$/;"	f	class:b2Contact
Create	Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^b2Contact* b2EdgeAndCircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndCircleContact
Create	Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^b2Contact* b2EdgeAndPolygonContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndPolygonContact
Create	Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^b2Contact* b2PolygonAndCircleContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonAndCircleContact
Create	Dynamics/Contacts/b2PolygonContact.cpp	/^b2Contact* b2PolygonContact::Create(b2Fixture* fixtureA, int32, b2Fixture* fixtureB, int32, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonContact
Create	Dynamics/Joints/b2Joint.cpp	/^b2Joint* b2Joint::Create(const b2JointDef* def, b2BlockAllocator* allocator)$/;"	f	class:b2Joint
Create	Dynamics/b2Fixture.cpp	/^void b2Fixture::Create(b2BlockAllocator* allocator, b2Body* body, const b2FixtureDef* def)$/;"	f	class:b2Fixture
CreateBody	Dynamics/b2World.cpp	/^b2Body* b2World::CreateBody(const b2BodyDef* def)$/;"	f	class:b2World
CreateChain	Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::CreateChain(const b2Vec2* vertices, int32 count)$/;"	f	class:b2ChainShape
CreateFixture	Dynamics/b2Body.cpp	/^b2Fixture* b2Body::CreateFixture(const b2FixtureDef* def)$/;"	f	class:b2Body
CreateFixture	Dynamics/b2Body.cpp	/^b2Fixture* b2Body::CreateFixture(const b2Shape* shape, float32 density)$/;"	f	class:b2Body
CreateJoint	Dynamics/b2World.cpp	/^b2Joint* b2World::CreateJoint(const b2JointDef* def)$/;"	f	class:b2World
CreateLoop	Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::CreateLoop(const b2Vec2* vertices, int32 count)$/;"	f	class:b2ChainShape
CreateProxies	Dynamics/b2Fixture.cpp	/^void b2Fixture::CreateProxies(b2BroadPhase* broadPhase, const b2Transform& xf)$/;"	f	class:b2Fixture
CreateProxy	Collision/b2BroadPhase.cpp	/^int32 b2BroadPhase::CreateProxy(const b2AABB& aabb, void* userData)$/;"	f	class:b2BroadPhase
CreateProxy	Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::CreateProxy(const b2AABB& aabb, void* userData)$/;"	f	class:b2DynamicTree
Destroy	Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^void b2ChainAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndCircleContact
Destroy	Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^void b2ChainAndPolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2ChainAndPolygonContact
Destroy	Dynamics/Contacts/b2CircleContact.cpp	/^void b2CircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2CircleContact
Destroy	Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2Contact
Destroy	Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^void b2EdgeAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndCircleContact
Destroy	Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^void b2EdgeAndPolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2EdgeAndPolygonContact
Destroy	Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^void b2PolygonAndCircleContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonAndCircleContact
Destroy	Dynamics/Contacts/b2PolygonContact.cpp	/^void b2PolygonContact::Destroy(b2Contact* contact, b2BlockAllocator* allocator)$/;"	f	class:b2PolygonContact
Destroy	Dynamics/Joints/b2Joint.cpp	/^void b2Joint::Destroy(b2Joint* joint, b2BlockAllocator* allocator)$/;"	f	class:b2Joint
Destroy	Dynamics/b2ContactManager.cpp	/^void b2ContactManager::Destroy(b2Contact* c)$/;"	f	class:b2ContactManager
Destroy	Dynamics/b2Fixture.cpp	/^void b2Fixture::Destroy(b2BlockAllocator* allocator)$/;"	f	class:b2Fixture
DestroyBody	Dynamics/b2World.cpp	/^void b2World::DestroyBody(b2Body* b)$/;"	f	class:b2World
DestroyFixture	Dynamics/b2Body.cpp	/^void b2Body::DestroyFixture(b2Fixture* fixture)$/;"	f	class:b2Body
DestroyJoint	Dynamics/b2World.cpp	/^void b2World::DestroyJoint(b2Joint* j)$/;"	f	class:b2World
DestroyProxies	Dynamics/b2Fixture.cpp	/^void b2Fixture::DestroyProxies(b2BroadPhase* broadPhase)$/;"	f	class:b2Fixture
DestroyProxy	Collision/b2BroadPhase.cpp	/^void b2BroadPhase::DestroyProxy(int32 proxyId)$/;"	f	class:b2BroadPhase
DestroyProxy	Collision/b2DynamicTree.cpp	/^void b2DynamicTree::DestroyProxy(int32 proxyId)$/;"	f	class:b2DynamicTree
Draw	Rope/b2Rope.cpp	/^void b2Rope::Draw(b2Draw* draw) const$/;"	f	class:b2Rope
DrawDebugData	Dynamics/b2World.cpp	/^void b2World::DrawDebugData()$/;"	f	class:b2World
DrawJoint	Dynamics/b2World.cpp	/^void b2World::DrawJoint(b2Joint* joint)$/;"	f	class:b2World
DrawShape	Dynamics/b2World.cpp	/^void b2World::DrawShape(b2Fixture* fixture, const b2Transform& xf, const b2Color& color)$/;"	f	class:b2World
Dump	Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJoint::Dump()$/;"	f	class:b2DistanceJoint
Dump	Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::Dump()$/;"	f	class:b2FrictionJoint
Dump	Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::Dump()$/;"	f	class:b2GearJoint
Dump	Dynamics/Joints/b2Joint.h	/^    virtual void Dump() { b2Log("\/\/ Dump is not supported for this joint type.\\n"); }$/;"	f	class:b2Joint
Dump	Dynamics/Joints/b2MouseJoint.h	/^    void Dump() { b2Log("Mouse joint dumping is not supported.\\n"); }$/;"	f	class:b2MouseJoint
Dump	Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::Dump()$/;"	f	class:b2PrismaticJoint
Dump	Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::Dump()$/;"	f	class:b2PulleyJoint
Dump	Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::Dump()$/;"	f	class:b2RevoluteJoint
Dump	Dynamics/Joints/b2RopeJoint.cpp	/^void b2RopeJoint::Dump()$/;"	f	class:b2RopeJoint
Dump	Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJoint::Dump()$/;"	f	class:b2WeldJoint
Dump	Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::Dump()$/;"	f	class:b2WheelJoint
Dump	Dynamics/b2Body.cpp	/^void b2Body::Dump()$/;"	f	class:b2Body
Dump	Dynamics/b2Fixture.cpp	/^void b2Fixture::Dump(int32 bodyIndex)$/;"	f	class:b2Fixture
Dump	Dynamics/b2World.cpp	/^void b2World::Dump()$/;"	f	class:b2World
EnableLimit	Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::EnableLimit(bool flag)$/;"	f	class:b2PrismaticJoint
EnableLimit	Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::EnableLimit(bool flag)$/;"	f	class:b2RevoluteJoint
EnableMotor	Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::EnableMotor(bool flag)$/;"	f	class:b2PrismaticJoint
EnableMotor	Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::EnableMotor(bool flag)$/;"	f	class:b2RevoluteJoint
EnableMotor	Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::EnableMotor(bool flag)$/;"	f	class:b2WheelJoint
EndContact	Dynamics/b2WorldCallbacks.h	/^    virtual void EndContact(b2Contact* contact) { B2_NOT_USED(contact); }$/;"	f	class:b2ContactListener
Evaluate	Collision/b2TimeOfImpact.cpp	/^    float32 Evaluate(int32 indexA, int32 indexB, float32 t) const$/;"	f	struct:b2SeparationFunction
Evaluate	Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^void b2ChainAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2ChainAndCircleContact
Evaluate	Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^void b2ChainAndPolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2ChainAndPolygonContact
Evaluate	Dynamics/Contacts/b2CircleContact.cpp	/^void b2CircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2CircleContact
Evaluate	Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^void b2EdgeAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2EdgeAndCircleContact
Evaluate	Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^void b2EdgeAndPolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2EdgeAndPolygonContact
Evaluate	Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^void b2PolygonAndCircleContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2PolygonAndCircleContact
Evaluate	Dynamics/Contacts/b2PolygonContact.cpp	/^void b2PolygonContact::Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB)$/;"	f	class:b2PolygonContact
FindMinSeparation	Collision/b2TimeOfImpact.cpp	/^    float32 FindMinSeparation(int32* indexA, int32* indexB, float32 t) const$/;"	f	struct:b2SeparationFunction
FindNewContacts	Dynamics/b2ContactManager.cpp	/^void b2ContactManager::FindNewContacts()$/;"	f	class:b2ContactManager
FlagForFiltering	Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::FlagForFiltering()$/;"	f	class:b2Contact
Free	Common/b2BlockAllocator.cpp	/^void b2BlockAllocator::Free(void* p, int32 size)$/;"	f	class:b2BlockAllocator
Free	Common/b2StackAllocator.cpp	/^void b2StackAllocator::Free(void* p)$/;"	f	class:b2StackAllocator
FreeNode	Collision/b2DynamicTree.cpp	/^void b2DynamicTree::FreeNode(int32 nodeId)$/;"	f	class:b2DynamicTree
GetAABB	Dynamics/b2Fixture.h	/^inline const b2AABB& b2Fixture::GetAABB(int32 childIndex) const$/;"	f	class:b2Fixture
GetAllowSleeping	Dynamics/b2World.h	/^    bool GetAllowSleeping() const { return m_allowSleep; }$/;"	f	class:b2World
GetAnchorA	Dynamics/Joints/b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetAnchorA() const$/;"	f	class:b2DistanceJoint
GetAnchorA	Dynamics/Joints/b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetAnchorA() const$/;"	f	class:b2FrictionJoint
GetAnchorA	Dynamics/Joints/b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetAnchorA() const$/;"	f	class:b2GearJoint
GetAnchorA	Dynamics/Joints/b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetAnchorA() const$/;"	f	class:b2MouseJoint
GetAnchorA	Dynamics/Joints/b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetAnchorA() const$/;"	f	class:b2PrismaticJoint
GetAnchorA	Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetAnchorA() const$/;"	f	class:b2PulleyJoint
GetAnchorA	Dynamics/Joints/b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetAnchorA() const$/;"	f	class:b2RevoluteJoint
GetAnchorA	Dynamics/Joints/b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetAnchorA() const$/;"	f	class:b2RopeJoint
GetAnchorA	Dynamics/Joints/b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetAnchorA() const$/;"	f	class:b2WeldJoint
GetAnchorA	Dynamics/Joints/b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetAnchorA() const$/;"	f	class:b2WheelJoint
GetAnchorB	Dynamics/Joints/b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetAnchorB() const$/;"	f	class:b2DistanceJoint
GetAnchorB	Dynamics/Joints/b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetAnchorB() const$/;"	f	class:b2FrictionJoint
GetAnchorB	Dynamics/Joints/b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetAnchorB() const$/;"	f	class:b2GearJoint
GetAnchorB	Dynamics/Joints/b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetAnchorB() const$/;"	f	class:b2MouseJoint
GetAnchorB	Dynamics/Joints/b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetAnchorB() const$/;"	f	class:b2PrismaticJoint
GetAnchorB	Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetAnchorB() const$/;"	f	class:b2PulleyJoint
GetAnchorB	Dynamics/Joints/b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetAnchorB() const$/;"	f	class:b2RevoluteJoint
GetAnchorB	Dynamics/Joints/b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetAnchorB() const$/;"	f	class:b2RopeJoint
GetAnchorB	Dynamics/Joints/b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetAnchorB() const$/;"	f	class:b2WeldJoint
GetAnchorB	Dynamics/Joints/b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetAnchorB() const$/;"	f	class:b2WheelJoint
GetAngle	Common/b2Math.h	/^    float32 GetAngle() const$/;"	f	struct:b2Rot
GetAngle	Dynamics/b2Body.h	/^inline float32 b2Body::GetAngle() const$/;"	f	class:b2Body
GetAngularDamping	Dynamics/b2Body.h	/^inline float32 b2Body::GetAngularDamping() const$/;"	f	class:b2Body
GetAngularVelocity	Dynamics/b2Body.h	/^inline float32 b2Body::GetAngularVelocity() const$/;"	f	class:b2Body
GetAreaRatio	Collision/b2DynamicTree.cpp	/^float32 b2DynamicTree::GetAreaRatio() const$/;"	f	class:b2DynamicTree
GetAutoClearForces	Dynamics/b2World.h	/^inline bool b2World::GetAutoClearForces() const$/;"	f	class:b2World
GetBody	Dynamics/b2Fixture.h	/^inline b2Body* b2Fixture::GetBody()$/;"	f	class:b2Fixture
GetBody	Dynamics/b2Fixture.h	/^inline const b2Body* b2Fixture::GetBody() const$/;"	f	class:b2Fixture
GetBodyA	Dynamics/Joints/b2Joint.h	/^inline b2Body* b2Joint::GetBodyA()$/;"	f	class:b2Joint
GetBodyB	Dynamics/Joints/b2Joint.h	/^inline b2Body* b2Joint::GetBodyB()$/;"	f	class:b2Joint
GetBodyCount	Dynamics/b2World.h	/^inline int32 b2World::GetBodyCount() const$/;"	f	class:b2World
GetBodyList	Dynamics/b2World.h	/^inline b2Body* b2World::GetBodyList()$/;"	f	class:b2World
GetBodyList	Dynamics/b2World.h	/^inline const b2Body* b2World::GetBodyList() const$/;"	f	class:b2World
GetCenter	Collision/b2Collision.h	/^    b2Vec2 GetCenter() const$/;"	f	struct:b2AABB
GetChildCount	Collision/Shapes/b2ChainShape.cpp	/^int32 b2ChainShape::GetChildCount() const$/;"	f	class:b2ChainShape
GetChildCount	Collision/Shapes/b2CircleShape.cpp	/^int32 b2CircleShape::GetChildCount() const$/;"	f	class:b2CircleShape
GetChildCount	Collision/Shapes/b2EdgeShape.cpp	/^int32 b2EdgeShape::GetChildCount() const$/;"	f	class:b2EdgeShape
GetChildCount	Collision/Shapes/b2PolygonShape.cpp	/^int32 b2PolygonShape::GetChildCount() const$/;"	f	class:b2PolygonShape
GetChildEdge	Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::GetChildEdge(b2EdgeShape* edge, int32 index) const$/;"	f	class:b2ChainShape
GetChildIndexA	Dynamics/Contacts/b2Contact.h	/^inline int32 b2Contact::GetChildIndexA() const$/;"	f	class:b2Contact
GetChildIndexB	Dynamics/Contacts/b2Contact.h	/^inline int32 b2Contact::GetChildIndexB() const$/;"	f	class:b2Contact
GetClosestPoint	Collision/b2Distance.cpp	/^    b2Vec2 GetClosestPoint() const$/;"	f	struct:b2Simplex
GetCollideConnected	Dynamics/Joints/b2Joint.h	/^inline bool b2Joint::GetCollideConnected() const$/;"	f	class:b2Joint
GetContactCount	Dynamics/b2World.h	/^inline int32 b2World::GetContactCount() const$/;"	f	class:b2World
GetContactList	Dynamics/b2Body.h	/^inline b2ContactEdge* b2Body::GetContactList()$/;"	f	class:b2Body
GetContactList	Dynamics/b2Body.h	/^inline const b2ContactEdge* b2Body::GetContactList() const$/;"	f	class:b2Body
GetContactList	Dynamics/b2World.h	/^inline b2Contact* b2World::GetContactList()$/;"	f	class:b2World
GetContactList	Dynamics/b2World.h	/^inline const b2Contact* b2World::GetContactList() const$/;"	f	class:b2World
GetContactManager	Dynamics/b2World.h	/^inline const b2ContactManager& b2World::GetContactManager() const$/;"	f	class:b2World
GetContinuousPhysics	Dynamics/b2World.h	/^    bool GetContinuousPhysics() const { return m_continuousPhysics; }$/;"	f	class:b2World
GetCount	Common/b2GrowableStack.h	/^    int32 GetCount()$/;"	f	class:b2GrowableStack
GetDampingRatio	Dynamics/Joints/b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetDampingRatio() const$/;"	f	class:b2DistanceJoint
GetDampingRatio	Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetDampingRatio() const$/;"	f	class:b2MouseJoint
GetDampingRatio	Dynamics/Joints/b2WeldJoint.h	/^    float32 GetDampingRatio() const { return m_dampingRatio; }$/;"	f	class:b2WeldJoint
GetDensity	Dynamics/b2Fixture.h	/^inline float32 b2Fixture::GetDensity() const$/;"	f	class:b2Fixture
GetExtents	Collision/b2Collision.h	/^    b2Vec2 GetExtents() const$/;"	f	struct:b2AABB
GetFatAABB	Collision/b2BroadPhase.h	/^inline const b2AABB& b2BroadPhase::GetFatAABB(int32 proxyId) const$/;"	f	class:b2BroadPhase
GetFatAABB	Collision/b2DynamicTree.h	/^inline const b2AABB& b2DynamicTree::GetFatAABB(int32 proxyId) const$/;"	f	class:b2DynamicTree
GetFilterData	Dynamics/b2Fixture.h	/^inline const b2Filter& b2Fixture::GetFilterData() const$/;"	f	class:b2Fixture
GetFixtureA	Dynamics/Contacts/b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureA()$/;"	f	class:b2Contact
GetFixtureA	Dynamics/Contacts/b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureA() const$/;"	f	class:b2Contact
GetFixtureB	Dynamics/Contacts/b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureB()$/;"	f	class:b2Contact
GetFixtureB	Dynamics/Contacts/b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureB() const$/;"	f	class:b2Contact
GetFixtureList	Dynamics/b2Body.h	/^inline b2Fixture* b2Body::GetFixtureList()$/;"	f	class:b2Body
GetFixtureList	Dynamics/b2Body.h	/^inline const b2Fixture* b2Body::GetFixtureList() const$/;"	f	class:b2Body
GetFlags	Common/b2Draw.cpp	/^uint32 b2Draw::GetFlags() const$/;"	f	class:b2Draw
GetFrequency	Dynamics/Joints/b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetFrequency() const$/;"	f	class:b2DistanceJoint
GetFrequency	Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetFrequency() const$/;"	f	class:b2MouseJoint
GetFrequency	Dynamics/Joints/b2WeldJoint.h	/^    float32 GetFrequency() const { return m_frequencyHz; }$/;"	f	class:b2WeldJoint
GetFriction	Dynamics/Contacts/b2Contact.h	/^inline float32 b2Contact::GetFriction() const$/;"	f	class:b2Contact
GetFriction	Dynamics/b2Fixture.h	/^inline float32 b2Fixture::GetFriction() const$/;"	f	class:b2Fixture
GetGravity	Dynamics/b2World.h	/^inline b2Vec2 b2World::GetGravity() const$/;"	f	class:b2World
GetGravityScale	Dynamics/b2Body.h	/^inline float32 b2Body::GetGravityScale() const$/;"	f	class:b2Body
GetGroundAnchorA	Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetGroundAnchorA() const$/;"	f	class:b2PulleyJoint
GetGroundAnchorB	Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetGroundAnchorB() const$/;"	f	class:b2PulleyJoint
GetHeight	Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::GetHeight() const$/;"	f	class:b2DynamicTree
GetInertia	Dynamics/b2Body.h	/^inline float32 b2Body::GetInertia() const$/;"	f	class:b2Body
GetInverse	Common/b2Math.h	/^    b2Mat22 GetInverse() const$/;"	f	struct:b2Mat22
GetInverse22	Common/b2Math.cpp	/^void b2Mat33::GetInverse22(b2Mat33* M) const$/;"	f	class:b2Mat33
GetJoint1	Dynamics/Joints/b2GearJoint.h	/^    b2Joint* GetJoint1() { return m_joint1; }$/;"	f	class:b2GearJoint
GetJoint2	Dynamics/Joints/b2GearJoint.h	/^    b2Joint* GetJoint2() { return m_joint2; }$/;"	f	class:b2GearJoint
GetJointAngle	Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetJointAngle() const$/;"	f	class:b2RevoluteJoint
GetJointCount	Dynamics/b2World.h	/^inline int32 b2World::GetJointCount() const$/;"	f	class:b2World
GetJointList	Dynamics/b2Body.h	/^inline b2JointEdge* b2Body::GetJointList()$/;"	f	class:b2Body
GetJointList	Dynamics/b2Body.h	/^inline const b2JointEdge* b2Body::GetJointList() const$/;"	f	class:b2Body
GetJointList	Dynamics/b2World.h	/^inline b2Joint* b2World::GetJointList()$/;"	f	class:b2World
GetJointList	Dynamics/b2World.h	/^inline const b2Joint* b2World::GetJointList() const$/;"	f	class:b2World
GetJointSpeed	Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetJointSpeed() const$/;"	f	class:b2PrismaticJoint
GetJointSpeed	Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetJointSpeed() const$/;"	f	class:b2RevoluteJoint
GetJointSpeed	Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetJointSpeed() const$/;"	f	class:b2WheelJoint
GetJointTranslation	Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetJointTranslation() const$/;"	f	class:b2PrismaticJoint
GetJointTranslation	Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetJointTranslation() const$/;"	f	class:b2WheelJoint
GetLength	Dynamics/Joints/b2DistanceJoint.h	/^inline float32 b2DistanceJoint::GetLength() const$/;"	f	class:b2DistanceJoint
GetLengthA	Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetLengthA() const$/;"	f	class:b2PulleyJoint
GetLengthB	Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetLengthB() const$/;"	f	class:b2PulleyJoint
GetLimitState	Dynamics/Joints/b2RopeJoint.cpp	/^b2LimitState b2RopeJoint::GetLimitState() const$/;"	f	class:b2RopeJoint
GetLinearDamping	Dynamics/b2Body.h	/^inline float32 b2Body::GetLinearDamping() const$/;"	f	class:b2Body
GetLinearVelocity	Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocity() const$/;"	f	class:b2Body
GetLinearVelocityFromLocalPoint	Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocityFromLocalPoint(const b2Vec2& localPoint) const$/;"	f	class:b2Body
GetLinearVelocityFromWorldPoint	Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLinearVelocityFromWorldPoint(const b2Vec2& worldPoint) const$/;"	f	class:b2Body
GetLocalAnchorA	Dynamics/Joints/b2DistanceJoint.h	/^    const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2DistanceJoint
GetLocalAnchorA	Dynamics/Joints/b2FrictionJoint.h	/^    const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2FrictionJoint
GetLocalAnchorA	Dynamics/Joints/b2PrismaticJoint.h	/^    const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2PrismaticJoint
GetLocalAnchorA	Dynamics/Joints/b2RevoluteJoint.h	/^    const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2RevoluteJoint
GetLocalAnchorA	Dynamics/Joints/b2RopeJoint.h	/^    const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2RopeJoint
GetLocalAnchorA	Dynamics/Joints/b2WeldJoint.h	/^    const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2WeldJoint
GetLocalAnchorA	Dynamics/Joints/b2WheelJoint.h	/^    const b2Vec2& GetLocalAnchorA() const { return m_localAnchorA; }$/;"	f	class:b2WheelJoint
GetLocalAnchorB	Dynamics/Joints/b2DistanceJoint.h	/^    const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2DistanceJoint
GetLocalAnchorB	Dynamics/Joints/b2FrictionJoint.h	/^    const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2FrictionJoint
GetLocalAnchorB	Dynamics/Joints/b2PrismaticJoint.h	/^    const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2PrismaticJoint
GetLocalAnchorB	Dynamics/Joints/b2RevoluteJoint.h	/^    const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2RevoluteJoint
GetLocalAnchorB	Dynamics/Joints/b2RopeJoint.h	/^    const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2RopeJoint
GetLocalAnchorB	Dynamics/Joints/b2WeldJoint.h	/^    const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2WeldJoint
GetLocalAnchorB	Dynamics/Joints/b2WheelJoint.h	/^    const b2Vec2& GetLocalAnchorB() const  { return m_localAnchorB; }$/;"	f	class:b2WheelJoint
GetLocalAxisA	Dynamics/Joints/b2PrismaticJoint.h	/^    const b2Vec2& GetLocalAxisA() const { return m_localXAxisA; }$/;"	f	class:b2PrismaticJoint
GetLocalAxisA	Dynamics/Joints/b2WheelJoint.h	/^    const b2Vec2& GetLocalAxisA() const { return m_localXAxisA; }$/;"	f	class:b2WheelJoint
GetLocalCenter	Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetLocalCenter() const$/;"	f	class:b2Body
GetLocalPoint	Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLocalPoint(const b2Vec2& worldPoint) const$/;"	f	class:b2Body
GetLocalVector	Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetLocalVector(const b2Vec2& worldVector) const$/;"	f	class:b2Body
GetLowerLimit	Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetLowerLimit() const$/;"	f	class:b2PrismaticJoint
GetLowerLimit	Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetLowerLimit() const$/;"	f	class:b2RevoluteJoint
GetManifold	Dynamics/Contacts/b2Contact.h	/^inline b2Manifold* b2Contact::GetManifold()$/;"	f	class:b2Contact
GetManifold	Dynamics/Contacts/b2Contact.h	/^inline const b2Manifold* b2Contact::GetManifold() const$/;"	f	class:b2Contact
GetMass	Dynamics/b2Body.h	/^inline float32 b2Body::GetMass() const$/;"	f	class:b2Body
GetMassData	Dynamics/b2Body.h	/^inline void b2Body::GetMassData(b2MassData* data) const$/;"	f	class:b2Body
GetMassData	Dynamics/b2Fixture.h	/^inline void b2Fixture::GetMassData(b2MassData* massData) const$/;"	f	class:b2Fixture
GetMaxAllocation	Common/b2StackAllocator.cpp	/^int32 b2StackAllocator::GetMaxAllocation() const$/;"	f	class:b2StackAllocator
GetMaxBalance	Collision/b2DynamicTree.cpp	/^int32 b2DynamicTree::GetMaxBalance() const$/;"	f	class:b2DynamicTree
GetMaxForce	Dynamics/Joints/b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetMaxForce() const$/;"	f	class:b2FrictionJoint
GetMaxForce	Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetMaxForce() const$/;"	f	class:b2MouseJoint
GetMaxLength	Dynamics/Joints/b2RopeJoint.cpp	/^float32 b2RopeJoint::GetMaxLength() const$/;"	f	class:b2RopeJoint
GetMaxMotorForce	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 GetMaxMotorForce() const { return m_maxMotorForce; }$/;"	f	class:b2PrismaticJoint
GetMaxMotorTorque	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 GetMaxMotorTorque() const { return m_maxMotorTorque; }$/;"	f	class:b2RevoluteJoint
GetMaxMotorTorque	Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetMaxMotorTorque() const$/;"	f	class:b2WheelJoint
GetMaxTorque	Dynamics/Joints/b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetMaxTorque() const$/;"	f	class:b2FrictionJoint
GetMetric	Collision/b2Distance.cpp	/^    float32 GetMetric() const$/;"	f	struct:b2Simplex
GetMilliseconds	Common/b2Timer.cpp	/^float32 b2Timer::GetMilliseconds() const$/;"	f	class:b2Timer
GetMotorForce	Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetMotorForce(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint
GetMotorSpeed	Dynamics/Joints/b2PrismaticJoint.h	/^inline float32 b2PrismaticJoint::GetMotorSpeed() const$/;"	f	class:b2PrismaticJoint
GetMotorSpeed	Dynamics/Joints/b2RevoluteJoint.h	/^inline float32 b2RevoluteJoint::GetMotorSpeed() const$/;"	f	class:b2RevoluteJoint
GetMotorSpeed	Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetMotorSpeed() const$/;"	f	class:b2WheelJoint
GetMotorTorque	Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetMotorTorque(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint
GetMotorTorque	Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetMotorTorque(float32 inv_dt) const$/;"	f	class:b2WheelJoint
GetNext	Dynamics/Contacts/b2Contact.h	/^inline b2Contact* b2Contact::GetNext()$/;"	f	class:b2Contact
GetNext	Dynamics/Contacts/b2Contact.h	/^inline const b2Contact* b2Contact::GetNext() const$/;"	f	class:b2Contact
GetNext	Dynamics/Joints/b2Joint.h	/^inline b2Joint* b2Joint::GetNext()$/;"	f	class:b2Joint
GetNext	Dynamics/Joints/b2Joint.h	/^inline const b2Joint* b2Joint::GetNext() const$/;"	f	class:b2Joint
GetNext	Dynamics/b2Body.h	/^inline b2Body* b2Body::GetNext()$/;"	f	class:b2Body
GetNext	Dynamics/b2Body.h	/^inline const b2Body* b2Body::GetNext() const$/;"	f	class:b2Body
GetNext	Dynamics/b2Fixture.h	/^inline b2Fixture* b2Fixture::GetNext()$/;"	f	class:b2Fixture
GetNext	Dynamics/b2Fixture.h	/^inline const b2Fixture* b2Fixture::GetNext() const$/;"	f	class:b2Fixture
GetPerimeter	Collision/b2Collision.h	/^    float32 GetPerimeter() const$/;"	f	struct:b2AABB
GetPosition	Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetPosition() const$/;"	f	class:b2Body
GetProfile	Dynamics/b2World.h	/^inline const b2Profile& b2World::GetProfile() const$/;"	f	class:b2World
GetProxyCount	Collision/b2BroadPhase.h	/^inline int32 b2BroadPhase::GetProxyCount() const$/;"	f	class:b2BroadPhase
GetProxyCount	Dynamics/b2World.cpp	/^int32 b2World::GetProxyCount() const$/;"	f	class:b2World
GetRatio	Dynamics/Joints/b2GearJoint.cpp	/^float32 b2GearJoint::GetRatio() const$/;"	f	class:b2GearJoint
GetRatio	Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetRatio() const$/;"	f	class:b2PulleyJoint
GetReactionForce	Dynamics/Joints/b2DistanceJoint.cpp	/^b2Vec2 b2DistanceJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2DistanceJoint
GetReactionForce	Dynamics/Joints/b2FrictionJoint.cpp	/^b2Vec2 b2FrictionJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2FrictionJoint
GetReactionForce	Dynamics/Joints/b2GearJoint.cpp	/^b2Vec2 b2GearJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2GearJoint
GetReactionForce	Dynamics/Joints/b2MouseJoint.cpp	/^b2Vec2 b2MouseJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2MouseJoint
GetReactionForce	Dynamics/Joints/b2PrismaticJoint.cpp	/^b2Vec2 b2PrismaticJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint
GetReactionForce	Dynamics/Joints/b2PulleyJoint.cpp	/^b2Vec2 b2PulleyJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2PulleyJoint
GetReactionForce	Dynamics/Joints/b2RevoluteJoint.cpp	/^b2Vec2 b2RevoluteJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint
GetReactionForce	Dynamics/Joints/b2RopeJoint.cpp	/^b2Vec2 b2RopeJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2RopeJoint
GetReactionForce	Dynamics/Joints/b2WeldJoint.cpp	/^b2Vec2 b2WeldJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2WeldJoint
GetReactionForce	Dynamics/Joints/b2WheelJoint.cpp	/^b2Vec2 b2WheelJoint::GetReactionForce(float32 inv_dt) const$/;"	f	class:b2WheelJoint
GetReactionTorque	Dynamics/Joints/b2DistanceJoint.cpp	/^float32 b2DistanceJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2DistanceJoint
GetReactionTorque	Dynamics/Joints/b2FrictionJoint.cpp	/^float32 b2FrictionJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2FrictionJoint
GetReactionTorque	Dynamics/Joints/b2GearJoint.cpp	/^float32 b2GearJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2GearJoint
GetReactionTorque	Dynamics/Joints/b2MouseJoint.cpp	/^float32 b2MouseJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2MouseJoint
GetReactionTorque	Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2PrismaticJoint
GetReactionTorque	Dynamics/Joints/b2PulleyJoint.cpp	/^float32 b2PulleyJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2PulleyJoint
GetReactionTorque	Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2RevoluteJoint
GetReactionTorque	Dynamics/Joints/b2RopeJoint.cpp	/^float32 b2RopeJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2RopeJoint
GetReactionTorque	Dynamics/Joints/b2WeldJoint.cpp	/^float32 b2WeldJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2WeldJoint
GetReactionTorque	Dynamics/Joints/b2WheelJoint.cpp	/^float32 b2WheelJoint::GetReactionTorque(float32 inv_dt) const$/;"	f	class:b2WheelJoint
GetReferenceAngle	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2PrismaticJoint
GetReferenceAngle	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2RevoluteJoint
GetReferenceAngle	Dynamics/Joints/b2WeldJoint.h	/^    float32 GetReferenceAngle() const { return m_referenceAngle; }$/;"	f	class:b2WeldJoint
GetRestitution	Dynamics/Contacts/b2Contact.h	/^inline float32 b2Contact::GetRestitution() const$/;"	f	class:b2Contact
GetRestitution	Dynamics/b2Fixture.h	/^inline float32 b2Fixture::GetRestitution() const$/;"	f	class:b2Fixture
GetSearchDirection	Collision/b2Distance.cpp	/^    b2Vec2 GetSearchDirection() const$/;"	f	struct:b2Simplex
GetShape	Dynamics/b2Fixture.h	/^inline b2Shape* b2Fixture::GetShape()$/;"	f	class:b2Fixture
GetShape	Dynamics/b2Fixture.h	/^inline const b2Shape* b2Fixture::GetShape() const$/;"	f	class:b2Fixture
GetSpringDampingRatio	Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetSpringDampingRatio() const$/;"	f	class:b2WheelJoint
GetSpringFrequencyHz	Dynamics/Joints/b2WheelJoint.h	/^inline float32 b2WheelJoint::GetSpringFrequencyHz() const$/;"	f	class:b2WheelJoint
GetSubStepping	Dynamics/b2World.h	/^    bool GetSubStepping() const { return m_subStepping; }$/;"	f	class:b2World
GetSupport	Collision/Shapes/b2CircleShape.h	/^inline int32 b2CircleShape::GetSupport(const b2Vec2 &d) const$/;"	f	class:b2CircleShape
GetSupport	Collision/b2Distance.h	/^inline int32 b2DistanceProxy::GetSupport(const b2Vec2& d) const$/;"	f	class:b2DistanceProxy
GetSupportVertex	Collision/Shapes/b2CircleShape.h	/^inline const b2Vec2& b2CircleShape::GetSupportVertex(const b2Vec2 &d) const$/;"	f	class:b2CircleShape
GetSupportVertex	Collision/b2Distance.h	/^inline const b2Vec2& b2DistanceProxy::GetSupportVertex(const b2Vec2& d) const$/;"	f	class:b2DistanceProxy
GetSymInverse33	Common/b2Math.cpp	/^void b2Mat33::GetSymInverse33(b2Mat33* M) const$/;"	f	class:b2Mat33
GetTarget	Dynamics/Joints/b2MouseJoint.cpp	/^const b2Vec2& b2MouseJoint::GetTarget() const$/;"	f	class:b2MouseJoint
GetTransform	Common/b2Math.h	/^inline void b2Sweep::GetTransform(b2Transform* xf, float32 beta) const$/;"	f	class:b2Sweep
GetTransform	Dynamics/b2Body.h	/^inline const b2Transform& b2Body::GetTransform() const$/;"	f	class:b2Body
GetTreeBalance	Collision/b2BroadPhase.h	/^inline int32 b2BroadPhase::GetTreeBalance() const$/;"	f	class:b2BroadPhase
GetTreeBalance	Dynamics/b2World.cpp	/^int32 b2World::GetTreeBalance() const$/;"	f	class:b2World
GetTreeHeight	Collision/b2BroadPhase.h	/^inline int32 b2BroadPhase::GetTreeHeight() const$/;"	f	class:b2BroadPhase
GetTreeHeight	Dynamics/b2World.cpp	/^int32 b2World::GetTreeHeight() const$/;"	f	class:b2World
GetTreeQuality	Collision/b2BroadPhase.h	/^inline float32 b2BroadPhase::GetTreeQuality() const$/;"	f	class:b2BroadPhase
GetTreeQuality	Dynamics/b2World.cpp	/^float32 b2World::GetTreeQuality() const$/;"	f	class:b2World
GetType	Collision/Shapes/b2Shape.h	/^inline b2Shape::Type b2Shape::GetType() const$/;"	f	class:b2Shape
GetType	Dynamics/Joints/b2Joint.h	/^inline b2JointType b2Joint::GetType() const$/;"	f	class:b2Joint
GetType	Dynamics/b2Body.h	/^inline b2BodyType b2Body::GetType() const$/;"	f	class:b2Body
GetType	Dynamics/b2Fixture.h	/^inline b2Shape::Type b2Fixture::GetType() const$/;"	f	class:b2Fixture
GetUpperLimit	Dynamics/Joints/b2PrismaticJoint.cpp	/^float32 b2PrismaticJoint::GetUpperLimit() const$/;"	f	class:b2PrismaticJoint
GetUpperLimit	Dynamics/Joints/b2RevoluteJoint.cpp	/^float32 b2RevoluteJoint::GetUpperLimit() const$/;"	f	class:b2RevoluteJoint
GetUserData	Collision/b2BroadPhase.h	/^inline void* b2BroadPhase::GetUserData(int32 proxyId) const$/;"	f	class:b2BroadPhase
GetUserData	Collision/b2DynamicTree.h	/^inline void* b2DynamicTree::GetUserData(int32 proxyId) const$/;"	f	class:b2DynamicTree
GetUserData	Dynamics/Joints/b2Joint.h	/^inline void* b2Joint::GetUserData() const$/;"	f	class:b2Joint
GetUserData	Dynamics/b2Body.h	/^inline void* b2Body::GetUserData() const$/;"	f	class:b2Body
GetUserData	Dynamics/b2Fixture.h	/^inline void* b2Fixture::GetUserData() const$/;"	f	class:b2Fixture
GetVertex	Collision/Shapes/b2CircleShape.h	/^inline const b2Vec2& b2CircleShape::GetVertex(int32 index) const$/;"	f	class:b2CircleShape
GetVertex	Collision/Shapes/b2PolygonShape.h	/^inline const b2Vec2& b2PolygonShape::GetVertex(int32 index) const$/;"	f	class:b2PolygonShape
GetVertex	Collision/b2Distance.h	/^inline const b2Vec2& b2DistanceProxy::GetVertex(int32 index) const$/;"	f	class:b2DistanceProxy
GetVertexCount	Collision/Shapes/b2CircleShape.h	/^    int32 GetVertexCount() const { return 1; }$/;"	f	class:b2CircleShape
GetVertexCount	Collision/Shapes/b2PolygonShape.h	/^    int32 GetVertexCount() const { return m_vertexCount; }$/;"	f	class:b2PolygonShape
GetVertexCount	Collision/b2Distance.h	/^inline int32 b2DistanceProxy::GetVertexCount() const$/;"	f	class:b2DistanceProxy
GetVertexCount	Rope/b2Rope.h	/^    int32 GetVertexCount() const$/;"	f	class:b2Rope
GetVertices	Rope/b2Rope.h	/^    const b2Vec2* GetVertices() const$/;"	f	class:b2Rope
GetWarmStarting	Dynamics/b2World.h	/^    bool GetWarmStarting() const { return m_warmStarting; }$/;"	f	class:b2World
GetWitnessPoints	Collision/b2Distance.cpp	/^    void GetWitnessPoints(b2Vec2* pA, b2Vec2* pB) const$/;"	f	struct:b2Simplex
GetWorld	Dynamics/b2Body.h	/^inline b2World* b2Body::GetWorld()$/;"	f	class:b2Body
GetWorld	Dynamics/b2Body.h	/^inline const b2World* b2Body::GetWorld() const$/;"	f	class:b2Body
GetWorldCenter	Dynamics/b2Body.h	/^inline const b2Vec2& b2Body::GetWorldCenter() const$/;"	f	class:b2Body
GetWorldManifold	Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::GetWorldManifold(b2WorldManifold* worldManifold) const$/;"	f	class:b2Contact
GetWorldPoint	Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetWorldPoint(const b2Vec2& localPoint) const$/;"	f	class:b2Body
GetWorldVector	Dynamics/b2Body.h	/^inline b2Vec2 b2Body::GetWorldVector(const b2Vec2& localVector) const$/;"	f	class:b2Body
GetXAxis	Common/b2Math.h	/^    b2Vec2 GetXAxis() const$/;"	f	struct:b2Rot
GetYAxis	Common/b2Math.h	/^    b2Vec2 GetYAxis() const$/;"	f	struct:b2Rot
I	Collision/Shapes/b2Shape.h	/^    float32 I;$/;"	m	struct:b2MassData
InitVelocityConstraints	Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint
InitVelocityConstraints	Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint
InitVelocityConstraints	Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint
InitVelocityConstraints	Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint
InitVelocityConstraints	Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint
InitVelocityConstraints	Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint
InitVelocityConstraints	Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint
InitVelocityConstraints	Dynamics/Joints/b2RopeJoint.cpp	/^void b2RopeJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint
InitVelocityConstraints	Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint
InitVelocityConstraints	Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::InitVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint
Initialize	Collision/b2Collision.cpp	/^void b2WorldManifold::Initialize(const b2Manifold* manifold,$/;"	f	class:b2WorldManifold
Initialize	Collision/b2TimeOfImpact.cpp	/^    float32 Initialize(const b2SimplexCache* cache,$/;"	f	struct:b2SeparationFunction
Initialize	Dynamics/Contacts/b2ContactSolver.cpp	/^    void Initialize(b2ContactPositionConstraint* pc, const b2Transform& xfA, const b2Transform& xfB, int32 index)$/;"	f	struct:b2PositionSolverManifold
Initialize	Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJointDef::Initialize(b2Body* b1, b2Body* b2,$/;"	f	class:b2DistanceJointDef
Initialize	Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2FrictionJointDef
Initialize	Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)$/;"	f	class:b2PrismaticJointDef
Initialize	Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJointDef::Initialize(b2Body* bA, b2Body* bB,$/;"	f	class:b2PulleyJointDef
Initialize	Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2RevoluteJointDef
Initialize	Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor)$/;"	f	class:b2WeldJointDef
Initialize	Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJointDef::Initialize(b2Body* bA, b2Body* bB, const b2Vec2& anchor, const b2Vec2& axis)$/;"	f	class:b2WheelJointDef
Initialize	Rope/b2Rope.cpp	/^void b2Rope::Initialize(const b2RopeDef* def)$/;"	f	class:b2Rope
InitializeRegisters	Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::InitializeRegisters()$/;"	f	class:b2Contact
InitializeVelocityConstraints	Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::InitializeVelocityConstraints()$/;"	f	class:b2ContactSolver
InsertLeaf	Collision/b2DynamicTree.cpp	/^void b2DynamicTree::InsertLeaf(int32 leaf)$/;"	f	class:b2DynamicTree
IsActive	Dynamics/Joints/b2Joint.cpp	/^bool b2Joint::IsActive() const$/;"	f	class:b2Joint
IsActive	Dynamics/b2Body.h	/^inline bool b2Body::IsActive() const$/;"	f	class:b2Body
IsAwake	Dynamics/b2Body.h	/^inline bool b2Body::IsAwake() const$/;"	f	class:b2Body
IsBullet	Dynamics/b2Body.h	/^inline bool b2Body::IsBullet() const$/;"	f	class:b2Body
IsEnabled	Dynamics/Contacts/b2Contact.h	/^inline bool b2Contact::IsEnabled() const$/;"	f	class:b2Contact
IsFixedRotation	Dynamics/b2Body.h	/^inline bool b2Body::IsFixedRotation() const$/;"	f	class:b2Body
IsLeaf	Collision/b2DynamicTree.h	/^    bool IsLeaf() const$/;"	f	struct:b2TreeNode
IsLimitEnabled	Dynamics/Joints/b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::IsLimitEnabled() const$/;"	f	class:b2PrismaticJoint
IsLimitEnabled	Dynamics/Joints/b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::IsLimitEnabled() const$/;"	f	class:b2RevoluteJoint
IsLocked	Dynamics/b2World.h	/^inline bool b2World::IsLocked() const$/;"	f	class:b2World
IsMotorEnabled	Dynamics/Joints/b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::IsMotorEnabled() const$/;"	f	class:b2PrismaticJoint
IsMotorEnabled	Dynamics/Joints/b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::IsMotorEnabled() const$/;"	f	class:b2RevoluteJoint
IsMotorEnabled	Dynamics/Joints/b2WheelJoint.cpp	/^bool b2WheelJoint::IsMotorEnabled() const$/;"	f	class:b2WheelJoint
IsSensor	Dynamics/b2Fixture.h	/^inline bool b2Fixture::IsSensor() const$/;"	f	class:b2Fixture
IsSleepingAllowed	Dynamics/b2Body.h	/^inline bool b2Body::IsSleepingAllowed() const$/;"	f	class:b2Body
IsTouching	Dynamics/Contacts/b2Contact.h	/^inline bool b2Contact::IsTouching() const$/;"	f	class:b2Contact
IsValid	Collision/b2Collision.h	/^inline bool b2AABB::IsValid() const$/;"	f	class:b2AABB
IsValid	Common/b2Math.h	/^    bool IsValid() const$/;"	f	struct:b2Vec2
K	Dynamics/Contacts/b2ContactSolver.h	/^    b2Mat22 K;$/;"	m	struct:b2ContactVelocityConstraint
Length	Common/b2Math.h	/^    float32 Length() const$/;"	f	struct:b2Vec2
LengthSquared	Common/b2Math.h	/^    float32 LengthSquared() const$/;"	f	struct:b2Vec2
MoveProxy	Collision/b2BroadPhase.cpp	/^void b2BroadPhase::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)$/;"	f	class:b2BroadPhase
MoveProxy	Collision/b2DynamicTree.cpp	/^bool b2DynamicTree::MoveProxy(int32 proxyId, const b2AABB& aabb, const b2Vec2& displacement)$/;"	f	class:b2DynamicTree
Normalize	Common/b2Math.h	/^    float32 Normalize()$/;"	f	struct:b2Vec2
Normalize	Common/b2Math.h	/^inline void b2Sweep::Normalize()$/;"	f	class:b2Sweep
Pop	Common/b2GrowableStack.h	/^    T Pop()$/;"	f	class:b2GrowableStack
PostSolve	Dynamics/b2WorldCallbacks.h	/^    virtual void PostSolve(b2Contact* contact, const b2ContactImpulse* impulse)$/;"	f	class:b2ContactListener
PreSolve	Dynamics/b2WorldCallbacks.h	/^    virtual void PreSolve(b2Contact* contact, const b2Manifold* oldManifold)$/;"	f	class:b2ContactListener
Push	Common/b2GrowableStack.h	/^    void Push(const T& element)$/;"	f	class:b2GrowableStack
Query	Collision/b2BroadPhase.h	/^inline void b2BroadPhase::Query(T* callback, const b2AABB& aabb) const$/;"	f	class:b2BroadPhase
Query	Collision/b2DynamicTree.h	/^inline void b2DynamicTree::Query(T* callback, const b2AABB& aabb) const$/;"	f	class:b2DynamicTree
QueryAABB	Dynamics/b2World.cpp	/^void b2World::QueryAABB(b2QueryCallback* callback, const b2AABB& aabb) const$/;"	f	class:b2World
QueryCallback	Collision/b2BroadPhase.cpp	/^bool b2BroadPhase::QueryCallback(int32 proxyId)$/;"	f	class:b2BroadPhase
QueryCallback	Dynamics/b2World.cpp	/^    bool QueryCallback(int32 proxyId)$/;"	f	struct:b2WorldQueryWrapper
RayCast	Collision/Shapes/b2ChainShape.cpp	/^bool b2ChainShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2ChainShape
RayCast	Collision/Shapes/b2CircleShape.cpp	/^bool b2CircleShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2CircleShape
RayCast	Collision/Shapes/b2EdgeShape.cpp	/^bool b2EdgeShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2EdgeShape
RayCast	Collision/Shapes/b2PolygonShape.cpp	/^bool b2PolygonShape::RayCast(b2RayCastOutput* output, const b2RayCastInput& input,$/;"	f	class:b2PolygonShape
RayCast	Collision/b2BroadPhase.h	/^inline void b2BroadPhase::RayCast(T* callback, const b2RayCastInput& input) const$/;"	f	class:b2BroadPhase
RayCast	Collision/b2Collision.cpp	/^bool b2AABB::RayCast(b2RayCastOutput* output, const b2RayCastInput& input) const$/;"	f	class:b2AABB
RayCast	Collision/b2DynamicTree.h	/^inline void b2DynamicTree::RayCast(T* callback, const b2RayCastInput& input) const$/;"	f	class:b2DynamicTree
RayCast	Dynamics/b2Fixture.h	/^inline bool b2Fixture::RayCast(b2RayCastOutput* output, const b2RayCastInput& input, int32 childIndex) const$/;"	f	class:b2Fixture
RayCast	Dynamics/b2World.cpp	/^void b2World::RayCast(b2RayCastCallback* callback, const b2Vec2& point1, const b2Vec2& point2) const$/;"	f	class:b2World
RayCastCallback	Dynamics/b2World.cpp	/^    float32 RayCastCallback(const b2RayCastInput& input, int32 proxyId)$/;"	f	struct:b2WorldRayCastWrapper
ReadCache	Collision/b2Distance.cpp	/^    void ReadCache(    const b2SimplexCache* cache,$/;"	f	struct:b2Simplex
RebuildBottomUp	Collision/b2DynamicTree.cpp	/^void b2DynamicTree::RebuildBottomUp()$/;"	f	class:b2DynamicTree
Refilter	Dynamics/b2Fixture.cpp	/^void b2Fixture::Refilter()$/;"	f	class:b2Fixture
RemoveLeaf	Collision/b2DynamicTree.cpp	/^void b2DynamicTree::RemoveLeaf(int32 leaf)$/;"	f	class:b2DynamicTree
Report	Dynamics/b2Island.cpp	/^void b2Island::Report(const b2ContactVelocityConstraint* constraints)$/;"	f	class:b2Island
Reset	Common/b2Timer.cpp	/^void b2Timer::Reset()$/;"	f	class:b2Timer
ResetFriction	Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::ResetFriction()$/;"	f	class:b2Contact
ResetMassData	Dynamics/b2Body.cpp	/^void b2Body::ResetMassData()$/;"	f	class:b2Body
ResetRestitution	Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::ResetRestitution()$/;"	f	class:b2Contact
Set	Collision/Shapes/b2EdgeShape.cpp	/^void b2EdgeShape::Set(const b2Vec2& v1, const b2Vec2& v2)$/;"	f	class:b2EdgeShape
Set	Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::Set(const b2Vec2* vertices, int32 count)$/;"	f	class:b2PolygonShape
Set	Collision/b2Distance.cpp	/^void b2DistanceProxy::Set(const b2Shape* shape, int32 index)$/;"	f	class:b2DistanceProxy
Set	Common/b2Draw.h	/^    void Set(float32 ri, float32 gi, float32 bi) { r = ri; g = gi; b = bi; }$/;"	f	struct:b2Color
Set	Common/b2Math.h	/^    void Set(const b2Vec2& c1, const b2Vec2& c2)$/;"	f	struct:b2Mat22
Set	Common/b2Math.h	/^    void Set(const b2Vec2& position, float32 angle)$/;"	f	struct:b2Transform
Set	Common/b2Math.h	/^    void Set(float32 angle)$/;"	f	struct:b2Rot
Set	Common/b2Math.h	/^    void Set(float32 x_, float32 y_) { x = x_; y = y_; }$/;"	f	struct:b2Vec2
Set	Common/b2Math.h	/^    void Set(float32 x_, float32 y_, float32 z_) { x = x_; y = y_; z = z_; }$/;"	f	struct:b2Vec3
SetActive	Dynamics/b2Body.cpp	/^void b2Body::SetActive(bool flag)$/;"	f	class:b2Body
SetAllowSleeping	Dynamics/b2World.cpp	/^void b2World::SetAllowSleeping(bool flag)$/;"	f	class:b2World
SetAngle	Rope/b2Rope.cpp	/^void b2Rope::SetAngle(float32 angle)$/;"	f	class:b2Rope
SetAngularDamping	Dynamics/b2Body.h	/^inline void b2Body::SetAngularDamping(float32 angularDamping)$/;"	f	class:b2Body
SetAngularVelocity	Dynamics/b2Body.h	/^inline void b2Body::SetAngularVelocity(float32 w)$/;"	f	class:b2Body
SetAsBox	Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::SetAsBox(float32 hx, float32 hy)$/;"	f	class:b2PolygonShape
SetAsBox	Collision/Shapes/b2PolygonShape.cpp	/^void b2PolygonShape::SetAsBox(float32 hx, float32 hy, const b2Vec2& center, float32 angle)$/;"	f	class:b2PolygonShape
SetAutoClearForces	Dynamics/b2World.h	/^inline void b2World::SetAutoClearForces(bool flag)$/;"	f	class:b2World
SetAwake	Dynamics/b2Body.h	/^inline void b2Body::SetAwake(bool flag)$/;"	f	class:b2Body
SetBullet	Dynamics/b2Body.h	/^inline void b2Body::SetBullet(bool flag)$/;"	f	class:b2Body
SetContactFilter	Dynamics/b2World.cpp	/^void b2World::SetContactFilter(b2ContactFilter* filter)$/;"	f	class:b2World
SetContactListener	Dynamics/b2World.cpp	/^void b2World::SetContactListener(b2ContactListener* listener)$/;"	f	class:b2World
SetContinuousPhysics	Dynamics/b2World.h	/^    void SetContinuousPhysics(bool flag) { m_continuousPhysics = flag; }$/;"	f	class:b2World
SetDampingRatio	Dynamics/Joints/b2DistanceJoint.h	/^inline void b2DistanceJoint::SetDampingRatio(float32 ratio)$/;"	f	class:b2DistanceJoint
SetDampingRatio	Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetDampingRatio(float32 ratio)$/;"	f	class:b2MouseJoint
SetDampingRatio	Dynamics/Joints/b2WeldJoint.h	/^    void SetDampingRatio(float32 ratio) { m_dampingRatio = ratio; }$/;"	f	class:b2WeldJoint
SetDebugDraw	Dynamics/b2World.cpp	/^void b2World::SetDebugDraw(b2Draw* debugDraw)$/;"	f	class:b2World
SetDensity	Dynamics/b2Fixture.h	/^inline void b2Fixture::SetDensity(float32 density)$/;"	f	class:b2Fixture
SetDestructionListener	Dynamics/b2World.cpp	/^void b2World::SetDestructionListener(b2DestructionListener* listener)$/;"	f	class:b2World
SetEnabled	Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetEnabled(bool flag)$/;"	f	class:b2Contact
SetFilterData	Dynamics/b2Fixture.cpp	/^void b2Fixture::SetFilterData(const b2Filter& filter)$/;"	f	class:b2Fixture
SetFixedRotation	Dynamics/b2Body.h	/^inline void b2Body::SetFixedRotation(bool flag)$/;"	f	class:b2Body
SetFlags	Common/b2Draw.cpp	/^void b2Draw::SetFlags(uint32 flags)$/;"	f	class:b2Draw
SetFrequency	Dynamics/Joints/b2DistanceJoint.h	/^inline void b2DistanceJoint::SetFrequency(float32 hz)$/;"	f	class:b2DistanceJoint
SetFrequency	Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetFrequency(float32 hz)$/;"	f	class:b2MouseJoint
SetFrequency	Dynamics/Joints/b2WeldJoint.h	/^    void SetFrequency(float32 hz) { m_frequencyHz = hz; }$/;"	f	class:b2WeldJoint
SetFriction	Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetFriction(float32 friction)$/;"	f	class:b2Contact
SetFriction	Dynamics/b2Fixture.h	/^inline void b2Fixture::SetFriction(float32 friction)$/;"	f	class:b2Fixture
SetGravity	Dynamics/b2World.h	/^inline void b2World::SetGravity(const b2Vec2& gravity)$/;"	f	class:b2World
SetGravityScale	Dynamics/b2Body.h	/^inline void b2Body::SetGravityScale(float32 scale)$/;"	f	class:b2Body
SetIdentity	Common/b2Math.h	/^    void SetIdentity()$/;"	f	struct:b2Mat22
SetIdentity	Common/b2Math.h	/^    void SetIdentity()$/;"	f	struct:b2Rot
SetIdentity	Common/b2Math.h	/^    void SetIdentity()$/;"	f	struct:b2Transform
SetLength	Dynamics/Joints/b2DistanceJoint.h	/^inline void b2DistanceJoint::SetLength(float32 length)$/;"	f	class:b2DistanceJoint
SetLimits	Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetLimits(float32 lower, float32 upper)$/;"	f	class:b2PrismaticJoint
SetLimits	Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetLimits(float32 lower, float32 upper)$/;"	f	class:b2RevoluteJoint
SetLinearDamping	Dynamics/b2Body.h	/^inline void b2Body::SetLinearDamping(float32 linearDamping)$/;"	f	class:b2Body
SetLinearVelocity	Dynamics/b2Body.h	/^inline void b2Body::SetLinearVelocity(const b2Vec2& v)$/;"	f	class:b2Body
SetMassData	Dynamics/b2Body.cpp	/^void b2Body::SetMassData(const b2MassData* massData)$/;"	f	class:b2Body
SetMaxForce	Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::SetMaxForce(float32 force)$/;"	f	class:b2FrictionJoint
SetMaxForce	Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetMaxForce(float32 force)$/;"	f	class:b2MouseJoint
SetMaxLength	Dynamics/Joints/b2RopeJoint.h	/^    void SetMaxLength(float32 length) { m_maxLength = length; }$/;"	f	class:b2RopeJoint
SetMaxMotorForce	Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetMaxMotorForce(float32 force)$/;"	f	class:b2PrismaticJoint
SetMaxMotorTorque	Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetMaxMotorTorque(float32 torque)$/;"	f	class:b2RevoluteJoint
SetMaxMotorTorque	Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::SetMaxMotorTorque(float32 torque)$/;"	f	class:b2WheelJoint
SetMaxTorque	Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::SetMaxTorque(float32 torque)$/;"	f	class:b2FrictionJoint
SetMotorSpeed	Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2PrismaticJoint
SetMotorSpeed	Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2RevoluteJoint
SetMotorSpeed	Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::SetMotorSpeed(float32 speed)$/;"	f	class:b2WheelJoint
SetNextVertex	Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::SetNextVertex(const b2Vec2& nextVertex)$/;"	f	class:b2ChainShape
SetPrevVertex	Collision/Shapes/b2ChainShape.cpp	/^void b2ChainShape::SetPrevVertex(const b2Vec2& prevVertex)$/;"	f	class:b2ChainShape
SetRatio	Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::SetRatio(float32 ratio)$/;"	f	class:b2GearJoint
SetRestitution	Dynamics/Contacts/b2Contact.h	/^inline void b2Contact::SetRestitution(float32 restitution)$/;"	f	class:b2Contact
SetRestitution	Dynamics/b2Fixture.h	/^inline void b2Fixture::SetRestitution(float32 restitution)$/;"	f	class:b2Fixture
SetSensor	Dynamics/b2Fixture.cpp	/^void b2Fixture::SetSensor(bool sensor)$/;"	f	class:b2Fixture
SetSleepingAllowed	Dynamics/b2Body.h	/^inline void b2Body::SetSleepingAllowed(bool flag)$/;"	f	class:b2Body
SetSpringDampingRatio	Dynamics/Joints/b2WheelJoint.h	/^inline void b2WheelJoint::SetSpringDampingRatio(float32 ratio)$/;"	f	class:b2WheelJoint
SetSpringFrequencyHz	Dynamics/Joints/b2WheelJoint.h	/^inline void b2WheelJoint::SetSpringFrequencyHz(float32 hz)$/;"	f	class:b2WheelJoint
SetSubStepping	Dynamics/b2World.h	/^    void SetSubStepping(bool flag) { m_subStepping = flag; }$/;"	f	class:b2World
SetTarget	Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SetTarget(const b2Vec2& target)$/;"	f	class:b2MouseJoint
SetTransform	Dynamics/b2Body.cpp	/^void b2Body::SetTransform(const b2Vec2& position, float32 angle)$/;"	f	class:b2Body
SetType	Dynamics/b2Body.cpp	/^void b2Body::SetType(b2BodyType type)$/;"	f	class:b2Body
SetUserData	Dynamics/Joints/b2Joint.h	/^inline void b2Joint::SetUserData(void* data)$/;"	f	class:b2Joint
SetUserData	Dynamics/b2Body.h	/^inline void b2Body::SetUserData(void* data)$/;"	f	class:b2Body
SetUserData	Dynamics/b2Fixture.h	/^inline void b2Fixture::SetUserData(void* data)$/;"	f	class:b2Fixture
SetWarmStarting	Dynamics/b2World.h	/^    void SetWarmStarting(bool flag) { m_warmStarting = flag; }$/;"	f	class:b2World
SetZero	Common/b2Math.h	/^    void SetZero() { x = 0.0f; y = 0.0f; z = 0.0f; }$/;"	f	struct:b2Vec3
SetZero	Common/b2Math.h	/^    void SetZero() { x = 0.0f; y = 0.0f; }$/;"	f	struct:b2Vec2
SetZero	Common/b2Math.h	/^    void SetZero()$/;"	f	struct:b2Mat22
SetZero	Common/b2Math.h	/^    void SetZero()$/;"	f	struct:b2Mat33
ShouldCollide	Dynamics/b2Body.cpp	/^bool b2Body::ShouldCollide(const b2Body* other) const$/;"	f	class:b2Body
ShouldCollide	Dynamics/b2WorldCallbacks.cpp	/^bool b2ContactFilter::ShouldCollide(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2ContactFilter
Skew	Common/b2Math.h	/^    b2Vec2 Skew() const$/;"	f	struct:b2Vec2
Solve	Common/b2Math.h	/^    b2Vec2 Solve(const b2Vec2& b) const$/;"	f	struct:b2Mat22
Solve	Dynamics/b2Island.cpp	/^void b2Island::Solve(b2Profile* profile, const b2TimeStep& step, const b2Vec2& gravity, bool allowSleep)$/;"	f	class:b2Island
Solve	Dynamics/b2World.cpp	/^void b2World::Solve(const b2TimeStep& step)$/;"	f	class:b2World
Solve2	Collision/b2Distance.cpp	/^void b2Simplex::Solve2()$/;"	f	class:b2Simplex
Solve22	Common/b2Math.cpp	/^b2Vec2 b2Mat33::Solve22(const b2Vec2& b) const$/;"	f	class:b2Mat33
Solve3	Collision/b2Distance.cpp	/^void b2Simplex::Solve3()$/;"	f	class:b2Simplex
Solve33	Common/b2Math.cpp	/^b2Vec3 b2Mat33::Solve33(const b2Vec3& b) const$/;"	f	class:b2Mat33
SolveC2	Rope/b2Rope.cpp	/^void b2Rope::SolveC2()$/;"	f	class:b2Rope
SolveC3	Rope/b2Rope.cpp	/^void b2Rope::SolveC3()$/;"	f	class:b2Rope
SolvePositionConstraints	Dynamics/Contacts/b2ContactSolver.cpp	/^bool b2ContactSolver::SolvePositionConstraints()$/;"	f	class:b2ContactSolver
SolvePositionConstraints	Dynamics/Joints/b2DistanceJoint.cpp	/^bool b2DistanceJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint
SolvePositionConstraints	Dynamics/Joints/b2FrictionJoint.cpp	/^bool b2FrictionJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint
SolvePositionConstraints	Dynamics/Joints/b2GearJoint.cpp	/^bool b2GearJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint
SolvePositionConstraints	Dynamics/Joints/b2MouseJoint.cpp	/^bool b2MouseJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint
SolvePositionConstraints	Dynamics/Joints/b2PrismaticJoint.cpp	/^bool b2PrismaticJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint
SolvePositionConstraints	Dynamics/Joints/b2PulleyJoint.cpp	/^bool b2PulleyJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint
SolvePositionConstraints	Dynamics/Joints/b2RevoluteJoint.cpp	/^bool b2RevoluteJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint
SolvePositionConstraints	Dynamics/Joints/b2RopeJoint.cpp	/^bool b2RopeJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint
SolvePositionConstraints	Dynamics/Joints/b2WeldJoint.cpp	/^bool b2WeldJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint
SolvePositionConstraints	Dynamics/Joints/b2WheelJoint.cpp	/^bool b2WheelJoint::SolvePositionConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint
SolveTOI	Dynamics/b2Island.cpp	/^void b2Island::SolveTOI(const b2TimeStep& subStep, int32 toiIndexA, int32 toiIndexB)$/;"	f	class:b2Island
SolveTOI	Dynamics/b2World.cpp	/^void b2World::SolveTOI(const b2TimeStep& step)$/;"	f	class:b2World
SolveTOIPositionConstraints	Dynamics/Contacts/b2ContactSolver.cpp	/^bool b2ContactSolver::SolveTOIPositionConstraints(int32 toiIndexA, int32 toiIndexB)$/;"	f	class:b2ContactSolver
SolveVelocityConstraints	Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::SolveVelocityConstraints()$/;"	f	class:b2ContactSolver
SolveVelocityConstraints	Dynamics/Joints/b2DistanceJoint.cpp	/^void b2DistanceJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2DistanceJoint
SolveVelocityConstraints	Dynamics/Joints/b2FrictionJoint.cpp	/^void b2FrictionJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2FrictionJoint
SolveVelocityConstraints	Dynamics/Joints/b2GearJoint.cpp	/^void b2GearJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2GearJoint
SolveVelocityConstraints	Dynamics/Joints/b2MouseJoint.cpp	/^void b2MouseJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2MouseJoint
SolveVelocityConstraints	Dynamics/Joints/b2PrismaticJoint.cpp	/^void b2PrismaticJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PrismaticJoint
SolveVelocityConstraints	Dynamics/Joints/b2PulleyJoint.cpp	/^void b2PulleyJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2PulleyJoint
SolveVelocityConstraints	Dynamics/Joints/b2RevoluteJoint.cpp	/^void b2RevoluteJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RevoluteJoint
SolveVelocityConstraints	Dynamics/Joints/b2RopeJoint.cpp	/^void b2RopeJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2RopeJoint
SolveVelocityConstraints	Dynamics/Joints/b2WeldJoint.cpp	/^void b2WeldJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WeldJoint
SolveVelocityConstraints	Dynamics/Joints/b2WheelJoint.cpp	/^void b2WheelJoint::SolveVelocityConstraints(const b2SolverData& data)$/;"	f	class:b2WheelJoint
State	Collision/b2TimeOfImpact.h	/^    enum State$/;"	g	struct:b2TOIOutput
Step	Dynamics/b2World.cpp	/^void b2World::Step(float32 dt, int32 velocityIterations, int32 positionIterations)$/;"	f	class:b2World
Step	Rope/b2Rope.cpp	/^void b2Rope::Step(float32 h, int32 iterations)$/;"	f	class:b2Rope
StoreImpulses	Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::StoreImpulses()$/;"	f	class:b2ContactSolver
Synchronize	Dynamics/b2Fixture.cpp	/^void b2Fixture::Synchronize(b2BroadPhase* broadPhase, const b2Transform& transform1, const b2Transform& transform2)$/;"	f	class:b2Fixture
SynchronizeFixtures	Dynamics/b2Body.cpp	/^void b2Body::SynchronizeFixtures()$/;"	f	class:b2Body
SynchronizeTransform	Dynamics/b2Body.h	/^inline void b2Body::SynchronizeTransform()$/;"	f	class:b2Body
TestOverlap	Collision/b2BroadPhase.h	/^inline bool b2BroadPhase::TestOverlap(int32 proxyIdA, int32 proxyIdB) const$/;"	f	class:b2BroadPhase
TestPoint	Collision/Shapes/b2ChainShape.cpp	/^bool b2ChainShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2ChainShape
TestPoint	Collision/Shapes/b2CircleShape.cpp	/^bool b2CircleShape::TestPoint(const b2Transform& transform, const b2Vec2& p) const$/;"	f	class:b2CircleShape
TestPoint	Collision/Shapes/b2EdgeShape.cpp	/^bool b2EdgeShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2EdgeShape
TestPoint	Collision/Shapes/b2PolygonShape.cpp	/^bool b2PolygonShape::TestPoint(const b2Transform& xf, const b2Vec2& p) const$/;"	f	class:b2PolygonShape
TestPoint	Dynamics/b2Fixture.h	/^inline bool b2Fixture::TestPoint(const b2Vec2& p) const$/;"	f	class:b2Fixture
TouchProxy	Collision/b2BroadPhase.cpp	/^void b2BroadPhase::TouchProxy(int32 proxyId)$/;"	f	class:b2BroadPhase
Type	Collision/Shapes/b2Shape.h	/^    enum Type$/;"	g	class:b2Shape
Type	Collision/b2CollideEdge.cpp	/^    enum Type$/;"	g	struct:b2EPAxis	file:
Type	Collision/b2Collision.h	/^    enum Type$/;"	g	struct:b2ContactFeature
Type	Collision/b2Collision.h	/^    enum Type$/;"	g	struct:b2Manifold
Type	Collision/b2TimeOfImpact.cpp	/^    enum Type$/;"	g	struct:b2SeparationFunction	file:
UnBufferMove	Collision/b2BroadPhase.cpp	/^void b2BroadPhase::UnBufferMove(int32 proxyId)$/;"	f	class:b2BroadPhase
Update	Dynamics/Contacts/b2Contact.cpp	/^void b2Contact::Update(b2ContactListener* listener)$/;"	f	class:b2Contact
UpdatePairs	Collision/b2BroadPhase.h	/^void b2BroadPhase::UpdatePairs(T* callback)$/;"	f	class:b2BroadPhase
Validate	Collision/b2DynamicTree.cpp	/^void b2DynamicTree::Validate() const$/;"	f	class:b2DynamicTree
ValidateMetrics	Collision/b2DynamicTree.cpp	/^void b2DynamicTree::ValidateMetrics(int32 index) const$/;"	f	class:b2DynamicTree
ValidateStructure	Collision/b2DynamicTree.cpp	/^void b2DynamicTree::ValidateStructure(int32 index) const$/;"	f	class:b2DynamicTree
VertexType	Collision/b2CollideEdge.cpp	/^    enum VertexType$/;"	g	struct:b2EPCollider	file:
WarmStart	Dynamics/Contacts/b2ContactSolver.cpp	/^void b2ContactSolver::WarmStart()$/;"	f	class:b2ContactSolver
WriteCache	Collision/b2Distance.cpp	/^    void WriteCache(b2SimplexCache* cache) const$/;"	f	struct:b2Simplex
a	Collision/b2Distance.cpp	/^    float32 a;        \/\/ barycentric coordinate for closest point$/;"	m	struct:b2SimplexVertex	file:
a	Common/b2Math.h	/^    float32 a0, a;        \/\/\/< world angles$/;"	m	struct:b2Sweep
a	Dynamics/b2TimeStep.h	/^    float32 a;$/;"	m	struct:b2Position
a0	Common/b2Math.h	/^    float32 a0, a;        \/\/\/< world angles$/;"	m	struct:b2Sweep
aabb	Collision/b2DynamicTree.h	/^    b2AABB aabb;$/;"	m	struct:b2TreeNode
aabb	Dynamics/b2Fixture.h	/^    b2AABB aabb;$/;"	m	struct:b2FixtureProxy
active	Dynamics/b2Body.h	/^    bool active;$/;"	m	struct:b2BodyDef
allocator	Dynamics/Contacts/b2ContactSolver.h	/^    b2StackAllocator* allocator;$/;"	m	struct:b2ContactSolverDef
allowSleep	Dynamics/b2Body.h	/^    bool allowSleep;$/;"	m	struct:b2BodyDef
alpha0	Common/b2Math.h	/^    float32 alpha0;$/;"	m	struct:b2Sweep
angle	Dynamics/b2Body.h	/^    float32 angle;$/;"	m	struct:b2BodyDef
angularA	Dynamics/Joints/b2Joint.h	/^    float32 angularA;$/;"	m	struct:b2Jacobian
angularB	Dynamics/Joints/b2Joint.h	/^    float32 angularB;$/;"	m	struct:b2Jacobian
angularDamping	Dynamics/b2Body.h	/^    float32 angularDamping;$/;"	m	struct:b2BodyDef
angularVelocity	Dynamics/b2Body.h	/^    float32 angularVelocity;$/;"	m	struct:b2BodyDef
awake	Dynamics/b2Body.h	/^    bool awake;$/;"	m	struct:b2BodyDef
b	Common/b2Draw.h	/^    float32 r, g, b;$/;"	m	struct:b2Color
b2AABB	Collision/b2Collision.h	/^struct b2AABB$/;"	s
b2Abs	Common/b2Math.h	/^inline T b2Abs(T a)$/;"	f
b2Abs	Common/b2Math.h	/^inline b2Mat22 b2Abs(const b2Mat22& A)$/;"	f
b2Abs	Common/b2Math.h	/^inline b2Vec2 b2Abs(const b2Vec2& a)$/;"	f
b2Alloc	Common/b2Settings.cpp	/^void* b2Alloc(int32 size)$/;"	f
b2Assert	Common/b2Settings.h	26;"	d
b2Atan2	Common/b2Math.h	68;"	d
b2Block	Common/b2BlockAllocator.cpp	/^struct b2Block$/;"	s	file:
b2BlockAllocator	Common/b2BlockAllocator.cpp	/^b2BlockAllocator::b2BlockAllocator()$/;"	f	class:b2BlockAllocator
b2BlockAllocator	Common/b2BlockAllocator.h	/^class b2BlockAllocator$/;"	c
b2Body	Dynamics/b2Body.cpp	/^b2Body::b2Body(const b2BodyDef* bd, b2World* world)$/;"	f	class:b2Body
b2Body	Dynamics/b2Body.h	/^class b2Body$/;"	c
b2BodyDef	Dynamics/b2Body.h	/^    b2BodyDef()$/;"	f	struct:b2BodyDef
b2BodyDef	Dynamics/b2Body.h	/^struct b2BodyDef$/;"	s
b2BodyType	Dynamics/b2Body.h	/^enum b2BodyType$/;"	g
b2BroadPhase	Collision/b2BroadPhase.cpp	/^b2BroadPhase::b2BroadPhase()$/;"	f	class:b2BroadPhase
b2BroadPhase	Collision/b2BroadPhase.h	/^class b2BroadPhase$/;"	c
b2ChainAndCircleContact	Dynamics/Contacts/b2ChainAndCircleContact.cpp	/^b2ChainAndCircleContact::b2ChainAndCircleContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)$/;"	f	class:b2ChainAndCircleContact
b2ChainAndCircleContact	Dynamics/Contacts/b2ChainAndCircleContact.h	/^class b2ChainAndCircleContact : public b2Contact$/;"	c
b2ChainAndPolygonContact	Dynamics/Contacts/b2ChainAndPolygonContact.cpp	/^b2ChainAndPolygonContact::b2ChainAndPolygonContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB)$/;"	f	class:b2ChainAndPolygonContact
b2ChainAndPolygonContact	Dynamics/Contacts/b2ChainAndPolygonContact.h	/^class b2ChainAndPolygonContact : public b2Contact$/;"	c
b2ChainShape	Collision/Shapes/b2ChainShape.h	/^class b2ChainShape : public b2Shape$/;"	c
b2ChainShape	Collision/Shapes/b2ChainShape.h	/^inline b2ChainShape::b2ChainShape()$/;"	f	class:b2ChainShape
b2Chunk	Common/b2BlockAllocator.cpp	/^struct b2Chunk$/;"	s	file:
b2CircleContact	Dynamics/Contacts/b2CircleContact.cpp	/^b2CircleContact::b2CircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2CircleContact
b2CircleContact	Dynamics/Contacts/b2CircleContact.h	/^class b2CircleContact : public b2Contact$/;"	c
b2CircleShape	Collision/Shapes/b2CircleShape.h	/^class b2CircleShape : public b2Shape$/;"	c
b2CircleShape	Collision/Shapes/b2CircleShape.h	/^inline b2CircleShape::b2CircleShape()$/;"	f	class:b2CircleShape
b2Clamp	Common/b2Math.h	/^inline T b2Clamp(T a, T low, T high)$/;"	f
b2Clamp	Common/b2Math.h	/^inline b2Vec2 b2Clamp(const b2Vec2& a, const b2Vec2& low, const b2Vec2& high)$/;"	f
b2ClipSegmentToLine	Collision/b2Collision.cpp	/^int32 b2ClipSegmentToLine(b2ClipVertex vOut[2], const b2ClipVertex vIn[2],$/;"	f
b2ClipVertex	Collision/b2Collision.h	/^struct b2ClipVertex$/;"	s
b2CollideCircles	Collision/b2CollideCircle.cpp	/^void b2CollideCircles($/;"	f
b2CollideEdgeAndCircle	Collision/b2CollideEdge.cpp	/^void b2CollideEdgeAndCircle(b2Manifold* manifold,$/;"	f
b2CollideEdgeAndPolygon	Collision/b2CollideEdge.cpp	/^void b2CollideEdgeAndPolygon(    b2Manifold* manifold,$/;"	f
b2CollidePolygonAndCircle	Collision/b2CollideCircle.cpp	/^void b2CollidePolygonAndCircle($/;"	f
b2CollidePolygons	Collision/b2CollidePolygon.cpp	/^void b2CollidePolygons(b2Manifold* manifold,$/;"	f
b2Color	Common/b2Draw.h	/^    b2Color() {}$/;"	f	struct:b2Color
b2Color	Common/b2Draw.h	/^    b2Color(float32 r, float32 g, float32 b) : r(r), g(g), b(b) {}$/;"	f	struct:b2Color
b2Color	Common/b2Draw.h	/^struct b2Color$/;"	s
b2Contact	Dynamics/Contacts/b2Contact.cpp	/^b2Contact::b2Contact(b2Fixture* fA, int32 indexA, b2Fixture* fB, int32 indexB)$/;"	f	class:b2Contact
b2Contact	Dynamics/Contacts/b2Contact.h	/^    b2Contact() : m_fixtureA(NULL), m_fixtureB(NULL) {}$/;"	f	class:b2Contact
b2Contact	Dynamics/Contacts/b2Contact.h	/^class b2Contact$/;"	c
b2ContactCreateFcn	Dynamics/Contacts/b2Contact.h	/^typedef b2Contact* b2ContactCreateFcn(    b2Fixture* fixtureA, int32 indexA,$/;"	t
b2ContactDestroyFcn	Dynamics/Contacts/b2Contact.h	/^typedef void b2ContactDestroyFcn(b2Contact* contact, b2BlockAllocator* allocator);$/;"	t
b2ContactEdge	Dynamics/Contacts/b2Contact.h	/^struct b2ContactEdge$/;"	s
b2ContactFeature	Collision/b2Collision.h	/^struct b2ContactFeature$/;"	s
b2ContactFilter	Dynamics/b2WorldCallbacks.h	/^class b2ContactFilter$/;"	c
b2ContactID	Collision/b2Collision.h	/^union b2ContactID$/;"	u
b2ContactImpulse	Dynamics/b2WorldCallbacks.h	/^struct b2ContactImpulse$/;"	s
b2ContactListener	Dynamics/b2WorldCallbacks.h	/^class b2ContactListener$/;"	c
b2ContactManager	Dynamics/b2ContactManager.cpp	/^b2ContactManager::b2ContactManager()$/;"	f	class:b2ContactManager
b2ContactManager	Dynamics/b2ContactManager.h	/^class b2ContactManager$/;"	c
b2ContactPositionConstraint	Dynamics/Contacts/b2ContactSolver.cpp	/^struct b2ContactPositionConstraint$/;"	s	file:
b2ContactRegister	Dynamics/Contacts/b2Contact.h	/^struct b2ContactRegister$/;"	s
b2ContactSolver	Dynamics/Contacts/b2ContactSolver.cpp	/^b2ContactSolver::b2ContactSolver(b2ContactSolverDef* def)$/;"	f	class:b2ContactSolver
b2ContactSolver	Dynamics/Contacts/b2ContactSolver.h	/^class b2ContactSolver$/;"	c
b2ContactSolverDef	Dynamics/Contacts/b2ContactSolver.h	/^struct b2ContactSolverDef$/;"	s
b2ContactVelocityConstraint	Dynamics/Contacts/b2ContactSolver.h	/^struct b2ContactVelocityConstraint$/;"	s
b2Cross	Common/b2Math.h	/^inline b2Vec2 b2Cross(const b2Vec2& a, float32 s)$/;"	f
b2Cross	Common/b2Math.h	/^inline b2Vec2 b2Cross(float32 s, const b2Vec2& a)$/;"	f
b2Cross	Common/b2Math.h	/^inline b2Vec3 b2Cross(const b2Vec3& a, const b2Vec3& b)$/;"	f
b2Cross	Common/b2Math.h	/^inline float32 b2Cross(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2DestructionListener	Dynamics/b2WorldCallbacks.h	/^class b2DestructionListener$/;"	c
b2Distance	Collision/b2Distance.cpp	/^void b2Distance(b2DistanceOutput* output,$/;"	f
b2Distance	Common/b2Math.h	/^inline float32 b2Distance(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2DistanceInput	Collision/b2Distance.h	/^struct b2DistanceInput$/;"	s
b2DistanceJoint	Dynamics/Joints/b2DistanceJoint.cpp	/^b2DistanceJoint::b2DistanceJoint(const b2DistanceJointDef* def)$/;"	f	class:b2DistanceJoint
b2DistanceJoint	Dynamics/Joints/b2DistanceJoint.h	/^class b2DistanceJoint : public b2Joint$/;"	c
b2DistanceJointDef	Dynamics/Joints/b2DistanceJoint.h	/^    b2DistanceJointDef()$/;"	f	struct:b2DistanceJointDef
b2DistanceJointDef	Dynamics/Joints/b2DistanceJoint.h	/^struct b2DistanceJointDef : public b2JointDef$/;"	s
b2DistanceOutput	Collision/b2Distance.h	/^struct b2DistanceOutput$/;"	s
b2DistanceProxy	Collision/b2Distance.h	/^    b2DistanceProxy() : m_vertices(NULL), m_count(0), m_radius(0.0f) {}$/;"	f	struct:b2DistanceProxy
b2DistanceProxy	Collision/b2Distance.h	/^struct b2DistanceProxy$/;"	s
b2DistanceSquared	Common/b2Math.h	/^inline float32 b2DistanceSquared(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Dot	Common/b2Math.h	/^inline float32 b2Dot(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Dot	Common/b2Math.h	/^inline float32 b2Dot(const b2Vec3& a, const b2Vec3& b)$/;"	f
b2Draw	Common/b2Draw.cpp	/^b2Draw::b2Draw()$/;"	f	class:b2Draw
b2Draw	Common/b2Draw.h	/^class b2Draw$/;"	c
b2DynamicTree	Collision/b2DynamicTree.cpp	/^b2DynamicTree::b2DynamicTree()$/;"	f	class:b2DynamicTree
b2DynamicTree	Collision/b2DynamicTree.h	/^class b2DynamicTree$/;"	c
b2EPAxis	Collision/b2CollideEdge.cpp	/^struct b2EPAxis$/;"	s	file:
b2EPCollider	Collision/b2CollideEdge.cpp	/^struct b2EPCollider$/;"	s	file:
b2EdgeAndCircleContact	Dynamics/Contacts/b2EdgeAndCircleContact.cpp	/^b2EdgeAndCircleContact::b2EdgeAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2EdgeAndCircleContact
b2EdgeAndCircleContact	Dynamics/Contacts/b2EdgeAndCircleContact.h	/^class b2EdgeAndCircleContact : public b2Contact$/;"	c
b2EdgeAndPolygonContact	Dynamics/Contacts/b2EdgeAndPolygonContact.cpp	/^b2EdgeAndPolygonContact::b2EdgeAndPolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2EdgeAndPolygonContact
b2EdgeAndPolygonContact	Dynamics/Contacts/b2EdgeAndPolygonContact.h	/^class b2EdgeAndPolygonContact : public b2Contact$/;"	c
b2EdgeSeparation	Collision/b2CollidePolygon.cpp	/^static float32 b2EdgeSeparation(const b2PolygonShape* poly1, const b2Transform& xf1, int32 edge1,$/;"	f	file:
b2EdgeShape	Collision/Shapes/b2EdgeShape.h	/^class b2EdgeShape : public b2Shape$/;"	c
b2EdgeShape	Collision/Shapes/b2EdgeShape.h	/^inline b2EdgeShape::b2EdgeShape()$/;"	f	class:b2EdgeShape
b2Filter	Dynamics/b2Fixture.h	/^    b2Filter()$/;"	f	struct:b2Filter
b2Filter	Dynamics/b2Fixture.h	/^struct b2Filter$/;"	s
b2FindIncidentEdge	Collision/b2CollidePolygon.cpp	/^static void b2FindIncidentEdge(b2ClipVertex c[2],$/;"	f	file:
b2FindMaxSeparation	Collision/b2CollidePolygon.cpp	/^static float32 b2FindMaxSeparation(int32* edgeIndex,$/;"	f	file:
b2Fixture	Dynamics/b2Fixture.cpp	/^b2Fixture::b2Fixture()$/;"	f	class:b2Fixture
b2Fixture	Dynamics/b2Fixture.h	/^class b2Fixture$/;"	c
b2FixtureDef	Dynamics/b2Fixture.h	/^    b2FixtureDef()$/;"	f	struct:b2FixtureDef
b2FixtureDef	Dynamics/b2Fixture.h	/^struct b2FixtureDef$/;"	s
b2FixtureProxy	Dynamics/b2Fixture.h	/^struct b2FixtureProxy$/;"	s
b2Free	Common/b2Settings.cpp	/^void b2Free(void* mem)$/;"	f
b2FrictionJoint	Dynamics/Joints/b2FrictionJoint.cpp	/^b2FrictionJoint::b2FrictionJoint(const b2FrictionJointDef* def)$/;"	f	class:b2FrictionJoint
b2FrictionJoint	Dynamics/Joints/b2FrictionJoint.h	/^class b2FrictionJoint : public b2Joint$/;"	c
b2FrictionJointDef	Dynamics/Joints/b2FrictionJoint.h	/^    b2FrictionJointDef()$/;"	f	struct:b2FrictionJointDef
b2FrictionJointDef	Dynamics/Joints/b2FrictionJoint.h	/^struct b2FrictionJointDef : public b2JointDef$/;"	s
b2GearJoint	Dynamics/Joints/b2GearJoint.cpp	/^b2GearJoint::b2GearJoint(const b2GearJointDef* def)$/;"	f	class:b2GearJoint
b2GearJoint	Dynamics/Joints/b2GearJoint.h	/^class b2GearJoint : public b2Joint$/;"	c
b2GearJointDef	Dynamics/Joints/b2GearJoint.h	/^    b2GearJointDef()$/;"	f	struct:b2GearJointDef
b2GearJointDef	Dynamics/Joints/b2GearJoint.h	/^struct b2GearJointDef : public b2JointDef$/;"	s
b2GetPointStates	Collision/b2Collision.cpp	/^void b2GetPointStates(b2PointState state1[b2_maxManifoldPoints], b2PointState state2[b2_maxManifoldPoints],$/;"	f
b2GrowableStack	Common/b2GrowableStack.h	/^    b2GrowableStack()$/;"	f	class:b2GrowableStack
b2GrowableStack	Common/b2GrowableStack.h	/^class b2GrowableStack$/;"	c
b2InvSqrt	Common/b2Math.h	/^inline float32 b2InvSqrt(float32 x)$/;"	f
b2IsPowerOfTwo	Common/b2Math.h	/^inline bool b2IsPowerOfTwo(uint32 x)$/;"	f
b2IsValid	Common/b2Math.h	/^inline bool b2IsValid(float32 x)$/;"	f
b2Island	Dynamics/b2Island.cpp	/^b2Island::b2Island($/;"	f	class:b2Island
b2Island	Dynamics/b2Island.h	/^class b2Island$/;"	c
b2Jacobian	Dynamics/Joints/b2Joint.h	/^struct b2Jacobian$/;"	s
b2Joint	Dynamics/Joints/b2Joint.cpp	/^b2Joint::b2Joint(const b2JointDef* def)$/;"	f	class:b2Joint
b2Joint	Dynamics/Joints/b2Joint.h	/^class b2Joint$/;"	c
b2JointDef	Dynamics/Joints/b2Joint.h	/^    b2JointDef()$/;"	f	struct:b2JointDef
b2JointDef	Dynamics/Joints/b2Joint.h	/^struct b2JointDef$/;"	s
b2JointEdge	Dynamics/Joints/b2Joint.h	/^struct b2JointEdge$/;"	s
b2JointType	Dynamics/Joints/b2Joint.h	/^enum b2JointType$/;"	g
b2LimitState	Dynamics/Joints/b2Joint.h	/^enum b2LimitState$/;"	g
b2Log	Common/b2Settings.cpp	/^void b2Log(const char* string, ...)$/;"	f
b2Manifold	Collision/b2Collision.h	/^struct b2Manifold$/;"	s
b2ManifoldPoint	Collision/b2Collision.h	/^struct b2ManifoldPoint$/;"	s
b2MassData	Collision/Shapes/b2Shape.h	/^struct b2MassData$/;"	s
b2Mat22	Common/b2Math.h	/^    b2Mat22() {}$/;"	f	struct:b2Mat22
b2Mat22	Common/b2Math.h	/^    b2Mat22(const b2Vec2& c1, const b2Vec2& c2)$/;"	f	struct:b2Mat22
b2Mat22	Common/b2Math.h	/^    b2Mat22(float32 a11, float32 a12, float32 a21, float32 a22)$/;"	f	struct:b2Mat22
b2Mat22	Common/b2Math.h	/^struct b2Mat22$/;"	s
b2Mat33	Common/b2Math.h	/^    b2Mat33() {}$/;"	f	struct:b2Mat33
b2Mat33	Common/b2Math.h	/^    b2Mat33(const b2Vec3& c1, const b2Vec3& c2, const b2Vec3& c3)$/;"	f	struct:b2Mat33
b2Mat33	Common/b2Math.h	/^struct b2Mat33$/;"	s
b2Max	Common/b2Math.h	/^inline T b2Max(T a, T b)$/;"	f
b2Max	Common/b2Math.h	/^inline b2Vec2 b2Max(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2Min	Common/b2Math.h	/^inline T b2Min(T a, T b)$/;"	f
b2Min	Common/b2Math.h	/^inline b2Vec2 b2Min(const b2Vec2& a, const b2Vec2& b)$/;"	f
b2MixFriction	Dynamics/Contacts/b2Contact.h	/^inline float32 b2MixFriction(float32 friction1, float32 friction2)$/;"	f
b2MixRestitution	Dynamics/Contacts/b2Contact.h	/^inline float32 b2MixRestitution(float32 restitution1, float32 restitution2)$/;"	f
b2MouseJoint	Dynamics/Joints/b2MouseJoint.cpp	/^b2MouseJoint::b2MouseJoint(const b2MouseJointDef* def)$/;"	f	class:b2MouseJoint
b2MouseJoint	Dynamics/Joints/b2MouseJoint.h	/^class b2MouseJoint : public b2Joint$/;"	c
b2MouseJointDef	Dynamics/Joints/b2MouseJoint.h	/^    b2MouseJointDef()$/;"	f	struct:b2MouseJointDef
b2MouseJointDef	Dynamics/Joints/b2MouseJoint.h	/^struct b2MouseJointDef : public b2JointDef$/;"	s
b2Mul	Common/b2Math.h	/^inline b2Mat22 b2Mul(const b2Mat22& A, const b2Mat22& B)$/;"	f
b2Mul	Common/b2Math.h	/^inline b2Rot b2Mul(const b2Rot& q, const b2Rot& r)$/;"	f
b2Mul	Common/b2Math.h	/^inline b2Transform b2Mul(const b2Transform& A, const b2Transform& B)$/;"	f
b2Mul	Common/b2Math.h	/^inline b2Vec2 b2Mul(const b2Mat22& A, const b2Vec2& v)$/;"	f
b2Mul	Common/b2Math.h	/^inline b2Vec2 b2Mul(const b2Rot& q, const b2Vec2& v)$/;"	f
b2Mul	Common/b2Math.h	/^inline b2Vec2 b2Mul(const b2Transform& T, const b2Vec2& v)$/;"	f
b2Mul	Common/b2Math.h	/^inline b2Vec3 b2Mul(const b2Mat33& A, const b2Vec3& v)$/;"	f
b2Mul22	Common/b2Math.h	/^inline b2Vec2 b2Mul22(const b2Mat33& A, const b2Vec2& v)$/;"	f
b2MulT	Common/b2Math.h	/^inline b2Mat22 b2MulT(const b2Mat22& A, const b2Mat22& B)$/;"	f
b2MulT	Common/b2Math.h	/^inline b2Rot b2MulT(const b2Rot& q, const b2Rot& r)$/;"	f
b2MulT	Common/b2Math.h	/^inline b2Transform b2MulT(const b2Transform& A, const b2Transform& B)$/;"	f
b2MulT	Common/b2Math.h	/^inline b2Vec2 b2MulT(const b2Mat22& A, const b2Vec2& v)$/;"	f
b2MulT	Common/b2Math.h	/^inline b2Vec2 b2MulT(const b2Rot& q, const b2Vec2& v)$/;"	f
b2MulT	Common/b2Math.h	/^inline b2Vec2 b2MulT(const b2Transform& T, const b2Vec2& v)$/;"	f
b2NextPowerOfTwo	Common/b2Math.h	/^inline uint32 b2NextPowerOfTwo(uint32 x)$/;"	f
b2Pair	Collision/b2BroadPhase.h	/^struct b2Pair$/;"	s
b2PairLessThan	Collision/b2BroadPhase.h	/^inline bool b2PairLessThan(const b2Pair& pair1, const b2Pair& pair2)$/;"	f
b2PointState	Collision/b2Collision.h	/^enum b2PointState$/;"	g
b2PolygonAndCircleContact	Dynamics/Contacts/b2PolygonAndCircleContact.cpp	/^b2PolygonAndCircleContact::b2PolygonAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2PolygonAndCircleContact
b2PolygonAndCircleContact	Dynamics/Contacts/b2PolygonAndCircleContact.h	/^class b2PolygonAndCircleContact : public b2Contact$/;"	c
b2PolygonContact	Dynamics/Contacts/b2PolygonContact.cpp	/^b2PolygonContact::b2PolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB)$/;"	f	class:b2PolygonContact
b2PolygonContact	Dynamics/Contacts/b2PolygonContact.h	/^class b2PolygonContact : public b2Contact$/;"	c
b2PolygonShape	Collision/Shapes/b2PolygonShape.h	/^class b2PolygonShape : public b2Shape$/;"	c
b2PolygonShape	Collision/Shapes/b2PolygonShape.h	/^inline b2PolygonShape::b2PolygonShape()$/;"	f	class:b2PolygonShape
b2Position	Dynamics/b2TimeStep.h	/^struct b2Position$/;"	s
b2PositionSolverManifold	Dynamics/Contacts/b2ContactSolver.cpp	/^struct b2PositionSolverManifold$/;"	s	file:
b2PrismaticJoint	Dynamics/Joints/b2PrismaticJoint.cpp	/^b2PrismaticJoint::b2PrismaticJoint(const b2PrismaticJointDef* def)$/;"	f	class:b2PrismaticJoint
b2PrismaticJoint	Dynamics/Joints/b2PrismaticJoint.h	/^class b2PrismaticJoint : public b2Joint$/;"	c
b2PrismaticJointDef	Dynamics/Joints/b2PrismaticJoint.h	/^    b2PrismaticJointDef()$/;"	f	struct:b2PrismaticJointDef
b2PrismaticJointDef	Dynamics/Joints/b2PrismaticJoint.h	/^struct b2PrismaticJointDef : public b2JointDef$/;"	s
b2Profile	Dynamics/b2TimeStep.h	/^struct b2Profile$/;"	s
b2PulleyJoint	Dynamics/Joints/b2PulleyJoint.cpp	/^b2PulleyJoint::b2PulleyJoint(const b2PulleyJointDef* def)$/;"	f	class:b2PulleyJoint
b2PulleyJoint	Dynamics/Joints/b2PulleyJoint.h	/^class b2PulleyJoint : public b2Joint$/;"	c
b2PulleyJointDef	Dynamics/Joints/b2PulleyJoint.h	/^    b2PulleyJointDef()$/;"	f	struct:b2PulleyJointDef
b2PulleyJointDef	Dynamics/Joints/b2PulleyJoint.h	/^struct b2PulleyJointDef : public b2JointDef$/;"	s
b2QueryCallback	Dynamics/b2WorldCallbacks.h	/^class b2QueryCallback$/;"	c
b2RayCastCallback	Dynamics/b2WorldCallbacks.h	/^class b2RayCastCallback$/;"	c
b2RayCastInput	Collision/b2Collision.h	/^struct b2RayCastInput$/;"	s
b2RayCastOutput	Collision/b2Collision.h	/^struct b2RayCastOutput$/;"	s
b2ReferenceFace	Collision/b2CollideEdge.cpp	/^struct b2ReferenceFace$/;"	s	file:
b2RevoluteJoint	Dynamics/Joints/b2RevoluteJoint.cpp	/^b2RevoluteJoint::b2RevoluteJoint(const b2RevoluteJointDef* def)$/;"	f	class:b2RevoluteJoint
b2RevoluteJoint	Dynamics/Joints/b2RevoluteJoint.h	/^class b2RevoluteJoint : public b2Joint$/;"	c
b2RevoluteJointDef	Dynamics/Joints/b2RevoluteJoint.h	/^    b2RevoluteJointDef()$/;"	f	struct:b2RevoluteJointDef
b2RevoluteJointDef	Dynamics/Joints/b2RevoluteJoint.h	/^struct b2RevoluteJointDef : public b2JointDef$/;"	s
b2Rope	Rope/b2Rope.cpp	/^b2Rope::b2Rope()$/;"	f	class:b2Rope
b2Rope	Rope/b2Rope.h	/^class b2Rope$/;"	c
b2RopeDef	Rope/b2Rope.h	/^    b2RopeDef()$/;"	f	struct:b2RopeDef
b2RopeDef	Rope/b2Rope.h	/^struct b2RopeDef$/;"	s
b2RopeJoint	Dynamics/Joints/b2RopeJoint.cpp	/^b2RopeJoint::b2RopeJoint(const b2RopeJointDef* def)$/;"	f	class:b2RopeJoint
b2RopeJoint	Dynamics/Joints/b2RopeJoint.h	/^class b2RopeJoint : public b2Joint$/;"	c
b2RopeJointDef	Dynamics/Joints/b2RopeJoint.h	/^    b2RopeJointDef()$/;"	f	struct:b2RopeJointDef
b2RopeJointDef	Dynamics/Joints/b2RopeJoint.h	/^struct b2RopeJointDef : public b2JointDef$/;"	s
b2Rot	Common/b2Math.h	/^    b2Rot() {}$/;"	f	struct:b2Rot
b2Rot	Common/b2Math.h	/^    explicit b2Rot(float32 angle)$/;"	f	struct:b2Rot
b2Rot	Common/b2Math.h	/^struct b2Rot$/;"	s
b2SeparationFunction	Collision/b2TimeOfImpact.cpp	/^struct b2SeparationFunction$/;"	s	file:
b2Shape	Collision/Shapes/b2Shape.h	/^class b2Shape$/;"	c
b2Simplex	Collision/b2Distance.cpp	/^struct b2Simplex$/;"	s	file:
b2SimplexCache	Collision/b2Distance.h	/^struct b2SimplexCache$/;"	s
b2SimplexVertex	Collision/b2Distance.cpp	/^struct b2SimplexVertex$/;"	s	file:
b2SolverData	Dynamics/b2TimeStep.h	/^struct b2SolverData$/;"	s
b2Sqrt	Common/b2Math.h	67;"	d
b2StackAllocator	Common/b2StackAllocator.cpp	/^b2StackAllocator::b2StackAllocator()$/;"	f	class:b2StackAllocator
b2StackAllocator	Common/b2StackAllocator.h	/^class b2StackAllocator$/;"	c
b2StackEntry	Common/b2StackAllocator.h	/^struct b2StackEntry$/;"	s
b2Swap	Common/b2Math.h	/^template<typename T> inline void b2Swap(T& a, T& b)$/;"	f
b2Sweep	Common/b2Math.h	/^struct b2Sweep$/;"	s
b2TOIInput	Collision/b2TimeOfImpact.h	/^struct b2TOIInput$/;"	s
b2TOIOutput	Collision/b2TimeOfImpact.h	/^struct b2TOIOutput$/;"	s
b2TempPolygon	Collision/b2CollideEdge.cpp	/^struct b2TempPolygon$/;"	s	file:
b2TestOverlap	Collision/b2Collision.cpp	/^bool b2TestOverlap(    const b2Shape* shapeA, int32 indexA,$/;"	f
b2TestOverlap	Collision/b2Collision.h	/^inline bool b2TestOverlap(const b2AABB& a, const b2AABB& b)$/;"	f
b2TimeOfImpact	Collision/b2TimeOfImpact.cpp	/^void b2TimeOfImpact(b2TOIOutput* output, const b2TOIInput* input)$/;"	f
b2TimeStep	Dynamics/b2TimeStep.h	/^struct b2TimeStep$/;"	s
b2Timer	Common/b2Timer.cpp	/^b2Timer::b2Timer()$/;"	f	class:b2Timer
b2Timer	Common/b2Timer.h	/^class b2Timer$/;"	c
b2Transform	Common/b2Math.h	/^    b2Transform() {}$/;"	f	struct:b2Transform
b2Transform	Common/b2Math.h	/^    b2Transform(const b2Vec2& position, const b2Rot& rotation) : p(position), q(rotation) {}$/;"	f	struct:b2Transform
b2Transform	Common/b2Math.h	/^struct b2Transform$/;"	s
b2TreeNode	Collision/b2DynamicTree.h	/^struct b2TreeNode$/;"	s
b2Vec2	Common/b2Math.h	/^    b2Vec2() {}$/;"	f	struct:b2Vec2
b2Vec2	Common/b2Math.h	/^    b2Vec2(float32 x, float32 y) : x(x), y(y) {}$/;"	f	struct:b2Vec2
b2Vec2	Common/b2Math.h	/^struct b2Vec2$/;"	s
b2Vec3	Common/b2Math.h	/^    b2Vec3() {}$/;"	f	struct:b2Vec3
b2Vec3	Common/b2Math.h	/^    b2Vec3(float32 x, float32 y, float32 z) : x(x), y(y), z(z) {}$/;"	f	struct:b2Vec3
b2Vec3	Common/b2Math.h	/^struct b2Vec3$/;"	s
b2Velocity	Dynamics/b2TimeStep.h	/^struct b2Velocity$/;"	s
b2VelocityConstraintPoint	Dynamics/Contacts/b2ContactSolver.h	/^struct b2VelocityConstraintPoint$/;"	s
b2Version	Common/b2Settings.h	/^struct b2Version$/;"	s
b2WeldJoint	Dynamics/Joints/b2WeldJoint.cpp	/^b2WeldJoint::b2WeldJoint(const b2WeldJointDef* def)$/;"	f	class:b2WeldJoint
b2WeldJoint	Dynamics/Joints/b2WeldJoint.h	/^class b2WeldJoint : public b2Joint$/;"	c
b2WeldJointDef	Dynamics/Joints/b2WeldJoint.h	/^    b2WeldJointDef()$/;"	f	struct:b2WeldJointDef
b2WeldJointDef	Dynamics/Joints/b2WeldJoint.h	/^struct b2WeldJointDef : public b2JointDef$/;"	s
b2WheelJoint	Dynamics/Joints/b2WheelJoint.cpp	/^b2WheelJoint::b2WheelJoint(const b2WheelJointDef* def)$/;"	f	class:b2WheelJoint
b2WheelJoint	Dynamics/Joints/b2WheelJoint.h	/^class b2WheelJoint : public b2Joint$/;"	c
b2WheelJointDef	Dynamics/Joints/b2WheelJoint.h	/^    b2WheelJointDef()$/;"	f	struct:b2WheelJointDef
b2WheelJointDef	Dynamics/Joints/b2WheelJoint.h	/^struct b2WheelJointDef : public b2JointDef$/;"	s
b2World	Dynamics/b2World.cpp	/^b2World::b2World(const b2Vec2& gravity)$/;"	f	class:b2World
b2World	Dynamics/b2World.h	/^class b2World$/;"	c
b2WorldManifold	Collision/b2Collision.h	/^struct b2WorldManifold$/;"	s
b2WorldQueryWrapper	Dynamics/b2World.cpp	/^struct b2WorldQueryWrapper$/;"	s	file:
b2WorldRayCastWrapper	Dynamics/b2World.cpp	/^struct b2WorldRayCastWrapper$/;"	s	file:
b2_aabbExtension	Common/b2Settings.h	58;"	d
b2_aabbMultiplier	Common/b2Settings.h	63;"	d
b2_addState	Collision/b2Collision.h	/^    b2_addState,        \/\/\/< point was added in the update$/;"	e	enum:b2PointState
b2_angularSleepTolerance	Common/b2Settings.h	125;"	d
b2_angularSlop	Common/b2Settings.h	71;"	d
b2_baumgarte	Common/b2Settings.h	112;"	d
b2_blockSizes	Common/b2BlockAllocator.h	/^const int32 b2_blockSizes = 14;$/;"	v
b2_chunkArrayIncrement	Common/b2BlockAllocator.h	/^const int32 b2_chunkArrayIncrement = 128;$/;"	v
b2_chunkSize	Common/b2BlockAllocator.h	/^const int32 b2_chunkSize = 16 * 1024;$/;"	v
b2_defaultFilter	Dynamics/b2ContactManager.cpp	/^b2ContactFilter b2_defaultFilter;$/;"	v
b2_defaultListener	Dynamics/b2ContactManager.cpp	/^b2ContactListener b2_defaultListener;$/;"	v
b2_dynamicBody	Dynamics/b2Body.h	/^    b2_dynamicBody$/;"	e	enum:b2BodyType
b2_epsilon	Common/b2Settings.h	38;"	d
b2_gjkCalls	Collision/b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_gjkIters	Collision/b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_gjkMaxIters	Collision/b2Distance.cpp	/^int32 b2_gjkCalls, b2_gjkIters, b2_gjkMaxIters;$/;"	v
b2_kinematicBody	Dynamics/b2Body.h	/^    b2_kinematicBody,$/;"	e	enum:b2BodyType
b2_linearSleepTolerance	Common/b2Settings.h	122;"	d
b2_linearSlop	Common/b2Settings.h	67;"	d
b2_maxAngularCorrection	Common/b2Settings.h	97;"	d
b2_maxBlockSize	Common/b2BlockAllocator.h	/^const int32 b2_maxBlockSize = 640;$/;"	v
b2_maxFloat	Common/b2Settings.h	37;"	d
b2_maxLinearCorrection	Common/b2Settings.h	93;"	d
b2_maxManifoldPoints	Common/b2Settings.h	49;"	d
b2_maxPolygonVertices	Common/b2Settings.h	53;"	d
b2_maxRotation	Common/b2Settings.h	106;"	d
b2_maxRotationSquared	Common/b2Settings.h	107;"	d
b2_maxStackEntries	Common/b2StackAllocator.h	/^const int32 b2_maxStackEntries = 32;$/;"	v
b2_maxSubSteps	Common/b2Settings.h	79;"	d
b2_maxTOIContacts	Common/b2Settings.h	85;"	d
b2_maxTranslation	Common/b2Settings.h	101;"	d
b2_maxTranslationSquared	Common/b2Settings.h	102;"	d
b2_minPulleyLength	Dynamics/Joints/b2PulleyJoint.h	/^const float32 b2_minPulleyLength = 2.0f;$/;"	v
b2_nullFeature	Collision/b2Collision.h	/^const uint8 b2_nullFeature = UCHAR_MAX;$/;"	v
b2_nullNode	Collision/b2DynamicTree.h	25;"	d
b2_nullState	Collision/b2Collision.h	/^    b2_nullState,        \/\/\/< point does not exist$/;"	e	enum:b2PointState
b2_persistState	Collision/b2Collision.h	/^    b2_persistState,    \/\/\/< point persisted across the update$/;"	e	enum:b2PointState
b2_pi	Common/b2Settings.h	39;"	d
b2_polygonRadius	Common/b2Settings.h	76;"	d
b2_removeState	Collision/b2Collision.h	/^    b2_removeState        \/\/\/< point was removed in the update$/;"	e	enum:b2PointState
b2_stackSize	Common/b2StackAllocator.h	/^const int32 b2_stackSize = 100 * 1024;    \/\/ 100k$/;"	v
b2_staticBody	Dynamics/b2Body.h	/^    b2_staticBody = 0,$/;"	e	enum:b2BodyType
b2_timeToSleep	Common/b2Settings.h	119;"	d
b2_toiBaugarte	Common/b2Settings.h	113;"	d
b2_toiMaxRootIters	Collision/b2TimeOfImpact.cpp	/^int32 b2_toiRootIters, b2_toiMaxRootIters;$/;"	v
b2_toiRootIters	Collision/b2TimeOfImpact.cpp	/^int32 b2_toiRootIters, b2_toiMaxRootIters;$/;"	v
b2_velocityThreshold	Common/b2Settings.h	89;"	d
blockSize	Common/b2BlockAllocator.cpp	/^    int32 blockSize;$/;"	m	struct:b2Chunk	file:
blocks	Common/b2BlockAllocator.cpp	/^    b2Block* blocks;$/;"	m	struct:b2Chunk	file:
bodyA	Dynamics/Joints/b2Joint.h	/^    b2Body* bodyA;$/;"	m	struct:b2JointDef
bodyB	Dynamics/Joints/b2Joint.h	/^    b2Body* bodyB;$/;"	m	struct:b2JointDef
broadPhase	Dynamics/b2World.cpp	/^    const b2BroadPhase* broadPhase;$/;"	m	struct:b2WorldQueryWrapper	file:
broadPhase	Dynamics/b2World.cpp	/^    const b2BroadPhase* broadPhase;$/;"	m	struct:b2WorldRayCastWrapper	file:
broadphase	Dynamics/b2TimeStep.h	/^    float32 broadphase;$/;"	m	struct:b2Profile
bullet	Dynamics/b2Body.h	/^    bool bullet;$/;"	m	struct:b2BodyDef
c	Common/b2Math.h	/^    b2Vec2 c0, c;        \/\/\/< center world positions$/;"	m	struct:b2Sweep
c	Common/b2Math.h	/^    float32 s, c;$/;"	m	struct:b2Rot
c	Dynamics/b2TimeStep.h	/^    b2Vec2 c;$/;"	m	struct:b2Position
c0	Common/b2Math.h	/^    b2Vec2 c0, c;        \/\/\/< center world positions$/;"	m	struct:b2Sweep
callback	Dynamics/b2World.cpp	/^    b2QueryCallback* callback;$/;"	m	struct:b2WorldQueryWrapper	file:
callback	Dynamics/b2World.cpp	/^    b2RayCastCallback* callback;$/;"	m	struct:b2WorldRayCastWrapper	file:
categoryBits	Dynamics/b2Fixture.h	/^    uint16 categoryBits;$/;"	m	struct:b2Filter
center	Collision/Shapes/b2Shape.h	/^    b2Vec2 center;$/;"	m	struct:b2MassData
cf	Collision/b2Collision.h	/^    b2ContactFeature cf;$/;"	m	union:b2ContactID
child1	Collision/b2DynamicTree.h	/^    int32 child1;$/;"	m	struct:b2TreeNode
child2	Collision/b2DynamicTree.h	/^    int32 child2;$/;"	m	struct:b2TreeNode
childIndex	Dynamics/b2Fixture.h	/^    int32 childIndex;$/;"	m	struct:b2FixtureProxy
collide	Dynamics/b2TimeStep.h	/^    float32 collide;$/;"	m	struct:b2Profile
collideConnected	Dynamics/Joints/b2Joint.h	/^    bool collideConnected;$/;"	m	struct:b2JointDef
contact	Dynamics/Contacts/b2Contact.h	/^    b2Contact* contact;        \/\/\/< the contact$/;"	m	struct:b2ContactEdge
contactIndex	Dynamics/Contacts/b2ContactSolver.h	/^    int32 contactIndex;$/;"	m	struct:b2ContactVelocityConstraint
contacts	Dynamics/Contacts/b2ContactSolver.h	/^    b2Contact** contacts;$/;"	m	struct:b2ContactSolverDef
count	Collision/b2CollideEdge.cpp	/^    int32 count;$/;"	m	struct:b2TempPolygon	file:
count	Collision/b2Distance.h	/^    uint16 count;$/;"	m	struct:b2SimplexCache
count	Dynamics/Contacts/b2ContactSolver.h	/^    int32 count;$/;"	m	struct:b2ContactSolverDef
count	Dynamics/b2WorldCallbacks.h	/^    int32 count;$/;"	m	struct:b2ContactImpulse
count	Rope/b2Rope.h	/^    int32 count;$/;"	m	struct:b2RopeDef
createFcn	Dynamics/Contacts/b2Contact.h	/^    b2ContactCreateFcn* createFcn;$/;"	m	struct:b2ContactRegister
damping	Rope/b2Rope.h	/^    float32 damping;$/;"	m	struct:b2RopeDef
dampingRatio	Dynamics/Joints/b2DistanceJoint.h	/^    float32 dampingRatio;$/;"	m	struct:b2DistanceJointDef
dampingRatio	Dynamics/Joints/b2MouseJoint.h	/^    float32 dampingRatio;$/;"	m	struct:b2MouseJointDef
dampingRatio	Dynamics/Joints/b2WeldJoint.h	/^    float32 dampingRatio;$/;"	m	struct:b2WeldJointDef
dampingRatio	Dynamics/Joints/b2WheelJoint.h	/^    float32 dampingRatio;$/;"	m	struct:b2WheelJointDef
data	Common/b2StackAllocator.h	/^    char* data;$/;"	m	struct:b2StackEntry
density	Dynamics/b2Fixture.h	/^    float32 density;$/;"	m	struct:b2FixtureDef
destroyFcn	Dynamics/Contacts/b2Contact.h	/^    b2ContactDestroyFcn* destroyFcn;$/;"	m	struct:b2ContactRegister
distance	Collision/b2Distance.h	/^    float32 distance;$/;"	m	struct:b2DistanceOutput
dt	Dynamics/b2TimeStep.h	/^    float32 dt;            \/\/ time step$/;"	m	struct:b2TimeStep
dtRatio	Dynamics/b2TimeStep.h	/^    float32 dtRatio;    \/\/ dt * inv_dt0$/;"	m	struct:b2TimeStep
e_aabbBit	Common/b2Draw.h	/^        e_aabbBit                = 0x0004,    \/\/\/< draw axis aligned bounding boxes$/;"	e	enum:b2Draw::__anon3
e_activeFlag	Dynamics/b2Body.h	/^        e_activeFlag        = 0x0020,$/;"	e	enum:b2Body::__anon4
e_atLowerLimit	Dynamics/Joints/b2Joint.h	/^    e_atLowerLimit,$/;"	e	enum:b2LimitState
e_atUpperLimit	Dynamics/Joints/b2Joint.h	/^    e_atUpperLimit,$/;"	e	enum:b2LimitState
e_autoSleepFlag	Dynamics/b2Body.h	/^        e_autoSleepFlag        = 0x0004,$/;"	e	enum:b2Body::__anon4
e_awakeFlag	Dynamics/b2Body.h	/^        e_awakeFlag            = 0x0002,$/;"	e	enum:b2Body::__anon4
e_bulletFlag	Dynamics/b2Body.h	/^        e_bulletFlag        = 0x0008,$/;"	e	enum:b2Body::__anon4
e_bulletHitFlag	Dynamics/Contacts/b2Contact.h	/^        e_bulletHitFlag        = 0x0010,$/;"	e	enum:b2Contact::__anon6
e_centerOfMassBit	Common/b2Draw.h	/^        e_centerOfMassBit        = 0x0010    \/\/\/< draw center of mass frame$/;"	e	enum:b2Draw::__anon3
e_chain	Collision/Shapes/b2Shape.h	/^        e_chain = 3,$/;"	e	enum:b2Shape::Type
e_circle	Collision/Shapes/b2Shape.h	/^        e_circle = 0,$/;"	e	enum:b2Shape::Type
e_circles	Collision/b2Collision.h	/^        e_circles,$/;"	e	enum:b2Manifold::Type
e_clearForces	Dynamics/b2World.h	/^        e_clearForces    = 0x0004$/;"	e	enum:b2World::__anon5
e_concave	Collision/b2CollideEdge.cpp	/^        e_concave,$/;"	e	enum:b2EPCollider::VertexType	file:
e_convex	Collision/b2CollideEdge.cpp	/^        e_convex$/;"	e	enum:b2EPCollider::VertexType	file:
e_distanceJoint	Dynamics/Joints/b2Joint.h	/^    e_distanceJoint,$/;"	e	enum:b2JointType
e_edge	Collision/Shapes/b2Shape.h	/^        e_edge = 1,$/;"	e	enum:b2Shape::Type
e_edgeA	Collision/b2CollideEdge.cpp	/^        e_edgeA,$/;"	e	enum:b2EPAxis::Type	file:
e_edgeB	Collision/b2CollideEdge.cpp	/^        e_edgeB$/;"	e	enum:b2EPAxis::Type	file:
e_enabledFlag	Dynamics/Contacts/b2Contact.h	/^        e_enabledFlag        = 0x0004,$/;"	e	enum:b2Contact::__anon6
e_equalLimits	Dynamics/Joints/b2Joint.h	/^    e_equalLimits$/;"	e	enum:b2LimitState
e_face	Collision/b2Collision.h	/^        e_face = 1$/;"	e	enum:b2ContactFeature::Type
e_faceA	Collision/b2Collision.h	/^        e_faceA,$/;"	e	enum:b2Manifold::Type
e_faceA	Collision/b2TimeOfImpact.cpp	/^        e_faceA,$/;"	e	enum:b2SeparationFunction::Type	file:
e_faceB	Collision/b2Collision.h	/^        e_faceB$/;"	e	enum:b2Manifold::Type
e_faceB	Collision/b2TimeOfImpact.cpp	/^        e_faceB$/;"	e	enum:b2SeparationFunction::Type	file:
e_failed	Collision/b2TimeOfImpact.h	/^        e_failed,$/;"	e	enum:b2TOIOutput::State
e_filterFlag	Dynamics/Contacts/b2Contact.h	/^        e_filterFlag        = 0x0008,$/;"	e	enum:b2Contact::__anon6
e_fixedRotationFlag	Dynamics/b2Body.h	/^        e_fixedRotationFlag    = 0x0010,$/;"	e	enum:b2Body::__anon4
e_frictionJoint	Dynamics/Joints/b2Joint.h	/^    e_frictionJoint,$/;"	e	enum:b2JointType
e_gearJoint	Dynamics/Joints/b2Joint.h	/^    e_gearJoint,$/;"	e	enum:b2JointType
e_inactiveLimit	Dynamics/Joints/b2Joint.h	/^    e_inactiveLimit,$/;"	e	enum:b2LimitState
e_islandFlag	Dynamics/Contacts/b2Contact.h	/^        e_islandFlag        = 0x0001,$/;"	e	enum:b2Contact::__anon6
e_islandFlag	Dynamics/b2Body.h	/^        e_islandFlag        = 0x0001,$/;"	e	enum:b2Body::__anon4
e_isolated	Collision/b2CollideEdge.cpp	/^        e_isolated,$/;"	e	enum:b2EPCollider::VertexType	file:
e_jointBit	Common/b2Draw.h	/^        e_jointBit                = 0x0002,    \/\/\/< draw joint connections$/;"	e	enum:b2Draw::__anon3
e_locked	Dynamics/b2World.h	/^        e_locked        = 0x0002,$/;"	e	enum:b2World::__anon5
e_mouseJoint	Dynamics/Joints/b2Joint.h	/^    e_mouseJoint,$/;"	e	enum:b2JointType
e_newFixture	Dynamics/b2World.h	/^        e_newFixture    = 0x0001,$/;"	e	enum:b2World::__anon5
e_nullProxy	Collision/b2BroadPhase.h	/^        e_nullProxy = -1$/;"	e	enum:b2BroadPhase::__anon1
e_overlapped	Collision/b2TimeOfImpact.h	/^        e_overlapped,$/;"	e	enum:b2TOIOutput::State
e_pairBit	Common/b2Draw.h	/^        e_pairBit                = 0x0008,    \/\/\/< draw broad-phase pairs$/;"	e	enum:b2Draw::__anon3
e_points	Collision/b2TimeOfImpact.cpp	/^        e_points,$/;"	e	enum:b2SeparationFunction::Type	file:
e_polygon	Collision/Shapes/b2Shape.h	/^        e_polygon = 2,$/;"	e	enum:b2Shape::Type
e_prismaticJoint	Dynamics/Joints/b2Joint.h	/^    e_prismaticJoint,$/;"	e	enum:b2JointType
e_pulleyJoint	Dynamics/Joints/b2Joint.h	/^    e_pulleyJoint,$/;"	e	enum:b2JointType
e_revoluteJoint	Dynamics/Joints/b2Joint.h	/^    e_revoluteJoint,$/;"	e	enum:b2JointType
e_ropeJoint	Dynamics/Joints/b2Joint.h	/^    e_ropeJoint$/;"	e	enum:b2JointType
e_separated	Collision/b2TimeOfImpact.h	/^        e_separated$/;"	e	enum:b2TOIOutput::State
e_shapeBit	Common/b2Draw.h	/^        e_shapeBit                = 0x0001,    \/\/\/< draw shapes$/;"	e	enum:b2Draw::__anon3
e_toiFlag	Dynamics/Contacts/b2Contact.h	/^        e_toiFlag            = 0x0020$/;"	e	enum:b2Contact::__anon6
e_toiFlag	Dynamics/b2Body.h	/^        e_toiFlag            = 0x0040$/;"	e	enum:b2Body::__anon4
e_touching	Collision/b2TimeOfImpact.h	/^        e_touching,$/;"	e	enum:b2TOIOutput::State
e_touchingFlag	Dynamics/Contacts/b2Contact.h	/^        e_touchingFlag        = 0x0002,$/;"	e	enum:b2Contact::__anon6
e_typeCount	Collision/Shapes/b2Shape.h	/^        e_typeCount = 4$/;"	e	enum:b2Shape::Type
e_unknown	Collision/b2CollideEdge.cpp	/^        e_unknown,$/;"	e	enum:b2EPAxis::Type	file:
e_unknown	Collision/b2TimeOfImpact.h	/^        e_unknown,$/;"	e	enum:b2TOIOutput::State
e_unknownJoint	Dynamics/Joints/b2Joint.h	/^    e_unknownJoint,$/;"	e	enum:b2JointType
e_vertex	Collision/b2Collision.h	/^        e_vertex = 0,$/;"	e	enum:b2ContactFeature::Type
e_weldJoint	Dynamics/Joints/b2Joint.h	/^    e_weldJoint,$/;"	e	enum:b2JointType
e_wheelJoint	Dynamics/Joints/b2Joint.h	/^    e_wheelJoint,$/;"	e	enum:b2JointType
enableLimit	Dynamics/Joints/b2PrismaticJoint.h	/^    bool enableLimit;$/;"	m	struct:b2PrismaticJointDef
enableLimit	Dynamics/Joints/b2RevoluteJoint.h	/^    bool enableLimit;$/;"	m	struct:b2RevoluteJointDef
enableMotor	Dynamics/Joints/b2PrismaticJoint.h	/^    bool enableMotor;$/;"	m	struct:b2PrismaticJointDef
enableMotor	Dynamics/Joints/b2RevoluteJoint.h	/^    bool enableMotor;$/;"	m	struct:b2RevoluteJointDef
enableMotor	Dynamics/Joints/b2WheelJoint.h	/^    bool enableMotor;$/;"	m	struct:b2WheelJointDef
ex	Common/b2Math.h	/^    b2Vec2 ex, ey;$/;"	m	struct:b2Mat22
ex	Common/b2Math.h	/^    b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33
ey	Common/b2Math.h	/^    b2Vec2 ex, ey;$/;"	m	struct:b2Mat22
ey	Common/b2Math.h	/^    b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33
ez	Common/b2Math.h	/^    b2Vec3 ex, ey, ez;$/;"	m	struct:b2Mat33
filter	Dynamics/b2Fixture.h	/^    b2Filter filter;$/;"	m	struct:b2FixtureDef
fixedRotation	Dynamics/b2Body.h	/^    bool fixedRotation;$/;"	m	struct:b2BodyDef
fixture	Dynamics/b2Fixture.h	/^    b2Fixture* fixture;$/;"	m	struct:b2FixtureProxy
float32	Common/b2Settings.h	/^typedef float float32;$/;"	t
float64	Common/b2Settings.h	/^typedef double float64;$/;"	t
fraction	Collision/b2Collision.h	/^    float32 fraction;$/;"	m	struct:b2RayCastOutput
frequencyHz	Dynamics/Joints/b2DistanceJoint.h	/^    float32 frequencyHz;$/;"	m	struct:b2DistanceJointDef
frequencyHz	Dynamics/Joints/b2MouseJoint.h	/^    float32 frequencyHz;$/;"	m	struct:b2MouseJointDef
frequencyHz	Dynamics/Joints/b2WeldJoint.h	/^    float32 frequencyHz;$/;"	m	struct:b2WeldJointDef
frequencyHz	Dynamics/Joints/b2WheelJoint.h	/^    float32 frequencyHz;$/;"	m	struct:b2WheelJointDef
friction	Dynamics/Contacts/b2ContactSolver.h	/^    float32 friction;$/;"	m	struct:b2ContactVelocityConstraint
friction	Dynamics/b2Fixture.h	/^    float32 friction;$/;"	m	struct:b2FixtureDef
g	Common/b2Draw.h	/^    float32 r, g, b;$/;"	m	struct:b2Color
gravity	Rope/b2Rope.h	/^    b2Vec2 gravity;$/;"	m	struct:b2RopeDef
gravityScale	Dynamics/b2Body.h	/^    float32 gravityScale;$/;"	m	struct:b2BodyDef
groundAnchorA	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 groundAnchorA;$/;"	m	struct:b2PulleyJointDef
groundAnchorB	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 groundAnchorB;$/;"	m	struct:b2PulleyJointDef
groupIndex	Dynamics/b2Fixture.h	/^    int16 groupIndex;$/;"	m	struct:b2Filter
height	Collision/b2DynamicTree.h	/^    int32 height;$/;"	m	struct:b2TreeNode
i1	Collision/b2CollideEdge.cpp	/^    int32 i1, i2;$/;"	m	struct:b2ReferenceFace	file:
i2	Collision/b2CollideEdge.cpp	/^    int32 i1, i2;$/;"	m	struct:b2ReferenceFace	file:
id	Collision/b2Collision.h	/^    b2ContactID id;            \/\/\/< uniquely identifies a contact point between two shapes$/;"	m	struct:b2ManifoldPoint
id	Collision/b2Collision.h	/^    b2ContactID id;$/;"	m	struct:b2ClipVertex
index	Collision/b2CollideEdge.cpp	/^    int32 index;$/;"	m	struct:b2EPAxis	file:
indexA	Collision/b2Collision.h	/^    uint8 indexA;        \/\/\/< Feature index on shapeA$/;"	m	struct:b2ContactFeature
indexA	Collision/b2Distance.cpp	/^    int32 indexA;    \/\/ wA index$/;"	m	struct:b2SimplexVertex	file:
indexA	Collision/b2Distance.h	/^    uint8 indexA[3];    \/\/\/< vertices on shape A$/;"	m	struct:b2SimplexCache
indexA	Dynamics/Contacts/b2ContactSolver.cpp	/^    int32 indexA;$/;"	m	struct:b2ContactPositionConstraint	file:
indexA	Dynamics/Contacts/b2ContactSolver.h	/^    int32 indexA;$/;"	m	struct:b2ContactVelocityConstraint
indexB	Collision/b2Collision.h	/^    uint8 indexB;        \/\/\/< Feature index on shapeB$/;"	m	struct:b2ContactFeature
indexB	Collision/b2Distance.cpp	/^    int32 indexB;    \/\/ wB index$/;"	m	struct:b2SimplexVertex	file:
indexB	Collision/b2Distance.h	/^    uint8 indexB[3];    \/\/\/< vertices on shape B$/;"	m	struct:b2SimplexCache
indexB	Dynamics/Contacts/b2ContactSolver.cpp	/^    int32 indexB;$/;"	m	struct:b2ContactPositionConstraint	file:
indexB	Dynamics/Contacts/b2ContactSolver.h	/^    int32 indexB;$/;"	m	struct:b2ContactVelocityConstraint
int16	Common/b2Settings.h	/^typedef signed short int16;$/;"	t
int32	Common/b2Settings.h	/^typedef signed int int32;$/;"	t
int8	Common/b2Settings.h	/^typedef signed char    int8;$/;"	t
invIA	Dynamics/Contacts/b2ContactSolver.cpp	/^    float32 invIA, invIB;$/;"	m	struct:b2ContactPositionConstraint	file:
invIA	Dynamics/Contacts/b2ContactSolver.h	/^    float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint
invIB	Dynamics/Contacts/b2ContactSolver.cpp	/^    float32 invIA, invIB;$/;"	m	struct:b2ContactPositionConstraint	file:
invIB	Dynamics/Contacts/b2ContactSolver.h	/^    float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint
invMassA	Dynamics/Contacts/b2ContactSolver.cpp	/^    float32 invMassA, invMassB;$/;"	m	struct:b2ContactPositionConstraint	file:
invMassA	Dynamics/Contacts/b2ContactSolver.h	/^    float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint
invMassB	Dynamics/Contacts/b2ContactSolver.cpp	/^    float32 invMassA, invMassB;$/;"	m	struct:b2ContactPositionConstraint	file:
invMassB	Dynamics/Contacts/b2ContactSolver.h	/^    float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint
inv_dt	Dynamics/b2TimeStep.h	/^    float32 inv_dt;        \/\/ inverse time step (0 if dt == 0).$/;"	m	struct:b2TimeStep
isSensor	Dynamics/b2Fixture.h	/^    bool isSensor;$/;"	m	struct:b2FixtureDef
iterations	Collision/b2Distance.h	/^    int32 iterations;    \/\/\/< number of GJK iterations used$/;"	m	struct:b2DistanceOutput
joint	Dynamics/Joints/b2Joint.h	/^    b2Joint* joint;            \/\/\/< the joint$/;"	m	struct:b2JointEdge
joint1	Dynamics/Joints/b2GearJoint.h	/^    b2Joint* joint1;$/;"	m	struct:b2GearJointDef
joint2	Dynamics/Joints/b2GearJoint.h	/^    b2Joint* joint2;$/;"	m	struct:b2GearJointDef
k2	Rope/b2Rope.h	/^    float32 k2;$/;"	m	struct:b2RopeDef
k3	Rope/b2Rope.h	/^    float32 k3;$/;"	m	struct:b2RopeDef
key	Collision/b2Collision.h	/^    uint32 key;                    \/\/\/< Used to quickly compare contact ids.$/;"	m	union:b2ContactID
length	Dynamics/Joints/b2DistanceJoint.h	/^    float32 length;$/;"	m	struct:b2DistanceJointDef
lengthA	Dynamics/Joints/b2PulleyJoint.h	/^    float32 lengthA;$/;"	m	struct:b2PulleyJointDef
lengthB	Dynamics/Joints/b2PulleyJoint.h	/^    float32 lengthB;$/;"	m	struct:b2PulleyJointDef
linear	Dynamics/Joints/b2Joint.h	/^    b2Vec2 linear;$/;"	m	struct:b2Jacobian
linearDamping	Dynamics/b2Body.h	/^    float32 linearDamping;$/;"	m	struct:b2BodyDef
linearVelocity	Dynamics/b2Body.h	/^    b2Vec2 linearVelocity;$/;"	m	struct:b2BodyDef
localAnchorA	Dynamics/Joints/b2DistanceJoint.h	/^    b2Vec2 localAnchorA;$/;"	m	struct:b2DistanceJointDef
localAnchorA	Dynamics/Joints/b2FrictionJoint.h	/^    b2Vec2 localAnchorA;$/;"	m	struct:b2FrictionJointDef
localAnchorA	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Vec2 localAnchorA;$/;"	m	struct:b2PrismaticJointDef
localAnchorA	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 localAnchorA;$/;"	m	struct:b2PulleyJointDef
localAnchorA	Dynamics/Joints/b2RevoluteJoint.h	/^    b2Vec2 localAnchorA;$/;"	m	struct:b2RevoluteJointDef
localAnchorA	Dynamics/Joints/b2RopeJoint.h	/^    b2Vec2 localAnchorA;$/;"	m	struct:b2RopeJointDef
localAnchorA	Dynamics/Joints/b2WeldJoint.h	/^    b2Vec2 localAnchorA;$/;"	m	struct:b2WeldJointDef
localAnchorA	Dynamics/Joints/b2WheelJoint.h	/^    b2Vec2 localAnchorA;$/;"	m	struct:b2WheelJointDef
localAnchorB	Dynamics/Joints/b2DistanceJoint.h	/^    b2Vec2 localAnchorB;$/;"	m	struct:b2DistanceJointDef
localAnchorB	Dynamics/Joints/b2FrictionJoint.h	/^    b2Vec2 localAnchorB;$/;"	m	struct:b2FrictionJointDef
localAnchorB	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Vec2 localAnchorB;$/;"	m	struct:b2PrismaticJointDef
localAnchorB	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 localAnchorB;$/;"	m	struct:b2PulleyJointDef
localAnchorB	Dynamics/Joints/b2RevoluteJoint.h	/^    b2Vec2 localAnchorB;$/;"	m	struct:b2RevoluteJointDef
localAnchorB	Dynamics/Joints/b2RopeJoint.h	/^    b2Vec2 localAnchorB;$/;"	m	struct:b2RopeJointDef
localAnchorB	Dynamics/Joints/b2WeldJoint.h	/^    b2Vec2 localAnchorB;$/;"	m	struct:b2WeldJointDef
localAnchorB	Dynamics/Joints/b2WheelJoint.h	/^    b2Vec2 localAnchorB;$/;"	m	struct:b2WheelJointDef
localAxisA	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Vec2 localAxisA;$/;"	m	struct:b2PrismaticJointDef
localAxisA	Dynamics/Joints/b2WheelJoint.h	/^    b2Vec2 localAxisA;$/;"	m	struct:b2WheelJointDef
localCenter	Common/b2Math.h	/^    b2Vec2 localCenter;    \/\/\/< local center of mass position$/;"	m	struct:b2Sweep
localCenterA	Dynamics/Contacts/b2ContactSolver.cpp	/^    b2Vec2 localCenterA, localCenterB;$/;"	m	struct:b2ContactPositionConstraint	file:
localCenterB	Dynamics/Contacts/b2ContactSolver.cpp	/^    b2Vec2 localCenterA, localCenterB;$/;"	m	struct:b2ContactPositionConstraint	file:
localNormal	Collision/b2Collision.h	/^    b2Vec2 localNormal;                                \/\/\/< not use for Type::e_points$/;"	m	struct:b2Manifold
localNormal	Dynamics/Contacts/b2ContactSolver.cpp	/^    b2Vec2 localNormal;$/;"	m	struct:b2ContactPositionConstraint	file:
localPoint	Collision/b2Collision.h	/^    b2Vec2 localPoint;                                \/\/\/< usage depends on manifold type$/;"	m	struct:b2Manifold
localPoint	Collision/b2Collision.h	/^    b2Vec2 localPoint;        \/\/\/< usage depends on manifold type$/;"	m	struct:b2ManifoldPoint
localPoint	Dynamics/Contacts/b2ContactSolver.cpp	/^    b2Vec2 localPoint;$/;"	m	struct:b2ContactPositionConstraint	file:
localPoints	Dynamics/Contacts/b2ContactSolver.cpp	/^    b2Vec2 localPoints[b2_maxManifoldPoints];$/;"	m	struct:b2ContactPositionConstraint	file:
lowerAngle	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 lowerAngle;$/;"	m	struct:b2RevoluteJointDef
lowerBound	Collision/b2Collision.h	/^    b2Vec2 lowerBound;    \/\/\/< the lower vertex$/;"	m	struct:b2AABB
lowerTranslation	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 lowerTranslation;$/;"	m	struct:b2PrismaticJointDef
m_C	Dynamics/Joints/b2MouseJoint.h	/^    b2Vec2 m_C;$/;"	m	class:b2MouseJoint
m_I	Dynamics/b2Body.h	/^    float32 m_I, m_invI;$/;"	m	class:b2Body
m_JvAC	Dynamics/Joints/b2GearJoint.h	/^    b2Vec2 m_JvAC, m_JvBD;$/;"	m	class:b2GearJoint
m_JvBD	Dynamics/Joints/b2GearJoint.h	/^    b2Vec2 m_JvAC, m_JvBD;$/;"	m	class:b2GearJoint
m_JwA	Dynamics/Joints/b2GearJoint.h	/^    float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_JwB	Dynamics/Joints/b2GearJoint.h	/^    float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_JwC	Dynamics/Joints/b2GearJoint.h	/^    float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_JwD	Dynamics/Joints/b2GearJoint.h	/^    float32 m_JwA, m_JwB, m_JwC, m_JwD;$/;"	m	class:b2GearJoint
m_K	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Mat33 m_K;$/;"	m	class:b2PrismaticJoint
m_Ls	Rope/b2Rope.h	/^    float32* m_Ls;$/;"	m	class:b2Rope
m_a1	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_a1, m_a2;$/;"	m	class:b2PrismaticJoint
m_a2	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_a1, m_a2;$/;"	m	class:b2PrismaticJoint
m_allocation	Common/b2StackAllocator.h	/^    int32 m_allocation;$/;"	m	class:b2StackAllocator
m_allocator	Dynamics/Contacts/b2ContactSolver.h	/^    b2StackAllocator* m_allocator;$/;"	m	class:b2ContactSolver
m_allocator	Dynamics/b2ContactManager.h	/^    b2BlockAllocator* m_allocator;$/;"	m	class:b2ContactManager
m_allocator	Dynamics/b2Island.h	/^    b2StackAllocator* m_allocator;$/;"	m	class:b2Island
m_allowSleep	Dynamics/b2World.h	/^    bool m_allowSleep;$/;"	m	class:b2World
m_angularDamping	Dynamics/b2Body.h	/^    float32 m_angularDamping;$/;"	m	class:b2Body
m_angularImpulse	Dynamics/Joints/b2FrictionJoint.h	/^    float32 m_angularImpulse;$/;"	m	class:b2FrictionJoint
m_angularMass	Dynamics/Joints/b2FrictionJoint.h	/^    float32 m_angularMass;$/;"	m	class:b2FrictionJoint
m_angularVelocity	Dynamics/b2Body.h	/^    float32 m_angularVelocity;$/;"	m	class:b2Body
m_array	Common/b2GrowableStack.h	/^    T m_array[N];$/;"	m	class:b2GrowableStack
m_as	Rope/b2Rope.h	/^    float32* m_as;$/;"	m	class:b2Rope
m_ax	Dynamics/Joints/b2WheelJoint.h	/^    b2Vec2 m_ax, m_ay;$/;"	m	class:b2WheelJoint
m_axis	Collision/b2TimeOfImpact.cpp	/^    b2Vec2 m_axis;$/;"	m	struct:b2SeparationFunction	file:
m_axis	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Vec2 m_axis, m_perp;$/;"	m	class:b2PrismaticJoint
m_ay	Dynamics/Joints/b2WheelJoint.h	/^    b2Vec2 m_ax, m_ay;$/;"	m	class:b2WheelJoint
m_beta	Dynamics/Joints/b2MouseJoint.h	/^    float32 m_beta;$/;"	m	class:b2MouseJoint
m_bias	Dynamics/Joints/b2DistanceJoint.h	/^    float32 m_bias;$/;"	m	class:b2DistanceJoint
m_bias	Dynamics/Joints/b2WeldJoint.h	/^    float32 m_bias;$/;"	m	class:b2WeldJoint
m_bias	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_bias;$/;"	m	class:b2WheelJoint
m_blockAllocator	Dynamics/b2World.h	/^    b2BlockAllocator m_blockAllocator;$/;"	m	class:b2World
m_bodies	Dynamics/b2Island.h	/^    b2Body** m_bodies;$/;"	m	class:b2Island
m_body	Dynamics/b2Fixture.h	/^    b2Body* m_body;$/;"	m	class:b2Fixture
m_bodyA	Dynamics/Joints/b2Joint.h	/^    b2Body* m_bodyA;$/;"	m	class:b2Joint
m_bodyB	Dynamics/Joints/b2Joint.h	/^    b2Body* m_bodyB;$/;"	m	class:b2Joint
m_bodyC	Dynamics/Joints/b2GearJoint.h	/^    b2Body* m_bodyC;$/;"	m	class:b2GearJoint
m_bodyCapacity	Dynamics/b2Island.h	/^    int32 m_bodyCapacity;$/;"	m	class:b2Island
m_bodyCount	Dynamics/b2Island.h	/^    int32 m_bodyCount;$/;"	m	class:b2Island
m_bodyCount	Dynamics/b2World.h	/^    int32 m_bodyCount;$/;"	m	class:b2World
m_bodyD	Dynamics/Joints/b2GearJoint.h	/^    b2Body* m_bodyD;$/;"	m	class:b2GearJoint
m_bodyList	Dynamics/b2World.h	/^    b2Body* m_bodyList;$/;"	m	class:b2World
m_broadPhase	Dynamics/b2ContactManager.h	/^    b2BroadPhase m_broadPhase;$/;"	m	class:b2ContactManager
m_buffer	Collision/b2Distance.h	/^    b2Vec2 m_buffer[2];$/;"	m	struct:b2DistanceProxy
m_capacity	Common/b2GrowableStack.h	/^    int32 m_capacity;$/;"	m	class:b2GrowableStack
m_centroid	Collision/Shapes/b2PolygonShape.h	/^    b2Vec2 m_centroid;$/;"	m	class:b2PolygonShape
m_centroidB	Collision/b2CollideEdge.cpp	/^    b2Vec2 m_centroidB;$/;"	m	struct:b2EPCollider	file:
m_chunkCount	Common/b2BlockAllocator.h	/^    int32 m_chunkCount;$/;"	m	class:b2BlockAllocator
m_chunkSpace	Common/b2BlockAllocator.h	/^    int32 m_chunkSpace;$/;"	m	class:b2BlockAllocator
m_chunks	Common/b2BlockAllocator.h	/^    b2Chunk* m_chunks;$/;"	m	class:b2BlockAllocator
m_collideConnected	Dynamics/Joints/b2Joint.h	/^    bool m_collideConnected;$/;"	m	class:b2Joint
m_constant	Dynamics/Joints/b2GearJoint.h	/^    float32 m_constant;$/;"	m	class:b2GearJoint
m_constant	Dynamics/Joints/b2PulleyJoint.h	/^    float32 m_constant;$/;"	m	class:b2PulleyJoint
m_contactCapacity	Dynamics/b2Island.h	/^    int32 m_contactCapacity;$/;"	m	class:b2Island
m_contactCount	Dynamics/b2ContactManager.h	/^    int32 m_contactCount;$/;"	m	class:b2ContactManager
m_contactCount	Dynamics/b2Island.h	/^    int32 m_contactCount;$/;"	m	class:b2Island
m_contactFilter	Dynamics/b2ContactManager.h	/^    b2ContactFilter* m_contactFilter;$/;"	m	class:b2ContactManager
m_contactList	Dynamics/b2Body.h	/^    b2ContactEdge* m_contactList;$/;"	m	class:b2Body
m_contactList	Dynamics/b2ContactManager.h	/^    b2Contact* m_contactList;$/;"	m	class:b2ContactManager
m_contactListener	Dynamics/b2ContactManager.h	/^    b2ContactListener* m_contactListener;$/;"	m	class:b2ContactManager
m_contactManager	Dynamics/b2World.h	/^    b2ContactManager m_contactManager;$/;"	m	class:b2World
m_contacts	Dynamics/Contacts/b2ContactSolver.h	/^    b2Contact** m_contacts;$/;"	m	class:b2ContactSolver
m_contacts	Dynamics/b2Island.h	/^    b2Contact** m_contacts;$/;"	m	class:b2Island
m_continuousPhysics	Dynamics/b2World.h	/^    bool m_continuousPhysics;$/;"	m	class:b2World
m_count	Collision/Shapes/b2ChainShape.h	/^    int32 m_count;$/;"	m	class:b2ChainShape
m_count	Collision/b2Distance.cpp	/^    int32 m_count;$/;"	m	struct:b2Simplex	file:
m_count	Collision/b2Distance.h	/^    int32 m_count;$/;"	m	struct:b2DistanceProxy
m_count	Common/b2GrowableStack.h	/^    int32 m_count;$/;"	m	class:b2GrowableStack
m_count	Dynamics/Contacts/b2ContactSolver.h	/^    int m_count;$/;"	m	class:b2ContactSolver
m_count	Rope/b2Rope.h	/^    int32 m_count;$/;"	m	class:b2Rope
m_damping	Rope/b2Rope.h	/^    float32 m_damping;$/;"	m	class:b2Rope
m_dampingRatio	Dynamics/Joints/b2DistanceJoint.h	/^    float32 m_dampingRatio;$/;"	m	class:b2DistanceJoint
m_dampingRatio	Dynamics/Joints/b2MouseJoint.h	/^    float32 m_dampingRatio;$/;"	m	class:b2MouseJoint
m_dampingRatio	Dynamics/Joints/b2WeldJoint.h	/^    float32 m_dampingRatio;$/;"	m	class:b2WeldJoint
m_dampingRatio	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_dampingRatio;$/;"	m	class:b2WheelJoint
m_data	Common/b2StackAllocator.h	/^    char m_data[b2_stackSize];$/;"	m	class:b2StackAllocator
m_debugDraw	Dynamics/b2World.h	/^    b2Draw* m_debugDraw;$/;"	m	class:b2World
m_density	Dynamics/b2Fixture.h	/^    float32 m_density;$/;"	m	class:b2Fixture
m_destructionListener	Dynamics/b2World.h	/^    b2DestructionListener* m_destructionListener;$/;"	m	class:b2World
m_drawFlags	Common/b2Draw.h	/^    uint32 m_drawFlags;$/;"	m	class:b2Draw
m_edgeA	Dynamics/Joints/b2Joint.h	/^    b2JointEdge m_edgeA;$/;"	m	class:b2Joint
m_edgeB	Dynamics/Joints/b2Joint.h	/^    b2JointEdge m_edgeB;$/;"	m	class:b2Joint
m_enableLimit	Dynamics/Joints/b2PrismaticJoint.h	/^    bool m_enableLimit;$/;"	m	class:b2PrismaticJoint
m_enableLimit	Dynamics/Joints/b2RevoluteJoint.h	/^    bool m_enableLimit;$/;"	m	class:b2RevoluteJoint
m_enableMotor	Dynamics/Joints/b2PrismaticJoint.h	/^    bool m_enableMotor;$/;"	m	class:b2PrismaticJoint
m_enableMotor	Dynamics/Joints/b2RevoluteJoint.h	/^    bool m_enableMotor;$/;"	m	class:b2RevoluteJoint
m_enableMotor	Dynamics/Joints/b2WheelJoint.h	/^    bool m_enableMotor;$/;"	m	class:b2WheelJoint
m_entries	Common/b2StackAllocator.h	/^    b2StackEntry m_entries[b2_maxStackEntries];$/;"	m	class:b2StackAllocator
m_entryCount	Common/b2StackAllocator.h	/^    int32 m_entryCount;$/;"	m	class:b2StackAllocator
m_filter	Dynamics/b2Fixture.h	/^    b2Filter m_filter;$/;"	m	class:b2Fixture
m_fixtureA	Dynamics/Contacts/b2Contact.h	/^    b2Fixture* m_fixtureA;$/;"	m	class:b2Contact
m_fixtureB	Dynamics/Contacts/b2Contact.h	/^    b2Fixture* m_fixtureB;$/;"	m	class:b2Contact
m_fixtureCount	Dynamics/b2Body.h	/^    int32 m_fixtureCount;$/;"	m	class:b2Body
m_fixtureList	Dynamics/b2Body.h	/^    b2Fixture* m_fixtureList;$/;"	m	class:b2Body
m_flags	Dynamics/Contacts/b2Contact.h	/^    uint32 m_flags;$/;"	m	class:b2Contact
m_flags	Dynamics/b2Body.h	/^    uint16 m_flags;$/;"	m	class:b2Body
m_flags	Dynamics/b2World.h	/^    int32 m_flags;$/;"	m	class:b2World
m_force	Dynamics/b2Body.h	/^    b2Vec2 m_force;$/;"	m	class:b2Body
m_freeList	Collision/b2DynamicTree.h	/^    int32 m_freeList;$/;"	m	class:b2DynamicTree
m_freeLists	Common/b2BlockAllocator.h	/^    b2Block* m_freeLists[b2_blockSizes];$/;"	m	class:b2BlockAllocator
m_frequencyHz	Dynamics/Joints/b2DistanceJoint.h	/^    float32 m_frequencyHz;$/;"	m	class:b2DistanceJoint
m_frequencyHz	Dynamics/Joints/b2MouseJoint.h	/^    float32 m_frequencyHz;$/;"	m	class:b2MouseJoint
m_frequencyHz	Dynamics/Joints/b2WeldJoint.h	/^    float32 m_frequencyHz;$/;"	m	class:b2WeldJoint
m_frequencyHz	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_frequencyHz;$/;"	m	class:b2WheelJoint
m_friction	Dynamics/Contacts/b2Contact.h	/^    float32 m_friction;$/;"	m	class:b2Contact
m_friction	Dynamics/b2Fixture.h	/^    float32 m_friction;$/;"	m	class:b2Fixture
m_front	Collision/b2CollideEdge.cpp	/^    bool m_front;$/;"	m	struct:b2EPCollider	file:
m_gamma	Dynamics/Joints/b2DistanceJoint.h	/^    float32 m_gamma;$/;"	m	class:b2DistanceJoint
m_gamma	Dynamics/Joints/b2MouseJoint.h	/^    float32 m_gamma;$/;"	m	class:b2MouseJoint
m_gamma	Dynamics/Joints/b2WeldJoint.h	/^    float32 m_gamma;$/;"	m	class:b2WeldJoint
m_gamma	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_gamma;$/;"	m	class:b2WheelJoint
m_gravity	Dynamics/b2World.h	/^    b2Vec2 m_gravity;$/;"	m	class:b2World
m_gravity	Rope/b2Rope.h	/^    b2Vec2 m_gravity;$/;"	m	class:b2Rope
m_gravityScale	Dynamics/b2Body.h	/^    float32 m_gravityScale;$/;"	m	class:b2Body
m_groundAnchorA	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 m_groundAnchorA;$/;"	m	class:b2PulleyJoint
m_groundAnchorB	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 m_groundAnchorB;$/;"	m	class:b2PulleyJoint
m_hasNextVertex	Collision/Shapes/b2ChainShape.h	/^    bool m_hasPrevVertex, m_hasNextVertex;$/;"	m	class:b2ChainShape
m_hasPrevVertex	Collision/Shapes/b2ChainShape.h	/^    bool m_hasPrevVertex, m_hasNextVertex;$/;"	m	class:b2ChainShape
m_hasVertex0	Collision/Shapes/b2EdgeShape.h	/^    bool m_hasVertex0, m_hasVertex3;$/;"	m	class:b2EdgeShape
m_hasVertex3	Collision/Shapes/b2EdgeShape.h	/^    bool m_hasVertex0, m_hasVertex3;$/;"	m	class:b2EdgeShape
m_iA	Dynamics/Joints/b2GearJoint.h	/^    float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_iB	Dynamics/Joints/b2GearJoint.h	/^    float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_iC	Dynamics/Joints/b2GearJoint.h	/^    float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_iD	Dynamics/Joints/b2GearJoint.h	/^    float32 m_iA, m_iB, m_iC, m_iD;$/;"	m	class:b2GearJoint
m_impulse	Dynamics/Joints/b2DistanceJoint.h	/^    float32 m_impulse;$/;"	m	class:b2DistanceJoint
m_impulse	Dynamics/Joints/b2GearJoint.h	/^    float32 m_impulse;$/;"	m	class:b2GearJoint
m_impulse	Dynamics/Joints/b2MouseJoint.h	/^    b2Vec2 m_impulse;$/;"	m	class:b2MouseJoint
m_impulse	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Vec3 m_impulse;$/;"	m	class:b2PrismaticJoint
m_impulse	Dynamics/Joints/b2PulleyJoint.h	/^    float32 m_impulse;$/;"	m	class:b2PulleyJoint
m_impulse	Dynamics/Joints/b2RevoluteJoint.h	/^    b2Vec3 m_impulse;$/;"	m	class:b2RevoluteJoint
m_impulse	Dynamics/Joints/b2RopeJoint.h	/^    float32 m_impulse;$/;"	m	class:b2RopeJoint
m_impulse	Dynamics/Joints/b2WeldJoint.h	/^    b2Vec3 m_impulse;$/;"	m	class:b2WeldJoint
m_impulse	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_impulse;$/;"	m	class:b2WheelJoint
m_ims	Rope/b2Rope.h	/^    float32* m_ims;$/;"	m	class:b2Rope
m_index	Common/b2StackAllocator.h	/^    int32 m_index;$/;"	m	class:b2StackAllocator
m_index	Dynamics/Joints/b2Joint.h	/^    int32 m_index;$/;"	m	class:b2Joint
m_indexA	Dynamics/Contacts/b2Contact.h	/^    int32 m_indexA;$/;"	m	class:b2Contact
m_indexA	Dynamics/Joints/b2DistanceJoint.h	/^    int32 m_indexA;$/;"	m	class:b2DistanceJoint
m_indexA	Dynamics/Joints/b2FrictionJoint.h	/^    int32 m_indexA;$/;"	m	class:b2FrictionJoint
m_indexA	Dynamics/Joints/b2GearJoint.h	/^    int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_indexA	Dynamics/Joints/b2MouseJoint.h	/^    int32 m_indexA;$/;"	m	class:b2MouseJoint
m_indexA	Dynamics/Joints/b2PrismaticJoint.h	/^    int32 m_indexA;$/;"	m	class:b2PrismaticJoint
m_indexA	Dynamics/Joints/b2PulleyJoint.h	/^    int32 m_indexA;$/;"	m	class:b2PulleyJoint
m_indexA	Dynamics/Joints/b2RevoluteJoint.h	/^    int32 m_indexA;$/;"	m	class:b2RevoluteJoint
m_indexA	Dynamics/Joints/b2RopeJoint.h	/^    int32 m_indexA;$/;"	m	class:b2RopeJoint
m_indexA	Dynamics/Joints/b2WeldJoint.h	/^    int32 m_indexA;$/;"	m	class:b2WeldJoint
m_indexA	Dynamics/Joints/b2WheelJoint.h	/^    int32 m_indexA;$/;"	m	class:b2WheelJoint
m_indexB	Dynamics/Contacts/b2Contact.h	/^    int32 m_indexB;$/;"	m	class:b2Contact
m_indexB	Dynamics/Joints/b2DistanceJoint.h	/^    int32 m_indexB;$/;"	m	class:b2DistanceJoint
m_indexB	Dynamics/Joints/b2FrictionJoint.h	/^    int32 m_indexB;$/;"	m	class:b2FrictionJoint
m_indexB	Dynamics/Joints/b2GearJoint.h	/^    int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_indexB	Dynamics/Joints/b2MouseJoint.h	/^    int32 m_indexB;$/;"	m	class:b2MouseJoint
m_indexB	Dynamics/Joints/b2PrismaticJoint.h	/^    int32 m_indexB;$/;"	m	class:b2PrismaticJoint
m_indexB	Dynamics/Joints/b2PulleyJoint.h	/^    int32 m_indexB;$/;"	m	class:b2PulleyJoint
m_indexB	Dynamics/Joints/b2RevoluteJoint.h	/^    int32 m_indexB;$/;"	m	class:b2RevoluteJoint
m_indexB	Dynamics/Joints/b2RopeJoint.h	/^    int32 m_indexB;$/;"	m	class:b2RopeJoint
m_indexB	Dynamics/Joints/b2WeldJoint.h	/^    int32 m_indexB;$/;"	m	class:b2WeldJoint
m_indexB	Dynamics/Joints/b2WheelJoint.h	/^    int32 m_indexB;$/;"	m	class:b2WheelJoint
m_indexC	Dynamics/Joints/b2GearJoint.h	/^    int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_indexD	Dynamics/Joints/b2GearJoint.h	/^    int32 m_indexA, m_indexB, m_indexC, m_indexD;$/;"	m	class:b2GearJoint
m_insertionCount	Collision/b2DynamicTree.h	/^    int32 m_insertionCount;$/;"	m	class:b2DynamicTree
m_invI	Dynamics/b2Body.h	/^    float32 m_I, m_invI;$/;"	m	class:b2Body
m_invIA	Dynamics/Joints/b2DistanceJoint.h	/^    float32 m_invIA;$/;"	m	class:b2DistanceJoint
m_invIA	Dynamics/Joints/b2FrictionJoint.h	/^    float32 m_invIA;$/;"	m	class:b2FrictionJoint
m_invIA	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_invIA;$/;"	m	class:b2PrismaticJoint
m_invIA	Dynamics/Joints/b2PulleyJoint.h	/^    float32 m_invIA;$/;"	m	class:b2PulleyJoint
m_invIA	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 m_invIA;$/;"	m	class:b2RevoluteJoint
m_invIA	Dynamics/Joints/b2RopeJoint.h	/^    float32 m_invIA;$/;"	m	class:b2RopeJoint
m_invIA	Dynamics/Joints/b2WeldJoint.h	/^    float32 m_invIA;$/;"	m	class:b2WeldJoint
m_invIA	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_invIA;$/;"	m	class:b2WheelJoint
m_invIB	Dynamics/Joints/b2DistanceJoint.h	/^    float32 m_invIB;$/;"	m	class:b2DistanceJoint
m_invIB	Dynamics/Joints/b2FrictionJoint.h	/^    float32 m_invIB;$/;"	m	class:b2FrictionJoint
m_invIB	Dynamics/Joints/b2MouseJoint.h	/^    float32 m_invIB;$/;"	m	class:b2MouseJoint
m_invIB	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_invIB;$/;"	m	class:b2PrismaticJoint
m_invIB	Dynamics/Joints/b2PulleyJoint.h	/^    float32 m_invIB;$/;"	m	class:b2PulleyJoint
m_invIB	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 m_invIB;$/;"	m	class:b2RevoluteJoint
m_invIB	Dynamics/Joints/b2RopeJoint.h	/^    float32 m_invIB;$/;"	m	class:b2RopeJoint
m_invIB	Dynamics/Joints/b2WeldJoint.h	/^    float32 m_invIB;$/;"	m	class:b2WeldJoint
m_invIB	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_invIB;$/;"	m	class:b2WheelJoint
m_invMass	Dynamics/b2Body.h	/^    float32 m_mass, m_invMass;$/;"	m	class:b2Body
m_invMassA	Dynamics/Joints/b2DistanceJoint.h	/^    float32 m_invMassA;$/;"	m	class:b2DistanceJoint
m_invMassA	Dynamics/Joints/b2FrictionJoint.h	/^    float32 m_invMassA;$/;"	m	class:b2FrictionJoint
m_invMassA	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_invMassA;$/;"	m	class:b2PrismaticJoint
m_invMassA	Dynamics/Joints/b2PulleyJoint.h	/^    float32 m_invMassA;$/;"	m	class:b2PulleyJoint
m_invMassA	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 m_invMassA;$/;"	m	class:b2RevoluteJoint
m_invMassA	Dynamics/Joints/b2RopeJoint.h	/^    float32 m_invMassA;$/;"	m	class:b2RopeJoint
m_invMassA	Dynamics/Joints/b2WeldJoint.h	/^    float32 m_invMassA;$/;"	m	class:b2WeldJoint
m_invMassA	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_invMassA;$/;"	m	class:b2WheelJoint
m_invMassB	Dynamics/Joints/b2DistanceJoint.h	/^    float32 m_invMassB;$/;"	m	class:b2DistanceJoint
m_invMassB	Dynamics/Joints/b2FrictionJoint.h	/^    float32 m_invMassB;$/;"	m	class:b2FrictionJoint
m_invMassB	Dynamics/Joints/b2MouseJoint.h	/^    float32 m_invMassB;$/;"	m	class:b2MouseJoint
m_invMassB	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_invMassB;$/;"	m	class:b2PrismaticJoint
m_invMassB	Dynamics/Joints/b2PulleyJoint.h	/^    float32 m_invMassB;$/;"	m	class:b2PulleyJoint
m_invMassB	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 m_invMassB;$/;"	m	class:b2RevoluteJoint
m_invMassB	Dynamics/Joints/b2RopeJoint.h	/^    float32 m_invMassB;$/;"	m	class:b2RopeJoint
m_invMassB	Dynamics/Joints/b2WeldJoint.h	/^    float32 m_invMassB;$/;"	m	class:b2WeldJoint
m_invMassB	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_invMassB;$/;"	m	class:b2WheelJoint
m_inv_dt0	Dynamics/b2World.h	/^    float32 m_inv_dt0;$/;"	m	class:b2World
m_isSensor	Dynamics/b2Fixture.h	/^    bool m_isSensor;$/;"	m	class:b2Fixture
m_islandFlag	Dynamics/Joints/b2Joint.h	/^    bool m_islandFlag;$/;"	m	class:b2Joint
m_islandIndex	Dynamics/b2Body.h	/^    int32 m_islandIndex;$/;"	m	class:b2Body
m_joint1	Dynamics/Joints/b2GearJoint.h	/^    b2Joint* m_joint1;$/;"	m	class:b2GearJoint
m_joint2	Dynamics/Joints/b2GearJoint.h	/^    b2Joint* m_joint2;$/;"	m	class:b2GearJoint
m_jointCapacity	Dynamics/b2Island.h	/^    int32 m_jointCapacity;$/;"	m	class:b2Island
m_jointCount	Dynamics/b2Island.h	/^    int32 m_jointCount;$/;"	m	class:b2Island
m_jointCount	Dynamics/b2World.h	/^    int32 m_jointCount;$/;"	m	class:b2World
m_jointList	Dynamics/b2Body.h	/^    b2JointEdge* m_jointList;$/;"	m	class:b2Body
m_jointList	Dynamics/b2World.h	/^    b2Joint* m_jointList;$/;"	m	class:b2World
m_joints	Dynamics/b2Island.h	/^    b2Joint** m_joints;$/;"	m	class:b2Island
m_k2	Rope/b2Rope.h	/^    float32 m_k2;$/;"	m	class:b2Rope
m_k3	Rope/b2Rope.h	/^    float32 m_k3;$/;"	m	class:b2Rope
m_lcA	Dynamics/Joints/b2GearJoint.h	/^    b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_lcB	Dynamics/Joints/b2GearJoint.h	/^    b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_lcC	Dynamics/Joints/b2GearJoint.h	/^    b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_lcD	Dynamics/Joints/b2GearJoint.h	/^    b2Vec2 m_lcA, m_lcB, m_lcC, m_lcD;$/;"	m	class:b2GearJoint
m_length	Dynamics/Joints/b2DistanceJoint.h	/^    float32 m_length;$/;"	m	class:b2DistanceJoint
m_length	Dynamics/Joints/b2RopeJoint.h	/^    float32 m_length;$/;"	m	class:b2RopeJoint
m_lengthA	Dynamics/Joints/b2PulleyJoint.h	/^    float32 m_lengthA;$/;"	m	class:b2PulleyJoint
m_lengthB	Dynamics/Joints/b2PulleyJoint.h	/^    float32 m_lengthB;$/;"	m	class:b2PulleyJoint
m_limitState	Dynamics/Joints/b2PrismaticJoint.h	/^    b2LimitState m_limitState;$/;"	m	class:b2PrismaticJoint
m_limitState	Dynamics/Joints/b2RevoluteJoint.h	/^    b2LimitState m_limitState;$/;"	m	class:b2RevoluteJoint
m_linearDamping	Dynamics/b2Body.h	/^    float32 m_linearDamping;$/;"	m	class:b2Body
m_linearImpulse	Dynamics/Joints/b2FrictionJoint.h	/^    b2Vec2 m_linearImpulse;$/;"	m	class:b2FrictionJoint
m_linearMass	Dynamics/Joints/b2FrictionJoint.h	/^    b2Mat22 m_linearMass;$/;"	m	class:b2FrictionJoint
m_linearVelocity	Dynamics/b2Body.h	/^    b2Vec2 m_linearVelocity;$/;"	m	class:b2Body
m_listener	Dynamics/b2Island.h	/^    b2ContactListener* m_listener;$/;"	m	class:b2Island
m_localAnchorA	Dynamics/Joints/b2DistanceJoint.h	/^    b2Vec2 m_localAnchorA;$/;"	m	class:b2DistanceJoint
m_localAnchorA	Dynamics/Joints/b2FrictionJoint.h	/^    b2Vec2 m_localAnchorA;$/;"	m	class:b2FrictionJoint
m_localAnchorA	Dynamics/Joints/b2GearJoint.h	/^    b2Vec2 m_localAnchorA;$/;"	m	class:b2GearJoint
m_localAnchorA	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Vec2 m_localAnchorA;$/;"	m	class:b2PrismaticJoint
m_localAnchorA	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 m_localAnchorA;$/;"	m	class:b2PulleyJoint
m_localAnchorA	Dynamics/Joints/b2RevoluteJoint.h	/^    b2Vec2 m_localAnchorA;$/;"	m	class:b2RevoluteJoint
m_localAnchorA	Dynamics/Joints/b2RopeJoint.h	/^    b2Vec2 m_localAnchorA;$/;"	m	class:b2RopeJoint
m_localAnchorA	Dynamics/Joints/b2WeldJoint.h	/^    b2Vec2 m_localAnchorA;$/;"	m	class:b2WeldJoint
m_localAnchorA	Dynamics/Joints/b2WheelJoint.h	/^    b2Vec2 m_localAnchorA;$/;"	m	class:b2WheelJoint
m_localAnchorB	Dynamics/Joints/b2DistanceJoint.h	/^    b2Vec2 m_localAnchorB;$/;"	m	class:b2DistanceJoint
m_localAnchorB	Dynamics/Joints/b2FrictionJoint.h	/^    b2Vec2 m_localAnchorB;$/;"	m	class:b2FrictionJoint
m_localAnchorB	Dynamics/Joints/b2GearJoint.h	/^    b2Vec2 m_localAnchorB;$/;"	m	class:b2GearJoint
m_localAnchorB	Dynamics/Joints/b2MouseJoint.h	/^    b2Vec2 m_localAnchorB;$/;"	m	class:b2MouseJoint
m_localAnchorB	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Vec2 m_localAnchorB;$/;"	m	class:b2PrismaticJoint
m_localAnchorB	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 m_localAnchorB;$/;"	m	class:b2PulleyJoint
m_localAnchorB	Dynamics/Joints/b2RevoluteJoint.h	/^    b2Vec2 m_localAnchorB;$/;"	m	class:b2RevoluteJoint
m_localAnchorB	Dynamics/Joints/b2RopeJoint.h	/^    b2Vec2 m_localAnchorB;$/;"	m	class:b2RopeJoint
m_localAnchorB	Dynamics/Joints/b2WeldJoint.h	/^    b2Vec2 m_localAnchorB;$/;"	m	class:b2WeldJoint
m_localAnchorB	Dynamics/Joints/b2WheelJoint.h	/^    b2Vec2 m_localAnchorB;$/;"	m	class:b2WheelJoint
m_localAnchorC	Dynamics/Joints/b2GearJoint.h	/^    b2Vec2 m_localAnchorC;$/;"	m	class:b2GearJoint
m_localAnchorD	Dynamics/Joints/b2GearJoint.h	/^    b2Vec2 m_localAnchorD;$/;"	m	class:b2GearJoint
m_localAxisC	Dynamics/Joints/b2GearJoint.h	/^    b2Vec2 m_localAxisC;$/;"	m	class:b2GearJoint
m_localAxisD	Dynamics/Joints/b2GearJoint.h	/^    b2Vec2 m_localAxisD;$/;"	m	class:b2GearJoint
m_localCenterA	Dynamics/Joints/b2DistanceJoint.h	/^    b2Vec2 m_localCenterA;$/;"	m	class:b2DistanceJoint
m_localCenterA	Dynamics/Joints/b2FrictionJoint.h	/^    b2Vec2 m_localCenterA;$/;"	m	class:b2FrictionJoint
m_localCenterA	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Vec2 m_localCenterA;$/;"	m	class:b2PrismaticJoint
m_localCenterA	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 m_localCenterA;$/;"	m	class:b2PulleyJoint
m_localCenterA	Dynamics/Joints/b2RevoluteJoint.h	/^    b2Vec2 m_localCenterA;$/;"	m	class:b2RevoluteJoint
m_localCenterA	Dynamics/Joints/b2RopeJoint.h	/^    b2Vec2 m_localCenterA;$/;"	m	class:b2RopeJoint
m_localCenterA	Dynamics/Joints/b2WeldJoint.h	/^    b2Vec2 m_localCenterA;$/;"	m	class:b2WeldJoint
m_localCenterA	Dynamics/Joints/b2WheelJoint.h	/^    b2Vec2 m_localCenterA;$/;"	m	class:b2WheelJoint
m_localCenterB	Dynamics/Joints/b2DistanceJoint.h	/^    b2Vec2 m_localCenterB;$/;"	m	class:b2DistanceJoint
m_localCenterB	Dynamics/Joints/b2FrictionJoint.h	/^    b2Vec2 m_localCenterB;$/;"	m	class:b2FrictionJoint
m_localCenterB	Dynamics/Joints/b2MouseJoint.h	/^    b2Vec2 m_localCenterB;$/;"	m	class:b2MouseJoint
m_localCenterB	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Vec2 m_localCenterB;$/;"	m	class:b2PrismaticJoint
m_localCenterB	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 m_localCenterB;$/;"	m	class:b2PulleyJoint
m_localCenterB	Dynamics/Joints/b2RevoluteJoint.h	/^    b2Vec2 m_localCenterB;$/;"	m	class:b2RevoluteJoint
m_localCenterB	Dynamics/Joints/b2RopeJoint.h	/^    b2Vec2 m_localCenterB;$/;"	m	class:b2RopeJoint
m_localCenterB	Dynamics/Joints/b2WeldJoint.h	/^    b2Vec2 m_localCenterB;$/;"	m	class:b2WeldJoint
m_localCenterB	Dynamics/Joints/b2WheelJoint.h	/^    b2Vec2 m_localCenterB;$/;"	m	class:b2WheelJoint
m_localPoint	Collision/b2TimeOfImpact.cpp	/^    b2Vec2 m_localPoint;$/;"	m	struct:b2SeparationFunction	file:
m_localXAxisA	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Vec2 m_localXAxisA;$/;"	m	class:b2PrismaticJoint
m_localXAxisA	Dynamics/Joints/b2WheelJoint.h	/^    b2Vec2 m_localXAxisA;$/;"	m	class:b2WheelJoint
m_localYAxisA	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Vec2 m_localYAxisA;$/;"	m	class:b2PrismaticJoint
m_localYAxisA	Dynamics/Joints/b2WheelJoint.h	/^    b2Vec2 m_localYAxisA;$/;"	m	class:b2WheelJoint
m_lowerAngle	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 m_lowerAngle;$/;"	m	class:b2RevoluteJoint
m_lowerLimit	Collision/b2CollideEdge.cpp	/^    b2Vec2 m_lowerLimit, m_upperLimit;$/;"	m	struct:b2EPCollider	file:
m_lowerTranslation	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_lowerTranslation;$/;"	m	class:b2PrismaticJoint
m_mA	Dynamics/Joints/b2GearJoint.h	/^    float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mB	Dynamics/Joints/b2GearJoint.h	/^    float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mC	Dynamics/Joints/b2GearJoint.h	/^    float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_mD	Dynamics/Joints/b2GearJoint.h	/^    float32 m_mA, m_mB, m_mC, m_mD;$/;"	m	class:b2GearJoint
m_manifold	Dynamics/Contacts/b2Contact.h	/^    b2Manifold m_manifold;$/;"	m	class:b2Contact
m_mass	Dynamics/Joints/b2DistanceJoint.h	/^    float32 m_mass;$/;"	m	class:b2DistanceJoint
m_mass	Dynamics/Joints/b2GearJoint.h	/^    float32 m_mass;$/;"	m	class:b2GearJoint
m_mass	Dynamics/Joints/b2MouseJoint.h	/^    b2Mat22 m_mass;$/;"	m	class:b2MouseJoint
m_mass	Dynamics/Joints/b2PulleyJoint.h	/^    float32 m_mass;$/;"	m	class:b2PulleyJoint
m_mass	Dynamics/Joints/b2RevoluteJoint.h	/^    b2Mat33 m_mass;            \/\/ effective mass for point-to-point constraint.$/;"	m	class:b2RevoluteJoint
m_mass	Dynamics/Joints/b2RopeJoint.h	/^    float32 m_mass;$/;"	m	class:b2RopeJoint
m_mass	Dynamics/Joints/b2WeldJoint.h	/^    b2Mat33 m_mass;$/;"	m	class:b2WeldJoint
m_mass	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_mass;$/;"	m	class:b2WheelJoint
m_mass	Dynamics/b2Body.h	/^    float32 m_mass, m_invMass;$/;"	m	class:b2Body
m_maxAllocation	Common/b2StackAllocator.h	/^    int32 m_maxAllocation;$/;"	m	class:b2StackAllocator
m_maxForce	Dynamics/Joints/b2FrictionJoint.h	/^    float32 m_maxForce;$/;"	m	class:b2FrictionJoint
m_maxForce	Dynamics/Joints/b2MouseJoint.h	/^    float32 m_maxForce;$/;"	m	class:b2MouseJoint
m_maxLength	Dynamics/Joints/b2RopeJoint.h	/^    float32 m_maxLength;$/;"	m	class:b2RopeJoint
m_maxMotorForce	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_maxMotorForce;$/;"	m	class:b2PrismaticJoint
m_maxMotorTorque	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 m_maxMotorTorque;$/;"	m	class:b2RevoluteJoint
m_maxMotorTorque	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_maxMotorTorque;$/;"	m	class:b2WheelJoint
m_maxTorque	Dynamics/Joints/b2FrictionJoint.h	/^    float32 m_maxTorque;$/;"	m	class:b2FrictionJoint
m_motorImpulse	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_motorImpulse;$/;"	m	class:b2PrismaticJoint
m_motorImpulse	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 m_motorImpulse;$/;"	m	class:b2RevoluteJoint
m_motorImpulse	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_motorImpulse;$/;"	m	class:b2WheelJoint
m_motorMass	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_motorMass;$/;"	m	class:b2PrismaticJoint
m_motorMass	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 m_motorMass;    \/\/ effective mass for motor\/limit angular constraint.$/;"	m	class:b2RevoluteJoint
m_motorMass	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_motorMass;$/;"	m	class:b2WheelJoint
m_motorSpeed	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_motorSpeed;$/;"	m	class:b2PrismaticJoint
m_motorSpeed	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 m_motorSpeed;$/;"	m	class:b2RevoluteJoint
m_motorSpeed	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_motorSpeed;$/;"	m	class:b2WheelJoint
m_moveBuffer	Collision/b2BroadPhase.h	/^    int32* m_moveBuffer;$/;"	m	class:b2BroadPhase
m_moveCapacity	Collision/b2BroadPhase.h	/^    int32 m_moveCapacity;$/;"	m	class:b2BroadPhase
m_moveCount	Collision/b2BroadPhase.h	/^    int32 m_moveCount;$/;"	m	class:b2BroadPhase
m_next	Dynamics/Contacts/b2Contact.h	/^    b2Contact* m_next;$/;"	m	class:b2Contact
m_next	Dynamics/Joints/b2Joint.h	/^    b2Joint* m_next;$/;"	m	class:b2Joint
m_next	Dynamics/b2Body.h	/^    b2Body* m_next;$/;"	m	class:b2Body
m_next	Dynamics/b2Fixture.h	/^    b2Fixture* m_next;$/;"	m	class:b2Fixture
m_nextVertex	Collision/Shapes/b2ChainShape.h	/^    b2Vec2 m_prevVertex, m_nextVertex;$/;"	m	class:b2ChainShape
m_nodeA	Dynamics/Contacts/b2Contact.h	/^    b2ContactEdge m_nodeA;$/;"	m	class:b2Contact
m_nodeB	Dynamics/Contacts/b2Contact.h	/^    b2ContactEdge m_nodeB;$/;"	m	class:b2Contact
m_nodeCapacity	Collision/b2DynamicTree.h	/^    int32 m_nodeCapacity;$/;"	m	class:b2DynamicTree
m_nodeCount	Collision/b2DynamicTree.h	/^    int32 m_nodeCount;$/;"	m	class:b2DynamicTree
m_nodes	Collision/b2DynamicTree.h	/^    b2TreeNode* m_nodes;$/;"	m	class:b2DynamicTree
m_normal	Collision/b2CollideEdge.cpp	/^    b2Vec2 m_normal;$/;"	m	struct:b2EPCollider	file:
m_normal0	Collision/b2CollideEdge.cpp	/^    b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:
m_normal1	Collision/b2CollideEdge.cpp	/^    b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:
m_normal2	Collision/b2CollideEdge.cpp	/^    b2Vec2 m_normal0, m_normal1, m_normal2;$/;"	m	struct:b2EPCollider	file:
m_normals	Collision/Shapes/b2PolygonShape.h	/^    b2Vec2 m_normals[b2_maxPolygonVertices];$/;"	m	class:b2PolygonShape
m_p	Collision/Shapes/b2CircleShape.h	/^    b2Vec2 m_p;$/;"	m	class:b2CircleShape
m_p0s	Rope/b2Rope.h	/^    b2Vec2* m_p0s;$/;"	m	class:b2Rope
m_pairBuffer	Collision/b2BroadPhase.h	/^    b2Pair* m_pairBuffer;$/;"	m	class:b2BroadPhase
m_pairCapacity	Collision/b2BroadPhase.h	/^    int32 m_pairCapacity;$/;"	m	class:b2BroadPhase
m_pairCount	Collision/b2BroadPhase.h	/^    int32 m_pairCount;$/;"	m	class:b2BroadPhase
m_path	Collision/b2DynamicTree.h	/^    uint32 m_path;$/;"	m	class:b2DynamicTree
m_perp	Dynamics/Joints/b2PrismaticJoint.h	/^    b2Vec2 m_axis, m_perp;$/;"	m	class:b2PrismaticJoint
m_polygonB	Collision/b2CollideEdge.cpp	/^    b2TempPolygon m_polygonB;$/;"	m	struct:b2EPCollider	file:
m_positionConstraints	Dynamics/Contacts/b2ContactSolver.h	/^    b2ContactPositionConstraint* m_positionConstraints;$/;"	m	class:b2ContactSolver
m_positions	Dynamics/Contacts/b2ContactSolver.h	/^    b2Position* m_positions;$/;"	m	class:b2ContactSolver
m_positions	Dynamics/b2Island.h	/^    b2Position* m_positions;$/;"	m	class:b2Island
m_prev	Dynamics/Contacts/b2Contact.h	/^    b2Contact* m_prev;$/;"	m	class:b2Contact
m_prev	Dynamics/Joints/b2Joint.h	/^    b2Joint* m_prev;$/;"	m	class:b2Joint
m_prev	Dynamics/b2Body.h	/^    b2Body* m_prev;$/;"	m	class:b2Body
m_prevVertex	Collision/Shapes/b2ChainShape.h	/^    b2Vec2 m_prevVertex, m_nextVertex;$/;"	m	class:b2ChainShape
m_profile	Dynamics/b2World.h	/^    b2Profile m_profile;$/;"	m	class:b2World
m_proxies	Dynamics/b2Fixture.h	/^    b2FixtureProxy* m_proxies;$/;"	m	class:b2Fixture
m_proxyA	Collision/b2TimeOfImpact.cpp	/^    const b2DistanceProxy* m_proxyA;$/;"	m	struct:b2SeparationFunction	file:
m_proxyB	Collision/b2TimeOfImpact.cpp	/^    const b2DistanceProxy* m_proxyB;$/;"	m	struct:b2SeparationFunction	file:
m_proxyCount	Collision/b2BroadPhase.h	/^    int32 m_proxyCount;$/;"	m	class:b2BroadPhase
m_proxyCount	Dynamics/b2Fixture.h	/^    int32 m_proxyCount;$/;"	m	class:b2Fixture
m_ps	Rope/b2Rope.h	/^    b2Vec2* m_ps;$/;"	m	class:b2Rope
m_queryProxyId	Collision/b2BroadPhase.h	/^    int32 m_queryProxyId;$/;"	m	class:b2BroadPhase
m_rA	Dynamics/Joints/b2DistanceJoint.h	/^    b2Vec2 m_rA;$/;"	m	class:b2DistanceJoint
m_rA	Dynamics/Joints/b2FrictionJoint.h	/^    b2Vec2 m_rA;$/;"	m	class:b2FrictionJoint
m_rA	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 m_rA;$/;"	m	class:b2PulleyJoint
m_rA	Dynamics/Joints/b2RevoluteJoint.h	/^    b2Vec2 m_rA;$/;"	m	class:b2RevoluteJoint
m_rA	Dynamics/Joints/b2RopeJoint.h	/^    b2Vec2 m_rA;$/;"	m	class:b2RopeJoint
m_rA	Dynamics/Joints/b2WeldJoint.h	/^    b2Vec2 m_rA;$/;"	m	class:b2WeldJoint
m_rB	Dynamics/Joints/b2DistanceJoint.h	/^    b2Vec2 m_rB;$/;"	m	class:b2DistanceJoint
m_rB	Dynamics/Joints/b2FrictionJoint.h	/^    b2Vec2 m_rB;$/;"	m	class:b2FrictionJoint
m_rB	Dynamics/Joints/b2MouseJoint.h	/^    b2Vec2 m_rB;$/;"	m	class:b2MouseJoint
m_rB	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 m_rB;$/;"	m	class:b2PulleyJoint
m_rB	Dynamics/Joints/b2RevoluteJoint.h	/^    b2Vec2 m_rB;$/;"	m	class:b2RevoluteJoint
m_rB	Dynamics/Joints/b2RopeJoint.h	/^    b2Vec2 m_rB;$/;"	m	class:b2RopeJoint
m_rB	Dynamics/Joints/b2WeldJoint.h	/^    b2Vec2 m_rB;$/;"	m	class:b2WeldJoint
m_radius	Collision/Shapes/b2Shape.h	/^    float32 m_radius;$/;"	m	class:b2Shape
m_radius	Collision/b2CollideEdge.cpp	/^    float32 m_radius;$/;"	m	struct:b2EPCollider	file:
m_radius	Collision/b2Distance.h	/^    float32 m_radius;$/;"	m	struct:b2DistanceProxy
m_ratio	Dynamics/Joints/b2GearJoint.h	/^    float32 m_ratio;$/;"	m	class:b2GearJoint
m_ratio	Dynamics/Joints/b2PulleyJoint.h	/^    float32 m_ratio;$/;"	m	class:b2PulleyJoint
m_referenceAngle	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_referenceAngle;$/;"	m	class:b2PrismaticJoint
m_referenceAngle	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 m_referenceAngle;$/;"	m	class:b2RevoluteJoint
m_referenceAngle	Dynamics/Joints/b2WeldJoint.h	/^    float32 m_referenceAngle;$/;"	m	class:b2WeldJoint
m_referenceAngleA	Dynamics/Joints/b2GearJoint.h	/^    float32 m_referenceAngleA;$/;"	m	class:b2GearJoint
m_referenceAngleB	Dynamics/Joints/b2GearJoint.h	/^    float32 m_referenceAngleB;$/;"	m	class:b2GearJoint
m_restitution	Dynamics/Contacts/b2Contact.h	/^    float32 m_restitution;$/;"	m	class:b2Contact
m_restitution	Dynamics/b2Fixture.h	/^    float32 m_restitution;$/;"	m	class:b2Fixture
m_root	Collision/b2DynamicTree.h	/^    int32 m_root;$/;"	m	class:b2DynamicTree
m_s1	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_s1, m_s2;$/;"	m	class:b2PrismaticJoint
m_s2	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_s1, m_s2;$/;"	m	class:b2PrismaticJoint
m_sAx	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_sAx, m_sBx;$/;"	m	class:b2WheelJoint
m_sAy	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_sAy, m_sBy;$/;"	m	class:b2WheelJoint
m_sBx	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_sAx, m_sBx;$/;"	m	class:b2WheelJoint
m_sBy	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_sAy, m_sBy;$/;"	m	class:b2WheelJoint
m_shape	Dynamics/b2Fixture.h	/^    b2Shape* m_shape;$/;"	m	class:b2Fixture
m_sleepTime	Dynamics/b2Body.h	/^    float32 m_sleepTime;$/;"	m	class:b2Body
m_springImpulse	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_springImpulse;$/;"	m	class:b2WheelJoint
m_springMass	Dynamics/Joints/b2WheelJoint.h	/^    float32 m_springMass;$/;"	m	class:b2WheelJoint
m_stack	Common/b2GrowableStack.h	/^    T* m_stack;$/;"	m	class:b2GrowableStack
m_stackAllocator	Dynamics/b2World.h	/^    b2StackAllocator m_stackAllocator;$/;"	m	class:b2World
m_start	Common/b2Timer.h	/^    float64 m_start;$/;"	m	class:b2Timer
m_start_msec	Common/b2Timer.h	/^    unsigned long m_start_msec;$/;"	m	class:b2Timer
m_start_sec	Common/b2Timer.h	/^    unsigned long m_start_sec;$/;"	m	class:b2Timer
m_state	Dynamics/Joints/b2RopeJoint.h	/^    b2LimitState m_state;$/;"	m	class:b2RopeJoint
m_step	Dynamics/Contacts/b2ContactSolver.h	/^    b2TimeStep m_step;$/;"	m	class:b2ContactSolver
m_stepComplete	Dynamics/b2World.h	/^    bool m_stepComplete;$/;"	m	class:b2World
m_subStepping	Dynamics/b2World.h	/^    bool m_subStepping;$/;"	m	class:b2World
m_sweep	Dynamics/b2Body.h	/^    b2Sweep m_sweep;        \/\/ the swept motion for CCD$/;"	m	class:b2Body
m_sweepA	Collision/b2TimeOfImpact.cpp	/^    b2Sweep m_sweepA, m_sweepB;$/;"	m	struct:b2SeparationFunction	file:
m_sweepB	Collision/b2TimeOfImpact.cpp	/^    b2Sweep m_sweepA, m_sweepB;$/;"	m	struct:b2SeparationFunction	file:
m_targetA	Dynamics/Joints/b2MouseJoint.h	/^    b2Vec2 m_targetA;$/;"	m	class:b2MouseJoint
m_toi	Dynamics/Contacts/b2Contact.h	/^    float32 m_toi;$/;"	m	class:b2Contact
m_toiCount	Dynamics/Contacts/b2Contact.h	/^    int32 m_toiCount;$/;"	m	class:b2Contact
m_torque	Dynamics/b2Body.h	/^    float32 m_torque;$/;"	m	class:b2Body
m_tree	Collision/b2BroadPhase.h	/^    b2DynamicTree m_tree;$/;"	m	class:b2BroadPhase
m_type	Collision/Shapes/b2Shape.h	/^    Type m_type;$/;"	m	class:b2Shape
m_type	Collision/b2TimeOfImpact.cpp	/^    Type m_type;$/;"	m	struct:b2SeparationFunction	file:
m_type	Dynamics/Joints/b2Joint.h	/^    b2JointType m_type;$/;"	m	class:b2Joint
m_type	Dynamics/b2Body.h	/^    b2BodyType m_type;$/;"	m	class:b2Body
m_type1	Collision/b2CollideEdge.cpp	/^    VertexType m_type1, m_type2;$/;"	m	struct:b2EPCollider	file:
m_type2	Collision/b2CollideEdge.cpp	/^    VertexType m_type1, m_type2;$/;"	m	struct:b2EPCollider	file:
m_typeA	Dynamics/Joints/b2GearJoint.h	/^    b2JointType m_typeA;$/;"	m	class:b2GearJoint
m_typeB	Dynamics/Joints/b2GearJoint.h	/^    b2JointType m_typeB;$/;"	m	class:b2GearJoint
m_u	Dynamics/Joints/b2DistanceJoint.h	/^    b2Vec2 m_u;$/;"	m	class:b2DistanceJoint
m_u	Dynamics/Joints/b2RopeJoint.h	/^    b2Vec2 m_u;$/;"	m	class:b2RopeJoint
m_uA	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 m_uA;$/;"	m	class:b2PulleyJoint
m_uB	Dynamics/Joints/b2PulleyJoint.h	/^    b2Vec2 m_uB;$/;"	m	class:b2PulleyJoint
m_upperAngle	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 m_upperAngle;$/;"	m	class:b2RevoluteJoint
m_upperLimit	Collision/b2CollideEdge.cpp	/^    b2Vec2 m_lowerLimit, m_upperLimit;$/;"	m	struct:b2EPCollider	file:
m_upperTranslation	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 m_upperTranslation;$/;"	m	class:b2PrismaticJoint
m_userData	Dynamics/Joints/b2Joint.h	/^    void* m_userData;$/;"	m	class:b2Joint
m_userData	Dynamics/b2Body.h	/^    void* m_userData;$/;"	m	class:b2Body
m_userData	Dynamics/b2Fixture.h	/^    void* m_userData;$/;"	m	class:b2Fixture
m_v0	Collision/b2CollideEdge.cpp	/^    b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v1	Collision/b2CollideEdge.cpp	/^    b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v1	Collision/b2Distance.cpp	/^    b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:
m_v2	Collision/b2CollideEdge.cpp	/^    b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v2	Collision/b2Distance.cpp	/^    b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:
m_v3	Collision/b2CollideEdge.cpp	/^    b2Vec2 m_v0, m_v1, m_v2, m_v3;$/;"	m	struct:b2EPCollider	file:
m_v3	Collision/b2Distance.cpp	/^    b2SimplexVertex m_v1, m_v2, m_v3;$/;"	m	struct:b2Simplex	file:
m_velocities	Dynamics/Contacts/b2ContactSolver.h	/^    b2Velocity* m_velocities;$/;"	m	class:b2ContactSolver
m_velocities	Dynamics/b2Island.h	/^    b2Velocity* m_velocities;$/;"	m	class:b2Island
m_velocityConstraints	Dynamics/Contacts/b2ContactSolver.h	/^    b2ContactVelocityConstraint* m_velocityConstraints;$/;"	m	class:b2ContactSolver
m_vertex0	Collision/Shapes/b2EdgeShape.h	/^    b2Vec2 m_vertex0, m_vertex3;$/;"	m	class:b2EdgeShape
m_vertex1	Collision/Shapes/b2EdgeShape.h	/^    b2Vec2 m_vertex1, m_vertex2;$/;"	m	class:b2EdgeShape
m_vertex2	Collision/Shapes/b2EdgeShape.h	/^    b2Vec2 m_vertex1, m_vertex2;$/;"	m	class:b2EdgeShape
m_vertex3	Collision/Shapes/b2EdgeShape.h	/^    b2Vec2 m_vertex0, m_vertex3;$/;"	m	class:b2EdgeShape
m_vertexCount	Collision/Shapes/b2PolygonShape.h	/^    int32 m_vertexCount;$/;"	m	class:b2PolygonShape
m_vertices	Collision/Shapes/b2ChainShape.h	/^    b2Vec2* m_vertices;$/;"	m	class:b2ChainShape
m_vertices	Collision/Shapes/b2PolygonShape.h	/^    b2Vec2 m_vertices[b2_maxPolygonVertices];$/;"	m	class:b2PolygonShape
m_vertices	Collision/b2Distance.h	/^    const b2Vec2* m_vertices;$/;"	m	struct:b2DistanceProxy
m_vs	Rope/b2Rope.h	/^    b2Vec2* m_vs;$/;"	m	class:b2Rope
m_warmStarting	Dynamics/b2World.h	/^    bool m_warmStarting;$/;"	m	class:b2World
m_world	Dynamics/b2Body.h	/^    b2World* m_world;$/;"	m	class:b2Body
m_xf	Collision/b2CollideEdge.cpp	/^    b2Transform m_xf;$/;"	m	struct:b2EPCollider	file:
m_xf	Dynamics/b2Body.h	/^    b2Transform m_xf;        \/\/ the body origin transform$/;"	m	class:b2Body
major	Common/b2Settings.h	/^    int32 major;        \/\/\/< significant changes$/;"	m	struct:b2Version
maskBits	Dynamics/b2Fixture.h	/^    uint16 maskBits;$/;"	m	struct:b2Filter
mass	Collision/Shapes/b2Shape.h	/^    float32 mass;$/;"	m	struct:b2MassData
masses	Rope/b2Rope.h	/^    float32* masses;$/;"	m	struct:b2RopeDef
maxForce	Dynamics/Joints/b2FrictionJoint.h	/^    float32 maxForce;$/;"	m	struct:b2FrictionJointDef
maxForce	Dynamics/Joints/b2MouseJoint.h	/^    float32 maxForce;$/;"	m	struct:b2MouseJointDef
maxFraction	Collision/b2Collision.h	/^    float32 maxFraction;$/;"	m	struct:b2RayCastInput
maxLength	Dynamics/Joints/b2RopeJoint.h	/^    float32 maxLength;$/;"	m	struct:b2RopeJointDef
maxMotorForce	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 maxMotorForce;$/;"	m	struct:b2PrismaticJointDef
maxMotorTorque	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 maxMotorTorque;$/;"	m	struct:b2RevoluteJointDef
maxMotorTorque	Dynamics/Joints/b2WheelJoint.h	/^    float32 maxMotorTorque;$/;"	m	struct:b2WheelJointDef
maxTorque	Dynamics/Joints/b2FrictionJoint.h	/^    float32 maxTorque;$/;"	m	struct:b2FrictionJointDef
metric	Collision/b2Distance.h	/^    float32 metric;        \/\/\/< length or area$/;"	m	struct:b2SimplexCache
minor	Common/b2Settings.h	/^    int32 minor;        \/\/\/< incremental changes$/;"	m	struct:b2Version
motorSpeed	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 motorSpeed;$/;"	m	struct:b2PrismaticJointDef
motorSpeed	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 motorSpeed;$/;"	m	struct:b2RevoluteJointDef
motorSpeed	Dynamics/Joints/b2WheelJoint.h	/^    float32 motorSpeed;$/;"	m	struct:b2WheelJointDef
next	Collision/b2BroadPhase.h	/^    int32 next;$/;"	m	struct:b2Pair
next	Collision/b2DynamicTree.h	/^        int32 next;$/;"	m	union:b2TreeNode::__anon2
next	Common/b2BlockAllocator.cpp	/^    b2Block* next;$/;"	m	struct:b2Block	file:
next	Dynamics/Contacts/b2Contact.h	/^    b2ContactEdge* next;    \/\/\/< the next contact edge in the body's contact list$/;"	m	struct:b2ContactEdge
next	Dynamics/Joints/b2Joint.h	/^    b2JointEdge* next;        \/\/\/< the next joint edge in the body's joint list$/;"	m	struct:b2JointEdge
normal	Collision/b2CollideEdge.cpp	/^    b2Vec2 normal;$/;"	m	struct:b2ReferenceFace	file:
normal	Collision/b2Collision.h	/^    b2Vec2 normal;                            \/\/\/< world vector pointing from A to B$/;"	m	struct:b2WorldManifold
normal	Collision/b2Collision.h	/^    b2Vec2 normal;$/;"	m	struct:b2RayCastOutput
normal	Dynamics/Contacts/b2ContactSolver.cpp	/^    b2Vec2 normal;$/;"	m	struct:b2PositionSolverManifold	file:
normal	Dynamics/Contacts/b2ContactSolver.h	/^    b2Vec2 normal;$/;"	m	struct:b2ContactVelocityConstraint
normalImpulse	Collision/b2Collision.h	/^    float32 normalImpulse;    \/\/\/< the non-penetration impulse$/;"	m	struct:b2ManifoldPoint
normalImpulse	Dynamics/Contacts/b2ContactSolver.h	/^    float32 normalImpulse;$/;"	m	struct:b2VelocityConstraintPoint
normalImpulses	Dynamics/b2WorldCallbacks.h	/^    float32 normalImpulses[b2_maxManifoldPoints];$/;"	m	struct:b2ContactImpulse
normalMass	Dynamics/Contacts/b2ContactSolver.h	/^    b2Mat22 normalMass;$/;"	m	struct:b2ContactVelocityConstraint
normalMass	Dynamics/Contacts/b2ContactSolver.h	/^    float32 normalMass;$/;"	m	struct:b2VelocityConstraintPoint
normals	Collision/b2CollideEdge.cpp	/^    b2Vec2 normals[b2_maxPolygonVertices];$/;"	m	struct:b2TempPolygon	file:
operator ()	Common/b2Math.h	/^    float32 operator () (int32 i) const$/;"	f	struct:b2Vec2
operator ()	Common/b2Math.h	/^    float32& operator () (int32 i)$/;"	f	struct:b2Vec2
operator *	Common/b2Math.h	/^inline b2Vec2 operator * (float32 s, const b2Vec2& a)$/;"	f
operator *	Common/b2Math.h	/^inline b2Vec3 operator * (float32 s, const b2Vec3& a)$/;"	f
operator *=	Common/b2Math.h	/^    void operator *= (float32 a)$/;"	f	struct:b2Vec2
operator *=	Common/b2Math.h	/^    void operator *= (float32 s)$/;"	f	struct:b2Vec3
operator +	Common/b2Math.h	/^inline b2Mat22 operator + (const b2Mat22& A, const b2Mat22& B)$/;"	f
operator +	Common/b2Math.h	/^inline b2Vec2 operator + (const b2Vec2& a, const b2Vec2& b)$/;"	f
operator +	Common/b2Math.h	/^inline b2Vec3 operator + (const b2Vec3& a, const b2Vec3& b)$/;"	f
operator +=	Common/b2Math.h	/^    void operator += (const b2Vec2& v)$/;"	f	struct:b2Vec2
operator +=	Common/b2Math.h	/^    void operator += (const b2Vec3& v)$/;"	f	struct:b2Vec3
operator -	Common/b2Math.h	/^    b2Vec2 operator -() const { b2Vec2 v; v.Set(-x, -y); return v; }$/;"	f	struct:b2Vec2
operator -	Common/b2Math.h	/^    b2Vec3 operator -() const { b2Vec3 v; v.Set(-x, -y, -z); return v; }$/;"	f	struct:b2Vec3
operator -	Common/b2Math.h	/^inline b2Vec2 operator - (const b2Vec2& a, const b2Vec2& b)$/;"	f
operator -	Common/b2Math.h	/^inline b2Vec3 operator - (const b2Vec3& a, const b2Vec3& b)$/;"	f
operator -=	Common/b2Math.h	/^    void operator -= (const b2Vec2& v)$/;"	f	struct:b2Vec2
operator -=	Common/b2Math.h	/^    void operator -= (const b2Vec3& v)$/;"	f	struct:b2Vec3
operator ==	Common/b2Math.h	/^inline bool operator == (const b2Vec2& a, const b2Vec2& b)$/;"	f
other	Dynamics/Contacts/b2Contact.h	/^    b2Body* other;            \/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2ContactEdge
other	Dynamics/Joints/b2Joint.h	/^    b2Body* other;            \/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2JointEdge
p	Common/b2Math.h	/^    b2Vec2 p;$/;"	m	struct:b2Transform
p1	Collision/b2Collision.h	/^    b2Vec2 p1, p2;$/;"	m	struct:b2RayCastInput
p2	Collision/b2Collision.h	/^    b2Vec2 p1, p2;$/;"	m	struct:b2RayCastInput
parent	Collision/b2DynamicTree.h	/^        int32 parent;$/;"	m	union:b2TreeNode::__anon2
point	Dynamics/Contacts/b2ContactSolver.cpp	/^    b2Vec2 point;$/;"	m	struct:b2PositionSolverManifold	file:
pointA	Collision/b2Distance.h	/^    b2Vec2 pointA;        \/\/\/< closest point on shapeA$/;"	m	struct:b2DistanceOutput
pointB	Collision/b2Distance.h	/^    b2Vec2 pointB;        \/\/\/< closest point on shapeB$/;"	m	struct:b2DistanceOutput
pointCount	Collision/b2Collision.h	/^    int32 pointCount;                                \/\/\/< the number of manifold points$/;"	m	struct:b2Manifold
pointCount	Dynamics/Contacts/b2ContactSolver.cpp	/^    int32 pointCount;$/;"	m	struct:b2ContactPositionConstraint	file:
pointCount	Dynamics/Contacts/b2ContactSolver.h	/^    int32 pointCount;$/;"	m	struct:b2ContactVelocityConstraint
points	Collision/b2Collision.h	/^    b2ManifoldPoint points[b2_maxManifoldPoints];    \/\/\/< the points of contact$/;"	m	struct:b2Manifold
points	Collision/b2Collision.h	/^    b2Vec2 points[b2_maxManifoldPoints];    \/\/\/< world contact point (point of intersection)$/;"	m	struct:b2WorldManifold
points	Dynamics/Contacts/b2ContactSolver.h	/^    b2VelocityConstraintPoint points[b2_maxManifoldPoints];$/;"	m	struct:b2ContactVelocityConstraint
position	Dynamics/b2Body.h	/^    b2Vec2 position;$/;"	m	struct:b2BodyDef
positionIterations	Dynamics/b2TimeStep.h	/^    int32 positionIterations;$/;"	m	struct:b2TimeStep
positions	Dynamics/Contacts/b2ContactSolver.h	/^    b2Position* positions;$/;"	m	struct:b2ContactSolverDef
positions	Dynamics/b2TimeStep.h	/^    b2Position* positions;$/;"	m	struct:b2SolverData
prev	Dynamics/Contacts/b2Contact.h	/^    b2ContactEdge* prev;    \/\/\/< the previous contact edge in the body's contact list$/;"	m	struct:b2ContactEdge
prev	Dynamics/Joints/b2Joint.h	/^    b2JointEdge* prev;        \/\/\/< the previous joint edge in the body's joint list$/;"	m	struct:b2JointEdge
primary	Dynamics/Contacts/b2Contact.h	/^    bool primary;$/;"	m	struct:b2ContactRegister
proxyA	Collision/b2Distance.h	/^    b2DistanceProxy proxyA;$/;"	m	struct:b2DistanceInput
proxyA	Collision/b2TimeOfImpact.h	/^    b2DistanceProxy proxyA;$/;"	m	struct:b2TOIInput
proxyB	Collision/b2Distance.h	/^    b2DistanceProxy proxyB;$/;"	m	struct:b2DistanceInput
proxyB	Collision/b2TimeOfImpact.h	/^    b2DistanceProxy proxyB;$/;"	m	struct:b2TOIInput
proxyId	Dynamics/b2Fixture.h	/^    int32 proxyId;$/;"	m	struct:b2FixtureProxy
proxyIdA	Collision/b2BroadPhase.h	/^    int32 proxyIdA;$/;"	m	struct:b2Pair
proxyIdB	Collision/b2BroadPhase.h	/^    int32 proxyIdB;$/;"	m	struct:b2Pair
q	Common/b2Math.h	/^    b2Rot q;$/;"	m	struct:b2Transform
r	Common/b2Draw.h	/^    float32 r, g, b;$/;"	m	struct:b2Color
rA	Dynamics/Contacts/b2ContactSolver.h	/^    b2Vec2 rA;$/;"	m	struct:b2VelocityConstraintPoint
rB	Dynamics/Contacts/b2ContactSolver.h	/^    b2Vec2 rB;$/;"	m	struct:b2VelocityConstraintPoint
radiusA	Dynamics/Contacts/b2ContactSolver.cpp	/^    float32 radiusA, radiusB;$/;"	m	struct:b2ContactPositionConstraint	file:
radiusB	Dynamics/Contacts/b2ContactSolver.cpp	/^    float32 radiusA, radiusB;$/;"	m	struct:b2ContactPositionConstraint	file:
ratio	Dynamics/Joints/b2GearJoint.h	/^    float32 ratio;$/;"	m	struct:b2GearJointDef
ratio	Dynamics/Joints/b2PulleyJoint.h	/^    float32 ratio;$/;"	m	struct:b2PulleyJointDef
referenceAngle	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 referenceAngle;$/;"	m	struct:b2PrismaticJointDef
referenceAngle	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 referenceAngle;$/;"	m	struct:b2RevoluteJointDef
referenceAngle	Dynamics/Joints/b2WeldJoint.h	/^    float32 referenceAngle;$/;"	m	struct:b2WeldJointDef
restitution	Dynamics/Contacts/b2ContactSolver.h	/^    float32 restitution;$/;"	m	struct:b2ContactVelocityConstraint
restitution	Dynamics/b2Fixture.h	/^    float32 restitution;$/;"	m	struct:b2FixtureDef
revision	Common/b2Settings.h	/^    int32 revision;        \/\/\/< bug fixes$/;"	m	struct:b2Version
s	Common/b2Math.h	/^    float32 s, c;$/;"	m	struct:b2Rot
s_blockSizeLookup	Common/b2BlockAllocator.cpp	/^uint8 b2BlockAllocator::s_blockSizeLookup[b2_maxBlockSize + 1];$/;"	m	class:b2BlockAllocator	file:
s_blockSizeLookup	Common/b2BlockAllocator.h	/^    static uint8 s_blockSizeLookup[b2_maxBlockSize + 1];$/;"	m	class:b2BlockAllocator
s_blockSizeLookupInitialized	Common/b2BlockAllocator.cpp	/^bool b2BlockAllocator::s_blockSizeLookupInitialized;$/;"	m	class:b2BlockAllocator	file:
s_blockSizeLookupInitialized	Common/b2BlockAllocator.h	/^    static bool s_blockSizeLookupInitialized;$/;"	m	class:b2BlockAllocator
s_blockSizes	Common/b2BlockAllocator.h	/^    static int32 s_blockSizes[b2_blockSizes];$/;"	m	class:b2BlockAllocator
s_initialized	Dynamics/Contacts/b2Contact.cpp	/^bool b2Contact::s_initialized = false;$/;"	m	class:b2Contact	file:
s_initialized	Dynamics/Contacts/b2Contact.h	/^    static bool s_initialized;$/;"	m	class:b2Contact
s_invFrequency	Common/b2Timer.cpp	/^float64 b2Timer::s_invFrequency = 0.0f;$/;"	m	class:b2Timer	file:
s_invFrequency	Common/b2Timer.h	/^    static float64 s_invFrequency;$/;"	m	class:b2Timer
s_registers	Dynamics/Contacts/b2Contact.cpp	/^b2ContactRegister b2Contact::s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact	file:
s_registers	Dynamics/Contacts/b2Contact.h	/^    static b2ContactRegister s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact
separation	Collision/b2CollideEdge.cpp	/^    float32 separation;$/;"	m	struct:b2EPAxis	file:
separation	Dynamics/Contacts/b2ContactSolver.cpp	/^    float32 separation;$/;"	m	struct:b2PositionSolverManifold	file:
shape	Dynamics/b2Fixture.h	/^    const b2Shape* shape;$/;"	m	struct:b2FixtureDef
sideNormal1	Collision/b2CollideEdge.cpp	/^    b2Vec2 sideNormal1;$/;"	m	struct:b2ReferenceFace	file:
sideNormal2	Collision/b2CollideEdge.cpp	/^    b2Vec2 sideNormal2;$/;"	m	struct:b2ReferenceFace	file:
sideOffset1	Collision/b2CollideEdge.cpp	/^    float32 sideOffset1;$/;"	m	struct:b2ReferenceFace	file:
sideOffset2	Collision/b2CollideEdge.cpp	/^    float32 sideOffset2;$/;"	m	struct:b2ReferenceFace	file:
size	Common/b2StackAllocator.h	/^    int32 size;$/;"	m	struct:b2StackEntry
solve	Dynamics/b2TimeStep.h	/^    float32 solve;$/;"	m	struct:b2Profile
solveInit	Dynamics/b2TimeStep.h	/^    float32 solveInit;$/;"	m	struct:b2Profile
solvePosition	Dynamics/b2TimeStep.h	/^    float32 solvePosition;$/;"	m	struct:b2Profile
solveTOI	Dynamics/b2TimeStep.h	/^    float32 solveTOI;$/;"	m	struct:b2Profile
solveVelocity	Dynamics/b2TimeStep.h	/^    float32 solveVelocity;$/;"	m	struct:b2Profile
state	Collision/b2TimeOfImpact.h	/^    State state;$/;"	m	struct:b2TOIOutput
step	Dynamics/Contacts/b2ContactSolver.h	/^    b2TimeStep step;$/;"	m	struct:b2ContactSolverDef
step	Dynamics/b2TimeStep.h	/^    b2TimeStep step;$/;"	m	struct:b2SolverData
step	Dynamics/b2TimeStep.h	/^    float32 step;$/;"	m	struct:b2Profile
sweepA	Collision/b2TimeOfImpact.h	/^    b2Sweep sweepA;$/;"	m	struct:b2TOIInput
sweepB	Collision/b2TimeOfImpact.h	/^    b2Sweep sweepB;$/;"	m	struct:b2TOIInput
t	Collision/b2TimeOfImpact.h	/^    float32 t;$/;"	m	struct:b2TOIOutput
tMax	Collision/b2TimeOfImpact.h	/^    float32 tMax;        \/\/ defines sweep interval [0, tMax]$/;"	m	struct:b2TOIInput
tangentImpulse	Collision/b2Collision.h	/^    float32 tangentImpulse;    \/\/\/< the friction impulse$/;"	m	struct:b2ManifoldPoint
tangentImpulse	Dynamics/Contacts/b2ContactSolver.h	/^    float32 tangentImpulse;$/;"	m	struct:b2VelocityConstraintPoint
tangentImpulses	Dynamics/b2WorldCallbacks.h	/^    float32 tangentImpulses[b2_maxManifoldPoints];$/;"	m	struct:b2ContactImpulse
tangentMass	Dynamics/Contacts/b2ContactSolver.h	/^    float32 tangentMass;$/;"	m	struct:b2VelocityConstraintPoint
target	Dynamics/Joints/b2MouseJoint.h	/^    b2Vec2 target;$/;"	m	struct:b2MouseJointDef
transformA	Collision/b2Distance.h	/^    b2Transform transformA;$/;"	m	struct:b2DistanceInput
transformB	Collision/b2Distance.h	/^    b2Transform transformB;$/;"	m	struct:b2DistanceInput
type	Collision/b2CollideEdge.cpp	/^    Type type;$/;"	m	struct:b2EPAxis	file:
type	Collision/b2Collision.h	/^    Type type;$/;"	m	struct:b2Manifold
type	Dynamics/Contacts/b2ContactSolver.cpp	/^    b2Manifold::Type type;$/;"	m	struct:b2ContactPositionConstraint	file:
type	Dynamics/Joints/b2Joint.h	/^    b2JointType type;$/;"	m	struct:b2JointDef
type	Dynamics/b2Body.h	/^    b2BodyType type;$/;"	m	struct:b2BodyDef
typeA	Collision/b2Collision.h	/^    uint8 typeA;        \/\/\/< The feature type on shapeA$/;"	m	struct:b2ContactFeature
typeB	Collision/b2Collision.h	/^    uint8 typeB;        \/\/\/< The feature type on shapeB$/;"	m	struct:b2ContactFeature
uint16	Common/b2Settings.h	/^typedef unsigned short uint16;$/;"	t
uint32	Common/b2Settings.h	/^typedef unsigned int uint32;$/;"	t
uint8	Common/b2Settings.h	/^typedef unsigned char uint8;$/;"	t
upperAngle	Dynamics/Joints/b2RevoluteJoint.h	/^    float32 upperAngle;$/;"	m	struct:b2RevoluteJointDef
upperBound	Collision/b2Collision.h	/^    b2Vec2 upperBound;    \/\/\/< the upper vertex$/;"	m	struct:b2AABB
upperTranslation	Dynamics/Joints/b2PrismaticJoint.h	/^    float32 upperTranslation;$/;"	m	struct:b2PrismaticJointDef
useRadii	Collision/b2Distance.h	/^    bool useRadii;$/;"	m	struct:b2DistanceInput
usedMalloc	Common/b2StackAllocator.h	/^    bool usedMalloc;$/;"	m	struct:b2StackEntry
userData	Collision/b2DynamicTree.h	/^    void* userData;$/;"	m	struct:b2TreeNode
userData	Dynamics/Joints/b2Joint.h	/^    void* userData;$/;"	m	struct:b2JointDef
userData	Dynamics/b2Body.h	/^    void* userData;$/;"	m	struct:b2BodyDef
userData	Dynamics/b2Fixture.h	/^    void* userData;$/;"	m	struct:b2FixtureDef
v	Collision/b2Collision.h	/^    b2Vec2 v;$/;"	m	struct:b2ClipVertex
v	Dynamics/b2TimeStep.h	/^    b2Vec2 v;$/;"	m	struct:b2Velocity
v1	Collision/b2CollideEdge.cpp	/^    b2Vec2 v1, v2;$/;"	m	struct:b2ReferenceFace	file:
v2	Collision/b2CollideEdge.cpp	/^    b2Vec2 v1, v2;$/;"	m	struct:b2ReferenceFace	file:
velocities	Dynamics/Contacts/b2ContactSolver.h	/^    b2Velocity* velocities;$/;"	m	struct:b2ContactSolverDef
velocities	Dynamics/b2TimeStep.h	/^    b2Velocity* velocities;$/;"	m	struct:b2SolverData
velocityBias	Dynamics/Contacts/b2ContactSolver.h	/^    float32 velocityBias;$/;"	m	struct:b2VelocityConstraintPoint
velocityIterations	Dynamics/b2TimeStep.h	/^    int32 velocityIterations;$/;"	m	struct:b2TimeStep
vertices	Collision/b2CollideEdge.cpp	/^    b2Vec2 vertices[b2_maxPolygonVertices];$/;"	m	struct:b2TempPolygon	file:
vertices	Rope/b2Rope.h	/^    b2Vec2* vertices;$/;"	m	struct:b2RopeDef
w	Collision/b2Distance.cpp	/^    b2Vec2 w;        \/\/ wB - wA$/;"	m	struct:b2SimplexVertex	file:
w	Dynamics/b2TimeStep.h	/^    float32 w;$/;"	m	struct:b2Velocity
wA	Collision/b2Distance.cpp	/^    b2Vec2 wA;        \/\/ support point in proxyA$/;"	m	struct:b2SimplexVertex	file:
wB	Collision/b2Distance.cpp	/^    b2Vec2 wB;        \/\/ support point in proxyB$/;"	m	struct:b2SimplexVertex	file:
warmStarting	Dynamics/b2TimeStep.h	/^    bool warmStarting;$/;"	m	struct:b2TimeStep
x	Common/b2Math.h	/^    float32 x, y, z;$/;"	m	struct:b2Vec3
x	Common/b2Math.h	/^    float32 x, y;$/;"	m	struct:b2Vec2
y	Common/b2Math.h	/^    float32 x, y, z;$/;"	m	struct:b2Vec3
y	Common/b2Math.h	/^    float32 x, y;$/;"	m	struct:b2Vec2
z	Common/b2Math.h	/^    float32 x, y, z;$/;"	m	struct:b2Vec3
~b2BlockAllocator	Common/b2BlockAllocator.cpp	/^b2BlockAllocator::~b2BlockAllocator()$/;"	f	class:b2BlockAllocator
~b2Body	Dynamics/b2Body.cpp	/^b2Body::~b2Body()$/;"	f	class:b2Body
~b2BroadPhase	Collision/b2BroadPhase.cpp	/^b2BroadPhase::~b2BroadPhase()$/;"	f	class:b2BroadPhase
~b2ChainAndCircleContact	Dynamics/Contacts/b2ChainAndCircleContact.h	/^    ~b2ChainAndCircleContact() {}$/;"	f	class:b2ChainAndCircleContact
~b2ChainAndPolygonContact	Dynamics/Contacts/b2ChainAndPolygonContact.h	/^    ~b2ChainAndPolygonContact() {}$/;"	f	class:b2ChainAndPolygonContact
~b2ChainShape	Collision/Shapes/b2ChainShape.cpp	/^b2ChainShape::~b2ChainShape()$/;"	f	class:b2ChainShape
~b2CircleContact	Dynamics/Contacts/b2CircleContact.h	/^    ~b2CircleContact() {}$/;"	f	class:b2CircleContact
~b2Contact	Dynamics/Contacts/b2Contact.h	/^    virtual ~b2Contact() {}$/;"	f	class:b2Contact
~b2ContactFilter	Dynamics/b2WorldCallbacks.h	/^    virtual ~b2ContactFilter() {}$/;"	f	class:b2ContactFilter
~b2ContactListener	Dynamics/b2WorldCallbacks.h	/^    virtual ~b2ContactListener() {}$/;"	f	class:b2ContactListener
~b2ContactSolver	Dynamics/Contacts/b2ContactSolver.cpp	/^b2ContactSolver::~b2ContactSolver()$/;"	f	class:b2ContactSolver
~b2DestructionListener	Dynamics/b2WorldCallbacks.h	/^    virtual ~b2DestructionListener() {}$/;"	f	class:b2DestructionListener
~b2Draw	Common/b2Draw.h	/^    virtual ~b2Draw() {}$/;"	f	class:b2Draw
~b2DynamicTree	Collision/b2DynamicTree.cpp	/^b2DynamicTree::~b2DynamicTree()$/;"	f	class:b2DynamicTree
~b2EdgeAndCircleContact	Dynamics/Contacts/b2EdgeAndCircleContact.h	/^    ~b2EdgeAndCircleContact() {}$/;"	f	class:b2EdgeAndCircleContact
~b2EdgeAndPolygonContact	Dynamics/Contacts/b2EdgeAndPolygonContact.h	/^    ~b2EdgeAndPolygonContact() {}$/;"	f	class:b2EdgeAndPolygonContact
~b2GrowableStack	Common/b2GrowableStack.h	/^    ~b2GrowableStack()$/;"	f	class:b2GrowableStack
~b2Island	Dynamics/b2Island.cpp	/^b2Island::~b2Island()$/;"	f	class:b2Island
~b2Joint	Dynamics/Joints/b2Joint.h	/^    virtual ~b2Joint() {}$/;"	f	class:b2Joint
~b2PolygonAndCircleContact	Dynamics/Contacts/b2PolygonAndCircleContact.h	/^    ~b2PolygonAndCircleContact() {}$/;"	f	class:b2PolygonAndCircleContact
~b2PolygonContact	Dynamics/Contacts/b2PolygonContact.h	/^    ~b2PolygonContact() {}$/;"	f	class:b2PolygonContact
~b2QueryCallback	Dynamics/b2WorldCallbacks.h	/^    virtual ~b2QueryCallback() {}$/;"	f	class:b2QueryCallback
~b2RayCastCallback	Dynamics/b2WorldCallbacks.h	/^    virtual ~b2RayCastCallback() {}$/;"	f	class:b2RayCastCallback
~b2Rope	Rope/b2Rope.cpp	/^b2Rope::~b2Rope()$/;"	f	class:b2Rope
~b2Shape	Collision/Shapes/b2Shape.h	/^    virtual ~b2Shape() {}$/;"	f	class:b2Shape
~b2StackAllocator	Common/b2StackAllocator.cpp	/^b2StackAllocator::~b2StackAllocator()$/;"	f	class:b2StackAllocator
~b2World	Dynamics/b2World.cpp	/^b2World::~b2World()$/;"	f	class:b2World
