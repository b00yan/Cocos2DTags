!_TAG_FILE_FORMAT	2	/extended format/
!_TAG_FILE_SORTED	0	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Patrick Walton	/pwalton@mozilla.com/
!_TAG_PROGRAM_NAME	jsctags	//
!_TAG_PROGRAM_URL	http://github.com/pcwalton/jsctags	/GitHub repository/
!_TAG_PROGRAM_VERSION	0.1	//
%anonymous_function	chipmunk.js	/^(function(){$/;"	f	lineno:1	type:void function()
%anonymous_function	chipmunk.js	/^    Object.create = Object.create || function(o) {$/;"	f	lineno:23	type:Shape function(<Shape | SpatialIndex | Constraint>)
F	chipmunk.js	/^        function F() {}$/;"	f	lineno:24	type:F function()
assert	chipmunk.js	/^    var assert = function(value, message)$/;"	f	lineno:42	type:void function(<boolean | undefined>, string)
assertSoft	chipmunk.js	/^    var assertSoft = function(value, message)$/;"	f	lineno:49	type:void function(<boolean | undefined>, string)
mymin	chipmunk.js	/^    var mymin = function(a, b)$/;"	f	lineno:59	type:<number | undefined> function(<number | undefined>, <number | undefined>)
mymax	chipmunk.js	/^    var mymax = function(a, b)$/;"	f	lineno:63	type:<number | undefined> function(<number | undefined>, <number | undefined>)
hashPair	chipmunk.js	/^    var hashPair = function(a, b)$/;"	f	lineno:91	type:string function(any, number)
deleteObjFromList	chipmunk.js	/^    var deleteObjFromList = function(arr, obj)$/;"	f	lineno:97	type:void function(undefined, <null | Object>)
momentForCircle	chipmunk.js	/^    var momentForCircle = cp.momentForCircle = function(m, r1, r2, offset)$/;"	f	lineno:109	type:number function(any, any, any, any)
areaForCircle	chipmunk.js	/^    var areaForCircle = cp.areaForCircle = function(r1, r2)$/;"	f	lineno:114	type:number function(any, any)
momentForSegment	chipmunk.js	/^    var momentForSegment = cp.momentForSegment = function(m, a, b)$/;"	f	lineno:119	type:number function(any, any, any)
areaForSegment	chipmunk.js	/^    var areaForSegment = cp.areaForSegment = function(a, b, r)$/;"	f	lineno:127	type:number function(any, any, any)
momentForPoly	chipmunk.js	/^    var momentForPoly = cp.momentForPoly = function(m, verts, offset)$/;"	f	lineno:132	type:number function(any, any, any)
areaForPoly	chipmunk.js	/^    var areaForPoly = cp.areaForPoly = function(verts)$/;"	f	lineno:153	type:number function(any)
centroidForPoly	chipmunk.js	/^    var centroidForPoly = cp.centroidForPoly = function(verts)$/;"	f	lineno:163	type:Vect function(any)
recenterPoly	chipmunk.js	/^    var recenterPoly = cp.recenterPoly = function(verts)$/;"	f	lineno:180	type:void function(any)
momentForBox	chipmunk.js	/^    var momentForBox = cp.momentForBox = function(m, width, height)$/;"	f	lineno:190	type:number function(any, number, number)
momentForBox2	chipmunk.js	/^    var momentForBox2 = cp.momentForBox2 = function(m, box)$/;"	f	lineno:195	type:number function(any, any)
clamp	chipmunk.js	/^    var clamp = function(f, minv, maxv)$/;"	f	lineno:206	type:<number | undefined> function(number, number, <number | undefined>)
clamp01	chipmunk.js	/^    var clamp01 = cp.clamp01 = function(f)$/;"	f	lineno:212	type:number function(number)
lerp	chipmunk.js	/^    var lerp = function(f1, f2, t)$/;"	f	lineno:218	type:number function(any, any, any)
lerpconst	chipmunk.js	/^    var lerpconst = function(f1, f2, d)$/;"	f	lineno:224	type:any function(any, any, any)
Vect	chipmunk.js	/^    var Vect = cp.Vect = function(x, y)$/;"	f	lineno:257	type:Vect function(<number | undefined>, <number | undefined>)
v	chipmunk.js	/^    cp.v = function (x,y) { return new Vect(x, y) };$/;"	f	lineno:267	type:Vect function(any, any)
dot	chipmunk.js	/^    var vdot = cp.v.dot = function(v1, v2)$/;"	f	lineno:276	type:number function(<undefined | Vect | Object>, <undefined | Vect>)
vdot2	chipmunk.js	/^    var vdot2 = function(x1, y1, x2, y2)$/;"	f	lineno:281	type:number function(number, number, number, number)
len	chipmunk.js	/^    var vlength = cp.v.len = function(v)$/;"	f	lineno:287	type:number function(<undefined | Vect>)
eql	chipmunk.js	/^    var veql = cp.v.eql = function(v1, v2)$/;"	f	lineno:293	type:boolean function(any, any)
add	chipmunk.js	/^    var vadd = cp.v.add = function(v1, v2)$/;"	f	lineno:299	type:Vect function(<undefined | Vect>, Vect)
add	chipmunk.js	/^    Vect.prototype.add = function(v2)$/;"	f	lineno:304	type:<Vect | Object> function(Vect)
sub	chipmunk.js	/^    var vsub = cp.v.sub = function(v1, v2)$/;"	f	lineno:312	type:Vect function(<undefined | Vect>, <undefined | Vect>)
sub	chipmunk.js	/^    Vect.prototype.sub = function(v2)$/;"	f	lineno:317	type:Object function(any)
neg	chipmunk.js	/^    var vneg = cp.v.neg = function(v)$/;"	f	lineno:325	type:Vect function(<undefined | Vect>)
neg	chipmunk.js	/^    Vect.prototype.neg = function()$/;"	f	lineno:330	type:<Vect | Object> function()
mult	chipmunk.js	/^    var vmult = cp.v.mult = function(v, s)$/;"	f	lineno:338	type:Vect function(<undefined | Vect | Array>, <number | undefined>)
mult	chipmunk.js	/^    Vect.prototype.mult = function(s)$/;"	f	lineno:343	type:Object function(any)
cross	chipmunk.js	/^    var vcross = cp.v.cross = function(v1, v2)$/;"	f	lineno:353	type:number function(Vect, <undefined | Vect>)
vcross2	chipmunk.js	/^    var vcross2 = function(x1, y1, x2, y2)$/;"	f	lineno:358	type:number function(number, number, number, number)
perp	chipmunk.js	/^    var vperp = cp.v.perp = function(v)$/;"	f	lineno:364	type:Vect function(Vect)
pvrperp	chipmunk.js	/^    var vpvrperp = cp.v.pvrperp = function(v)$/;"	f	lineno:370	type:Vect function(any)
project	chipmunk.js	/^    var vproject = cp.v.project = function(v1, v2)$/;"	f	lineno:376	type:Vect function(any, undefined)
project	chipmunk.js	/^    Vect.prototype.project = function(v2)$/;"	f	lineno:381	type:Object function(any)
rotate	chipmunk.js	/^    var vrotate = cp.v.rotate = function(v1, v2)$/;"	f	lineno:388	type:Vect function(undefined, undefined)
rotate	chipmunk.js	/^    Vect.prototype.rotate = function(v2)$/;"	f	lineno:393	type:<Vect | Object> function(any)
unrotate	chipmunk.js	/^    var vunrotate = cp.v.unrotate = function(v1, v2)$/;"	f	lineno:401	type:Vect function(Vect, undefined)
lengthsq	chipmunk.js	/^    var vlengthsq = cp.v.lengthsq = function(v)$/;"	f	lineno:407	type:number function(<undefined | Vect>)
lerp	chipmunk.js	/^    var vlerp = cp.v.lerp = function(v1, v2, t)$/;"	f	lineno:413	type:Vect function(Vect, Vect, <number | undefined>)
normalize	chipmunk.js	/^    var vnormalize = cp.v.normalize = function(v)$/;"	f	lineno:419	type:Vect function(Vect)
normalize_safe	chipmunk.js	/^    var vnormalize_safe = cp.v.normalize_safe = function(v)$/;"	f	lineno:425	type:Vect function(Vect)
clamp	chipmunk.js	/^    var vclamp = cp.v.clamp = function(v, len)$/;"	f	lineno:431	type:Vect function(Vect, undefined)
lerpconst	chipmunk.js	/^    var vlerpconst = cp.v.lerpconst = function(v1, v2, d)$/;"	f	lineno:437	type:Vect function(any, any, any)
dist	chipmunk.js	/^    var vdist = cp.v.dist = function(v1, v2)$/;"	f	lineno:443	type:number function(any, any)
distsq	chipmunk.js	/^    var vdistsq = cp.v.distsq = function(v1, v2)$/;"	f	lineno:449	type:number function(any, any)
near	chipmunk.js	/^    var vnear = cp.v.near = function(v1, v2, dist)$/;"	f	lineno:455	type:boolean function(any, any, any)
slerp	chipmunk.js	/^    var vslerp = cp.v.slerp = function(v1, v2, t)$/;"	f	lineno:461	type:Vect function(any, any, number)
slerpconst	chipmunk.js	/^    var vslerpconst = cp.v.slerpconst = function(v1, v2, a)$/;"	f	lineno:474	type:Vect function(any, any, any)
forangle	chipmunk.js	/^    var vforangle = cp.v.forangle = function(a)$/;"	f	lineno:481	type:Vect function(any)
toangle	chipmunk.js	/^    var vtoangle = cp.v.toangle = function(v)$/;"	f	lineno:487	type:number function(any)
str	chipmunk.js	/^    var vstr = cp.v.str = function(v)$/;"	f	lineno:493	type:string function(any)
BB	chipmunk.js	/^    var BB = cp.BB = function(l, b, r, t)$/;"	f	lineno:524	type:BB function(<number | undefined>, <number | undefined>, <number | undefined>, <number | undefined>)
bb	chipmunk.js	/^    cp.bb = function(l, b, r, t) { return new BB(l, b, r, t); };$/;"	f	lineno:534	type:BB function(any, any, any, any)
bbNewForCircle	chipmunk.js	/^    var bbNewForCircle = function(p, r)$/;"	f	lineno:536	type:BB function(any, any)
bbIntersects	chipmunk.js	/^    var bbIntersects = function(a, b)$/;"	f	lineno:547	type:boolean function(any, any)
bbIntersects2	chipmunk.js	/^    var bbIntersects2 = function(bb, l, b, r, t)$/;"	f	lineno:551	type:boolean function(any, any, any, any, any)
bbContainsBB	chipmunk.js	/^    var bbContainsBB = function(bb, other)$/;"	f	lineno:557	type:boolean function(any, any)
bbContainsVect	chipmunk.js	/^    var bbContainsVect = function(bb, v)$/;"	f	lineno:563	type:boolean function(any, any)
bbContainsVect2	chipmunk.js	/^    var bbContainsVect2 = function(l, b, r, t, v)$/;"	f	lineno:567	type:boolean function(undefined, undefined, undefined, undefined, any)
bbMerge	chipmunk.js	/^    var bbMerge = function(a, b){$/;"	f	lineno:573	type:BB function(any, any)
bbExpand	chipmunk.js	/^    var bbExpand = function(bb, v){$/;"	f	lineno:583	type:BB function(any, any)
bbArea	chipmunk.js	/^    var bbArea = function(bb)$/;"	f	lineno:593	type:number function(any)
bbMergedArea	chipmunk.js	/^    var bbMergedArea = function(a, b)$/;"	f	lineno:599	type:number function(any, any)
bbMergedArea2	chipmunk.js	/^    var bbMergedArea2 = function(bb, l, b, r, t)$/;"	f	lineno:604	type:number function(any, any, any, any, any)
bbIntersectsSegment	chipmunk.js	/^    var bbIntersectsSegment = function(bb, a, b)$/;"	f	lineno:610	type:boolean function(any, any, any)
bbClampVect	chipmunk.js	/^    var bbClampVect = function(bb, v)$/;"	f	lineno:616	type:Vect function(any, any)
bbWrapVect	chipmunk.js	/^    var bbWrapVect = function(bb, v)$/;"	f	lineno:625	type:Vect function(any, any)
resetShapeIdCounter	chipmunk.js	/^    cp.resetShapeIdCounter = function()$/;"	f	lineno:675	type:void function()
Shape	chipmunk.js	/^    var Shape = cp.Shape = function(body) {$/;"	f	lineno:684	type:void function(any)
setElasticity	chipmunk.js	/^    Shape.prototype.setElasticity = function(e) { this.e = e; };$/;"	f	lineno:718	type:void function(any)
setFriction	chipmunk.js	/^    Shape.prototype.setFriction = function(u) { this.body.activate(); this.u = u; };$/;"	f	lineno:719	type:void function(any)
setLayers	chipmunk.js	/^    Shape.prototype.setLayers = function(layers) { this.body.activate(); this.layers = layers; };$/;"	f	lineno:720	type:void function(any)
setSensor	chipmunk.js	/^    Shape.prototype.setSensor = function(sensor) { this.body.activate(); this.sensor = sensor; };$/;"	f	lineno:721	type:void function(any)
setCollisionType	chipmunk.js	/^    Shape.prototype.setCollisionType = function(collision_type) { this.body.activate(); this.collision_type = collision_type; };$/;"	f	lineno:722	type:void function(any)
getBody	chipmunk.js	/^    Shape.prototype.getBody = function() { return this.body; };$/;"	f	lineno:723	type:void function()
active	chipmunk.js	/^    Shape.prototype.active = function()$/;"	f	lineno:725	type:void function()
setBody	chipmunk.js	/^    Shape.prototype.setBody = function(body)$/;"	f	lineno:731	type:void function(any)
cacheBB	chipmunk.js	/^    Shape.prototype.cacheBB = function()$/;"	f	lineno:737	type:any function()
update	chipmunk.js	/^    Shape.prototype.update = function(pos, rot)$/;"	f	lineno:742	type:void function(any, any)
getBB	chipmunk.js	/^    Shape.prototype.getBB = function()$/;"	f	lineno:749	type:BB function()
PointQueryExtendedInfo	chipmunk.js	/^    var PointQueryExtendedInfo = function(shape){$/;"	f	lineno:770	type:PointQueryExtendedInfo function(Object)
SegmentQueryInfo	chipmunk.js	/^    var SegmentQueryInfo = function(shape, t, n){$/;"	f	lineno:779	type:SegmentQueryInfo function(Object, number, <undefined | Vect>)
hitPoint	chipmunk.js	/^    SegmentQueryInfo.prototype.hitPoint = function(start, end)$/;"	f	lineno:789	type:Vect function(any, any)
hitDist	chipmunk.js	/^    SegmentQueryInfo.prototype.hitDist = function(start, end)$/;"	f	lineno:795	type:number function(any, any)
CircleShape	chipmunk.js	/^    var CircleShape = cp.CircleShape = function(body, radius, offset)$/;"	f	lineno:802	type:void function(any, any, any)
cacheData	chipmunk.js	/^    CircleShape.prototype.cacheData = function(p, rot)$/;"	f	lineno:814	type:void function(any, any)
pointQuery	chipmunk.js	/^    CircleShape.prototype.pointQuery = function(p)$/;"	f	lineno:827	type:PointQueryExtendedInfo function(any)
circleSegmentQuery	chipmunk.js	/^    var circleSegmentQuery = function(shape, center, r, a, b, info)$/;"	f	lineno:843	type:SegmentQueryInfo function(Object, undefined, undefined, any, any, undefined)
segmentQuery	chipmunk.js	/^    CircleShape.prototype.segmentQuery = function(a, b)$/;"	f	lineno:864	type:SegmentQueryInfo function(any, any)
SegmentShape	chipmunk.js	/^    var SegmentShape = cp.SegmentShape = function(body, a, b, r)$/;"	f	lineno:884	type:void function(any, any, any, any)
cacheData	chipmunk.js	/^    SegmentShape.prototype.cacheData = function(p, rot)$/;"	f	lineno:903	type:void function(any, any)
pointQuery	chipmunk.js	/^    SegmentShape.prototype.pointQuery = function(p)$/;"	f	lineno:935	type:<undefined | PointQueryExtendedInfo> function(any)
segmentQuery	chipmunk.js	/^    SegmentShape.prototype.segmentQuery = function(a, b)$/;"	f	lineno:960	type:SegmentQueryInfo function(any, any)
setNeighbors	chipmunk.js	/^    SegmentShape.prototype.setNeighbors = function(prev, next)$/;"	f	lineno:993	type:void function(any, any)
setEndpoints	chipmunk.js	/^    SegmentShape.prototype.setEndpoints = function(a, b)$/;"	f	lineno:999	type:void function(any, any)
polyValidate	chipmunk.js	/^    var polyValidate = function(verts)$/;"	f	lineno:1041	type:boolean function(Array[number])
PolyShape	chipmunk.js	/^    var PolyShape = cp.PolyShape = function(body, verts, offset)$/;"	f	lineno:1063	type:PolyShape function(any, Array[number], Vect)
Axis	chipmunk.js	/^    var Axis = function(n, d) {$/;"	f	lineno:1077	type:Axis function(Vect, number)
setVerts	chipmunk.js	/^    PolyShape.prototype.setVerts = function(verts, offset)$/;"	f	lineno:1082	type:void function(Array[number], Vect)
BoxShape	chipmunk.js	/^    var BoxShape = cp.BoxShape = function(body, width, height)$/;"	f	lineno:1113	type:Shape function(any, any, any)
BoxShape2	chipmunk.js	/^    var BoxShape2 = cp.BoxShape2 = function(body, box)$/;"	f	lineno:1122	type:Shape function(any, BB)
transformVerts	chipmunk.js	/^    PolyShape.prototype.transformVerts = function(p, rot)$/;"	f	lineno:1134	type:void function(any, any)
transformAxes	chipmunk.js	/^    PolyShape.prototype.transformAxes = function(p, rot)$/;"	f	lineno:1167	type:void function(any, any)
cacheData	chipmunk.js	/^    PolyShape.prototype.cacheData = function(p, rot)$/;"	f	lineno:1179	type:void function(any, any)
pointQuery	chipmunk.js	/^    PolyShape.prototype.pointQuery = function(p)$/;"	f	lineno:1185	type:<undefined | PointQueryExtendedInfo> function(any)
segmentQuery	chipmunk.js	/^    PolyShape.prototype.segmentQuery = function(a, b)$/;"	f	lineno:1208	type:SegmentQueryInfo function(any, any)
getNumVerts	chipmunk.js	/^    PolyShape.prototype.getNumVerts = function()$/;"	f	lineno:1239	type:number function()
getVert	chipmunk.js	/^    PolyShape.prototype.getVert = function(idx)$/;"	f	lineno:1245	type:Vect function(any)
valueOnAxis	chipmunk.js	/^    PolyShape.prototype.valueOnAxis = function(n, d)$/;"	f	lineno:1250	type:number function(any, any)
containsVert	chipmunk.js	/^    PolyShape.prototype.containsVert = function(vx, vy)$/;"	f	lineno:1262	type:boolean function(any, any)
containsVertPartial	chipmunk.js	/^    PolyShape.prototype.containsVertPartial = function(vx, vy, n)$/;"	f	lineno:1275	type:boolean function(any, any, any)
getNumVerts	chipmunk.js	/^    PolyShape.prototype.getNumVerts = function() { return this.verts.length \/ 2; };$/;"	f	lineno:1291	type:number function()
getVert	chipmunk.js	/^    PolyShape.prototype.getVert = function(i)$/;"	f	lineno:1292	type:Vect function(any)
Body	chipmunk.js	/^    var Body = cp.Body = function(m, i) {$/;"	f	lineno:1324	type:Body function(number, number)
createStaticBody	chipmunk.js	/^    var createStaticBody = function()$/;"	f	lineno:1388	type:Body function()
v_assert_nan	chipmunk.js	/^        var v_assert_nan = function(v, message){assert(v.x == v.x && v.y == v.y, message); };$/;"	f	lineno:1398	type:void function(Vect, string)
v_assert_infinite	chipmunk.js	/^        var v_assert_infinite = function(v, message){assert(Math.abs(v.x) !== Infinity && Math.abs(v.y) !== Infinity, message);};$/;"	f	lineno:1399	type:void function(Vect, string)
v_assert_sane	chipmunk.js	/^        var v_assert_sane = function(v, message){v_assert_nan(v, message); v_assert_infinite(v, message);};$/;"	f	lineno:1400	type:void function(Vect, string)
sanityCheck	chipmunk.js	/^        Body.prototype.sanityCheck = function()$/;"	f	lineno:1402	type:void function()
sanityCheck	chipmunk.js	/^        Body.prototype.sanityCheck = function(){};$/;"	f	lineno:1422	type:void function()
getPos	chipmunk.js	/^    Body.prototype.getPos = function() { return this.p; };$/;"	f	lineno:1425	type:void function()
getVel	chipmunk.js	/^    Body.prototype.getVel = function() { return new Vect(this.vx, this.vy); };$/;"	f	lineno:1426	type:Vect function()
getAngVel	chipmunk.js	/^    Body.prototype.getAngVel = function() { return this.w; };$/;"	f	lineno:1427	type:void function()
isSleeping	chipmunk.js	/^    Body.prototype.isSleeping = function()$/;"	f	lineno:1430	type:boolean function()
isStatic	chipmunk.js	/^    Body.prototype.isStatic = function()$/;"	f	lineno:1436	type:boolean function()
isRogue	chipmunk.js	/^    Body.prototype.isRogue = function()$/;"	f	lineno:1442	type:boolean function()
setMass	chipmunk.js	/^    Body.prototype.setMass = function(mass)$/;"	f	lineno:1449	type:void function(number)
setMoment	chipmunk.js	/^    Body.prototype.setMoment = function(moment)$/;"	f	lineno:1459	type:void function(number)
addShape	chipmunk.js	/^    Body.prototype.addShape = function(shape)$/;"	f	lineno:1468	type:void function(any)
removeShape	chipmunk.js	/^    Body.prototype.removeShape = function(shape)$/;"	f	lineno:1473	type:void function(any)
filterConstraints	chipmunk.js	/^    var filterConstraints = function(node, body, filter)$/;"	f	lineno:1482	type:void function(undefined, Object, any)
removeConstraint	chipmunk.js	/^    Body.prototype.removeConstraint = function(constraint)$/;"	f	lineno:1495	type:void function(any)
setPos	chipmunk.js	/^    Body.prototype.setPos = function(pos)$/;"	f	lineno:1501	type:void function(any)
setVel	chipmunk.js	/^    Body.prototype.setVel = function(velocity)$/;"	f	lineno:1508	type:void function(any)
setAngVel	chipmunk.js	/^    Body.prototype.setAngVel = function(w)$/;"	f	lineno:1515	type:void function(any)
setAngleInternal	chipmunk.js	/^    Body.prototype.setAngleInternal = function(angle)$/;"	f	lineno:1521	type:void function(number)
setAngle	chipmunk.js	/^    Body.prototype.setAngle = function(angle)$/;"	f	lineno:1531	type:void function(number)
velocity_func	chipmunk.js	/^    Body.prototype.velocity_func = function(gravity, damping, dt)$/;"	f	lineno:1538	type:void function(any, any, any)
position_func	chipmunk.js	/^    Body.prototype.position_func = function(dt)$/;"	f	lineno:1558	type:void function(any)
resetForces	chipmunk.js	/^    Body.prototype.resetForces = function()$/;"	f	lineno:1574	type:void function()
applyForce	chipmunk.js	/^    Body.prototype.applyForce = function(force, r)$/;"	f	lineno:1581	type:void function(any, any)
applyImpulse	chipmunk.js	/^    Body.prototype.applyImpulse = function(j, r)$/;"	f	lineno:1588	type:void function(any, any)
getVelAtPoint	chipmunk.js	/^    Body.prototype.getVelAtPoint = function(r)$/;"	f	lineno:1594	type:Vect function(any)
getVelAtWorldPoint	chipmunk.js	/^    Body.prototype.getVelAtWorldPoint = function(point)$/;"	f	lineno:1600	type:any function(any)
getVelAtLocalPoint	chipmunk.js	/^    Body.prototype.getVelAtLocalPoint = function(point)$/;"	f	lineno:1606	type:any function(any)
eachShape	chipmunk.js	/^    Body.prototype.eachShape = function(func)$/;"	f	lineno:1611	type:void function(any)
eachConstraint	chipmunk.js	/^    Body.prototype.eachConstraint = function(func)$/;"	f	lineno:1618	type:void function(any)
eachArbiter	chipmunk.js	/^    Body.prototype.eachArbiter = function(func)$/;"	f	lineno:1628	type:void function(any)
local2World	chipmunk.js	/^    Body.prototype.local2World = function(v)$/;"	f	lineno:1642	type:Vect function(any)
world2Local	chipmunk.js	/^    Body.prototype.world2Local = function(v)$/;"	f	lineno:1648	type:Vect function(any)
kineticEnergy	chipmunk.js	/^    Body.prototype.kineticEnergy = function()$/;"	f	lineno:1654	type:number function()
SpatialIndex	chipmunk.js	/^    var SpatialIndex = cp.SpatialIndex = function(staticIndex)$/;"	f	lineno:1742	type:void function(<null | Shape>)
collideStatic	chipmunk.js	/^    SpatialIndex.prototype.collideStatic = function(staticIndex, func)$/;"	f	lineno:1753	type:void function(any, any)
%anonymous_function	chipmunk.js	/^            this.each(function(obj) {$/;"	f	lineno:1758	type:void function(any)
BBTree	chipmunk.js	/^    var BBTree = cp.BBTree = function(staticIndex)$/;"	f	lineno:1788	type:BBTree function(<null | Shape>)
Node	chipmunk.js	/^    var Node = function(tree, a, b)$/;"	f	lineno:1812	type:Node function(<undefined | Object>, <Leaf | Object>, <undefined | null>)
Leaf	chipmunk.js	/^    var Leaf = function(tree, obj)$/;"	f	lineno:1829	type:Leaf function(Object, any)
getBB	chipmunk.js	/^    BBTree.prototype.getBB = function(obj, dest)$/;"	f	lineno:1846	type:void function(any, any)
getStamp	chipmunk.js	/^    BBTree.prototype.getStamp = function()$/;"	f	lineno:1868	type:void function()
incrementStamp	chipmunk.js	/^    BBTree.prototype.incrementStamp = function()$/;"	f	lineno:1874	type:void function()
Pair	chipmunk.js	/^    var Pair = function(a, b)$/;"	f	lineno:1886	type:Pair function(Thread, Thread)
Thread	chipmunk.js	/^    var Thread = function(leaf, next)$/;"	f	lineno:1891	type:Thread function(<undefined | null | Leaf | Object>, <undefined | null | Pair>)
unlink	chipmunk.js	/^    Thread.prototype.unlink = function()$/;"	f	lineno:1911	type:void function()
clearPairs	chipmunk.js	/^    Leaf.prototype.clearPairs = function(tree)$/;"	f	lineno:1927	type:void function(any)
pairInsert	chipmunk.js	/^    var pairInsert = function(a, b, tree)$/;"	f	lineno:1949	type:void function(<undefined | null | Leaf | Object>, <undefined | null | Leaf | Object>, <undefined | Object>)
setA	chipmunk.js	/^    Node.prototype.setA = function(value)$/;"	f	lineno:1991	type:void function(<Leaf | Object>)
setB	chipmunk.js	/^    Node.prototype.setB = function(value)$/;"	f	lineno:1997	type:void function(<undefined | null>)
otherChild	chipmunk.js	/^    Node.prototype.otherChild = function(child)$/;"	f	lineno:2012	type:void function(any)
replaceChild	chipmunk.js	/^    Node.prototype.replaceChild = function(child, value, tree)$/;"	f	lineno:2017	type:void function(any, any, any)
bbArea	chipmunk.js	/^    Node.prototype.bbArea = Leaf.prototype.bbArea = function()$/;"	f	lineno:2040	type:number function()
bbTreeMergedArea	chipmunk.js	/^    var bbTreeMergedArea = function(a, b)$/;"	f	lineno:2045	type:number function(any, <Leaf | Object>)
bbProximity	chipmunk.js	/^    var bbProximity = function(a, b)$/;"	f	lineno:2054	type:number function(any, <Leaf | Object>)
subtreeInsert	chipmunk.js	/^    var subtreeInsert = function(subtree, leaf, tree)$/;"	f	lineno:2059	type:<undefined | null | Node | Leaf | Object> function(<undefined | null>, <Leaf | Object>, <undefined | Object>)
intersectsBB	chipmunk.js	/^    Node.prototype.intersectsBB = Leaf.prototype.intersectsBB = function(bb)$/;"	f	lineno:2093	type:boolean function(any)
subtreeQuery	chipmunk.js	/^    var subtreeQuery = function(subtree, bb, func)$/;"	f	lineno:2098	type:void function(undefined, BB, any)
nodeSegmentQuery	chipmunk.js	/^    var nodeSegmentQuery = function(node, a, b)$/;"	f	lineno:2112	type:number function(any, any, any)
subtreeSegmentQuery	chipmunk.js	/^    var subtreeSegmentQuery = function(subtree, a, b, t_exit, func)$/;"	f	lineno:2136	type:number function(undefined, any, any, number, any)
subtreeRemove	chipmunk.js	/^    var subtreeRemove = function(subtree, leaf, tree)$/;"	f	lineno:2167	type:<undefined | null> function(undefined, Object, Object)
bbTreeIntersectsNode	chipmunk.js	/^    var bbTreeIntersectsNode = function(a, b)$/;"	f	lineno:2195	type:boolean function(<undefined | Leaf | Object>, <undefined | null | Leaf | Object>)
markLeafQuery	chipmunk.js	/^    var markLeafQuery = function(subtree, leaf, left, tree, func)$/;"	f	lineno:2200	type:void function(<undefined | null | Leaf | Object>, <undefined | Leaf | Object>, boolean, <undefined | Object>, null)
markLeaf	chipmunk.js	/^    var markLeaf = function(leaf, tree, staticRoot, func)$/;"	f	lineno:2217	type:void function(<undefined | Leaf | Object>, Object, undefined, null)
markSubtree	chipmunk.js	/^    var markSubtree = function(subtree, tree, staticRoot, func)$/;"	f	lineno:2242	type:void function(undefined, Object, undefined, any)
containsObj	chipmunk.js	/^    Leaf.prototype.containsObj = function(obj)$/;"	f	lineno:2254	type:boolean function(any)
update	chipmunk.js	/^    Leaf.prototype.update = function(tree)$/;"	f	lineno:2259	type:boolean function(any)
addPairs	chipmunk.js	/^    Leaf.prototype.addPairs = function(tree)$/;"	f	lineno:2280	type:void function(Object)
insert	chipmunk.js	/^    BBTree.prototype.insert = function(obj, hashid)$/;"	f	lineno:2296	type:void function(any, any)
remove	chipmunk.js	/^    BBTree.prototype.remove = function(obj, hashid)$/;"	f	lineno:2309	type:void function(any, any)
contains	chipmunk.js	/^    BBTree.prototype.contains = function(obj, hashid)$/;"	f	lineno:2321	type:boolean function(any, any)
voidQueryFunc	chipmunk.js	/^    var voidQueryFunc = function(obj1, obj2){};$/;"	f	lineno:2327	type:void function(any, any)
reindexQuery	chipmunk.js	/^    BBTree.prototype.reindexQuery = function(func)$/;"	f	lineno:2329	type:void function(any)
reindex	chipmunk.js	/^    BBTree.prototype.reindex = function()$/;"	f	lineno:2350	type:void function()
reindexObject	chipmunk.js	/^    BBTree.prototype.reindexObject = function(obj, hashid)$/;"	f	lineno:2355	type:void function(any, any)
pointQuery	chipmunk.js	/^    BBTree.prototype.pointQuery = function(point, func)$/;"	f	lineno:2366	type:void function(any, any)
segmentQuery	chipmunk.js	/^    BBTree.prototype.segmentQuery = function(a, b, t_exit, func)$/;"	f	lineno:2372	type:void function(any, any, any, any)
query	chipmunk.js	/^    BBTree.prototype.query = function(bb, func)$/;"	f	lineno:2377	type:void function(any, any)
count	chipmunk.js	/^    BBTree.prototype.count = function()$/;"	f	lineno:2384	type:void function()
each	chipmunk.js	/^    BBTree.prototype.each = function(func)$/;"	f	lineno:2389	type:void function(any)
bbTreeMergedArea2	chipmunk.js	/^    var bbTreeMergedArea2 = function(node, l, b, r, t)$/;"	f	lineno:2400	type:number function(any, number, number, number, number)
partitionNodes	chipmunk.js	/^    var partitionNodes = function(tree, nodes, offset, count)$/;"	f	lineno:2405	type:<null | Node> function(undefined, Array, number, <number | undefined>)
%anonymous_function	chipmunk.js	/^        bounds.sort(function(a, b) {$/;"	f	lineno:2448	type:number function(any, any)
optimize	chipmunk.js	/^    BBTree.prototype.optimize = function()$/;"	f	lineno:2507	type:void function()
nodeRender	chipmunk.js	/^    var nodeRender = function(node, depth)$/;"	f	lineno:2523	type:void function(undefined, number)
log	chipmunk.js	/^    BBTree.prototype.log = function(){$/;"	f	lineno:2540	type:void function()
CollisionHandler	chipmunk.js	/^    var CollisionHandler = cp.CollisionHandler = function()$/;"	f	lineno:2615	type:CollisionHandler function()
begin	chipmunk.js	/^    CollisionHandler.prototype.begin = function(arb, space){return true;};$/;"	f	lineno:2624	type:boolean function(any, any)
preSolve	chipmunk.js	/^    CollisionHandler.prototype.preSolve = function(arb, space){return true;};$/;"	f	lineno:2628	type:boolean function(any, any)
postSolve	chipmunk.js	/^    CollisionHandler.prototype.postSolve = function(arb, space){};$/;"	f	lineno:2631	type:void function(any, any)
separate	chipmunk.js	/^    CollisionHandler.prototype.separate = function(arb, space){};$/;"	f	lineno:2633	type:void function(any, any)
Arbiter	chipmunk.js	/^    var Arbiter = function(a, b) {$/;"	f	lineno:2651	type:Arbiter function(any, any)
getShapes	chipmunk.js	/^    Arbiter.prototype.getShapes = function()$/;"	f	lineno:2676	type:Array[undefined] function()
totalImpulse	chipmunk.js	/^    Arbiter.prototype.totalImpulse = function()$/;"	f	lineno:2687	type:Vect function()
totalImpulseWithFriction	chipmunk.js	/^    Arbiter.prototype.totalImpulseWithFriction = function()$/;"	f	lineno:2702	type:Vect function()
totalKE	chipmunk.js	/^    Arbiter.prototype.totalKE = function()$/;"	f	lineno:2717	type:number function()
ignore	chipmunk.js	/^    Arbiter.prototype.ignore = function()$/;"	f	lineno:2737	type:void function()
getA	chipmunk.js	/^    Arbiter.prototype.getA = function()$/;"	f	lineno:2745	type:void function()
getB	chipmunk.js	/^    Arbiter.prototype.getB = function()$/;"	f	lineno:2750	type:void function()
isFirstContact	chipmunk.js	/^    Arbiter.prototype.isFirstContact = function()$/;"	f	lineno:2756	type:boolean function()
ContactPoint	chipmunk.js	/^    var ContactPoint = function(point, normal, dist)$/;"	f	lineno:2762	type:ContactPoint function(any, any, any)
getContactPointSet	chipmunk.js	/^    Arbiter.prototype.getContactPointSet = function()$/;"	f	lineno:2770	type:Array[ContactPoint] function()
getNormal	chipmunk.js	/^    Arbiter.prototype.getNormal = function(i)$/;"	f	lineno:2783	type:any function(any)
getPoint	chipmunk.js	/^    Arbiter.prototype.getPoint = function(i)$/;"	f	lineno:2790	type:any function(any)
getDepth	chipmunk.js	/^    Arbiter.prototype.getDepth = function(i)$/;"	f	lineno:2796	type:any function(any)
unthreadHelper	chipmunk.js	/^    var unthreadHelper = function(arb, body, prev, next)$/;"	f	lineno:2807	type:void function(Object, undefined, undefined, undefined)
unthread	chipmunk.js	/^    Arbiter.prototype.unthread = function()$/;"	f	lineno:2831	type:void function()
update	chipmunk.js	/^    Arbiter.prototype.update = function(contacts, handler, a, b)$/;"	f	lineno:2857	type:void function(any, any, any, any)
preStep	chipmunk.js	/^    Arbiter.prototype.preStep = function(dt, slop, bias)$/;"	f	lineno:2895	type:void function(any, any, any)
applyCachedImpulse	chipmunk.js	/^    Arbiter.prototype.applyCachedImpulse = function(dt_coef)$/;"	f	lineno:2920	type:void function(any)
applyImpulse	chipmunk.js	/^    Arbiter.prototype.applyImpulse = function()$/;"	f	lineno:2944	type:void function()
callSeparate	chipmunk.js	/^    Arbiter.prototype.callSeparate = function(space)$/;"	f	lineno:3004	type:void function(any)
next	chipmunk.js	/^    Arbiter.prototype.next = function(body)$/;"	f	lineno:3012	type:void function(any)
Contact	chipmunk.js	/^    var Contact = function(p, n, dist, hash)$/;"	f	lineno:3039	type:Contact function(Vect, Vect, number, <number | string>)
circle2circleQuery	chipmunk.js	/^    var circle2circleQuery = function(p1, p2, r1, r2)$/;"	f	lineno:3058	type:<undefined | Contact> function(any, Vect, any, number)
circle2circle	chipmunk.js	/^    var circle2circle = function(circ1, circ2)$/;"	f	lineno:3077	type:Array function(any, any)
circle2segment	chipmunk.js	/^    var circle2segment = function(circleShape, segmentShape)$/;"	f	lineno:3083	type:Array function(any, any)
findMSA	chipmunk.js	/^    var findMSA = function(poly, axes)$/;"	f	lineno:3115	type:number function(any, any)
findVertsFallback	chipmunk.js	/^    var findVertsFallback = function(poly1, poly2, n, dist)$/;"	f	lineno:3138	type:Array[Contact] function(any, any, Vect, number)
findVerts	chipmunk.js	/^    var findVerts = function(poly1, poly2, n, dist)$/;"	f	lineno:3164	type:Array[Contact] function(any, any, Vect, number)
poly2poly	chipmunk.js	/^    var poly2poly = function(poly1, poly2)$/;"	f	lineno:3190	type:<Array | Array[Contact]> function(any, any)
segValueOnAxis	chipmunk.js	/^    var segValueOnAxis = function(seg, n, d)$/;"	f	lineno:3208	type:number function(any, any, any)
findPointsBehindSeg	chipmunk.js	/^    var findPointsBehindSeg = function(arr, seg, poly, pDist, coef)$/;"	f	lineno:3216	type:void function(Array[Contact], any, any, number, number)
seg2poly	chipmunk.js	/^    var seg2poly = function(seg, poly)$/;"	f	lineno:3237	type:<Array | Array[Contact]> function(any, any)
circle2poly	chipmunk.js	/^    var circle2poly = function(circ, poly)$/;"	f	lineno:3306	type:<Array | Array[Contact]> function(any, any)
%anonymous_function	chipmunk.js	/^        function(seg, seg) { return NONE; }, \/\/ seg2seg$/;"	f	lineno:3373	type:Array function(any, any)
collideShapes	chipmunk.js	/^    var collideShapes = cp.collideShapes = function(a, b)$/;"	f	lineno:3383	type:any function(any, any)
Space	chipmunk.js	/^    var Space = cp.Space = function() {$/;"	f	lineno:3413	type:void function()
getCurrentTimeStep	chipmunk.js	/^    Space.prototype.getCurrentTimeStep = function() { return this.curr_dt; };$/;"	f	lineno:3488	type:void function()
isLocked	chipmunk.js	/^    Space.prototype.isLocked = function()$/;"	f	lineno:3491	type:void function()
assertSpaceUnlocked	chipmunk.js	/^    var assertSpaceUnlocked = function(space)$/;"	f	lineno:3496	type:void function(Object)
addCollisionHandler	chipmunk.js	/^\/\/\/ You can pass null for any function you don't want to implement.$/;"	f	lineno:3505	type:void function(any, any, any, any, any, any)
removeCollisionHandler	chipmunk.js	/^\/\/\/ Unset a collision handler.$/;"	f	lineno:3524	type:void function(any, any)
setDefaultCollisionHandler	chipmunk.js	/^\/\/\/ You can pass null for any function you don't want to implement.$/;"	f	lineno:3535	type:void function(any, any, any, any)
lookupHandler	chipmunk.js	/^$/;"	f	lineno:3548	type:void function(any, any)
addShape	chipmunk.js	/^\/\/\/ If the shape is attached to a static body, it will be added as a static shape.$/;"	f	lineno:3557	type:any function(any)
addStaticShape	chipmunk.js	/^\/\/\/ Explicity add a shape as a static shape to the simulation.$/;"	f	lineno:3576	type:any function(any)
addBody	chipmunk.js	/^\/\/\/ Add a rigid body to the simulation.$/;"	f	lineno:3592	type:any function(any)
addConstraint	chipmunk.js	/^\/\/\/ Add a constraint to the simulation.$/;"	f	lineno:3605	type:any function(any)
filterArbiters	chipmunk.js	/^$/;"	f	lineno:3624	type:void function(any, any)
removeShape	chipmunk.js	/^\/\/\/ Remove a collision shape from the simulation.$/;"	f	lineno:3649	type:void function(any)
removeStaticShape	chipmunk.js	/^\/\/\/ Remove a collision shape added using addStaticShape() from the simulation.$/;"	f	lineno:3668	type:void function(any)
removeBody	chipmunk.js	/^\/\/\/ Remove a rigid body from the simulation.$/;"	f	lineno:3683	type:void function(any)
removeConstraint	chipmunk.js	/^\/\/\/ Remove a constraint from the simulation.$/;"	f	lineno:3696	type:void function(any)
containsShape	chipmunk.js	/^\/\/\/ Test if a collision shape has been added to the space.$/;"	f	lineno:3712	type:boolean function(any)
containsBody	chipmunk.js	/^\/\/\/ Test if a rigid body has been added to the space.$/;"	f	lineno:3718	type:boolean function(any)
containsConstraint	chipmunk.js	/^\/\/\/ Test if a constraint has been added to the space.$/;"	f	lineno:3724	type:boolean function(any)
uncacheArbiter	chipmunk.js	/^$/;"	f	lineno:3729	type:void function(any)
eachBody	chipmunk.js	/^\/\/\/ Call @c func for each body in the space.$/;"	f	lineno:3739	type:void function(any)
eachShape	chipmunk.js	/^\/\/\/ Call @c func for each shape in the space.$/;"	f	lineno:3763	type:void function(any)
eachConstraint	chipmunk.js	/^\/\/\/ Call @c func for each shape in the space.$/;"	f	lineno:3772	type:void function(any)
reindexStatic	chipmunk.js	/^\/\/\/ Update the collision detection info for the static shapes in the space.$/;"	f	lineno:3786	type:void function()
%anonymous_function	chipmunk.js	/^$/;"	f	lineno:3790	type:void function(any)
reindexShape	chipmunk.js	/^\/\/\/ Update the collision detection data for a specific shape in the space.$/;"	f	lineno:3798	type:void function(any)
reindexShapesForBody	chipmunk.js	/^\/\/\/ Update the collision detection data for all shapes attached to a body.$/;"	f	lineno:3811	type:void function(any)
useSpatialHash	chipmunk.js	/^\/\/\/ Switch the space to use a spatial has as it's spatial index.$/;"	f	lineno:3819	type:void function(any, any)
%anonymous_function	chipmunk.js	/^$/;"	f	lineno:3826	type:void function(any)
%anonymous_function	chipmunk.js	/^        });$/;"	f	lineno:3829	type:void function(any)
activateBody	chipmunk.js	/^$/;"	f	lineno:3860	type:void function(any)
deactivateBody	chipmunk.js	/^$/;"	f	lineno:3904	type:void function(any)
componentRoot	chipmunk.js	/^$/;"	f	lineno:3935	type:<undefined | null> function(<Body | Object>)
componentActivate	chipmunk.js	/^$/;"	f	lineno:3940	type:void function(null)
activate	chipmunk.js	/^$/;"	f	lineno:3961	type:void function()
activateStatic	chipmunk.js	/^$/;"	f	lineno:3969	type:void function(any)
pushArbiter	chipmunk.js	/^$/;"	f	lineno:3982	type:void function(any)
componentAdd	chipmunk.js	/^$/;"	f	lineno:4009	type:void function(any, any)
floodFillComponent	chipmunk.js	/^$/;"	f	lineno:4018	type:void function(any, any)
componentActive	chipmunk.js	/^$/;"	f	lineno:4038	type:boolean function(any, undefined)
processComponents	chipmunk.js	/^$/;"	f	lineno:4047	type:void function(any)
sleep	chipmunk.js	/^$/;"	f	lineno:4130	type:void function()
sleepWithGroup	chipmunk.js	/^$/;"	f	lineno:4135	type:void function(any)
activateShapesTouchingShape	chipmunk.js	/^$/;"	f	lineno:4172	type:void function(any)
%anonymous_function	chipmunk.js	/^        if(this.sleepTimeThreshold !== Infinity){$/;"	f	lineno:4174	type:void function(any, any)
pointQuery	chipmunk.js	/^\/\/\/ Query the space at a point and call @c func for each shape found.$/;"	f	lineno:4202	type:void function(any, any, any, any)
helper	chipmunk.js	/^    {$/;"	f	lineno:4204	type:void function(any)
pointQueryFirst	chipmunk.js	/^\/\/\/ Query the space at a point and return the first shape found. Returns null if no shapes were found.$/;"	f	lineno:4220	type:null function(any, any, any)
%anonymous_function	chipmunk.js	/^        var outShape = null;$/;"	f	lineno:4223	type:void function(any)
segmentQuery	chipmunk.js	/^\/\/\/ Perform a directed line segment query (like a raycast) against the space calling @c func for each shape intersected.$/;"	f	lineno:4231	type:void function(any, any, any, any, any)
helper	chipmunk.js	/^    {$/;"	f	lineno:4233	type:number function(any)
segmentQueryFirst	chipmunk.js	/^\/\/\/ Returns null if no shapes were hit.$/;"	f	lineno:4254	type:null function(any, any, any, any)
helper	chipmunk.js	/^$/;"	f	lineno:4258	type:number function(any)
bbQuery	chipmunk.js	/^\/\/\/ Only the shape's bounding boxes are checked for overlap, not their full shape.$/;"	f	lineno:4281	type:void function(any, any, any, any)
helper	chipmunk.js	/^    {$/;"	f	lineno:4283	type:void function(any)
shapeQuery	chipmunk.js	/^\/\/\/ Query a space for any shapes overlapping the given shape and call @c func for each shape found.$/;"	f	lineno:4299	type:boolean function(any, any)
helper	chipmunk.js	/^$/;"	f	lineno:4312	type:void function(any)
addPostStepCallback	chipmunk.js	/^\/\/\/ Schedule a post-step callback to be called when cpSpaceStep() finishes.$/;"	f	lineno:4377	type:void function(any)
runPostStepCallbacks	chipmunk.js	/^$/;"	f	lineno:4386	type:void function()
lock	chipmunk.js	/^$/;"	f	lineno:4398	type:void function()
unlock	chipmunk.js	/^$/;"	f	lineno:4403	type:void function(any)
makeCollideShapes	chipmunk.js	/^\/\/ Callback from the spatial hash.$/;"	f	lineno:4509	type:void function(any, any) function()
%anonymous_function	chipmunk.js	/^        var space_ = this;$/;"	f	lineno:4513	type:void function(any, any)
arbiterSetFilter	chipmunk.js	/^\/\/ Hashset filter func to throw away old arbiters.$/;"	f	lineno:4588	type:boolean function(any)
updateFunc	chipmunk.js	/^$/;"	f	lineno:4623	type:void function(any)
step	chipmunk.js	/^\/\/\/ Step the space forward in time by @c dt.$/;"	f	lineno:4630	type:void function(any)
relative_velocity	chipmunk.js	/^\/\/ a and b are bodies.$/;"	f	lineno:4769	type:Vect function(undefined, undefined, undefined, undefined)
normal_relative_velocity	chipmunk.js	/^$/;"	f	lineno:4782	type:number function(undefined, undefined, undefined, undefined, undefined)
apply_impulse	chipmunk.js	/^$/;"	f	lineno:4805	type:void function(<undefined | Object>, number, number, <undefined | Vect>)
apply_impulses	chipmunk.js	/^$/;"	f	lineno:4813	type:void function(undefined, undefined, <undefined | Vect>, <undefined | Vect>, number, number)
apply_bias_impulse	chipmunk.js	/^$/;"	f	lineno:4819	type:void function(undefined, number, number, any)
k_scalar_body	chipmunk.js	/^$/;"	f	lineno:4834	type:any function(undefined, Vect, Vect)
k_scalar	chipmunk.js	/^$/;"	f	lineno:4840	type:any function(undefined, undefined, Vect, Vect, Vect)
k_tensor	chipmunk.js	/^\/\/ k1 and k2 are modified by the function to contain the outputs.$/;"	f	lineno:4849	type:void function(undefined, undefined, Vect, Vect, undefined, undefined)
mult_k	chipmunk.js	/^$/;"	f	lineno:4886	type:Vect function(Vect, undefined, undefined)
bias_coef	chipmunk.js	/^$/;"	f	lineno:4891	type:number function(undefined, any)
Constraint	chipmunk.js	/^\/\/ a and b are bodies that the constraint applies to.$/;"	f	lineno:4920	type:void function(any, any)
activateBodies	chipmunk.js	/^$/;"	f	lineno:4942	type:void function()
preStep	chipmunk.js	/^\/\/\/ These methods are overridden by the constraint itself.$/;"	f	lineno:4949	type:void function(any)
applyCachedImpulse	chipmunk.js	/^    Constraint.prototype.preStep = function(dt) {};$/;"	f	lineno:4950	type:void function(any)
applyImpulse	chipmunk.js	/^    Constraint.prototype.applyCachedImpulse = function(dt_coef) {};$/;"	f	lineno:4951	type:void function()
getImpulse	chipmunk.js	/^    Constraint.prototype.applyImpulse = function() {};$/;"	f	lineno:4952	type:number function()
preSolve	chipmunk.js	/^\/\/\/ Animate your joint anchors, update your motor torque, etc.$/;"	f	lineno:4957	type:void function(any)
postSolve	chipmunk.js	/^\/\/\/ Use the applied impulse to perform effects like breakable joints.$/;"	f	lineno:4962	type:void function(any)
next	chipmunk.js	/^$/;"	f	lineno:4964	type:void function(any)
PinJoint	chipmunk.js	/^$/;"	f	lineno:4990	type:void function(any, any, any, any)
preStep	chipmunk.js	/^$/;"	f	lineno:5014	type:void function(any)
applyCachedImpulse	chipmunk.js	/^$/;"	f	lineno:5037	type:void function(any)
applyImpulse	chipmunk.js	/^$/;"	f	lineno:5043	type:void function()
getImpulse	chipmunk.js	/^$/;"	f	lineno:5062	type:number function()
SlideJoint	chipmunk.js	/^$/;"	f	lineno:5088	type:void function(any, any, any, any, any, any)
preStep	chipmunk.js	/^$/;"	f	lineno:5106	type:void function(any)
applyCachedImpulse	chipmunk.js	/^$/;"	f	lineno:5139	type:void function(any)
applyImpulse	chipmunk.js	/^$/;"	f	lineno:5145	type:void function()
getImpulse	chipmunk.js	/^$/;"	f	lineno:5170	type:number function()
PivotJoint	chipmunk.js	/^\/\/ Pivot joints can also be created with (a, b, pivot);$/;"	f	lineno:5197	type:void function(any, any, any, any)
preStep	chipmunk.js	/^$/;"	f	lineno:5223	type:void function(any)
applyCachedImpulse	chipmunk.js	/^$/;"	f	lineno:5242	type:void function(any)
applyImpulse	chipmunk.js	/^$/;"	f	lineno:5247	type:void function()
getImpulse	chipmunk.js	/^$/;"	f	lineno:5267	type:number function()
GrooveJoint	chipmunk.js	/^$/;"	f	lineno:5293	type:void function(any, any, any, any, any)
preStep	chipmunk.js	/^$/;"	f	lineno:5316	type:void function(any)
applyCachedImpulse	chipmunk.js	/^$/;"	f	lineno:5357	type:void function(any)
grooveConstrain	chipmunk.js	/^$/;"	f	lineno:5362	type:Vect function(any)
applyImpulse	chipmunk.js	/^$/;"	f	lineno:5368	type:void function()
getImpulse	chipmunk.js	/^$/;"	f	lineno:5387	type:number function()
setGrooveA	chipmunk.js	/^$/;"	f	lineno:5392	type:void function(any)
setGrooveB	chipmunk.js	/^$/;"	f	lineno:5400	type:void function(any)
defaultSpringForce	chipmunk.js	/^$/;"	f	lineno:5429	type:number function(any, any)
DampedSpring	chipmunk.js	/^$/;"	f	lineno:5433	type:void function(any, any, any, any, any, any, any)
preStep	chipmunk.js	/^$/;"	f	lineno:5454	type:void function(any)
applyCachedImpulse	chipmunk.js	/^$/;"	f	lineno:5478	type:void function(any)
applyImpulse	chipmunk.js	/^$/;"	f	lineno:5480	type:void function()
getImpulse	chipmunk.js	/^$/;"	f	lineno:5500	type:number function()
defaultSpringTorque	chipmunk.js	/^$/;"	f	lineno:5526	type:number function(any, any)
DampedRotarySpring	chipmunk.js	/^$/;"	f	lineno:5530	type:void function(any, any, any, any, any)
preStep	chipmunk.js	/^$/;"	f	lineno:5546	type:void function(any)
applyImpulse	chipmunk.js	/^$/;"	f	lineno:5566	type:void function()
RotaryLimitJoint	chipmunk.js	/^$/;"	f	lineno:5608	type:void function(any, any, any, any)
preStep	chipmunk.js	/^$/;"	f	lineno:5622	type:void function(any)
applyCachedImpulse	chipmunk.js	/^$/;"	f	lineno:5649	type:void function(any)
applyImpulse	chipmunk.js	/^$/;"	f	lineno:5659	type:void function()
getImpulse	chipmunk.js	/^$/;"	f	lineno:5684	type:number function()
RatchetJoint	chipmunk.js	/^$/;"	f	lineno:5710	type:void function(any, any, any, any)
preStep	chipmunk.js	/^$/;"	f	lineno:5726	type:void function(any)
applyCachedImpulse	chipmunk.js	/^$/;"	f	lineno:5759	type:void function(any)
applyImpulse	chipmunk.js	/^$/;"	f	lineno:5769	type:void function()
getImpulse	chipmunk.js	/^$/;"	f	lineno:5791	type:number function(any)
GearJoint	chipmunk.js	/^$/;"	f	lineno:5817	type:void function(any, any, any, any)
preStep	chipmunk.js	/^$/;"	f	lineno:5832	type:void function(any)
applyCachedImpulse	chipmunk.js	/^$/;"	f	lineno:5848	type:void function(any)
applyImpulse	chipmunk.js	/^$/;"	f	lineno:5858	type:void function()
getImpulse	chipmunk.js	/^$/;"	f	lineno:5877	type:number function()
setRatio	chipmunk.js	/^$/;"	f	lineno:5882	type:void function(any)
SimpleMotor	chipmunk.js	/^$/;"	f	lineno:5910	type:void function(any, any, any)
preStep	chipmunk.js	/^$/;"	f	lineno:5923	type:void function(any)
applyCachedImpulse	chipmunk.js	/^$/;"	f	lineno:5932	type:void function(any)
applyImpulse	chipmunk.js	/^$/;"	f	lineno:5942	type:void function()
getImpulse	chipmunk.js	/^$/;"	f	lineno:5961	type:number function()
